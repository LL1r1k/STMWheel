
USBWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ba8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed4  08018cb8  08018cb8  00028cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019b8c  08019b8c  000308f8  2**0
                  CONTENTS
  4 .ARM          00000000  08019b8c  08019b8c  000308f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019b8c  08019b8c  000308f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08019b8c  08019b8c  00029b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08019b98  08019b98  00029b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008f8  20000000  08019ba0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018ac  200008f8  0801a498  000308f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200021a4  0801a498  000321a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000308f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00071c95  00000000  00000000  00030921  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b360  00000000  00000000  000a25b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002d38  00000000  00000000  000ad918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002a60  00000000  00000000  000b0650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024177  00000000  00000000  000b30b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002aab8  00000000  00000000  000d7227  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6f86  00000000  00000000  00101cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a8c65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e974  00000000  00000000  001a8ce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200008f8 	.word	0x200008f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08018ca0 	.word	0x08018ca0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200008fc 	.word	0x200008fc
 800014c:	08018ca0 	.word	0x08018ca0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <cppmain>:
extern uint16_t BUF_DMA [ARRAY_LEN];
extern TIM_HandleTypeDef htim2;

USBD_HandleTypeDef hUsbDeviceFS;

void cppmain() {
 8001148:	b598      	push	{r3, r4, r7, lr}
 800114a:	af00      	add	r7, sp, #0

	ws2812_init();
 800114c:	f010 fc66 	bl	8011a1c <_Z11ws2812_initv>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8001150:	f44f 735e 	mov.w	r3, #888	; 0x378
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <cppmain+0x5c>)
 8001156:	2100      	movs	r1, #0
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <cppmain+0x60>)
 800115a:	f004 feb9 	bl	8005ed0 <HAL_TIM_PWM_Start_DMA>
	HAL_ADC_Start_DMA(&HADC, ADC_BUF, ADC_CHANNELS);
 800115e:	2202      	movs	r2, #2
 8001160:	4912      	ldr	r1, [pc, #72]	; (80011ac <cppmain+0x64>)
 8001162:	4813      	ldr	r0, [pc, #76]	; (80011b0 <cppmain+0x68>)
 8001164:	f001 f928 	bl	80023b8 <HAL_ADC_Start_DMA>

	mainclass = new FFBWheel();
 8001168:	20bc      	movs	r0, #188	; 0xbc
 800116a:	f013 f9c9 	bl	8014500 <_Znwj>
 800116e:	4603      	mov	r3, r0
 8001170:	461c      	mov	r4, r3
 8001172:	4620      	mov	r0, r4
 8001174:	f00b f82c 	bl	800c1d0 <_ZN8FFBWheelC1Ev>
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <cppmain+0x6c>)
 800117a:	601c      	str	r4, [r3, #0]
	mainclass->usbInit();
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <cppmain+0x6c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f00b fd03 	bl	800cb8c <_ZN8FFBWheel7usbInitEv>

	while(running){
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <cppmain+0x70>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <cppmain+0x56>
		mainclass->update();
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <cppmain+0x6c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f00b fa10 	bl	800c5b8 <_ZN8FFBWheel6updateEv>
		updateLeds();
 8001198:	f010 fc1e 	bl	80119d8 <_Z10updateLedsv>
	while(running){
 800119c:	e7f3      	b.n	8001186 <cppmain+0x3e>
	}

}
 800119e:	bf00      	nop
 80011a0:	bd98      	pop	{r3, r4, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000b8c 	.word	0x20000b8c
 80011a8:	200016dc 	.word	0x200016dc
 80011ac:	20000b64 	.word	0x20000b64
 80011b0:	20001628 	.word	0x20001628
 80011b4:	20000914 	.word	0x20000914
 80011b8:	20000000 	.word	0x20000000

080011bc <EE_Format>:

//##########################################################################################################
//##########################################################################################################
//##########################################################################################################
bool	EE_Format(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
	uint32_t	error;
	HAL_FLASH_Unlock();
 80011c2:	f001 ff3f 	bl	8003044 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
	#if ( _EEPROM_F1_LOW_DESTINY==1 || _EEPROM_F1_MEDIUM_DESTINY==1 || _EEPROM_F1_HIGH_DESTINY==1 )
	flashErase.Banks = FLASH_BANK_1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
	#endif
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <EE_Format+0x50>)
 80011d0:	60fb      	str	r3, [r7, #12]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80011d6:	f107 0214 	add.w	r2, r7, #20
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 f818 	bl	8003214 <HAL_FLASHEx_Erase>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <EE_Format+0x42>
	{
		HAL_FLASH_Lock();
 80011ea:	f001 ff51 	bl	8003090 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d001      	beq.n	80011fa <EE_Format+0x3e>
			return false;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e004      	b.n	8001204 <EE_Format+0x48>
		else
			return true;	
 80011fa:	2301      	movs	r3, #1
 80011fc:	e002      	b.n	8001204 <EE_Format+0x48>
	}
	HAL_FLASH_Lock();
 80011fe:	f001 ff47 	bl	8003090 <HAL_FLASH_Lock>
	return false;	
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0801fc00 	.word	0x0801fc00

08001210 <EE_Reads>:
	HAL_FLASH_Lock();
	return true;
}
//##########################################################################################################
bool EE_Reads(uint16_t StartVirtualAddress,uint16_t HowManyToRead,uint32_t* Data)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
 800121c:	460b      	mov	r3, r1
 800121e:	80bb      	strh	r3, [r7, #4]
	if((StartVirtualAddress+HowManyToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8001220:	88fa      	ldrh	r2, [r7, #6]
 8001222:	88bb      	ldrh	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800122a:	dd01      	ble.n	8001230 <EE_Reads+0x20>
		return false;
 800122c:	2300      	movs	r3, #0
 800122e:	e018      	b.n	8001262 <EE_Reads+0x52>
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	81fb      	strh	r3, [r7, #14]
 8001234:	e00e      	b.n	8001254 <EE_Reads+0x44>
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800123e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	601a      	str	r2, [r3, #0]
		Data++;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3304      	adds	r3, #4
 800124c:	603b      	str	r3, [r7, #0]
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	3301      	adds	r3, #1
 8001252:	81fb      	strh	r3, [r7, #14]
 8001254:	89fa      	ldrh	r2, [r7, #14]
 8001256:	88b9      	ldrh	r1, [r7, #4]
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	440b      	add	r3, r1
 800125c:	429a      	cmp	r2, r3
 800125e:	dbea      	blt.n	8001236 <EE_Reads+0x26>
	}
	return true;
 8001260:	2301      	movs	r3, #1
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <EE_Writes>:
//##########################################################################################################
bool 	EE_Writes(uint16_t StartVirtualAddress,uint16_t HowManyToWrite,uint32_t* Data)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	603a      	str	r2, [r7, #0]
 8001276:	80fb      	strh	r3, [r7, #6]
 8001278:	460b      	mov	r3, r1
 800127a:	80bb      	strh	r3, [r7, #4]
	if((StartVirtualAddress+HowManyToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001286:	dd01      	ble.n	800128c <EE_Writes+0x20>
		return false;
 8001288:	2300      	movs	r3, #0
 800128a:	e02b      	b.n	80012e4 <EE_Writes+0x78>
		Data++;
	}	
	if(EE_Format()==false)
		return false;
	#endif
	HAL_FLASH_Unlock();
 800128c:	f001 feda 	bl	8003044 <HAL_FLASH_Unlock>
			HAL_FLASH_Lock();
			return false;
		}
	}
	#else
	HAL_FLASH_Unlock();
 8001290:	f001 fed8 	bl	8003044 <HAL_FLASH_Unlock>
	for(uint16_t i=0; i<HowManyToWrite ; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	81fb      	strh	r3, [r7, #14]
 8001298:	e01d      	b.n	80012d6 <EE_Writes+0x6a>
	{		
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,((i+StartVirtualAddress)*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)Data[i])!=HAL_OK)
 800129a:	89fa      	ldrh	r2, [r7, #14]
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80012a6:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f04f 0400 	mov.w	r4, #0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	2002      	movs	r0, #2
 80012be:	f001 fe51 	bl	8002f64 <HAL_FLASH_Program>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <EE_Writes+0x64>
		{
			HAL_FLASH_Lock();
 80012c8:	f001 fee2 	bl	8003090 <HAL_FLASH_Lock>
			return false;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e009      	b.n	80012e4 <EE_Writes+0x78>
	for(uint16_t i=0; i<HowManyToWrite ; i++)
 80012d0:	89fb      	ldrh	r3, [r7, #14]
 80012d2:	3301      	adds	r3, #1
 80012d4:	81fb      	strh	r3, [r7, #14]
 80012d6:	89fa      	ldrh	r2, [r7, #14]
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3dd      	bcc.n	800129a <EE_Writes+0x2e>
		}
	}	
	#endif
	HAL_FLASH_Lock();
 80012de:	f001 fed7 	bl	8003090 <HAL_FLASH_Lock>
	return true;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012f0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <__NVIC_SystemReset+0x20>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012fc:	4903      	ldr	r1, [pc, #12]	; (800130c <__NVIC_SystemReset+0x20>)
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_SystemReset+0x24>)
 8001300:	4313      	orrs	r3, r2
 8001302:	60cb      	str	r3, [r1, #12]
 8001304:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <__NVIC_SystemReset+0x1c>
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0004 	.word	0x05fa0004

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001318:	f000 ff14 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131c:	f000 f815 	bl	800134a <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001320:	f000 fada 	bl	80018d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001324:	f000 fab2 	bl	800188c <MX_DMA_Init>
  MX_ADC1_Init();
 8001328:	f000 f86c 	bl	8001404 <MX_ADC1_Init>
  MX_TIM3_Init();
 800132c:	f000 fa06 	bl	800173c <MX_TIM3_Init>
  MX_USB_PCD_Init();
 8001330:	f000 faa6 	bl	8001880 <MX_USB_PCD_Init>
  MX_TIM4_Init();
 8001334:	f000 fa50 	bl	80017d8 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001338:	f000 f8b2 	bl	80014a0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800133c:	f000 f8de 	bl	80014fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001340:	f000 f988 	bl	8001654 <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cppmain();
 8001344:	f7ff ff00 	bl	8001148 <cppmain>
 8001348:	e7fc      	b.n	8001344 <main+0x30>

0800134a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b094      	sub	sp, #80	; 0x50
 800134e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001354:	2228      	movs	r2, #40	; 0x28
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f016 fb04 	bl	8017966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137a:	2301      	movs	r3, #1
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001394:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001396:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800139a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 ffd7 	bl	8005354 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ac:	f000 fb1c 	bl	80019e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2102      	movs	r1, #2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f004 fa41 	bl	8005854 <HAL_RCC_ClockConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013d8:	f000 fb06 	bl	80019e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80013dc:	2312      	movs	r3, #18
 80013de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fbb9 	bl	8005b64 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013f8:	f000 faf6 	bl	80019e8 <Error_Handler>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3750      	adds	r7, #80	; 0x50
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <MX_ADC1_Init+0x94>)
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <MX_ADC1_Init+0x98>)
 8001418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <MX_ADC1_Init+0x94>)
 800141c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001420:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <MX_ADC1_Init+0x94>)
 8001424:	2201      	movs	r2, #1
 8001426:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_ADC1_Init+0x94>)
 800142a:	2200      	movs	r2, #0
 800142c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_ADC1_Init+0x94>)
 8001430:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_ADC1_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_ADC1_Init+0x94>)
 800143e:	2202      	movs	r2, #2
 8001440:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001442:	4815      	ldr	r0, [pc, #84]	; (8001498 <MX_ADC1_Init+0x94>)
 8001444:	f000 fee0 	bl	8002208 <HAL_ADC_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800144e:	f000 facb 	bl	80019e8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001456:	2301      	movs	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800145a:	2307      	movs	r3, #7
 800145c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_ADC1_Init+0x94>)
 8001464:	f001 f898 	bl	8002598 <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800146e:	f000 fabb 	bl	80019e8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001472:	2301      	movs	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001476:	2302      	movs	r3, #2
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_ADC1_Init+0x94>)
 8001480:	f001 f88a 	bl	8002598 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800148a:	f000 faad 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20001628 	.word	0x20001628
 800149c:	40012400 	.word	0x40012400

080014a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <MX_I2C1_Init+0x54>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <MX_I2C1_Init+0x58>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_I2C1_Init+0x50>)
 80014de:	f002 f8fb 	bl	80036d8 <HAL_I2C_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014e8:	f000 fa7e 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20001594 	.word	0x20001594
 80014f4:	40005400 	.word	0x40005400
 80014f8:	000186a0 	.word	0x000186a0

080014fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b096      	sub	sp, #88	; 0x58
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2220      	movs	r2, #32
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f016 fa16 	bl	8017966 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <MX_TIM1_Init+0x150>)
 800153c:	4a44      	ldr	r2, [pc, #272]	; (8001650 <MX_TIM1_Init+0x154>)
 800153e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001540:	4b42      	ldr	r3, [pc, #264]	; (800164c <MX_TIM1_Init+0x150>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <MX_TIM1_Init+0x150>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 800154c:	4b3f      	ldr	r3, [pc, #252]	; (800164c <MX_TIM1_Init+0x150>)
 800154e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001552:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <MX_TIM1_Init+0x150>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <MX_TIM1_Init+0x150>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b3a      	ldr	r3, [pc, #232]	; (800164c <MX_TIM1_Init+0x150>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001566:	4839      	ldr	r0, [pc, #228]	; (800164c <MX_TIM1_Init+0x150>)
 8001568:	f004 fbb2 	bl	8005cd0 <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001572:	f000 fa39 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800157c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001580:	4619      	mov	r1, r3
 8001582:	4832      	ldr	r0, [pc, #200]	; (800164c <MX_TIM1_Init+0x150>)
 8001584:	f005 f806 	bl	8006594 <HAL_TIM_ConfigClockSource>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800158e:	f000 fa2b 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001592:	482e      	ldr	r0, [pc, #184]	; (800164c <MX_TIM1_Init+0x150>)
 8001594:	f004 fbea 	bl	8005d6c <HAL_TIM_PWM_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800159e:	f000 fa23 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ae:	4619      	mov	r1, r3
 80015b0:	4826      	ldr	r0, [pc, #152]	; (800164c <MX_TIM1_Init+0x150>)
 80015b2:	f005 fc03 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015bc:	f000 fa14 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c0:	2360      	movs	r3, #96	; 0x60
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4819      	ldr	r0, [pc, #100]	; (800164c <MX_TIM1_Init+0x150>)
 80015e6:	f004 ff0f 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015f0:	f000 f9fa 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	2204      	movs	r2, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4813      	ldr	r0, [pc, #76]	; (800164c <MX_TIM1_Init+0x150>)
 80015fe:	f004 ff03 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001608:	f000 f9ee 	bl	80019e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001624:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <MX_TIM1_Init+0x150>)
 8001630:	f005 fc08 	bl	8006e44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800163a:	f000 f9d5 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800163e:	4803      	ldr	r0, [pc, #12]	; (800164c <MX_TIM1_Init+0x150>)
 8001640:	f000 fb80 	bl	8001d44 <HAL_TIM_MspPostInit>

}
 8001644:	bf00      	nop
 8001646:	3758      	adds	r7, #88	; 0x58
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000169c 	.word	0x2000169c
 8001650:	40012c00 	.word	0x40012c00

08001654 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	; 0x38
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <MX_TIM2_Init+0xe4>)
 8001686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <MX_TIM2_Init+0xe4>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <MX_TIM2_Init+0xe4>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <MX_TIM2_Init+0xe4>)
 800169a:	2259      	movs	r2, #89	; 0x59
 800169c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <MX_TIM2_Init+0xe4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b24      	ldr	r3, [pc, #144]	; (8001738 <MX_TIM2_Init+0xe4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016aa:	4823      	ldr	r0, [pc, #140]	; (8001738 <MX_TIM2_Init+0xe4>)
 80016ac:	f004 fb10 	bl	8005cd0 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80016b6:	f000 f997 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c4:	4619      	mov	r1, r3
 80016c6:	481c      	ldr	r0, [pc, #112]	; (8001738 <MX_TIM2_Init+0xe4>)
 80016c8:	f004 ff64 	bl	8006594 <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016d2:	f000 f989 	bl	80019e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d6:	4818      	ldr	r0, [pc, #96]	; (8001738 <MX_TIM2_Init+0xe4>)
 80016d8:	f004 fb48 	bl	8005d6c <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80016e2:	f000 f981 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	4619      	mov	r1, r3
 80016f4:	4810      	ldr	r0, [pc, #64]	; (8001738 <MX_TIM2_Init+0xe4>)
 80016f6:	f005 fb61 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001700:	f000 f972 	bl	80019e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001704:	2360      	movs	r3, #96	; 0x60
 8001706:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <MX_TIM2_Init+0xe4>)
 800171c:	f004 fe74 	bl	8006408 <HAL_TIM_PWM_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001726:	f000 f95f 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <MX_TIM2_Init+0xe4>)
 800172c:	f000 fb0a 	bl	8001d44 <HAL_TIM_MspPostInit>

}
 8001730:	bf00      	nop
 8001732:	3738      	adds	r7, #56	; 0x38
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200016dc 	.word	0x200016dc

0800173c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_TIM3_Init+0x94>)
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <MX_TIM3_Init+0x98>)
 800175c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_TIM3_Init+0x94>)
 8001760:	2247      	movs	r2, #71	; 0x47
 8001762:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_TIM3_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <MX_TIM3_Init+0x94>)
 800176c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001770:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <MX_TIM3_Init+0x94>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <MX_TIM3_Init+0x94>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800177e:	4814      	ldr	r0, [pc, #80]	; (80017d0 <MX_TIM3_Init+0x94>)
 8001780:	f004 faa6 	bl	8005cd0 <HAL_TIM_Base_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800178a:	f000 f92d 	bl	80019e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	4619      	mov	r1, r3
 800179a:	480d      	ldr	r0, [pc, #52]	; (80017d0 <MX_TIM3_Init+0x94>)
 800179c:	f004 fefa 	bl	8006594 <HAL_TIM_ConfigClockSource>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 f91f 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b2:	463b      	mov	r3, r7
 80017b4:	4619      	mov	r1, r3
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <MX_TIM3_Init+0x94>)
 80017b8:	f005 fb00 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017c2:	f000 f911 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200015e8 	.word	0x200015e8
 80017d4:	40000400 	.word	0x40000400

080017d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2224      	movs	r2, #36	; 0x24
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f016 f8bd 	bl	8017966 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <MX_TIM4_Init+0xa0>)
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <MX_TIM4_Init+0xa4>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_TIM4_Init+0xa0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001802:	2220      	movs	r2, #32
 8001804:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800180c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800181a:	2303      	movs	r3, #3
 800181c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001832:	2301      	movs	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001846:	f004 fc49 	bl	80060dc <HAL_TIM_Encoder_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001850:	f000 f8ca 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_TIM4_Init+0xa0>)
 8001862:	f005 faab 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800186c:	f000 f8bc 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3730      	adds	r7, #48	; 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20001554 	.word	0x20001554
 800187c:	40000800 	.word	0x40000800

08001880 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN USB_Init 2 */
#endif
  /* USER CODE END USB_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_DMA_Init+0x48>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <MX_DMA_Init+0x48>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6153      	str	r3, [r2, #20]
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <MX_DMA_Init+0x48>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	200b      	movs	r0, #11
 80018b0:	f001 f933 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018b4:	200b      	movs	r0, #11
 80018b6:	f001 f94c 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	200f      	movs	r0, #15
 80018c0:	f001 f92b 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018c4:	200f      	movs	r0, #15
 80018c6:	f001 f944 	bl	8002b52 <HAL_NVIC_EnableIRQ>

}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <MX_GPIO_Init+0xe8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <MX_GPIO_Init+0xe8>)
 80018f2:	f043 0310 	orr.w	r3, r3, #16
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <MX_GPIO_Init+0xe8>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001904:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <MX_GPIO_Init+0xe8>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a2d      	ldr	r2, [pc, #180]	; (80019c0 <MX_GPIO_Init+0xe8>)
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <MX_GPIO_Init+0xe8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <MX_GPIO_Init+0xe8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <MX_GPIO_Init+0xe8>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <MX_GPIO_Init+0xe8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <MX_GPIO_Init+0xe8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <MX_GPIO_Init+0xe8>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_GPIO_Init+0xe8>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001952:	481c      	ldr	r0, [pc, #112]	; (80019c4 <MX_GPIO_Init+0xec>)
 8001954:	f001 fe77 	bl	8003646 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2302      	movs	r3, #2
 8001968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	4814      	ldr	r0, [pc, #80]	; (80019c4 <MX_GPIO_Init+0xec>)
 8001972:	f001 fcf7 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN1_Pin */
  GPIO_InitStruct.Pin = DIN1_Pin;
 8001976:	2308      	movs	r3, #8
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197e:	2301      	movs	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIN1_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	4619      	mov	r1, r3
 8001988:	480f      	ldr	r0, [pc, #60]	; (80019c8 <MX_GPIO_Init+0xf0>)
 800198a:	f001 fceb 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = ENCODER_Z_Pin;
 800198e:	2320      	movs	r3, #32
 8001990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_GPIO_Init+0xf4>)
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	4619      	mov	r1, r3
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <MX_GPIO_Init+0xf0>)
 80019a2:	f001 fcdf 	bl	8003364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2017      	movs	r0, #23
 80019ac:	f001 f8b5 	bl	8002b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019b0:	2017      	movs	r0, #23
 80019b2:	f001 f8ce 	bl	8002b52 <HAL_NVIC_EnableIRQ>

}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40011000 	.word	0x40011000
 80019c8:	40010c00 	.word	0x40010c00
 80019cc:	10110000 	.word	0x10110000

080019d0 <RebootDFU>:

/* USER CODE BEGIN 4 */
void RebootDFU(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	*((unsigned long *)0x2001FFF0) = 0xDEADBEEF; // End of RAM
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <RebootDFU+0x10>)
 80019d6:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <RebootDFU+0x14>)
 80019d8:	601a      	str	r2, [r3, #0]
	NVIC_SystemReset();
 80019da:	f7ff fc87 	bl	80012ec <__NVIC_SystemReset>
 80019de:	bf00      	nop
 80019e0:	2001fff0 	.word	0x2001fff0
 80019e4:	deadbeef 	.word	0xdeadbeef

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_MspInit+0x5c>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6193      	str	r3, [r2, #24]
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_MspInit+0x60>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_MspInit+0x60>)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000

08001a58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a29      	ldr	r2, [pc, #164]	; (8001b18 <HAL_ADC_MspInit+0xc0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d14a      	bne.n	8001b0e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <HAL_ADC_MspInit+0xc4>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aac:	2303      	movs	r3, #3
 8001aae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481a      	ldr	r0, [pc, #104]	; (8001b20 <HAL_ADC_MspInit+0xc8>)
 8001ab8:	f001 fc54 	bl	8003364 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001abe:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_ADC_MspInit+0xd0>)
 8001ac0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ada:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001aec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001af4:	f001 f848 	bl	8002b88 <HAL_DMA_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001afe:	f7ff ff73 	bl	80019e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001b06:	621a      	str	r2, [r3, #32]
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_ADC_MspInit+0xcc>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40012400 	.word	0x40012400
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010800 	.word	0x40010800
 8001b24:	20001658 	.word	0x20001658
 8001b28:	40020008 	.word	0x40020008

08001b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <HAL_I2C_MspInit+0x90>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d132      	bne.n	8001bb2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <HAL_I2C_MspInit+0x94>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <HAL_I2C_MspInit+0x94>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_I2C_MspInit+0x94>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6a:	2312      	movs	r3, #18
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4812      	ldr	r0, [pc, #72]	; (8001bc4 <HAL_I2C_MspInit+0x98>)
 8001b7a:	f001 fbf3 	bl	8003364 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_I2C_MspInit+0x9c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
 8001b94:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_I2C_MspInit+0x9c>)
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_I2C_MspInit+0x94>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_I2C_MspInit+0x94>)
 8001ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_I2C_MspInit+0x94>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40005400 	.word	0x40005400
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010c00 	.word	0x40010c00
 8001bc8:	40010000 	.word	0x40010000

08001bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <HAL_TIM_Base_MspInit+0xd8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_TIM_Base_MspInit+0xdc>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <HAL_TIM_Base_MspInit+0xdc>)
 8001be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be8:	6193      	str	r3, [r2, #24]
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_TIM_Base_MspInit+0xdc>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bf6:	e051      	b.n	8001c9c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c00:	d133      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c1c:	4a24      	ldr	r2, [pc, #144]	; (8001cb0 <HAL_TIM_Base_MspInit+0xe4>)
 8001c1e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c22:	2210      	movs	r2, #16
 8001c24:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c38:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c42:	2220      	movs	r2, #32
 8001c44:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001c4c:	4817      	ldr	r0, [pc, #92]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c4e:	f000 ff9b 	bl	8002b88 <HAL_DMA_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_TIM_Base_MspInit+0x90>
      Error_Handler();
 8001c58:	f7ff fec6 	bl	80019e8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a13      	ldr	r2, [pc, #76]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <HAL_TIM_Base_MspInit+0xe0>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001c68:	e018      	b.n	8001c9c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_TIM_Base_MspInit+0xe8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d113      	bne.n	8001c9c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	61d3      	str	r3, [r2, #28]
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	201d      	movs	r0, #29
 8001c92:	f000 ff42 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c96:	201d      	movs	r0, #29
 8001c98:	f000 ff5b 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	20001510 	.word	0x20001510
 8001cb0:	40020058 	.word	0x40020058
 8001cb4:	40000400 	.word	0x40000400

08001cb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x80>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d12b      	bne.n	8001d30 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	61d3      	str	r3, [r2, #28]
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x84>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001d08:	23c0      	movs	r3, #192	; 0xc0
 8001d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4809      	ldr	r0, [pc, #36]	; (8001d40 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d1c:	f001 fb22 	bl	8003364 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	201e      	movs	r0, #30
 8001d26:	f000 fef8 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d2a:	201e      	movs	r0, #30
 8001d2c:	f000 ff11 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010c00 	.word	0x40010c00

08001d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a28      	ldr	r2, [pc, #160]	; (8001e00 <HAL_TIM_MspPostInit+0xbc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d119      	bne.n	8001d98 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_TIM_MspPostInit+0xc0>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_TIM_MspPostInit+0xc0>)
 8001d6a:	f043 0304 	orr.w	r3, r3, #4
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_TIM_MspPostInit+0xc0>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = MOTOR_B_Pin|MOTOR_A_Pin;
 8001d7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	481d      	ldr	r0, [pc, #116]	; (8001e08 <HAL_TIM_MspPostInit+0xc4>)
 8001d92:	f001 fae7 	bl	8003364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d96:	e02f      	b.n	8001df8 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da0:	d12a      	bne.n	8001df8 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_TIM_MspPostInit+0xc0>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_TIM_MspPostInit+0xc0>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6193      	str	r3, [r2, #24]
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_TIM_MspPostInit+0xc0>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480e      	ldr	r0, [pc, #56]	; (8001e08 <HAL_TIM_MspPostInit+0xc4>)
 8001dd0:	f001 fac8 	bl	8003364 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_TIM_MspPostInit+0xc8>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_TIM_MspPostInit+0xc8>)
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	6053      	str	r3, [r2, #4]
}
 8001df8:	bf00      	nop
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40012c00 	.word	0x40012c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	40010000 	.word	0x40010000

08001e10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_PCD_MspInit+0x44>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d113      	bne.n	8001e4a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_PCD_MspInit+0x48>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_PCD_MspInit+0x48>)
 8001e28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_PCD_MspInit+0x48>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2014      	movs	r0, #20
 8001e40:	f000 fe6b 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001e44:	2014      	movs	r0, #20
 8001e46:	f000 fe84 	bl	8002b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USB_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40005c00 	.word	0x40005c00
 8001e58:	40021000 	.word	0x40021000

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <HardFault_Handler+0x4>

08001e6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <MemManage_Handler+0x4>

08001e74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <BusFault_Handler+0x4>

08001e7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <UsageFault_Handler+0x4>

08001e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f000 f992 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <DMA1_Channel1_IRQHandler+0x10>)
 8001eb6:	f000 ff21 	bl	8002cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20001658 	.word	0x20001658

08001ec4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
  //HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_1);
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA1_Channel5_IRQHandler+0x10>)
 8001eca:	f000 ff17 	bl	8002cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20001510 	.word	0x20001510

08001ed8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001edc:	2020      	movs	r0, #32
 8001ede:	f001 fbe3 	bl	80036a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <TIM3_IRQHandler+0x10>)
 8001eee:	f004 f983 	bl	80061f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200015e8 	.word	0x200015e8

08001efc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <TIM4_IRQHandler+0x10>)
 8001f02:	f004 f979 	bl	80061f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20001554 	.word	0x20001554

08001f10 <USB_LP_CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 1 */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f16:	f002 fc42 	bl	800479e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000171c 	.word	0x2000171c

08001f24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	return 1;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <_kill>:

int _kill(int pid, int sig)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f3c:	f015 fc98 	bl	8017870 <__errno>
 8001f40:	4602      	mov	r2, r0
 8001f42:	2316      	movs	r3, #22
 8001f44:	6013      	str	r3, [r2, #0]
	return -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_exit>:

void _exit (int status)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffe7 	bl	8001f32 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f64:	e7fe      	b.n	8001f64 <_exit+0x12>

08001f66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e00a      	b.n	8001f8e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f78:	f3af 8000 	nop.w
 8001f7c:	4601      	mov	r1, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	60ba      	str	r2, [r7, #8]
 8001f84:	b2ca      	uxtb	r2, r1
 8001f86:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	dbf0      	blt.n	8001f78 <_read+0x12>
	}

return len;
 8001f96:	687b      	ldr	r3, [r7, #4]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e009      	b.n	8001fc6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	60ba      	str	r2, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dbf1      	blt.n	8001fb2 <_write+0x12>
	}
	return len;
 8001fce:	687b      	ldr	r3, [r7, #4]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <_close>:

int _close(int file)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	return -1;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffe:	605a      	str	r2, [r3, #4]
	return 0;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <_isatty>:

int _isatty(int file)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	return 1;
 8002014:	2301      	movs	r3, #1
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <_sbrk+0x50>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x16>
		heap_end = &end;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <_sbrk+0x50>)
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <_sbrk+0x54>)
 800204c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <_sbrk+0x50>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <_sbrk+0x50>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	466a      	mov	r2, sp
 800205e:	4293      	cmp	r3, r2
 8002060:	d907      	bls.n	8002072 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002062:	f015 fc05 	bl	8017870 <__errno>
 8002066:	4602      	mov	r2, r0
 8002068:	230c      	movs	r3, #12
 800206a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
 8002070:	e006      	b.n	8002080 <_sbrk+0x48>
	}

	heap_end += incr;
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <_sbrk+0x50>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a03      	ldr	r2, [pc, #12]	; (8002088 <_sbrk+0x50>)
 800207c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000b3c 	.word	0x20000b3c
 800208c:	200021a8 	.word	0x200021a8

08002090 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <SystemInit+0x5c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <SystemInit+0x5c>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <SystemInit+0x5c>)
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4911      	ldr	r1, [pc, #68]	; (80020ec <SystemInit+0x5c>)
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <SystemInit+0x60>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <SystemInit+0x5c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <SystemInit+0x5c>)
 80020b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <SystemInit+0x5c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SystemInit+0x5c>)
 80020c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <SystemInit+0x5c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <SystemInit+0x5c>)
 80020ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80020d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SystemInit+0x5c>)
 80020d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80020da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SystemInit+0x64>)
 80020de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40021000 	.word	0x40021000
 80020f0:	f8ff0000 	.word	0xf8ff0000
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80020f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80020fa:	e003      	b.n	8002104 <LoopCopyDataInit>

080020fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80020fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002100:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002102:	3104      	adds	r1, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002104:	480a      	ldr	r0, [pc, #40]	; (8002130 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002108:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800210a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800210c:	d3f6      	bcc.n	80020fc <CopyDataInit>
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002110:	e002      	b.n	8002118 <LoopFillZerobss>

08002112 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002114:	f842 3b04 	str.w	r3, [r2], #4

08002118 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800211a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800211c:	d3f9      	bcc.n	8002112 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800211e:	f7ff ffb7 	bl	8002090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002122:	f015 fbab 	bl	801787c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002126:	f7ff f8f5 	bl	8001314 <main>
  bx lr
 800212a:	4770      	bx	lr
  ldr r3, =_sidata
 800212c:	08019ba0 	.word	0x08019ba0
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002134:	200008f8 	.word	0x200008f8
  ldr r2, =_sbss
 8002138:	200008f8 	.word	0x200008f8
  ldr r3, = _ebss
 800213c:	200021a4 	.word	0x200021a4

08002140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_2_IRQHandler>
	...

08002144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_Init+0x28>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_Init+0x28>)
 800214e:	f043 0310 	orr.w	r3, r3, #16
 8002152:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 fcd5 	bl	8002b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff fc48 	bl	80019f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40022000 	.word	0x40022000

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fced 	bl	8002b6e <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 fcb5 	bl	8002b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000004 	.word	0x20000004
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	20000008 	.word	0x20000008

080021d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_IncTick+0x1c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_IncTick+0x20>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a03      	ldr	r2, [pc, #12]	; (80021f0 <HAL_IncTick+0x20>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	2000000c 	.word	0x2000000c
 80021f0:	20001988 	.word	0x20001988

080021f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b02      	ldr	r3, [pc, #8]	; (8002204 <HAL_GetTick+0x10>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20001988 	.word	0x20001988

08002208 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0be      	b.n	80023a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fc06 	bl	8001a58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 faed 	bl	800282c <ADC_ConversionStop_Disable>
 8002252:	4603      	mov	r3, r0
 8002254:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 8099 	bne.w	8002396 <HAL_ADC_Init+0x18e>
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 8095 	bne.w	8002396 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002274:	f023 0302 	bic.w	r3, r3, #2
 8002278:	f043 0202 	orr.w	r2, r3, #2
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002288:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7b1b      	ldrb	r3, [r3, #12]
 800228e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002290:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	4313      	orrs	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a0:	d003      	beq.n	80022aa <HAL_ADC_Init+0xa2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_ADC_Init+0xa8>
 80022aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ae:	e000      	b.n	80022b2 <HAL_ADC_Init+0xaa>
 80022b0:	2300      	movs	r3, #0
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7d1b      	ldrb	r3, [r3, #20]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d119      	bne.n	80022f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7b1b      	ldrb	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	035a      	lsls	r2, r3, #13
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e00b      	b.n	80022f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f043 0220 	orr.w	r2, r3, #32
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	430a      	orrs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_ADC_Init+0x1a8>)
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	430b      	orrs	r3, r1
 800231a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002324:	d003      	beq.n	800232e <HAL_ADC_Init+0x126>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d104      	bne.n	8002338 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	3b01      	subs	r3, #1
 8002334:	051b      	lsls	r3, r3, #20
 8002336:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	430a      	orrs	r2, r1
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_ADC_Init+0x1ac>)
 8002354:	4013      	ands	r3, r2
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	429a      	cmp	r2, r3
 800235a:	d10b      	bne.n	8002374 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002372:	e018      	b.n	80023a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f023 0312 	bic.w	r3, r3, #18
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002394:	e007      	b.n	80023a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	f043 0210 	orr.w	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	ffe1f7fd 	.word	0xffe1f7fd
 80023b4:	ff1f0efe 	.word	0xff1f0efe

080023b8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a64      	ldr	r2, [pc, #400]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d004      	beq.n	80023dc <HAL_ADC_Start_DMA+0x24>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a63      	ldr	r2, [pc, #396]	; (8002564 <HAL_ADC_Start_DMA+0x1ac>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d106      	bne.n	80023ea <HAL_ADC_Start_DMA+0x32>
 80023dc:	4b60      	ldr	r3, [pc, #384]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 80b3 	bne.w	8002550 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_Start_DMA+0x40>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0ae      	b.n	8002556 <HAL_ADC_Start_DMA+0x19e>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f9c1 	bl	8002788 <ADC_Enable>
 8002406:	4603      	mov	r3, r0
 8002408:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 809a 	bne.w	8002546 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <HAL_ADC_Start_DMA+0x1ac>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d105      	bne.n	800243c <HAL_ADC_Start_DMA+0x84>
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d115      	bne.n	8002468 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002452:	2b00      	cmp	r3, #0
 8002454:	d026      	beq.n	80024a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002466:	e01d      	b.n	80024a4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a39      	ldr	r2, [pc, #228]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_ADC_Start_DMA+0xd0>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a38      	ldr	r2, [pc, #224]	; (8002564 <HAL_ADC_Start_DMA+0x1ac>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d10d      	bne.n	80024a4 <HAL_ADC_Start_DMA+0xec>
 8002488:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HAL_ADC_Start_DMA+0x1a8>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	f023 0206 	bic.w	r2, r3, #6
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a25      	ldr	r2, [pc, #148]	; (8002568 <HAL_ADC_Start_DMA+0x1b0>)
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a24      	ldr	r2, [pc, #144]	; (800256c <HAL_ADC_Start_DMA+0x1b4>)
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a23      	ldr	r2, [pc, #140]	; (8002570 <HAL_ADC_Start_DMA+0x1b8>)
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0202 	mvn.w	r2, #2
 80024ec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a18      	ldr	r0, [r3, #32]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	334c      	adds	r3, #76	; 0x4c
 8002508:	4619      	mov	r1, r3
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f000 fb95 	bl	8002c3c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800251c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002520:	d108      	bne.n	8002534 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002530:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002532:	e00f      	b.n	8002554 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002542:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002544:	e006      	b.n	8002554 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800254e:	e001      	b.n	8002554 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002554:	7dfb      	ldrb	r3, [r7, #23]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40012400 	.word	0x40012400
 8002564:	40012800 	.word	0x40012800
 8002568:	080028a1 	.word	0x080028a1
 800256c:	0800291d 	.word	0x0800291d
 8002570:	08002939 	.word	0x08002939

08002574 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x20>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e0dc      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1da>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b06      	cmp	r3, #6
 80025c6:	d81c      	bhi.n	8002602 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b05      	subs	r3, #5
 80025da:	221f      	movs	r2, #31
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4019      	ands	r1, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b05      	subs	r3, #5
 80025f4:	fa00 f203 	lsl.w	r2, r0, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002600:	e03c      	b.n	800267c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d81c      	bhi.n	8002644 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b23      	subs	r3, #35	; 0x23
 800261c:	221f      	movs	r2, #31
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	4019      	ands	r1, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b23      	subs	r3, #35	; 0x23
 8002636:	fa00 f203 	lsl.w	r2, r0, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
 8002642:	e01b      	b.n	800267c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	3b41      	subs	r3, #65	; 0x41
 8002656:	221f      	movs	r2, #31
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	4019      	ands	r1, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b41      	subs	r3, #65	; 0x41
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b09      	cmp	r3, #9
 8002682:	d91c      	bls.n	80026be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68d9      	ldr	r1, [r3, #12]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	3b1e      	subs	r3, #30
 8002696:	2207      	movs	r2, #7
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	4019      	ands	r1, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6898      	ldr	r0, [r3, #8]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	3b1e      	subs	r3, #30
 80026b0:	fa00 f203 	lsl.w	r2, r0, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	e019      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6919      	ldr	r1, [r3, #16]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	2207      	movs	r2, #7
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	4019      	ands	r1, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6898      	ldr	r0, [r3, #8]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d003      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026fe:	2b11      	cmp	r3, #17
 8002700:	d132      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <HAL_ADC_ConfigChannel+0x1e4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d125      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d126      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002728:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b10      	cmp	r3, #16
 8002730:	d11a      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_ADC_ConfigChannel+0x1e8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a13      	ldr	r2, [pc, #76]	; (8002784 <HAL_ADC_ConfigChannel+0x1ec>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	0c9a      	lsrs	r2, r3, #18
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002748:	e002      	b.n	8002750 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_ADC_ConfigChannel+0x1b2>
 8002756:	e007      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	40012400 	.word	0x40012400
 8002780:	20000004 	.word	0x20000004
 8002784:	431bde83 	.word	0x431bde83

08002788 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d039      	beq.n	800281a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <ADC_Enable+0x9c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <ADC_Enable+0xa0>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027c4:	e002      	b.n	80027cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f9      	bne.n	80027c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027d2:	f7ff fd0f 	bl	80021f4 <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027d8:	e018      	b.n	800280c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027da:	f7ff fd0b 	bl	80021f4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d911      	bls.n	800280c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f043 0210 	orr.w	r2, r3, #16
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e007      	b.n	800281c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d1df      	bne.n	80027da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000004 	.word	0x20000004
 8002828:	431bde83 	.word	0x431bde83

0800282c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d127      	bne.n	8002896 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002856:	f7ff fccd 	bl	80021f4 <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800285c:	e014      	b.n	8002888 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800285e:	f7ff fcc9 	bl	80021f4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d90d      	bls.n	8002888 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	f043 0210 	orr.w	r2, r3, #16
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e007      	b.n	8002898 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d0e3      	beq.n	800285e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d127      	bne.n	800290a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028d4:	d115      	bne.n	8002902 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d111      	bne.n	8002902 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f00e fc42 	bl	801118c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002908:	e004      	b.n	8002914 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff fe22 	bl	8002574 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	f043 0204 	orr.w	r2, r3, #4
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff fe11 	bl	8002586 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <__NVIC_SetPriorityGrouping>:
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_GetPriorityGrouping>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <__NVIC_GetPriorityGrouping+0x18>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 0307 	and.w	r3, r3, #7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_EnableIRQ>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db0b      	blt.n	80029fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	4906      	ldr	r1, [pc, #24]	; (8002a04 <__NVIC_EnableIRQ+0x34>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2001      	movs	r0, #1
 80029f2:	fa00 f202 	lsl.w	r2, r0, r2
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_SetPriority>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad0:	d301      	bcc.n	8002ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00f      	b.n	8002af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <SysTick_Config+0x40>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ade:	210f      	movs	r1, #15
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f7ff ff90 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <SysTick_Config+0x40>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <SysTick_Config+0x40>)
 8002af0:	2207      	movs	r2, #7
 8002af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	e000e010 	.word	0xe000e010

08002b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ff2d 	bl	800296c <__NVIC_SetPriorityGrouping>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2c:	f7ff ff42 	bl	80029b4 <__NVIC_GetPriorityGrouping>
 8002b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff ff90 	bl	8002a5c <NVIC_EncodePriority>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff5f 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff35 	bl	80029d0 <__NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ffa2 	bl	8002ac0 <SysTick_Config>
 8002b7c:	4603      	mov	r3, r0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e043      	b.n	8002c26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <HAL_DMA_Init+0xa8>)
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a22      	ldr	r2, [pc, #136]	; (8002c34 <HAL_DMA_Init+0xac>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	009a      	lsls	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <HAL_DMA_Init+0xb0>)
 8002bba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	bffdfff8 	.word	0xbffdfff8
 8002c34:	cccccccd 	.word	0xcccccccd
 8002c38:	40020000 	.word	0x40020000

08002c3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_DMA_Start_IT+0x20>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e04a      	b.n	8002cf2 <HAL_DMA_Start_IT+0xb6>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d13a      	bne.n	8002ce4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f938 	bl	8002f08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 020e 	orr.w	r2, r2, #14
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e00f      	b.n	8002cd2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0204 	bic.w	r2, r2, #4
 8002cc0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 020a 	orr.w	r2, r2, #10
 8002cd0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e005      	b.n	8002cf0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
 8002cee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2204      	movs	r2, #4
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d04f      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xc8>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d04a      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d107      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a66      	ldr	r2, [pc, #408]	; (8002eec <HAL_DMA_IRQHandler+0x1f0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d029      	beq.n	8002daa <HAL_DMA_IRQHandler+0xae>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a65      	ldr	r2, [pc, #404]	; (8002ef0 <HAL_DMA_IRQHandler+0x1f4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_DMA_IRQHandler+0xaa>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a63      	ldr	r2, [pc, #396]	; (8002ef4 <HAL_DMA_IRQHandler+0x1f8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01a      	beq.n	8002da0 <HAL_DMA_IRQHandler+0xa4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a62      	ldr	r2, [pc, #392]	; (8002ef8 <HAL_DMA_IRQHandler+0x1fc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d012      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x9e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a60      	ldr	r2, [pc, #384]	; (8002efc <HAL_DMA_IRQHandler+0x200>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00a      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x98>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5f      	ldr	r2, [pc, #380]	; (8002f00 <HAL_DMA_IRQHandler+0x204>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d102      	bne.n	8002d8e <HAL_DMA_IRQHandler+0x92>
 8002d88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d8c:	e00e      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002d8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d92:	e00b      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d98:	e008      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002d9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d9e:	e005      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da4:	e002      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002da6:	2340      	movs	r3, #64	; 0x40
 8002da8:	e000      	b.n	8002dac <HAL_DMA_IRQHandler+0xb0>
 8002daa:	2304      	movs	r3, #4
 8002dac:	4a55      	ldr	r2, [pc, #340]	; (8002f04 <HAL_DMA_IRQHandler+0x208>)
 8002dae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8094 	beq.w	8002ee2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002dc2:	e08e      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2202      	movs	r2, #2
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d056      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x186>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d051      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 020a 	bic.w	r2, r2, #10
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a38      	ldr	r2, [pc, #224]	; (8002eec <HAL_DMA_IRQHandler+0x1f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d029      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x166>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a37      	ldr	r2, [pc, #220]	; (8002ef0 <HAL_DMA_IRQHandler+0x1f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x162>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <HAL_DMA_IRQHandler+0x1f8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01a      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x15c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_DMA_IRQHandler+0x1fc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d012      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x156>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a32      	ldr	r2, [pc, #200]	; (8002efc <HAL_DMA_IRQHandler+0x200>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00a      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x150>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a31      	ldr	r2, [pc, #196]	; (8002f00 <HAL_DMA_IRQHandler+0x204>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <HAL_DMA_IRQHandler+0x14a>
 8002e40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e44:	e00e      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4a:	e00b      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e50:	e008      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e56:	e005      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e5c:	e002      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e000      	b.n	8002e64 <HAL_DMA_IRQHandler+0x168>
 8002e62:	2302      	movs	r3, #2
 8002e64:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <HAL_DMA_IRQHandler+0x208>)
 8002e66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d034      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e80:	e02f      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2208      	movs	r2, #8
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d028      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x1e8>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d023      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 020e 	bic.w	r2, r2, #14
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
    }
  }
  return;
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
}
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40020008 	.word	0x40020008
 8002ef0:	4002001c 	.word	0x4002001c
 8002ef4:	40020030 	.word	0x40020030
 8002ef8:	40020044 	.word	0x40020044
 8002efc:	40020058 	.word	0x40020058
 8002f00:	4002006c 	.word	0x4002006c
 8002f04:	40020000 	.word	0x40020000

08002f08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d108      	bne.n	8002f48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f46:	e007      	b.n	8002f58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	60da      	str	r2, [r3, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_FLASH_Program+0xd8>)
 8002f80:	7e1b      	ldrb	r3, [r3, #24]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_FLASH_Program+0x26>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e054      	b.n	8003034 <HAL_FLASH_Program+0xd0>
 8002f8a:	4b2c      	ldr	r3, [pc, #176]	; (800303c <HAL_FLASH_Program+0xd8>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f94:	f000 f8a8 	bl	80030e8 <FLASH_WaitForLastOperation>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d144      	bne.n	800302c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	757b      	strb	r3, [r7, #21]
 8002fac:	e007      	b.n	8002fbe <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d102      	bne.n	8002fba <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	757b      	strb	r3, [r7, #21]
 8002fb8:	e001      	b.n	8002fbe <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002fba:	2304      	movs	r3, #4
 8002fbc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75bb      	strb	r3, [r7, #22]
 8002fc2:	e02d      	b.n	8003020 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002fc4:	7dbb      	ldrb	r3, [r7, #22]
 8002fc6:	005a      	lsls	r2, r3, #1
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	eb02 0c03 	add.w	ip, r2, r3
 8002fce:	7dbb      	ldrb	r3, [r7, #22]
 8002fd0:	0119      	lsls	r1, r3, #4
 8002fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd6:	f1c1 0620 	rsb	r6, r1, #32
 8002fda:	f1a1 0020 	sub.w	r0, r1, #32
 8002fde:	fa22 f401 	lsr.w	r4, r2, r1
 8002fe2:	fa03 f606 	lsl.w	r6, r3, r6
 8002fe6:	4334      	orrs	r4, r6
 8002fe8:	fa23 f000 	lsr.w	r0, r3, r0
 8002fec:	4304      	orrs	r4, r0
 8002fee:	fa23 f501 	lsr.w	r5, r3, r1
 8002ff2:	b2a3      	uxth	r3, r4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4660      	mov	r0, ip
 8002ff8:	f000 f85a 	bl	80030b0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002ffc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003000:	f000 f872 	bl	80030e8 <FLASH_WaitForLastOperation>
 8003004:	4603      	mov	r3, r0
 8003006:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_FLASH_Program+0xdc>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <HAL_FLASH_Program+0xdc>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800301a:	7dbb      	ldrb	r3, [r7, #22]
 800301c:	3301      	adds	r3, #1
 800301e:	75bb      	strb	r3, [r7, #22]
 8003020:	7dba      	ldrb	r2, [r7, #22]
 8003022:	7d7b      	ldrb	r3, [r7, #21]
 8003024:	429a      	cmp	r2, r3
 8003026:	d3cd      	bcc.n	8002fc4 <HAL_FLASH_Program+0x60>
 8003028:	e000      	b.n	800302c <HAL_FLASH_Program+0xc8>
      {
        break;
 800302a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_FLASH_Program+0xd8>)
 800302e:	2200      	movs	r2, #0
 8003030:	761a      	strb	r2, [r3, #24]

  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303c:	20001990 	.word	0x20001990
 8003040:	40022000 	.word	0x40022000

08003044 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <HAL_FLASH_Unlock+0x40>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_FLASH_Unlock+0x40>)
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_FLASH_Unlock+0x44>)
 800305e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HAL_FLASH_Unlock+0x40>)
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <HAL_FLASH_Unlock+0x48>)
 8003064:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_FLASH_Unlock+0x40>)
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003076:	79fb      	ldrb	r3, [r7, #7]
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40022000 	.word	0x40022000
 8003088:	45670123 	.word	0x45670123
 800308c:	cdef89ab 	.word	0xcdef89ab

08003090 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_FLASH_Lock+0x1c>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_FLASH_Lock+0x1c>)
 800309a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800309e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40022000 	.word	0x40022000

080030b0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <FLASH_Program_HalfWord+0x30>)
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <FLASH_Program_HalfWord+0x34>)
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <FLASH_Program_HalfWord+0x34>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	887a      	ldrh	r2, [r7, #2]
 80030d2:	801a      	strh	r2, [r3, #0]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20001990 	.word	0x20001990
 80030e4:	40022000 	.word	0x40022000

080030e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff f880 	bl	80021f4 <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80030f6:	e010      	b.n	800311a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d00c      	beq.n	800311a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <FLASH_WaitForLastOperation+0x2e>
 8003106:	f7ff f875 	bl	80021f4 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	d201      	bcs.n	800311a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e025      	b.n	8003166 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <FLASH_WaitForLastOperation+0x88>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e8      	bne.n	80030f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <FLASH_WaitForLastOperation+0x88>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <FLASH_WaitForLastOperation+0x88>)
 8003134:	2220      	movs	r2, #32
 8003136:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <FLASH_WaitForLastOperation+0x88>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <FLASH_WaitForLastOperation+0x88>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800314c:	2b00      	cmp	r3, #0
 800314e:	d105      	bne.n	800315c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <FLASH_WaitForLastOperation+0x88>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800315c:	f000 f80a 	bl	8003174 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40022000 	.word	0x40022000

08003174 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800317e:	4b23      	ldr	r3, [pc, #140]	; (800320c <FLASH_SetErrorCode+0x98>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <FLASH_SetErrorCode+0x9c>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <FLASH_SetErrorCode+0x9c>)
 8003194:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f043 0310 	orr.w	r3, r3, #16
 800319c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800319e:	4b1b      	ldr	r3, [pc, #108]	; (800320c <FLASH_SetErrorCode+0x98>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <FLASH_SetErrorCode+0x9c>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	4a17      	ldr	r2, [pc, #92]	; (8003210 <FLASH_SetErrorCode+0x9c>)
 80031b4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <FLASH_SetErrorCode+0x98>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <FLASH_SetErrorCode+0x9c>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <FLASH_SetErrorCode+0x9c>)
 80031d4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <FLASH_SetErrorCode+0x98>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <FLASH_SetErrorCode+0x98>)
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f240 1201 	movw	r2, #257	; 0x101
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d106      	bne.n	80031fa <FLASH_SetErrorCode+0x86>
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <FLASH_SetErrorCode+0x98>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4a06      	ldr	r2, [pc, #24]	; (800320c <FLASH_SetErrorCode+0x98>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	61d3      	str	r3, [r2, #28]
}  
 80031f8:	e002      	b.n	8003200 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80031fa:	4a04      	ldr	r2, [pc, #16]	; (800320c <FLASH_SetErrorCode+0x98>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	60d3      	str	r3, [r2, #12]
}  
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40022000 	.word	0x40022000
 8003210:	20001990 	.word	0x20001990

08003214 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003226:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_FLASHEx_Erase+0xd0>)
 8003228:	7e1b      	ldrb	r3, [r3, #24]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_FLASHEx_Erase+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e053      	b.n	80032da <HAL_FLASHEx_Erase+0xc6>
 8003232:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_FLASHEx_Erase+0xd0>)
 8003234:	2201      	movs	r2, #1
 8003236:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d116      	bne.n	800326e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003240:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003244:	f7ff ff50 	bl	80030e8 <FLASH_WaitForLastOperation>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d141      	bne.n	80032d2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800324e:	2001      	movs	r0, #1
 8003250:	f000 f84c 	bl	80032ec <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003254:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003258:	f7ff ff46 	bl	80030e8 <FLASH_WaitForLastOperation>
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_FLASHEx_Erase+0xd4>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <HAL_FLASHEx_Erase+0xd4>)
 8003266:	f023 0304 	bic.w	r3, r3, #4
 800326a:	6113      	str	r3, [r2, #16]
 800326c:	e031      	b.n	80032d2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800326e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003272:	f7ff ff39 	bl	80030e8 <FLASH_WaitForLastOperation>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d12a      	bne.n	80032d2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f04f 32ff 	mov.w	r2, #4294967295
 8003282:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	e019      	b.n	80032c0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800328c:	68b8      	ldr	r0, [r7, #8]
 800328e:	f000 f849 	bl	8003324 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003292:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003296:	f7ff ff27 	bl	80030e8 <FLASH_WaitForLastOperation>
 800329a:	4603      	mov	r3, r0
 800329c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_FLASHEx_Erase+0xd4>)
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	4a11      	ldr	r2, [pc, #68]	; (80032e8 <HAL_FLASHEx_Erase+0xd4>)
 80032a4:	f023 0302 	bic.w	r3, r3, #2
 80032a8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	601a      	str	r2, [r3, #0]
            break;
 80032b6:	e00c      	b.n	80032d2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032be:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	029a      	lsls	r2, r3, #10
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d3dc      	bcc.n	800328c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <HAL_FLASHEx_Erase+0xd0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	761a      	strb	r2, [r3, #24]

  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20001990 	.word	0x20001990
 80032e8:	40022000 	.word	0x40022000

080032ec <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <FLASH_MassErase+0x30>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <FLASH_MassErase+0x34>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	4a08      	ldr	r2, [pc, #32]	; (8003320 <FLASH_MassErase+0x34>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <FLASH_MassErase+0x34>)
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <FLASH_MassErase+0x34>)
 800330c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003310:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	20001990 	.word	0x20001990
 8003320:	40022000 	.word	0x40022000

08003324 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <FLASH_PageErase+0x38>)
 800332e:	2200      	movs	r2, #0
 8003330:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <FLASH_PageErase+0x3c>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <FLASH_PageErase+0x3c>)
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800333e:	4a08      	ldr	r2, [pc, #32]	; (8003360 <FLASH_PageErase+0x3c>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <FLASH_PageErase+0x3c>)
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	4a05      	ldr	r2, [pc, #20]	; (8003360 <FLASH_PageErase+0x3c>)
 800334a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800334e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20001990 	.word	0x20001990
 8003360:	40022000 	.word	0x40022000

08003364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003364:	b480      	push	{r7}
 8003366:	b08b      	sub	sp, #44	; 0x2c
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003376:	e127      	b.n	80035c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003378:	2201      	movs	r2, #1
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	f040 8116 	bne.w	80035c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b12      	cmp	r3, #18
 800339c:	d034      	beq.n	8003408 <HAL_GPIO_Init+0xa4>
 800339e:	2b12      	cmp	r3, #18
 80033a0:	d80d      	bhi.n	80033be <HAL_GPIO_Init+0x5a>
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d02b      	beq.n	80033fe <HAL_GPIO_Init+0x9a>
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d804      	bhi.n	80033b4 <HAL_GPIO_Init+0x50>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d031      	beq.n	8003412 <HAL_GPIO_Init+0xae>
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d01c      	beq.n	80033ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033b2:	e048      	b.n	8003446 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d043      	beq.n	8003440 <HAL_GPIO_Init+0xdc>
 80033b8:	2b11      	cmp	r3, #17
 80033ba:	d01b      	beq.n	80033f4 <HAL_GPIO_Init+0x90>
          break;
 80033bc:	e043      	b.n	8003446 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033be:	4a89      	ldr	r2, [pc, #548]	; (80035e4 <HAL_GPIO_Init+0x280>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d026      	beq.n	8003412 <HAL_GPIO_Init+0xae>
 80033c4:	4a87      	ldr	r2, [pc, #540]	; (80035e4 <HAL_GPIO_Init+0x280>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d806      	bhi.n	80033d8 <HAL_GPIO_Init+0x74>
 80033ca:	4a87      	ldr	r2, [pc, #540]	; (80035e8 <HAL_GPIO_Init+0x284>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d020      	beq.n	8003412 <HAL_GPIO_Init+0xae>
 80033d0:	4a86      	ldr	r2, [pc, #536]	; (80035ec <HAL_GPIO_Init+0x288>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_GPIO_Init+0xae>
          break;
 80033d6:	e036      	b.n	8003446 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033d8:	4a85      	ldr	r2, [pc, #532]	; (80035f0 <HAL_GPIO_Init+0x28c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d019      	beq.n	8003412 <HAL_GPIO_Init+0xae>
 80033de:	4a85      	ldr	r2, [pc, #532]	; (80035f4 <HAL_GPIO_Init+0x290>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d016      	beq.n	8003412 <HAL_GPIO_Init+0xae>
 80033e4:	4a84      	ldr	r2, [pc, #528]	; (80035f8 <HAL_GPIO_Init+0x294>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_GPIO_Init+0xae>
          break;
 80033ea:	e02c      	b.n	8003446 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	623b      	str	r3, [r7, #32]
          break;
 80033f2:	e028      	b.n	8003446 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	3304      	adds	r3, #4
 80033fa:	623b      	str	r3, [r7, #32]
          break;
 80033fc:	e023      	b.n	8003446 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	3308      	adds	r3, #8
 8003404:	623b      	str	r3, [r7, #32]
          break;
 8003406:	e01e      	b.n	8003446 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	330c      	adds	r3, #12
 800340e:	623b      	str	r3, [r7, #32]
          break;
 8003410:	e019      	b.n	8003446 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800341a:	2304      	movs	r3, #4
 800341c:	623b      	str	r3, [r7, #32]
          break;
 800341e:	e012      	b.n	8003446 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003428:	2308      	movs	r3, #8
 800342a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	611a      	str	r2, [r3, #16]
          break;
 8003432:	e008      	b.n	8003446 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003434:	2308      	movs	r3, #8
 8003436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	615a      	str	r2, [r3, #20]
          break;
 800343e:	e002      	b.n	8003446 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003440:	2300      	movs	r3, #0
 8003442:	623b      	str	r3, [r7, #32]
          break;
 8003444:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2bff      	cmp	r3, #255	; 0xff
 800344a:	d801      	bhi.n	8003450 <HAL_GPIO_Init+0xec>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	e001      	b.n	8003454 <HAL_GPIO_Init+0xf0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2bff      	cmp	r3, #255	; 0xff
 800345a:	d802      	bhi.n	8003462 <HAL_GPIO_Init+0xfe>
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	e002      	b.n	8003468 <HAL_GPIO_Init+0x104>
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	3b08      	subs	r3, #8
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	210f      	movs	r1, #15
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	401a      	ands	r2, r3
 800347a:	6a39      	ldr	r1, [r7, #32]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	431a      	orrs	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8096 	beq.w	80035c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003496:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_GPIO_Init+0x298>)
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_GPIO_Init+0x298>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6193      	str	r3, [r2, #24]
 80034a2:	4b56      	ldr	r3, [pc, #344]	; (80035fc <HAL_GPIO_Init+0x298>)
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034ae:	4a54      	ldr	r2, [pc, #336]	; (8003600 <HAL_GPIO_Init+0x29c>)
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	3302      	adds	r3, #2
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4013      	ands	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4b      	ldr	r2, [pc, #300]	; (8003604 <HAL_GPIO_Init+0x2a0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_GPIO_Init+0x19e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4a      	ldr	r2, [pc, #296]	; (8003608 <HAL_GPIO_Init+0x2a4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00d      	beq.n	80034fe <HAL_GPIO_Init+0x19a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a49      	ldr	r2, [pc, #292]	; (800360c <HAL_GPIO_Init+0x2a8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <HAL_GPIO_Init+0x196>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a48      	ldr	r2, [pc, #288]	; (8003610 <HAL_GPIO_Init+0x2ac>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_GPIO_Init+0x192>
 80034f2:	2303      	movs	r3, #3
 80034f4:	e006      	b.n	8003504 <HAL_GPIO_Init+0x1a0>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e004      	b.n	8003504 <HAL_GPIO_Init+0x1a0>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e002      	b.n	8003504 <HAL_GPIO_Init+0x1a0>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_GPIO_Init+0x1a0>
 8003502:	2300      	movs	r3, #0
 8003504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003506:	f002 0203 	and.w	r2, r2, #3
 800350a:	0092      	lsls	r2, r2, #2
 800350c:	4093      	lsls	r3, r2
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003514:	493a      	ldr	r1, [pc, #232]	; (8003600 <HAL_GPIO_Init+0x29c>)
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	3302      	adds	r3, #2
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800352e:	4b39      	ldr	r3, [pc, #228]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4938      	ldr	r1, [pc, #224]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
 800353a:	e006      	b.n	800354a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800353c:	4b35      	ldr	r3, [pc, #212]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	43db      	mvns	r3, r3
 8003544:	4933      	ldr	r1, [pc, #204]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 8003546:	4013      	ands	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003556:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	492e      	ldr	r1, [pc, #184]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
 8003562:	e006      	b.n	8003572 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	43db      	mvns	r3, r3
 800356c:	4929      	ldr	r1, [pc, #164]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 800356e:	4013      	ands	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d006      	beq.n	800358c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800357e:	4b25      	ldr	r3, [pc, #148]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	4924      	ldr	r1, [pc, #144]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
 800358a:	e006      	b.n	800359a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	43db      	mvns	r3, r3
 8003594:	491f      	ldr	r1, [pc, #124]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 8003596:	4013      	ands	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	491a      	ldr	r1, [pc, #104]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60cb      	str	r3, [r1, #12]
 80035b2:	e006      	b.n	80035c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035b4:	4b17      	ldr	r3, [pc, #92]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	4915      	ldr	r1, [pc, #84]	; (8003614 <HAL_GPIO_Init+0x2b0>)
 80035be:	4013      	ands	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	3301      	adds	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f47f aed0 	bne.w	8003378 <HAL_GPIO_Init+0x14>
  }
}
 80035d8:	bf00      	nop
 80035da:	372c      	adds	r7, #44	; 0x2c
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	10210000 	.word	0x10210000
 80035e8:	10110000 	.word	0x10110000
 80035ec:	10120000 	.word	0x10120000
 80035f0:	10310000 	.word	0x10310000
 80035f4:	10320000 	.word	0x10320000
 80035f8:	10220000 	.word	0x10220000
 80035fc:	40021000 	.word	0x40021000
 8003600:	40010000 	.word	0x40010000
 8003604:	40010800 	.word	0x40010800
 8003608:	40010c00 	.word	0x40010c00
 800360c:	40011000 	.word	0x40011000
 8003610:	40011400 	.word	0x40011400
 8003614:	40010400 	.word	0x40010400

08003618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e001      	b.n	800363a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	807b      	strh	r3, [r7, #2]
 8003652:	4613      	mov	r3, r2
 8003654:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003656:	787b      	ldrb	r3, [r7, #1]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800365c:	887a      	ldrh	r2, [r7, #2]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003662:	e003      	b.n	800366c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003664:	887b      	ldrh	r3, [r7, #2]
 8003666:	041a      	lsls	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	611a      	str	r2, [r3, #16]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003694:	e002      	b.n	800369c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	611a      	str	r2, [r3, #16]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
	...

080036a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d006      	beq.n	80036cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036be:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f00d fdce 	bl	8011268 <HAL_GPIO_EXTI_Callback>
  }
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40010400 	.word	0x40010400

080036d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e10f      	b.n	800390a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fe fa14 	bl	8001b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2224      	movs	r2, #36	; 0x24
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800371c:	f002 f9f0 	bl	8005b00 <HAL_RCC_GetPCLK1Freq>
 8003720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a7b      	ldr	r2, [pc, #492]	; (8003914 <HAL_I2C_Init+0x23c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d807      	bhi.n	800373c <HAL_I2C_Init+0x64>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a7a      	ldr	r2, [pc, #488]	; (8003918 <HAL_I2C_Init+0x240>)
 8003730:	4293      	cmp	r3, r2
 8003732:	bf94      	ite	ls
 8003734:	2301      	movls	r3, #1
 8003736:	2300      	movhi	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e006      	b.n	800374a <HAL_I2C_Init+0x72>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a77      	ldr	r2, [pc, #476]	; (800391c <HAL_I2C_Init+0x244>)
 8003740:	4293      	cmp	r3, r2
 8003742:	bf94      	ite	ls
 8003744:	2301      	movls	r3, #1
 8003746:	2300      	movhi	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0db      	b.n	800390a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a72      	ldr	r2, [pc, #456]	; (8003920 <HAL_I2C_Init+0x248>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	0c9b      	lsrs	r3, r3, #18
 800375c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a64      	ldr	r2, [pc, #400]	; (8003914 <HAL_I2C_Init+0x23c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d802      	bhi.n	800378c <HAL_I2C_Init+0xb4>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	3301      	adds	r3, #1
 800378a:	e009      	b.n	80037a0 <HAL_I2C_Init+0xc8>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	4a63      	ldr	r2, [pc, #396]	; (8003924 <HAL_I2C_Init+0x24c>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	3301      	adds	r3, #1
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4956      	ldr	r1, [pc, #344]	; (8003914 <HAL_I2C_Init+0x23c>)
 80037bc:	428b      	cmp	r3, r1
 80037be:	d80d      	bhi.n	80037dc <HAL_I2C_Init+0x104>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1e59      	subs	r1, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	bf38      	it	cc
 80037d8:	2304      	movcc	r3, #4
 80037da:	e04f      	b.n	800387c <HAL_I2C_Init+0x1a4>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <HAL_I2C_Init+0x130>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e012      	b.n	800382e <HAL_I2C_Init+0x156>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1e58      	subs	r0, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	0099      	lsls	r1, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Init+0x15e>
 8003832:	2301      	movs	r3, #1
 8003834:	e022      	b.n	800387c <HAL_I2C_Init+0x1a4>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10e      	bne.n	800385c <HAL_I2C_Init+0x184>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1e58      	subs	r0, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	440b      	add	r3, r1
 800384c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800385a:	e00f      	b.n	800387c <HAL_I2C_Init+0x1a4>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	6809      	ldr	r1, [r1, #0]
 8003880:	4313      	orrs	r3, r2
 8003882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6911      	ldr	r1, [r2, #16]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68d2      	ldr	r2, [r2, #12]
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	000186a0 	.word	0x000186a0
 8003918:	001e847f 	.word	0x001e847f
 800391c:	003d08ff 	.word	0x003d08ff
 8003920:	431bde83 	.word	0x431bde83
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	461a      	mov	r2, r3
 8003934:	460b      	mov	r3, r1
 8003936:	817b      	strh	r3, [r7, #10]
 8003938:	4613      	mov	r3, r2
 800393a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7fe fc5a 	bl	80021f4 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b20      	cmp	r3, #32
 800394c:	f040 80e0 	bne.w	8003b10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2319      	movs	r3, #25
 8003956:	2201      	movs	r2, #1
 8003958:	4970      	ldr	r1, [pc, #448]	; (8003b1c <HAL_I2C_Master_Transmit+0x1f4>)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fc3c 	bl	80041d8 <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
 8003968:	e0d3      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_I2C_Master_Transmit+0x50>
 8003974:	2302      	movs	r3, #2
 8003976:	e0cc      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d007      	beq.n	800399e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2221      	movs	r2, #33	; 0x21
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2210      	movs	r2, #16
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	893a      	ldrh	r2, [r7, #8]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a50      	ldr	r2, [pc, #320]	; (8003b20 <HAL_I2C_Master_Transmit+0x1f8>)
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039e0:	8979      	ldrh	r1, [r7, #10]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 faca 	bl	8003f80 <I2C_MasterRequestWrite>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e08d      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a0c:	e066      	b.n	8003adc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	6a39      	ldr	r1, [r7, #32]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fcb6 	bl	8004384 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d107      	bne.n	8003a36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06b      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11b      	bne.n	8003ab0 <HAL_I2C_Master_Transmit+0x188>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d017      	beq.n	8003ab0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	6a39      	ldr	r1, [r7, #32]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fca6 	bl	8004406 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d107      	bne.n	8003ad8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e01a      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d194      	bne.n	8003a0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	00100002 	.word	0x00100002
 8003b20:	ffff0000 	.word	0xffff0000

08003b24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	460b      	mov	r3, r1
 8003b32:	817b      	strh	r3, [r7, #10]
 8003b34:	4613      	mov	r3, r2
 8003b36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7fe fb5c 	bl	80021f4 <HAL_GetTick>
 8003b3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	f040 8213 	bne.w	8003f72 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2319      	movs	r3, #25
 8003b52:	2201      	movs	r2, #1
 8003b54:	497e      	ldr	r1, [pc, #504]	; (8003d50 <HAL_I2C_Master_Receive+0x22c>)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fb3e 	bl	80041d8 <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
 8003b64:	e206      	b.n	8003f74 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_I2C_Master_Receive+0x50>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e1ff      	b.n	8003f74 <HAL_I2C_Master_Receive+0x450>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d007      	beq.n	8003b9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2222      	movs	r2, #34	; 0x22
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	893a      	ldrh	r2, [r7, #8]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4a5e      	ldr	r2, [pc, #376]	; (8003d54 <HAL_I2C_Master_Receive+0x230>)
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bdc:	8979      	ldrh	r1, [r7, #10]
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fa42 	bl	800406c <I2C_MasterRequestRead>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e1c0      	b.n	8003f74 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d113      	bne.n	8003c22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	623b      	str	r3, [r7, #32]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e194      	b.n	8003f4c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d11d      	bne.n	8003c66 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c3a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c62:	b662      	cpsie	i
 8003c64:	e172      	b.n	8003f4c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d11d      	bne.n	8003caa <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c7e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca6:	b662      	cpsie	i
 8003ca8:	e150      	b.n	8003f4c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cd0:	e13c      	b.n	8003f4c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	f200 80f5 	bhi.w	8003ec6 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d123      	bne.n	8003d2c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fbcd 	bl	8004488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e13d      	b.n	8003f74 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d2a:	e10f      	b.n	8003f4c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d150      	bne.n	8003dd6 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4906      	ldr	r1, [pc, #24]	; (8003d58 <HAL_I2C_Master_Receive+0x234>)
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fa4a 	bl	80041d8 <I2C_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e112      	b.n	8003f74 <HAL_I2C_Master_Receive+0x450>
 8003d4e:	bf00      	nop
 8003d50:	00100002 	.word	0x00100002
 8003d54:	ffff0000 	.word	0xffff0000
 8003d58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d5c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003da0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd4:	e0ba      	b.n	8003f4c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4967      	ldr	r1, [pc, #412]	; (8003f7c <HAL_I2C_Master_Receive+0x458>)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f9f9 	bl	80041d8 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0c1      	b.n	8003f74 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e00:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	494f      	ldr	r1, [pc, #316]	; (8003f7c <HAL_I2C_Master_Receive+0x458>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f9ca 	bl	80041d8 <I2C_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e092      	b.n	8003f74 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e90:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ec4:	e042      	b.n	8003f4c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fadc 	bl	8004488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e04c      	b.n	8003f74 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d118      	bne.n	8003f4c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f aebe 	bne.w	8003cd2 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
  }
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3728      	adds	r7, #40	; 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	00010004 	.word	0x00010004

08003f80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d006      	beq.n	8003faa <I2C_MasterRequestWrite+0x2a>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d003      	beq.n	8003faa <I2C_MasterRequestWrite+0x2a>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa8:	d108      	bne.n	8003fbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e00b      	b.n	8003fd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b12      	cmp	r3, #18
 8003fc2:	d107      	bne.n	8003fd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f8f9 	bl	80041d8 <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e035      	b.n	800405c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff8:	d108      	bne.n	800400c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ffa:	897b      	ldrh	r3, [r7, #10]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e01b      	b.n	8004044 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800400c:	897b      	ldrh	r3, [r7, #10]
 800400e:	11db      	asrs	r3, r3, #7
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0306 	and.w	r3, r3, #6
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f063 030f 	orn	r3, r3, #15
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	490e      	ldr	r1, [pc, #56]	; (8004064 <I2C_MasterRequestWrite+0xe4>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f92b 	bl	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e010      	b.n	800405c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800403a:	897b      	ldrh	r3, [r7, #10]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4907      	ldr	r1, [pc, #28]	; (8004068 <I2C_MasterRequestWrite+0xe8>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f91b 	bl	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	00010008 	.word	0x00010008
 8004068:	00010002 	.word	0x00010002

0800406c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	460b      	mov	r3, r1
 800407a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004090:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d006      	beq.n	80040a6 <I2C_MasterRequestRead+0x3a>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d003      	beq.n	80040a6 <I2C_MasterRequestRead+0x3a>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040a4:	d108      	bne.n	80040b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e00b      	b.n	80040d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	2b11      	cmp	r3, #17
 80040be:	d107      	bne.n	80040d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f87b 	bl	80041d8 <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e06d      	b.n	80041c8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f4:	d108      	bne.n	8004108 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]
 8004106:	e053      	b.n	80041b0 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004108:	897b      	ldrh	r3, [r7, #10]
 800410a:	11db      	asrs	r3, r3, #7
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0306 	and.w	r3, r3, #6
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f063 030f 	orn	r3, r3, #15
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	492a      	ldr	r1, [pc, #168]	; (80041d0 <I2C_MasterRequestRead+0x164>)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f8ad 	bl	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e048      	b.n	80041c8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004136:	897b      	ldrh	r3, [r7, #10]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4923      	ldr	r1, [pc, #140]	; (80041d4 <I2C_MasterRequestRead+0x168>)
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f89d 	bl	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e038      	b.n	80041c8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f825 	bl	80041d8 <I2C_WaitOnFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e017      	b.n	80041c8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004198:	897b      	ldrh	r3, [r7, #10]
 800419a:	11db      	asrs	r3, r3, #7
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0306 	and.w	r3, r3, #6
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f063 030e 	orn	r3, r3, #14
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4907      	ldr	r1, [pc, #28]	; (80041d4 <I2C_MasterRequestRead+0x168>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f865 	bl	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	00010008 	.word	0x00010008
 80041d4:	00010002 	.word	0x00010002

080041d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e8:	e025      	b.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d021      	beq.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fd ffff 	bl	80021f4 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d116      	bne.n	8004236 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e023      	b.n	800427e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d10d      	bne.n	800425c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	43da      	mvns	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	e00c      	b.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	429a      	cmp	r2, r3
 800427a:	d0b6      	beq.n	80041ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004294:	e051      	b.n	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a4:	d123      	bne.n	80042ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f043 0204 	orr.w	r2, r3, #4
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e046      	b.n	800437c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d021      	beq.n	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f6:	f7fd ff7d 	bl	80021f4 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d302      	bcc.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d116      	bne.n	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e020      	b.n	800437c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d10c      	bne.n	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	43da      	mvns	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	bf14      	ite	ne
 8004356:	2301      	movne	r3, #1
 8004358:	2300      	moveq	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	e00b      	b.n	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	43da      	mvns	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4013      	ands	r3, r2
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d18d      	bne.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004390:	e02d      	b.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f8ce 	bl	8004534 <I2C_IsAcknowledgeFailed>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e02d      	b.n	80043fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d021      	beq.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	f7fd ff23 	bl	80021f4 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d116      	bne.n	80043ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0220 	orr.w	r2, r3, #32
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e007      	b.n	80043fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d1ca      	bne.n	8004392 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004412:	e02d      	b.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f88d 	bl	8004534 <I2C_IsAcknowledgeFailed>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e02d      	b.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442a:	d021      	beq.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442c:	f7fd fee2 	bl	80021f4 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	429a      	cmp	r2, r3
 800443a:	d302      	bcc.n	8004442 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e007      	b.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b04      	cmp	r3, #4
 800447c:	d1ca      	bne.n	8004414 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004494:	e042      	b.n	800451c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d119      	bne.n	80044d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0210 	mvn.w	r2, #16
 80044ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e029      	b.n	800452c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d8:	f7fd fe8c 	bl	80021f4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d302      	bcc.n	80044ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d116      	bne.n	800451c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e007      	b.n	800452c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d1b5      	bne.n	8004496 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454a:	d11b      	bne.n	8004584 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004554:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f043 0204 	orr.w	r2, r3, #4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004592:	b08b      	sub	sp, #44	; 0x2c
 8004594:	af06      	add	r7, sp, #24
 8004596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e0d3      	b.n	800474a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd fc2a 	bl	8001e10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2203      	movs	r2, #3
 80045c0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f002 fcc5 	bl	8006f58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	687e      	ldr	r6, [r7, #4]
 80045d6:	466d      	mov	r5, sp
 80045d8:	f106 0410 	add.w	r4, r6, #16
 80045dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	602b      	str	r3, [r5, #0]
 80045e4:	1d33      	adds	r3, r6, #4
 80045e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045e8:	6838      	ldr	r0, [r7, #0]
 80045ea:	f002 fc8e 	bl	8006f0a <USB_CoreInit>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0a4      	b.n	800474a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f002 fcc2 	bl	8006f90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	e035      	b.n	800467e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	015b      	lsls	r3, r3, #5
 8004618:	4413      	add	r3, r2
 800461a:	3329      	adds	r3, #41	; 0x29
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	015b      	lsls	r3, r3, #5
 8004626:	4413      	add	r3, r2
 8004628:	3328      	adds	r3, #40	; 0x28
 800462a:	7bfa      	ldrb	r2, [r7, #15]
 800462c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	b291      	uxth	r1, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	015b      	lsls	r3, r3, #5
 8004638:	4413      	add	r3, r2
 800463a:	3336      	adds	r3, #54	; 0x36
 800463c:	460a      	mov	r2, r1
 800463e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	015b      	lsls	r3, r3, #5
 8004646:	4413      	add	r3, r2
 8004648:	332b      	adds	r3, #43	; 0x2b
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	015b      	lsls	r3, r3, #5
 8004654:	4413      	add	r3, r2
 8004656:	3338      	adds	r3, #56	; 0x38
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	015b      	lsls	r3, r3, #5
 8004662:	4413      	add	r3, r2
 8004664:	333c      	adds	r3, #60	; 0x3c
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	3302      	adds	r3, #2
 8004670:	015b      	lsls	r3, r3, #5
 8004672:	4413      	add	r3, r2
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	3301      	adds	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	7bfa      	ldrb	r2, [r7, #15]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d3c4      	bcc.n	8004612 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e031      	b.n	80046f2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	015b      	lsls	r3, r3, #5
 8004694:	4413      	add	r3, r2
 8004696:	f203 1329 	addw	r3, r3, #297	; 0x129
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	015b      	lsls	r3, r3, #5
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80046aa:	7bfa      	ldrb	r2, [r7, #15]
 80046ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	015b      	lsls	r3, r3, #5
 80046b4:	4413      	add	r3, r2
 80046b6:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	015b      	lsls	r3, r3, #5
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	015b      	lsls	r3, r3, #5
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	330a      	adds	r3, #10
 80046e4:	015b      	lsls	r3, r3, #5
 80046e6:	4413      	add	r3, r2
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	3301      	adds	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d3c8      	bcc.n	800468e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	687e      	ldr	r6, [r7, #4]
 8004704:	466d      	mov	r5, sp
 8004706:	f106 0410 	add.w	r4, r6, #16
 800470a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800470c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	1d33      	adds	r3, r6, #4
 8004714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004716:	6838      	ldr	r0, [r7, #0]
 8004718:	f002 fc46 	bl	8006fa8 <USB_DevInit>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e00d      	b.n	800474a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f003 fc83 	bl	800804e <USB_DevDisconnect>

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004752 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_PCD_Start+0x16>
 8004764:	2302      	movs	r3, #2
 8004766:	e016      	b.n	8004796 <HAL_PCD_Start+0x44>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004770:	2101      	movs	r1, #1
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f00e fb07 	bl	8012d86 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f003 fc5c 	bl	800803a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f002 fbcf 	bl	8006f2a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f003 fc59 	bl	8008062 <USB_ReadInterrupts>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ba:	d102      	bne.n	80047c2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 faf3 	bl	8004da8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f003 fc4b 	bl	8008062 <USB_ReadInterrupts>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d6:	d112      	bne.n	80047fe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ea:	b292      	uxth	r2, r2
 80047ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f00e f8da 	bl	80129aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80047f6:	2100      	movs	r1, #0
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8de 	bl	80049ba <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f003 fc2d 	bl	8008062 <USB_ReadInterrupts>
 8004808:	4603      	mov	r3, r0
 800480a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004812:	d10b      	bne.n	800482c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004826:	b292      	uxth	r2, r2
 8004828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f003 fc16 	bl	8008062 <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800483c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004840:	d10b      	bne.n	800485a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004854:	b292      	uxth	r2, r2
 8004856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f003 fbff 	bl	8008062 <USB_ReadInterrupts>
 8004864:	4603      	mov	r3, r0
 8004866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486e:	d126      	bne.n	80048be <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0204 	bic.w	r2, r2, #4
 8004882:	b292      	uxth	r2, r2
 8004884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0208 	bic.w	r2, r2, #8
 800489a:	b292      	uxth	r2, r2
 800489c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f00e f8bb 	bl	8012a1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048b8:	b292      	uxth	r2, r2
 80048ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f003 fbcd 	bl	8008062 <USB_ReadInterrupts>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d2:	d13d      	bne.n	8004950 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0208 	orr.w	r2, r2, #8
 80048e6:	b292      	uxth	r2, r2
 80048e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048fe:	b292      	uxth	r2, r2
 8004900:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0204 	orr.w	r2, r2, #4
 8004916:	b292      	uxth	r2, r2
 8004918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f003 fb9e 	bl	8008062 <USB_ReadInterrupts>
 8004926:	4603      	mov	r3, r0
 8004928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d10b      	bne.n	800494a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800493a:	b29a      	uxth	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004944:	b292      	uxth	r2, r2
 8004946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f00e f84c 	bl	80129e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f003 fb84 	bl	8008062 <USB_ReadInterrupts>
 800495a:	4603      	mov	r3, r0
 800495c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004964:	d10e      	bne.n	8004984 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004978:	b292      	uxth	r2, r2
 800497a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f00e f805 	bl	801298e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f003 fb6a 	bl	8008062 <USB_ReadInterrupts>
 800498e:	4603      	mov	r3, r0
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004998:	d10b      	bne.n	80049b2 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ac:	b292      	uxth	r2, r2
 80049ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_PCD_SetAddress+0x1a>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e013      	b.n	80049fc <HAL_PCD_SetAddress+0x42>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	78fa      	ldrb	r2, [r7, #3]
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f003 fb11 	bl	8008014 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	70fb      	strb	r3, [r7, #3]
 8004a16:	460b      	mov	r3, r1
 8004a18:	803b      	strh	r3, [r7, #0]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	da0b      	bge.n	8004a42 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	015b      	lsls	r3, r3, #5
 8004a32:	3328      	adds	r3, #40	; 0x28
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	705a      	strb	r2, [r3, #1]
 8004a40:	e00b      	b.n	8004a5a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	015b      	lsls	r3, r3, #5
 8004a4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a66:	883a      	ldrh	r2, [r7, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	78ba      	ldrb	r2, [r7, #2]
 8004a70:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a84:	78bb      	ldrb	r3, [r7, #2]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d102      	bne.n	8004a90 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_PCD_EP_Open+0x9a>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e00e      	b.n	8004abc <HAL_PCD_EP_Open+0xb8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f002 fa9f 	bl	8006ff0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8004aba:	7afb      	ldrb	r3, [r7, #11]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	da0b      	bge.n	8004af0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	015b      	lsls	r3, r3, #5
 8004ae0:	3328      	adds	r3, #40	; 0x28
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	705a      	strb	r2, [r3, #1]
 8004aee:	e00b      	b.n	8004b08 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	015b      	lsls	r3, r3, #5
 8004af8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	4413      	add	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_PCD_EP_Close+0x5e>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e00e      	b.n	8004b40 <HAL_PCD_EP_Close+0x7c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68f9      	ldr	r1, [r7, #12]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f002 fd4b 	bl	80075cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	460b      	mov	r3, r1
 8004b56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b58:	7afb      	ldrb	r3, [r7, #11]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	015b      	lsls	r3, r3, #5
 8004b60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b82:	7afb      	ldrb	r3, [r7, #11]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6979      	ldr	r1, [r7, #20]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f002 feaa 	bl	80078f8 <USB_EPStartXfer>
 8004ba4:	e005      	b.n	8004bb2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6979      	ldr	r1, [r7, #20]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f002 fea3 	bl	80078f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	330a      	adds	r3, #10
 8004bd2:	015b      	lsls	r3, r3, #5
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf4:	7afb      	ldrb	r3, [r7, #11]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	015b      	lsls	r3, r3, #5
 8004bfc:	3328      	adds	r3, #40	; 0x28
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c1c:	7afb      	ldrb	r3, [r7, #11]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c28:	7afb      	ldrb	r3, [r7, #11]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6979      	ldr	r1, [r7, #20]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f002 fe5d 	bl	80078f8 <USB_EPStartXfer>
 8004c3e:	e005      	b.n	8004c4c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6979      	ldr	r1, [r7, #20]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 fe56 	bl	80078f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 0207 	and.w	r2, r3, #7
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d901      	bls.n	8004c74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e046      	b.n	8004d02 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	da0b      	bge.n	8004c94 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	015b      	lsls	r3, r3, #5
 8004c84:	3328      	adds	r3, #40	; 0x28
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	4413      	add	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	705a      	strb	r2, [r3, #1]
 8004c92:	e009      	b.n	8004ca8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	015b      	lsls	r3, r3, #5
 8004c98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_PCD_EP_SetStall+0x72>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e01c      	b.n	8004d02 <HAL_PCD_EP_SetStall+0xac>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68f9      	ldr	r1, [r7, #12]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f003 f8c6 	bl	8007e68 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f003 f9c4 	bl	8008080 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	f003 020f 	and.w	r2, r3, #15
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d901      	bls.n	8004d28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e03a      	b.n	8004d9e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da0b      	bge.n	8004d48 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	015b      	lsls	r3, r3, #5
 8004d38:	3328      	adds	r3, #40	; 0x28
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	705a      	strb	r2, [r3, #1]
 8004d46:	e00b      	b.n	8004d60 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	015b      	lsls	r3, r3, #5
 8004d50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4413      	add	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_PCD_EP_ClrStall+0x76>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e00e      	b.n	8004d9e <HAL_PCD_EP_ClrStall+0x94>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f003 f8ac 	bl	8007eec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b089      	sub	sp, #36	; 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004db0:	e282      	b.n	80052b8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dba:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004dbc:	8afb      	ldrh	r3, [r7, #22]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004dc6:	7d7b      	ldrb	r3, [r7, #21]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f040 8142 	bne.w	8005052 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004dce:	8afb      	ldrh	r3, [r7, #22]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d151      	bne.n	8004e7c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de8:	b29c      	uxth	r4, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3328      	adds	r3, #40	; 0x28
 8004dfe:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	3302      	adds	r3, #2
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f00d fd8f 	bl	8012960 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8234 	beq.w	80052b8 <PCD_EP_ISR_Handler+0x510>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 822f 	bne.w	80052b8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e7a:	e21d      	b.n	80052b8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e82:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e8c:	8a7b      	ldrh	r3, [r7, #18]
 8004e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d033      	beq.n	8004efe <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3306      	adds	r3, #6
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f003 f922 	bl	800811e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	b29c      	uxth	r4, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004ef2:	b292      	uxth	r2, r2
 8004ef4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f00d fd08 	bl	801290c <HAL_PCD_SetupStageCallback>
 8004efc:	e1dc      	b.n	80052b8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004efe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f280 81d8 	bge.w	80052b8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f14:	4013      	ands	r3, r2
 8004f16:	b29c      	uxth	r4, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004f20:	b292      	uxth	r2, r2
 8004f22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4413      	add	r3, r2
 8004f38:	3306      	adds	r3, #6
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d019      	beq.n	8004f8c <PCD_EP_ISR_Handler+0x1e4>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d015      	beq.n	8004f8c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6959      	ldr	r1, [r3, #20]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f003 f8d4 	bl	800811e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	441a      	add	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f84:	2100      	movs	r1, #0
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f00d fcd2 	bl	8012930 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461c      	mov	r4, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	441c      	add	r4, r3
 8004f9e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8004fa2:	461c      	mov	r4, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10e      	bne.n	8004fca <PCD_EP_ISR_Handler+0x222>
 8004fac:	8823      	ldrh	r3, [r4, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8023      	strh	r3, [r4, #0]
 8004fb8:	8823      	ldrh	r3, [r4, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	8023      	strh	r3, [r4, #0]
 8004fc8:	e02d      	b.n	8005026 <PCD_EP_ISR_Handler+0x27e>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b3e      	cmp	r3, #62	; 0x3e
 8004fd0:	d812      	bhi.n	8004ff8 <PCD_EP_ISR_Handler+0x250>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <PCD_EP_ISR_Handler+0x244>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	029b      	lsls	r3, r3, #10
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	8023      	strh	r3, [r4, #0]
 8004ff6:	e016      	b.n	8005026 <PCD_EP_ISR_Handler+0x27e>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <PCD_EP_ISR_Handler+0x26a>
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	3b01      	subs	r3, #1
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	b29b      	uxth	r3, r3
 8005016:	029b      	lsls	r3, r3, #10
 8005018:	b29b      	uxth	r3, r3
 800501a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800501e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005022:	b29b      	uxth	r3, r3
 8005024:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	b29c      	uxth	r4, r3
 8005038:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800503c:	b29c      	uxth	r4, r3
 800503e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005042:	b29c      	uxth	r4, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4ba2      	ldr	r3, [pc, #648]	; (80052d4 <PCD_EP_ISR_Handler+0x52c>)
 800504a:	4323      	orrs	r3, r4
 800504c:	b29b      	uxth	r3, r3
 800504e:	8013      	strh	r3, [r2, #0]
 8005050:	e132      	b.n	80052b8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	7d7b      	ldrb	r3, [r7, #21]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005062:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f280 80d1 	bge.w	800520e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	7d7b      	ldrb	r3, [r7, #21]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29a      	uxth	r2, r3
 800507c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005080:	4013      	ands	r3, r2
 8005082:	b29c      	uxth	r4, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	7d7b      	ldrb	r3, [r7, #21]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8005094:	b292      	uxth	r2, r2
 8005096:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005098:	7d7b      	ldrb	r3, [r7, #21]
 800509a:	015b      	lsls	r3, r3, #5
 800509c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	4413      	add	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	7b1b      	ldrb	r3, [r3, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d121      	bne.n	80050f2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	3306      	adds	r3, #6
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80050d8:	8bfb      	ldrh	r3, [r7, #30]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d072      	beq.n	80051c4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6959      	ldr	r1, [r3, #20]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	88da      	ldrh	r2, [r3, #6]
 80050ea:	8bfb      	ldrh	r3, [r7, #30]
 80050ec:	f003 f817 	bl	800811e <USB_ReadPMA>
 80050f0:	e068      	b.n	80051c4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d021      	beq.n	8005150 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005114:	b29b      	uxth	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	4413      	add	r3, r2
 8005120:	3302      	adds	r3, #2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005134:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8005136:	8bfb      	ldrh	r3, [r7, #30]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d02a      	beq.n	8005192 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6959      	ldr	r1, [r3, #20]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	891a      	ldrh	r2, [r3, #8]
 8005148:	8bfb      	ldrh	r3, [r7, #30]
 800514a:	f002 ffe8 	bl	800811e <USB_ReadPMA>
 800514e:	e020      	b.n	8005192 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005158:	b29b      	uxth	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4413      	add	r3, r2
 8005164:	3306      	adds	r3, #6
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005178:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800517a:	8bfb      	ldrh	r3, [r7, #30]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6959      	ldr	r1, [r3, #20]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	895a      	ldrh	r2, [r3, #10]
 800518c:	8bfb      	ldrh	r3, [r7, #30]
 800518e:	f002 ffc6 	bl	800811e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ac:	b29c      	uxth	r4, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	4b46      	ldr	r3, [pc, #280]	; (80052d8 <PCD_EP_ISR_Handler+0x530>)
 80051be:	4323      	orrs	r3, r4
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	8bfb      	ldrh	r3, [r7, #30]
 80051ca:	441a      	add	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	8bfb      	ldrh	r3, [r7, #30]
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <PCD_EP_ISR_Handler+0x446>
 80051e4:	8bfa      	ldrh	r2, [r7, #30]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d206      	bcs.n	80051fc <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f00d fb9b 	bl	8012930 <HAL_PCD_DataOutStageCallback>
 80051fa:	e008      	b.n	800520e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	7819      	ldrb	r1, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fc9d 	bl	8004b48 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800520e:	8a7b      	ldrh	r3, [r7, #18]
 8005210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005214:	2b00      	cmp	r3, #0
 8005216:	d04f      	beq.n	80052b8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8005218:	7d7b      	ldrb	r3, [r7, #21]
 800521a:	015b      	lsls	r3, r3, #5
 800521c:	3328      	adds	r3, #40	; 0x28
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	7d7b      	ldrb	r3, [r7, #21]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	b29c      	uxth	r4, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	7d7b      	ldrb	r3, [r7, #21]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	441a      	add	r2, r3
 800524a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800524e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525e:	b29b      	uxth	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	3302      	adds	r3, #2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	695a      	ldr	r2, [r3, #20]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	441a      	add	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f00d fb5e 	bl	8012960 <HAL_PCD_DataInStageCallback>
 80052a4:	e008      	b.n	80052b8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	7819      	ldrb	r1, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fc96 	bl	8004be4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	b21b      	sxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f6ff ad74 	blt.w	8004db2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3724      	adds	r7, #36	; 0x24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd90      	pop	{r4, r7, pc}
 80052d4:	ffff8080 	.word	0xffff8080
 80052d8:	ffff80c0 	.word	0xffff80c0

080052dc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	607b      	str	r3, [r7, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	817b      	strh	r3, [r7, #10]
 80052ea:	4613      	mov	r3, r2
 80052ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80052ee:	897b      	ldrh	r3, [r7, #10]
 80052f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052fa:	897b      	ldrh	r3, [r7, #10]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	015b      	lsls	r3, r3, #5
 8005302:	3328      	adds	r3, #40	; 0x28
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e006      	b.n	800531a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800530c:	897b      	ldrh	r3, [r7, #10]
 800530e:	015b      	lsls	r3, r3, #5
 8005310:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800531a:	893b      	ldrh	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d107      	bne.n	8005330 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2200      	movs	r2, #0
 8005324:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	b29a      	uxth	r2, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	80da      	strh	r2, [r3, #6]
 800532e:	e00b      	b.n	8005348 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2201      	movs	r2, #1
 8005334:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	b29a      	uxth	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	0c1b      	lsrs	r3, r3, #16
 8005342:	b29a      	uxth	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr

08005354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e26c      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8087 	beq.w	8005482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005374:	4b92      	ldr	r3, [pc, #584]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 030c 	and.w	r3, r3, #12
 800537c:	2b04      	cmp	r3, #4
 800537e:	d00c      	beq.n	800539a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005380:	4b8f      	ldr	r3, [pc, #572]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b08      	cmp	r3, #8
 800538a:	d112      	bne.n	80053b2 <HAL_RCC_OscConfig+0x5e>
 800538c:	4b8c      	ldr	r3, [pc, #560]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d10b      	bne.n	80053b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539a:	4b89      	ldr	r3, [pc, #548]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d06c      	beq.n	8005480 <HAL_RCC_OscConfig+0x12c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d168      	bne.n	8005480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e246      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ba:	d106      	bne.n	80053ca <HAL_RCC_OscConfig+0x76>
 80053bc:	4b80      	ldr	r3, [pc, #512]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a7f      	ldr	r2, [pc, #508]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e02e      	b.n	8005428 <HAL_RCC_OscConfig+0xd4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x98>
 80053d2:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a7a      	ldr	r2, [pc, #488]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b78      	ldr	r3, [pc, #480]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a77      	ldr	r2, [pc, #476]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e01d      	b.n	8005428 <HAL_RCC_OscConfig+0xd4>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f4:	d10c      	bne.n	8005410 <HAL_RCC_OscConfig+0xbc>
 80053f6:	4b72      	ldr	r3, [pc, #456]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a71      	ldr	r2, [pc, #452]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80053fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	4b6f      	ldr	r3, [pc, #444]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a6e      	ldr	r2, [pc, #440]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	e00b      	b.n	8005428 <HAL_RCC_OscConfig+0xd4>
 8005410:	4b6b      	ldr	r3, [pc, #428]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a6a      	ldr	r2, [pc, #424]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	4b68      	ldr	r3, [pc, #416]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a67      	ldr	r2, [pc, #412]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d013      	beq.n	8005458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005430:	f7fc fee0 	bl	80021f4 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005438:	f7fc fedc 	bl	80021f4 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e1fa      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544a:	4b5d      	ldr	r3, [pc, #372]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0xe4>
 8005456:	e014      	b.n	8005482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fc fecc 	bl	80021f4 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005460:	f7fc fec8 	bl	80021f4 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	; 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e1e6      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005472:	4b53      	ldr	r3, [pc, #332]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x10c>
 800547e:	e000      	b.n	8005482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d063      	beq.n	8005556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800548e:	4b4c      	ldr	r3, [pc, #304]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800549a:	4b49      	ldr	r3, [pc, #292]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d11c      	bne.n	80054e0 <HAL_RCC_OscConfig+0x18c>
 80054a6:	4b46      	ldr	r3, [pc, #280]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d116      	bne.n	80054e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b2:	4b43      	ldr	r3, [pc, #268]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_RCC_OscConfig+0x176>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e1ba      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ca:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4939      	ldr	r1, [pc, #228]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054de:	e03a      	b.n	8005556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d020      	beq.n	800552a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e8:	4b36      	ldr	r3, [pc, #216]	; (80055c4 <HAL_RCC_OscConfig+0x270>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fc fe81 	bl	80021f4 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f6:	f7fc fe7d 	bl	80021f4 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e19b      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005508:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005514:	4b2a      	ldr	r3, [pc, #168]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4927      	ldr	r1, [pc, #156]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 8005524:	4313      	orrs	r3, r2
 8005526:	600b      	str	r3, [r1, #0]
 8005528:	e015      	b.n	8005556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <HAL_RCC_OscConfig+0x270>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fc fe60 	bl	80021f4 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005538:	f7fc fe5c 	bl	80021f4 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e17a      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d03a      	beq.n	80055d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d019      	beq.n	800559e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556a:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 800556c:	2201      	movs	r2, #1
 800556e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005570:	f7fc fe40 	bl	80021f4 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005578:	f7fc fe3c 	bl	80021f4 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e15a      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <HAL_RCC_OscConfig+0x26c>)
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005596:	2001      	movs	r0, #1
 8005598:	f000 fac6 	bl	8005b28 <RCC_Delay>
 800559c:	e01c      	b.n	80055d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <HAL_RCC_OscConfig+0x274>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a4:	f7fc fe26 	bl	80021f4 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055aa:	e00f      	b.n	80055cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ac:	f7fc fe22 	bl	80021f4 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d908      	bls.n	80055cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e140      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
 80055c4:	42420000 	.word	0x42420000
 80055c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	4b9e      	ldr	r3, [pc, #632]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e9      	bne.n	80055ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80a6 	beq.w	8005732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4b97      	ldr	r3, [pc, #604]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	4b94      	ldr	r3, [pc, #592]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4a93      	ldr	r2, [pc, #588]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80055fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005600:	61d3      	str	r3, [r2, #28]
 8005602:	4b91      	ldr	r3, [pc, #580]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800560e:	2301      	movs	r3, #1
 8005610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005612:	4b8e      	ldr	r3, [pc, #568]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d118      	bne.n	8005650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800561e:	4b8b      	ldr	r3, [pc, #556]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a8a      	ldr	r2, [pc, #552]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562a:	f7fc fde3 	bl	80021f4 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005632:	f7fc fddf 	bl	80021f4 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b64      	cmp	r3, #100	; 0x64
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e0fd      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005644:	4b81      	ldr	r3, [pc, #516]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x312>
 8005658:	4b7b      	ldr	r3, [pc, #492]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	4a7a      	ldr	r2, [pc, #488]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	6213      	str	r3, [r2, #32]
 8005664:	e02d      	b.n	80056c2 <HAL_RCC_OscConfig+0x36e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x334>
 800566e:	4b76      	ldr	r3, [pc, #472]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	4a75      	ldr	r2, [pc, #468]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	6213      	str	r3, [r2, #32]
 800567a:	4b73      	ldr	r3, [pc, #460]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	4a72      	ldr	r2, [pc, #456]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005680:	f023 0304 	bic.w	r3, r3, #4
 8005684:	6213      	str	r3, [r2, #32]
 8005686:	e01c      	b.n	80056c2 <HAL_RCC_OscConfig+0x36e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b05      	cmp	r3, #5
 800568e:	d10c      	bne.n	80056aa <HAL_RCC_OscConfig+0x356>
 8005690:	4b6d      	ldr	r3, [pc, #436]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	4a6c      	ldr	r2, [pc, #432]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005696:	f043 0304 	orr.w	r3, r3, #4
 800569a:	6213      	str	r3, [r2, #32]
 800569c:	4b6a      	ldr	r3, [pc, #424]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	4a69      	ldr	r2, [pc, #420]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	6213      	str	r3, [r2, #32]
 80056a8:	e00b      	b.n	80056c2 <HAL_RCC_OscConfig+0x36e>
 80056aa:	4b67      	ldr	r3, [pc, #412]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	4a66      	ldr	r2, [pc, #408]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	6213      	str	r3, [r2, #32]
 80056b6:	4b64      	ldr	r3, [pc, #400]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	4a63      	ldr	r2, [pc, #396]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80056bc:	f023 0304 	bic.w	r3, r3, #4
 80056c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d015      	beq.n	80056f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ca:	f7fc fd93 	bl	80021f4 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d0:	e00a      	b.n	80056e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7fc fd8f 	bl	80021f4 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e0ab      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e8:	4b57      	ldr	r3, [pc, #348]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0ee      	beq.n	80056d2 <HAL_RCC_OscConfig+0x37e>
 80056f4:	e014      	b.n	8005720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f6:	f7fc fd7d 	bl	80021f4 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fc:	e00a      	b.n	8005714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fe:	f7fc fd79 	bl	80021f4 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f241 3288 	movw	r2, #5000	; 0x1388
 800570c:	4293      	cmp	r3, r2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e095      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005714:	4b4c      	ldr	r3, [pc, #304]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ee      	bne.n	80056fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d105      	bne.n	8005732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005726:	4b48      	ldr	r3, [pc, #288]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	4a47      	ldr	r2, [pc, #284]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 800572c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8081 	beq.w	800583e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800573c:	4b42      	ldr	r3, [pc, #264]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 030c 	and.w	r3, r3, #12
 8005744:	2b08      	cmp	r3, #8
 8005746:	d061      	beq.n	800580c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d146      	bne.n	80057de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005750:	4b3f      	ldr	r3, [pc, #252]	; (8005850 <HAL_RCC_OscConfig+0x4fc>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005756:	f7fc fd4d 	bl	80021f4 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575e:	f7fc fd49 	bl	80021f4 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e067      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005770:	4b35      	ldr	r3, [pc, #212]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f0      	bne.n	800575e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005784:	d108      	bne.n	8005798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005786:	4b30      	ldr	r3, [pc, #192]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	492d      	ldr	r1, [pc, #180]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005798:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a19      	ldr	r1, [r3, #32]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	430b      	orrs	r3, r1
 80057aa:	4927      	ldr	r1, [pc, #156]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b0:	4b27      	ldr	r3, [pc, #156]	; (8005850 <HAL_RCC_OscConfig+0x4fc>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b6:	f7fc fd1d 	bl	80021f4 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057be:	f7fc fd19 	bl	80021f4 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e037      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057d0:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x46a>
 80057dc:	e02f      	b.n	800583e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057de:	4b1c      	ldr	r3, [pc, #112]	; (8005850 <HAL_RCC_OscConfig+0x4fc>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fc fd06 	bl	80021f4 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fc fd02 	bl	80021f4 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e020      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057fe:	4b12      	ldr	r3, [pc, #72]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x498>
 800580a:	e018      	b.n	800583e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e013      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_RCC_OscConfig+0x4f4>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	429a      	cmp	r2, r3
 800582a:	d106      	bne.n	800583a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d001      	beq.n	800583e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40021000 	.word	0x40021000
 800584c:	40007000 	.word	0x40007000
 8005850:	42420060 	.word	0x42420060

08005854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0d0      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005868:	4b6a      	ldr	r3, [pc, #424]	; (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d910      	bls.n	8005898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005876:	4b67      	ldr	r3, [pc, #412]	; (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 0207 	bic.w	r2, r3, #7
 800587e:	4965      	ldr	r1, [pc, #404]	; (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005886:	4b63      	ldr	r3, [pc, #396]	; (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0b8      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d020      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b0:	4b59      	ldr	r3, [pc, #356]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a58      	ldr	r2, [pc, #352]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058c8:	4b53      	ldr	r3, [pc, #332]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4a52      	ldr	r2, [pc, #328]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80058ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d4:	4b50      	ldr	r3, [pc, #320]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	494d      	ldr	r1, [pc, #308]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d040      	beq.n	8005974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d107      	bne.n	800590a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fa:	4b47      	ldr	r3, [pc, #284]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d115      	bne.n	8005932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e07f      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d107      	bne.n	8005922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005912:	4b41      	ldr	r3, [pc, #260]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e073      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005922:	4b3d      	ldr	r3, [pc, #244]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e06b      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005932:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f023 0203 	bic.w	r2, r3, #3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4936      	ldr	r1, [pc, #216]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 8005940:	4313      	orrs	r3, r2
 8005942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005944:	f7fc fc56 	bl	80021f4 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594a:	e00a      	b.n	8005962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800594c:	f7fc fc52 	bl	80021f4 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f241 3288 	movw	r2, #5000	; 0x1388
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e053      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005962:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f003 020c 	and.w	r2, r3, #12
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	429a      	cmp	r2, r3
 8005972:	d1eb      	bne.n	800594c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005974:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d210      	bcs.n	80059a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 0207 	bic.w	r2, r3, #7
 800598a:	4922      	ldr	r1, [pc, #136]	; (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	4b20      	ldr	r3, [pc, #128]	; (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e032      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b0:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4916      	ldr	r1, [pc, #88]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	490e      	ldr	r1, [pc, #56]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059e2:	f000 f821 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80059e6:	4601      	mov	r1, r0
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <HAL_RCC_ClockConfig+0x1c8>)
 80059f4:	5cd3      	ldrb	r3, [r2, r3]
 80059f6:	fa21 f303 	lsr.w	r3, r1, r3
 80059fa:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <HAL_RCC_ClockConfig+0x1cc>)
 80059fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <HAL_RCC_ClockConfig+0x1d0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fc fbb4 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40022000 	.word	0x40022000
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	08019164 	.word	0x08019164
 8005a20:	20000004 	.word	0x20000004
 8005a24:	20000008 	.word	0x20000008

08005a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a28:	b490      	push	{r4, r7}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005a2e:	4b2a      	ldr	r3, [pc, #168]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005a30:	1d3c      	adds	r4, r7, #4
 8005a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005a38:	4b28      	ldr	r3, [pc, #160]	; (8005adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	2300      	movs	r3, #0
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a52:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d002      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0x40>
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d003      	beq.n	8005a6e <HAL_RCC_GetSysClockFreq+0x46>
 8005a66:	e02d      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a68:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a6a:	623b      	str	r3, [r7, #32]
      break;
 8005a6c:	e02d      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	0c9b      	lsrs	r3, r3, #18
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005a80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d013      	beq.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a8c:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	0c5b      	lsrs	r3, r3, #17
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005aa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	4a0f      	ldr	r2, [pc, #60]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005aa6:	fb02 f203 	mul.w	r2, r2, r3
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	e004      	b.n	8005abe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	4a0c      	ldr	r2, [pc, #48]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ab8:	fb02 f303 	mul.w	r3, r2, r3
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	623b      	str	r3, [r7, #32]
      break;
 8005ac2:	e002      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ac6:	623b      	str	r3, [r7, #32]
      break;
 8005ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aca:	6a3b      	ldr	r3, [r7, #32]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3728      	adds	r7, #40	; 0x28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc90      	pop	{r4, r7}
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	08018cb8 	.word	0x08018cb8
 8005adc:	08018cc8 	.word	0x08018cc8
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	007a1200 	.word	0x007a1200
 8005ae8:	003d0900 	.word	0x003d0900

08005aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005af0:	4b02      	ldr	r3, [pc, #8]	; (8005afc <HAL_RCC_GetHCLKFreq+0x10>)
 8005af2:	681b      	ldr	r3, [r3, #0]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	20000004 	.word	0x20000004

08005b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b04:	f7ff fff2 	bl	8005aec <HAL_RCC_GetHCLKFreq>
 8005b08:	4601      	mov	r1, r0
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	4a03      	ldr	r2, [pc, #12]	; (8005b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b16:	5cd3      	ldrb	r3, [r2, r3]
 8005b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000
 8005b24:	08019174 	.word	0x08019174

08005b28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <RCC_Delay+0x34>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a0a      	ldr	r2, [pc, #40]	; (8005b60 <RCC_Delay+0x38>)
 8005b36:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3a:	0a5b      	lsrs	r3, r3, #9
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b44:	bf00      	nop
  }
  while (Delay --);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1e5a      	subs	r2, r3, #1
 8005b4a:	60fa      	str	r2, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1f9      	bne.n	8005b44 <RCC_Delay+0x1c>
}
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000004 	.word	0x20000004
 8005b60:	10624dd3 	.word	0x10624dd3

08005b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d07d      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005b80:	2300      	movs	r3, #0
 8005b82:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b84:	4b4f      	ldr	r3, [pc, #316]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10d      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b90:	4b4c      	ldr	r3, [pc, #304]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	4a4b      	ldr	r2, [pc, #300]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	61d3      	str	r3, [r2, #28]
 8005b9c:	4b49      	ldr	r3, [pc, #292]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bac:	4b46      	ldr	r3, [pc, #280]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d118      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb8:	4b43      	ldr	r3, [pc, #268]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a42      	ldr	r2, [pc, #264]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc4:	f7fc fb16 	bl	80021f4 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bca:	e008      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bcc:	f7fc fb12 	bl	80021f4 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	; 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e06d      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bde:	4b3a      	ldr	r3, [pc, #232]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bea:	4b36      	ldr	r3, [pc, #216]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d02e      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d027      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c08:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c12:	4b2e      	ldr	r3, [pc, #184]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c18:	4b2c      	ldr	r3, [pc, #176]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c1e:	4a29      	ldr	r2, [pc, #164]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d014      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2e:	f7fc fae1 	bl	80021f4 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c34:	e00a      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7fc fadd 	bl	80021f4 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e036      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0ee      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c58:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4917      	ldr	r1, [pc, #92]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d105      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c70:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	490b      	ldr	r1, [pc, #44]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ca6:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	4904      	ldr	r1, [pc, #16]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40007000 	.word	0x40007000
 8005ccc:	42420440 	.word	0x42420440

08005cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e01d      	b.n	8005d1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fb ff68 	bl	8001bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f000 fdb0 	bl	8006874 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b06      	cmp	r3, #6
 8005d4e:	d007      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e01d      	b.n	8005dba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f815 	bl	8005dc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f000 fd62 	bl	8006874 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2201      	movs	r2, #1
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 ffc4 	bl	8006d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a10      	ldr	r2, [pc, #64]	; (8005e34 <HAL_TIM_PWM_Start+0x60>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d107      	bne.n	8005e06 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b06      	cmp	r3, #6
 8005e16:	d007      	beq.n	8005e28 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40012c00 	.word	0x40012c00

08005e38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2200      	movs	r2, #0
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 ff92 	bl	8006d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <HAL_TIM_PWM_Stop+0x94>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d117      	bne.n	8005e8a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10f      	bne.n	8005e8a <HAL_TIM_PWM_Stop+0x52>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	f240 4344 	movw	r3, #1092	; 0x444
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d107      	bne.n	8005e8a <HAL_TIM_PWM_Stop+0x52>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10f      	bne.n	8005eba <HAL_TIM_PWM_Stop+0x82>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6a1a      	ldr	r2, [r3, #32]
 8005ea0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_PWM_Stop+0x82>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40012c00 	.word	0x40012c00

08005ed0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8005eea:	2302      	movs	r3, #2
 8005eec:	e0e9      	b.n	80060c2 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10b      	bne.n	8005f12 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start_DMA+0x3a>
 8005f00:	887b      	ldrh	r3, [r7, #2]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e0db      	b.n	80060c2 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b0c      	cmp	r3, #12
 8005f16:	f200 80ad 	bhi.w	8006074 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <HAL_TIM_PWM_Start_DMA+0x50>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f55 	.word	0x08005f55
 8005f24:	08006075 	.word	0x08006075
 8005f28:	08006075 	.word	0x08006075
 8005f2c:	08006075 	.word	0x08006075
 8005f30:	08005f9d 	.word	0x08005f9d
 8005f34:	08006075 	.word	0x08006075
 8005f38:	08006075 	.word	0x08006075
 8005f3c:	08006075 	.word	0x08006075
 8005f40:	08005fe5 	.word	0x08005fe5
 8005f44:	08006075 	.word	0x08006075
 8005f48:	08006075 	.word	0x08006075
 8005f4c:	08006075 	.word	0x08006075
 8005f50:	0800602d 	.word	0x0800602d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	4a5c      	ldr	r2, [pc, #368]	; (80060cc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005f5a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	4a5b      	ldr	r2, [pc, #364]	; (80060d0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	4a5a      	ldr	r2, [pc, #360]	; (80060d4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3334      	adds	r3, #52	; 0x34
 8005f78:	461a      	mov	r2, r3
 8005f7a:	887b      	ldrh	r3, [r7, #2]
 8005f7c:	f7fc fe5e 	bl	8002c3c <HAL_DMA_Start_IT>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e09b      	b.n	80060c2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f98:	60da      	str	r2, [r3, #12]
      break;
 8005f9a:	e06c      	b.n	8006076 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	4a4a      	ldr	r2, [pc, #296]	; (80060cc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	4a49      	ldr	r2, [pc, #292]	; (80060d0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb0:	4a48      	ldr	r2, [pc, #288]	; (80060d4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3338      	adds	r3, #56	; 0x38
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	887b      	ldrh	r3, [r7, #2]
 8005fc4:	f7fc fe3a 	bl	8002c3c <HAL_DMA_Start_IT>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e077      	b.n	80060c2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fe0:	60da      	str	r2, [r3, #12]
      break;
 8005fe2:	e048      	b.n	8006076 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	4a38      	ldr	r2, [pc, #224]	; (80060cc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	4a37      	ldr	r2, [pc, #220]	; (80060d0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	4a36      	ldr	r2, [pc, #216]	; (80060d4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	333c      	adds	r3, #60	; 0x3c
 8006008:	461a      	mov	r2, r3
 800600a:	887b      	ldrh	r3, [r7, #2]
 800600c:	f7fc fe16 	bl	8002c3c <HAL_DMA_Start_IT>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e053      	b.n	80060c2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006028:	60da      	str	r2, [r3, #12]
      break;
 800602a:	e024      	b.n	8006076 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	4a26      	ldr	r2, [pc, #152]	; (80060cc <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8006032:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <HAL_TIM_PWM_Start_DMA+0x200>)
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	4a24      	ldr	r2, [pc, #144]	; (80060d4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8006042:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3340      	adds	r3, #64	; 0x40
 8006050:	461a      	mov	r2, r3
 8006052:	887b      	ldrh	r3, [r7, #2]
 8006054:	f7fc fdf2 	bl	8002c3c <HAL_DMA_Start_IT>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e02f      	b.n	80060c2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006070:	60da      	str	r2, [r3, #12]
      break;
 8006072:	e000      	b.n	8006076 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8006074:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2201      	movs	r2, #1
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fe78 	bl	8006d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <HAL_TIM_PWM_Start_DMA+0x208>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d107      	bne.n	800609e <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b06      	cmp	r3, #6
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	08006793 	.word	0x08006793
 80060d0:	08006803 	.word	0x08006803
 80060d4:	0800676f 	.word	0x0800676f
 80060d8:	40012c00 	.word	0x40012c00

080060dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e07f      	b.n	80061f0 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7fb fdd7 	bl	8001cb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006120:	f023 0307 	bic.w	r3, r3, #7
 8006124:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f000 fb9f 	bl	8006874 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	4313      	orrs	r3, r2
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800617c:	f023 030c 	bic.w	r3, r3, #12
 8006180:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006188:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800618c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	4313      	orrs	r3, r2
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	011a      	lsls	r2, r3, #4
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	031b      	lsls	r3, r3, #12
 80061ac:	4313      	orrs	r3, r2
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	4313      	orrs	r3, r2
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d122      	bne.n	8006254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b02      	cmp	r3, #2
 800621a:	d11b      	bne.n	8006254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0202 	mvn.w	r2, #2
 8006224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa6a 	bl	8006714 <HAL_TIM_IC_CaptureCallback>
 8006240:	e005      	b.n	800624e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa5d 	bl	8006702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fa6c 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b04      	cmp	r3, #4
 8006260:	d122      	bne.n	80062a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b04      	cmp	r3, #4
 800626e:	d11b      	bne.n	80062a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0204 	mvn.w	r2, #4
 8006278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa40 	bl	8006714 <HAL_TIM_IC_CaptureCallback>
 8006294:	e005      	b.n	80062a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa33 	bl	8006702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fa42 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d122      	bne.n	80062fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d11b      	bne.n	80062fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0208 	mvn.w	r2, #8
 80062cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2204      	movs	r2, #4
 80062d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa16 	bl	8006714 <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa09 	bl	8006702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fa18 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b10      	cmp	r3, #16
 8006308:	d122      	bne.n	8006350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b10      	cmp	r3, #16
 8006316:	d11b      	bne.n	8006350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0210 	mvn.w	r2, #16
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2208      	movs	r2, #8
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f9ec 	bl	8006714 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f9df 	bl	8006702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f9ee 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b01      	cmp	r3, #1
 800635c:	d10e      	bne.n	800637c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d107      	bne.n	800637c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0201 	mvn.w	r2, #1
 8006374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f00a ff40 	bl	80111fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b80      	cmp	r3, #128	; 0x80
 8006388:	d10e      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d107      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fda8 	bl	8006ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d10e      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b40      	cmp	r3, #64	; 0x40
 80063c2:	d107      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f9bb 	bl	800674a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d10e      	bne.n	8006400 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d107      	bne.n	8006400 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0220 	mvn.w	r2, #32
 80063f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fd73 	bl	8006ee6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800641e:	2302      	movs	r3, #2
 8006420:	e0b4      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x184>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2202      	movs	r2, #2
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b0c      	cmp	r3, #12
 8006436:	f200 809f 	bhi.w	8006578 <HAL_TIM_PWM_ConfigChannel+0x170>
 800643a:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	08006475 	.word	0x08006475
 8006444:	08006579 	.word	0x08006579
 8006448:	08006579 	.word	0x08006579
 800644c:	08006579 	.word	0x08006579
 8006450:	080064b5 	.word	0x080064b5
 8006454:	08006579 	.word	0x08006579
 8006458:	08006579 	.word	0x08006579
 800645c:	08006579 	.word	0x08006579
 8006460:	080064f7 	.word	0x080064f7
 8006464:	08006579 	.word	0x08006579
 8006468:	08006579 	.word	0x08006579
 800646c:	08006579 	.word	0x08006579
 8006470:	08006537 	.word	0x08006537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fa5c 	bl	8006938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0208 	orr.w	r2, r2, #8
 800648e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0204 	bic.w	r2, r2, #4
 800649e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6999      	ldr	r1, [r3, #24]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	619a      	str	r2, [r3, #24]
      break;
 80064b2:	e062      	b.n	800657a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 faa2 	bl	8006a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6999      	ldr	r1, [r3, #24]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	619a      	str	r2, [r3, #24]
      break;
 80064f4:	e041      	b.n	800657a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 faeb 	bl	8006ad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0208 	orr.w	r2, r2, #8
 8006510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0204 	bic.w	r2, r2, #4
 8006520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69d9      	ldr	r1, [r3, #28]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	61da      	str	r2, [r3, #28]
      break;
 8006534:	e021      	b.n	800657a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fb35 	bl	8006bac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69d9      	ldr	r1, [r3, #28]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	021a      	lsls	r2, r3, #8
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	61da      	str	r2, [r3, #28]
      break;
 8006576:	e000      	b.n	800657a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006578:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_TIM_ConfigClockSource+0x18>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e0a6      	b.n	80066fa <HAL_TIM_ConfigClockSource+0x166>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d067      	beq.n	80066b4 <HAL_TIM_ConfigClockSource+0x120>
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d80b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x6c>
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	d073      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0x140>
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d802      	bhi.n	80065f6 <HAL_TIM_ConfigClockSource+0x62>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d06f      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80065f4:	e078      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d06c      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0x140>
 80065fa:	2b30      	cmp	r3, #48	; 0x30
 80065fc:	d06a      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80065fe:	e073      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006600:	2b70      	cmp	r3, #112	; 0x70
 8006602:	d00d      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0x8c>
 8006604:	2b70      	cmp	r3, #112	; 0x70
 8006606:	d804      	bhi.n	8006612 <HAL_TIM_ConfigClockSource+0x7e>
 8006608:	2b50      	cmp	r3, #80	; 0x50
 800660a:	d033      	beq.n	8006674 <HAL_TIM_ConfigClockSource+0xe0>
 800660c:	2b60      	cmp	r3, #96	; 0x60
 800660e:	d041      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006610:	e06a      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006616:	d066      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0x152>
 8006618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661c:	d017      	beq.n	800664e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800661e:	e063      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	6899      	ldr	r1, [r3, #8]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f000 fb81 	bl	8006d36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006642:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	609a      	str	r2, [r3, #8]
      break;
 800664c:	e04c      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6899      	ldr	r1, [r3, #8]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f000 fb6a 	bl	8006d36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006670:	609a      	str	r2, [r3, #8]
      break;
 8006672:	e039      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	6859      	ldr	r1, [r3, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	461a      	mov	r2, r3
 8006682:	f000 fae1 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2150      	movs	r1, #80	; 0x50
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fb38 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 8006692:	e029      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6859      	ldr	r1, [r3, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	461a      	mov	r2, r3
 80066a2:	f000 faff 	bl	8006ca4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2160      	movs	r1, #96	; 0x60
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fb28 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 80066b2:	e019      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	6859      	ldr	r1, [r3, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	461a      	mov	r2, r3
 80066c2:	f000 fac1 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2140      	movs	r1, #64	; 0x40
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fb18 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 80066d2:	e009      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f000 fb0f 	bl	8006d02 <TIM_ITRx_SetConfig>
      break;
 80066e4:	e000      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80066e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr

08006714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr

08006726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr

0800674a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr

0800675c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr

0800676e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff ffe9 	bl	800675c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d103      	bne.n	80067ba <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	771a      	strb	r2, [r3, #28]
 80067b8:	e019      	b.n	80067ee <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d103      	bne.n	80067cc <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2202      	movs	r2, #2
 80067c8:	771a      	strb	r2, [r3, #28]
 80067ca:	e010      	b.n	80067ee <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d103      	bne.n	80067de <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2204      	movs	r2, #4
 80067da:	771a      	strb	r2, [r3, #28]
 80067dc:	e007      	b.n	80067ee <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d102      	bne.n	80067ee <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2208      	movs	r2, #8
 80067ec:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff ff99 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	771a      	strb	r2, [r3, #28]
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	429a      	cmp	r2, r3
 8006820:	d103      	bne.n	800682a <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	771a      	strb	r2, [r3, #28]
 8006828:	e019      	b.n	800685e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d103      	bne.n	800683c <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2202      	movs	r2, #2
 8006838:	771a      	strb	r2, [r3, #28]
 800683a:	e010      	b.n	800685e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d103      	bne.n	800684e <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2204      	movs	r2, #4
 800684a:	771a      	strb	r2, [r3, #28]
 800684c:	e007      	b.n	800685e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d102      	bne.n	800685e <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2208      	movs	r2, #8
 800685c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff ff6a 	bl	8006738 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	771a      	strb	r2, [r3, #28]
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a29      	ldr	r2, [pc, #164]	; (800692c <TIM_Base_SetConfig+0xb8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00b      	beq.n	80068a4 <TIM_Base_SetConfig+0x30>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d007      	beq.n	80068a4 <TIM_Base_SetConfig+0x30>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a26      	ldr	r2, [pc, #152]	; (8006930 <TIM_Base_SetConfig+0xbc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_Base_SetConfig+0x30>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a25      	ldr	r2, [pc, #148]	; (8006934 <TIM_Base_SetConfig+0xc0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d108      	bne.n	80068b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a1c      	ldr	r2, [pc, #112]	; (800692c <TIM_Base_SetConfig+0xb8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00b      	beq.n	80068d6 <TIM_Base_SetConfig+0x62>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c4:	d007      	beq.n	80068d6 <TIM_Base_SetConfig+0x62>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a19      	ldr	r2, [pc, #100]	; (8006930 <TIM_Base_SetConfig+0xbc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_Base_SetConfig+0x62>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a18      	ldr	r2, [pc, #96]	; (8006934 <TIM_Base_SetConfig+0xc0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d108      	bne.n	80068e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a07      	ldr	r2, [pc, #28]	; (800692c <TIM_Base_SetConfig+0xb8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d103      	bne.n	800691c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	615a      	str	r2, [r3, #20]
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800

08006938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f023 0201 	bic.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f023 0302 	bic.w	r3, r3, #2
 8006980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <TIM_OC1_SetConfig+0xc8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10c      	bne.n	80069ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0308 	bic.w	r3, r3, #8
 800699a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f023 0304 	bic.w	r3, r3, #4
 80069ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a13      	ldr	r2, [pc, #76]	; (8006a00 <TIM_OC1_SetConfig+0xc8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d111      	bne.n	80069da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	621a      	str	r2, [r3, #32]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40012c00 	.word	0x40012c00

08006a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f023 0210 	bic.w	r2, r3, #16
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f023 0320 	bic.w	r3, r3, #32
 8006a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <TIM_OC2_SetConfig+0xd0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d10d      	bne.n	8006a80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a14      	ldr	r2, [pc, #80]	; (8006ad4 <TIM_OC2_SetConfig+0xd0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d113      	bne.n	8006ab0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr
 8006ad4:	40012c00 	.word	0x40012c00

08006ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <TIM_OC3_SetConfig+0xd0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d10d      	bne.n	8006b52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <TIM_OC3_SetConfig+0xd0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d113      	bne.n	8006b82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	621a      	str	r2, [r3, #32]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40012c00 	.word	0x40012c00

08006bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	031b      	lsls	r3, r3, #12
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a0f      	ldr	r2, [pc, #60]	; (8006c44 <TIM_OC4_SetConfig+0x98>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d109      	bne.n	8006c20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	019b      	lsls	r3, r3, #6
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr
 8006c44:	40012c00 	.word	0x40012c00

08006c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0201 	bic.w	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f023 030a 	bic.w	r3, r3, #10
 8006c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	f023 0210 	bic.w	r2, r3, #16
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	031b      	lsls	r3, r3, #12
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ce0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	621a      	str	r2, [r3, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr

08006d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f043 0307 	orr.w	r3, r3, #7
 8006d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	609a      	str	r2, [r3, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr

08006d36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b087      	sub	sp, #28
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	607a      	str	r2, [r7, #4]
 8006d42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	021a      	lsls	r2, r3, #8
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	609a      	str	r2, [r3, #8]
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	2201      	movs	r2, #1
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1a      	ldr	r2, [r3, #32]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	43db      	mvns	r3, r3
 8006d96:	401a      	ands	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a1a      	ldr	r2, [r3, #32]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dac:	431a      	orrs	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	621a      	str	r2, [r3, #32]
}
 8006db2:	bf00      	nop
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e032      	b.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e0c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e03d      	b.n	8006edc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bc80      	pop	{r7}
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	f107 0014 	add.w	r0, r7, #20
 8006f18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	b004      	add	sp, #16
 8006f28:	4770      	bx	lr

08006f2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f32:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006f36:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	89fb      	ldrh	r3, [r7, #14]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bc80      	pop	{r7}
 8006f56:	4770      	bx	lr

08006f58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f60:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006f64:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	b21a      	sxth	r2, r3
 8006f70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f74:	43db      	mvns	r3, r3
 8006f76:	b21b      	sxth	r3, r3
 8006f78:	4013      	ands	r3, r2
 8006f7a:	b21b      	sxth	r3, r3
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr

08006f90 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006fa8:	b084      	sub	sp, #16
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	f107 0014 	add.w	r0, r7, #20
 8006fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff ffa5 	bl	8006f2a <USB_EnableGlobalInt>

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fec:	b004      	add	sp, #16
 8006fee:	4770      	bx	lr

08006ff0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ff0:	b490      	push	{r4, r7}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007014:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	78db      	ldrb	r3, [r3, #3]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d819      	bhi.n	8007052 <USB_ActivateEndpoint+0x62>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <USB_ActivateEndpoint+0x34>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007035 	.word	0x08007035
 8007028:	08007049 	.word	0x08007049
 800702c:	08007059 	.word	0x08007059
 8007030:	0800703f 	.word	0x0800703f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007034:	89bb      	ldrh	r3, [r7, #12]
 8007036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800703a:	81bb      	strh	r3, [r7, #12]
      break;
 800703c:	e00d      	b.n	800705a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800703e:	89bb      	ldrh	r3, [r7, #12]
 8007040:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007044:	81bb      	strh	r3, [r7, #12]
      break;
 8007046:	e008      	b.n	800705a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007048:	89bb      	ldrh	r3, [r7, #12]
 800704a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800704e:	81bb      	strh	r3, [r7, #12]
      break;
 8007050:	e003      	b.n	800705a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	73fb      	strb	r3, [r7, #15]
      break;
 8007056:	e000      	b.n	800705a <USB_ActivateEndpoint+0x6a>
      break;
 8007058:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	89bb      	ldrh	r3, [r7, #12]
 8007066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007076:	b29b      	uxth	r3, r3
 8007078:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007090:	b29a      	uxth	r2, r3
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	4313      	orrs	r3, r2
 800709a:	b29c      	uxth	r4, r3
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	4b8a      	ldr	r3, [pc, #552]	; (80072d0 <USB_ActivateEndpoint+0x2e0>)
 80070a8:	4323      	orrs	r3, r4
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	7b1b      	ldrb	r3, [r3, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 8112 	bne.w	80072dc <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d067      	beq.n	8007190 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80070c0:	687c      	ldr	r4, [r7, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	441c      	add	r4, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	4423      	add	r3, r4
 80070d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070d8:	461c      	mov	r4, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	88db      	ldrh	r3, [r3, #6]
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29c      	uxth	r4, r3
 80070f6:	4623      	mov	r3, r4
 80070f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d014      	beq.n	800712a <USB_ActivateEndpoint+0x13a>
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007116:	b29c      	uxth	r4, r3
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	441a      	add	r2, r3
 8007122:	4b6c      	ldr	r3, [pc, #432]	; (80072d4 <USB_ActivateEndpoint+0x2e4>)
 8007124:	4323      	orrs	r3, r4
 8007126:	b29b      	uxth	r3, r3
 8007128:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	78db      	ldrb	r3, [r3, #3]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d018      	beq.n	8007164 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007148:	b29c      	uxth	r4, r3
 800714a:	f084 0320 	eor.w	r3, r4, #32
 800714e:	b29c      	uxth	r4, r3
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	441a      	add	r2, r3
 800715a:	4b5d      	ldr	r3, [pc, #372]	; (80072d0 <USB_ActivateEndpoint+0x2e0>)
 800715c:	4323      	orrs	r3, r4
 800715e:	b29b      	uxth	r3, r3
 8007160:	8013      	strh	r3, [r2, #0]
 8007162:	e22b      	b.n	80075bc <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717a:	b29c      	uxth	r4, r3
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	4b52      	ldr	r3, [pc, #328]	; (80072d0 <USB_ActivateEndpoint+0x2e0>)
 8007188:	4323      	orrs	r3, r4
 800718a:	b29b      	uxth	r3, r3
 800718c:	8013      	strh	r3, [r2, #0]
 800718e:	e215      	b.n	80075bc <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007190:	687c      	ldr	r4, [r7, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007198:	b29b      	uxth	r3, r3
 800719a:	441c      	add	r4, r3
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	4423      	add	r3, r4
 80071a4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80071a8:	461c      	mov	r4, r3
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88db      	ldrh	r3, [r3, #6]
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80071b8:	687c      	ldr	r4, [r7, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	441c      	add	r4, r3
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	4423      	add	r3, r4
 80071cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071d0:	461c      	mov	r4, r3
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10e      	bne.n	80071f8 <USB_ActivateEndpoint+0x208>
 80071da:	8823      	ldrh	r3, [r4, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	8023      	strh	r3, [r4, #0]
 80071e6:	8823      	ldrh	r3, [r4, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	8023      	strh	r3, [r4, #0]
 80071f6:	e02d      	b.n	8007254 <USB_ActivateEndpoint+0x264>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b3e      	cmp	r3, #62	; 0x3e
 80071fe:	d812      	bhi.n	8007226 <USB_ActivateEndpoint+0x236>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	085b      	lsrs	r3, r3, #1
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <USB_ActivateEndpoint+0x22a>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	3301      	adds	r3, #1
 8007218:	60bb      	str	r3, [r7, #8]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	b29b      	uxth	r3, r3
 800721e:	029b      	lsls	r3, r3, #10
 8007220:	b29b      	uxth	r3, r3
 8007222:	8023      	strh	r3, [r4, #0]
 8007224:	e016      	b.n	8007254 <USB_ActivateEndpoint+0x264>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	095b      	lsrs	r3, r3, #5
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	2b00      	cmp	r3, #0
 8007238:	d102      	bne.n	8007240 <USB_ActivateEndpoint+0x250>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	3b01      	subs	r3, #1
 800723e:	60bb      	str	r3, [r7, #8]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	b29b      	uxth	r3, r3
 8007244:	029b      	lsls	r3, r3, #10
 8007246:	b29b      	uxth	r3, r3
 8007248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007250:	b29b      	uxth	r3, r3
 8007252:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	b29c      	uxth	r4, r3
 8007262:	4623      	mov	r3, r4
 8007264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d014      	beq.n	8007296 <USB_ActivateEndpoint+0x2a6>
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	b29c      	uxth	r4, r3
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <USB_ActivateEndpoint+0x2e8>)
 8007290:	4323      	orrs	r3, r4
 8007292:	b29b      	uxth	r3, r3
 8007294:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ac:	b29c      	uxth	r4, r3
 80072ae:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80072b2:	b29c      	uxth	r4, r3
 80072b4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80072b8:	b29c      	uxth	r4, r3
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	441a      	add	r2, r3
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <USB_ActivateEndpoint+0x2e0>)
 80072c6:	4323      	orrs	r3, r4
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	8013      	strh	r3, [r2, #0]
 80072cc:	e176      	b.n	80075bc <USB_ActivateEndpoint+0x5cc>
 80072ce:	bf00      	nop
 80072d0:	ffff8080 	.word	0xffff8080
 80072d4:	ffff80c0 	.word	0xffff80c0
 80072d8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f2:	b29c      	uxth	r4, r3
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	441a      	add	r2, r3
 80072fe:	4b96      	ldr	r3, [pc, #600]	; (8007558 <USB_ActivateEndpoint+0x568>)
 8007300:	4323      	orrs	r3, r4
 8007302:	b29b      	uxth	r3, r3
 8007304:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007306:	687c      	ldr	r4, [r7, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730e:	b29b      	uxth	r3, r3
 8007310:	441c      	add	r4, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	4423      	add	r3, r4
 800731a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800731e:	461c      	mov	r4, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	891b      	ldrh	r3, [r3, #8]
 8007324:	085b      	lsrs	r3, r3, #1
 8007326:	b29b      	uxth	r3, r3
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	b29b      	uxth	r3, r3
 800732c:	8023      	strh	r3, [r4, #0]
 800732e:	687c      	ldr	r4, [r7, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007336:	b29b      	uxth	r3, r3
 8007338:	441c      	add	r4, r3
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	4423      	add	r3, r4
 8007342:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007346:	461c      	mov	r4, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	895b      	ldrh	r3, [r3, #10]
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	b29b      	uxth	r3, r3
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	b29b      	uxth	r3, r3
 8007354:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	785b      	ldrb	r3, [r3, #1]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f040 8088 	bne.w	8007470 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29c      	uxth	r4, r3
 800736e:	4623      	mov	r3, r4
 8007370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d014      	beq.n	80073a2 <USB_ActivateEndpoint+0x3b2>
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	b29b      	uxth	r3, r3
 8007386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800738a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738e:	b29c      	uxth	r4, r3
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	441a      	add	r2, r3
 800739a:	4b70      	ldr	r3, [pc, #448]	; (800755c <USB_ActivateEndpoint+0x56c>)
 800739c:	4323      	orrs	r3, r4
 800739e:	b29b      	uxth	r3, r3
 80073a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29c      	uxth	r4, r3
 80073b0:	4623      	mov	r3, r4
 80073b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d014      	beq.n	80073e4 <USB_ActivateEndpoint+0x3f4>
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d0:	b29c      	uxth	r4, r3
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	441a      	add	r2, r3
 80073dc:	4b60      	ldr	r3, [pc, #384]	; (8007560 <USB_ActivateEndpoint+0x570>)
 80073de:	4323      	orrs	r3, r4
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fa:	b29c      	uxth	r4, r3
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	4b56      	ldr	r3, [pc, #344]	; (8007560 <USB_ActivateEndpoint+0x570>)
 8007408:	4323      	orrs	r3, r4
 800740a:	b29b      	uxth	r3, r3
 800740c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007424:	b29c      	uxth	r4, r3
 8007426:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800742a:	b29c      	uxth	r4, r3
 800742c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007430:	b29c      	uxth	r4, r3
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	4b49      	ldr	r3, [pc, #292]	; (8007564 <USB_ActivateEndpoint+0x574>)
 800743e:	4323      	orrs	r3, r4
 8007440:	b29b      	uxth	r3, r3
 8007442:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800745a:	b29c      	uxth	r4, r3
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	4b3f      	ldr	r3, [pc, #252]	; (8007564 <USB_ActivateEndpoint+0x574>)
 8007468:	4323      	orrs	r3, r4
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]
 800746e:	e0a5      	b.n	80075bc <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29c      	uxth	r4, r3
 800747e:	4623      	mov	r3, r4
 8007480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d014      	beq.n	80074b2 <USB_ActivateEndpoint+0x4c2>
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	b29c      	uxth	r4, r3
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	441a      	add	r2, r3
 80074aa:	4b2c      	ldr	r3, [pc, #176]	; (800755c <USB_ActivateEndpoint+0x56c>)
 80074ac:	4323      	orrs	r3, r4
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29c      	uxth	r4, r3
 80074c0:	4623      	mov	r3, r4
 80074c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d014      	beq.n	80074f4 <USB_ActivateEndpoint+0x504>
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e0:	b29c      	uxth	r4, r3
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	441a      	add	r2, r3
 80074ec:	4b1c      	ldr	r3, [pc, #112]	; (8007560 <USB_ActivateEndpoint+0x570>)
 80074ee:	4323      	orrs	r3, r4
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	b29c      	uxth	r4, r3
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	4b11      	ldr	r3, [pc, #68]	; (800755c <USB_ActivateEndpoint+0x56c>)
 8007518:	4323      	orrs	r3, r4
 800751a:	b29b      	uxth	r3, r3
 800751c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	78db      	ldrb	r3, [r3, #3]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d020      	beq.n	8007568 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800753c:	b29c      	uxth	r4, r3
 800753e:	f084 0320 	eor.w	r3, r4, #32
 8007542:	b29c      	uxth	r4, r3
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	441a      	add	r2, r3
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <USB_ActivateEndpoint+0x574>)
 8007550:	4323      	orrs	r3, r4
 8007552:	b29b      	uxth	r3, r3
 8007554:	8013      	strh	r3, [r2, #0]
 8007556:	e01c      	b.n	8007592 <USB_ActivateEndpoint+0x5a2>
 8007558:	ffff8180 	.word	0xffff8180
 800755c:	ffffc080 	.word	0xffffc080
 8007560:	ffff80c0 	.word	0xffff80c0
 8007564:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800757a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800757e:	b29c      	uxth	r4, r3
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	441a      	add	r2, r3
 800758a:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <USB_ActivateEndpoint+0x5d8>)
 800758c:	4323      	orrs	r3, r4
 800758e:	b29b      	uxth	r3, r3
 8007590:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a8:	b29c      	uxth	r4, r3
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	441a      	add	r2, r3
 80075b4:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <USB_ActivateEndpoint+0x5d8>)
 80075b6:	4323      	orrs	r3, r4
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc90      	pop	{r4, r7}
 80075c6:	4770      	bx	lr
 80075c8:	ffff8080 	.word	0xffff8080

080075cc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075cc:	b490      	push	{r4, r7}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	7b1b      	ldrb	r3, [r3, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d171      	bne.n	80076c2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d036      	beq.n	8007654 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29c      	uxth	r4, r3
 80075f4:	4623      	mov	r3, r4
 80075f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d014      	beq.n	8007628 <USB_DeactivateEndpoint+0x5c>
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007614:	b29c      	uxth	r4, r3
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	441a      	add	r2, r3
 8007620:	4b6b      	ldr	r3, [pc, #428]	; (80077d0 <USB_DeactivateEndpoint+0x204>)
 8007622:	4323      	orrs	r3, r4
 8007624:	b29b      	uxth	r3, r3
 8007626:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800763e:	b29c      	uxth	r4, r3
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	4b62      	ldr	r3, [pc, #392]	; (80077d4 <USB_DeactivateEndpoint+0x208>)
 800764c:	4323      	orrs	r3, r4
 800764e:	b29b      	uxth	r3, r3
 8007650:	8013      	strh	r3, [r2, #0]
 8007652:	e144      	b.n	80078de <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29c      	uxth	r4, r3
 8007662:	4623      	mov	r3, r4
 8007664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d014      	beq.n	8007696 <USB_DeactivateEndpoint+0xca>
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	b29b      	uxth	r3, r3
 800767a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007682:	b29c      	uxth	r4, r3
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	441a      	add	r2, r3
 800768e:	4b52      	ldr	r3, [pc, #328]	; (80077d8 <USB_DeactivateEndpoint+0x20c>)
 8007690:	4323      	orrs	r3, r4
 8007692:	b29b      	uxth	r3, r3
 8007694:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ac:	b29c      	uxth	r4, r3
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	441a      	add	r2, r3
 80076b8:	4b46      	ldr	r3, [pc, #280]	; (80077d4 <USB_DeactivateEndpoint+0x208>)
 80076ba:	4323      	orrs	r3, r4
 80076bc:	b29b      	uxth	r3, r3
 80076be:	8013      	strh	r3, [r2, #0]
 80076c0:	e10d      	b.n	80078de <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f040 8088 	bne.w	80077dc <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29c      	uxth	r4, r3
 80076da:	4623      	mov	r3, r4
 80076dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d014      	beq.n	800770e <USB_DeactivateEndpoint+0x142>
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fa:	b29c      	uxth	r4, r3
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	441a      	add	r2, r3
 8007706:	4b34      	ldr	r3, [pc, #208]	; (80077d8 <USB_DeactivateEndpoint+0x20c>)
 8007708:	4323      	orrs	r3, r4
 800770a:	b29b      	uxth	r3, r3
 800770c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29c      	uxth	r4, r3
 800771c:	4623      	mov	r3, r4
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d014      	beq.n	8007750 <USB_DeactivateEndpoint+0x184>
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773c:	b29c      	uxth	r4, r3
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	441a      	add	r2, r3
 8007748:	4b21      	ldr	r3, [pc, #132]	; (80077d0 <USB_DeactivateEndpoint+0x204>)
 800774a:	4323      	orrs	r3, r4
 800774c:	b29b      	uxth	r3, r3
 800774e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	b29c      	uxth	r4, r3
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	441a      	add	r2, r3
 8007772:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <USB_DeactivateEndpoint+0x204>)
 8007774:	4323      	orrs	r3, r4
 8007776:	b29b      	uxth	r3, r3
 8007778:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007790:	b29c      	uxth	r4, r3
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	441a      	add	r2, r3
 800779c:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <USB_DeactivateEndpoint+0x208>)
 800779e:	4323      	orrs	r3, r4
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ba:	b29c      	uxth	r4, r3
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	441a      	add	r2, r3
 80077c6:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <USB_DeactivateEndpoint+0x208>)
 80077c8:	4323      	orrs	r3, r4
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	8013      	strh	r3, [r2, #0]
 80077ce:	e086      	b.n	80078de <USB_DeactivateEndpoint+0x312>
 80077d0:	ffff80c0 	.word	0xffff80c0
 80077d4:	ffff8080 	.word	0xffff8080
 80077d8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29c      	uxth	r4, r3
 80077ea:	4623      	mov	r3, r4
 80077ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d014      	beq.n	800781e <USB_DeactivateEndpoint+0x252>
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780a:	b29c      	uxth	r4, r3
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	441a      	add	r2, r3
 8007816:	4b35      	ldr	r3, [pc, #212]	; (80078ec <USB_DeactivateEndpoint+0x320>)
 8007818:	4323      	orrs	r3, r4
 800781a:	b29b      	uxth	r3, r3
 800781c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29c      	uxth	r4, r3
 800782c:	4623      	mov	r3, r4
 800782e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d014      	beq.n	8007860 <USB_DeactivateEndpoint+0x294>
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784c:	b29c      	uxth	r4, r3
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	441a      	add	r2, r3
 8007858:	4b25      	ldr	r3, [pc, #148]	; (80078f0 <USB_DeactivateEndpoint+0x324>)
 800785a:	4323      	orrs	r3, r4
 800785c:	b29b      	uxth	r3, r3
 800785e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007876:	b29c      	uxth	r4, r3
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	441a      	add	r2, r3
 8007882:	4b1a      	ldr	r3, [pc, #104]	; (80078ec <USB_DeactivateEndpoint+0x320>)
 8007884:	4323      	orrs	r3, r4
 8007886:	b29b      	uxth	r3, r3
 8007888:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a0:	b29c      	uxth	r4, r3
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	441a      	add	r2, r3
 80078ac:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <USB_DeactivateEndpoint+0x328>)
 80078ae:	4323      	orrs	r3, r4
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ca:	b29c      	uxth	r4, r3
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	441a      	add	r2, r3
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <USB_DeactivateEndpoint+0x328>)
 80078d8:	4323      	orrs	r3, r4
 80078da:	b29b      	uxth	r3, r3
 80078dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc90      	pop	{r4, r7}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	ffffc080 	.word	0xffffc080
 80078f0:	ffff80c0 	.word	0xffff80c0
 80078f4:	ffff8080 	.word	0xffff8080

080078f8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078f8:	b590      	push	{r4, r7, lr}
 80078fa:	b08d      	sub	sp, #52	; 0x34
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b01      	cmp	r3, #1
 8007908:	f040 8160 	bne.w	8007bcc <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	699a      	ldr	r2, [r3, #24]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	429a      	cmp	r2, r3
 8007916:	d909      	bls.n	800792c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	1ad2      	subs	r2, r2, r3
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	619a      	str	r2, [r3, #24]
 800792a:	e005      	b.n	8007938 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2200      	movs	r2, #0
 8007936:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	7b1b      	ldrb	r3, [r3, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d119      	bne.n	8007974 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	6959      	ldr	r1, [r3, #20]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	88da      	ldrh	r2, [r3, #6]
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	b29b      	uxth	r3, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fba2 	bl	8008096 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007952:	687c      	ldr	r4, [r7, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795a:	b29b      	uxth	r3, r3
 800795c:	441c      	add	r4, r3
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	011b      	lsls	r3, r3, #4
 8007964:	4423      	add	r3, r4
 8007966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800796a:	461c      	mov	r4, r3
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	b29b      	uxth	r3, r3
 8007970:	8023      	strh	r3, [r4, #0]
 8007972:	e10f      	b.n	8007b94 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	d065      	beq.n	8007a56 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800798a:	687c      	ldr	r4, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d148      	bne.n	8007a26 <USB_EPStartXfer+0x12e>
 8007994:	687c      	ldr	r4, [r7, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799c:	b29b      	uxth	r3, r3
 800799e:	441c      	add	r4, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	4423      	add	r3, r4
 80079a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079ac:	461c      	mov	r4, r3
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10e      	bne.n	80079d2 <USB_EPStartXfer+0xda>
 80079b4:	8823      	ldrh	r3, [r4, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079bc:	b29b      	uxth	r3, r3
 80079be:	8023      	strh	r3, [r4, #0]
 80079c0:	8823      	ldrh	r3, [r4, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	8023      	strh	r3, [r4, #0]
 80079d0:	e03d      	b.n	8007a4e <USB_EPStartXfer+0x156>
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	2b3e      	cmp	r3, #62	; 0x3e
 80079d6:	d810      	bhi.n	80079fa <USB_EPStartXfer+0x102>
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <USB_EPStartXfer+0xf6>
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	3301      	adds	r3, #1
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	029b      	lsls	r3, r3, #10
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	8023      	strh	r3, [r4, #0]
 80079f8:	e029      	b.n	8007a4e <USB_EPStartXfer+0x156>
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	095b      	lsrs	r3, r3, #5
 80079fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	f003 031f 	and.w	r3, r3, #31
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d102      	bne.n	8007a10 <USB_EPStartXfer+0x118>
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	029b      	lsls	r3, r3, #10
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	8023      	strh	r3, [r4, #0]
 8007a24:	e013      	b.n	8007a4e <USB_EPStartXfer+0x156>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d10f      	bne.n	8007a4e <USB_EPStartXfer+0x156>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	441c      	add	r4, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	4423      	add	r3, r4
 8007a40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	895b      	ldrh	r3, [r3, #10]
 8007a52:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007a54:	e063      	b.n	8007b1e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d148      	bne.n	8007af0 <USB_EPStartXfer+0x1f8>
 8007a5e:	687c      	ldr	r4, [r7, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	441c      	add	r4, r3
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	4423      	add	r3, r4
 8007a72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a76:	461c      	mov	r4, r3
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10e      	bne.n	8007a9c <USB_EPStartXfer+0x1a4>
 8007a7e:	8823      	ldrh	r3, [r4, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	8023      	strh	r3, [r4, #0]
 8007a8a:	8823      	ldrh	r3, [r4, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	8023      	strh	r3, [r4, #0]
 8007a9a:	e03d      	b.n	8007b18 <USB_EPStartXfer+0x220>
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	2b3e      	cmp	r3, #62	; 0x3e
 8007aa0:	d810      	bhi.n	8007ac4 <USB_EPStartXfer+0x1cc>
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	623b      	str	r3, [r7, #32]
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <USB_EPStartXfer+0x1c0>
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	623b      	str	r3, [r7, #32]
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	029b      	lsls	r3, r3, #10
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	8023      	strh	r3, [r4, #0]
 8007ac2:	e029      	b.n	8007b18 <USB_EPStartXfer+0x220>
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	095b      	lsrs	r3, r3, #5
 8007ac8:	623b      	str	r3, [r7, #32]
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	f003 031f 	and.w	r3, r3, #31
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d102      	bne.n	8007ada <USB_EPStartXfer+0x1e2>
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	029b      	lsls	r3, r3, #10
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8023      	strh	r3, [r4, #0]
 8007aee:	e013      	b.n	8007b18 <USB_EPStartXfer+0x220>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d10f      	bne.n	8007b18 <USB_EPStartXfer+0x220>
 8007af8:	687c      	ldr	r4, [r7, #4]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	441c      	add	r4, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	4423      	add	r3, r4
 8007b0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b10:	461c      	mov	r4, r3
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	891b      	ldrh	r3, [r3, #8]
 8007b1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	6959      	ldr	r1, [r3, #20]
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fab4 	bl	8008096 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	785b      	ldrb	r3, [r3, #1]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d115      	bne.n	8007b62 <USB_EPStartXfer+0x26a>
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4c:	b29c      	uxth	r4, r3
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	441a      	add	r2, r3
 8007b58:	4b9a      	ldr	r3, [pc, #616]	; (8007dc4 <USB_EPStartXfer+0x4cc>)
 8007b5a:	4323      	orrs	r3, r4
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8013      	strh	r3, [r2, #0]
 8007b60:	e018      	b.n	8007b94 <USB_EPStartXfer+0x29c>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d114      	bne.n	8007b94 <USB_EPStartXfer+0x29c>
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b80:	b29c      	uxth	r4, r3
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	441a      	add	r2, r3
 8007b8c:	4b8e      	ldr	r3, [pc, #568]	; (8007dc8 <USB_EPStartXfer+0x4d0>)
 8007b8e:	4323      	orrs	r3, r4
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007baa:	b29c      	uxth	r4, r3
 8007bac:	f084 0310 	eor.w	r3, r4, #16
 8007bb0:	b29c      	uxth	r4, r3
 8007bb2:	f084 0320 	eor.w	r3, r4, #32
 8007bb6:	b29c      	uxth	r4, r3
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	441a      	add	r2, r3
 8007bc2:	4b82      	ldr	r3, [pc, #520]	; (8007dcc <USB_EPStartXfer+0x4d4>)
 8007bc4:	4323      	orrs	r3, r4
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8013      	strh	r3, [r2, #0]
 8007bca:	e146      	b.n	8007e5a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d909      	bls.n	8007bec <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	1ad2      	subs	r2, r2, r3
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	619a      	str	r2, [r3, #24]
 8007bea:	e005      	b.n	8007bf8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	7b1b      	ldrb	r3, [r3, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d148      	bne.n	8007c92 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c00:	687c      	ldr	r4, [r7, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	441c      	add	r4, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	4423      	add	r3, r4
 8007c14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c18:	461c      	mov	r4, r3
 8007c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10e      	bne.n	8007c3e <USB_EPStartXfer+0x346>
 8007c20:	8823      	ldrh	r3, [r4, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	8023      	strh	r3, [r4, #0]
 8007c2c:	8823      	ldrh	r3, [r4, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	8023      	strh	r3, [r4, #0]
 8007c3c:	e0f2      	b.n	8007e24 <USB_EPStartXfer+0x52c>
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	2b3e      	cmp	r3, #62	; 0x3e
 8007c42:	d810      	bhi.n	8007c66 <USB_EPStartXfer+0x36e>
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	085b      	lsrs	r3, r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <USB_EPStartXfer+0x362>
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	3301      	adds	r3, #1
 8007c58:	61fb      	str	r3, [r7, #28]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	029b      	lsls	r3, r3, #10
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	8023      	strh	r3, [r4, #0]
 8007c64:	e0de      	b.n	8007e24 <USB_EPStartXfer+0x52c>
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	095b      	lsrs	r3, r3, #5
 8007c6a:	61fb      	str	r3, [r7, #28]
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	f003 031f 	and.w	r3, r3, #31
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <USB_EPStartXfer+0x384>
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	029b      	lsls	r3, r3, #10
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	8023      	strh	r3, [r4, #0]
 8007c90:	e0c8      	b.n	8007e24 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d148      	bne.n	8007d2c <USB_EPStartXfer+0x434>
 8007c9a:	687c      	ldr	r4, [r7, #4]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	441c      	add	r4, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	4423      	add	r3, r4
 8007cae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cb2:	461c      	mov	r4, r3
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10e      	bne.n	8007cd8 <USB_EPStartXfer+0x3e0>
 8007cba:	8823      	ldrh	r3, [r4, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	8023      	strh	r3, [r4, #0]
 8007cc6:	8823      	ldrh	r3, [r4, #0]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	8023      	strh	r3, [r4, #0]
 8007cd6:	e03d      	b.n	8007d54 <USB_EPStartXfer+0x45c>
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	2b3e      	cmp	r3, #62	; 0x3e
 8007cdc:	d810      	bhi.n	8007d00 <USB_EPStartXfer+0x408>
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	085b      	lsrs	r3, r3, #1
 8007ce2:	61bb      	str	r3, [r7, #24]
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <USB_EPStartXfer+0x3fc>
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	61bb      	str	r3, [r7, #24]
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	029b      	lsls	r3, r3, #10
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	8023      	strh	r3, [r4, #0]
 8007cfe:	e029      	b.n	8007d54 <USB_EPStartXfer+0x45c>
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <USB_EPStartXfer+0x41e>
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	029b      	lsls	r3, r3, #10
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	8023      	strh	r3, [r4, #0]
 8007d2a:	e013      	b.n	8007d54 <USB_EPStartXfer+0x45c>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d10f      	bne.n	8007d54 <USB_EPStartXfer+0x45c>
 8007d34:	687c      	ldr	r4, [r7, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	441c      	add	r4, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	4423      	add	r3, r4
 8007d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d4c:	461c      	mov	r4, r3
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	8023      	strh	r3, [r4, #0]
 8007d54:	687c      	ldr	r4, [r7, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	785b      	ldrb	r3, [r3, #1]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d14e      	bne.n	8007dfc <USB_EPStartXfer+0x504>
 8007d5e:	687c      	ldr	r4, [r7, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	441c      	add	r4, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	4423      	add	r3, r4
 8007d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d76:	461c      	mov	r4, r3
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10e      	bne.n	8007d9c <USB_EPStartXfer+0x4a4>
 8007d7e:	8823      	ldrh	r3, [r4, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	8023      	strh	r3, [r4, #0]
 8007d8a:	8823      	ldrh	r3, [r4, #0]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	8023      	strh	r3, [r4, #0]
 8007d9a:	e043      	b.n	8007e24 <USB_EPStartXfer+0x52c>
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8007da0:	d816      	bhi.n	8007dd0 <USB_EPStartXfer+0x4d8>
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <USB_EPStartXfer+0x4c0>
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	3301      	adds	r3, #1
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	029b      	lsls	r3, r3, #10
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	8023      	strh	r3, [r4, #0]
 8007dc2:	e02f      	b.n	8007e24 <USB_EPStartXfer+0x52c>
 8007dc4:	ffff80c0 	.word	0xffff80c0
 8007dc8:	ffffc080 	.word	0xffffc080
 8007dcc:	ffff8080 	.word	0xffff8080
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d102      	bne.n	8007de6 <USB_EPStartXfer+0x4ee>
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	029b      	lsls	r3, r3, #10
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	8023      	strh	r3, [r4, #0]
 8007dfa:	e013      	b.n	8007e24 <USB_EPStartXfer+0x52c>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	785b      	ldrb	r3, [r3, #1]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d10f      	bne.n	8007e24 <USB_EPStartXfer+0x52c>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	441c      	add	r4, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	4423      	add	r3, r4
 8007e16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e1a:	613b      	str	r3, [r7, #16]
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3a:	b29c      	uxth	r4, r3
 8007e3c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007e40:	b29c      	uxth	r4, r3
 8007e42:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007e46:	b29c      	uxth	r4, r3
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	441a      	add	r2, r3
 8007e52:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <USB_EPStartXfer+0x56c>)
 8007e54:	4323      	orrs	r3, r4
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3734      	adds	r7, #52	; 0x34
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd90      	pop	{r4, r7, pc}
 8007e64:	ffff8080 	.word	0xffff8080

08007e68 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e68:	b490      	push	{r4, r7}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d018      	beq.n	8007eac <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e90:	b29c      	uxth	r4, r3
 8007e92:	f084 0310 	eor.w	r3, r4, #16
 8007e96:	b29c      	uxth	r4, r3
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	441a      	add	r2, r3
 8007ea2:	4b11      	ldr	r3, [pc, #68]	; (8007ee8 <USB_EPSetStall+0x80>)
 8007ea4:	4323      	orrs	r3, r4
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	8013      	strh	r3, [r2, #0]
 8007eaa:	e017      	b.n	8007edc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec2:	b29c      	uxth	r4, r3
 8007ec4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007ec8:	b29c      	uxth	r4, r3
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	441a      	add	r2, r3
 8007ed4:	4b04      	ldr	r3, [pc, #16]	; (8007ee8 <USB_EPSetStall+0x80>)
 8007ed6:	4323      	orrs	r3, r4
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc90      	pop	{r4, r7}
 8007ee6:	4770      	bx	lr
 8007ee8:	ffff8080 	.word	0xffff8080

08007eec <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007eec:	b490      	push	{r4, r7}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	7b1b      	ldrb	r3, [r3, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d17d      	bne.n	8007ffa <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d03d      	beq.n	8007f82 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29c      	uxth	r4, r3
 8007f14:	4623      	mov	r3, r4
 8007f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d014      	beq.n	8007f48 <USB_EPClearStall+0x5c>
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f34:	b29c      	uxth	r4, r3
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	441a      	add	r2, r3
 8007f40:	4b31      	ldr	r3, [pc, #196]	; (8008008 <USB_EPClearStall+0x11c>)
 8007f42:	4323      	orrs	r3, r4
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	78db      	ldrb	r3, [r3, #3]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d054      	beq.n	8007ffa <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f66:	b29c      	uxth	r4, r3
 8007f68:	f084 0320 	eor.w	r3, r4, #32
 8007f6c:	b29c      	uxth	r4, r3
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	441a      	add	r2, r3
 8007f78:	4b24      	ldr	r3, [pc, #144]	; (800800c <USB_EPClearStall+0x120>)
 8007f7a:	4323      	orrs	r3, r4
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	8013      	strh	r3, [r2, #0]
 8007f80:	e03b      	b.n	8007ffa <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	b29c      	uxth	r4, r3
 8007f90:	4623      	mov	r3, r4
 8007f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d014      	beq.n	8007fc4 <USB_EPClearStall+0xd8>
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb0:	b29c      	uxth	r4, r3
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	441a      	add	r2, r3
 8007fbc:	4b14      	ldr	r3, [pc, #80]	; (8008010 <USB_EPClearStall+0x124>)
 8007fbe:	4323      	orrs	r3, r4
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fda:	b29c      	uxth	r4, r3
 8007fdc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007fe0:	b29c      	uxth	r4, r3
 8007fe2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007fe6:	b29c      	uxth	r4, r3
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	441a      	add	r2, r3
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <USB_EPClearStall+0x120>)
 8007ff4:	4323      	orrs	r3, r4
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bc90      	pop	{r4, r7}
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	ffff80c0 	.word	0xffff80c0
 800800c:	ffff8080 	.word	0xffff8080
 8008010:	ffffc080 	.word	0xffffc080

08008014 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d103      	bne.n	800802e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2280      	movs	r2, #128	; 0x80
 800802a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr

0800803a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr

0800804e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	bc80      	pop	{r7}
 8008060:	4770      	bx	lr

08008062 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008070:	b29b      	uxth	r3, r3
 8008072:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008074:	68fb      	ldr	r3, [r7, #12]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr

08008096 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008096:	b480      	push	{r7}
 8008098:	b08d      	sub	sp, #52	; 0x34
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	4611      	mov	r1, r2
 80080a2:	461a      	mov	r2, r3
 80080a4:	460b      	mov	r3, r1
 80080a6:	80fb      	strh	r3, [r7, #6]
 80080a8:	4613      	mov	r3, r2
 80080aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80080ac:	88bb      	ldrh	r3, [r7, #4]
 80080ae:	3301      	adds	r3, #1
 80080b0:	085b      	lsrs	r3, r3, #1
 80080b2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080bc:	88fb      	ldrh	r3, [r7, #6]
 80080be:	005a      	lsls	r2, r3, #1
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080ce:	e01e      	b.n	800810e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	3301      	adds	r3, #1
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	3302      	adds	r3, #2
 80080fa:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	3302      	adds	r3, #2
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	3301      	adds	r3, #1
 8008106:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	3b01      	subs	r3, #1
 800810c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1dd      	bne.n	80080d0 <USB_WritePMA+0x3a>
  }
}
 8008114:	bf00      	nop
 8008116:	3734      	adds	r7, #52	; 0x34
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr

0800811e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800811e:	b480      	push	{r7}
 8008120:	b08b      	sub	sp, #44	; 0x2c
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	4611      	mov	r1, r2
 800812a:	461a      	mov	r2, r3
 800812c:	460b      	mov	r3, r1
 800812e:	80fb      	strh	r3, [r7, #6]
 8008130:	4613      	mov	r3, r2
 8008132:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008134:	88bb      	ldrh	r3, [r7, #4]
 8008136:	085b      	lsrs	r3, r3, #1
 8008138:	b29b      	uxth	r3, r3
 800813a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008144:	88fb      	ldrh	r3, [r7, #6]
 8008146:	005a      	lsls	r2, r3, #1
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008150:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
 8008156:	e01b      	b.n	8008190 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	3302      	adds	r3, #2
 8008164:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	b2da      	uxtb	r2, r3
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	3301      	adds	r3, #1
 8008172:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	0a1b      	lsrs	r3, r3, #8
 8008178:	b2da      	uxtb	r2, r3
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	3301      	adds	r3, #1
 8008182:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	3302      	adds	r3, #2
 8008188:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	3b01      	subs	r3, #1
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e0      	bne.n	8008158 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008196:	88bb      	ldrh	r3, [r7, #4]
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	701a      	strb	r2, [r3, #0]
  }
}
 80081b2:	bf00      	nop
 80081b4:	372c      	adds	r7, #44	; 0x2c
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr

080081bc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr
	...

080081d4 <_ZN10AdcHandlerC1Ev>:
#include "AdcHandler.h"


AdcHandler::AdcHandler() {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	4a07      	ldr	r2, [pc, #28]	; (80081fc <_ZN10AdcHandlerC1Ev+0x28>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	601a      	str	r2, [r3, #0]
	extern std::vector<AdcHandler*> adcHandlers;
	adcHandlers.push_back(this);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	f107 030c 	add.w	r3, r7, #12
 80081ea:	4619      	mov	r1, r3
 80081ec:	4804      	ldr	r0, [pc, #16]	; (8008200 <_ZN10AdcHandlerC1Ev+0x2c>)
 80081ee:	f000 f879 	bl	80082e4 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE9push_backEOS1_>

}
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	08019184 	.word	0x08019184
 8008200:	20000b4c 	.word	0x20000b4c

08008204 <_ZN10AdcHandlerD1Ev>:

AdcHandler::~AdcHandler() {
 8008204:	b590      	push	{r4, r7, lr}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	4a21      	ldr	r2, [pc, #132]	; (8008294 <_ZN10AdcHandlerD1Ev+0x90>)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	601a      	str	r2, [r3, #0]
	extern std::vector<AdcHandler*> adcHandlers;
	for (uint8_t i = 0; i < adcHandlers.size(); i++){
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
 8008216:	7dfc      	ldrb	r4, [r7, #23]
 8008218:	481f      	ldr	r0, [pc, #124]	; (8008298 <_ZN10AdcHandlerD1Ev+0x94>)
 800821a:	f000 f874 	bl	8008306 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 800821e:	4603      	mov	r3, r0
 8008220:	429c      	cmp	r4, r3
 8008222:	bf34      	ite	cc
 8008224:	2301      	movcc	r3, #1
 8008226:	2300      	movcs	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d02d      	beq.n	800828a <_ZN10AdcHandlerD1Ev+0x86>
		if(adcHandlers[i] == this){
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	4619      	mov	r1, r3
 8008232:	4819      	ldr	r0, [pc, #100]	; (8008298 <_ZN10AdcHandlerD1Ev+0x94>)
 8008234:	f000 f877 	bl	8008326 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEixEj>
 8008238:	4603      	mov	r3, r0
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	429a      	cmp	r2, r3
 8008240:	bf0c      	ite	eq
 8008242:	2301      	moveq	r3, #1
 8008244:	2300      	movne	r3, #0
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01a      	beq.n	8008282 <_ZN10AdcHandlerD1Ev+0x7e>
			adcHandlers.erase(adcHandlers.begin()+i);
 800824c:	4812      	ldr	r0, [pc, #72]	; (8008298 <_ZN10AdcHandlerD1Ev+0x94>)
 800824e:	f000 f879 	bl	8008344 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 8008252:	4603      	mov	r3, r0
 8008254:	613b      	str	r3, [r7, #16]
 8008256:	7dfa      	ldrb	r2, [r7, #23]
 8008258:	f107 0310 	add.w	r3, r7, #16
 800825c:	4611      	mov	r1, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f000 f880 	bl	8008364 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8008264:	4603      	mov	r3, r0
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	f107 020c 	add.w	r2, r7, #12
 800826c:	f107 0308 	add.w	r3, r7, #8
 8008270:	4611      	mov	r1, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f88e 	bl	8008394 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	4807      	ldr	r0, [pc, #28]	; (8008298 <_ZN10AdcHandlerD1Ev+0x94>)
 800827c:	f000 f89b 	bl	80083b6 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 8008280:	e003      	b.n	800828a <_ZN10AdcHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < adcHandlers.size(); i++){
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	3301      	adds	r3, #1
 8008286:	75fb      	strb	r3, [r7, #23]
 8008288:	e7c5      	b.n	8008216 <_ZN10AdcHandlerD1Ev+0x12>
		}
	}
}
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4618      	mov	r0, r3
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	bd90      	pop	{r4, r7, pc}
 8008294:	08019184 	.word	0x08019184
 8008298:	20000b4c 	.word	0x20000b4c

0800829c <_ZN10AdcHandlerD0Ev>:
AdcHandler::~AdcHandler() {
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
}
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff ffad 	bl	8008204 <_ZN10AdcHandlerD1Ev>
 80082aa:	2104      	movs	r1, #4
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f00c f925 	bl	80144fc <_ZdlPvj>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <_ZN10AdcHandler6adcUpdEPVm>:

void AdcHandler::adcUpd(volatile uint32_t* ADC_BUF){
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]

}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr

080082d0 <_ZSt4moveIRP10AdcHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr

080082e4 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80082ee:	6838      	ldr	r0, [r7, #0]
 80082f0:	f7ff ffee 	bl	80082d0 <_ZSt4moveIRP10AdcHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80082f4:	4603      	mov	r3, r0
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f88d 	bl	8008418 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	461a      	mov	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	109b      	asrs	r3, r3, #2
 800831c:	4618      	mov	r0, r3
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	bc80      	pop	{r7}
 8008324:	4770      	bx	lr

08008326 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
      }
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr

08008344 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	f107 030c 	add.w	r3, r7, #12
 8008352:	4611      	mov	r1, r2
 8008354:	4618      	mov	r0, r3
 8008356:	f000 f88d 	bl	8008474 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      __normal_iterator&
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	f107 020c 	add.w	r2, r7, #12
 800837e:	f107 0308 	add.w	r3, r7, #8
 8008382:	4611      	mov	r1, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f875 	bl	8008474 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800839e:	6838      	ldr	r0, [r7, #0]
 80083a0:	f000 f877 	bl	8008492 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80083a4:	4603      	mov	r3, r0
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff ffbf 	bl	8008344 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 80083c6:	4603      	mov	r3, r0
 80083c8:	60bb      	str	r3, [r7, #8]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f86b 	bl	80084a6 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE6cbeginEv>
 80083d0:	4603      	mov	r3, r0
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	f107 020c 	add.w	r2, r7, #12
 80083d8:	463b      	mov	r3, r7
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f876 	bl	80084ce <_ZN9__gnu_cxxmiIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 80083e2:	4602      	mov	r2, r0
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff ffba 	bl	8008364 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 80083f0:	4603      	mov	r3, r0
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f880 	bl	80084fa <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 80083fa:	4603      	mov	r3, r0
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr

08008418 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8008418:	b5b0      	push	{r4, r5, r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	429a      	cmp	r2, r3
 800842c:	d011      	beq.n	8008452 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800842e:	687c      	ldr	r4, [r7, #4]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685d      	ldr	r5, [r3, #4]
 8008434:	6838      	ldr	r0, [r7, #0]
 8008436:	f7ff ffe5 	bl	8008404 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800843a:	4603      	mov	r3, r0
 800843c:	461a      	mov	r2, r3
 800843e:	4629      	mov	r1, r5
 8008440:	4620      	mov	r0, r4
 8008442:	f000 f896 	bl	8008572 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	1d1a      	adds	r2, r3, #4
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8008450:	e00c      	b.n	800846c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f8a0 	bl	8008598 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 8008458:	4604      	mov	r4, r0
 800845a:	6838      	ldr	r0, [r7, #0]
 800845c:	f7ff ffd2 	bl	8008404 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008460:	4603      	mov	r3, r0
 8008462:	461a      	mov	r2, r3
 8008464:	4621      	mov	r1, r4
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f8a8 	bl	80085bc <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bdb0      	pop	{r4, r5, r7, pc}

08008474 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	bc80      	pop	{r7}
 8008490:	4770      	bx	lr

08008492 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4618      	mov	r0, r3
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr

080084a6 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	f107 020c 	add.w	r2, r7, #12
 80084b8:	f107 0308 	add.w	r3, r7, #8
 80084bc:	4611      	mov	r1, r2
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f908 	bl	80086d4 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <_ZN9__gnu_cxxmiIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80084ce:	b590      	push	{r4, r7, lr}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f90a 	bl	80086f2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80084de:	4603      	mov	r3, r0
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	461c      	mov	r4, r3
 80084e4:	6838      	ldr	r0, [r7, #0]
 80084e6:	f000 f904 	bl	80086f2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80084ea:	4603      	mov	r3, r0
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	1ae3      	subs	r3, r4, r3
 80084f0:	109b      	asrs	r3, r3, #2
 80084f2:	4618      	mov	r0, r3
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd90      	pop	{r4, r7, pc}

080084fa <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 80084fa:	b590      	push	{r4, r7, lr}
 80084fc:	b085      	sub	sp, #20
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	6039      	str	r1, [r7, #0]
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 8008504:	463b      	mov	r3, r7
 8008506:	2101      	movs	r1, #1
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff ff2b 	bl	8008364 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800850e:	4603      	mov	r3, r0
 8008510:	60bb      	str	r3, [r7, #8]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f840 	bl	8008598 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 8008518:	4603      	mov	r3, r0
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	f107 020c 	add.w	r2, r7, #12
 8008520:	f107 0308 	add.w	r3, r7, #8
 8008524:	4611      	mov	r1, r2
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f8ed 	bl	8008706 <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00e      	beq.n	8008550 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8008532:	463b      	mov	r3, r7
 8008534:	2101      	movs	r1, #1
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff ff14 	bl	8008364 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800853c:	4604      	mov	r4, r0
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f82a 	bl	8008598 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 8008544:	4603      	mov	r3, r0
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	4619      	mov	r1, r3
 800854a:	4620      	mov	r0, r4
 800854c:	f000 f8f3 	bl	8008736 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	1f1a      	subs	r2, r3, #4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	4619      	mov	r1, r3
 8008562:	4610      	mov	r0, r2
 8008564:	f000 f8ff 	bl	8008766 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 8008568:	683b      	ldr	r3, [r7, #0]
    }
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	bd90      	pop	{r4, r7, pc}

08008572 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff ff40 	bl	8008404 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008584:	4603      	mov	r3, r0
 8008586:	461a      	mov	r2, r3
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f8f8 	bl	8008780 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	1d1a      	adds	r2, r3, #4
 80085a4:	f107 030c 	add.w	r3, r7, #12
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff ff62 	bl	8008474 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80085bc:	b5b0      	push	{r4, r5, r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80085c8:	4a41      	ldr	r2, [pc, #260]	; (80086d0 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 80085ca:	2101      	movs	r1, #1
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f8ef 	bl	80087b0 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc>
 80085d2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff feb5 	bl	8008344 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 80085da:	4603      	mov	r3, r0
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	f107 0214 	add.w	r2, r7, #20
 80085e2:	f107 0308 	add.w	r3, r7, #8
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 f929 	bl	8008840 <_ZN9__gnu_cxxmiIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80085ee:	4603      	mov	r3, r0
 80085f0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f938 	bl	800886c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj>
 80085fc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8008602:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	18d5      	adds	r5, r2, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fef9 	bl	8008404 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	4629      	mov	r1, r5
 8008618:	4620      	mov	r0, r4
 800861a:	f7ff ffaa 	bl	8008572 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800861e:	2300      	movs	r3, #0
 8008620:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681c      	ldr	r4, [r3, #0]
 8008626:	f107 0308 	add.w	r3, r7, #8
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff ff31 	bl	8008492 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008630:	4603      	mov	r3, r0
 8008632:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f92c 	bl	8008894 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800863c:	4603      	mov	r3, r0
	  __new_finish
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	4629      	mov	r1, r5
 8008642:	4620      	mov	r0, r4
 8008644:	f000 f930 	bl	80088a8 <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008648:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	3304      	adds	r3, #4
 800864e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8008650:	f107 0308 	add.w	r3, r7, #8
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff ff1c 	bl	8008492 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800865a:	4603      	mov	r3, r0
 800865c:	681c      	ldr	r4, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 f915 	bl	8008894 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800866a:	4603      	mov	r3, r0
	  __new_finish
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	4629      	mov	r1, r5
 8008670:	4620      	mov	r0, r4
 8008672:	f000 f919 	bl	80088a8 <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008676:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681c      	ldr	r4, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f906 	bl	8008894 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8008688:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800868a:	461a      	mov	r2, r3
 800868c:	4629      	mov	r1, r5
 800868e:	4620      	mov	r0, r4
 8008690:	f000 f923 	bl	80088da <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800869e:	461a      	mov	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80086a8:	461a      	mov	r2, r3
 80086aa:	f000 f924 	bl	80088f6 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	609a      	str	r2, [r3, #8]
    }
 80086c6:	bf00      	nop
 80086c8:	3728      	adds	r7, #40	; 0x28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bdb0      	pop	{r4, r5, r7, pc}
 80086ce:	bf00      	nop
 80086d0:	08018ccc 	.word	0x08018ccc

080086d4 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr

080086f2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	bc80      	pop	{r7}
 8008704:	4770      	bx	lr

08008706 <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008706:	b590      	push	{r4, r7, lr}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff febe 	bl	8008492 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008716:	4603      	mov	r3, r0
 8008718:	681c      	ldr	r4, [r3, #0]
 800871a:	6838      	ldr	r0, [r7, #0]
 800871c:	f7ff feb9 	bl	8008492 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008720:	4603      	mov	r3, r0
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	429c      	cmp	r4, r3
 8008726:	bf14      	ite	ne
 8008728:	2301      	movne	r3, #1
 800872a:	2300      	moveq	r3, #0
 800872c:	b2db      	uxtb	r3, r3
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	bd90      	pop	{r4, r7, pc}

08008736 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8008736:	b590      	push	{r4, r7, lr}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 f8ea 	bl	800891c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8008748:	4604      	mov	r4, r0
 800874a:	68b8      	ldr	r0, [r7, #8]
 800874c:	f000 f8e6 	bl	800891c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8008750:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	4619      	mov	r1, r3
 8008756:	4620      	mov	r0, r4
 8008758:	f000 f8ea 	bl	8008930 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800875c:	4603      	mov	r3, r0
    }
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	bd90      	pop	{r4, r7, pc}

08008766 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f902 	bl	800897c <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE7destroyIS2_EEvPT_>
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8008780:	b590      	push	{r4, r7, lr}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff fe39 	bl	8008404 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008792:	4603      	mov	r3, r0
 8008794:	681c      	ldr	r4, [r3, #0]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	4619      	mov	r1, r3
 800879a:	2004      	movs	r0, #4
 800879c:	f7ff fd0e 	bl	80081bc <_ZnwjPv>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d000      	beq.n	80087a8 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 80087a6:	601c      	str	r4, [r3, #0]
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd90      	pop	{r4, r7, pc}

080087b0 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80087b0:	b590      	push	{r4, r7, lr}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 f8e7 	bl	8008990 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 80087c2:	4604      	mov	r4, r0
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff fd9e 	bl	8008306 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 80087ca:	4603      	mov	r3, r0
 80087cc:	1ae2      	subs	r2, r4, r3
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	bf34      	ite	cc
 80087d4:	2301      	movcc	r3, #1
 80087d6:	2300      	movcs	r3, #0
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f00b feb4 	bl	801454e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f7ff fd8d 	bl	8008306 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 80087ec:	4604      	mov	r4, r0
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff fd89 	bl	8008306 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 80087f4:	4603      	mov	r3, r0
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	f107 0208 	add.w	r2, r7, #8
 80087fc:	f107 0310 	add.w	r3, r7, #16
 8008800:	4611      	mov	r1, r2
 8008802:	4618      	mov	r0, r3
 8008804:	f000 f8d5 	bl	80089b2 <_ZSt3maxIjERKT_S2_S2_>
 8008808:	4603      	mov	r3, r0
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4423      	add	r3, r4
 800880e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f7ff fd78 	bl	8008306 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 8008816:	4602      	mov	r2, r0
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	4293      	cmp	r3, r2
 800881c:	d306      	bcc.n	800882c <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 f8b6 	bl	8008990 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 8008824:	4602      	mov	r2, r0
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	4293      	cmp	r3, r2
 800882a:	d904      	bls.n	8008836 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 f8af 	bl	8008990 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 8008832:	4603      	mov	r3, r0
 8008834:	e000      	b.n	8008838 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 8008836:	697b      	ldr	r3, [r7, #20]
      }
 8008838:	4618      	mov	r0, r3
 800883a:	371c      	adds	r7, #28
 800883c:	46bd      	mov	sp, r7
 800883e:	bd90      	pop	{r4, r7, pc}

08008840 <_ZN9__gnu_cxxmiIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008840:	b590      	push	{r4, r7, lr}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff fe21 	bl	8008492 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008850:	4603      	mov	r3, r0
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461c      	mov	r4, r3
 8008856:	6838      	ldr	r0, [r7, #0]
 8008858:	f7ff fe1b 	bl	8008492 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800885c:	4603      	mov	r3, r0
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	1ae3      	subs	r3, r4, r3
 8008862:	109b      	asrs	r3, r3, #2
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	bd90      	pop	{r4, r7, pc}

0800886c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d006      	beq.n	800888a <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj+0x1e>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f8a9 	bl	80089d8 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8allocateERS2_j>
 8008886:	4603      	mov	r3, r0
 8008888:	e000      	b.n	800888c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj+0x20>
 800888a:	2300      	movs	r3, #0
      }
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr

080088a8 <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80088a8:	b590      	push	{r4, r7, lr}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f89d 	bl	80089f6 <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>
 80088bc:	4604      	mov	r4, r0
 80088be:	68b8      	ldr	r0, [r7, #8]
 80088c0:	f000 f899 	bl	80089f6 <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>
 80088c4:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 f8a2 	bl	8008a14 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10AdcHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80088d0:	4603      	mov	r3, r0
    }
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd90      	pop	{r4, r7, pc}

080088da <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f8a4 	bl	8008a36 <_ZSt8_DestroyIPP10AdcHandlerEvT_S3_>
    }
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
	if (__p)
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	68b9      	ldr	r1, [r7, #8]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f89e 	bl	8008a50 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE10deallocateERS2_PS1_j>
      }
 8008914:	bf00      	nop
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr

08008930 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008930:	b5b0      	push	{r4, r5, r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f896 	bl	8008a6e <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8008942:	4604      	mov	r4, r0
 8008944:	68b8      	ldr	r0, [r7, #8]
 8008946:	f000 f892 	bl	8008a6e <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800894a:	4605      	mov	r5, r0
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f88e 	bl	8008a6e <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8008952:	4603      	mov	r3, r0
 8008954:	461a      	mov	r2, r3
 8008956:	4629      	mov	r1, r5
 8008958:	4620      	mov	r0, r4
 800895a:	f000 f896 	bl	8008a8a <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 800895e:	4603      	mov	r3, r0
 8008960:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8008962:	f107 0214 	add.w	r2, r7, #20
 8008966:	f107 0310 	add.w	r3, r7, #16
 800896a:	4611      	mov	r1, r2
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff fd81 	bl	8008474 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008972:	693b      	ldr	r3, [r7, #16]
    }
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bdb0      	pop	{r4, r5, r7, pc}

0800897c <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4618      	mov	r0, r3
 800899c:	f000 f893 	bl	8008ac6 <_ZNKSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80089a0:	4603      	mov	r3, r0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f883 	bl	8008aae <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8max_sizeERKS2_>
 80089a8:	4603      	mov	r3, r0
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d201      	bcs.n	80089cc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	e000      	b.n	80089ce <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80089cc:	687b      	ldr	r3, [r7, #4]
    }
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr

080089d8 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80089e2:	2200      	movs	r2, #0
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f877 	bl	8008ada <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv>
 80089ec:	4603      	mov	r3, r0
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80089fe:	f107 030c 	add.w	r3, r7, #12
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 f886 	bl	8008b16 <_ZNSt13move_iteratorIPP10AdcHandlerEC1ES2_>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10AdcHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	68b9      	ldr	r1, [r7, #8]
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f883 	bl	8008b32 <_ZSt18uninitialized_copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <_ZSt8_DestroyIPP10AdcHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f887 	bl	8008b56 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10AdcHandlerEEvT_S5_>
    }
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f882 	bl	8008b6a <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE10deallocateEPS2_j>
 8008a66:	bf00      	nop
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8008a76:	1d3b      	adds	r3, r7, #4
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7ff fd0a 	bl	8008492 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b086      	sub	sp, #24
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8008a96:	2301      	movs	r3, #1
 8008a98:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 f870 	bl	8008b84 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_>
 8008aa4:	4603      	mov	r3, r0
    }
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f881 	bl	8008bbe <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>
 8008abc:	4603      	mov	r3, r0
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <_ZNKSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr

08008ada <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 f869 	bl	8008bbe <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>
 8008aec:	4602      	mov	r2, r0
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	bf8c      	ite	hi
 8008af4:	2301      	movhi	r3, #1
 8008af6:	2300      	movls	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008afe:	f00b fd1d 	bl	801453c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f00b fcfa 	bl	8014500 <_Znwj>
 8008b0c:	4603      	mov	r3, r0
      }
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <_ZNSt13move_iteratorIPP10AdcHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 8008b16:	b480      	push	{r7}
 8008b18:	b083      	sub	sp, #12
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <_ZSt18uninitialized_copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b086      	sub	sp, #24
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 f844 	bl	8008bd4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10AdcHandlerES5_EET0_T_S8_S7_>
 8008b4c:	4603      	mov	r3, r0
    }
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10AdcHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bc80      	pop	{r7}
 8008b68:	4770      	bx	lr

08008b6a <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008b76:	68b8      	ldr	r0, [r7, #8]
 8008b78:	f00b fcdc 	bl	8014534 <_ZdlPv>
      }
 8008b7c:	bf00      	nop
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	109b      	asrs	r3, r3, #2
 8008b98:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d006      	beq.n	8008bae <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f00e fec3 	bl	8017934 <memmove>
	  return __result + _Num;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	4413      	add	r3, r2
	}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008bc6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008bca:	4618      	mov	r0, r3
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10AdcHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f000 f805 	bl	8008bf4 <_ZSt4copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>
 8008bea:	4603      	mov	r3, r0
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <_ZSt4copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8008bf4:	b590      	push	{r4, r7, lr}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 f80f 	bl	8008c24 <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008c06:	4604      	mov	r4, r0
 8008c08:	68b8      	ldr	r0, [r7, #8]
 8008c0a:	f000 f80b 	bl	8008c24 <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008c0e:	4603      	mov	r3, r0
	       __result));
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	4619      	mov	r1, r3
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 f816 	bl	8008c46 <_ZSt14__copy_move_a2ILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8008c1a:	4603      	mov	r3, r0
    }
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd90      	pop	{r4, r7, pc}

08008c24 <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8008c2c:	1d3b      	adds	r3, r7, #4
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 f825 	bl	8008c7e <_ZNKSt13move_iteratorIPP10AdcHandlerE4baseEv>
 8008c34:	4603      	mov	r3, r0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 f82c 	bl	8008c94 <_ZSt12__miter_baseIPP10AdcHandlerET_S3_>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <_ZSt14__copy_move_a2ILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008c46:	b5b0      	push	{r4, r5, r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 f828 	bl	8008ca8 <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8008c58:	4604      	mov	r4, r0
 8008c5a:	68b8      	ldr	r0, [r7, #8]
 8008c5c:	f000 f824 	bl	8008ca8 <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8008c60:	4605      	mov	r5, r0
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f820 	bl	8008ca8 <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8008c68:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7ff ff0b 	bl	8008a8a <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8008c74:	4603      	mov	r3, r0
    }
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bdb0      	pop	{r4, r5, r7, pc}

08008c7e <_ZNKSt13move_iteratorIPP10AdcHandlerE4baseEv>:
      base() const
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bc80      	pop	{r7}
 8008c92:	4770      	bx	lr

08008c94 <_ZSt12__miter_baseIPP10AdcHandlerET_S3_>:
    __miter_base(_Iterator __it)
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>:
    __niter_base(_Iterator __it)
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr

08008cbc <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
					__idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af02      	add	r7, sp, #8
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f00b fe13 	bl	80148f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008cce:	4602      	mov	r2, r0
			     __idx, __base); }
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	4904      	ldr	r1, [pc, #16]	; (8008ce8 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8008cd8:	4804      	ldr	r0, [pc, #16]	; (8008cec <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8008cda:	f000 fc3f 	bl	800955c <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	08018ce8 	.word	0x08018ce8
 8008cec:	08017c95 	.word	0x08017c95

08008cf0 <_ZN9CmdParserC1Ev>:
 */

#include <CmdParser.h>


CmdParser::CmdParser() {
 8008cf0:	b590      	push	{r4, r7, lr}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	4a10      	ldr	r2, [pc, #64]	; (8008d3c <_ZN9CmdParserC1Ev+0x4c>)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4618      	mov	r0, r3
 8008d04:	f00b fd18 	bl	8014738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f103 041c 	add.w	r4, r3, #28
 8008d0e:	f107 030c 	add.w	r3, r7, #12
 8008d12:	4618      	mov	r0, r3
 8008d14:	f00b fc10 	bl	8014538 <_ZNSaIcEC1Ev>
 8008d18:	f107 030c 	add.w	r3, r7, #12
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	4908      	ldr	r1, [pc, #32]	; (8008d40 <_ZN9CmdParserC1Ev+0x50>)
 8008d20:	4620      	mov	r0, r4
 8008d22:	f00b fe45 	bl	80149b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d26:	f107 030c 	add.w	r3, r7, #12
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f00b fc05 	bl	801453a <_ZNSaIcED1Ev>
	// TODO Auto-generated constructor stub

}
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd90      	pop	{r4, r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	08019198 	.word	0x08019198
 8008d40:	08018cf0 	.word	0x08018cf0

08008d44 <_ZN9CmdParserD1Ev>:

CmdParser::~CmdParser() {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	4a08      	ldr	r2, [pc, #32]	; (8008d70 <_ZN9CmdParserD1Ev+0x2c>)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	331c      	adds	r3, #28
 8008d56:	4618      	mov	r0, r3
 8008d58:	f00b fd0f 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	4618      	mov	r0, r3
 8008d62:	f00b fd0a 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// TODO Auto-generated destructor stub
}
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	08019198 	.word	0x08019198

08008d74 <_ZN9CmdParserD0Ev>:
CmdParser::~CmdParser() {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
}
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff ffe1 	bl	8008d44 <_ZN9CmdParserD1Ev>
 8008d82:	2134      	movs	r1, #52	; 0x34
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f00b fbb9 	bl	80144fc <_ZdlPvj>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <_ZN9CmdParser3addEPcPm>:
void CmdParser::clear(){
	buffer.clear();
}


bool CmdParser::add(char* Buf, uint32_t *Len){
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
	bool flag = false;
 8008da0:	2300      	movs	r3, #0
 8008da2:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i=0;i<*Len;i++){
 8008da4:	2300      	movs	r3, #0
 8008da6:	613b      	str	r3, [r7, #16]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d222      	bcs.n	8008df8 <_ZN9CmdParser3addEPcPm+0x64>
		// Replace end markers
		if(*(Buf+i) == '\n' || *(Buf+i) == '\r' || *(Buf+i) == ';'|| *(Buf+i) == ' '){
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	4413      	add	r3, r2
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b0a      	cmp	r3, #10
 8008dbc:	d011      	beq.n	8008de2 <_ZN9CmdParser3addEPcPm+0x4e>
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b0d      	cmp	r3, #13
 8008dc8:	d00b      	beq.n	8008de2 <_ZN9CmdParser3addEPcPm+0x4e>
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	4413      	add	r3, r2
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b3b      	cmp	r3, #59	; 0x3b
 8008dd4:	d005      	beq.n	8008de2 <_ZN9CmdParser3addEPcPm+0x4e>
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	4413      	add	r3, r2
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d106      	bne.n	8008df0 <_ZN9CmdParser3addEPcPm+0x5c>
			*(Buf+i) = (uint8_t)';';
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	4413      	add	r3, r2
 8008de8:	223b      	movs	r2, #59	; 0x3b
 8008dea:	701a      	strb	r2, [r3, #0]
			flag = true;
 8008dec:	2301      	movs	r3, #1
 8008dee:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i=0;i<*Len;i++){
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	3301      	adds	r3, #1
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	e7d7      	b.n	8008da8 <_ZN9CmdParser3addEPcPm+0x14>
		}
	}

	this->buffer.append((char*)Buf,*Len);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	1d18      	adds	r0, r3, #4
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	f00b fd4c 	bl	80148a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>

	return flag;
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <_ZN13ParsedCommandC1Ev>:


enum class CMDtype{
	set,setat,get,getat,none,help,err, dash
};
struct ParsedCommand
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f00b fc8b 	bl	8014738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	831a      	strh	r2, [r3, #24]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	61da      	str	r2, [r3, #28]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2204      	movs	r2, #4
 8008e32:	621a      	str	r2, [r3, #32]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <_ZN13ParsedCommandD1Ev>:
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f00b fc96 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <_ZN9CmdParser5parseEv>:



std::vector<ParsedCommand> CmdParser::parse(){
 8008e58:	b590      	push	{r4, r7, lr}
 8008e5a:	b0e9      	sub	sp, #420	; 0x1a4
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	1d3b      	adds	r3, r7, #4
 8008e60:	6018      	str	r0, [r3, #0]
 8008e62:	463b      	mov	r3, r7
 8008e64:	6019      	str	r1, [r3, #0]

	std::vector<ParsedCommand> commands;
 8008e66:	1d3b      	adds	r3, r7, #4
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	f000 fbbd 	bl	80095e8 <_ZNSt6vectorI13ParsedCommandSaIS0_EEC1Ev>
	std::vector<std::string> tokens;
 8008e6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fbc5 	bl	8009602 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>

	const char* test = buffer.c_str();
 8008e78:	463b      	mov	r3, r7
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f00b fd38 	bl	80148f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008e84:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
	if((uint8_t)test[0] == 0x86)
 8008e88:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b86      	cmp	r3, #134	; 0x86
 8008e90:	d125      	bne.n	8008ede <_ZN9CmdParser5parseEv+0x86>
	{
		ParsedCommand cmd;
 8008e92:	f107 0308 	add.w	r3, r7, #8
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff ffbb 	bl	8008e12 <_ZN13ParsedCommandC1Ev>
		cmd.type = CMDtype::dash;
 8008e9c:	f107 0308 	add.w	r3, r7, #8
 8008ea0:	2207      	movs	r2, #7
 8008ea2:	621a      	str	r2, [r3, #32]
		cmd.cmd = buffer;
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	1d1a      	adds	r2, r3, #4
 8008eaa:	f107 0308 	add.w	r3, r7, #8
 8008eae:	4611      	mov	r1, r2
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f00b fc68 	bl	8014786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		buffer.clear();
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f00b fc8f 	bl	80147e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		commands.push_back(cmd);
 8008ec2:	f107 0208 	add.w	r2, r7, #8
 8008ec6:	1d3b      	adds	r3, r7, #4
 8008ec8:	4611      	mov	r1, r2
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	f000 fbc1 	bl	8009652 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
		return commands;
 8008ed0:	bf00      	nop
		ParsedCommand cmd;
 8008ed2:	f107 0308 	add.w	r3, r7, #8
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff ffb1 	bl	8008e3e <_ZN13ParsedCommandD1Ev>
 8008edc:	e2f6      	b.n	80094cc <_ZN9CmdParser5parseEv+0x674>
	}

    uint16_t pos = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
    uint16_t lpos = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
	while(pos < buffer.length()-1){
 8008eea:	f8b7 419e 	ldrh.w	r4, [r7, #414]	; 0x19e
 8008eee:	463b      	mov	r3, r7
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f00b fc71 	bl	80147dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008efa:	4603      	mov	r3, r0
 8008efc:	3b01      	subs	r3, #1
 8008efe:	429c      	cmp	r4, r3
 8008f00:	bf34      	ite	cc
 8008f02:	2301      	movcc	r3, #1
 8008f04:	2300      	movcs	r3, #0
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d02d      	beq.n	8008f68 <_ZN9CmdParser5parseEv+0x110>
		pos = buffer.find(';',lpos);
 8008f0c:	463b      	mov	r3, r7
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3304      	adds	r3, #4
 8008f12:	f8b7 219c 	ldrh.w	r2, [r7, #412]	; 0x19c
 8008f16:	213b      	movs	r1, #59	; 0x3b
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f00b fced 	bl	80148f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
		std::string token = buffer.substr(lpos,pos-lpos);
 8008f24:	463b      	mov	r3, r7
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	1d19      	adds	r1, r3, #4
 8008f2a:	f8b7 419c 	ldrh.w	r4, [r7, #412]	; 0x19c
 8008f2e:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8008f32:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	f00b fd6b 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
		lpos = pos+1;
 8008f42:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8008f46:	3301      	adds	r3, #1
 8008f48:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
		tokens.push_back(token);
 8008f4c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008f50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fba1 	bl	800969e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
		std::string token = buffer.substr(lpos,pos-lpos);
 8008f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008f60:	4618      	mov	r0, r3
 8008f62:	f00b fc0a 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(pos < buffer.length()-1){
 8008f66:	e7c0      	b.n	8008eea <_ZN9CmdParser5parseEv+0x92>
	}

	for(std::string word : tokens){
 8008f68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f6c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008f70:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8008f74:	f000 fbb9 	bl	80096ea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8008f84:	f000 fbc1 	bl	800970a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fbc6 	bl	800972c <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 828b 	beq.w	80094be <_ZN9CmdParser5parseEv+0x666>
 8008fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fbe5 	bl	800977c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fb8:	4611      	mov	r1, r2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f00b fcc6 	bl	801494c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>

		ParsedCommand cmd;
 8008fc0:	f107 0308 	add.w	r3, r7, #8
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff ff24 	bl	8008e12 <_ZN13ParsedCommandC1Ev>

		if(word.back() == '?'){ // <cmd>?
 8008fca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f00b fc13 	bl	80147fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b3f      	cmp	r3, #63	; 0x3f
 8008fda:	bf0c      	ite	eq
 8008fdc:	2301      	moveq	r3, #1
 8008fde:	2300      	movne	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d01f      	beq.n	8009026 <_ZN9CmdParser5parseEv+0x1ce>
			cmd.type = CMDtype::get;
 8008fe6:	f107 0308 	add.w	r3, r7, #8
 8008fea:	2202      	movs	r2, #2
 8008fec:	621a      	str	r2, [r3, #32]
			cmd.cmd = word.substr(0, word.length()-1);
 8008fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f00b fbf2 	bl	80147dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8009000:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009004:	2200      	movs	r2, #0
 8009006:	f00b fd07 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800900a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	4611      	mov	r1, r2
 8009014:	4618      	mov	r0, r3
 8009016:	f00b fbbc 	bl	8014792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800901a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800901e:	4618      	mov	r0, r3
 8009020:	f00b fbab 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009024:	e234      	b.n	8009490 <_ZN9CmdParser5parseEv+0x638>

		}else if(word.back() == '!'){
 8009026:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800902a:	4618      	mov	r0, r3
 800902c:	f00b fbe5 	bl	80147fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8009030:	4603      	mov	r3, r0
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b21      	cmp	r3, #33	; 0x21
 8009036:	bf0c      	ite	eq
 8009038:	2301      	moveq	r3, #1
 800903a:	2300      	movne	r3, #0
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d01f      	beq.n	8009082 <_ZN9CmdParser5parseEv+0x22a>
			cmd.cmd = word.substr(0, word.length()-1);
 8009042:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009046:	4618      	mov	r0, r3
 8009048:	f00b fbc8 	bl	80147dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800904c:	4603      	mov	r3, r0
 800904e:	3b01      	subs	r3, #1
 8009050:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8009054:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009058:	2200      	movs	r2, #0
 800905a:	f00b fcdd 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800905e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f00b fb92 	bl	8014792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800906e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009072:	4618      	mov	r0, r3
 8009074:	f00b fb81 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			cmd.type = CMDtype::help;
 8009078:	f107 0308 	add.w	r3, r7, #8
 800907c:	2205      	movs	r2, #5
 800907e:	621a      	str	r2, [r3, #32]
 8009080:	e206      	b.n	8009490 <_ZN9CmdParser5parseEv+0x638>

		}else if(word.back() == '='){
 8009082:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009086:	4618      	mov	r0, r3
 8009088:	f00b fbb7 	bl	80147fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800908c:	4603      	mov	r3, r0
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b3d      	cmp	r3, #61	; 0x3d
 8009092:	bf0c      	ite	eq
 8009094:	2301      	moveq	r3, #1
 8009096:	2300      	movne	r3, #0
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <_ZN9CmdParser5parseEv+0x260>
			cmd.cmd = word;
 800909e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80090a2:	f107 0308 	add.w	r3, r7, #8
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f00b fb6c 	bl	8014786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
			cmd.type = CMDtype::err;
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	2206      	movs	r2, #6
 80090b4:	621a      	str	r2, [r3, #32]
 80090b6:	e1eb      	b.n	8009490 <_ZN9CmdParser5parseEv+0x638>

		}else{ // More complex
			uint32_t peq = word.find('=', 0); // set
 80090b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090bc:	2200      	movs	r2, #0
 80090be:	213d      	movs	r1, #61	; 0x3d
 80090c0:	4618      	mov	r0, r3
 80090c2:	f00b fc19 	bl	80148f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80090c6:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
			//uint32_t pex = word.find('!', 0); // dual val
			uint32_t pqm = word.find('?', 0); // read with var
 80090ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090ce:	2200      	movs	r2, #0
 80090d0:	213f      	movs	r1, #63	; 0x3f
 80090d2:	4618      	mov	r0, r3
 80090d4:	f00b fc10 	bl	80148f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80090d8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
			if(pqm!=std::string::npos && pqm < peq && peq != std::string::npos){ // <cmd>?<int>=<int>
 80090dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d066      	beq.n	80091b4 <_ZN9CmdParser5parseEv+0x35c>
 80090e6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80090ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d260      	bcs.n	80091b4 <_ZN9CmdParser5parseEv+0x35c>
 80090f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fa:	d05b      	beq.n	80091b4 <_ZN9CmdParser5parseEv+0x35c>
				// Dual
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, peq-pqm));
 80090fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009100:	1c5c      	adds	r4, r3, #1
 8009102:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8009106:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8009110:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009114:	4622      	mov	r2, r4
 8009116:	f00b fc7f 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800911a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800911e:	220a      	movs	r2, #10
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fdca 	bl	8008cbc <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8009128:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 800912c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009130:	4618      	mov	r0, r3
 8009132:	f00b fb22 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				int32_t val2 = (int32_t)std::stol(word.substr(peq+1, word.npos));
 8009136:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8009140:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009144:	f04f 33ff 	mov.w	r3, #4294967295
 8009148:	f00b fc66 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800914c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009150:	220a      	movs	r2, #10
 8009152:	2100      	movs	r1, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff fdb1 	bl	8008cbc <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800915a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800915e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009162:	4618      	mov	r0, r3
 8009164:	f00b fb09 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.cmd = word.substr(0, pqm);
 8009168:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800916c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009170:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009174:	2200      	movs	r2, #0
 8009176:	f00b fc4f 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800917a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800917e:	f107 0308 	add.w	r3, r7, #8
 8009182:	4611      	mov	r1, r2
 8009184:	4618      	mov	r0, r3
 8009186:	f00b fb04 	bl	8014792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800918a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800918e:	4618      	mov	r0, r3
 8009190:	f00b faf3 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.type = CMDtype::setat;
 8009194:	f107 0308 	add.w	r3, r7, #8
 8009198:	2201      	movs	r2, #1
 800919a:	621a      	str	r2, [r3, #32]
				cmd.val = val2;
 800919c:	f107 0308 	add.w	r3, r7, #8
 80091a0:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80091a4:	61da      	str	r2, [r3, #28]
				cmd.adr = val;
 80091a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	f107 0308 	add.w	r3, r7, #8
 80091b0:	831a      	strh	r2, [r3, #24]
 80091b2:	e16d      	b.n	8009490 <_ZN9CmdParser5parseEv+0x638>

			}else if(pqm != std::string::npos && (std::isdigit(word[pqm+1]) || (std::isdigit(word[pqm+2]) && (word[pqm+1] == '-' || word[pqm+1] == '+')))){ // <cmd>?<int>
 80091b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091bc:	d037      	beq.n	800922e <_ZN9CmdParser5parseEv+0x3d6>
 80091be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f00b fb12 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80091d0:	4603      	mov	r3, r0
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	3b30      	subs	r3, #48	; 0x30
 80091d6:	2b09      	cmp	r3, #9
 80091d8:	d927      	bls.n	800922a <_ZN9CmdParser5parseEv+0x3d2>
 80091da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80091de:	1c9a      	adds	r2, r3, #2
 80091e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f00b fb04 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80091ec:	4603      	mov	r3, r0
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	3b30      	subs	r3, #48	; 0x30
 80091f2:	2b09      	cmp	r3, #9
 80091f4:	d81b      	bhi.n	800922e <_ZN9CmdParser5parseEv+0x3d6>
 80091f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009200:	4611      	mov	r1, r2
 8009202:	4618      	mov	r0, r3
 8009204:	f00b faf6 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8009208:	4603      	mov	r3, r0
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b2d      	cmp	r3, #45	; 0x2d
 800920e:	d00c      	beq.n	800922a <_ZN9CmdParser5parseEv+0x3d2>
 8009210:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800921a:	4611      	mov	r1, r2
 800921c:	4618      	mov	r0, r3
 800921e:	f00b fae9 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8009222:	4603      	mov	r3, r0
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b2b      	cmp	r3, #43	; 0x2b
 8009228:	d101      	bne.n	800922e <_ZN9CmdParser5parseEv+0x3d6>
 800922a:	2301      	movs	r3, #1
 800922c:	e000      	b.n	8009230 <_ZN9CmdParser5parseEv+0x3d8>
 800922e:	2300      	movs	r3, #0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d03e      	beq.n	80092b2 <_ZN9CmdParser5parseEv+0x45a>
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, word.npos));
 8009234:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 800923e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009242:	f04f 33ff 	mov.w	r3, #4294967295
 8009246:	f00b fbe7 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800924a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800924e:	220a      	movs	r2, #10
 8009250:	2100      	movs	r1, #0
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff fd32 	bl	8008cbc <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8009258:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 800925c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009260:	4618      	mov	r0, r3
 8009262:	f00b fa8a 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 8009266:	f107 0308 	add.w	r3, r7, #8
 800926a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800926e:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::getat;
 8009270:	f107 0308 	add.w	r3, r7, #8
 8009274:	2203      	movs	r2, #3
 8009276:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, pqm);
 8009278:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800927c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009280:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009284:	2200      	movs	r2, #0
 8009286:	f00b fbc7 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800928a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800928e:	f107 0308 	add.w	r3, r7, #8
 8009292:	4611      	mov	r1, r2
 8009294:	4618      	mov	r0, r3
 8009296:	f00b fa7c 	bl	8014792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800929a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800929e:	4618      	mov	r0, r3
 80092a0:	f00b fa6b 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.adr = val;
 80092a4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	f107 0308 	add.w	r3, r7, #8
 80092ae:	831a      	strh	r2, [r3, #24]
 80092b0:	e0ee      	b.n	8009490 <_ZN9CmdParser5parseEv+0x638>
			}else if(peq != std::string::npos && (std::isdigit(word[peq+1]) || (std::isdigit(word[peq+2]) && (word[peq+1] == '-' || word[peq+1] == '+')))){ // <cmd>=<int>
 80092b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ba:	d037      	beq.n	800932c <_ZN9CmdParser5parseEv+0x4d4>
 80092bc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f00b fa93 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80092ce:	4603      	mov	r3, r0
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	3b30      	subs	r3, #48	; 0x30
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	d927      	bls.n	8009328 <_ZN9CmdParser5parseEv+0x4d0>
 80092d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092dc:	1c9a      	adds	r2, r3, #2
 80092de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f00b fa85 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80092ea:	4603      	mov	r3, r0
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	3b30      	subs	r3, #48	; 0x30
 80092f0:	2b09      	cmp	r3, #9
 80092f2:	d81b      	bhi.n	800932c <_ZN9CmdParser5parseEv+0x4d4>
 80092f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f00b fa77 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8009306:	4603      	mov	r3, r0
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b2d      	cmp	r3, #45	; 0x2d
 800930c:	d00c      	beq.n	8009328 <_ZN9CmdParser5parseEv+0x4d0>
 800930e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f00b fa6a 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8009320:	4603      	mov	r3, r0
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b2b      	cmp	r3, #43	; 0x2b
 8009326:	d101      	bne.n	800932c <_ZN9CmdParser5parseEv+0x4d4>
 8009328:	2301      	movs	r3, #1
 800932a:	e000      	b.n	800932e <_ZN9CmdParser5parseEv+0x4d6>
 800932c:	2300      	movs	r3, #0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d038      	beq.n	80093a4 <_ZN9CmdParser5parseEv+0x54c>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
 8009332:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800933c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009340:	f04f 33ff 	mov.w	r3, #4294967295
 8009344:	f00b fb68 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8009348:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800934c:	220a      	movs	r2, #10
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f7ff fcb3 	bl	8008cbc <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8009356:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
 800935a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800935e:	4618      	mov	r0, r3
 8009360:	f00b fa0b 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 8009364:	f107 0308 	add.w	r3, r7, #8
 8009368:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800936c:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::set;
 800936e:	f107 0308 	add.w	r3, r7, #8
 8009372:	2200      	movs	r2, #0
 8009374:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, peq);
 8009376:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800937a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800937e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009382:	2200      	movs	r2, #0
 8009384:	f00b fb48 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8009388:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800938c:	f107 0308 	add.w	r3, r7, #8
 8009390:	4611      	mov	r1, r2
 8009392:	4618      	mov	r0, r3
 8009394:	f00b f9fd 	bl	8014792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800939c:	4618      	mov	r0, r3
 800939e:	f00b f9ec 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80093a2:	e075      	b.n	8009490 <_ZN9CmdParser5parseEv+0x638>
			}else if(peq != std::string::npos && (word[peq+1] == 'R' || word[peq+1] == 'G' || word[peq+1] == 'B')){ // <cmd>=RGB
 80093a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80093a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ac:	d028      	beq.n	8009400 <_ZN9CmdParser5parseEv+0x5a8>
 80093ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f00b fa1a 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80093c0:	4603      	mov	r3, r0
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b52      	cmp	r3, #82	; 0x52
 80093c6:	d019      	beq.n	80093fc <_ZN9CmdParser5parseEv+0x5a4>
 80093c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f00b fa0d 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80093da:	4603      	mov	r3, r0
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b47      	cmp	r3, #71	; 0x47
 80093e0:	d00c      	beq.n	80093fc <_ZN9CmdParser5parseEv+0x5a4>
 80093e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f00b fa00 	bl	80147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80093f4:	4603      	mov	r3, r0
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b42      	cmp	r3, #66	; 0x42
 80093fa:	d101      	bne.n	8009400 <_ZN9CmdParser5parseEv+0x5a8>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <_ZN9CmdParser5parseEv+0x5aa>
 8009400:	2300      	movs	r3, #0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d038      	beq.n	8009478 <_ZN9CmdParser5parseEv+0x620>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
 8009406:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8009410:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009414:	f04f 33ff 	mov.w	r3, #4294967295
 8009418:	f00b fafe 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800941c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009420:	220a      	movs	r2, #10
 8009422:	2100      	movs	r1, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff fc49 	bl	8008cbc <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800942a:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 800942e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009432:	4618      	mov	r0, r3
 8009434:	f00b f9a1 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8009440:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::set;
 8009442:	f107 0308 	add.w	r3, r7, #8
 8009446:	2200      	movs	r2, #0
 8009448:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, peq);
 800944a:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 800944e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009452:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009456:	2200      	movs	r2, #0
 8009458:	f00b fade 	bl	8014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800945c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8009460:	f107 0308 	add.w	r3, r7, #8
 8009464:	4611      	mov	r1, r2
 8009466:	4618      	mov	r0, r3
 8009468:	f00b f993 	bl	8014792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800946c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009470:	4618      	mov	r0, r3
 8009472:	f00b f982 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009476:	e00b      	b.n	8009490 <_ZN9CmdParser5parseEv+0x638>
			}else{
				cmd.cmd = word;
 8009478:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800947c:	f107 0308 	add.w	r3, r7, #8
 8009480:	4611      	mov	r1, r2
 8009482:	4618      	mov	r0, r3
 8009484:	f00b f97f 	bl	8014786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
				cmd.type = CMDtype::get;
 8009488:	f107 0308 	add.w	r3, r7, #8
 800948c:	2202      	movs	r2, #2
 800948e:	621a      	str	r2, [r3, #32]
			}

		}

		commands.push_back(cmd);
 8009490:	f107 0208 	add.w	r2, r7, #8
 8009494:	1d3b      	adds	r3, r7, #4
 8009496:	4611      	mov	r1, r2
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	f000 f8da 	bl	8009652 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
		ParsedCommand cmd;
 800949e:	f107 0308 	add.w	r3, r7, #8
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fccb 	bl	8008e3e <_ZN13ParsedCommandD1Ev>
	for(std::string word : tokens){
 80094a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80094ac:	4618      	mov	r0, r3
 80094ae:	f00b f964 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80094b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f950 	bl	800975c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 80094bc:	e568      	b.n	8008f90 <_ZN9CmdParser5parseEv+0x138>
	}
	buffer.clear();
 80094be:	463b      	mov	r3, r7
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f00b f98b 	bl	80147e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	return commands;
 80094ca:	bf00      	nop
	std::vector<std::string> tokens;
 80094cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 f8a3 	bl	800961c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80094d6:	1d3b      	adds	r3, r7, #4
 80094d8:	1d3a      	adds	r2, r7, #4
 80094da:	6812      	ldr	r2, [r2, #0]
 80094dc:	601a      	str	r2, [r3, #0]
}
 80094de:	1d3b      	adds	r3, r7, #4
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd90      	pop	{r4, r7, pc}

080094ea <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b082      	sub	sp, #8
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	f00e f9bd 	bl	8017870 <__errno>
 80094f6:	4603      	mov	r3, r0
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	f00e f9b7 	bl	8017870 <__errno>
 8009502:	4602      	mov	r2, r0
 8009504:	2300      	movs	r3, #0
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	f00e f9a9 	bl	8017870 <__errno>
 800951e:	4603      	mov	r3, r0
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	bf0c      	ite	eq
 8009526:	2301      	moveq	r3, #1
 8009528:	2300      	movne	r3, #0
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8009530:	f00e f99e 	bl	8017870 <__errno>
 8009534:	4602      	mov	r2, r0
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE>:
	int _M_errno;
      } const __save_errno;

      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	7039      	strb	r1, [r7, #0]
 8009550:	2300      	movs	r3, #0
 8009552:	4618      	mov	r0, r3
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	bc80      	pop	{r7}
 800955a:	4770      	bx	lr

0800955c <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800955c:	b590      	push	{r4, r7, lr}
 800955e:	b08b      	sub	sp, #44	; 0x2c
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800956a:	f107 0314 	add.w	r3, r7, #20
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff ffbb 	bl	80094ea <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8009574:	f107 0118 	add.w	r1, r7, #24
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	4798      	blx	r3
 8009580:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d102      	bne.n	8009590 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 800958a:	68b8      	ldr	r0, [r7, #8]
 800958c:	f00a ffdc 	bl	8014548 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8009590:	f00e f96e 	bl	8017870 <__errno>
 8009594:	4603      	mov	r3, r0
 8009596:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8009598:	2b22      	cmp	r3, #34	; 0x22
 800959a:	d006      	beq.n	80095aa <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 800959c:	4621      	mov	r1, r4
 800959e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095a0:	f7ff ffd1 	bl	8009546 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e000      	b.n	80095b0 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 80095ae:	2300      	movs	r3, #0
      else if (errno == ERANGE
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 80095b4:	68b8      	ldr	r0, [r7, #8]
 80095b6:	f00a ffcd 	bl	8014554 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	623b      	str	r3, [r7, #32]

      if (__idx)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d006      	beq.n	80095d2 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	461a      	mov	r2, r3
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	601a      	str	r2, [r3, #0]

      return __ret;
 80095d2:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 80095d4:	f107 0314 	add.w	r3, r7, #20
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff ff9a 	bl	8009512 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 80095de:	4623      	mov	r3, r4
    }
 80095e0:	4618      	mov	r0, r3
 80095e2:	372c      	adds	r7, #44	; 0x2c
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd90      	pop	{r4, r7, pc}

080095e8 <_ZNSt6vectorI13ParsedCommandSaIS0_EEC1Ev>:
      vector()
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 f8cd 	bl	8009792 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EEC1Ev>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      vector()
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f8f1 	bl	80097f4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800961c:	b5b0      	push	{r4, r5, r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681c      	ldr	r4, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4618      	mov	r0, r3
 8009630:	f000 f90e 	bl	8009850 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009634:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009636:	461a      	mov	r2, r3
 8009638:	4629      	mov	r1, r5
 800963a:	4620      	mov	r0, r4
 800963c:	f000 f912 	bl	8009864 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f8e4 	bl	8009810 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bdb0      	pop	{r4, r5, r7, pc}

08009652 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	429a      	cmp	r2, r3
 8009666:	d00d      	beq.n	8009684 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	4619      	mov	r1, r3
 8009672:	f000 f90f 	bl	8009894 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]
      }
 8009682:	e008      	b.n	8009696 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f918 	bl	80098ba <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>
 800968a:	4603      	mov	r3, r0
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f923 	bl	80098dc <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8009696:	bf00      	nop
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d00d      	beq.n	80096d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	4619      	mov	r1, r3
 80096be:	f000 f9af 	bl	8009a20 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f103 0218 	add.w	r2, r3, #24
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	605a      	str	r2, [r3, #4]
      }
 80096ce:	e008      	b.n	80096e2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x44>
	  _M_realloc_insert(end(), __x);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f81a 	bl	800970a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 80096d6:	4603      	mov	r3, r0
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f9b3 	bl	8009a48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	f107 030c 	add.w	r3, r7, #12
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fa3c 	bl	8009b78 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	1d1a      	adds	r2, r3, #4
 8009716:	f107 030c 	add.w	r3, r7, #12
 800971a:	4611      	mov	r1, r2
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fa2b 	bl	8009b78 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800972c:	b590      	push	{r4, r7, lr}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa2d 	bl	8009b96 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800973c:	4603      	mov	r3, r0
 800973e:	681c      	ldr	r4, [r3, #0]
 8009740:	6838      	ldr	r0, [r7, #0]
 8009742:	f000 fa28 	bl	8009b96 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009746:	4603      	mov	r3, r0
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	429c      	cmp	r4, r3
 800974c:	bf14      	ite	ne
 800974e:	2301      	movne	r3, #1
 8009750:	2300      	moveq	r3, #0
 8009752:	b2db      	uxtb	r3, r3
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	bd90      	pop	{r4, r7, pc}

0800975c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f103 0218 	add.w	r2, r3, #24
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	601a      	str	r2, [r3, #0]
	return *this;
 8009770:	687b      	ldr	r3, [r7, #4]
      }
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	bc80      	pop	{r7}
 800977a:	4770      	bx	lr

0800977c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	bc80      	pop	{r7}
 8009790:	4770      	bx	lr

08009792 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EEC1Ev>:
      _Vector_base()
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fa04 	bl	8009baa <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implC1Ev>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4618      	mov	r0, r3
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc80      	pop	{r7}
 80097be:	4770      	bx	lr

080097c0 <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80097cc:	68b9      	ldr	r1, [r7, #8]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fa13 	bl	8009bfa <_ZSt8_DestroyIP13ParsedCommandEvT_S2_>
    }
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fa2a 	bl	8009c3e <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fa08 	bl	8009c14 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8009820:	461a      	mov	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	10db      	asrs	r3, r3, #3
 800982a:	4a08      	ldr	r2, [pc, #32]	; (800984c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x3c>)
 800982c:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8009830:	461a      	mov	r2, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fa0f 	bl	8009c56 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
		      - this->_M_impl._M_start); }
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4618      	mov	r0, r3
 800983c:	f7ff ffce 	bl	80097dc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	aaaaaaab 	.word	0xaaaaaaab

08009850 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr

08009864 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8009870:	68b9      	ldr	r1, [r7, #8]
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 fa02 	bl	8009c7c <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8009878:	bf00      	nop
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	bc80      	pop	{r7}
 8009892:	4770      	bx	lr

08009894 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff ffed 	bl	8009880 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 80098a6:	4603      	mov	r3, r0
 80098a8:	461a      	mov	r2, r3
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 fa0e 	bl	8009cce <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	1d1a      	adds	r2, r3, #4
 80098c6:	f107 030c 	add.w	r3, r7, #12
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fa18 	bl	8009d02 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80098dc:	b5b0      	push	{r4, r5, r7, lr}
 80098de:	b08a      	sub	sp, #40	; 0x28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80098e8:	4a46      	ldr	r2, [pc, #280]	; (8009a04 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x128>)
 80098ea:	2101      	movs	r1, #1
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fa17 	bl	8009d20 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc>
 80098f2:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f000 fa5b 	bl	8009db0 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>
 80098fa:	4603      	mov	r3, r0
 80098fc:	617b      	str	r3, [r7, #20]
 80098fe:	f107 0214 	add.w	r2, r7, #20
 8009902:	f107 0308 	add.w	r3, r7, #8
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f000 fa61 	bl	8009dd0 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800990e:	4603      	mov	r3, r0
 8009910:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fa76 	bl	8009e08 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj>
 800991c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009922:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009924:	6a3a      	ldr	r2, [r7, #32]
 8009926:	4613      	mov	r3, r2
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	189d      	adds	r5, r3, r2
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff ffa3 	bl	8009880 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 800993a:	4603      	mov	r3, r0
 800993c:	461a      	mov	r2, r3
 800993e:	4629      	mov	r1, r5
 8009940:	4620      	mov	r0, r4
 8009942:	f7ff ffa7 	bl	8009894 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8009946:	2300      	movs	r3, #0
 8009948:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681c      	ldr	r4, [r3, #0]
 800994e:	f107 0308 	add.w	r3, r7, #8
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fa6c 	bl	8009e30 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009958:	4603      	mov	r3, r0
 800995a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff ff24 	bl	80097ac <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8009964:	4603      	mov	r3, r0
	  __new_finish
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	4629      	mov	r1, r5
 800996a:	4620      	mov	r0, r4
 800996c:	f000 fa6a 	bl	8009e44 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 8009970:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	3324      	adds	r3, #36	; 0x24
 8009976:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8009978:	f107 0308 	add.w	r3, r7, #8
 800997c:	4618      	mov	r0, r3
 800997e:	f000 fa57 	bl	8009e30 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009982:	4603      	mov	r3, r0
 8009984:	681c      	ldr	r4, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff ff0d 	bl	80097ac <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8009992:	4603      	mov	r3, r0
	  __new_finish
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	4629      	mov	r1, r5
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fa53 	bl	8009e44 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 800999e:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681c      	ldr	r4, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff fefe 	bl	80097ac <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 80099b0:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80099b2:	461a      	mov	r2, r3
 80099b4:	4629      	mov	r1, r5
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff ff02 	bl	80097c0 <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80099c6:	461a      	mov	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	109b      	asrs	r3, r3, #2
 80099d0:	4a0d      	ldr	r2, [pc, #52]	; (8009a08 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12c>)
 80099d2:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 80099d6:	461a      	mov	r2, r3
 80099d8:	f000 f8fc 	bl	8009bd4 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	69ba      	ldr	r2, [r7, #24]
 80099e6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80099e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ea:	4613      	mov	r3, r2
 80099ec:	00db      	lsls	r3, r3, #3
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	461a      	mov	r2, r3
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	441a      	add	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	609a      	str	r2, [r3, #8]
    }
 80099fc:	bf00      	nop
 80099fe:	3728      	adds	r7, #40	; 0x28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bdb0      	pop	{r4, r5, r7, pc}
 8009a04:	08018d60 	.word	0x08018d60
 8009a08:	38e38e39 	.word	0x38e38e39

08009a0c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr

08009a20 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff ffed 	bl	8009a0c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8009a32:	4603      	mov	r3, r0
 8009a34:	461a      	mov	r2, r3
 8009a36:	68b9      	ldr	r1, [r7, #8]
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 fa1c 	bl	8009e76 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009a48:	b5b0      	push	{r4, r5, r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8009a54:	4a46      	ldr	r2, [pc, #280]	; (8009b70 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 8009a56:	2101      	movs	r1, #1
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 fa26 	bl	8009eaa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8009a5e:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f7ff fe42 	bl	80096ea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8009a66:	4603      	mov	r3, r0
 8009a68:	617b      	str	r3, [r7, #20]
 8009a6a:	f107 0214 	add.w	r2, r7, #20
 8009a6e:	f107 0308 	add.w	r3, r7, #8
 8009a72:	4611      	mov	r1, r2
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fa61 	bl	8009f3c <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 fa76 	bl	8009f74 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8009a88:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009a8e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009a90:	6a3a      	ldr	r2, [r7, #32]
 8009a92:	4613      	mov	r3, r2
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	4413      	add	r3, r2
 8009a98:	00db      	lsls	r3, r3, #3
 8009a9a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	189d      	adds	r5, r3, r2
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff ffb3 	bl	8009a0c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4629      	mov	r1, r5
 8009aac:	4620      	mov	r0, r4
 8009aae:	f7ff ffb7 	bl	8009a20 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	  __new_finish = pointer();
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681c      	ldr	r4, [r3, #0]
 8009aba:	f107 0308 	add.w	r3, r7, #8
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 f869 	bl	8009b96 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff fec0 	bl	8009850 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009ad0:	4603      	mov	r3, r0
	  __new_finish
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 fa60 	bl	8009f9c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009adc:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	3318      	adds	r3, #24
 8009ae2:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8009ae4:	f107 0308 	add.w	r3, r7, #8
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 f854 	bl	8009b96 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009aee:	4603      	mov	r3, r0
 8009af0:	681c      	ldr	r4, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7ff fea9 	bl	8009850 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009afe:	4603      	mov	r3, r0
	  __new_finish
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	4629      	mov	r1, r5
 8009b04:	4620      	mov	r0, r4
 8009b06:	f000 fa49 	bl	8009f9c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009b0a:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681c      	ldr	r4, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fe9a 	bl	8009850 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009b1c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009b1e:	461a      	mov	r2, r3
 8009b20:	4629      	mov	r1, r5
 8009b22:	4620      	mov	r0, r4
 8009b24:	f7ff fe9e 	bl	8009864 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8009b32:	461a      	mov	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	10db      	asrs	r3, r3, #3
 8009b3c:	4a0d      	ldr	r2, [pc, #52]	; (8009b74 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8009b3e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8009b42:	461a      	mov	r2, r3
 8009b44:	f000 f887 	bl	8009c56 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	69fa      	ldr	r2, [r7, #28]
 8009b4c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b56:	4613      	mov	r3, r2
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	4413      	add	r3, r2
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	461a      	mov	r2, r3
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	441a      	add	r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	609a      	str	r2, [r3, #8]
    }
 8009b68:	bf00      	nop
 8009b6a:	3728      	adds	r7, #40	; 0x28
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b70:	08018d60 	.word	0x08018d60
 8009b74:	aaaaaaab 	.word	0xaaaaaaab

08009b78 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bc80      	pop	{r7}
 8009b94:	4770      	bx	lr

08009b96 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009b96:	b480      	push	{r7}
 8009b98:	b083      	sub	sp, #12
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bc80      	pop	{r7}
 8009ba8:	4770      	bx	lr

08009baa <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa0b 	bl	8009fce <_ZNSaI13ParsedCommandEC1Ev>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	605a      	str	r2, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	609a      	str	r2, [r3, #8]
	{ }
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
	if (__p)
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d005      	beq.n	8009bf2 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	68b9      	ldr	r1, [r7, #8]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f9fa 	bl	8009fe6 <_ZNSt16allocator_traitsISaI13ParsedCommandEE10deallocateERS1_PS0_j>
      }
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <_ZSt8_DestroyIP13ParsedCommandEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa06 	bl	800a018 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_>
    }
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fa13 	bl	800a048 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	605a      	str	r2, [r3, #4]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	609a      	str	r2, [r3, #8]
	{ }
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa0a 	bl	800a060 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	60f8      	str	r0, [r7, #12]
 8009c5e:	60b9      	str	r1, [r7, #8]
 8009c60:	607a      	str	r2, [r7, #4]
	if (__p)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d005      	beq.n	8009c74 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	68b9      	ldr	r1, [r7, #8]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fa00 	bl	800a074 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8009c74:	bf00      	nop
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fa0c 	bl	800a0a6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <_ZN13ParsedCommandC1ERKS_>:
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	6039      	str	r1, [r7, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f00a fe50 	bl	801494c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	8b1a      	ldrh	r2, [r3, #24]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	831a      	strh	r2, [r3, #24]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	69da      	ldr	r2, [r3, #28]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	61da      	str	r2, [r3, #28]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	6a1a      	ldr	r2, [r3, #32]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	621a      	str	r2, [r3, #32]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009cce:	b590      	push	{r4, r7, lr}
 8009cd0:	b085      	sub	sp, #20
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff fdd0 	bl	8009880 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	2024      	movs	r0, #36	; 0x24
 8009ce8:	f7fe fa68 	bl	80081bc <_ZnwjPv>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_+0x2c>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7ff ffce 	bl	8009c96 <_ZN13ParsedCommandC1ERKS_>
 8009cfa:	bf00      	nop
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd90      	pop	{r4, r7, pc}

08009d02 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4618      	mov	r0, r3
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bc80      	pop	{r7}
 8009d1e:	4770      	bx	lr

08009d20 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009d20:	b590      	push	{r4, r7, lr}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 f9d2 	bl	800a0d6 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 8009d32:	4604      	mov	r4, r0
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 f9df 	bl	800a0f8 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	1ae2      	subs	r2, r4, r3
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	bf34      	ite	cc
 8009d44:	2301      	movcc	r3, #1
 8009d46:	2300      	movcs	r3, #0
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f00a fbfc 	bl	801454e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 f9ce 	bl	800a0f8 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 f9ca 	bl	800a0f8 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009d64:	4603      	mov	r3, r0
 8009d66:	613b      	str	r3, [r7, #16]
 8009d68:	f107 0208 	add.w	r2, r7, #8
 8009d6c:	f107 0310 	add.w	r3, r7, #16
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fe1d 	bl	80089b2 <_ZSt3maxIjERKT_S2_S2_>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4423      	add	r3, r4
 8009d7e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 f9b9 	bl	800a0f8 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009d86:	4602      	mov	r2, r0
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d306      	bcc.n	8009d9c <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x7c>
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f9a1 	bl	800a0d6 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 8009d94:	4602      	mov	r2, r0
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d904      	bls.n	8009da6 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x86>
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f99a 	bl	800a0d6 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 8009da2:	4603      	mov	r3, r0
 8009da4:	e000      	b.n	8009da8 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x88>
 8009da6:	697b      	ldr	r3, [r7, #20]
      }
 8009da8:	4618      	mov	r0, r3
 8009daa:	371c      	adds	r7, #28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd90      	pop	{r4, r7, pc}

08009db0 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	f107 030c 	add.w	r3, r7, #12
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff ff9e 	bl	8009d02 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009dd0:	b590      	push	{r4, r7, lr}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f828 	bl	8009e30 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009de0:	4603      	mov	r3, r0
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	461c      	mov	r4, r3
 8009de6:	6838      	ldr	r0, [r7, #0]
 8009de8:	f000 f822 	bl	8009e30 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009dec:	4603      	mov	r3, r0
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	1ae3      	subs	r3, r4, r3
 8009df2:	109b      	asrs	r3, r3, #2
 8009df4:	4a03      	ldr	r2, [pc, #12]	; (8009e04 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x34>)
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd90      	pop	{r4, r7, pc}
 8009e02:	bf00      	nop
 8009e04:	38e38e39 	.word	0x38e38e39

08009e08 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d006      	beq.n	8009e26 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj+0x1e>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f981 	bl	800a124 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8allocateERS1_j>
 8009e22:	4603      	mov	r3, r0
 8009e24:	e000      	b.n	8009e28 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj+0x20>
 8009e26:	2300      	movs	r3, #0
      }
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bc80      	pop	{r7}
 8009e42:	4770      	bx	lr

08009e44 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 f975 	bl	800a142 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>
 8009e58:	4604      	mov	r4, r0
 8009e5a:	68b8      	ldr	r0, [r7, #8]
 8009e5c:	f000 f971 	bl	800a142 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>
 8009e60:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 f97a 	bl	800a160 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP13ParsedCommandES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8009e6c:	4603      	mov	r3, r0
    }
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd90      	pop	{r4, r7, pc}

08009e76 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009e76:	b590      	push	{r4, r7, lr}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fdc2 	bl	8009a0c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8009e88:	4604      	mov	r4, r0
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	2018      	movs	r0, #24
 8009e90:	f7fe f994 	bl	80081bc <_ZnwjPv>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_+0x2c>
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f00a fd55 	bl	801494c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd90      	pop	{r4, r7, pc}

08009eaa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009eaa:	b590      	push	{r4, r7, lr}
 8009eac:	b087      	sub	sp, #28
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	60f8      	str	r0, [r7, #12]
 8009eb2:	60b9      	str	r1, [r7, #8]
 8009eb4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 f963 	bl	800a182 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f000 f970 	bl	800a1a4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	1ae2      	subs	r2, r4, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	bf34      	ite	cc
 8009ece:	2301      	movcc	r3, #1
 8009ed0:	2300      	movcs	r3, #0
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f00a fb37 	bl	801454e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f95f 	bl	800a1a4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f95b 	bl	800a1a4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	613b      	str	r3, [r7, #16]
 8009ef2:	f107 0208 	add.w	r2, r7, #8
 8009ef6:	f107 0310 	add.w	r3, r7, #16
 8009efa:	4611      	mov	r1, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fd58 	bl	80089b2 <_ZSt3maxIjERKT_S2_S2_>
 8009f02:	4603      	mov	r3, r0
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4423      	add	r3, r4
 8009f08:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 f94a 	bl	800a1a4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009f10:	4602      	mov	r2, r0
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d306      	bcc.n	8009f26 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 f932 	bl	800a182 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d904      	bls.n	8009f30 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f000 f92b 	bl	800a182 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	e000      	b.n	8009f32 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 8009f30:	697b      	ldr	r3, [r7, #20]
      }
 8009f32:	4618      	mov	r0, r3
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd90      	pop	{r4, r7, pc}
	...

08009f3c <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009f3c:	b590      	push	{r4, r7, lr}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff fe25 	bl	8009b96 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	461c      	mov	r4, r3
 8009f52:	6838      	ldr	r0, [r7, #0]
 8009f54:	f7ff fe1f 	bl	8009b96 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	1ae3      	subs	r3, r4, r3
 8009f5e:	10db      	asrs	r3, r3, #3
 8009f60:	4a03      	ldr	r2, [pc, #12]	; (8009f70 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 8009f62:	fb02 f303 	mul.w	r3, r2, r3
 8009f66:	4618      	mov	r0, r3
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd90      	pop	{r4, r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	aaaaaaab 	.word	0xaaaaaaab

08009f74 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d006      	beq.n	8009f92 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 f921 	bl	800a1d0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	e000      	b.n	8009f94 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8009f92:	2300      	movs	r3, #0
      }
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009f9c:	b590      	push	{r4, r7, lr}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 f91f 	bl	800a1ee <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	68b8      	ldr	r0, [r7, #8]
 8009fb4:	f000 f91b 	bl	800a1ee <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009fb8:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 f924 	bl	800a20c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 8009fc4:	4603      	mov	r3, r0
    }
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd90      	pop	{r4, r7, pc}

08009fce <_ZNSaI13ParsedCommandEC1Ev>:
      allocator() throw() { }
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f929 	bl	800a22e <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandEC1Ev>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <_ZNSt16allocator_traitsISaI13ParsedCommandEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	68b9      	ldr	r1, [r7, #8]
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 f923 	bl	800a242 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE10deallocateEPS1_j>
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <_ZSt11__addressofI13ParsedCommandEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	bc80      	pop	{r7}
 800a016:	4770      	bx	lr

0800a018 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d00a      	beq.n	800a040 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff ffea 	bl	800a004 <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 800a030:	4603      	mov	r3, r0
 800a032:	4618      	mov	r0, r3
 800a034:	f000 f912 	bl	800a25c <_ZSt8_DestroyI13ParsedCommandEvPT_>
	  for (; __first != __last; ++__first)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3324      	adds	r3, #36	; 0x24
 800a03c:	607b      	str	r3, [r7, #4]
 800a03e:	e7f0      	b.n	800a022 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_+0xa>
	}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f90e 	bl	800a272 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	bc80      	pop	{r7}
 800a072:	4770      	bx	lr

0800a074 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	68b9      	ldr	r1, [r7, #8]
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 f8fe 	bl	800a286 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr

0800a0a6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d00a      	beq.n	800a0ce <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff ffea 	bl	800a092 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 f8ed 	bl	800a2a0 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	3318      	adds	r3, #24
 800a0ca:	607b      	str	r3, [r7, #4]
 800a0cc:	e7f0      	b.n	800a0b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800a0ce:	bf00      	nop
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 f8f4 	bl	800a2ce <_ZNKSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 f8e4 	bl	800a2b6 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8max_sizeERKS1_>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	461a      	mov	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	109b      	asrs	r3, r3, #2
 800a10e:	4a04      	ldr	r2, [pc, #16]	; (800a120 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv+0x28>)
 800a110:	fb02 f303 	mul.w	r3, r2, r3
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	bc80      	pop	{r7}
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	38e38e39 	.word	0x38e38e39

0800a124 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a12e:	2200      	movs	r2, #0
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f8d5 	bl	800a2e2 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv>
 800a138:	4603      	mov	r3, r0
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f8e7 	bl	800a324 <_ZNSt13move_iteratorIP13ParsedCommandEC1ES1_>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP13ParsedCommandES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	68b9      	ldr	r1, [r7, #8]
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 f8e4 	bl	800a340 <_ZSt18uninitialized_copyISt13move_iteratorIP13ParsedCommandES2_ET0_T_S5_S4_>
 800a178:	4603      	mov	r3, r0
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a182:	b580      	push	{r7, lr}
 800a184:	b082      	sub	sp, #8
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f8f5 	bl	800a37c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800a192:	4603      	mov	r3, r0
 800a194:	4618      	mov	r0, r3
 800a196:	f000 f8e5 	bl	800a364 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800a19a:	4603      	mov	r3, r0
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	10db      	asrs	r3, r3, #3
 800a1ba:	4a04      	ldr	r2, [pc, #16]	; (800a1cc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800a1bc:	fb02 f303 	mul.w	r3, r2, r3
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	aaaaaaab 	.word	0xaaaaaaab

0800a1d0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a1da:	2200      	movs	r2, #0
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f8d6 	bl	800a390 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a1f6:	f107 030c 	add.w	r3, r7, #12
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 f8e8 	bl	800a3d2 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4618      	mov	r0, r3
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	68b9      	ldr	r1, [r7, #8]
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f000 f8e5 	bl	800a3ee <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800a224:	4603      	mov	r3, r0
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a22e:	b480      	push	{r7}
 800a230:	b083      	sub	sp, #12
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bc80      	pop	{r7}
 800a240:	4770      	bx	lr

0800a242 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800a24e:	68b8      	ldr	r0, [r7, #8]
 800a250:	f00a f970 	bl	8014534 <_ZdlPv>
      }
 800a254:	bf00      	nop
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <_ZSt8_DestroyI13ParsedCommandEvPT_>:
    _Destroy(_Tp* __pointer)
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f7fe fdea 	bl	8008e3e <_ZN13ParsedCommandD1Ev>
 800a26a:	bf00      	nop
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a272:	b480      	push	{r7}
 800a274:	b083      	sub	sp, #12
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4618      	mov	r0, r3
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	bc80      	pop	{r7}
 800a284:	4770      	bx	lr

0800a286 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800a292:	68b8      	ldr	r0, [r7, #8]
 800a294:	f00a f94e 	bl	8014534 <_ZdlPv>
      }
 800a298:	bf00      	nop
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f00a fa66 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8a8 	bl	800a414 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <_ZNKSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bc80      	pop	{r7}
 800a2e0:	4770      	bx	lr

0800a2e2 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 f890 	bl	800a414 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	bf8c      	ite	hi
 800a2fc:	2301      	movhi	r3, #1
 800a2fe:	2300      	movls	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a306:	f00a f919 	bl	801453c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4613      	mov	r3, r2
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4618      	mov	r0, r3
 800a316:	f00a f8f3 	bl	8014500 <_Znwj>
 800a31a:	4603      	mov	r3, r0
      }
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <_ZNSt13move_iteratorIP13ParsedCommandEC1ES1_>:
      move_iterator(iterator_type __i)
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4618      	mov	r0, r3
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr

0800a340 <_ZSt18uninitialized_copyISt13move_iteratorIP13ParsedCommandES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a34c:	2301      	movs	r3, #1
 800a34e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	68b9      	ldr	r1, [r7, #8]
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 f869 	bl	800a42c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_>
 800a35a:	4603      	mov	r3, r0
    }
 800a35c:	4618      	mov	r0, r3
 800a35e:	3718      	adds	r7, #24
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a) noexcept
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f88d 	bl	800a48c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a372:	4603      	mov	r3, r0
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4618      	mov	r0, r3
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bc80      	pop	{r7}
 800a38e:	4770      	bx	lr

0800a390 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 f875 	bl	800a48c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	bf8c      	ite	hi
 800a3aa:	2301      	movhi	r3, #1
 800a3ac:	2300      	movls	r3, #0
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a3b4:	f00a f8c2 	bl	801453c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	4413      	add	r3, r2
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f00a f89c 	bl	8014500 <_Znwj>
 800a3c8:	4603      	mov	r3, r0
      }
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bc80      	pop	{r7}
 800a3ec:	4770      	bx	lr

0800a3ee <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b086      	sub	sp, #24
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 f84e 	bl	800a4a4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800a408:	4603      	mov	r3, r0
    }
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
	...

0800a414 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800a41c:	4b02      	ldr	r3, [pc, #8]	; (800a428 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv+0x14>)
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	bc80      	pop	{r7}
 800a426:	4770      	bx	lr
 800a428:	071c71c7 	.word	0x071c71c7

0800a42c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a42c:	b590      	push	{r4, r7, lr}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a43c:	f107 0208 	add.w	r2, r7, #8
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f000 f85b 	bl	800a502 <_ZStneIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d016      	beq.n	800a480 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a452:	6978      	ldr	r0, [r7, #20]
 800a454:	f7ff fdd6 	bl	800a004 <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 800a458:	4604      	mov	r4, r0
 800a45a:	f107 030c 	add.w	r3, r7, #12
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 f870 	bl	800a544 <_ZNKSt13move_iteratorIP13ParsedCommandEdeEv>
 800a464:	4603      	mov	r3, r0
 800a466:	4619      	mov	r1, r3
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 f89c 	bl	800a5a6 <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a46e:	f107 030c 	add.w	r3, r7, #12
 800a472:	4618      	mov	r0, r3
 800a474:	f000 f856 	bl	800a524 <_ZNSt13move_iteratorIP13ParsedCommandEppEv>
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	3324      	adds	r3, #36	; 0x24
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	e7dd      	b.n	800a43c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 800a480:	697b      	ldr	r3, [r7, #20]
	}
 800a482:	4618      	mov	r0, r3
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	bd90      	pop	{r4, r7, pc}
	...

0800a48c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800a494:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800a496:	4618      	mov	r0, r3
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bc80      	pop	{r7}
 800a49e:	4770      	bx	lr
 800a4a0:	0aaaaaaa 	.word	0x0aaaaaaa

0800a4a4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a4a4:	b590      	push	{r4, r7, lr}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a4b4:	f107 0208 	add.w	r2, r7, #8
 800a4b8:	f107 030c 	add.w	r3, r7, #12
 800a4bc:	4611      	mov	r1, r2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 f88a 	bl	800a5d8 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d016      	beq.n	800a4f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a4ca:	6978      	ldr	r0, [r7, #20]
 800a4cc:	f7ff fde1 	bl	800a092 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	f107 030c 	add.w	r3, r7, #12
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 f89f 	bl	800a61a <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 f8af 	bl	800a644 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a4e6:	f107 030c 	add.w	r3, r7, #12
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 f885 	bl	800a5fa <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	3318      	adds	r3, #24
 800a4f4:	617b      	str	r3, [r7, #20]
 800a4f6:	e7dd      	b.n	800a4b4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800a4f8:	697b      	ldr	r3, [r7, #20]
	}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	371c      	adds	r7, #28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd90      	pop	{r4, r7, pc}

0800a502 <_ZStneIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f8b1 	bl	800a676 <_ZSteqIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>
 800a514:	4603      	mov	r3, r0
 800a516:	f083 0301 	eor.w	r3, r3, #1
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <_ZNSt13move_iteratorIP13ParsedCommandEppEv>:
      operator++()
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	601a      	str	r2, [r3, #0]
	return *this;
 800a538:	687b      	ldr	r3, [r7, #4]
      }
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	bc80      	pop	{r7}
 800a542:	4770      	bx	lr

0800a544 <_ZNKSt13move_iteratorIP13ParsedCommandEdeEv>:
      operator*() const
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	bc80      	pop	{r7}
 800a558:	4770      	bx	lr

0800a55a <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	bc80      	pop	{r7}
 800a56c:	4770      	bx	lr

0800a56e <_ZN13ParsedCommandC1EOS_>:
 800a56e:	b580      	push	{r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	6039      	str	r1, [r7, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	4611      	mov	r1, r2
 800a57e:	4618      	mov	r0, r3
 800a580:	f00a f8e1 	bl	8014746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	8b1a      	ldrh	r2, [r3, #24]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	831a      	strh	r2, [r3, #24]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	69da      	ldr	r2, [r3, #28]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	61da      	str	r2, [r3, #28]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	6a1a      	ldr	r2, [r3, #32]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	621a      	str	r2, [r3, #32]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800a5a6:	b590      	push	{r4, r7, lr}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800a5b0:	6838      	ldr	r0, [r7, #0]
 800a5b2:	f7ff ffd2 	bl	800a55a <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	2024      	movs	r0, #36	; 0x24
 800a5be:	f7fd fdfd 	bl	80081bc <_ZnwjPv>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_+0x2a>
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff ffcf 	bl	800a56e <_ZN13ParsedCommandC1EOS_>
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd90      	pop	{r4, r7, pc}

0800a5d8 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f85c 	bl	800a6a2 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	f083 0301 	eor.w	r3, r3, #1
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800a5fa:	b480      	push	{r7}
 800a5fc:	b083      	sub	sp, #12
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f103 0218 	add.w	r2, r3, #24
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	601a      	str	r2, [r3, #0]
	return *this;
 800a60e:	687b      	ldr	r3, [r7, #4]
      }
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	bc80      	pop	{r7}
 800a618:	4770      	bx	lr

0800a61a <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4618      	mov	r0, r3
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bc80      	pop	{r7}
 800a62e:	4770      	bx	lr

0800a630 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4618      	mov	r0, r3
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	bc80      	pop	{r7}
 800a642:	4770      	bx	lr

0800a644 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800a64e:	6838      	ldr	r0, [r7, #0]
 800a650:	f7ff ffee 	bl	800a630 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a654:	4604      	mov	r4, r0
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4619      	mov	r1, r3
 800a65a:	2018      	movs	r0, #24
 800a65c:	f7fd fdae 	bl	80081bc <_ZnwjPv>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800a666:	4621      	mov	r1, r4
 800a668:	4618      	mov	r0, r3
 800a66a:	f00a f86c 	bl	8014746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a66e:	bf00      	nop
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	bd90      	pop	{r4, r7, pc}

0800a676 <_ZSteqIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 800a676:	b590      	push	{r4, r7, lr}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f824 	bl	800a6ce <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>
 800a686:	4604      	mov	r4, r0
 800a688:	6838      	ldr	r0, [r7, #0]
 800a68a:	f000 f820 	bl	800a6ce <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>
 800a68e:	4603      	mov	r3, r0
 800a690:	429c      	cmp	r4, r3
 800a692:	bf0c      	ite	eq
 800a694:	2301      	moveq	r3, #1
 800a696:	2300      	movne	r3, #0
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd90      	pop	{r4, r7, pc}

0800a6a2 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800a6a2:	b590      	push	{r4, r7, lr}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f819 	bl	800a6e4 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	6838      	ldr	r0, [r7, #0]
 800a6b6:	f000 f815 	bl	800a6e4 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	429c      	cmp	r4, r3
 800a6be:	bf0c      	ite	eq
 800a6c0:	2301      	moveq	r3, #1
 800a6c2:	2300      	movne	r3, #0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd90      	pop	{r4, r7, pc}

0800a6ce <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>:
      base() const
 800a6ce:	b480      	push	{r7}
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bc80      	pop	{r7}
 800a6e2:	4770      	bx	lr

0800a6e4 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bc80      	pop	{r7}
 800a6f8:	4770      	bx	lr
	...

0800a6fc <_ZN14CommandHandlerC1Ev>:

#include "CommandHandler.h"
#include "global_callbacks.h"
//#include "FFBoardMain.h"

CommandHandler::CommandHandler() {
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	4a06      	ldr	r2, [pc, #24]	; (800a720 <_ZN14CommandHandlerC1Ev+0x24>)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	711a      	strb	r2, [r3, #4]
	addCommandHandler();
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f857 	bl	800a7c4 <_ZN14CommandHandler17addCommandHandlerEv>
}
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	080191a8 	.word	0x080191a8

0800a724 <_ZN14CommandHandlerD1Ev>:

CommandHandler::~CommandHandler() {
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	4a05      	ldr	r2, [pc, #20]	; (800a744 <_ZN14CommandHandlerD1Ev+0x20>)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	601a      	str	r2, [r3, #0]
	// Remove from global list when deleted
	removeCommandHandler();
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f87a 	bl	800a82c <_ZN14CommandHandler20removeCommandHandlerEv>
}
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	080191a8 	.word	0x080191a8

0800a748 <_ZN14CommandHandlerD0Ev>:
CommandHandler::~CommandHandler() {
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
}
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7ff ffe7 	bl	800a724 <_ZN14CommandHandlerD1Ev>
 800a756:	2108      	movs	r1, #8
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f009 fecf 	bl	80144fc <_ZdlPvj>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <_ZN14CommandHandler11hasCommandsEv>:

bool CommandHandler::hasCommands(){
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
	return this->commandsEnabled;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	791b      	ldrb	r3, [r3, #4]
}
 800a774:	4618      	mov	r0, r3
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	bc80      	pop	{r7}
 800a77c:	4770      	bx	lr

0800a77e <_ZN14CommandHandler18setCommandsEnabledEb>:
void CommandHandler::setCommandsEnabled(bool enable){
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	460b      	mov	r3, r1
 800a788:	70fb      	strb	r3, [r7, #3]
	this->commandsEnabled = enable;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	78fa      	ldrb	r2, [r7, #3]
 800a78e:	711a      	strb	r2, [r3, #4]
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	bc80      	pop	{r7}
 800a798:	4770      	bx	lr

0800a79a <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/*
 * Implement this function
 * MUST return false when no valid command was found or if a help command or similar was parsed
 * When it returns true parsing is normally stopped after this class and not sent to others
 */
bool CommandHandler::command(ParsedCommand* cmd,std::string* reply){
 800a79a:	b480      	push	{r7}
 800a79c:	b085      	sub	sp, #20
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]
	if(!this->commandsEnabled){
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	791b      	ldrb	r3, [r3, #4]
 800a7aa:	f083 0301 	eor.w	r3, r3, #1
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e>
		return false;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	e000      	b.n	800a7ba <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20>
	}
	return false;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bc80      	pop	{r7}
 800a7c2:	4770      	bx	lr

0800a7c4 <_ZN14CommandHandler17addCommandHandlerEv>:


void CommandHandler::addCommandHandler(){
 800a7c4:	b590      	push	{r4, r7, lr}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
	// If already added return
	extern std::vector<CommandHandler*> cmdHandlers;
	for(uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
 800a7d0:	7bfc      	ldrb	r4, [r7, #15]
 800a7d2:	4815      	ldr	r0, [pc, #84]	; (800a828 <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800a7d4:	f000 f872 	bl	800a8bc <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	429c      	cmp	r4, r3
 800a7dc:	bf34      	ite	cc
 800a7de:	2301      	movcc	r3, #1
 800a7e0:	2300      	movcs	r3, #0
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d012      	beq.n	800a80e <_ZN14CommandHandler17addCommandHandlerEv+0x4a>
		if(cmdHandlers[i] == this)
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	480e      	ldr	r0, [pc, #56]	; (800a828 <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800a7ee:	f000 f875 	bl	800a8dc <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	bf0c      	ite	eq
 800a7fc:	2301      	moveq	r3, #1
 800a7fe:	2300      	movne	r3, #0
 800a800:	b2db      	uxtb	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10c      	bne.n	800a820 <_ZN14CommandHandler17addCommandHandlerEv+0x5c>
	for(uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	3301      	adds	r3, #1
 800a80a:	73fb      	strb	r3, [r7, #15]
 800a80c:	e7e0      	b.n	800a7d0 <_ZN14CommandHandler17addCommandHandlerEv+0xc>
			return;
	}
	cmdHandlers.push_back(this);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60bb      	str	r3, [r7, #8]
 800a812:	f107 0308 	add.w	r3, r7, #8
 800a816:	4619      	mov	r1, r3
 800a818:	4803      	ldr	r0, [pc, #12]	; (800a828 <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800a81a:	f000 f878 	bl	800a90e <_ZNSt6vectorIP14CommandHandlerSaIS1_EE9push_backEOS1_>
 800a81e:	e000      	b.n	800a822 <_ZN14CommandHandler17addCommandHandlerEv+0x5e>
			return;
 800a820:	bf00      	nop
}
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	bd90      	pop	{r4, r7, pc}
 800a828:	20000b58 	.word	0x20000b58

0800a82c <_ZN14CommandHandler20removeCommandHandlerEv>:

void CommandHandler::removeCommandHandler(){
 800a82c:	b590      	push	{r4, r7, lr}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
	extern std::vector<CommandHandler*> cmdHandlers;
	for (uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a834:	2300      	movs	r3, #0
 800a836:	75fb      	strb	r3, [r7, #23]
 800a838:	7dfc      	ldrb	r4, [r7, #23]
 800a83a:	481f      	ldr	r0, [pc, #124]	; (800a8b8 <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a83c:	f000 f83e 	bl	800a8bc <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800a840:	4603      	mov	r3, r0
 800a842:	429c      	cmp	r4, r3
 800a844:	bf34      	ite	cc
 800a846:	2301      	movcc	r3, #1
 800a848:	2300      	movcs	r3, #0
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d02e      	beq.n	800a8ae <_ZN14CommandHandler20removeCommandHandlerEv+0x82>
		if(cmdHandlers[i] == this){
 800a850:	7dfb      	ldrb	r3, [r7, #23]
 800a852:	4619      	mov	r1, r3
 800a854:	4818      	ldr	r0, [pc, #96]	; (800a8b8 <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a856:	f000 f841 	bl	800a8dc <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>
 800a85a:	4603      	mov	r3, r0
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	bf0c      	ite	eq
 800a864:	2301      	moveq	r3, #1
 800a866:	2300      	movne	r3, #0
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d01b      	beq.n	800a8a6 <_ZN14CommandHandler20removeCommandHandlerEv+0x7a>
			cmdHandlers.erase(cmdHandlers.begin()+i);
 800a86e:	4812      	ldr	r0, [pc, #72]	; (800a8b8 <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a870:	f000 f85e 	bl	800a930 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800a874:	4603      	mov	r3, r0
 800a876:	613b      	str	r3, [r7, #16]
 800a878:	7dfa      	ldrb	r2, [r7, #23]
 800a87a:	f107 0310 	add.w	r3, r7, #16
 800a87e:	4611      	mov	r1, r2
 800a880:	4618      	mov	r0, r3
 800a882:	f000 f865 	bl	800a950 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800a886:	4603      	mov	r3, r0
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	f107 020c 	add.w	r2, r7, #12
 800a88e:	f107 0308 	add.w	r3, r7, #8
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f000 f873 	bl	800a980 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800a89a:	68b9      	ldr	r1, [r7, #8]
 800a89c:	4806      	ldr	r0, [pc, #24]	; (800a8b8 <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a89e:	f000 f880 	bl	800a9a2 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 800a8a2:	bf00      	nop
		}
	}
}
 800a8a4:	e003      	b.n	800a8ae <_ZN14CommandHandler20removeCommandHandlerEv+0x82>
	for (uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	75fb      	strb	r3, [r7, #23]
 800a8ac:	e7c4      	b.n	800a838 <_ZN14CommandHandler20removeCommandHandlerEv+0xc>
}
 800a8ae:	bf00      	nop
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd90      	pop	{r4, r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000b58 	.word	0x20000b58

0800a8bc <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	109b      	asrs	r3, r3, #2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bc80      	pop	{r7}
 800a8da:	4770      	bx	lr

0800a8dc <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
      }
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bc80      	pop	{r7}
 800a8f8:	4770      	bx	lr

0800a8fa <_ZSt4moveIRP14CommandHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	bc80      	pop	{r7}
 800a90c:	4770      	bx	lr

0800a90e <_ZNSt6vectorIP14CommandHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800a918:	6838      	ldr	r0, [r7, #0]
 800a91a:	f7ff ffee 	bl	800a8fa <_ZSt4moveIRP14CommandHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a91e:	4603      	mov	r3, r0
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f86e 	bl	800aa04 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	f107 030c 	add.w	r3, r7, #12
 800a93e:	4611      	mov	r1, r2
 800a940:	4618      	mov	r0, r3
 800a942:	f000 f88d 	bl	800aa60 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	f107 020c 	add.w	r2, r7, #12
 800a96a:	f107 0308 	add.w	r3, r7, #8
 800a96e:	4611      	mov	r1, r2
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f875 	bl	800aa60 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800a98a:	6838      	ldr	r0, [r7, #0]
 800a98c:	f000 f877 	bl	800aa7e <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800a990:	4603      	mov	r3, r0
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7ff ffbf 	bl	800a930 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	60bb      	str	r3, [r7, #8]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f86b 	bl	800aa92 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE6cbeginEv>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	f107 020c 	add.w	r2, r7, #12
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f876 	bl	800aaba <_ZN9__gnu_cxxmiIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	f107 0308 	add.w	r3, r7, #8
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff ffba 	bl	800a950 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f880 	bl	800aae6 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bc80      	pop	{r7}
 800aa02:	4770      	bx	lr

0800aa04 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800aa04:	b5b0      	push	{r4, r5, r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d011      	beq.n	800aa3e <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800aa1a:	687c      	ldr	r4, [r7, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685d      	ldr	r5, [r3, #4]
 800aa20:	6838      	ldr	r0, [r7, #0]
 800aa22:	f7ff ffe5 	bl	800a9f0 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa26:	4603      	mov	r3, r0
 800aa28:	461a      	mov	r2, r3
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 f896 	bl	800ab5e <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	1d1a      	adds	r2, r3, #4
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	605a      	str	r2, [r3, #4]
      }
 800aa3c:	e00c      	b.n	800aa58 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f8a0 	bl	800ab84 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800aa44:	4604      	mov	r4, r0
 800aa46:	6838      	ldr	r0, [r7, #0]
 800aa48:	f7ff ffd2 	bl	800a9f0 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	4621      	mov	r1, r4
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f8a8 	bl	800aba8 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bdb0      	pop	{r4, r5, r7, pc}

0800aa60 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bc80      	pop	{r7}
 800aa7c:	4770      	bx	lr

0800aa7e <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bc80      	pop	{r7}
 800aa90:	4770      	bx	lr

0800aa92 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	f107 020c 	add.w	r2, r7, #12
 800aaa4:	f107 0308 	add.w	r3, r7, #8
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f908 	bl	800acc0 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <_ZN9__gnu_cxxmiIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800aaba:	b590      	push	{r4, r7, lr}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f90a 	bl	800acde <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800aaca:	4603      	mov	r3, r0
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	461c      	mov	r4, r3
 800aad0:	6838      	ldr	r0, [r7, #0]
 800aad2:	f000 f904 	bl	800acde <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800aad6:	4603      	mov	r3, r0
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	1ae3      	subs	r3, r4, r3
 800aadc:	109b      	asrs	r3, r3, #2
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd90      	pop	{r4, r7, pc}

0800aae6 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 800aae6:	b590      	push	{r4, r7, lr}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff ff2b 	bl	800a950 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800aafa:	4603      	mov	r3, r0
 800aafc:	60bb      	str	r3, [r7, #8]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f840 	bl	800ab84 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800ab04:	4603      	mov	r3, r0
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	f107 020c 	add.w	r2, r7, #12
 800ab0c:	f107 0308 	add.w	r3, r7, #8
 800ab10:	4611      	mov	r1, r2
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f8ed 	bl	800acf2 <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00e      	beq.n	800ab3c <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800ab1e:	463b      	mov	r3, r7
 800ab20:	2101      	movs	r1, #1
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff ff14 	bl	800a950 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f82a 	bl	800ab84 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800ab30:	4603      	mov	r3, r0
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	4619      	mov	r1, r3
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 f8f3 	bl	800ad22 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	1f1a      	subs	r2, r3, #4
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4610      	mov	r0, r2
 800ab50:	f000 f8ff 	bl	800ad52 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800ab54:	683b      	ldr	r3, [r7, #0]
    }
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd90      	pop	{r4, r7, pc}

0800ab5e <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff ff40 	bl	800a9f0 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800ab70:	4603      	mov	r3, r0
 800ab72:	461a      	mov	r2, r3
 800ab74:	68b9      	ldr	r1, [r7, #8]
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f8f8 	bl	800ad6c <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 800ab7c:	bf00      	nop
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	1d1a      	adds	r2, r3, #4
 800ab90:	f107 030c 	add.w	r3, r7, #12
 800ab94:	4611      	mov	r1, r2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff ff62 	bl	800aa60 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800aba8:	b5b0      	push	{r4, r5, r7, lr}
 800abaa:	b08a      	sub	sp, #40	; 0x28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800abb4:	4a41      	ldr	r2, [pc, #260]	; (800acbc <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 800abb6:	2101      	movs	r1, #1
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 f8ef 	bl	800ad9c <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc>
 800abbe:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f7ff feb5 	bl	800a930 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800abc6:	4603      	mov	r3, r0
 800abc8:	617b      	str	r3, [r7, #20]
 800abca:	f107 0214 	add.w	r2, r7, #20
 800abce:	f107 0308 	add.w	r3, r7, #8
 800abd2:	4611      	mov	r1, r2
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 f929 	bl	800ae2c <_ZN9__gnu_cxxmiIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800abda:	4603      	mov	r3, r0
 800abdc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 f938 	bl	800ae58 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj>
 800abe8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800abee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800abf4:	69fa      	ldr	r2, [r7, #28]
 800abf6:	18d5      	adds	r5, r2, r3
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff fef9 	bl	800a9f0 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800abfe:	4603      	mov	r3, r0
 800ac00:	461a      	mov	r2, r3
 800ac02:	4629      	mov	r1, r5
 800ac04:	4620      	mov	r0, r4
 800ac06:	f7ff ffaa 	bl	800ab5e <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681c      	ldr	r4, [r3, #0]
 800ac12:	f107 0308 	add.w	r3, r7, #8
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff ff31 	bl	800aa7e <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 f92c 	bl	800ae80 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ac28:	4603      	mov	r3, r0
	  __new_finish
 800ac2a:	69fa      	ldr	r2, [r7, #28]
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 f930 	bl	800ae94 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800ac34:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	3304      	adds	r3, #4
 800ac3a:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800ac3c:	f107 0308 	add.w	r3, r7, #8
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff ff1c 	bl	800aa7e <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ac46:	4603      	mov	r3, r0
 800ac48:	681c      	ldr	r4, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 f915 	bl	800ae80 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ac56:	4603      	mov	r3, r0
	  __new_finish
 800ac58:	69ba      	ldr	r2, [r7, #24]
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f000 f919 	bl	800ae94 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800ac62:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681c      	ldr	r4, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 f906 	bl	800ae80 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ac74:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ac76:	461a      	mov	r2, r3
 800ac78:	4629      	mov	r1, r5
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 f923 	bl	800aec6 <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800ac94:	461a      	mov	r2, r3
 800ac96:	f000 f924 	bl	800aee2 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	69fa      	ldr	r2, [r7, #28]
 800ac9e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	69ba      	ldr	r2, [r7, #24]
 800aca4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800aca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	69fa      	ldr	r2, [r7, #28]
 800acac:	441a      	add	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	609a      	str	r2, [r3, #8]
    }
 800acb2:	bf00      	nop
 800acb4:	3728      	adds	r7, #40	; 0x28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bdb0      	pop	{r4, r5, r7, pc}
 800acba:	bf00      	nop
 800acbc:	08018d7c 	.word	0x08018d7c

0800acc0 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	bc80      	pop	{r7}
 800acdc:	4770      	bx	lr

0800acde <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800acde:	b480      	push	{r7}
 800ace0:	b083      	sub	sp, #12
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4618      	mov	r0, r3
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	bc80      	pop	{r7}
 800acf0:	4770      	bx	lr

0800acf2 <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800acf2:	b590      	push	{r4, r7, lr}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff febe 	bl	800aa7e <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ad02:	4603      	mov	r3, r0
 800ad04:	681c      	ldr	r4, [r3, #0]
 800ad06:	6838      	ldr	r0, [r7, #0]
 800ad08:	f7ff feb9 	bl	800aa7e <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	429c      	cmp	r4, r3
 800ad12:	bf14      	ite	ne
 800ad14:	2301      	movne	r3, #1
 800ad16:	2300      	moveq	r3, #0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd90      	pop	{r4, r7, pc}

0800ad22 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 800ad22:	b590      	push	{r4, r7, lr}
 800ad24:	b085      	sub	sp, #20
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 f8ea 	bl	800af08 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800ad34:	4604      	mov	r4, r0
 800ad36:	68b8      	ldr	r0, [r7, #8]
 800ad38:	f000 f8e6 	bl	800af08 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800ad3c:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	4619      	mov	r1, r3
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 f8ea 	bl	800af1c <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800ad48:	4603      	mov	r3, r0
    }
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd90      	pop	{r4, r7, pc}

0800ad52 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f902 	bl	800af68 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE7destroyIS2_EEvPT_>
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ad6c:	b590      	push	{r4, r7, lr}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff fe39 	bl	800a9f0 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	681c      	ldr	r4, [r3, #0]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	4619      	mov	r1, r3
 800ad86:	2004      	movs	r0, #4
 800ad88:	f7fd fa18 	bl	80081bc <_ZnwjPv>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d000      	beq.n	800ad94 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 800ad92:	601c      	str	r4, [r3, #0]
 800ad94:	bf00      	nop
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd90      	pop	{r4, r7, pc}

0800ad9c <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ad9c:	b590      	push	{r4, r7, lr}
 800ad9e:	b087      	sub	sp, #28
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 f8e7 	bl	800af7c <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800adae:	4604      	mov	r4, r0
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f7ff fd83 	bl	800a8bc <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800adb6:	4603      	mov	r3, r0
 800adb8:	1ae2      	subs	r2, r4, r3
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	bf34      	ite	cc
 800adc0:	2301      	movcc	r3, #1
 800adc2:	2300      	movcs	r3, #0
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4618      	mov	r0, r3
 800adce:	f009 fbbe 	bl	801454e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f7ff fd72 	bl	800a8bc <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800add8:	4604      	mov	r4, r0
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f7ff fd6e 	bl	800a8bc <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800ade0:	4603      	mov	r3, r0
 800ade2:	613b      	str	r3, [r7, #16]
 800ade4:	f107 0208 	add.w	r2, r7, #8
 800ade8:	f107 0310 	add.w	r3, r7, #16
 800adec:	4611      	mov	r1, r2
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fd fddf 	bl	80089b2 <_ZSt3maxIjERKT_S2_S2_>
 800adf4:	4603      	mov	r3, r0
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4423      	add	r3, r4
 800adfa:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f7ff fd5d 	bl	800a8bc <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800ae02:	4602      	mov	r2, r0
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d306      	bcc.n	800ae18 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 f8b6 	bl	800af7c <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800ae10:	4602      	mov	r2, r0
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d904      	bls.n	800ae22 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f000 f8af 	bl	800af7c <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	e000      	b.n	800ae24 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 800ae22:	697b      	ldr	r3, [r7, #20]
      }
 800ae24:	4618      	mov	r0, r3
 800ae26:	371c      	adds	r7, #28
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd90      	pop	{r4, r7, pc}

0800ae2c <_ZN9__gnu_cxxmiIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ae2c:	b590      	push	{r4, r7, lr}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7ff fe21 	bl	800aa7e <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	461c      	mov	r4, r3
 800ae42:	6838      	ldr	r0, [r7, #0]
 800ae44:	f7ff fe1b 	bl	800aa7e <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	1ae3      	subs	r3, r4, r3
 800ae4e:	109b      	asrs	r3, r3, #2
 800ae50:	4618      	mov	r0, r3
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd90      	pop	{r4, r7, pc}

0800ae58 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d006      	beq.n	800ae76 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj+0x1e>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 f896 	bl	800af9e <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8allocateERS2_j>
 800ae72:	4603      	mov	r3, r0
 800ae74:	e000      	b.n	800ae78 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj+0x20>
 800ae76:	2300      	movs	r3, #0
      }
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bc80      	pop	{r7}
 800ae92:	4770      	bx	lr

0800ae94 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800ae94:	b590      	push	{r4, r7, lr}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 f88a 	bl	800afbc <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	68b8      	ldr	r0, [r7, #8]
 800aeac:	f000 f886 	bl	800afbc <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>
 800aeb0:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f000 f88f 	bl	800afda <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14CommandHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800aebc:	4603      	mov	r3, r0
    }
 800aebe:	4618      	mov	r0, r3
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd90      	pop	{r4, r7, pc}

0800aec6 <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800aed2:	68b9      	ldr	r1, [r7, #8]
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f000 f891 	bl	800affc <_ZSt8_DestroyIPP14CommandHandlerEvT_S3_>
    }
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	60f8      	str	r0, [r7, #12]
 800aeea:	60b9      	str	r1, [r7, #8]
 800aeec:	607a      	str	r2, [r7, #4]
	if (__p)
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d005      	beq.n	800af00 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	68b9      	ldr	r1, [r7, #8]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 f88b 	bl	800b016 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE10deallocateERS2_PS1_j>
      }
 800af00:	bf00      	nop
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4618      	mov	r0, r3
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	bc80      	pop	{r7}
 800af1a:	4770      	bx	lr

0800af1c <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800af1c:	b5b0      	push	{r4, r5, r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 f883 	bl	800b034 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800af2e:	4604      	mov	r4, r0
 800af30:	68b8      	ldr	r0, [r7, #8]
 800af32:	f000 f87f 	bl	800b034 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800af36:	4605      	mov	r5, r0
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f87b 	bl	800b034 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800af3e:	4603      	mov	r3, r0
 800af40:	461a      	mov	r2, r3
 800af42:	4629      	mov	r1, r5
 800af44:	4620      	mov	r0, r4
 800af46:	f000 f883 	bl	800b050 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800af4a:	4603      	mov	r3, r0
 800af4c:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800af4e:	f107 0214 	add.w	r2, r7, #20
 800af52:	f107 0310 	add.w	r3, r7, #16
 800af56:	4611      	mov	r1, r2
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff fd81 	bl	800aa60 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800af5e:	693b      	ldr	r3, [r7, #16]
    }
 800af60:	4618      	mov	r0, r3
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bdb0      	pop	{r4, r5, r7, pc}

0800af68 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
 800af72:	bf00      	nop
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	bc80      	pop	{r7}
 800af7a:	4770      	bx	lr

0800af7c <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4618      	mov	r0, r3
 800af88:	f000 f880 	bl	800b08c <_ZNKSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800af8c:	4603      	mov	r3, r0
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 f870 	bl	800b074 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8max_sizeERKS2_>
 800af94:	4603      	mov	r3, r0
 800af96:	4618      	mov	r0, r3
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800afa8:	2200      	movs	r2, #0
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f877 	bl	800b0a0 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv>
 800afb2:	4603      	mov	r3, r0
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800afc4:	f107 030c 	add.w	r3, r7, #12
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 f886 	bl	800b0dc <_ZNSt13move_iteratorIPP14CommandHandlerEC1ES2_>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14CommandHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 f883 	bl	800b0f8 <_ZSt18uninitialized_copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>
 800aff2:	4603      	mov	r3, r0
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <_ZSt8_DestroyIPP14CommandHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f887 	bl	800b11c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14CommandHandlerEEvT_S5_>
    }
 800b00e:	bf00      	nop
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	60b9      	str	r1, [r7, #8]
 800b020:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	68b9      	ldr	r1, [r7, #8]
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 f882 	bl	800b130 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE10deallocateEPS2_j>
 800b02c:	bf00      	nop
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800b03c:	1d3b      	adds	r3, r7, #4
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff fd1d 	bl	800aa7e <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b044:	4603      	mov	r3, r0
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4618      	mov	r0, r3
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800b05c:	2301      	movs	r3, #1
 800b05e:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 f870 	bl	800b14a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_>
 800b06a:	4603      	mov	r3, r0
    }
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f881 	bl	800b184 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>
 800b082:	4603      	mov	r3, r0
 800b084:	4618      	mov	r0, r3
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <_ZNKSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4618      	mov	r0, r3
 800b098:	370c      	adds	r7, #12
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bc80      	pop	{r7}
 800b09e:	4770      	bx	lr

0800b0a0 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 f869 	bl	800b184 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	bf8c      	ite	hi
 800b0ba:	2301      	movhi	r3, #1
 800b0bc:	2300      	movls	r3, #0
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b0c4:	f009 fa3a 	bl	801453c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f009 fa17 	bl	8014500 <_Znwj>
 800b0d2:	4603      	mov	r3, r0
      }
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <_ZNSt13move_iteratorIPP14CommandHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bc80      	pop	{r7}
 800b0f6:	4770      	bx	lr

0800b0f8 <_ZSt18uninitialized_copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b104:	2301      	movs	r3, #1
 800b106:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f000 f844 	bl	800b19a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14CommandHandlerES5_EET0_T_S8_S7_>
 800b112:	4603      	mov	r3, r0
    }
 800b114:	4618      	mov	r0, r3
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14CommandHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
 800b126:	bf00      	nop
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bc80      	pop	{r7}
 800b12e:	4770      	bx	lr

0800b130 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b13c:	68b8      	ldr	r0, [r7, #8]
 800b13e:	f009 f9f9 	bl	8014534 <_ZdlPv>
      }
 800b142:	bf00      	nop
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b086      	sub	sp, #24
 800b14e:	af00      	add	r7, sp, #0
 800b150:	60f8      	str	r0, [r7, #12]
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	109b      	asrs	r3, r3, #2
 800b15e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d006      	beq.n	800b174 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	461a      	mov	r2, r3
 800b16c:	68f9      	ldr	r1, [r7, #12]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f00c fbe0 	bl	8017934 <memmove>
	  return __result + _Num;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	4413      	add	r3, r2
	}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3718      	adds	r7, #24
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800b18c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	bc80      	pop	{r7}
 800b198:	4770      	bx	lr

0800b19a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14CommandHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	60f8      	str	r0, [r7, #12]
 800b1a2:	60b9      	str	r1, [r7, #8]
 800b1a4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	68b9      	ldr	r1, [r7, #8]
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f000 f805 	bl	800b1ba <_ZSt4copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <_ZSt4copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800b1ba:	b590      	push	{r4, r7, lr}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 f80f 	bl	800b1ea <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	68b8      	ldr	r0, [r7, #8]
 800b1d0:	f000 f80b 	bl	800b1ea <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800b1d4:	4603      	mov	r3, r0
	       __result));
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 f816 	bl	800b20c <_ZSt14__copy_move_a2ILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800b1e0:	4603      	mov	r3, r0
    }
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd90      	pop	{r4, r7, pc}

0800b1ea <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800b1f2:	1d3b      	adds	r3, r7, #4
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 f825 	bl	800b244 <_ZNKSt13move_iteratorIPP14CommandHandlerE4baseEv>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 f82c 	bl	800b25a <_ZSt12__miter_baseIPP14CommandHandlerET_S3_>
 800b202:	4603      	mov	r3, r0
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <_ZSt14__copy_move_a2ILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800b20c:	b5b0      	push	{r4, r5, r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f000 f828 	bl	800b26e <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800b21e:	4604      	mov	r4, r0
 800b220:	68b8      	ldr	r0, [r7, #8]
 800b222:	f000 f824 	bl	800b26e <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800b226:	4605      	mov	r5, r0
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f820 	bl	800b26e <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800b22e:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800b230:	461a      	mov	r2, r3
 800b232:	4629      	mov	r1, r5
 800b234:	4620      	mov	r0, r4
 800b236:	f7ff ff0b 	bl	800b050 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800b23a:	4603      	mov	r3, r0
    }
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bdb0      	pop	{r4, r5, r7, pc}

0800b244 <_ZNKSt13move_iteratorIPP14CommandHandlerE4baseEv>:
      base() const
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	bc80      	pop	{r7}
 800b258:	4770      	bx	lr

0800b25a <_ZSt12__miter_baseIPP14CommandHandlerET_S3_>:
    __miter_base(_Iterator __it)
 800b25a:	b480      	push	{r7}
 800b25c:	b083      	sub	sp, #12
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	bc80      	pop	{r7}
 800b26c:	4770      	bx	lr

0800b26e <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>:
    __niter_base(_Iterator __it)
 800b26e:	b480      	push	{r7}
 800b270:	b083      	sub	sp, #12
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4618      	mov	r0, r3
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bc80      	pop	{r7}
 800b280:	4770      	bx	lr
	...

0800b284 <_ZN12EncoderLocalC1Ev>:
 *      Author: Yannick
 */

#include "EncoderLocal.h"

EncoderLocal::EncoderLocal() {
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 f916 	bl	800b4c0 <_ZN11ExtiHandlerC1Ev>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3304      	adds	r3, #4
 800b298:	4618      	mov	r0, r3
 800b29a:	f005 f9bf 	bl	801061c <_ZN12TimerHandlerC1Ev>
 800b29e:	4a14      	ldr	r2, [pc, #80]	; (800b2f0 <_ZN12EncoderLocalC1Ev+0x6c>)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	4a13      	ldr	r2, [pc, #76]	; (800b2f4 <_ZN12EncoderLocalC1Ev+0x70>)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	605a      	str	r2, [r3, #4]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	60da      	str	r2, [r3, #12]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	741a      	strb	r2, [r3, #16]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	615a      	str	r2, [r3, #20]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b2c2:	619a      	str	r2, [r3, #24]
	this->htim = &TIM_ENC;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a0c      	ldr	r2, [pc, #48]	; (800b2f8 <_ZN12EncoderLocalC1Ev+0x74>)
 800b2c8:	609a      	str	r2, [r3, #8]
	setPos(0);
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f867 	bl	800b3a0 <_ZN12EncoderLocal6setPosEl>

	this->htim->Instance->CR1 = 1;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fa fd20 	bl	8005d26 <HAL_TIM_Base_Start_IT>


}
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	080191cc 	.word	0x080191cc
 800b2f4:	080191e4 	.word	0x080191e4
 800b2f8:	20001554 	.word	0x20001554

0800b2fc <_ZN12EncoderLocalD1Ev>:

EncoderLocal::~EncoderLocal() {
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	4a0c      	ldr	r2, [pc, #48]	; (800b338 <_ZN12EncoderLocalD1Ev+0x3c>)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	4a0c      	ldr	r2, [pc, #48]	; (800b33c <_ZN12EncoderLocalD1Ev+0x40>)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	605a      	str	r2, [r3, #4]
	this->htim->Instance->CR1 = 0;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2200      	movs	r2, #0
 800b318:	601a      	str	r2, [r3, #0]
EncoderLocal::~EncoderLocal() {
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3304      	adds	r3, #4
 800b31e:	4618      	mov	r0, r3
 800b320:	f005 f994 	bl	801064c <_ZN12TimerHandlerD1Ev>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4618      	mov	r0, r3
 800b328:	f000 f8e2 	bl	800b4f0 <_ZN11ExtiHandlerD1Ev>
}
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	080191cc 	.word	0x080191cc
 800b33c:	080191e4 	.word	0x080191e4

0800b340 <_ZThn4_N12EncoderLocalD1Ev>:

class EncoderLocal: public ExtiHandler, TimerHandler {
public:

	EncoderLocal();
	virtual ~EncoderLocal();
 800b340:	f1a0 0004 	sub.w	r0, r0, #4
 800b344:	f7ff bfda 	b.w	800b2fc <_ZN12EncoderLocalD1Ev>

0800b348 <_ZN12EncoderLocalD0Ev>:
EncoderLocal::~EncoderLocal() {
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
}
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff ffd3 	bl	800b2fc <_ZN12EncoderLocalD1Ev>
 800b356:	211c      	movs	r1, #28
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f009 f8cf 	bl	80144fc <_ZdlPvj>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <_ZThn4_N12EncoderLocalD0Ev>:
 800b368:	f1a0 0004 	sub.w	r0, r0, #4
 800b36c:	f7ff bfec 	b.w	800b348 <_ZN12EncoderLocalD0Ev>

0800b370 <_ZN12EncoderLocal6getPosEv>:


int32_t EncoderLocal::getPos(){
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
	int32_t timpos = htim->Instance->CNT - 0x7fff;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800b384:	3b7f      	subs	r3, #127	; 0x7f
 800b386:	60fb      	str	r3, [r7, #12]
	return timpos + pos + offset;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	695a      	ldr	r2, [r3, #20]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	441a      	add	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	4413      	add	r3, r2
}
 800b396:	4618      	mov	r0, r3
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bc80      	pop	{r7}
 800b39e:	4770      	bx	lr

0800b3a0 <_ZN12EncoderLocal6setPosEl>:
void EncoderLocal::setPos(int32_t pos){
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
	this->pos = pos;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	615a      	str	r2, [r3, #20]
	htim->Instance->CNT = pos+0x7fff;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800b3b6:	337f      	adds	r3, #127	; 0x7f
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	6892      	ldr	r2, [r2, #8]
 800b3bc:	6812      	ldr	r2, [r2, #0]
 800b3be:	6253      	str	r3, [r2, #36]	; 0x24
}
 800b3c0:	bf00      	nop
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bc80      	pop	{r7}
 800b3c8:	4770      	bx	lr

0800b3ca <_ZN12EncoderLocal4extiEt>:

void EncoderLocal::setPeriod(uint32_t period){
	this->htim->Instance->ARR = period-1;
}

void EncoderLocal::exti(uint16_t GPIO_Pin){
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	807b      	strh	r3, [r7, #2]
	if(GPIO_Pin == ENCODER_Z_Pin){
		// Encoder Z pin activated
	}
}
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bc80      	pop	{r7}
 800b3de:	4770      	bx	lr

0800b3e0 <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:

void EncoderLocal::timerElapsed(TIM_HandleTypeDef* htim){
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
	if(htim == this->htim){
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d102      	bne.n	800b3fa <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef+0x1a>
		overflowCallback();
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f808 	bl	800b40a <_ZN12EncoderLocal16overflowCallbackEv>
	}
}
 800b3fa:	bf00      	nop
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <_ZThn4_N12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:
	void setPos(int32_t pos);
	void setOffset(int32_t offset);
	void setPeriod(uint32_t period);
	void overflowCallback();
	void exti(uint16_t GPIO_Pin);
	void timerElapsed(TIM_HandleTypeDef* htim);
 800b402:	f1a0 0004 	sub.w	r0, r0, #4
 800b406:	f7ff bfeb 	b.w	800b3e0 <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>

0800b40a <_ZN12EncoderLocal16overflowCallbackEv>:

void EncoderLocal::overflowCallback(){
 800b40a:	b480      	push	{r7}
 800b40c:	b083      	sub	sp, #12
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
	if(first)					//TODO: figure it out
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	7c1b      	ldrb	r3, [r3, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d003      	beq.n	800b422 <_ZN12EncoderLocal16overflowCallbackEv+0x18>
	{
		first = false;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	741a      	strb	r2, [r3, #16]
		return;
 800b420:	e026      	b.n	800b470 <_ZN12EncoderLocal16overflowCallbackEv+0x66>
	}
	if(htim->Instance->CNT > this->htim->Instance->ARR/2){
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b432:	085b      	lsrs	r3, r3, #1
 800b434:	429a      	cmp	r2, r3
 800b436:	bf8c      	ite	hi
 800b438:	2301      	movhi	r3, #1
 800b43a:	2300      	movls	r3, #0
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00b      	beq.n	800b45a <_ZN12EncoderLocal16overflowCallbackEv+0x50>
		pos -= htim->Instance->ARR+1;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44a:	3301      	adds	r3, #1
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	6952      	ldr	r2, [r2, #20]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	461a      	mov	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	615a      	str	r2, [r3, #20]
 800b458:	e00a      	b.n	800b470 <_ZN12EncoderLocal16overflowCallbackEv+0x66>
	}else{
		pos += htim->Instance->ARR+1;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b462:	3301      	adds	r3, #1
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	6952      	ldr	r2, [r2, #20]
 800b468:	4413      	add	r3, r2
 800b46a:	461a      	mov	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	615a      	str	r2, [r3, #20]
	}
}
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	bc80      	pop	{r7}
 800b476:	4770      	bx	lr

0800b478 <_ZN12EncoderLocal6getPprEv>:

uint32_t EncoderLocal::getPpr(){
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
	return this->ppr;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	699b      	ldr	r3, [r3, #24]
}
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	bc80      	pop	{r7}
 800b48c:	4770      	bx	lr

0800b48e <_ZN12EncoderLocal9getPosCprEv>:

uint32_t EncoderLocal::getPosCpr(){
 800b48e:	b480      	push	{r7}
 800b490:	b083      	sub	sp, #12
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
	return this->ppr;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	699b      	ldr	r3, [r3, #24]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	370c      	adds	r7, #12
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bc80      	pop	{r7}
 800b4a2:	4770      	bx	lr

0800b4a4 <_ZN12EncoderLocal6setPprEm>:

void EncoderLocal::setPpr(uint32_t ppr){
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
	this->ppr = ppr;
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	619a      	str	r2, [r3, #24]
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bc80      	pop	{r7}
 800b4bc:	4770      	bx	lr
	...

0800b4c0 <_ZN11ExtiHandlerC1Ev>:

#include "ExtiHandler.h"
#include "global_callbacks.h"
#include "vector"

ExtiHandler::ExtiHandler() {
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	4a07      	ldr	r2, [pc, #28]	; (800b4e8 <_ZN11ExtiHandlerC1Ev+0x28>)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	601a      	str	r2, [r3, #0]
	extern std::vector<ExtiHandler*> extiHandlers;
	extiHandlers.push_back(this);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	f107 030c 	add.w	r3, r7, #12
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4804      	ldr	r0, [pc, #16]	; (800b4ec <_ZN11ExtiHandlerC1Ev+0x2c>)
 800b4da:	f000 f87a 	bl	800b5d2 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE9push_backEOS1_>
}
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	080191f8 	.word	0x080191f8
 800b4ec:	20000b78 	.word	0x20000b78

0800b4f0 <_ZN11ExtiHandlerD1Ev>:

ExtiHandler::~ExtiHandler() {
 800b4f0:	b590      	push	{r4, r7, lr}
 800b4f2:	b087      	sub	sp, #28
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	4a21      	ldr	r2, [pc, #132]	; (800b580 <_ZN11ExtiHandlerD1Ev+0x90>)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	601a      	str	r2, [r3, #0]
	extern std::vector<ExtiHandler*> extiHandlers;
	for (uint8_t i = 0; i < extiHandlers.size(); i++){
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]
 800b502:	7dfc      	ldrb	r4, [r7, #23]
 800b504:	481f      	ldr	r0, [pc, #124]	; (800b584 <_ZN11ExtiHandlerD1Ev+0x94>)
 800b506:	f000 f875 	bl	800b5f4 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b50a:	4603      	mov	r3, r0
 800b50c:	429c      	cmp	r4, r3
 800b50e:	bf34      	ite	cc
 800b510:	2301      	movcc	r3, #1
 800b512:	2300      	movcs	r3, #0
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d02d      	beq.n	800b576 <_ZN11ExtiHandlerD1Ev+0x86>
		if(extiHandlers[i] == this){
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	4619      	mov	r1, r3
 800b51e:	4819      	ldr	r0, [pc, #100]	; (800b584 <_ZN11ExtiHandlerD1Ev+0x94>)
 800b520:	f000 f878 	bl	800b614 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEixEj>
 800b524:	4603      	mov	r3, r0
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	bf0c      	ite	eq
 800b52e:	2301      	moveq	r3, #1
 800b530:	2300      	movne	r3, #0
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01a      	beq.n	800b56e <_ZN11ExtiHandlerD1Ev+0x7e>
			extiHandlers.erase(extiHandlers.begin()+i);
 800b538:	4812      	ldr	r0, [pc, #72]	; (800b584 <_ZN11ExtiHandlerD1Ev+0x94>)
 800b53a:	f000 f87a 	bl	800b632 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800b53e:	4603      	mov	r3, r0
 800b540:	613b      	str	r3, [r7, #16]
 800b542:	7dfa      	ldrb	r2, [r7, #23]
 800b544:	f107 0310 	add.w	r3, r7, #16
 800b548:	4611      	mov	r1, r2
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 f881 	bl	800b652 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b550:	4603      	mov	r3, r0
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	f107 020c 	add.w	r2, r7, #12
 800b558:	f107 0308 	add.w	r3, r7, #8
 800b55c:	4611      	mov	r1, r2
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 f88f 	bl	800b682 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800b564:	68b9      	ldr	r1, [r7, #8]
 800b566:	4807      	ldr	r0, [pc, #28]	; (800b584 <_ZN11ExtiHandlerD1Ev+0x94>)
 800b568:	f000 f89c 	bl	800b6a4 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 800b56c:	e003      	b.n	800b576 <_ZN11ExtiHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < extiHandlers.size(); i++){
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
 800b570:	3301      	adds	r3, #1
 800b572:	75fb      	strb	r3, [r7, #23]
 800b574:	e7c5      	b.n	800b502 <_ZN11ExtiHandlerD1Ev+0x12>
		}
	}
}
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4618      	mov	r0, r3
 800b57a:	371c      	adds	r7, #28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd90      	pop	{r4, r7, pc}
 800b580:	080191f8 	.word	0x080191f8
 800b584:	20000b78 	.word	0x20000b78

0800b588 <_ZN11ExtiHandlerD0Ev>:
ExtiHandler::~ExtiHandler() {
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
}
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7ff ffad 	bl	800b4f0 <_ZN11ExtiHandlerD1Ev>
 800b596:	2104      	movs	r1, #4
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f008 ffaf 	bl	80144fc <_ZdlPvj>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <_ZN11ExtiHandler4extiEt>:

void ExtiHandler::exti(uint16_t GPIO_Pin){
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	807b      	strh	r3, [r7, #2]

}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bc80      	pop	{r7}
 800b5bc:	4770      	bx	lr

0800b5be <_ZSt4moveIRP11ExtiHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bc80      	pop	{r7}
 800b5d0:	4770      	bx	lr

0800b5d2 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b082      	sub	sp, #8
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800b5dc:	6838      	ldr	r0, [r7, #0]
 800b5de:	f7ff ffee 	bl	800b5be <_ZSt4moveIRP11ExtiHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f88d 	bl	800b706 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	461a      	mov	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	109b      	asrs	r3, r3, #2
 800b60a:	4618      	mov	r0, r3
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	bc80      	pop	{r7}
 800b612:	4770      	bx	lr

0800b614 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
      }
 800b628:	4618      	mov	r0, r3
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bc80      	pop	{r7}
 800b630:	4770      	bx	lr

0800b632 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b632:	b580      	push	{r7, lr}
 800b634:	b084      	sub	sp, #16
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	f107 030c 	add.w	r3, r7, #12
 800b640:	4611      	mov	r1, r2
 800b642:	4618      	mov	r0, r3
 800b644:	f000 f88d 	bl	800b762 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	f107 020c 	add.w	r2, r7, #12
 800b66c:	f107 0308 	add.w	r3, r7, #8
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f875 	bl	800b762 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	4618      	mov	r0, r3
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800b682:	b580      	push	{r7, lr}
 800b684:	b082      	sub	sp, #8
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800b68c:	6838      	ldr	r0, [r7, #0]
 800b68e:	f000 f877 	bl	800b780 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b692:	4603      	mov	r3, r0
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4618      	mov	r0, r3
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7ff ffbf 	bl	800b632 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	60bb      	str	r3, [r7, #8]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f86b 	bl	800b794 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE6cbeginEv>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	f107 020c 	add.w	r2, r7, #12
 800b6c6:	463b      	mov	r3, r7
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 f876 	bl	800b7bc <_ZN9__gnu_cxxmiIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	f107 0308 	add.w	r3, r7, #8
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7ff ffba 	bl	800b652 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f880 	bl	800b7e8 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b6f2:	b480      	push	{r7}
 800b6f4:	b083      	sub	sp, #12
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	bc80      	pop	{r7}
 800b704:	4770      	bx	lr

0800b706 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800b706:	b5b0      	push	{r4, r5, r7, lr}
 800b708:	b082      	sub	sp, #8
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d011      	beq.n	800b740 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b71c:	687c      	ldr	r4, [r7, #4]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685d      	ldr	r5, [r3, #4]
 800b722:	6838      	ldr	r0, [r7, #0]
 800b724:	f7ff ffe5 	bl	800b6f2 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b728:	4603      	mov	r3, r0
 800b72a:	461a      	mov	r2, r3
 800b72c:	4629      	mov	r1, r5
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 f896 	bl	800b860 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	1d1a      	adds	r2, r3, #4
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	605a      	str	r2, [r3, #4]
      }
 800b73e:	e00c      	b.n	800b75a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f8a0 	bl	800b886 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800b746:	4604      	mov	r4, r0
 800b748:	6838      	ldr	r0, [r7, #0]
 800b74a:	f7ff ffd2 	bl	800b6f2 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b74e:	4603      	mov	r3, r0
 800b750:	461a      	mov	r2, r3
 800b752:	4621      	mov	r1, r4
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f8a7 	bl	800b8a8 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bdb0      	pop	{r4, r5, r7, pc}

0800b762 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4618      	mov	r0, r3
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bc80      	pop	{r7}
 800b77e:	4770      	bx	lr

0800b780 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4618      	mov	r0, r3
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	bc80      	pop	{r7}
 800b792:	4770      	bx	lr

0800b794 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60fb      	str	r3, [r7, #12]
 800b7a2:	f107 020c 	add.w	r2, r7, #12
 800b7a6:	f107 0308 	add.w	r3, r7, #8
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 f907 	bl	800b9c0 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <_ZN9__gnu_cxxmiIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b7bc:	b590      	push	{r4, r7, lr}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f909 	bl	800b9de <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	461c      	mov	r4, r3
 800b7d2:	6838      	ldr	r0, [r7, #0]
 800b7d4:	f000 f903 	bl	800b9de <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	1ae3      	subs	r3, r4, r3
 800b7de:	109b      	asrs	r3, r3, #2
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd90      	pop	{r4, r7, pc}

0800b7e8 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 800b7e8:	b590      	push	{r4, r7, lr}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800b7f2:	463b      	mov	r3, r7
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff ff2b 	bl	800b652 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	60bb      	str	r3, [r7, #8]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f840 	bl	800b886 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800b806:	4603      	mov	r3, r0
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	f107 020c 	add.w	r2, r7, #12
 800b80e:	f107 0308 	add.w	r3, r7, #8
 800b812:	4611      	mov	r1, r2
 800b814:	4618      	mov	r0, r3
 800b816:	f000 f8ec 	bl	800b9f2 <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00e      	beq.n	800b83e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800b820:	463b      	mov	r3, r7
 800b822:	2101      	movs	r1, #1
 800b824:	4618      	mov	r0, r3
 800b826:	f7ff ff14 	bl	800b652 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b82a:	4604      	mov	r4, r0
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f82a 	bl	800b886 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800b832:	4603      	mov	r3, r0
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	4619      	mov	r1, r3
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 f8f2 	bl	800ba22 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	1f1a      	subs	r2, r3, #4
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	4619      	mov	r1, r3
 800b850:	4610      	mov	r0, r2
 800b852:	f000 f8fe 	bl	800ba52 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800b856:	683b      	ldr	r3, [r7, #0]
    }
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd90      	pop	{r4, r7, pc}

0800b860 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff ff40 	bl	800b6f2 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b872:	4603      	mov	r3, r0
 800b874:	461a      	mov	r2, r3
 800b876:	68b9      	ldr	r1, [r7, #8]
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 f8f7 	bl	800ba6c <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	1d1a      	adds	r2, r3, #4
 800b892:	f107 030c 	add.w	r3, r7, #12
 800b896:	4611      	mov	r1, r2
 800b898:	4618      	mov	r0, r3
 800b89a:	f7ff ff62 	bl	800b762 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800b8a8:	b5b0      	push	{r4, r5, r7, lr}
 800b8aa:	b08a      	sub	sp, #40	; 0x28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800b8b4:	4a41      	ldr	r2, [pc, #260]	; (800b9bc <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 800b8b6:	2101      	movs	r1, #1
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 f8ef 	bl	800ba9c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc>
 800b8be:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7ff feb6 	bl	800b632 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	617b      	str	r3, [r7, #20]
 800b8ca:	f107 0214 	add.w	r2, r7, #20
 800b8ce:	f107 0308 	add.w	r3, r7, #8
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 f929 	bl	800bb2c <_ZN9__gnu_cxxmiIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 f938 	bl	800bb58 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj>
 800b8e8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800b8ee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	18d5      	adds	r5, r2, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff fefa 	bl	800b6f2 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b8fe:	4603      	mov	r3, r0
 800b900:	461a      	mov	r2, r3
 800b902:	4629      	mov	r1, r5
 800b904:	4620      	mov	r0, r4
 800b906:	f7ff ffab 	bl	800b860 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800b90a:	2300      	movs	r3, #0
 800b90c:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681c      	ldr	r4, [r3, #0]
 800b912:	f107 0308 	add.w	r3, r7, #8
 800b916:	4618      	mov	r0, r3
 800b918:	f7ff ff32 	bl	800b780 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b91c:	4603      	mov	r3, r0
 800b91e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4618      	mov	r0, r3
 800b924:	f000 f92c 	bl	800bb80 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b928:	4603      	mov	r3, r0
	  __new_finish
 800b92a:	69fa      	ldr	r2, [r7, #28]
 800b92c:	4629      	mov	r1, r5
 800b92e:	4620      	mov	r0, r4
 800b930:	f000 f930 	bl	800bb94 <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800b934:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	3304      	adds	r3, #4
 800b93a:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800b93c:	f107 0308 	add.w	r3, r7, #8
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff ff1d 	bl	800b780 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b946:	4603      	mov	r3, r0
 800b948:	681c      	ldr	r4, [r3, #0]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	4618      	mov	r0, r3
 800b952:	f000 f915 	bl	800bb80 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b956:	4603      	mov	r3, r0
	  __new_finish
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	4629      	mov	r1, r5
 800b95c:	4620      	mov	r0, r4
 800b95e:	f000 f919 	bl	800bb94 <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800b962:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681c      	ldr	r4, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 f906 	bl	800bb80 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b974:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b976:	461a      	mov	r2, r3
 800b978:	4629      	mov	r1, r5
 800b97a:	4620      	mov	r0, r4
 800b97c:	f000 f923 	bl	800bbc6 <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800b98a:	461a      	mov	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800b994:	461a      	mov	r2, r3
 800b996:	f000 f924 	bl	800bbe2 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	69fa      	ldr	r2, [r7, #28]
 800b99e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	441a      	add	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	609a      	str	r2, [r3, #8]
    }
 800b9b2:	bf00      	nop
 800b9b4:	3728      	adds	r7, #40	; 0x28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	08018d98 	.word	0x08018d98

0800b9c0 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	601a      	str	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bc80      	pop	{r7}
 800b9dc:	4770      	bx	lr

0800b9de <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bc80      	pop	{r7}
 800b9f0:	4770      	bx	lr

0800b9f2 <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b9f2:	b590      	push	{r4, r7, lr}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7ff febf 	bl	800b780 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ba02:	4603      	mov	r3, r0
 800ba04:	681c      	ldr	r4, [r3, #0]
 800ba06:	6838      	ldr	r0, [r7, #0]
 800ba08:	f7ff feba 	bl	800b780 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	429c      	cmp	r4, r3
 800ba12:	bf14      	ite	ne
 800ba14:	2301      	movne	r3, #1
 800ba16:	2300      	moveq	r3, #0
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd90      	pop	{r4, r7, pc}

0800ba22 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 800ba22:	b590      	push	{r4, r7, lr}
 800ba24:	b085      	sub	sp, #20
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f000 f8ea 	bl	800bc08 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800ba34:	4604      	mov	r4, r0
 800ba36:	68b8      	ldr	r0, [r7, #8]
 800ba38:	f000 f8e6 	bl	800bc08 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800ba3c:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	4619      	mov	r1, r3
 800ba42:	4620      	mov	r0, r4
 800ba44:	f000 f8ea 	bl	800bc1c <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800ba48:	4603      	mov	r3, r0
    }
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3714      	adds	r7, #20
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd90      	pop	{r4, r7, pc}

0800ba52 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b082      	sub	sp, #8
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 f902 	bl	800bc68 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE7destroyIS2_EEvPT_>
 800ba64:	bf00      	nop
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ba6c:	b590      	push	{r4, r7, lr}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7ff fe3a 	bl	800b6f2 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	681c      	ldr	r4, [r3, #0]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	4619      	mov	r1, r3
 800ba86:	2004      	movs	r0, #4
 800ba88:	f7fc fb98 	bl	80081bc <_ZnwjPv>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d000      	beq.n	800ba94 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 800ba92:	601c      	str	r4, [r3, #0]
 800ba94:	bf00      	nop
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd90      	pop	{r4, r7, pc}

0800ba9c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ba9c:	b590      	push	{r4, r7, lr}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f000 f8e7 	bl	800bc7c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800baae:	4604      	mov	r4, r0
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f7ff fd9f 	bl	800b5f4 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800bab6:	4603      	mov	r3, r0
 800bab8:	1ae2      	subs	r2, r4, r3
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	429a      	cmp	r2, r3
 800babe:	bf34      	ite	cc
 800bac0:	2301      	movcc	r3, #1
 800bac2:	2300      	movcs	r3, #0
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4618      	mov	r0, r3
 800bace:	f008 fd3e 	bl	801454e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fd8e 	bl	800b5f4 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800bad8:	4604      	mov	r4, r0
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff fd8a 	bl	800b5f4 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800bae0:	4603      	mov	r3, r0
 800bae2:	613b      	str	r3, [r7, #16]
 800bae4:	f107 0208 	add.w	r2, r7, #8
 800bae8:	f107 0310 	add.w	r3, r7, #16
 800baec:	4611      	mov	r1, r2
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fc ff5f 	bl	80089b2 <_ZSt3maxIjERKT_S2_S2_>
 800baf4:	4603      	mov	r3, r0
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4423      	add	r3, r4
 800bafa:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff fd79 	bl	800b5f4 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800bb02:	4602      	mov	r2, r0
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d306      	bcc.n	800bb18 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f000 f8b6 	bl	800bc7c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800bb10:	4602      	mov	r2, r0
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d904      	bls.n	800bb22 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f000 f8af 	bl	800bc7c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	e000      	b.n	800bb24 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 800bb22:	697b      	ldr	r3, [r7, #20]
      }
 800bb24:	4618      	mov	r0, r3
 800bb26:	371c      	adds	r7, #28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd90      	pop	{r4, r7, pc}

0800bb2c <_ZN9__gnu_cxxmiIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800bb2c:	b590      	push	{r4, r7, lr}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff fe22 	bl	800b780 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	461c      	mov	r4, r3
 800bb42:	6838      	ldr	r0, [r7, #0]
 800bb44:	f7ff fe1c 	bl	800b780 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	1ae3      	subs	r3, r4, r3
 800bb4e:	109b      	asrs	r3, r3, #2
 800bb50:	4618      	mov	r0, r3
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd90      	pop	{r4, r7, pc}

0800bb58 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d006      	beq.n	800bb76 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj+0x1e>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f000 f896 	bl	800bc9e <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8allocateERS2_j>
 800bb72:	4603      	mov	r3, r0
 800bb74:	e000      	b.n	800bb78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj+0x20>
 800bb76:	2300      	movs	r3, #0
      }
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bc80      	pop	{r7}
 800bb92:	4770      	bx	lr

0800bb94 <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800bb94:	b590      	push	{r4, r7, lr}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
 800bba0:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 f88a 	bl	800bcbc <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>
 800bba8:	4604      	mov	r4, r0
 800bbaa:	68b8      	ldr	r0, [r7, #8]
 800bbac:	f000 f886 	bl	800bcbc <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>
 800bbb0:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f000 f88f 	bl	800bcda <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP11ExtiHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800bbbc:	4603      	mov	r3, r0
    }
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3714      	adds	r7, #20
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd90      	pop	{r4, r7, pc}

0800bbc6 <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b084      	sub	sp, #16
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	60f8      	str	r0, [r7, #12]
 800bbce:	60b9      	str	r1, [r7, #8]
 800bbd0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f000 f891 	bl	800bcfc <_ZSt8_DestroyIPP11ExtiHandlerEvT_S3_>
    }
 800bbda:	bf00      	nop
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	607a      	str	r2, [r7, #4]
	if (__p)
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d005      	beq.n	800bc00 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	68b9      	ldr	r1, [r7, #8]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 f88b 	bl	800bd16 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE10deallocateERS2_PS1_j>
      }
 800bc00:	bf00      	nop
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4618      	mov	r0, r3
 800bc14:	370c      	adds	r7, #12
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bc80      	pop	{r7}
 800bc1a:	4770      	bx	lr

0800bc1c <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800bc1c:	b5b0      	push	{r4, r5, r7, lr}
 800bc1e:	b086      	sub	sp, #24
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f000 f883 	bl	800bd34 <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800bc2e:	4604      	mov	r4, r0
 800bc30:	68b8      	ldr	r0, [r7, #8]
 800bc32:	f000 f87f 	bl	800bd34 <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800bc36:	4605      	mov	r5, r0
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f87b 	bl	800bd34 <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	461a      	mov	r2, r3
 800bc42:	4629      	mov	r1, r5
 800bc44:	4620      	mov	r0, r4
 800bc46:	f000 f883 	bl	800bd50 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800bc4e:	f107 0214 	add.w	r2, r7, #20
 800bc52:	f107 0310 	add.w	r3, r7, #16
 800bc56:	4611      	mov	r1, r2
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff fd82 	bl	800b762 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bc5e:	693b      	ldr	r3, [r7, #16]
    }
 800bc60:	4618      	mov	r0, r3
 800bc62:	3718      	adds	r7, #24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bdb0      	pop	{r4, r5, r7, pc}

0800bc68 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	bf00      	nop
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bc80      	pop	{r7}
 800bc7a:	4770      	bx	lr

0800bc7c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 f880 	bl	800bd8c <_ZNKSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 f870 	bl	800bd74 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8max_sizeERKS2_>
 800bc94:	4603      	mov	r3, r0
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800bca8:	2200      	movs	r2, #0
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f877 	bl	800bda0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800bcc4:	f107 030c 	add.w	r3, r7, #12
 800bcc8:	6879      	ldr	r1, [r7, #4]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 f886 	bl	800bddc <_ZNSt13move_iteratorIPP11ExtiHandlerEC1ES2_>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP11ExtiHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	60f8      	str	r0, [r7, #12]
 800bce2:	60b9      	str	r1, [r7, #8]
 800bce4:	607a      	str	r2, [r7, #4]
 800bce6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	68b9      	ldr	r1, [r7, #8]
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f000 f883 	bl	800bdf8 <_ZSt18uninitialized_copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <_ZSt8_DestroyIPP11ExtiHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f887 	bl	800be1c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ExtiHandlerEEvT_S5_>
    }
 800bd0e:	bf00      	nop
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b084      	sub	sp, #16
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	68b9      	ldr	r1, [r7, #8]
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f000 f882 	bl	800be30 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE10deallocateEPS2_j>
 800bd2c:	bf00      	nop
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800bd3c:	1d3b      	adds	r3, r7, #4
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fd1e 	bl	800b780 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800bd44:	4603      	mov	r3, r0
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	68b9      	ldr	r1, [r7, #8]
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f000 f870 	bl	800be4a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_>
 800bd6a:	4603      	mov	r3, r0
    }
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3718      	adds	r7, #24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 f881 	bl	800be84 <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>
 800bd82:	4603      	mov	r3, r0
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <_ZNKSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4618      	mov	r0, r3
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bc80      	pop	{r7}
 800bd9e:	4770      	bx	lr

0800bda0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f000 f869 	bl	800be84 <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	bf8c      	ite	hi
 800bdba:	2301      	movhi	r3, #1
 800bdbc:	2300      	movls	r3, #0
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d001      	beq.n	800bdc8 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bdc4:	f008 fbba 	bl	801453c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f008 fb97 	bl	8014500 <_Znwj>
 800bdd2:	4603      	mov	r3, r0
      }
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <_ZNSt13move_iteratorIPP11ExtiHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bc80      	pop	{r7}
 800bdf6:	4770      	bx	lr

0800bdf8 <_ZSt18uninitialized_copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800be04:	2301      	movs	r3, #1
 800be06:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	68b9      	ldr	r1, [r7, #8]
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f000 f844 	bl	800be9a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP11ExtiHandlerES5_EET0_T_S8_S7_>
 800be12:	4603      	mov	r3, r0
    }
 800be14:	4618      	mov	r0, r3
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ExtiHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
 800be26:	bf00      	nop
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc80      	pop	{r7}
 800be2e:	4770      	bx	lr

0800be30 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800be3c:	68b8      	ldr	r0, [r7, #8]
 800be3e:	f008 fb79 	bl	8014534 <_ZdlPv>
      }
 800be42:	bf00      	nop
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b086      	sub	sp, #24
 800be4e:	af00      	add	r7, sp, #0
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	60b9      	str	r1, [r7, #8]
 800be54:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	109b      	asrs	r3, r3, #2
 800be5e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d006      	beq.n	800be74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	461a      	mov	r2, r3
 800be6c:	68f9      	ldr	r1, [r7, #12]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f00b fd60 	bl	8017934 <memmove>
	  return __result + _Num;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	4413      	add	r3, r2
	}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800be8c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800be90:	4618      	mov	r0, r3
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	bc80      	pop	{r7}
 800be98:	4770      	bx	lr

0800be9a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP11ExtiHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	60f8      	str	r0, [r7, #12]
 800bea2:	60b9      	str	r1, [r7, #8]
 800bea4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	68b9      	ldr	r1, [r7, #8]
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	f000 f805 	bl	800beba <_ZSt4copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>
 800beb0:	4603      	mov	r3, r0
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <_ZSt4copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800beba:	b590      	push	{r4, r7, lr}
 800bebc:	b085      	sub	sp, #20
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	60f8      	str	r0, [r7, #12]
 800bec2:	60b9      	str	r1, [r7, #8]
 800bec4:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 f80f 	bl	800beea <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800becc:	4604      	mov	r4, r0
 800bece:	68b8      	ldr	r0, [r7, #8]
 800bed0:	f000 f80b 	bl	800beea <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800bed4:	4603      	mov	r3, r0
	       __result));
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	4619      	mov	r1, r3
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 f816 	bl	800bf0c <_ZSt14__copy_move_a2ILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800bee0:	4603      	mov	r3, r0
    }
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd90      	pop	{r4, r7, pc}

0800beea <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800beea:	b580      	push	{r7, lr}
 800beec:	b082      	sub	sp, #8
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800bef2:	1d3b      	adds	r3, r7, #4
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 f825 	bl	800bf44 <_ZNKSt13move_iteratorIPP11ExtiHandlerE4baseEv>
 800befa:	4603      	mov	r3, r0
 800befc:	4618      	mov	r0, r3
 800befe:	f000 f82c 	bl	800bf5a <_ZSt12__miter_baseIPP11ExtiHandlerET_S3_>
 800bf02:	4603      	mov	r3, r0
 800bf04:	4618      	mov	r0, r3
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <_ZSt14__copy_move_a2ILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800bf0c:	b5b0      	push	{r4, r5, r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f828 	bl	800bf6e <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800bf1e:	4604      	mov	r4, r0
 800bf20:	68b8      	ldr	r0, [r7, #8]
 800bf22:	f000 f824 	bl	800bf6e <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800bf26:	4605      	mov	r5, r0
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f820 	bl	800bf6e <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800bf2e:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800bf30:	461a      	mov	r2, r3
 800bf32:	4629      	mov	r1, r5
 800bf34:	4620      	mov	r0, r4
 800bf36:	f7ff ff0b 	bl	800bd50 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800bf3a:	4603      	mov	r3, r0
    }
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bdb0      	pop	{r4, r5, r7, pc}

0800bf44 <_ZNKSt13move_iteratorIPP11ExtiHandlerE4baseEv>:
      base() const
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4618      	mov	r0, r3
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bc80      	pop	{r7}
 800bf58:	4770      	bx	lr

0800bf5a <_ZSt12__miter_baseIPP11ExtiHandlerET_S3_>:
    __miter_base(_Iterator __it)
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
    { return __it; }
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4618      	mov	r0, r3
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bc80      	pop	{r7}
 800bf6c:	4770      	bx	lr

0800bf6e <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>:
    __niter_base(_Iterator __it)
 800bf6e:	b480      	push	{r7}
 800bf70:	b083      	sub	sp, #12
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
    { return __it; }
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bc80      	pop	{r7}
 800bf80:	4770      	bx	lr

0800bf82 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800bf82:	b480      	push	{r7}
 800bf84:	b083      	sub	sp, #12
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	bfb8      	it	lt
 800bf90:	425b      	neglt	r3, r3
 800bf92:	4618      	mov	r0, r3
 800bf94:	370c      	adds	r7, #12
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bc80      	pop	{r7}
 800bf9a:	4770      	bx	lr

0800bf9c <_ZN14FFBWheelConfig7isequalERS_>:
	uint8_t damperGain = 100;
	uint8_t inertiaGain = 100;
	uint8_t frictionGain = 100;
	uint8_t totalGain = 100;

	bool isequal(FFBWheelConfig& conf)
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
	{
		if(	check == conf.check &&
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	781a      	ldrb	r2, [r3, #0]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d17f      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			axes == conf.axes &&
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	785a      	ldrb	r2, [r3, #1]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	785b      	ldrb	r3, [r3, #1]
		if(	check == conf.check &&
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d179      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			I2CButtons == conf.I2CButtons &&
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	789a      	ldrb	r2, [r3, #2]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	789b      	ldrb	r3, [r3, #2]
			axes == conf.axes &&
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d173      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			nLocalButtons == conf.nLocalButtons &&
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	78da      	ldrb	r2, [r3, #3]
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	78db      	ldrb	r3, [r3, #3]
			I2CButtons == conf.I2CButtons &&
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d16d      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			degreesOfRotation == conf.degreesOfRotation &&
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	889a      	ldrh	r2, [r3, #4]
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	889b      	ldrh	r3, [r3, #4]
			nLocalButtons == conf.nLocalButtons &&
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d167      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			power == conf.power &&
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	88da      	ldrh	r2, [r3, #6]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	88db      	ldrh	r3, [r3, #6]
			degreesOfRotation == conf.degreesOfRotation &&
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d161      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			endstop_gain == conf.endstop_gain &&
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	899a      	ldrh	r2, [r3, #12]
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	899b      	ldrh	r3, [r3, #12]
			power == conf.power &&
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d15b      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			encoderPPR == conf.encoderPPR &&
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	891a      	ldrh	r2, [r3, #8]
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	891b      	ldrh	r3, [r3, #8]
			endstop_gain == conf.endstop_gain &&
 800c002:	429a      	cmp	r2, r3
 800c004:	d155      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			maxAdcCount == conf.maxAdcCount &&
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	7a9a      	ldrb	r2, [r3, #10]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	7a9b      	ldrb	r3, [r3, #10]
			encoderPPR == conf.encoderPPR &&
 800c00e:	429a      	cmp	r2, r3
 800c010:	d14f      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			inverted == conf.inverted &&
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	7ada      	ldrb	r2, [r3, #11]
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	7adb      	ldrb	r3, [r3, #11]
			maxAdcCount == conf.maxAdcCount &&
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d149      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			constantGain == conf.constantGain &&
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7b9a      	ldrb	r2, [r3, #14]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	7b9b      	ldrb	r3, [r3, #14]
			inverted == conf.inverted &&
 800c026:	429a      	cmp	r2, r3
 800c028:	d143      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			rampGain == conf.rampGain &&
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	7bda      	ldrb	r2, [r3, #15]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	7bdb      	ldrb	r3, [r3, #15]
			constantGain == conf.constantGain &&
 800c032:	429a      	cmp	r2, r3
 800c034:	d13d      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			squareGain == conf.squareGain &&
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	7c1a      	ldrb	r2, [r3, #16]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	7c1b      	ldrb	r3, [r3, #16]
			rampGain == conf.rampGain &&
 800c03e:	429a      	cmp	r2, r3
 800c040:	d137      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			sinGain == conf.sinGain &&
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	7c5a      	ldrb	r2, [r3, #17]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	7c5b      	ldrb	r3, [r3, #17]
			squareGain == conf.squareGain &&
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d131      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			triangleGain == conf.triangleGain &&
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	7c9a      	ldrb	r2, [r3, #18]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	7c9b      	ldrb	r3, [r3, #18]
			sinGain == conf.sinGain &&
 800c056:	429a      	cmp	r2, r3
 800c058:	d12b      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			sawToothDownGain == conf.sawToothDownGain &&
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	7cda      	ldrb	r2, [r3, #19]
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	7cdb      	ldrb	r3, [r3, #19]
			triangleGain == conf.triangleGain &&
 800c062:	429a      	cmp	r2, r3
 800c064:	d125      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			sawToothUpGain == conf.sawToothUpGain &&
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	7d1a      	ldrb	r2, [r3, #20]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	7d1b      	ldrb	r3, [r3, #20]
			sawToothDownGain == conf.sawToothDownGain &&
 800c06e:	429a      	cmp	r2, r3
 800c070:	d11f      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			springGain == conf.springGain &&
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	7d5a      	ldrb	r2, [r3, #21]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	7d5b      	ldrb	r3, [r3, #21]
			sawToothUpGain == conf.sawToothUpGain &&
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d119      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			damperGain == conf.damperGain &&
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	7d9a      	ldrb	r2, [r3, #22]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	7d9b      	ldrb	r3, [r3, #22]
			springGain == conf.springGain &&
 800c086:	429a      	cmp	r2, r3
 800c088:	d113      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			inertiaGain == conf.inertiaGain &&
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	7dda      	ldrb	r2, [r3, #23]
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	7ddb      	ldrb	r3, [r3, #23]
			damperGain == conf.damperGain &&
 800c092:	429a      	cmp	r2, r3
 800c094:	d10d      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			frictionGain == conf.frictionGain &&
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	7e1a      	ldrb	r2, [r3, #24]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	7e1b      	ldrb	r3, [r3, #24]
			inertiaGain == conf.inertiaGain &&
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d107      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			totalGain == conf.totalGain)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	7e5a      	ldrb	r2, [r3, #25]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	7e5b      	ldrb	r3, [r3, #25]
			frictionGain == conf.frictionGain &&
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d101      	bne.n	800c0b2 <_ZN14FFBWheelConfig7isequalERS_+0x116>
			return true;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e000      	b.n	800c0b4 <_ZN14FFBWheelConfig7isequalERS_+0x118>
		else
			return false;
 800c0b2:	2300      	movs	r3, #0
	}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bc80      	pop	{r7}
 800c0bc:	4770      	bx	lr

0800c0be <_ZN14FFBWheelConfigC1Ev>:
struct FFBWheelConfig{
 800c0be:	b480      	push	{r7}
 800c0c0:	b083      	sub	sp, #12
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2257      	movs	r2, #87	; 0x57
 800c0ca:	701a      	strb	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2207      	movs	r2, #7
 800c0d0:	705a      	strb	r2, [r3, #1]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	709a      	strb	r2, [r3, #2]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	70da      	strb	r2, [r3, #3]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800c0e4:	809a      	strh	r2, [r3, #4]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c0ec:	80da      	strh	r2, [r3, #6]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c0f4:	811a      	strh	r2, [r3, #8]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2208      	movs	r2, #8
 800c0fa:	729a      	strb	r2, [r3, #10]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	72da      	strb	r2, [r3, #11]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2214      	movs	r2, #20
 800c106:	819a      	strh	r2, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2264      	movs	r2, #100	; 0x64
 800c10c:	739a      	strb	r2, [r3, #14]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2264      	movs	r2, #100	; 0x64
 800c112:	73da      	strb	r2, [r3, #15]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2264      	movs	r2, #100	; 0x64
 800c118:	741a      	strb	r2, [r3, #16]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2264      	movs	r2, #100	; 0x64
 800c11e:	745a      	strb	r2, [r3, #17]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2264      	movs	r2, #100	; 0x64
 800c124:	749a      	strb	r2, [r3, #18]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2264      	movs	r2, #100	; 0x64
 800c12a:	74da      	strb	r2, [r3, #19]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2264      	movs	r2, #100	; 0x64
 800c130:	751a      	strb	r2, [r3, #20]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2264      	movs	r2, #100	; 0x64
 800c136:	755a      	strb	r2, [r3, #21]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2264      	movs	r2, #100	; 0x64
 800c13c:	759a      	strb	r2, [r3, #22]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2264      	movs	r2, #100	; 0x64
 800c142:	75da      	strb	r2, [r3, #23]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2264      	movs	r2, #100	; 0x64
 800c148:	761a      	strb	r2, [r3, #24]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2264      	movs	r2, #100	; 0x64
 800c14e:	765a      	strb	r2, [r3, #25]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4618      	mov	r0, r3
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	bc80      	pop	{r7}
 800c15a:	4770      	bx	lr

0800c15c <_ZN11reportHID_tC1Ev>:
#define HID_ENABLE_ACTUATORS_MASK 0xFD
#define HID_EFFECT_PLAYING 0x10

// Only include these for cpp
#ifdef __cplusplus
struct  __attribute__((__packed__)) reportHID_t {
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	701a      	strb	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	705a      	strb	r2, [r3, #1]
 800c170:	2200      	movs	r2, #0
 800c172:	709a      	strb	r2, [r3, #2]
 800c174:	2200      	movs	r2, #0
 800c176:	70da      	strb	r2, [r3, #3]
 800c178:	2200      	movs	r2, #0
 800c17a:	711a      	strb	r2, [r3, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	715a      	strb	r2, [r3, #5]
 800c182:	2200      	movs	r2, #0
 800c184:	719a      	strb	r2, [r3, #6]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	71da      	strb	r2, [r3, #7]
 800c18c:	2200      	movs	r2, #0
 800c18e:	721a      	strb	r2, [r3, #8]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	725a      	strb	r2, [r3, #9]
 800c196:	2200      	movs	r2, #0
 800c198:	729a      	strb	r2, [r3, #10]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	72da      	strb	r2, [r3, #11]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	731a      	strb	r2, [r3, #12]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	735a      	strb	r2, [r3, #13]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	739a      	strb	r2, [r3, #14]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	73da      	strb	r2, [r3, #15]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	741a      	strb	r2, [r3, #16]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	745a      	strb	r2, [r3, #17]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	749a      	strb	r2, [r3, #18]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bc80      	pop	{r7}
 800c1cc:	4770      	bx	lr
	...

0800c1d0 <_ZN8FFBWheelC1Ev>:
#include "FFBWheel.h"
#include "FFBWheel_usb_init.h"
// TODO class type for parser? (Simhub for example)
//////////////////////////////////////////////

FFBWheel::FFBWheel() {
 800c1d0:	b590      	push	{r4, r7, lr}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fb fffa 	bl	80081d4 <_ZN10AdcHandlerC1Ev>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f004 fa19 	bl	801061c <_ZN12TimerHandlerC1Ev>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fa84 	bl	800a6fc <_ZN14CommandHandlerC1Ev>
 800c1f4:	4a3b      	ldr	r2, [pc, #236]	; (800c2e4 <_ZN8FFBWheelC1Ev+0x114>)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	4a3b      	ldr	r2, [pc, #236]	; (800c2e8 <_ZN8FFBWheelC1Ev+0x118>)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	605a      	str	r2, [r3, #4]
 800c200:	4a3a      	ldr	r2, [pc, #232]	; (800c2ec <_ZN8FFBWheelC1Ev+0x11c>)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	609a      	str	r2, [r3, #8]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	735a      	strb	r2, [r3, #13]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	739a      	strb	r2, [r3, #14]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	73da      	strb	r2, [r3, #15]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3310      	adds	r3, #16
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fc fd67 	bl	8008cf0 <_ZN9CmdParserC1Ev>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	64da      	str	r2, [r3, #76]	; 0x4c
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	651a      	str	r2, [r3, #80]	; 0x50
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	3354      	adds	r3, #84	; 0x54
 800c232:	4618      	mov	r0, r3
 800c234:	f7ff ff43 	bl	800c0be <_ZN14FFBWheelConfigC1Ev>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	671a      	str	r2, [r3, #112]	; 0x70
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	675a      	str	r2, [r3, #116]	; 0x74
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	679a      	str	r2, [r3, #120]	; 0x78
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3388      	adds	r3, #136	; 0x88
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff ff84 	bl	800c15c <_ZN11reportHID_tC1Ev>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c27a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f247 5230 	movw	r2, #30000	; 0x7530
 800c28c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	// Create HID FFB handler. Will receive all usb messages directly
	this->ffb = new HidFFB();
 800c298:	f640 3088 	movw	r0, #2952	; 0xb88
 800c29c:	f008 f930 	bl	8014500 <_Znwj>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	461c      	mov	r4, r3
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f003 f981 	bl	800f5ac <_ZN6HidFFBC1Ev>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	645c      	str	r4, [r3, #68]	; 0x44

	// Setup a timer
	extern TIM_HandleTypeDef htim3;
	this->timer_update = &htim3; // Timer setup with prescaler of sysclock
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a0f      	ldr	r2, [pc, #60]	; (800c2f0 <_ZN8FFBWheelC1Ev+0x120>)
 800c2b2:	649a      	str	r2, [r3, #72]	; 0x48
	this->timer_update->Instance->ARR = 250;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	22fa      	movs	r2, #250	; 0xfa
 800c2bc:	62da      	str	r2, [r3, #44]	; 0x2c
	this->timer_update->Instance->CR1 = 1;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(this->timer_update);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7f9 fd2a 	bl	8005d26 <HAL_TIM_Base_Start_IT>

	restoreFlash(); // Load parameters
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 f874 	bl	800c3c0 <_ZN8FFBWheel12restoreFlashEv>
}
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	370c      	adds	r7, #12
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd90      	pop	{r4, r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	0801920c 	.word	0x0801920c
 800c2e8:	08019228 	.word	0x08019228
 800c2ec:	0801923c 	.word	0x0801923c
 800c2f0:	200015e8 	.word	0x200015e8

0800c2f4 <_ZN8FFBWheelD1Ev>:

FFBWheel::~FFBWheel() {
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	4a1d      	ldr	r2, [pc, #116]	; (800c374 <_ZN8FFBWheelD1Ev+0x80>)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	4a1d      	ldr	r2, [pc, #116]	; (800c378 <_ZN8FFBWheelD1Ev+0x84>)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	605a      	str	r2, [r3, #4]
 800c308:	4a1c      	ldr	r2, [pc, #112]	; (800c37c <_ZN8FFBWheelD1Ev+0x88>)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	609a      	str	r2, [r3, #8]
	delete drv;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c312:	2b00      	cmp	r3, #0
 800c314:	d008      	beq.n	800c328 <_ZN8FFBWheelD1Ev+0x34>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3304      	adds	r3, #4
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4610      	mov	r0, r2
 800c326:	4798      	blx	r3
	delete enc;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d008      	beq.n	800c342 <_ZN8FFBWheelD1Ev+0x4e>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3304      	adds	r3, #4
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4610      	mov	r0, r2
 800c340:	4798      	blx	r3
FFBWheel::~FFBWheel() {
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	3310      	adds	r3, #16
 800c346:	4618      	mov	r0, r3
 800c348:	f7fc fcfc 	bl	8008d44 <_ZN9CmdParserD1Ev>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3308      	adds	r3, #8
 800c350:	4618      	mov	r0, r3
 800c352:	f7fe f9e7 	bl	800a724 <_ZN14CommandHandlerD1Ev>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3304      	adds	r3, #4
 800c35a:	4618      	mov	r0, r3
 800c35c:	f004 f976 	bl	801064c <_ZN12TimerHandlerD1Ev>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4618      	mov	r0, r3
 800c364:	f7fb ff4e 	bl	8008204 <_ZN10AdcHandlerD1Ev>
}
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4618      	mov	r0, r3
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	0801920c 	.word	0x0801920c
 800c378:	08019228 	.word	0x08019228
 800c37c:	0801923c 	.word	0x0801923c

0800c380 <_ZThn4_N8FFBWheelD1Ev>:


class FFBWheel: public AdcHandler, TimerHandler, CommandHandler{
public:
	FFBWheel();
	virtual ~FFBWheel();
 800c380:	f1a0 0004 	sub.w	r0, r0, #4
 800c384:	f7ff bfb6 	b.w	800c2f4 <_ZN8FFBWheelD1Ev>

0800c388 <_ZThn8_N8FFBWheelD1Ev>:
 800c388:	f1a0 0008 	sub.w	r0, r0, #8
 800c38c:	f7ff bfb2 	b.w	800c2f4 <_ZN8FFBWheelD1Ev>

0800c390 <_ZN8FFBWheelD0Ev>:
FFBWheel::~FFBWheel() {
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
}
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7ff ffab 	bl	800c2f4 <_ZN8FFBWheelD1Ev>
 800c39e:	21bc      	movs	r1, #188	; 0xbc
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f008 f8ab 	bl	80144fc <_ZdlPvj>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <_ZThn8_N8FFBWheelD0Ev>:
 800c3b0:	f1a0 0008 	sub.w	r0, r0, #8
 800c3b4:	f7ff bfec 	b.w	800c390 <_ZN8FFBWheelD0Ev>

0800c3b8 <_ZThn4_N8FFBWheelD0Ev>:
 800c3b8:	f1a0 0004 	sub.w	r0, r0, #4
 800c3bc:	f7ff bfe8 	b.w	800c390 <_ZN8FFBWheelD0Ev>

0800c3c0 <_ZN8FFBWheel12restoreFlashEv>:


void FFBWheel::restoreFlash(){
 800c3c0:	b5b0      	push	{r4, r5, r7, lr}
 800c3c2:	b08a      	sub	sp, #40	; 0x28
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6278      	str	r0, [r7, #36]	; 0x24

	conf = decodeConf();
 800c3c8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c3ca:	463b      	mov	r3, r7
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 fbf3 	bl	800cbb8 <_ZN8FFBWheel10decodeConfEv>
 800c3d2:	3454      	adds	r4, #84	; 0x54
 800c3d4:	463d      	mov	r5, r7
 800c3d6:	6828      	ldr	r0, [r5, #0]
 800c3d8:	6869      	ldr	r1, [r5, #4]
 800c3da:	68aa      	ldr	r2, [r5, #8]
 800c3dc:	68eb      	ldr	r3, [r5, #12]
 800c3de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3e0:	6928      	ldr	r0, [r5, #16]
 800c3e2:	6969      	ldr	r1, [r5, #20]
 800c3e4:	c403      	stmia	r4!, {r0, r1}
 800c3e6:	8b2b      	ldrh	r3, [r5, #24]
 800c3e8:	8023      	strh	r3, [r4, #0]
	conf.check= 0x57;
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ec:	2257      	movs	r2, #87	; 0x57
 800c3ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	drv = new MotorBTS7960();
 800c3f2:	2018      	movs	r0, #24
 800c3f4:	f008 f884 	bl	8014500 <_Znwj>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	461c      	mov	r4, r3
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f004 f883 	bl	8010508 <_ZN12MotorBTS7960C1Ev>
 800c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c404:	671c      	str	r4, [r3, #112]	; 0x70
	enc = new EncoderLocal();
 800c406:	201c      	movs	r0, #28
 800c408:	f008 f87a 	bl	8014500 <_Znwj>
 800c40c:	4603      	mov	r3, r0
 800c40e:	461c      	mov	r4, r3
 800c410:	4620      	mov	r0, r4
 800c412:	f7fe ff37 	bl	800b284 <_ZN12EncoderLocalC1Ev>
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	675c      	str	r4, [r3, #116]	; 0x74
	btns = new LocalButtons();
 800c41a:	2018      	movs	r0, #24
 800c41c:	f008 f870 	bl	8014500 <_Znwj>
 800c420:	4603      	mov	r3, r0
 800c422:	461c      	mov	r4, r3
 800c424:	4620      	mov	r0, r4
 800c426:	f003 ff6d 	bl	8010304 <_ZN12LocalButtonsC1Ev>
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	679c      	str	r4, [r3, #120]	; 0x78

	drv->start();
 800c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c432:	4618      	mov	r0, r3
 800c434:	f004 f8d0 	bl	80105d8 <_ZN12MotorBTS79605startEv>
	enc->setPpr(conf.encoderPPR);
 800c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c442:	4619      	mov	r1, r3
 800c444:	4610      	mov	r0, r2
 800c446:	f7ff f82d 	bl	800b4a4 <_ZN12EncoderLocal6setPprEm>
}
 800c44a:	bf00      	nop
 800c44c:	3728      	adds	r7, #40	; 0x28
 800c44e:	46bd      	mov	sp, r7
 800c450:	bdb0      	pop	{r4, r5, r7, pc}

0800c452 <_ZN8FFBWheel9saveFlashEv>:

// Saves parameters to flash
void FFBWheel::saveFlash(){
 800c452:	b580      	push	{r7, lr}
 800c454:	b090      	sub	sp, #64	; 0x40
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
	FFBWheelConfig savedconf = decodeConf();
 800c45a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 fbaa 	bl	800cbb8 <_ZN8FFBWheel10decodeConfEv>
	if(savedconf.isequal(conf))
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800c46a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c46e:	4611      	mov	r1, r2
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff fd93 	bl	800bf9c <_ZN14FFBWheelConfig7isequalERS_>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f040 8099 	bne.w	800c5b0 <_ZN8FFBWheel9saveFlashEv+0x15e>
		return;
	uint32_t buf[7] = {0};
 800c47e:	f107 0308 	add.w	r3, r7, #8
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	605a      	str	r2, [r3, #4]
 800c488:	609a      	str	r2, [r3, #8]
 800c48a:	60da      	str	r2, [r3, #12]
 800c48c:	611a      	str	r2, [r3, #16]
 800c48e:	615a      	str	r2, [r3, #20]
 800c490:	619a      	str	r2, [r3, #24]
	buf[0] =(uint8_t)conf.check & 0xff;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c498:	60bb      	str	r3, [r7, #8]
	buf[0] |= ((uint8_t)conf.axes & 0xff) << 8;
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800c4a2:	0212      	lsls	r2, r2, #8
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	60bb      	str	r3, [r7, #8]
	buf[0] |= ((uint8_t)conf.I2CButtons & 0xff) << 16;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800c4b0:	0412      	lsls	r2, r2, #16
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60bb      	str	r3, [r7, #8]
	buf[0] |= ((uint8_t)conf.nLocalButtons & 0xff) << 24;
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	f892 2057 	ldrb.w	r2, [r2, #87]	; 0x57
 800c4be:	0612      	lsls	r2, r2, #24
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	60bb      	str	r3, [r7, #8]

	buf[1] = (uint16_t)conf.degreesOfRotation & 0xffff;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c4ca:	60fb      	str	r3, [r7, #12]
	buf[1] |= ((uint16_t)conf.power & 0xffff) << 16;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 800c4d4:	0412      	lsls	r2, r2, #16
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	60fb      	str	r3, [r7, #12]

	buf[2] = (uint16_t)conf.endstop_gain & 0xffff;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4e0:	613b      	str	r3, [r7, #16]
	buf[2] |= ((uint16_t)conf.encoderPPR & 0xffff) << 16;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800c4ea:	0412      	lsls	r2, r2, #16
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	613b      	str	r3, [r7, #16]

	buf[3] = (uint8_t)conf.maxAdcCount & 0xff;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800c4f6:	617b      	str	r3, [r7, #20]
	buf[3] |= ((uint8_t)conf.inverted & 0xff) << 8;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 800c500:	0212      	lsls	r2, r2, #8
 800c502:	4313      	orrs	r3, r2
 800c504:	617b      	str	r3, [r7, #20]
	buf[3] |= ((uint8_t)conf.constantGain & 0xff) << 16;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 800c50e:	0412      	lsls	r2, r2, #16
 800c510:	4313      	orrs	r3, r2
 800c512:	617b      	str	r3, [r7, #20]
	buf[3] |= ((uint8_t)conf.rampGain & 0xff) << 24;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	f892 2063 	ldrb.w	r2, [r2, #99]	; 0x63
 800c51c:	0612      	lsls	r2, r2, #24
 800c51e:	4313      	orrs	r3, r2
 800c520:	617b      	str	r3, [r7, #20]

	buf[4] = (uint8_t)conf.squareGain & 0xff;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800c528:	61bb      	str	r3, [r7, #24]
	buf[4] |= ((uint8_t)conf.sinGain & 0xff) << 8;
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	f892 2065 	ldrb.w	r2, [r2, #101]	; 0x65
 800c532:	0212      	lsls	r2, r2, #8
 800c534:	4313      	orrs	r3, r2
 800c536:	61bb      	str	r3, [r7, #24]
	buf[4] |= ((uint8_t)conf.triangleGain & 0xff) << 16;
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 800c540:	0412      	lsls	r2, r2, #16
 800c542:	4313      	orrs	r3, r2
 800c544:	61bb      	str	r3, [r7, #24]
	buf[4] |= ((uint8_t)conf.sawToothDownGain & 0xff) << 24;
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	f892 2067 	ldrb.w	r2, [r2, #103]	; 0x67
 800c54e:	0612      	lsls	r2, r2, #24
 800c550:	4313      	orrs	r3, r2
 800c552:	61bb      	str	r3, [r7, #24]

	buf[5] = (uint8_t)conf.sawToothUpGain & 0xff;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c55a:	61fb      	str	r3, [r7, #28]
	buf[5] |= ((uint8_t)conf.springGain & 0xff) << 8;
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	f892 2069 	ldrb.w	r2, [r2, #105]	; 0x69
 800c564:	0212      	lsls	r2, r2, #8
 800c566:	4313      	orrs	r3, r2
 800c568:	61fb      	str	r3, [r7, #28]
	buf[5] |= ((uint8_t)conf.damperGain & 0xff) << 16;
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 800c572:	0412      	lsls	r2, r2, #16
 800c574:	4313      	orrs	r3, r2
 800c576:	61fb      	str	r3, [r7, #28]
	buf[5] |= ((uint8_t)conf.inertiaGain & 0xff) << 24;
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	f892 206b 	ldrb.w	r2, [r2, #107]	; 0x6b
 800c580:	0612      	lsls	r2, r2, #24
 800c582:	4313      	orrs	r3, r2
 800c584:	61fb      	str	r3, [r7, #28]

	buf[6] = (uint8_t)conf.frictionGain & 0xff;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c58c:	623b      	str	r3, [r7, #32]
	buf[6] |= ((uint8_t)conf.totalGain & 0xff) << 8;
 800c58e:	6a3b      	ldr	r3, [r7, #32]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 800c596:	0212      	lsls	r2, r2, #8
 800c598:	4313      	orrs	r3, r2
 800c59a:	623b      	str	r3, [r7, #32]

	EE_Format();
 800c59c:	f7f4 fe0e 	bl	80011bc <EE_Format>
	EE_Writes(0x00, 7, buf);
 800c5a0:	f107 0308 	add.w	r3, r7, #8
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	2107      	movs	r1, #7
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	f7f4 fe5f 	bl	800126c <EE_Writes>
 800c5ae:	e000      	b.n	800c5b2 <_ZN8FFBWheel9saveFlashEv+0x160>
		return;
 800c5b0:	bf00      	nop
}
 800c5b2:	3740      	adds	r7, #64	; 0x40
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <_ZN8FFBWheel6updateEv>:

/*
 * Periodical update method. Called from main loop
 */
void FFBWheel::update(){
 800c5b8:	b590      	push	{r4, r7, lr}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
	int16_t lasttorque = endstopTorque;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c4:	81bb      	strh	r3, [r7, #12]
	bool updateTorque = false;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]

	if(drv == nullptr || enc == nullptr){
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d003      	beq.n	800c5da <_ZN8FFBWheel6updateEv+0x22>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d102      	bne.n	800c5e0 <_ZN8FFBWheel6updateEv+0x28>
		pulseSysLed();
 800c5da:	f005 f9e9 	bl	80119b0 <_Z11pulseSysLedv>
		return;
 800c5de:	e0df      	b.n	800c7a0 <_ZN8FFBWheel6updateEv+0x1e8>
	}

	if(usb_update_flag || update_flag){
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7b5b      	ldrb	r3, [r3, #13]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d103      	bne.n	800c5f0 <_ZN8FFBWheel6updateEv+0x38>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7b9b      	ldrb	r3, [r3, #14]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d030      	beq.n	800c652 <_ZN8FFBWheel6updateEv+0x9a>

		torque = 0;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	64da      	str	r2, [r3, #76]	; 0x4c
		scaledEnc = getEncValue(enc, conf.degreesOfRotation);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c600:	461a      	mov	r2, r3
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 f96e 	bl	800c8e4 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>
 800c608:	4602      	mov	r2, r0
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		update_flag = false;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	739a      	strb	r2, [r3, #14]

		if(abs(scaledEnc) > 0xffff){
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7ff fcb0 	bl	800bf82 <_ZSt3absl>
 800c622:	4602      	mov	r2, r0
 800c624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c628:	429a      	cmp	r2, r3
 800c62a:	bfcc      	ite	gt
 800c62c:	2301      	movgt	r3, #1
 800c62e:	2300      	movle	r3, #0
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d006      	beq.n	800c644 <_ZN8FFBWheel6updateEv+0x8c>
			drv->stop();
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c63a:	4618      	mov	r0, r3
 800c63c:	f003 ffd8 	bl	80105f0 <_ZN12MotorBTS79604stopEv>
			pulseSysLed();
 800c640:	f005 f9b6 	bl	80119b0 <_Z11pulseSysLedv>
		}
		endstopTorque = updateEndstop();
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 f8b1 	bl	800c7ac <_ZN8FFBWheel13updateEndstopEv>
 800c64a:	4603      	mov	r3, r0
 800c64c:	461a      	mov	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	651a      	str	r2, [r3, #80]	; 0x50

	}
	if(usb_update_flag){
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	7b5b      	ldrb	r3, [r3, #13]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d065      	beq.n	800c726 <_ZN8FFBWheel6updateEv+0x16e>
		speed = scaledEnc - lastScaledEnc;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c666:	1ad2      	subs	r2, r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		lastScaledEnc = scaledEnc;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		usb_update_flag = false;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	735a      	strb	r2, [r3, #13]
		torque = ffb->calculateEffects(scaledEnc,1);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c68a:	2201      	movs	r2, #1
 800c68c:	4619      	mov	r1, r3
 800c68e:	f003 fc5b 	bl	800ff48 <_ZN6HidFFB16calculateEffectsElh>
 800c692:	4602      	mov	r2, r0
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	64da      	str	r2, [r3, #76]	; 0x4c

		if(abs(torque) >= 0x7fff){
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7ff fc70 	bl	800bf82 <_ZSt3absl>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	bfcc      	ite	gt
 800c6ac:	2301      	movgt	r3, #1
 800c6ae:	2300      	movle	r3, #0
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <_ZN8FFBWheel6updateEv+0x102>
			pulseSysLed();
 800c6b6:	f005 f97b 	bl	80119b0 <_Z11pulseSysLedv>
		}
		if(endstopTorque == 0 || (endstopTorque > 0 && torque > 0) || (endstopTorque < 0 && torque < 0))
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00f      	beq.n	800c6e2 <_ZN8FFBWheel6updateEv+0x12a>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	dd03      	ble.n	800c6d2 <_ZN8FFBWheel6updateEv+0x11a>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	dc07      	bgt.n	800c6e2 <_ZN8FFBWheel6updateEv+0x12a>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	da22      	bge.n	800c720 <_ZN8FFBWheel6updateEv+0x168>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	da1e      	bge.n	800c720 <_ZN8FFBWheel6updateEv+0x168>
		{
			torque *= /*0.8**/((float)this->conf.power / (float)0x7fff); // Scale for power
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7f4 fad8 	bl	8000c9c <__aeabi_i2f>
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7f4 facd 	bl	8000c94 <__aeabi_ui2f>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	492a      	ldr	r1, [pc, #168]	; (800c7a8 <_ZN8FFBWheel6updateEv+0x1f0>)
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7f4 fbd4 	bl	8000eac <__aeabi_fdiv>
 800c704:	4603      	mov	r3, r0
 800c706:	4619      	mov	r1, r3
 800c708:	4620      	mov	r0, r4
 800c70a:	f7f4 fb1b 	bl	8000d44 <__aeabi_fmul>
 800c70e:	4603      	mov	r3, r0
 800c710:	4618      	mov	r0, r3
 800c712:	f7f4 fcf3 	bl	80010fc <__aeabi_f2iz>
 800c716:	4602      	mov	r2, r0
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	64da      	str	r2, [r3, #76]	; 0x4c
			updateTorque = true;
 800c71c:	2301      	movs	r3, #1
 800c71e:	73fb      	strb	r3, [r7, #15]
		}
		this->send_report();
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 f925 	bl	800c970 <_ZN8FFBWheel11send_reportEv>
	}



	if(endstopTorque!=lasttorque || updateTorque){
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c72a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d102      	bne.n	800c738 <_ZN8FFBWheel6updateEv+0x180>
 800c732:	7bfb      	ldrb	r3, [r7, #15]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d033      	beq.n	800c7a0 <_ZN8FFBWheel6updateEv+0x1e8>
		// Update torque
		torque = torque+endstopTorque;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c740:	441a      	add	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	64da      	str	r2, [r3, #76]	; 0x4c
		//Invert direction for now
		torque = clip<int32_t,int16_t>(torque, -this->conf.power, this->conf.power);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c750:	425b      	negs	r3, r3
 800c752:	b29b      	uxth	r3, r3
 800c754:	b219      	sxth	r1, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c75c:	b21b      	sxth	r3, r3
 800c75e:	461a      	mov	r2, r3
 800c760:	f000 fae0 	bl	800cd24 <_Z4clipIlsET_S0_T0_S1_>
 800c764:	4602      	mov	r2, r0
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	64da      	str	r2, [r3, #76]	; 0x4c
		if(abs(torque) == conf.power){
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c76e:	4618      	mov	r0, r3
 800c770:	f7ff fc07 	bl	800bf82 <_ZSt3absl>
 800c774:	4602      	mov	r2, r0
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c77c:	429a      	cmp	r2, r3
 800c77e:	bf0c      	ite	eq
 800c780:	2301      	moveq	r3, #1
 800c782:	2300      	movne	r3, #0
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <_ZN8FFBWheel6updateEv+0x1d6>
			pulseSysLed();
 800c78a:	f005 f911 	bl	80119b0 <_Z11pulseSysLedv>
		}
		drv->turn(torque);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c796:	b21b      	sxth	r3, r3
 800c798:	4619      	mov	r1, r3
 800c79a:	4610      	mov	r0, r2
 800c79c:	f003 fe74 	bl	8010488 <_ZN12MotorBTS79604turnEs>
	}
}
 800c7a0:	3714      	adds	r7, #20
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd90      	pop	{r4, r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	46fffe00 	.word	0x46fffe00

0800c7ac <_ZN8FFBWheel13updateEndstopEv>:


int16_t FFBWheel::updateEndstop(){
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
	int8_t clipdir = cliptest<int32_t,int32_t>(lastScaledEnc, -0x7fff, 0x7fff);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c7ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c7be:	491e      	ldr	r1, [pc, #120]	; (800c838 <_ZN8FFBWheel13updateEndstopEv+0x8c>)
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 faca 	bl	800cd5a <_Z8cliptestIllEaT_T0_S1_>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73fb      	strb	r3, [r7, #15]
	if(clipdir == 0){
 800c7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d101      	bne.n	800c7d6 <_ZN8FFBWheel13updateEndstopEv+0x2a>
		return 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	e02c      	b.n	800c830 <_ZN8FFBWheel13updateEndstopEv+0x84>
	}
	int32_t addtorque = 0;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60bb      	str	r3, [r7, #8]

	addtorque += clip<int32_t,int32_t>(abs(lastScaledEnc)-0x7fff,-0x7fff,0x7fff);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7ff fbce 	bl	800bf82 <_ZSt3absl>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c7ec:	3b7f      	subs	r3, #127	; 0x7f
 800c7ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c7f2:	4911      	ldr	r1, [pc, #68]	; (800c838 <_ZN8FFBWheel13updateEndstopEv+0x8c>)
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f000 fac9 	bl	800cd8c <_Z4clipIllET_S0_T0_S1_>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	4413      	add	r3, r2
 800c800:	60bb      	str	r3, [r7, #8]
	addtorque *= conf.endstop_gain;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c808:	461a      	mov	r2, r3
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	fb02 f303 	mul.w	r3, r2, r3
 800c810:	60bb      	str	r3, [r7, #8]
	addtorque *= -clipdir;
 800c812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c816:	425a      	negs	r2, r3
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	fb02 f303 	mul.w	r3, r2, r3
 800c81e:	60bb      	str	r3, [r7, #8]


	return clip<int32_t,int32_t>(addtorque,-0x7fff,0x7fff);
 800c820:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c824:	4904      	ldr	r1, [pc, #16]	; (800c838 <_ZN8FFBWheel13updateEndstopEv+0x8c>)
 800c826:	68b8      	ldr	r0, [r7, #8]
 800c828:	f000 fab0 	bl	800cd8c <_Z4clipIllET_S0_T0_S1_>
 800c82c:	4603      	mov	r3, r0
 800c82e:	b21b      	sxth	r3, r3
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	ffff8001 	.word	0xffff8001

0800c83c <_ZN8FFBWheel6adcUpdEPVm>:

void FFBWheel::adcUpd(volatile uint32_t* ADC_BUF){
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0;i<ADC_PINS;i++)
 800c846:	2300      	movs	r3, #0
 800c848:	73fb      	strb	r3, [r7, #15]
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d813      	bhi.n	800c878 <_ZN8FFBWheel6adcUpdEPVm+0x3c>
	{
		this->adc_buf2[i] += ADC_BUF[i+ADC_CHAN_FPIN];
 800c850:	7bfb      	ldrb	r3, [r7, #15]
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	4413      	add	r3, r2
 800c858:	6819      	ldr	r1, [r3, #0]
 800c85a:	7bfa      	ldrb	r2, [r7, #15]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	3220      	adds	r2, #32
 800c860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c864:	7bfa      	ldrb	r2, [r7, #15]
 800c866:	4419      	add	r1, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	3220      	adds	r2, #32
 800c86c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0;i<ADC_PINS;i++)
 800c870:	7bfb      	ldrb	r3, [r7, #15]
 800c872:	3301      	adds	r3, #1
 800c874:	73fb      	strb	r3, [r7, #15]
 800c876:	e7e8      	b.n	800c84a <_ZN8FFBWheel6adcUpdEPVm+0xe>
	}
	adcCount++;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7bdb      	ldrb	r3, [r3, #15]
 800c87c:	3301      	adds	r3, #1
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	73da      	strb	r2, [r3, #15]
	if(adcCount >= conf.maxAdcCount)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	7bda      	ldrb	r2, [r3, #15]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800c88e:	429a      	cmp	r2, r3
 800c890:	d323      	bcc.n	800c8da <_ZN8FFBWheel6adcUpdEPVm+0x9e>
	{
		for(uint8_t i = 0;i<ADC_PINS;i++)
 800c892:	2300      	movs	r3, #0
 800c894:	73bb      	strb	r3, [r7, #14]
 800c896:	7bbb      	ldrb	r3, [r7, #14]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d81b      	bhi.n	800c8d4 <_ZN8FFBWheel6adcUpdEPVm+0x98>
		{
			this->adc_buf[i] = this->adc_buf2[i]/conf.maxAdcCount;
 800c89c:	7bba      	ldrb	r2, [r7, #14]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3220      	adds	r2, #32
 800c8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 800c8ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8b0:	7bbb      	ldrb	r3, [r7, #14]
 800c8b2:	b291      	uxth	r1, r2
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	333c      	adds	r3, #60	; 0x3c
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	4413      	add	r3, r2
 800c8bc:	460a      	mov	r2, r1
 800c8be:	809a      	strh	r2, [r3, #4]
			this->adc_buf2[i]= 0;
 800c8c0:	7bba      	ldrb	r2, [r7, #14]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3220      	adds	r2, #32
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint8_t i = 0;i<ADC_PINS;i++)
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	73bb      	strb	r3, [r7, #14]
 800c8d2:	e7e0      	b.n	800c896 <_ZN8FFBWheel6adcUpdEPVm+0x5a>
		}
		adcCount = 0;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	73da      	strb	r2, [r3, #15]
	}

}
 800c8da:	bf00      	nop
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bc80      	pop	{r7}
 800c8e2:	4770      	bx	lr

0800c8e4 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>:

int32_t FFBWheel::getEncValue(EncoderLocal* enc,uint16_t degrees){
 800c8e4:	b590      	push	{r4, r7, lr}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	80fb      	strh	r3, [r7, #6]
	if(enc == nullptr){
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d102      	bne.n	800c8fe <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x1a>
		return 0x7fff; // Return center if no encoder present
 800c8f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800c8fc:	e02f      	b.n	800c95e <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x7a>
	}
	float angle = 360.0*((float)enc->getPos()/(float)enc->getPosCpr());
 800c8fe:	68b8      	ldr	r0, [r7, #8]
 800c900:	f7fe fd36 	bl	800b370 <_ZN12EncoderLocal6getPosEv>
 800c904:	4603      	mov	r3, r0
 800c906:	4618      	mov	r0, r3
 800c908:	f7f4 f9c8 	bl	8000c9c <__aeabi_i2f>
 800c90c:	4604      	mov	r4, r0
 800c90e:	68b8      	ldr	r0, [r7, #8]
 800c910:	f7fe fdbd 	bl	800b48e <_ZN12EncoderLocal9getPosCprEv>
 800c914:	4603      	mov	r3, r0
 800c916:	4618      	mov	r0, r3
 800c918:	f7f4 f9bc 	bl	8000c94 <__aeabi_ui2f>
 800c91c:	4603      	mov	r3, r0
 800c91e:	4619      	mov	r1, r3
 800c920:	4620      	mov	r0, r4
 800c922:	f7f4 fac3 	bl	8000eac <__aeabi_fdiv>
 800c926:	4603      	mov	r3, r0
 800c928:	490f      	ldr	r1, [pc, #60]	; (800c968 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x84>)
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7f4 fa0a 	bl	8000d44 <__aeabi_fmul>
 800c930:	4603      	mov	r3, r0
 800c932:	617b      	str	r3, [r7, #20]
	int32_t val = (0xffff / (float)degrees) * angle;
 800c934:	88fb      	ldrh	r3, [r7, #6]
 800c936:	4618      	mov	r0, r3
 800c938:	f7f4 f9ac 	bl	8000c94 <__aeabi_ui2f>
 800c93c:	4603      	mov	r3, r0
 800c93e:	4619      	mov	r1, r3
 800c940:	480a      	ldr	r0, [pc, #40]	; (800c96c <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x88>)
 800c942:	f7f4 fab3 	bl	8000eac <__aeabi_fdiv>
 800c946:	4603      	mov	r3, r0
 800c948:	6979      	ldr	r1, [r7, #20]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7f4 f9fa 	bl	8000d44 <__aeabi_fmul>
 800c950:	4603      	mov	r3, r0
 800c952:	4618      	mov	r0, r3
 800c954:	f7f4 fbd2 	bl	80010fc <__aeabi_f2iz>
 800c958:	4603      	mov	r3, r0
 800c95a:	613b      	str	r3, [r7, #16]
	return val;
 800c95c:	693b      	ldr	r3, [r7, #16]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	371c      	adds	r7, #28
 800c962:	46bd      	mov	sp, r7
 800c964:	bd90      	pop	{r4, r7, pc}
 800c966:	bf00      	nop
 800c968:	43b40000 	.word	0x43b40000
 800c96c:	477fff00 	.word	0x477fff00

0800c970 <_ZN8FFBWheel11send_reportEv>:


void FFBWheel::send_report(){
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
	extern USBD_HandleTypeDef hUsbDeviceFS;

	// Read buttons
	reportHID.buttons = 0;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800c980:	2200      	movs	r2, #0
 800c982:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 800c986:	2200      	movs	r2, #0
 800c988:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 800c98c:	2200      	movs	r2, #0
 800c98e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	uint32_t buf = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	60bb      	str	r3, [r7, #8]
	btns->readButtons(&buf);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c99a:	f107 0208 	add.w	r2, r7, #8
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f003 fd0b 	bl	80103bc <_ZN12LocalButtons11readButtonsEPm>
	reportHID.buttons = buf;
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8c3 2089 	str.w	r2, [r3, #137]	; 0x89

	// Encoder
	reportHID.X = clip(lastScaledEnc,-0x7fff,0x7fff);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c9b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c9b8:	4953      	ldr	r1, [pc, #332]	; (800cb08 <_ZN8FFBWheel11send_reportEv+0x198>)
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 f9fe 	bl	800cdbc <_Z4clipIliET_S0_T0_S1_>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	b21a      	sxth	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8a3 208d 	strh.w	r2, [r3, #141]	; 0x8d
	// Analog values read by DMA
	uint16_t axes = this->conf.axes;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800c9d0:	81fb      	strh	r3, [r7, #14]
	reportHID.Y 	=  	(axes & 0x01 << 1) ? ((adc_buf[0] & 0xFFF) << 4)	-0x7fff : 0;
 800c9d2:	89fb      	ldrh	r3, [r7, #14]
 800c9d4:	f003 0302 	and.w	r3, r3, #2
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00e      	beq.n	800c9fa <_ZN8FFBWheel11send_reportEv+0x8a>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	011b      	lsls	r3, r3, #4
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	f023 030f 	bic.w	r3, r3, #15
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c9f2:	3b7f      	subs	r3, #127	; 0x7f
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	b21a      	sxth	r2, r3
 800c9f8:	e000      	b.n	800c9fc <_ZN8FFBWheel11send_reportEv+0x8c>
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8a3 208f 	strh.w	r2, [r3, #143]	; 0x8f
	reportHID.Z		=  	(axes & 0x01 << 2) ? ((adc_buf[1] & 0xFFF) << 4)	-0x7fff : 0;
 800ca02:	89fb      	ldrh	r3, [r7, #14]
 800ca04:	f003 0304 	and.w	r3, r3, #4
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00e      	beq.n	800ca2a <_ZN8FFBWheel11send_reportEv+0xba>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	011b      	lsls	r3, r3, #4
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	f023 030f 	bic.w	r3, r3, #15
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800ca22:	3b7f      	subs	r3, #127	; 0x7f
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	b21a      	sxth	r2, r3
 800ca28:	e000      	b.n	800ca2c <_ZN8FFBWheel11send_reportEv+0xbc>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8a3 2091 	strh.w	r2, [r3, #145]	; 0x91
	reportHID.RX	=  	(axes & 0x01 << 3) ? ((adc_buf[2] & 0xFFF) << 4)	-0x7fff : 0;
 800ca32:	89fb      	ldrh	r3, [r7, #14]
 800ca34:	f003 0308 	and.w	r3, r3, #8
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00e      	beq.n	800ca5a <_ZN8FFBWheel11send_reportEv+0xea>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	011b      	lsls	r3, r3, #4
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	f023 030f 	bic.w	r3, r3, #15
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800ca52:	3b7f      	subs	r3, #127	; 0x7f
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	b21a      	sxth	r2, r3
 800ca58:	e000      	b.n	800ca5c <_ZN8FFBWheel11send_reportEv+0xec>
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8a3 2093 	strh.w	r2, [r3, #147]	; 0x93
	reportHID.RY	=	(axes & 0x01 << 4) ? ((adc_buf[3] & 0xFFF) << 4)	-0x7fff : 0;
 800ca62:	89fb      	ldrh	r3, [r7, #14]
 800ca64:	f003 0310 	and.w	r3, r3, #16
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00e      	beq.n	800ca8a <_ZN8FFBWheel11send_reportEv+0x11a>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	011b      	lsls	r3, r3, #4
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	f023 030f 	bic.w	r3, r3, #15
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800ca82:	3b7f      	subs	r3, #127	; 0x7f
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	b21a      	sxth	r2, r3
 800ca88:	e000      	b.n	800ca8c <_ZN8FFBWheel11send_reportEv+0x11c>
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8a3 2095 	strh.w	r2, [r3, #149]	; 0x95
	reportHID.RZ	= 	(axes & 0x01 << 5) ? ((adc_buf[4] & 0xFFF) << 4)	-0x7fff : 0;
 800ca92:	89fb      	ldrh	r3, [r7, #14]
 800ca94:	f003 0320 	and.w	r3, r3, #32
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00e      	beq.n	800caba <_ZN8FFBWheel11send_reportEv+0x14a>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	011b      	lsls	r3, r3, #4
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	f023 030f 	bic.w	r3, r3, #15
 800caac:	b29b      	uxth	r3, r3
 800caae:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800cab2:	3b7f      	subs	r3, #127	; 0x7f
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	b21a      	sxth	r2, r3
 800cab8:	e000      	b.n	800cabc <_ZN8FFBWheel11send_reportEv+0x14c>
 800caba:	2200      	movs	r2, #0
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8a3 2097 	strh.w	r2, [r3, #151]	; 0x97
	reportHID.Slider= 	(axes & 0x01 << 6) ? ((adc_buf[5] & 0xFFF) << 4)	-0x7fff : 0;
 800cac2:	89fb      	ldrh	r3, [r7, #14]
 800cac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00e      	beq.n	800caea <_ZN8FFBWheel11send_reportEv+0x17a>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	011b      	lsls	r3, r3, #4
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	f023 030f 	bic.w	r3, r3, #15
 800cadc:	b29b      	uxth	r3, r3
 800cade:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800cae2:	3b7f      	subs	r3, #127	; 0x7f
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	b21a      	sxth	r2, r3
 800cae8:	e000      	b.n	800caec <_ZN8FFBWheel11send_reportEv+0x17c>
 800caea:	2200      	movs	r2, #0
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8a3 2099 	strh.w	r2, [r3, #153]	; 0x99

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reinterpret_cast<uint8_t*>(&reportHID), sizeof(reportHID_t));
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	3388      	adds	r3, #136	; 0x88
 800caf6:	2213      	movs	r2, #19
 800caf8:	4619      	mov	r1, r3
 800cafa:	4804      	ldr	r0, [pc, #16]	; (800cb0c <_ZN8FFBWheel11send_reportEv+0x19c>)
 800cafc:	f007 fb00 	bl	8014100 <USBD_CUSTOM_HID_SendReport>

}
 800cb00:	bf00      	nop
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	ffff8001 	.word	0xffff8001
 800cb0c:	20000918 	.word	0x20000918

0800cb10 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:

void FFBWheel::timerElapsed(TIM_HandleTypeDef* htim){
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
	if(htim == this->timer_update){
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d102      	bne.n	800cb2a <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef+0x1a>
		update_flag = true;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	739a      	strb	r2, [r3, #14]
	}
}
 800cb2a:	bf00      	nop
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bc80      	pop	{r7}
 800cb32:	4770      	bx	lr

0800cb34 <_ZThn4_N8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:
	static FFBWheelConfig decodeConf();
	static void encodeConf(FFBWheelConfig conf);


	void adcUpd(volatile uint32_t* ADC_BUF);
	void timerElapsed(TIM_HandleTypeDef* htim);
 800cb34:	f1a0 0004 	sub.w	r0, r0, #4
 800cb38:	f7ff bfea 	b.w	800cb10 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>

0800cb3c <_ZN8FFBWheel6cdcRcvEPcPm>:

void FFBWheel::cdcRcv(char* Buf, uint32_t *Len){
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b088      	sub	sp, #32
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
	if(this->parser.add(Buf, Len)){
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	3310      	adds	r3, #16
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fc f91f 	bl	8008d94 <_ZN9CmdParser3addEPcPm>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d013      	beq.n	800cb84 <_ZN8FFBWheel6cdcRcvEPcPm+0x48>
		executeCommands(this->parser.parse());
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f103 0210 	add.w	r2, r3, #16
 800cb62:	f107 0314 	add.w	r3, r7, #20
 800cb66:	4611      	mov	r1, r2
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fc f975 	bl	8008e58 <_ZN9CmdParser5parseEv>
 800cb6e:	f107 0314 	add.w	r3, r7, #20
 800cb72:	4619      	mov	r1, r3
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 f9ed 	bl	800cf54 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>
 800cb7a:	f107 0314 	add.w	r3, r7, #20
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f000 f934 	bl	800cdec <_ZNSt6vectorI13ParsedCommandSaIS0_EED1Ev>
	}
}
 800cb84:	bf00      	nop
 800cb86:	3720      	adds	r7, #32
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <_ZN8FFBWheel7usbInitEv>:

void FFBWheel::usbInit(){
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
	usbInit_HID_Wheel();
 800cb94:	f001 fb84 	bl	800e2a0 <_Z17usbInit_HID_Wheelv>
}
 800cb98:	bf00      	nop
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <_ZN8FFBWheel3SOFEv>:
void FFBWheel::SOF(){
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
	usb_update_flag = true;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	735a      	strb	r2, [r3, #13]
	// USB clocked update callback
}
 800cbae:	bf00      	nop
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bc80      	pop	{r7}
 800cbb6:	4770      	bx	lr

0800cbb8 <_ZN8FFBWheel10decodeConfEv>:

FFBWheelConfig FFBWheel::decodeConf(){
 800cbb8:	b5b0      	push	{r4, r5, r7, lr}
 800cbba:	b090      	sub	sp, #64	; 0x40
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
	uint32_t buf[7] = {0};
 800cbc0:	f107 0308 	add.w	r3, r7, #8
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]
 800cbc8:	605a      	str	r2, [r3, #4]
 800cbca:	609a      	str	r2, [r3, #8]
 800cbcc:	60da      	str	r2, [r3, #12]
 800cbce:	611a      	str	r2, [r3, #16]
 800cbd0:	615a      	str	r2, [r3, #20]
 800cbd2:	619a      	str	r2, [r3, #24]
	FFBWheelConfig conf;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4a52      	ldr	r2, [pc, #328]	; (800cd20 <_ZN8FFBWheel10decodeConfEv+0x168>)
 800cbd8:	461d      	mov	r5, r3
 800cbda:	4614      	mov	r4, r2
 800cbdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbde:	6028      	str	r0, [r5, #0]
 800cbe0:	6069      	str	r1, [r5, #4]
 800cbe2:	60aa      	str	r2, [r5, #8]
 800cbe4:	60eb      	str	r3, [r5, #12]
 800cbe6:	cc03      	ldmia	r4!, {r0, r1}
 800cbe8:	6128      	str	r0, [r5, #16]
 800cbea:	6169      	str	r1, [r5, #20]
 800cbec:	8823      	ldrh	r3, [r4, #0]
 800cbee:	832b      	strh	r3, [r5, #24]

	EE_Reads(0x00, 7, buf);
 800cbf0:	f107 0308 	add.w	r3, r7, #8
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	2107      	movs	r1, #7
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	f7f4 fb09 	bl	8001210 <EE_Reads>
	conf.check = buf[0] & 0xff;
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	701a      	strb	r2, [r3, #0]
	if(conf.check != 0x57)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	2b57      	cmp	r3, #87	; 0x57
 800cc0c:	d020      	beq.n	800cc50 <_ZN8FFBWheel10decodeConfEv+0x98>
	{
		conf = FFBWheelConfig();
 800cc0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc12:	2200      	movs	r2, #0
 800cc14:	601a      	str	r2, [r3, #0]
 800cc16:	605a      	str	r2, [r3, #4]
 800cc18:	609a      	str	r2, [r3, #8]
 800cc1a:	60da      	str	r2, [r3, #12]
 800cc1c:	611a      	str	r2, [r3, #16]
 800cc1e:	615a      	str	r2, [r3, #20]
 800cc20:	831a      	strh	r2, [r3, #24]
 800cc22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7ff fa49 	bl	800c0be <_ZN14FFBWheelConfigC1Ev>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	461d      	mov	r5, r3
 800cc30:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800cc34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc36:	6028      	str	r0, [r5, #0]
 800cc38:	6069      	str	r1, [r5, #4]
 800cc3a:	60aa      	str	r2, [r5, #8]
 800cc3c:	60eb      	str	r3, [r5, #12]
 800cc3e:	cc03      	ldmia	r4!, {r0, r1}
 800cc40:	6128      	str	r0, [r5, #16]
 800cc42:	6169      	str	r1, [r5, #20]
 800cc44:	8823      	ldrh	r3, [r4, #0]
 800cc46:	832b      	strh	r3, [r5, #24]
		conf.check = 0x00;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	701a      	strb	r2, [r3, #0]
		return conf;
 800cc4e:	e063      	b.n	800cd18 <_ZN8FFBWheel10decodeConfEv+0x160>
	}
	conf.axes = (buf[0] >> 8)& 0xff;
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	0a1b      	lsrs	r3, r3, #8
 800cc54:	b2da      	uxtb	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	705a      	strb	r2, [r3, #1]
	conf.I2CButtons = (buf[0] >> 16) & 0xff;
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	0c1b      	lsrs	r3, r3, #16
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	709a      	strb	r2, [r3, #2]
	conf.nLocalButtons= (buf[0] >> 24) & 0xff;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	0e1b      	lsrs	r3, r3, #24
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	70da      	strb	r2, [r3, #3]

	conf.degreesOfRotation= buf[1] & 0xffff;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	809a      	strh	r2, [r3, #4]
	conf.power= (buf[1] >> 16) & 0xffff;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	0c1b      	lsrs	r3, r3, #16
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	80da      	strh	r2, [r3, #6]

	conf.endstop_gain= buf[2] & 0xffff;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	819a      	strh	r2, [r3, #12]
	conf.encoderPPR= (buf[2] >> 16) & 0xffff;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	0c1b      	lsrs	r3, r3, #16
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	811a      	strh	r2, [r3, #8]

	conf.maxAdcCount = buf[3] & 0xff;
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	729a      	strb	r2, [r3, #10]
	conf.inverted = (buf[3] >> 8) & 0xff;
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	0a1b      	lsrs	r3, r3, #8
 800cc9e:	b2da      	uxtb	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	72da      	strb	r2, [r3, #11]
	conf.constantGain = (buf[3] >> 16) & 0xff;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	0c1b      	lsrs	r3, r3, #16
 800cca8:	b2da      	uxtb	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	739a      	strb	r2, [r3, #14]
	conf.rampGain = (buf[3] >> 24) & 0xff;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	0e1b      	lsrs	r3, r3, #24
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	73da      	strb	r2, [r3, #15]

	conf.squareGain = buf[4] & 0xff;
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	741a      	strb	r2, [r3, #16]
	conf.sinGain = (buf[4] >> 8) & 0xff;
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	0a1b      	lsrs	r3, r3, #8
 800ccc4:	b2da      	uxtb	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	745a      	strb	r2, [r3, #17]
	conf.triangleGain = (buf[4] >> 16) & 0xff;
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	0c1b      	lsrs	r3, r3, #16
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	749a      	strb	r2, [r3, #18]
	conf.sawToothDownGain = (buf[4] >> 24) & 0xff;
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	0e1b      	lsrs	r3, r3, #24
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	74da      	strb	r2, [r3, #19]

	conf.sawToothUpGain = buf[5] & 0xff;
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	751a      	strb	r2, [r3, #20]
	conf.springGain = (buf[5] >> 8) & 0xff;
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	0a1b      	lsrs	r3, r3, #8
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	755a      	strb	r2, [r3, #21]
	conf.damperGain = (buf[5] >> 16) & 0xff;
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	0c1b      	lsrs	r3, r3, #16
 800ccf4:	b2da      	uxtb	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	759a      	strb	r2, [r3, #22]
	conf.inertiaGain = (buf[5] >> 24) & 0xff;
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	0e1b      	lsrs	r3, r3, #24
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	75da      	strb	r2, [r3, #23]

	conf.frictionGain = buf[6] & 0xff;
 800cd04:	6a3b      	ldr	r3, [r7, #32]
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	761a      	strb	r2, [r3, #24]
	conf.totalGain = (buf[6] >> 8) & 0xff;
 800cd0c:	6a3b      	ldr	r3, [r7, #32]
 800cd0e:	0a1b      	lsrs	r3, r3, #8
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	765a      	strb	r2, [r3, #25]

	return conf;
 800cd16:	bf00      	nop
}
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	3740      	adds	r7, #64	; 0x40
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bdb0      	pop	{r4, r5, r7, pc}
 800cd20:	08018db4 	.word	0x08018db4

0800cd24 <_Z4clipIlsET_S0_T0_S1_>:
		return 0;
	}
}

template<class T,class C>
T clip(T v, C l, C h)
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	807b      	strh	r3, [r7, #2]
 800cd30:	4613      	mov	r3, r2
 800cd32:	803b      	strh	r3, [r7, #0]
{
  return { v > h ? h : v < l ? l : v };
 800cd34:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	dd02      	ble.n	800cd44 <_Z4clipIlsET_S0_T0_S1_+0x20>
 800cd3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cd42:	e005      	b.n	800cd50 <_Z4clipIlsET_S0_T0_S1_+0x2c>
 800cd44:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	bfb8      	it	lt
 800cd4e:	4613      	movlt	r3, r2
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bc80      	pop	{r7}
 800cd58:	4770      	bx	lr

0800cd5a <_Z8cliptestIllEaT_T0_S1_>:
int8_t cliptest(T v, C l, C h)
 800cd5a:	b480      	push	{r7}
 800cd5c:	b085      	sub	sp, #20
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
	if(v > h){
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	dd01      	ble.n	800cd72 <_Z8cliptestIllEaT_T0_S1_+0x18>
		return 1;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e007      	b.n	800cd82 <_Z8cliptestIllEaT_T0_S1_+0x28>
	}else if(v < l){
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	da02      	bge.n	800cd80 <_Z8cliptestIllEaT_T0_S1_+0x26>
		return -1;
 800cd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd7e:	e000      	b.n	800cd82 <_Z8cliptestIllEaT_T0_S1_+0x28>
		return 0;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bc80      	pop	{r7}
 800cd8a:	4770      	bx	lr

0800cd8c <_Z4clipIllET_S0_T0_S1_>:
T clip(T v, C l, C h)
 800cd8c:	b480      	push	{r7}
 800cd8e:	b085      	sub	sp, #20
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
  return { v > h ? h : v < l ? l : v };
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	dc07      	bgt.n	800cdb0 <_Z4clipIllET_S0_T0_S1_+0x24>
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	da01      	bge.n	800cdac <_Z4clipIllET_S0_T0_S1_+0x20>
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	e002      	b.n	800cdb2 <_Z4clipIllET_S0_T0_S1_+0x26>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	e000      	b.n	800cdb2 <_Z4clipIllET_S0_T0_S1_+0x26>
 800cdb0:	687b      	ldr	r3, [r7, #4]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bc80      	pop	{r7}
 800cdba:	4770      	bx	lr

0800cdbc <_Z4clipIliET_S0_T0_S1_>:
T clip(T v, C l, C h)
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
  return { v > h ? h : v < l ? l : v };
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	dc07      	bgt.n	800cde0 <_Z4clipIliET_S0_T0_S1_+0x24>
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	da01      	bge.n	800cddc <_Z4clipIliET_S0_T0_S1_+0x20>
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	e002      	b.n	800cde2 <_Z4clipIliET_S0_T0_S1_+0x26>
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	e000      	b.n	800cde2 <_Z4clipIliET_S0_T0_S1_+0x26>
 800cde0:	687b      	ldr	r3, [r7, #4]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3714      	adds	r7, #20
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bc80      	pop	{r7}
 800cdea:	4770      	bx	lr

0800cdec <_ZNSt6vectorI13ParsedCommandSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800cdec:	b5b0      	push	{r4, r5, r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681c      	ldr	r4, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fc fcd4 	bl	80097ac <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800ce04:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ce06:	461a      	mov	r2, r3
 800ce08:	4629      	mov	r1, r5
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f7fc fcd8 	bl	80097c0 <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 f812 	bl	800ce3c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bdb0      	pop	{r4, r5, r7, pc}

0800ce22 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b082      	sub	sp, #8
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f826 	bl	800ce7c <_ZNSaI13ParsedCommandED1Ev>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6819      	ldr	r1, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	109b      	asrs	r3, r3, #2
 800ce56:	4a08      	ldr	r2, [pc, #32]	; (800ce78 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev+0x3c>)
 800ce58:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7fc feb8 	bl	8009bd4 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7ff ffdb 	bl	800ce22 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implD1Ev>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	38e38e39 	.word	0x38e38e39

0800ce7c <_ZNSaI13ParsedCommandED1Ev>:
      ~allocator() throw() { }
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f805 	bl	800ce94 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandED1Ev>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	370c      	adds	r7, #12
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bc80      	pop	{r7}
 800cea6:	4770      	bx	lr

0800cea8 <__NVIC_SystemReset>:
{
 800cea8:	b480      	push	{r7}
 800ceaa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ceac:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ceb0:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <__NVIC_SystemReset+0x20>)
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ceb8:	4903      	ldr	r1, [pc, #12]	; (800cec8 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ceba:	4b04      	ldr	r3, [pc, #16]	; (800cecc <__NVIC_SystemReset+0x24>)
 800cebc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cebe:	60cb      	str	r3, [r1, #12]
 800cec0:	f3bf 8f4f 	dsb	sy
    __NOP();
 800cec4:	bf00      	nop
 800cec6:	e7fd      	b.n	800cec4 <__NVIC_SystemReset+0x1c>
 800cec8:	e000ed00 	.word	0xe000ed00
 800cecc:	05fa0004 	.word	0x05fa0004

0800ced0 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af02      	add	r7, sp, #8
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	4b04      	ldr	r3, [pc, #16]	; (800cef4 <_ZNSt7__cxx119to_stringEi+0x24>)
 800cee2:	2210      	movs	r2, #16
 800cee4:	4904      	ldr	r1, [pc, #16]	; (800cef8 <_ZNSt7__cxx119to_stringEi+0x28>)
 800cee6:	f001 f873 	bl	800dfd0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	08018dd0 	.word	0x08018dd0
 800cef8:	08017d19 	.word	0x08017d19

0800cefc <_ZNSt7__cxx119to_stringEl>:
					   4 * sizeof(unsigned),
					   "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af02      	add	r7, sp, #8
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
					   "%ld", __val); }
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <_ZNSt7__cxx119to_stringEl+0x24>)
 800cf0e:	2210      	movs	r2, #16
 800cf10:	4904      	ldr	r1, [pc, #16]	; (800cf24 <_ZNSt7__cxx119to_stringEl+0x28>)
 800cf12:	f001 f85d 	bl	800dfd0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	08018dd4 	.word	0x08018dd4
 800cf24:	08017d19 	.word	0x08017d19

0800cf28 <_ZNSt7__cxx119to_stringEm>:

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af02      	add	r7, sp, #8
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	4b04      	ldr	r3, [pc, #16]	; (800cf4c <_ZNSt7__cxx119to_stringEm+0x24>)
 800cf3a:	2210      	movs	r2, #16
 800cf3c:	4904      	ldr	r1, [pc, #16]	; (800cf50 <_ZNSt7__cxx119to_stringEm+0x28>)
 800cf3e:	f001 f847 	bl	800dfd0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	08018dd8 	.word	0x08018dd8
 800cf50:	08017d19 	.word	0x08017d19

0800cf54 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>:
		{128,0,0},
		{0,128,0},
		{0,0,128}
};

void FFBWheel::executeCommands(std::vector<ParsedCommand> commands){
 800cf54:	b590      	push	{r4, r7, lr}
 800cf56:	b099      	sub	sp, #100	; 0x64
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
	std::string reply;
 800cf5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf62:	4618      	mov	r0, r3
 800cf64:	f007 fbe8 	bl	8014738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	extern std::vector<CommandHandler*> cmdHandlers;
	for(ParsedCommand cmd : commands){
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf6c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cf6e:	f7fc ff1f 	bl	8009db0 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>
 800cf72:	4603      	mov	r3, r0
 800cf74:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf76:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cf78:	f7fc fc9f 	bl	80098ba <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	637b      	str	r3, [r7, #52]	; 0x34
 800cf80:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800cf84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf88:	4611      	mov	r1, r2
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f001 f858 	bl	800e040 <_ZN9__gnu_cxxneIP13ParsedCommandSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d07f      	beq.n	800d096 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x142>
 800cf96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f001 f878 	bl	800e090 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEdeEv>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	f107 0308 	add.w	r3, r7, #8
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fc fe74 	bl	8009c96 <_ZN13ParsedCommandC1ERKS_>
		if(!executeSysCommand(&cmd,&reply)){
 800cfae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cfb2:	f107 0308 	add.w	r3, r7, #8
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f895 	bl	800d0e8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	f083 0301 	eor.w	r3, r3, #1
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d03b      	beq.n	800d042 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xee>
			// Call all command handlers
			for(CommandHandler* handler : cmdHandlers){
 800cfca:	4b46      	ldr	r3, [pc, #280]	; (800d0e4 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x190>)
 800cfcc:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cfd0:	f7fd fcae 	bl	800a930 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	633b      	str	r3, [r7, #48]	; 0x30
 800cfd8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cfda:	f7fd fdd3 	bl	800ab84 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfe2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800cfe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfea:	4611      	mov	r1, r2
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fd fe80 	bl	800acf2 <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d024      	beq.n	800d042 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xee>
 800cff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cffc:	4618      	mov	r0, r3
 800cffe:	f001 f861 	bl	800e0c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 800d002:	4603      	mov	r3, r0
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	657b      	str	r3, [r7, #84]	; 0x54
				if(handler->hasCommands())
 800d008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	3308      	adds	r3, #8
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d012:	4798      	blx	r3
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00c      	beq.n	800d034 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xe0>
					if(handler->command(&cmd,&reply))
 800d01a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	3310      	adds	r3, #16
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800d026:	f107 0108 	add.w	r1, r7, #8
 800d02a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d02c:	4798      	blx	r3
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d105      	bne.n	800d040 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xec>
			for(CommandHandler* handler : cmdHandlers){
 800d034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d038:	4618      	mov	r0, r3
 800d03a:	f001 f834 	bl	800e0a6 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEppEv>
 800d03e:	e7d0      	b.n	800cfe2 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x8e>
						break; // Stop after this class if finished flag is returned
 800d040:	bf00      	nop
			}

		}
		if(!reply.empty() && reply.back()!='\n'){
 800d042:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d046:	4618      	mov	r0, r3
 800d048:	f007 fbcf 	bl	80147ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800d04c:	4603      	mov	r3, r0
 800d04e:	f083 0301 	eor.w	r3, r3, #1
 800d052:	b2db      	uxtb	r3, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00a      	beq.n	800d06e <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11a>
 800d058:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d05c:	4618      	mov	r0, r3
 800d05e:	f007 fbcc 	bl	80147fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800d062:	4603      	mov	r3, r0
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b0a      	cmp	r3, #10
 800d068:	d001      	beq.n	800d06e <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11a>
 800d06a:	2301      	movs	r3, #1
 800d06c:	e000      	b.n	800d070 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11c>
 800d06e:	2300      	movs	r3, #0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d005      	beq.n	800d080 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x12c>
			reply+='\n';
 800d074:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d078:	210a      	movs	r1, #10
 800d07a:	4618      	mov	r0, r3
 800d07c:	f007 fbe0 	bl	8014840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	for(ParsedCommand cmd : commands){
 800d080:	f107 0308 	add.w	r3, r7, #8
 800d084:	4618      	mov	r0, r3
 800d086:	f7fb feda 	bl	8008e3e <_ZN13ParsedCommandD1Ev>
 800d08a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d08e:	4618      	mov	r0, r3
 800d090:	f000 ffee 	bl	800e070 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEppEv>
 800d094:	e774      	b.n	800cf80 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x2c>
		}
	}
	if(reply.length()>0){
 800d096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d09a:	4618      	mov	r0, r3
 800d09c:	f007 fb9e 	bl	80147dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	bf14      	ite	ne
 800d0a6:	2301      	movne	r3, #1
 800d0a8:	2300      	moveq	r3, #0
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d010      	beq.n	800d0d2 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x17e>
		CDC_Transmit_FS(reply.c_str(), reply.length());
 800d0b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f007 fc1d 	bl	80148f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f007 fb8b 	bl	80147dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	f005 f951 	bl	8012374 <CDC_Transmit_FS>
	std::string reply;
 800d0d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f007 fb4f 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800d0dc:	bf00      	nop
 800d0de:	3764      	adds	r7, #100	; 0x64
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd90      	pop	{r4, r7, pc}
 800d0e4:	20000b58 	.word	0x20000b58

0800d0e8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool FFBWheel::executeSysCommand(ParsedCommand* cmd,std::string* reply){
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b08c      	sub	sp, #48	; 0x30
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
	bool flag = true;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(cmd->cmd == "help"){
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	4934      	ldr	r1, [pc, #208]	; (800d1d0 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>)
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 ffeb 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00d      	beq.n	800d126 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e>
		*reply += parser.helpstring;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	332c      	adds	r3, #44	; 0x2c
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f007 fbc1 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
		*reply += "\nSystem Commands: reboot,help,dfu,swver (Version),lsmain (List configs),id,main (Set main config),vint,vext,format (Erase flash)\n";
 800d116:	492f      	ldr	r1, [pc, #188]	; (800d1d4 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xec>)
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f007 fbe7 	bl	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		flag = false; // Continue to user commands
 800d11e:	2300      	movs	r3, #0
 800d120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d124:	e04d      	b.n	800d1c2 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xda>
	}else if(cmd->cmd == "reboot"){
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	492b      	ldr	r1, [pc, #172]	; (800d1d8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>)
 800d12a:	4618      	mov	r0, r3
 800d12c:	f000 ffd5 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52>
		NVIC_SystemReset();
 800d136:	f7ff feb7 	bl	800cea8 <__NVIC_SystemReset>
	}else if(cmd->cmd == "dfu"){
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	4927      	ldr	r1, [pc, #156]	; (800d1dc <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4>)
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 ffcb 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
		RebootDFU();
 800d14a:	f7f4 fc41 	bl	80019d0 <RebootDFU>
 800d14e:	e038      	b.n	800d1c2 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xda>
	}else if(cmd->cmd == "swver"){
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	4923      	ldr	r1, [pc, #140]	; (800d1e0 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf8>)
 800d154:	4618      	mov	r0, r3
 800d156:	f000 ffc0 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d011      	beq.n	800d184 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>
		*reply += std::to_string(SW_VERSION);
 800d160:	f107 0314 	add.w	r3, r7, #20
 800d164:	2102      	movs	r1, #2
 800d166:	4618      	mov	r0, r3
 800d168:	f7ff feb2 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d16c:	f107 0314 	add.w	r3, r7, #20
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f007 fb90 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d178:	f107 0314 	add.w	r3, r7, #20
 800d17c:	4618      	mov	r0, r3
 800d17e:	f007 fafc 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d182:	e01e      	b.n	800d1c2 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xda>
	}else if(cmd->cmd == "format"){
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	4917      	ldr	r1, [pc, #92]	; (800d1e4 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfc>)
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 ffa6 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d013      	beq.n	800d1bc <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		if(cmd->type == CMDtype::set && cmd->val==1){
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	6a1b      	ldr	r3, [r3, #32]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10a      	bne.n	800d1b2 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xca>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	69db      	ldr	r3, [r3, #28]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d106      	bne.n	800d1b2 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xca>
			HAL_FLASH_Unlock();
 800d1a4:	f7f5 ff4e 	bl	8003044 <HAL_FLASH_Unlock>
			EE_Format();
 800d1a8:	f7f4 f808 	bl	80011bc <EE_Format>
			HAL_FLASH_Lock();
 800d1ac:	f7f5 ff70 	bl	8003090 <HAL_FLASH_Lock>
 800d1b0:	e007      	b.n	800d1c2 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xda>
		}else{
			*reply += "format=1 will ERASE ALL stored variables. Be careful!";
 800d1b2:	490d      	ldr	r1, [pc, #52]	; (800d1e8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x100>)
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f007 fb99 	bl	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d1ba:	e002      	b.n	800d1c2 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xda>
		}
	}else{
		flag = false;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	// Append newline if reply is not empty

	return flag;
 800d1c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3730      	adds	r7, #48	; 0x30
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	08018ddc 	.word	0x08018ddc
 800d1d4:	08018de4 	.word	0x08018de4
 800d1d8:	08018e68 	.word	0x08018e68
 800d1dc:	08018e70 	.word	0x08018e70
 800d1e0:	08018e74 	.word	0x08018e74
 800d1e4:	08018e7c 	.word	0x08018e7c
 800d1e8:	08018e84 	.word	0x08018e84

0800d1ec <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
volatile const SimDisplayPacket* telemetry;
bool FFBWheel::command(ParsedCommand* cmd,std::string* reply){
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	f107 030c 	add.w	r3, r7, #12
 800d1f8:	6018      	str	r0, [r3, #0]
 800d1fa:	f107 0308 	add.w	r3, r7, #8
 800d1fe:	6019      	str	r1, [r3, #0]
 800d200:	1d3b      	adds	r3, r7, #4
 800d202:	601a      	str	r2, [r3, #0]
	bool flag = true;
 800d204:	2301      	movs	r3, #1
 800d206:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	// ------------ General commands ----------------
	if(cmd->cmd == "save"){
 800d20a:	f107 0308 	add.w	r3, r7, #8
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	49be      	ldr	r1, [pc, #760]	; (800d50c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x320>)
 800d212:	4618      	mov	r0, r3
 800d214:	f000 ff61 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00b      	beq.n	800d236 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a>
		this->saveFlash();
 800d21e:	f107 030c 	add.w	r3, r7, #12
 800d222:	6818      	ldr	r0, [r3, #0]
 800d224:	f7ff f915 	bl	800c452 <_ZN8FFBWheel9saveFlashEv>
		*reply+=">saved";
 800d228:	1d3b      	adds	r3, r7, #4
 800d22a:	49b9      	ldr	r1, [pc, #740]	; (800d510 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x324>)
 800d22c:	6818      	ldr	r0, [r3, #0]
 800d22e:	f007 fb5d 	bl	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d232:	f000 beb9 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
	}else if(cmd->cmd == "zeroenc"){
 800d236:	f107 0308 	add.w	r3, r7, #8
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	49b5      	ldr	r1, [pc, #724]	; (800d514 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x328>)
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 ff4b 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d015      	beq.n	800d276 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
		if(cmd->type == CMDtype::get){
 800d24a:	f107 0308 	add.w	r3, r7, #8
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6a1b      	ldr	r3, [r3, #32]
 800d252:	2b02      	cmp	r3, #2
 800d254:	f040 86a8 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
			this->enc->setPos(0);
 800d258:	f107 030c 	add.w	r3, r7, #12
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d260:	2100      	movs	r1, #0
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe f89c 	bl	800b3a0 <_ZN12EncoderLocal6setPosEl>
			*reply += "Zeroed";
 800d268:	1d3b      	adds	r3, r7, #4
 800d26a:	49ab      	ldr	r1, [pc, #684]	; (800d518 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32c>)
 800d26c:	6818      	ldr	r0, [r3, #0]
 800d26e:	f007 fb3d 	bl	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d272:	f000 be99 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}
	}else if(cmd->cmd == "power"){
 800d276:	f107 0308 	add.w	r3, r7, #8
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	49a7      	ldr	r1, [pc, #668]	; (800d51c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x330>)
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 ff2b 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d032      	beq.n	800d2f0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x104>
		if(cmd->type == CMDtype::get){
 800d28a:	f107 0308 	add.w	r3, r7, #8
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	2b02      	cmp	r3, #2
 800d294:	d119      	bne.n	800d2ca <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
			*reply+=std::to_string(conf.power);
 800d296:	f107 030c 	add.w	r3, r7, #12
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d2a6:	4611      	mov	r1, r2
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7ff fe11 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d2ae:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800d2b2:	1d3b      	adds	r3, r7, #4
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	f007 faee 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d2bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f007 fa5a 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d2c6:	f000 be6f 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}else if(cmd->type == CMDtype::set){
 800d2ca:	f107 0308 	add.w	r3, r7, #8
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	6a1b      	ldr	r3, [r3, #32]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	f040 8668 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
			this->conf.power = cmd->val;
 800d2d8:	f107 0308 	add.w	r3, r7, #8
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	69db      	ldr	r3, [r3, #28]
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	f107 030c 	add.w	r3, r7, #12
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800d2ec:	f000 be5c 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}
	}else if(cmd->cmd == "degrees"){
 800d2f0:	f107 0308 	add.w	r3, r7, #8
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	498a      	ldr	r1, [pc, #552]	; (800d520 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x334>)
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 feee 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d032      	beq.n	800d36a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17e>
		if(cmd->type == CMDtype::get){
 800d304:	f107 0308 	add.w	r3, r7, #8
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	6a1b      	ldr	r3, [r3, #32]
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	d119      	bne.n	800d344 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x158>
			*reply+=std::to_string(this->conf.degreesOfRotation);
 800d310:	f107 030c 	add.w	r3, r7, #12
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d31a:	461a      	mov	r2, r3
 800d31c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d320:	4611      	mov	r1, r2
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff fdd4 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d328:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800d32c:	1d3b      	adds	r3, r7, #4
 800d32e:	4611      	mov	r1, r2
 800d330:	6818      	ldr	r0, [r3, #0]
 800d332:	f007 fab1 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d336:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d33a:	4618      	mov	r0, r3
 800d33c:	f007 fa1d 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d340:	f000 be32 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}else if(cmd->type == CMDtype::set){
 800d344:	f107 0308 	add.w	r3, r7, #8
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6a1b      	ldr	r3, [r3, #32]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f040 862b 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
			this->conf.degreesOfRotation = cmd->val;
 800d352:	f107 0308 	add.w	r3, r7, #8
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	69db      	ldr	r3, [r3, #28]
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	f107 030c 	add.w	r3, r7, #12
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800d366:	f000 be1f 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}
	}else if(cmd->cmd == "axismask"){
 800d36a:	f107 0308 	add.w	r3, r7, #8
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	496c      	ldr	r1, [pc, #432]	; (800d524 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x338>)
 800d372:	4618      	mov	r0, r3
 800d374:	f000 feb1 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d032      	beq.n	800d3e4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f8>
		if(cmd->type == CMDtype::get){
 800d37e:	f107 0308 	add.w	r3, r7, #8
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6a1b      	ldr	r3, [r3, #32]
 800d386:	2b02      	cmp	r3, #2
 800d388:	d119      	bne.n	800d3be <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d2>
			*reply+=std::to_string(this->conf.axes);
 800d38a:	f107 030c 	add.w	r3, r7, #12
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d394:	461a      	mov	r2, r3
 800d396:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d39a:	4611      	mov	r1, r2
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff fd97 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d3a2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800d3a6:	1d3b      	adds	r3, r7, #4
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	6818      	ldr	r0, [r3, #0]
 800d3ac:	f007 fa74 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d3b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f007 f9e0 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d3ba:	f000 bdf5 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}else if(cmd->type == CMDtype::set){
 800d3be:	f107 0308 	add.w	r3, r7, #8
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	6a1b      	ldr	r3, [r3, #32]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f040 85ee 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
			this->conf.axes = cmd->val;
 800d3cc:	f107 0308 	add.w	r3, r7, #8
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	69db      	ldr	r3, [r3, #28]
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	f107 030c 	add.w	r3, r7, #12
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800d3e0:	f000 bde2 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}
	}else if(cmd->cmd == "ppr"){
 800d3e4:	f107 0308 	add.w	r3, r7, #8
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	494f      	ldr	r1, [pc, #316]	; (800d528 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x33c>)
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 fe74 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d04c      	beq.n	800d492 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a6>
		if(cmd->type == CMDtype::get){
 800d3f8:	f107 0308 	add.w	r3, r7, #8
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6a1b      	ldr	r3, [r3, #32]
 800d400:	2b02      	cmp	r3, #2
 800d402:	d11b      	bne.n	800d43c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x250>
			*reply+=std::to_string(this->enc->getPpr());
 800d404:	f107 030c 	add.w	r3, r7, #12
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fe f833 	bl	800b478 <_ZN12EncoderLocal6getPprEv>
 800d412:	4602      	mov	r2, r0
 800d414:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d418:	4611      	mov	r1, r2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff fd84 	bl	800cf28 <_ZNSt7__cxx119to_stringEm>
 800d420:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800d424:	1d3b      	adds	r3, r7, #4
 800d426:	4611      	mov	r1, r2
 800d428:	6818      	ldr	r0, [r3, #0]
 800d42a:	f007 fa35 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d42e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d432:	4618      	mov	r0, r3
 800d434:	f007 f9a1 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d438:	f000 bdb6 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 800d43c:	f107 0308 	add.w	r3, r7, #8
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6a1b      	ldr	r3, [r3, #32]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d11d      	bne.n	800d484 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x298>
 800d448:	f107 030c 	add.w	r3, r7, #12
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d450:	2b00      	cmp	r3, #0
 800d452:	d017      	beq.n	800d484 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x298>
			this->conf.encoderPPR = cmd->val;
 800d454:	f107 0308 	add.w	r3, r7, #8
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	69db      	ldr	r3, [r3, #28]
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	f107 030c 	add.w	r3, r7, #12
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			this->enc->setPpr(cmd->val);
 800d468:	f107 030c 	add.w	r3, r7, #12
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d470:	f107 0308 	add.w	r3, r7, #8
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	69db      	ldr	r3, [r3, #28]
 800d478:	4619      	mov	r1, r3
 800d47a:	4610      	mov	r0, r2
 800d47c:	f7fe f812 	bl	800b4a4 <_ZN12EncoderLocal6setPprEm>
 800d480:	f000 bd92 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}else{
			*reply += "Err. Setup enctype first";
 800d484:	1d3b      	adds	r3, r7, #4
 800d486:	4929      	ldr	r1, [pc, #164]	; (800d52c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x340>)
 800d488:	6818      	ldr	r0, [r3, #0]
 800d48a:	f007 fa2f 	bl	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d48e:	f000 bd8b 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}
	}else if(cmd->cmd == "adcmax"){
 800d492:	f107 0308 	add.w	r3, r7, #8
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4925      	ldr	r1, [pc, #148]	; (800d530 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 800d49a:	4618      	mov	r0, r3
 800d49c:	f000 fe1d 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d046      	beq.n	800d534 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>
			if(cmd->type == CMDtype::get){
 800d4a6:	f107 0308 	add.w	r3, r7, #8
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	6a1b      	ldr	r3, [r3, #32]
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d119      	bne.n	800d4e6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2fa>
				*reply+=std::to_string(this->conf.maxAdcCount);
 800d4b2:	f107 030c 	add.w	r3, r7, #12
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800d4bc:	461a      	mov	r2, r3
 800d4be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7ff fd03 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d4ca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800d4ce:	1d3b      	adds	r3, r7, #4
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	6818      	ldr	r0, [r3, #0]
 800d4d4:	f007 f9e0 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d4d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f007 f94c 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d4e2:	f000 bd61 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
			}else if(cmd->type == CMDtype::set){
 800d4e6:	f107 0308 	add.w	r3, r7, #8
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f040 855a 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				this->conf.maxAdcCount = cmd->val;
 800d4f4:	f107 0308 	add.w	r3, r7, #8
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	69db      	ldr	r3, [r3, #28]
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	f107 030c 	add.w	r3, r7, #12
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800d508:	f000 bd4e 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
 800d50c:	08018ebc 	.word	0x08018ebc
 800d510:	08018ec4 	.word	0x08018ec4
 800d514:	08018ecc 	.word	0x08018ecc
 800d518:	08018ed4 	.word	0x08018ed4
 800d51c:	08018edc 	.word	0x08018edc
 800d520:	08018ee4 	.word	0x08018ee4
 800d524:	08018eec 	.word	0x08018eec
 800d528:	08018ef8 	.word	0x08018ef8
 800d52c:	08018efc 	.word	0x08018efc
 800d530:	08018f18 	.word	0x08018f18
			}
	}else if(cmd->cmd == "inverted"){
 800d534:	f107 0308 	add.w	r3, r7, #8
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	49c9      	ldr	r1, [pc, #804]	; (800d860 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x674>)
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fdcc 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d032      	beq.n	800d5ae <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c2>
				if(cmd->type == CMDtype::get){
 800d548:	f107 0308 	add.w	r3, r7, #8
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	6a1b      	ldr	r3, [r3, #32]
 800d550:	2b02      	cmp	r3, #2
 800d552:	d119      	bne.n	800d588 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x39c>
					*reply+=std::to_string(this->conf.inverted);
 800d554:	f107 030c 	add.w	r3, r7, #12
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800d55e:	461a      	mov	r2, r3
 800d560:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d564:	4611      	mov	r1, r2
 800d566:	4618      	mov	r0, r3
 800d568:	f7ff fcb2 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d56c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800d570:	1d3b      	adds	r3, r7, #4
 800d572:	4611      	mov	r1, r2
 800d574:	6818      	ldr	r0, [r3, #0]
 800d576:	f007 f98f 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d57a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800d57e:	4618      	mov	r0, r3
 800d580:	f007 f8fb 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d584:	f000 bd10 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800d588:	f107 0308 	add.w	r3, r7, #8
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6a1b      	ldr	r3, [r3, #32]
 800d590:	2b00      	cmp	r3, #0
 800d592:	f040 8509 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.inverted = cmd->val;
 800d596:	f107 0308 	add.w	r3, r7, #8
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	69db      	ldr	r3, [r3, #28]
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	f107 030c 	add.w	r3, r7, #12
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 800d5aa:	f000 bcfd 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}

	}else if(cmd->cmd == "constantGain"){
 800d5ae:	f107 0308 	add.w	r3, r7, #8
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	49ab      	ldr	r1, [pc, #684]	; (800d864 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x678>)
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 fd8f 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d032      	beq.n	800d628 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x43c>
				if(cmd->type == CMDtype::get){
 800d5c2:	f107 0308 	add.w	r3, r7, #8
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d119      	bne.n	800d602 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x416>
					*reply+=std::to_string(this->conf.constantGain);
 800d5ce:	f107 030c 	add.w	r3, r7, #12
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800d5d8:	461a      	mov	r2, r3
 800d5da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d5de:	4611      	mov	r1, r2
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff fc75 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d5e6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800d5ea:	1d3b      	adds	r3, r7, #4
 800d5ec:	4611      	mov	r1, r2
 800d5ee:	6818      	ldr	r0, [r3, #0]
 800d5f0:	f007 f952 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d5f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f007 f8be 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d5fe:	f000 bcd3 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800d602:	f107 0308 	add.w	r3, r7, #8
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6a1b      	ldr	r3, [r3, #32]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f040 84cc 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.constantGain = cmd->val;
 800d610:	f107 0308 	add.w	r3, r7, #8
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	69db      	ldr	r3, [r3, #28]
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	f107 030c 	add.w	r3, r7, #12
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800d624:	f000 bcc0 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "rampGain"){
 800d628:	f107 0308 	add.w	r3, r7, #8
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	498e      	ldr	r1, [pc, #568]	; (800d868 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x67c>)
 800d630:	4618      	mov	r0, r3
 800d632:	f000 fd52 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d032      	beq.n	800d6a2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4b6>
				if(cmd->type == CMDtype::get){
 800d63c:	f107 0308 	add.w	r3, r7, #8
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6a1b      	ldr	r3, [r3, #32]
 800d644:	2b02      	cmp	r3, #2
 800d646:	d119      	bne.n	800d67c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x490>
					*reply+=std::to_string(this->conf.rampGain);
 800d648:	f107 030c 	add.w	r3, r7, #12
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800d652:	461a      	mov	r2, r3
 800d654:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800d658:	4611      	mov	r1, r2
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff fc38 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d660:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800d664:	1d3b      	adds	r3, r7, #4
 800d666:	4611      	mov	r1, r2
 800d668:	6818      	ldr	r0, [r3, #0]
 800d66a:	f007 f915 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d66e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800d672:	4618      	mov	r0, r3
 800d674:	f007 f881 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d678:	f000 bc96 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800d67c:	f107 0308 	add.w	r3, r7, #8
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	6a1b      	ldr	r3, [r3, #32]
 800d684:	2b00      	cmp	r3, #0
 800d686:	f040 848f 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.rampGain = cmd->val;
 800d68a:	f107 0308 	add.w	r3, r7, #8
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	b2da      	uxtb	r2, r3
 800d694:	f107 030c 	add.w	r3, r7, #12
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 800d69e:	f000 bc83 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "squareGain"){
 800d6a2:	f107 0308 	add.w	r3, r7, #8
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4970      	ldr	r1, [pc, #448]	; (800d86c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x680>)
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f000 fd15 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d032      	beq.n	800d71c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x530>
				if(cmd->type == CMDtype::get){
 800d6b6:	f107 0308 	add.w	r3, r7, #8
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d119      	bne.n	800d6f6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50a>
					*reply+=std::to_string(this->conf.squareGain);
 800d6c2:	f107 030c 	add.w	r3, r7, #12
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7ff fbfb 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d6da:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800d6de:	1d3b      	adds	r3, r7, #4
 800d6e0:	4611      	mov	r1, r2
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	f007 f8d8 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d6e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f007 f844 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d6f2:	f000 bc59 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800d6f6:	f107 0308 	add.w	r3, r7, #8
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6a1b      	ldr	r3, [r3, #32]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f040 8452 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.squareGain = cmd->val;
 800d704:	f107 0308 	add.w	r3, r7, #8
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	69db      	ldr	r3, [r3, #28]
 800d70c:	b2da      	uxtb	r2, r3
 800d70e:	f107 030c 	add.w	r3, r7, #12
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800d718:	f000 bc46 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "sinGain"){
 800d71c:	f107 0308 	add.w	r3, r7, #8
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4953      	ldr	r1, [pc, #332]	; (800d870 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x684>)
 800d724:	4618      	mov	r0, r3
 800d726:	f000 fcd8 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d032      	beq.n	800d796 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5aa>
				if(cmd->type == CMDtype::get){
 800d730:	f107 0308 	add.w	r3, r7, #8
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6a1b      	ldr	r3, [r3, #32]
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d119      	bne.n	800d770 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x584>
					*reply+=std::to_string(this->conf.sinGain);
 800d73c:	f107 030c 	add.w	r3, r7, #12
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800d746:	461a      	mov	r2, r3
 800d748:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800d74c:	4611      	mov	r1, r2
 800d74e:	4618      	mov	r0, r3
 800d750:	f7ff fbbe 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d754:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800d758:	1d3b      	adds	r3, r7, #4
 800d75a:	4611      	mov	r1, r2
 800d75c:	6818      	ldr	r0, [r3, #0]
 800d75e:	f007 f89b 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d762:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800d766:	4618      	mov	r0, r3
 800d768:	f007 f807 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d76c:	f000 bc1c 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800d770:	f107 0308 	add.w	r3, r7, #8
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	6a1b      	ldr	r3, [r3, #32]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f040 8415 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.sinGain = cmd->val;
 800d77e:	f107 0308 	add.w	r3, r7, #8
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	69db      	ldr	r3, [r3, #28]
 800d786:	b2da      	uxtb	r2, r3
 800d788:	f107 030c 	add.w	r3, r7, #12
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800d792:	f000 bc09 	b.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "triangleGain"){
 800d796:	f107 0308 	add.w	r3, r7, #8
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4935      	ldr	r1, [pc, #212]	; (800d874 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>)
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 fc9b 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d030      	beq.n	800d80c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x620>
				if(cmd->type == CMDtype::get){
 800d7aa:	f107 0308 	add.w	r3, r7, #8
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d118      	bne.n	800d7e8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5fc>
					*reply+=std::to_string(this->conf.triangleGain);
 800d7b6:	f107 030c 	add.w	r3, r7, #12
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800d7c6:	4611      	mov	r1, r2
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7ff fb81 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d7ce:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800d7d2:	1d3b      	adds	r3, r7, #4
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	6818      	ldr	r0, [r3, #0]
 800d7d8:	f007 f85e 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d7dc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f006 ffca 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d7e6:	e3df      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800d7e8:	f107 0308 	add.w	r3, r7, #8
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6a1b      	ldr	r3, [r3, #32]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f040 83d9 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.triangleGain = cmd->val;
 800d7f6:	f107 0308 	add.w	r3, r7, #8
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	69db      	ldr	r3, [r3, #28]
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	f107 030c 	add.w	r3, r7, #12
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800d80a:	e3cd      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "sawToothDownGain"){
 800d80c:	f107 0308 	add.w	r3, r7, #8
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4919      	ldr	r1, [pc, #100]	; (800d878 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68c>)
 800d814:	4618      	mov	r0, r3
 800d816:	f000 fc60 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d03f      	beq.n	800d8a0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b4>
				if(cmd->type == CMDtype::get){
 800d820:	f107 0308 	add.w	r3, r7, #8
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6a1b      	ldr	r3, [r3, #32]
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d127      	bne.n	800d87c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x690>
					*reply+=std::to_string(this->conf.sawToothDownGain);
 800d82c:	f107 030c 	add.w	r3, r7, #12
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800d836:	461a      	mov	r2, r3
 800d838:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800d83c:	4611      	mov	r1, r2
 800d83e:	4618      	mov	r0, r3
 800d840:	f7ff fb46 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d844:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 800d848:	1d3b      	adds	r3, r7, #4
 800d84a:	4611      	mov	r1, r2
 800d84c:	6818      	ldr	r0, [r3, #0]
 800d84e:	f007 f823 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d852:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800d856:	4618      	mov	r0, r3
 800d858:	f006 ff8f 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d85c:	e3a4      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
 800d85e:	bf00      	nop
 800d860:	08018f20 	.word	0x08018f20
 800d864:	08018f2c 	.word	0x08018f2c
 800d868:	08018f3c 	.word	0x08018f3c
 800d86c:	08018f48 	.word	0x08018f48
 800d870:	08018f54 	.word	0x08018f54
 800d874:	08018f5c 	.word	0x08018f5c
 800d878:	08018f6c 	.word	0x08018f6c
				}else if(cmd->type == CMDtype::set){
 800d87c:	f107 0308 	add.w	r3, r7, #8
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	6a1b      	ldr	r3, [r3, #32]
 800d884:	2b00      	cmp	r3, #0
 800d886:	f040 838f 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.sawToothDownGain = cmd->val;
 800d88a:	f107 0308 	add.w	r3, r7, #8
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	69db      	ldr	r3, [r3, #28]
 800d892:	b2da      	uxtb	r2, r3
 800d894:	f107 030c 	add.w	r3, r7, #12
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800d89e:	e383      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "sawToothUpGain"){
 800d8a0:	f107 0308 	add.w	r3, r7, #8
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	49c4      	ldr	r1, [pc, #784]	; (800dbb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9cc>)
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f000 fc16 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d030      	beq.n	800d916 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x72a>
				if(cmd->type == CMDtype::get){
 800d8b4:	f107 0308 	add.w	r3, r7, #8
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6a1b      	ldr	r3, [r3, #32]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d118      	bne.n	800d8f2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x706>
					*reply+=std::to_string(this->conf.sawToothUpGain);
 800d8c0:	f107 030c 	add.w	r3, r7, #12
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff fafc 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d8d8:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800d8dc:	1d3b      	adds	r3, r7, #4
 800d8de:	4611      	mov	r1, r2
 800d8e0:	6818      	ldr	r0, [r3, #0]
 800d8e2:	f006 ffd9 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d8e6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f006 ff45 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d8f0:	e35a      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800d8f2:	f107 0308 	add.w	r3, r7, #8
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f040 8354 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.sawToothUpGain = cmd->val;
 800d900:	f107 0308 	add.w	r3, r7, #8
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	69db      	ldr	r3, [r3, #28]
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	f107 030c 	add.w	r3, r7, #12
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800d914:	e348      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "springGain"){
 800d916:	f107 0308 	add.w	r3, r7, #8
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	49a7      	ldr	r1, [pc, #668]	; (800dbbc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d0>)
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 fbdb 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d030      	beq.n	800d98c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7a0>
				if(cmd->type == CMDtype::get){
 800d92a:	f107 0308 	add.w	r3, r7, #8
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6a1b      	ldr	r3, [r3, #32]
 800d932:	2b02      	cmp	r3, #2
 800d934:	d118      	bne.n	800d968 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x77c>
					*reply+=std::to_string(this->conf.springGain);
 800d936:	f107 030c 	add.w	r3, r7, #12
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d940:	461a      	mov	r2, r3
 800d942:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800d946:	4611      	mov	r1, r2
 800d948:	4618      	mov	r0, r3
 800d94a:	f7ff fac1 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d94e:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800d952:	1d3b      	adds	r3, r7, #4
 800d954:	4611      	mov	r1, r2
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	f006 ff9e 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d95c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800d960:	4618      	mov	r0, r3
 800d962:	f006 ff0a 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d966:	e31f      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800d968:	f107 0308 	add.w	r3, r7, #8
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	6a1b      	ldr	r3, [r3, #32]
 800d970:	2b00      	cmp	r3, #0
 800d972:	f040 8319 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.springGain = cmd->val;
 800d976:	f107 0308 	add.w	r3, r7, #8
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	69db      	ldr	r3, [r3, #28]
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	f107 030c 	add.w	r3, r7, #12
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800d98a:	e30d      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "damperGain"){
 800d98c:	f107 0308 	add.w	r3, r7, #8
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	498b      	ldr	r1, [pc, #556]	; (800dbc0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d4>)
 800d994:	4618      	mov	r0, r3
 800d996:	f000 fba0 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d030      	beq.n	800da02 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x816>
				if(cmd->type == CMDtype::get){
 800d9a0:	f107 0308 	add.w	r3, r7, #8
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	6a1b      	ldr	r3, [r3, #32]
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d118      	bne.n	800d9de <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7f2>
					*reply+=std::to_string(this->conf.damperGain);
 800d9ac:	f107 030c 	add.w	r3, r7, #12
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800d9bc:	4611      	mov	r1, r2
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7ff fa86 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800d9c4:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 800d9c8:	1d3b      	adds	r3, r7, #4
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	6818      	ldr	r0, [r3, #0]
 800d9ce:	f006 ff63 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d9d2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f006 fecf 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d9dc:	e2e4      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800d9de:	f107 0308 	add.w	r3, r7, #8
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6a1b      	ldr	r3, [r3, #32]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f040 82de 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.damperGain = cmd->val;
 800d9ec:	f107 0308 	add.w	r3, r7, #8
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	69db      	ldr	r3, [r3, #28]
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	f107 030c 	add.w	r3, r7, #12
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800da00:	e2d2      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "inertiaGain"){
 800da02:	f107 0308 	add.w	r3, r7, #8
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	496e      	ldr	r1, [pc, #440]	; (800dbc4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d8>)
 800da0a:	4618      	mov	r0, r3
 800da0c:	f000 fb65 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d030      	beq.n	800da78 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88c>
				if(cmd->type == CMDtype::get){
 800da16:	f107 0308 	add.w	r3, r7, #8
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d118      	bne.n	800da54 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x868>
					*reply+=std::to_string(this->conf.inertiaGain);
 800da22:	f107 030c 	add.w	r3, r7, #12
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800da2c:	461a      	mov	r2, r3
 800da2e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800da32:	4611      	mov	r1, r2
 800da34:	4618      	mov	r0, r3
 800da36:	f7ff fa4b 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800da3a:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 800da3e:	1d3b      	adds	r3, r7, #4
 800da40:	4611      	mov	r1, r2
 800da42:	6818      	ldr	r0, [r3, #0]
 800da44:	f006 ff28 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800da48:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800da4c:	4618      	mov	r0, r3
 800da4e:	f006 fe94 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800da52:	e2a9      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800da54:	f107 0308 	add.w	r3, r7, #8
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	6a1b      	ldr	r3, [r3, #32]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f040 82a3 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.inertiaGain = cmd->val;
 800da62:	f107 0308 	add.w	r3, r7, #8
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	69db      	ldr	r3, [r3, #28]
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	f107 030c 	add.w	r3, r7, #12
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800da76:	e297      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "frictionGain"){
 800da78:	f107 0308 	add.w	r3, r7, #8
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4952      	ldr	r1, [pc, #328]	; (800dbc8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9dc>)
 800da80:	4618      	mov	r0, r3
 800da82:	f000 fb2a 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d030      	beq.n	800daee <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x902>
				if(cmd->type == CMDtype::get){
 800da8c:	f107 0308 	add.w	r3, r7, #8
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6a1b      	ldr	r3, [r3, #32]
 800da94:	2b02      	cmp	r3, #2
 800da96:	d118      	bne.n	800daca <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8de>
					*reply+=std::to_string(this->conf.frictionGain);
 800da98:	f107 030c 	add.w	r3, r7, #12
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800daa2:	461a      	mov	r2, r3
 800daa4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800daa8:	4611      	mov	r1, r2
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff fa10 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800dab0:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 800dab4:	1d3b      	adds	r3, r7, #4
 800dab6:	4611      	mov	r1, r2
 800dab8:	6818      	ldr	r0, [r3, #0]
 800daba:	f006 feed 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dabe:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800dac2:	4618      	mov	r0, r3
 800dac4:	f006 fe59 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dac8:	e26e      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800daca:	f107 0308 	add.w	r3, r7, #8
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f040 8268 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.frictionGain = cmd->val;
 800dad8:	f107 0308 	add.w	r3, r7, #8
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	69db      	ldr	r3, [r3, #28]
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	f107 030c 	add.w	r3, r7, #12
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800daec:	e25c      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "endstopGain"){
 800daee:	f107 0308 	add.w	r3, r7, #8
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4935      	ldr	r1, [pc, #212]	; (800dbcc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e0>)
 800daf6:	4618      	mov	r0, r3
 800daf8:	f000 faef 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d030      	beq.n	800db64 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x978>
				if(cmd->type == CMDtype::get){
 800db02:	f107 0308 	add.w	r3, r7, #8
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	6a1b      	ldr	r3, [r3, #32]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d118      	bne.n	800db40 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x954>
					*reply+=std::to_string(this->conf.endstop_gain);
 800db0e:	f107 030c 	add.w	r3, r7, #12
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db18:	461a      	mov	r2, r3
 800db1a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800db1e:	4611      	mov	r1, r2
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff f9d5 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800db26:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 800db2a:	1d3b      	adds	r3, r7, #4
 800db2c:	4611      	mov	r1, r2
 800db2e:	6818      	ldr	r0, [r3, #0]
 800db30:	f006 feb2 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800db34:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800db38:	4618      	mov	r0, r3
 800db3a:	f006 fe1e 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800db3e:	e233      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}else if(cmd->type == CMDtype::set){
 800db40:	f107 0308 	add.w	r3, r7, #8
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	6a1b      	ldr	r3, [r3, #32]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f040 822d 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.endstop_gain = cmd->val;
 800db4e:	f107 0308 	add.w	r3, r7, #8
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	69db      	ldr	r3, [r3, #28]
 800db56:	b29a      	uxth	r2, r3
 800db58:	f107 030c 	add.w	r3, r7, #12
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db62:	e221      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "totalGain"){
 800db64:	f107 0308 	add.w	r3, r7, #8
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4919      	ldr	r1, [pc, #100]	; (800dbd0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e4>)
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 fab4 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d03f      	beq.n	800dbf8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0c>
				if(cmd->type == CMDtype::get){
 800db78:	f107 0308 	add.w	r3, r7, #8
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6a1b      	ldr	r3, [r3, #32]
 800db80:	2b02      	cmp	r3, #2
 800db82:	d127      	bne.n	800dbd4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e8>
					*reply+=std::to_string(this->conf.totalGain);
 800db84:	f107 030c 	add.w	r3, r7, #12
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800db8e:	461a      	mov	r2, r3
 800db90:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800db94:	4611      	mov	r1, r2
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff f99a 	bl	800ced0 <_ZNSt7__cxx119to_stringEi>
 800db9c:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 800dba0:	1d3b      	adds	r3, r7, #4
 800dba2:	4611      	mov	r1, r2
 800dba4:	6818      	ldr	r0, [r3, #0]
 800dba6:	f006 fe77 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dbaa:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f006 fde3 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dbb4:	e1f8      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
 800dbb6:	bf00      	nop
 800dbb8:	08018f80 	.word	0x08018f80
 800dbbc:	08018f90 	.word	0x08018f90
 800dbc0:	08018f9c 	.word	0x08018f9c
 800dbc4:	08018fa8 	.word	0x08018fa8
 800dbc8:	08018fb4 	.word	0x08018fb4
 800dbcc:	08018fc4 	.word	0x08018fc4
 800dbd0:	08018fd0 	.word	0x08018fd0
				}else if(cmd->type == CMDtype::set){
 800dbd4:	f107 0308 	add.w	r3, r7, #8
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	6a1b      	ldr	r3, [r3, #32]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f040 81e3 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
					this->conf.totalGain = cmd->val;
 800dbe2:	f107 0308 	add.w	r3, r7, #8
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	69db      	ldr	r3, [r3, #28]
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	f107 030c 	add.w	r3, r7, #12
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800dbf6:	e1d7      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				}
	}else if(cmd->cmd == "pos"){
 800dbf8:	f107 0308 	add.w	r3, r7, #8
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	49ab      	ldr	r1, [pc, #684]	; (800deac <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc0>)
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 fa6a 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d03f      	beq.n	800dc8c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xaa0>
		if(cmd->type == CMDtype::get){
 800dc0c:	f107 0308 	add.w	r3, r7, #8
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	6a1b      	ldr	r3, [r3, #32]
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	d11a      	bne.n	800dc4e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa62>
			*reply+=std::to_string(this->enc->getPos());
 800dc18:	f107 030c 	add.w	r3, r7, #12
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7fd fba5 	bl	800b370 <_ZN12EncoderLocal6getPosEv>
 800dc26:	4602      	mov	r2, r0
 800dc28:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff f964 	bl	800cefc <_ZNSt7__cxx119to_stringEl>
 800dc34:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 800dc38:	1d3b      	adds	r3, r7, #4
 800dc3a:	4611      	mov	r1, r2
 800dc3c:	6818      	ldr	r0, [r3, #0]
 800dc3e:	f006 fe2b 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dc42:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800dc46:	4618      	mov	r0, r3
 800dc48:	f006 fd97 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dc4c:	e1ac      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 800dc4e:	f107 0308 	add.w	r3, r7, #8
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d112      	bne.n	800dc80 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa94>
 800dc5a:	f107 030c 	add.w	r3, r7, #12
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00c      	beq.n	800dc80 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa94>
			this->enc->setPos(cmd->val);
 800dc66:	f107 030c 	add.w	r3, r7, #12
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800dc6e:	f107 0308 	add.w	r3, r7, #8
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	69db      	ldr	r3, [r3, #28]
 800dc76:	4619      	mov	r1, r3
 800dc78:	4610      	mov	r0, r2
 800dc7a:	f7fd fb91 	bl	800b3a0 <_ZN12EncoderLocal6setPosEl>
 800dc7e:	e193      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}else{
			*reply += "Err. Setup enctype first";
 800dc80:	1d3b      	adds	r3, r7, #4
 800dc82:	498b      	ldr	r1, [pc, #556]	; (800deb0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc4>)
 800dc84:	6818      	ldr	r0, [r3, #0]
 800dc86:	f006 fe31 	bl	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dc8a:	e18d      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}
	}else if(cmd->cmd == "hidrate" && cmd->type == CMDtype::get){
 800dc8c:	f107 0308 	add.w	r3, r7, #8
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4988      	ldr	r1, [pc, #544]	; (800deb4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc8>)
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 fa20 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d007      	beq.n	800dcb0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xac4>
 800dca0:	f107 0308 	add.w	r3, r7, #8
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6a1b      	ldr	r3, [r3, #32]
 800dca8:	2b02      	cmp	r3, #2
 800dcaa:	d101      	bne.n	800dcb0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xac4>
 800dcac:	2301      	movs	r3, #1
 800dcae:	e000      	b.n	800dcb2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xac6>
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d028      	beq.n	800dd08 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb1c>
		if(ffb->hid_out_period != 0){
 800dcb6:	f107 030c 	add.w	r3, r7, #12
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcbe:	6a1b      	ldr	r3, [r3, #32]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d01b      	beq.n	800dcfc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb10>
			*reply+=std::to_string(1000/ffb->hid_out_period);
 800dcc4:	f107 030c 	add.w	r3, r7, #12
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dccc:	6a1b      	ldr	r3, [r3, #32]
 800dcce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dcd2:	fbb2 f2f3 	udiv	r2, r2, r3
 800dcd6:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800dcda:	4611      	mov	r1, r2
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7ff f923 	bl	800cf28 <_ZNSt7__cxx119to_stringEm>
 800dce2:	f507 7209 	add.w	r2, r7, #548	; 0x224
 800dce6:	1d3b      	adds	r3, r7, #4
 800dce8:	4611      	mov	r1, r2
 800dcea:	6818      	ldr	r0, [r3, #0]
 800dcec:	f006 fdd4 	bl	8014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dcf0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f006 fd40 	bl	801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dcfa:	e155      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}else{
			*reply+="0";
 800dcfc:	1d3b      	adds	r3, r7, #4
 800dcfe:	496e      	ldr	r1, [pc, #440]	; (800deb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xccc>)
 800dd00:	6818      	ldr	r0, [r3, #0]
 800dd02:	f006 fdf3 	bl	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dd06:	e14f      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}
	}else if(cmd->cmd == "led"){
 800dd08:	f107 0308 	add.w	r3, r7, #8
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	496b      	ldr	r1, [pc, #428]	; (800debc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcd0>)
 800dd10:	4618      	mov	r0, r3
 800dd12:	f000 f9e2 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d04d      	beq.n	800ddb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbcc>
		if(cmd->type == CMDtype::set){
 800dd1c:	f107 0308 	add.w	r3, r7, #8
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6a1b      	ldr	r3, [r3, #32]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f040 813f 	bne.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
			RGB rgb_array[16] = {0};
 800dd2a:	f107 0314 	add.w	r3, r7, #20
 800dd2e:	4618      	mov	r0, r3
 800dd30:	2330      	movs	r3, #48	; 0x30
 800dd32:	461a      	mov	r2, r3
 800dd34:	2100      	movs	r1, #0
 800dd36:	f009 fe16 	bl	8017966 <memset>
			for(uint8_t i = 0;i<LED_COUNT;i++)
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	f887 3246 	strb.w	r3, [r7, #582]	; 0x246
 800dd40:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 800dd44:	2b0f      	cmp	r3, #15
 800dd46:	d82b      	bhi.n	800dda0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbb4>
			{
				uint8_t tmp = (cmd->val >> (2*i)) & 0b11;
 800dd48:	f107 0308 	add.w	r3, r7, #8
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	69da      	ldr	r2, [r3, #28]
 800dd50:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 800dd54:	005b      	lsls	r3, r3, #1
 800dd56:	fa42 f303 	asr.w	r3, r2, r3
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f003 0303 	and.w	r3, r3, #3
 800dd60:	f887 3244 	strb.w	r3, [r7, #580]	; 0x244
				if(tmp >=0 && tmp <=3)
 800dd64:	f897 3244 	ldrb.w	r3, [r7, #580]	; 0x244
 800dd68:	2b03      	cmp	r3, #3
 800dd6a:	d813      	bhi.n	800dd94 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xba8>
					rgb_array[i] = defaultRGB[tmp];
 800dd6c:	f897 2244 	ldrb.w	r2, [r7, #580]	; 0x244
 800dd70:	f897 1246 	ldrb.w	r1, [r7, #582]	; 0x246
 800dd74:	f107 0014 	add.w	r0, r7, #20
 800dd78:	460b      	mov	r3, r1
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	440b      	add	r3, r1
 800dd7e:	4418      	add	r0, r3
 800dd80:	494f      	ldr	r1, [pc, #316]	; (800dec0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcd4>)
 800dd82:	4613      	mov	r3, r2
 800dd84:	005b      	lsls	r3, r3, #1
 800dd86:	4413      	add	r3, r2
 800dd88:	18ca      	adds	r2, r1, r3
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	8811      	ldrh	r1, [r2, #0]
 800dd8e:	7892      	ldrb	r2, [r2, #2]
 800dd90:	8019      	strh	r1, [r3, #0]
 800dd92:	709a      	strb	r2, [r3, #2]
			for(uint8_t i = 0;i<LED_COUNT;i++)
 800dd94:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 800dd98:	3301      	adds	r3, #1
 800dd9a:	f887 3246 	strb.w	r3, [r7, #582]	; 0x246
 800dd9e:	e7cf      	b.n	800dd40 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb54>
			}
			setup_ws2812(rgb_array, LED_COUNT);
 800dda0:	f107 0314 	add.w	r3, r7, #20
 800dda4:	2110      	movs	r1, #16
 800dda6:	4618      	mov	r0, r3
 800dda8:	f003 fefa 	bl	8011ba0 <_Z12setup_ws2812P3RGBh>
			*reply+="OK";
 800ddac:	1d3b      	adds	r3, r7, #4
 800ddae:	4945      	ldr	r1, [pc, #276]	; (800dec4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcd8>)
 800ddb0:	6818      	ldr	r0, [r3, #0]
 800ddb2:	f006 fd9b 	bl	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ddb6:	e0f7      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}
	}else if(cmd->type == CMDtype::dash){
 800ddb8:	f107 0308 	add.w	r3, r7, #8
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	6a1b      	ldr	r3, [r3, #32]
 800ddc0:	2b07      	cmp	r3, #7
 800ddc2:	f040 80db 	bne.w	800df7c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd90>
		flag = true;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
		telemetry = (SimDisplayPacket*)(cmd->cmd.c_str());
 800ddcc:	f107 0308 	add.w	r3, r7, #8
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f006 fd8e 	bl	80148f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	4b3b      	ldr	r3, [pc, #236]	; (800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcdc>)
 800dddc:	601a      	str	r2, [r3, #0]
		uint8_t rgb_array = 0;
 800ddde:	2300      	movs	r3, #0
 800dde0:	f887 3245 	strb.w	r3, [r7, #581]	; 0x245
		if (telemetry->status == SDP_STATUS_OFF)
 800dde4:	4b38      	ldr	r3, [pc, #224]	; (800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcdc>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	785b      	ldrb	r3, [r3, #1]
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	bf0c      	ite	eq
 800ddf0:	2301      	moveq	r3, #1
 800ddf2:	2300      	movne	r3, #0
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d005      	beq.n	800de06 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc1a>
			setup_rpm_ws2812(rgb_array);
 800ddfa:	f897 3245 	ldrb.w	r3, [r7, #581]	; 0x245
 800ddfe:	4618      	mov	r0, r3
 800de00:	f003 fe92 	bl	8011b28 <_Z16setup_rpm_ws2812h>
 800de04:	e0d0      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		else if (telemetry->status == SDP_STATUS_LIVE && telemetry->rpm <= (telemetry->shftrpm*100/95))
 800de06:	4b30      	ldr	r3, [pc, #192]	; (800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcdc>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	785b      	ldrb	r3, [r3, #1]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d117      	bne.n	800de42 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc56>
 800de12:	4b2d      	ldr	r3, [pc, #180]	; (800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcdc>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	885b      	ldrh	r3, [r3, #2]
 800de18:	b29b      	uxth	r3, r3
 800de1a:	4619      	mov	r1, r3
 800de1c:	4b2a      	ldr	r3, [pc, #168]	; (800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcdc>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	88db      	ldrh	r3, [r3, #6]
 800de22:	b29b      	uxth	r3, r3
 800de24:	461a      	mov	r2, r3
 800de26:	2364      	movs	r3, #100	; 0x64
 800de28:	fb03 f302 	mul.w	r3, r3, r2
 800de2c:	4a27      	ldr	r2, [pc, #156]	; (800decc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce0>)
 800de2e:	fb82 0203 	smull	r0, r2, r2, r3
 800de32:	441a      	add	r2, r3
 800de34:	1192      	asrs	r2, r2, #6
 800de36:	17db      	asrs	r3, r3, #31
 800de38:	1ad3      	subs	r3, r2, r3
 800de3a:	4299      	cmp	r1, r3
 800de3c:	dc01      	bgt.n	800de42 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc56>
 800de3e:	2301      	movs	r3, #1
 800de40:	e000      	b.n	800de44 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc58>
 800de42:	2300      	movs	r3, #0
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 80af 	beq.w	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		{
			if(telemetry->rpm < telemetry->optrpm)
 800de4a:	4b1f      	ldr	r3, [pc, #124]	; (800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcdc>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	885b      	ldrh	r3, [r3, #2]
 800de50:	b29a      	uxth	r2, r3
 800de52:	4b1d      	ldr	r3, [pc, #116]	; (800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcdc>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	889b      	ldrh	r3, [r3, #4]
 800de58:	b29b      	uxth	r3, r3
 800de5a:	429a      	cmp	r2, r3
 800de5c:	bf34      	ite	cc
 800de5e:	2301      	movcc	r3, #1
 800de60:	2300      	movcs	r3, #0
 800de62:	b2db      	uxtb	r3, r3
 800de64:	2b00      	cmp	r3, #0
 800de66:	d033      	beq.n	800ded0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>
				rgb_array = std::max(0, telemetry->rpm - 1500) * 8 / (telemetry->optrpm - 1500);
 800de68:	2300      	movs	r3, #0
 800de6a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800de6e:	4b16      	ldr	r3, [pc, #88]	; (800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcdc>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	885b      	ldrh	r3, [r3, #2]
 800de74:	b29b      	uxth	r3, r3
 800de76:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800de7a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800de7e:	f507 7210 	add.w	r2, r7, #576	; 0x240
 800de82:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800de86:	4611      	mov	r1, r2
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 f939 	bl	800e100 <_ZSt3maxIiERKT_S2_S2_>
 800de8e:	4603      	mov	r3, r0
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	00da      	lsls	r2, r3, #3
 800de94:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcdc>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	889b      	ldrh	r3, [r3, #4]
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800dea0:	fb92 f3f3 	sdiv	r3, r2, r3
 800dea4:	f887 3245 	strb.w	r3, [r7, #581]	; 0x245
 800dea8:	e062      	b.n	800df70 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd84>
 800deaa:	bf00      	nop
 800deac:	08018fdc 	.word	0x08018fdc
 800deb0:	08018efc 	.word	0x08018efc
 800deb4:	08018fe0 	.word	0x08018fe0
 800deb8:	08018fe8 	.word	0x08018fe8
 800debc:	08018fec 	.word	0x08018fec
 800dec0:	20000010 	.word	0x20000010
 800dec4:	08018ff0 	.word	0x08018ff0
 800dec8:	20000b40 	.word	0x20000b40
 800decc:	ac769185 	.word	0xac769185
			else if(telemetry->rpm < telemetry->shftrpm)
 800ded0:	4b39      	ldr	r3, [pc, #228]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	885b      	ldrh	r3, [r3, #2]
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	4b37      	ldr	r3, [pc, #220]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	88db      	ldrh	r3, [r3, #6]
 800dede:	b29b      	uxth	r3, r3
 800dee0:	429a      	cmp	r2, r3
 800dee2:	bf34      	ite	cc
 800dee4:	2301      	movcc	r3, #1
 800dee6:	2300      	movcs	r3, #0
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	2b00      	cmp	r3, #0
 800deec:	d01b      	beq.n	800df26 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd3a>
				rgb_array = 8 + (telemetry->rpm - telemetry->optrpm)*4/(telemetry->shftrpm - telemetry->optrpm);
 800deee:	4b32      	ldr	r3, [pc, #200]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	885b      	ldrh	r3, [r3, #2]
 800def4:	b29b      	uxth	r3, r3
 800def6:	461a      	mov	r2, r3
 800def8:	4b2f      	ldr	r3, [pc, #188]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	889b      	ldrh	r3, [r3, #4]
 800defe:	b29b      	uxth	r3, r3
 800df00:	1ad3      	subs	r3, r2, r3
 800df02:	009a      	lsls	r2, r3, #2
 800df04:	4b2c      	ldr	r3, [pc, #176]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	88db      	ldrh	r3, [r3, #6]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	4619      	mov	r1, r3
 800df0e:	4b2a      	ldr	r3, [pc, #168]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	889b      	ldrh	r3, [r3, #4]
 800df14:	b29b      	uxth	r3, r3
 800df16:	1acb      	subs	r3, r1, r3
 800df18:	fb92 f3f3 	sdiv	r3, r2, r3
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	3308      	adds	r3, #8
 800df20:	f887 3245 	strb.w	r3, [r7, #581]	; 0x245
 800df24:	e024      	b.n	800df70 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd84>
			else
				rgb_array = 12 + (telemetry->rpm - telemetry->shftrpm)*4/((telemetry->shftrpm*100/95) - telemetry->shftrpm);
 800df26:	4b24      	ldr	r3, [pc, #144]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	885b      	ldrh	r3, [r3, #2]
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	461a      	mov	r2, r3
 800df30:	4b21      	ldr	r3, [pc, #132]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	88db      	ldrh	r3, [r3, #6]
 800df36:	b29b      	uxth	r3, r3
 800df38:	1ad3      	subs	r3, r2, r3
 800df3a:	009a      	lsls	r2, r3, #2
 800df3c:	4b1e      	ldr	r3, [pc, #120]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	88db      	ldrh	r3, [r3, #6]
 800df42:	b29b      	uxth	r3, r3
 800df44:	4619      	mov	r1, r3
 800df46:	2364      	movs	r3, #100	; 0x64
 800df48:	fb03 f301 	mul.w	r3, r3, r1
 800df4c:	491b      	ldr	r1, [pc, #108]	; (800dfbc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdd0>)
 800df4e:	fb81 0103 	smull	r0, r1, r1, r3
 800df52:	4419      	add	r1, r3
 800df54:	1189      	asrs	r1, r1, #6
 800df56:	17db      	asrs	r3, r3, #31
 800df58:	1acb      	subs	r3, r1, r3
 800df5a:	4917      	ldr	r1, [pc, #92]	; (800dfb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdcc>)
 800df5c:	6809      	ldr	r1, [r1, #0]
 800df5e:	88c9      	ldrh	r1, [r1, #6]
 800df60:	b289      	uxth	r1, r1
 800df62:	1a5b      	subs	r3, r3, r1
 800df64:	fb92 f3f3 	sdiv	r3, r2, r3
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	330c      	adds	r3, #12
 800df6c:	f887 3245 	strb.w	r3, [r7, #581]	; 0x245
			setup_rpm_ws2812(rgb_array);
 800df70:	f897 3245 	ldrb.w	r3, [r7, #581]	; 0x245
 800df74:	4618      	mov	r0, r3
 800df76:	f003 fdd7 	bl	8011b28 <_Z16setup_rpm_ws2812h>
 800df7a:	e015      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
		}
	}else if(cmd->cmd == "help"){
 800df7c:	f107 0308 	add.w	r3, r7, #8
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	490f      	ldr	r1, [pc, #60]	; (800dfc0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdd4>)
 800df84:	4618      	mov	r0, r3
 800df86:	f000 f8a8 	bl	800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d008      	beq.n	800dfa2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdb6>
		flag = false;
 800df90:	2300      	movs	r3, #0
 800df92:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
		*reply += "FFBWheel commands:\n"
 800df96:	1d3b      	adds	r3, r7, #4
 800df98:	490a      	ldr	r1, [pc, #40]	; (800dfc4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdd8>)
 800df9a:	6818      	ldr	r0, [r3, #0]
 800df9c:	f006 fca6 	bl	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dfa0:	e002      	b.n	800dfa8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdbc>
				"power,zeroenc,enctype,degrees,ppr,drvtype,btntype,lsbtn,btnnum,btntypes,btnpol,btncut,axismask\n"; // TODO
	}else{
		flag = false;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	}


	return flag;
 800dfa8:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	f507 7712 	add.w	r7, r7, #584	; 0x248
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	20000b40 	.word	0x20000b40
 800dfbc:	ac769185 	.word	0xac769185
 800dfc0:	08018ddc 	.word	0x08018ddc
 800dfc4:	08018ff4 	.word	0x08018ff4

0800dfc8 <_ZThn8_N8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	bool command(ParsedCommand* cmd,std::string* reply);
 800dfc8:	f1a0 0008 	sub.w	r0, r0, #8
 800dfcc:	f7ff b90e 	b.w	800d1ec <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

0800dfd0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800dfd0:	b408      	push	{r3}
 800dfd2:	b590      	push	{r4, r7, lr}
 800dfd4:	b088      	sub	sp, #32
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	60f8      	str	r0, [r7, #12]
 800dfda:	60b9      	str	r1, [r7, #8]
 800dfdc:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	3307      	adds	r3, #7
 800dfe2:	3307      	adds	r3, #7
 800dfe4:	08db      	lsrs	r3, r3, #3
 800dfe6:	00db      	lsls	r3, r3, #3
 800dfe8:	ebad 0d03 	sub.w	sp, sp, r3
 800dfec:	466b      	mov	r3, sp
 800dfee:	3307      	adds	r3, #7
 800dff0:	08db      	lsrs	r3, r3, #3
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800dff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dffa:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800dffc:	68bc      	ldr	r4, [r7, #8]
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e002:	6879      	ldr	r1, [r7, #4]
 800e004:	69f8      	ldr	r0, [r7, #28]
 800e006:	47a0      	blx	r4
 800e008:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	69fa      	ldr	r2, [r7, #28]
 800e00e:	18d4      	adds	r4, r2, r3
 800e010:	f107 0314 	add.w	r3, r7, #20
 800e014:	4618      	mov	r0, r3
 800e016:	f006 fa8f 	bl	8014538 <_ZNSaIcEC1Ev>
 800e01a:	f107 0314 	add.w	r3, r7, #20
 800e01e:	4622      	mov	r2, r4
 800e020:	69f9      	ldr	r1, [r7, #28]
 800e022:	68f8      	ldr	r0, [r7, #12]
 800e024:	f000 f87f 	bl	800e126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 800e028:	f107 0314 	add.w	r3, r7, #20
 800e02c:	4618      	mov	r0, r3
 800e02e:	f006 fa84 	bl	801453a <_ZNSaIcED1Ev>
    }
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	3720      	adds	r7, #32
 800e036:	46bd      	mov	sp, r7
 800e038:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e03c:	b001      	add	sp, #4
 800e03e:	4770      	bx	lr

0800e040 <_ZN9__gnu_cxxneIP13ParsedCommandSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e040:	b590      	push	{r4, r7, lr}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7fb fef0 	bl	8009e30 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800e050:	4603      	mov	r3, r0
 800e052:	681c      	ldr	r4, [r3, #0]
 800e054:	6838      	ldr	r0, [r7, #0]
 800e056:	f7fb feeb 	bl	8009e30 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800e05a:	4603      	mov	r3, r0
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	429c      	cmp	r4, r3
 800e060:	bf14      	ite	ne
 800e062:	2301      	movne	r3, #1
 800e064:	2300      	moveq	r3, #0
 800e066:	b2db      	uxtb	r3, r3
 800e068:	4618      	mov	r0, r3
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd90      	pop	{r4, r7, pc}

0800e070 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	601a      	str	r2, [r3, #0]
	return *this;
 800e084:	687b      	ldr	r3, [r7, #4]
      }
 800e086:	4618      	mov	r0, r3
 800e088:	370c      	adds	r7, #12
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bc80      	pop	{r7}
 800e08e:	4770      	bx	lr

0800e090 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4618      	mov	r0, r3
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bc80      	pop	{r7}
 800e0a4:	4770      	bx	lr

0800e0a6 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e0a6:	b480      	push	{r7}
 800e0a8:	b083      	sub	sp, #12
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	1d1a      	adds	r2, r3, #4
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	601a      	str	r2, [r3, #0]
	return *this;
 800e0b8:	687b      	ldr	r3, [r7, #4]
      }
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	370c      	adds	r7, #12
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bc80      	pop	{r7}
 800e0c2:	4770      	bx	lr

0800e0c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bc80      	pop	{r7}
 800e0d8:	4770      	bx	lr

0800e0da <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b082      	sub	sp, #8
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800e0e4:	6839      	ldr	r1, [r7, #0]
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f006 fc1b 	bl	8014922 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	bf0c      	ite	eq
 800e0f2:	2301      	moveq	r3, #1
 800e0f4:	2300      	movne	r3, #0
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	429a      	cmp	r2, r3
 800e114:	da01      	bge.n	800e11a <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	e000      	b.n	800e11c <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800e11a:	687b      	ldr	r3, [r7, #4]
    }
 800e11c:	4618      	mov	r0, r3
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	bc80      	pop	{r7}
 800e124:	4770      	bx	lr

0800e126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800e126:	b590      	push	{r4, r7, lr}
 800e128:	b085      	sub	sp, #20
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	60f8      	str	r0, [r7, #12]
 800e12e:	60b9      	str	r1, [r7, #8]
 800e130:	607a      	str	r2, [r7, #4]
 800e132:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800e134:	68fc      	ldr	r4, [r7, #12]
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f006 fa3f 	bl	80145ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800e13c:	4603      	mov	r3, r0
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	4619      	mov	r1, r3
 800e142:	4620      	mov	r0, r4
 800e144:	f006 fc00 	bl	8014948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	68b9      	ldr	r1, [r7, #8]
 800e14c:	68f8      	ldr	r0, [r7, #12]
 800e14e:	f000 f805 	bl	800e15c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	4618      	mov	r0, r3
 800e156:	3714      	adds	r7, #20
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd90      	pop	{r4, r7, pc}

0800e15c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b086      	sub	sp, #24
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	68b9      	ldr	r1, [r7, #8]
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f000 f804 	bl	800e17a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800e172:	bf00      	nop
 800e174:	3718      	adds	r7, #24
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800e17a:	b590      	push	{r4, r7, lr}
 800e17c:	b087      	sub	sp, #28
 800e17e:	af00      	add	r7, sp, #0
 800e180:	60f8      	str	r0, [r7, #12]
 800e182:	60b9      	str	r1, [r7, #8]
 800e184:	607a      	str	r2, [r7, #4]
 800e186:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800e188:	4623      	mov	r3, r4
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	68b9      	ldr	r1, [r7, #8]
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f000 f804 	bl	800e19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800e194:	bf00      	nop
 800e196:	371c      	adds	r7, #28
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd90      	pop	{r4, r7, pc}

0800e19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b086      	sub	sp, #24
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
 800e1a8:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800e1aa:	68b8      	ldr	r0, [r7, #8]
 800e1ac:	f000 f83e 	bl	800e22c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d005      	beq.n	800e1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800e1b6:	68ba      	ldr	r2, [r7, #8]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d001      	beq.n	800e1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e000      	b.n	800e1c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d002      	beq.n	800e1ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800e1c8:	4817      	ldr	r0, [pc, #92]	; (800e228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800e1ca:	f006 f9ba 	bl	8014542 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800e1ce:	6879      	ldr	r1, [r7, #4]
 800e1d0:	68b8      	ldr	r0, [r7, #8]
 800e1d2:	f000 f843 	bl	800e25c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2b0f      	cmp	r3, #15
 800e1de:	d910      	bls.n	800e202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800e1e0:	f107 0314 	add.w	r3, r7, #20
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	68f8      	ldr	r0, [r7, #12]
 800e1ea:	f006 f9ef 	bl	80145cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f006 f9dd 	bl	80145b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f006 f9de 	bl	80145be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f006 f9d7 	bl	80145b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800e208:	4603      	mov	r3, r0
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	68b9      	ldr	r1, [r7, #8]
 800e20e:	4618      	mov	r0, r3
 800e210:	f006 fa21 	bl	8014656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	4619      	mov	r1, r3
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f006 f9d2 	bl	80145c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800e21e:	bf00      	nop
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	08019068 	.word	0x08019068

0800e22c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	bf0c      	ite	eq
 800e23a:	2301      	moveq	r3, #1
 800e23c:	2300      	movne	r3, #0
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	4618      	mov	r0, r3
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	bc80      	pop	{r7}
 800e248:	4770      	bx	lr

0800e24a <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800e24a:	b480      	push	{r7}
 800e24c:	b083      	sub	sp, #12
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e252:	4618      	mov	r0, r3
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	bc80      	pop	{r7}
 800e25a:	4770      	bx	lr

0800e25c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800e25c:	b5b0      	push	{r4, r5, r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800e266:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800e268:	1d3b      	adds	r3, r7, #4
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7ff ffed 	bl	800e24a <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800e270:	462a      	mov	r2, r5
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	4620      	mov	r0, r4
 800e276:	f000 f805 	bl	800e284 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800e27a:	4603      	mov	r3, r0
    }
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bdb0      	pop	{r4, r5, r7, pc}

0800e284 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e290:	68ba      	ldr	r2, [r7, #8]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	1ad3      	subs	r3, r2, r3
    }
 800e296:	4618      	mov	r0, r3
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bc80      	pop	{r7}
 800e29e:	4770      	bx	lr

0800e2a0 <_Z17usbInit_HID_Wheelv>:
#include "usbd_desc.h"

extern USBD_HandleTypeDef hUsbDeviceFS;
USBD_ClassTypeDef* handles[2];

void usbInit_HID_Wheel(){
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
	handles[CDC_IDX] = &USBD_CDC;
 800e2a6:	4b24      	ldr	r3, [pc, #144]	; (800e338 <_Z17usbInit_HID_Wheelv+0x98>)
 800e2a8:	4a24      	ldr	r2, [pc, #144]	; (800e33c <_Z17usbInit_HID_Wheelv+0x9c>)
 800e2aa:	601a      	str	r2, [r3, #0]
	handles[HID_IDX] = &USBD_CUSTOM_HID;
 800e2ac:	4b22      	ldr	r3, [pc, #136]	; (800e338 <_Z17usbInit_HID_Wheelv+0x98>)
 800e2ae:	4a24      	ldr	r2, [pc, #144]	; (800e340 <_Z17usbInit_HID_Wheelv+0xa0>)
 800e2b0:	605a      	str	r2, [r3, #4]

	// Base Descriptor
	USB_ConfigDescType base_desc = {
 800e2b2:	4a24      	ldr	r2, [pc, #144]	; (800e344 <_Z17usbInit_HID_Wheelv+0xa4>)
 800e2b4:	1d3b      	adds	r3, r7, #4
 800e2b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800e2b8:	c303      	stmia	r3!, {r0, r1}
 800e2ba:	701a      	strb	r2, [r3, #0]
		0xC0,   /* bmAttributes: self powered */
		0x32,   /* MaxPower 100 mA */

	};

	USBD_Init(&hUsbDeviceFS, &FS_Desc_Composite, DEVICE_FS);
 800e2bc:	2200      	movs	r2, #0
 800e2be:	4922      	ldr	r1, [pc, #136]	; (800e348 <_Z17usbInit_HID_Wheelv+0xa8>)
 800e2c0:	4822      	ldr	r0, [pc, #136]	; (800e34c <_Z17usbInit_HID_Wheelv+0xac>)
 800e2c2:	f004 fd97 	bl	8012df4 <USBD_Init>

	// Add descriptors and class functions to composite device
	USBD_Composite_Set_Classes(handles,2,&base_desc);
 800e2c6:	1d3b      	adds	r3, r7, #4
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	2102      	movs	r1, #2
 800e2cc:	481a      	ldr	r0, [pc, #104]	; (800e338 <_Z17usbInit_HID_Wheelv+0x98>)
 800e2ce:	f004 f93f 	bl	8012550 <USBD_Composite_Set_Classes>

	// Define endpoints

	//HID
	USBD_Composite_EPIN_To_Class(CUSTOM_HID_EPIN_ADDR, HID_IDX);
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	2083      	movs	r0, #131	; 0x83
 800e2d6:	f004 f8bf 	bl	8012458 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPOUT_To_Class(CUSTOM_HID_EPOUT_ADDR, HID_IDX);
 800e2da:	2101      	movs	r1, #1
 800e2dc:	2002      	movs	r0, #2
 800e2de:	f004 f8d1 	bl	8012484 <USBD_Composite_EPOUT_To_Class>
	USBD_Composite_InterfaceToClass(HID_INTERFACE,HID_IDX);
 800e2e2:	2101      	movs	r1, #1
 800e2e4:	2002      	movs	r0, #2
 800e2e6:	f004 fafd 	bl	80128e4 <USBD_Composite_InterfaceToClass>

	// CDC
	USBD_Composite_EPIN_To_Class(CDC_CMD_EP, CDC_IDX);
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	2082      	movs	r0, #130	; 0x82
 800e2ee:	f004 f8b3 	bl	8012458 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_IN_EP, CDC_IDX);
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	2081      	movs	r0, #129	; 0x81
 800e2f6:	f004 f8af 	bl	8012458 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_OUT_EP, CDC_IDX);
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	2001      	movs	r0, #1
 800e2fe:	f004 f8ab 	bl	8012458 <USBD_Composite_EPIN_To_Class>

	USBD_Composite_InterfaceToClass(CDC_INTERFACE,CDC_IDX);
 800e302:	2100      	movs	r1, #0
 800e304:	2000      	movs	r0, #0
 800e306:	f004 faed 	bl	80128e4 <USBD_Composite_InterfaceToClass>
	USBD_Composite_InterfaceToClass(CDC_INTERFACE_DATA,CDC_IDX);
 800e30a:	2100      	movs	r1, #0
 800e30c:	2001      	movs	r0, #1
 800e30e:	f004 fae9 	bl	80128e4 <USBD_Composite_InterfaceToClass>


	USBD_RegisterClass(&hUsbDeviceFS, &USBD_Composite);
 800e312:	490f      	ldr	r1, [pc, #60]	; (800e350 <_Z17usbInit_HID_Wheelv+0xb0>)
 800e314:	480d      	ldr	r0, [pc, #52]	; (800e34c <_Z17usbInit_HID_Wheelv+0xac>)
 800e316:	f004 fd98 	bl	8012e4a <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800e31a:	490e      	ldr	r1, [pc, #56]	; (800e354 <_Z17usbInit_HID_Wheelv+0xb4>)
 800e31c:	480b      	ldr	r0, [pc, #44]	; (800e34c <_Z17usbInit_HID_Wheelv+0xac>)
 800e31e:	f003 fec7 	bl	80120b0 <USBD_CDC_RegisterInterface>
	USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 800e322:	490d      	ldr	r1, [pc, #52]	; (800e358 <_Z17usbInit_HID_Wheelv+0xb8>)
 800e324:	4809      	ldr	r0, [pc, #36]	; (800e34c <_Z17usbInit_HID_Wheelv+0xac>)
 800e326:	f005 ff9f 	bl	8014268 <USBD_CUSTOM_HID_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800e32a:	4808      	ldr	r0, [pc, #32]	; (800e34c <_Z17usbInit_HID_Wheelv+0xac>)
 800e32c:	f004 fda6 	bl	8012e7c <USBD_Start>
}
 800e330:	bf00      	nop
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20000b44 	.word	0x20000b44
 800e33c:	2000002c 	.word	0x2000002c
 800e340:	2000061c 	.word	0x2000061c
 800e344:	08019094 	.word	0x08019094
 800e348:	200006f0 	.word	0x200006f0
 800e34c:	20000918 	.word	0x20000918
 800e350:	200000c0 	.word	0x200000c0
 800e354:	200000b0 	.word	0x200000b0
 800e358:	20000608 	.word	0x20000608

0800e35c <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e36a:	4618      	mov	r0, r3
 800e36c:	370c      	adds	r7, #12
 800e36e:	46bd      	mov	sp, r7
 800e370:	bc80      	pop	{r7}
 800e372:	4770      	bx	lr

0800e374 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f006 fdff 	bl	8014f80 <sqrtf>
 800e382:	4603      	mov	r3, r0
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <_ZN6BiquadC1E10BiquadTypefff>:


Biquad::Biquad(){
	z1 = z2 = 0.0;
}
Biquad::Biquad(BiquadType type, float Fc, float Q, float peakGainDB) {
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af02      	add	r7, sp, #8
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	607a      	str	r2, [r7, #4]
 800e396:	603b      	str	r3, [r7, #0]
 800e398:	460b      	mov	r3, r1
 800e39a:	72fb      	strb	r3, [r7, #11]
    setBiquad(type, Fc, Q, peakGainDB);
 800e39c:	7af9      	ldrb	r1, [r7, #11]
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f000 f85f 	bl	800e46a <_ZN6Biquad9setBiquadE10BiquadTypefff>
}
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <_ZN6BiquadD1Ev>:

Biquad::~Biquad() {
 800e3b6:	b480      	push	{r7}
 800e3b8:	b083      	sub	sp, #12
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
}
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bc80      	pop	{r7}
 800e3c8:	4770      	bx	lr

0800e3ca <_ZN6Biquad7processEf>:
void Biquad::setFc(float Fc) {
    this->Fc = Fc;
    calcBiquad();
}

float Biquad::process(float in) {
 800e3ca:	b590      	push	{r4, r7, lr}
 800e3cc:	b085      	sub	sp, #20
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	6039      	str	r1, [r7, #0]
	float out = in * a0 + z1;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7f2 fcb2 	bl	8000d44 <__aeabi_fmul>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	f7f2 fba2 	bl	8000b34 <__addsf3>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	60fb      	str	r3, [r7, #12]
    z1 = in * a1 + z2 - b1 * out;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	6839      	ldr	r1, [r7, #0]
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7f2 fca2 	bl	8000d44 <__aeabi_fmul>
 800e400:	4603      	mov	r3, r0
 800e402:	461a      	mov	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e408:	4619      	mov	r1, r3
 800e40a:	4610      	mov	r0, r2
 800e40c:	f7f2 fb92 	bl	8000b34 <__addsf3>
 800e410:	4603      	mov	r3, r0
 800e412:	461c      	mov	r4, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	68f9      	ldr	r1, [r7, #12]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7f2 fc92 	bl	8000d44 <__aeabi_fmul>
 800e420:	4603      	mov	r3, r0
 800e422:	4619      	mov	r1, r3
 800e424:	4620      	mov	r0, r4
 800e426:	f7f2 fb83 	bl	8000b30 <__aeabi_fsub>
 800e42a:	4603      	mov	r3, r0
 800e42c:	461a      	mov	r2, r3
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	625a      	str	r2, [r3, #36]	; 0x24
    z2 = in * a2 - b2 * out;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	4618      	mov	r0, r3
 800e43a:	f7f2 fc83 	bl	8000d44 <__aeabi_fmul>
 800e43e:	4603      	mov	r3, r0
 800e440:	461c      	mov	r4, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	68f9      	ldr	r1, [r7, #12]
 800e448:	4618      	mov	r0, r3
 800e44a:	f7f2 fc7b 	bl	8000d44 <__aeabi_fmul>
 800e44e:	4603      	mov	r3, r0
 800e450:	4619      	mov	r1, r3
 800e452:	4620      	mov	r0, r4
 800e454:	f7f2 fb6c 	bl	8000b30 <__aeabi_fsub>
 800e458:	4603      	mov	r3, r0
 800e45a:	461a      	mov	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	629a      	str	r2, [r3, #40]	; 0x28
    return out;
 800e460:	68fb      	ldr	r3, [r7, #12]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3714      	adds	r7, #20
 800e466:	46bd      	mov	sp, r7
 800e468:	bd90      	pop	{r4, r7, pc}

0800e46a <_ZN6Biquad9setBiquadE10BiquadTypefff>:

void Biquad::setBiquad(BiquadType type, float Fc, float Q, float peakGainDB) {
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b084      	sub	sp, #16
 800e46e:	af00      	add	r7, sp, #0
 800e470:	60f8      	str	r0, [r7, #12]
 800e472:	607a      	str	r2, [r7, #4]
 800e474:	603b      	str	r3, [r7, #0]
 800e476:	460b      	mov	r3, r1
 800e478:	72fb      	strb	r3, [r7, #11]
    this->type = type;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	7afa      	ldrb	r2, [r7, #11]
 800e47e:	701a      	strb	r2, [r3, #0]
    this->Q = Q;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	61da      	str	r2, [r3, #28]
    this->Fc = Fc;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	619a      	str	r2, [r3, #24]
    this->peakGain = peakGainDB;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	69ba      	ldr	r2, [r7, #24]
 800e490:	621a      	str	r2, [r3, #32]
    calcBiquad();
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f000 f818 	bl	800e4c8 <_ZN6Biquad10calcBiquadEv>
}
 800e498:	bf00      	nop
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800e4a0:	b590      	push	{r4, r7, lr}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7f1 ffab 	bl	8000404 <__aeabi_i2d>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	f006 fd0f 	bl	8014ed8 <sqrt>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	460c      	mov	r4, r1
 800e4be:	4618      	mov	r0, r3
 800e4c0:	4621      	mov	r1, r4
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd90      	pop	{r4, r7, pc}

0800e4c8 <_ZN6Biquad10calcBiquadEv>:

void Biquad::calcBiquad(void) {
 800e4c8:	b5b0      	push	{r4, r5, r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
	z1 = 0.0;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f04f 0200 	mov.w	r2, #0
 800e4d6:	625a      	str	r2, [r3, #36]	; 0x24
	z2 = 0.0;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f04f 0200 	mov.w	r2, #0
 800e4de:	629a      	str	r2, [r3, #40]	; 0x28
    float norm;
    float V = pow(10, fabs(peakGain) / 20.0);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6a1b      	ldr	r3, [r3, #32]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7ff ff39 	bl	800e35c <_ZSt4fabsf>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7f1 ff9b 	bl	8000428 <__aeabi_f2d>
 800e4f2:	f04f 0200 	mov.w	r2, #0
 800e4f6:	4b92      	ldr	r3, [pc, #584]	; (800e740 <_ZN6Biquad10calcBiquadEv+0x278>)
 800e4f8:	f7f2 f918 	bl	800072c <__aeabi_ddiv>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	460c      	mov	r4, r1
 800e500:	461a      	mov	r2, r3
 800e502:	4623      	mov	r3, r4
 800e504:	200a      	movs	r0, #10
 800e506:	f000 ffa1 	bl	800f44c <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800e50a:	4603      	mov	r3, r0
 800e50c:	460c      	mov	r4, r1
 800e50e:	4618      	mov	r0, r3
 800e510:	4621      	mov	r1, r4
 800e512:	f7f2 fab9 	bl	8000a88 <__aeabi_d2f>
 800e516:	4603      	mov	r3, r0
 800e518:	617b      	str	r3, [r7, #20]
    float K = tan(M_PI * Fc);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	4618      	mov	r0, r3
 800e520:	f7f1 ff82 	bl	8000428 <__aeabi_f2d>
 800e524:	a384      	add	r3, pc, #528	; (adr r3, 800e738 <_ZN6Biquad10calcBiquadEv+0x270>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	f7f1 ffd5 	bl	80004d8 <__aeabi_dmul>
 800e52e:	4603      	mov	r3, r0
 800e530:	460c      	mov	r4, r1
 800e532:	4618      	mov	r0, r3
 800e534:	4621      	mov	r1, r4
 800e536:	f006 fb13 	bl	8014b60 <tan>
 800e53a:	4603      	mov	r3, r0
 800e53c:	460c      	mov	r4, r1
 800e53e:	4618      	mov	r0, r3
 800e540:	4621      	mov	r1, r4
 800e542:	f7f2 faa1 	bl	8000a88 <__aeabi_d2f>
 800e546:	4603      	mov	r3, r0
 800e548:	613b      	str	r3, [r7, #16]
    switch (this->type) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	2b06      	cmp	r3, #6
 800e550:	f200 8776 	bhi.w	800f440 <_ZN6Biquad10calcBiquadEv+0xf78>
 800e554:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <_ZN6Biquad10calcBiquadEv+0x94>)
 800e556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55a:	bf00      	nop
 800e55c:	0800e579 	.word	0x0800e579
 800e560:	0800e661 	.word	0x0800e661
 800e564:	0800e745 	.word	0x0800e745
 800e568:	0800e829 	.word	0x0800e829
 800e56c:	0800e911 	.word	0x0800e911
 800e570:	0800ebf3 	.word	0x0800ebf3
 800e574:	0800f041 	.word	0x0800f041
        case BiquadType::lowpass:
            norm = 1 / (1 + K / Q + K * K);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	69db      	ldr	r3, [r3, #28]
 800e57c:	4619      	mov	r1, r3
 800e57e:	6938      	ldr	r0, [r7, #16]
 800e580:	f7f2 fc94 	bl	8000eac <__aeabi_fdiv>
 800e584:	4603      	mov	r3, r0
 800e586:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7f2 fad2 	bl	8000b34 <__addsf3>
 800e590:	4603      	mov	r3, r0
 800e592:	461c      	mov	r4, r3
 800e594:	6939      	ldr	r1, [r7, #16]
 800e596:	6938      	ldr	r0, [r7, #16]
 800e598:	f7f2 fbd4 	bl	8000d44 <__aeabi_fmul>
 800e59c:	4603      	mov	r3, r0
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f7f2 fac7 	bl	8000b34 <__addsf3>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e5ae:	f7f2 fc7d 	bl	8000eac <__aeabi_fdiv>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	60fb      	str	r3, [r7, #12]
            a0 = K * K * norm;
 800e5b6:	6939      	ldr	r1, [r7, #16]
 800e5b8:	6938      	ldr	r0, [r7, #16]
 800e5ba:	f7f2 fbc3 	bl	8000d44 <__aeabi_fmul>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	68f9      	ldr	r1, [r7, #12]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7f2 fbbe 	bl	8000d44 <__aeabi_fmul>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	605a      	str	r2, [r3, #4]
            a1 = 2 * a0;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7f2 faac 	bl	8000b34 <__addsf3>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	461a      	mov	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	609a      	str	r2, [r3, #8]
            a2 = a0;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	685a      	ldr	r2, [r3, #4]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	60da      	str	r2, [r3, #12]
            b1 = 2 * (K * K - 1) * norm;
 800e5ec:	6939      	ldr	r1, [r7, #16]
 800e5ee:	6938      	ldr	r0, [r7, #16]
 800e5f0:	f7f2 fba8 	bl	8000d44 <__aeabi_fmul>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7f2 fa98 	bl	8000b30 <__aeabi_fsub>
 800e600:	4603      	mov	r3, r0
 800e602:	4619      	mov	r1, r3
 800e604:	4618      	mov	r0, r3
 800e606:	f7f2 fa95 	bl	8000b34 <__addsf3>
 800e60a:	4603      	mov	r3, r0
 800e60c:	68f9      	ldr	r1, [r7, #12]
 800e60e:	4618      	mov	r0, r3
 800e610:	f7f2 fb98 	bl	8000d44 <__aeabi_fmul>
 800e614:	4603      	mov	r3, r0
 800e616:	461a      	mov	r2, r3
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	611a      	str	r2, [r3, #16]
            b2 = (1 - K / Q + K * K) * norm;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	4619      	mov	r1, r3
 800e622:	6938      	ldr	r0, [r7, #16]
 800e624:	f7f2 fc42 	bl	8000eac <__aeabi_fdiv>
 800e628:	4603      	mov	r3, r0
 800e62a:	4619      	mov	r1, r3
 800e62c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e630:	f7f2 fa7e 	bl	8000b30 <__aeabi_fsub>
 800e634:	4603      	mov	r3, r0
 800e636:	461c      	mov	r4, r3
 800e638:	6939      	ldr	r1, [r7, #16]
 800e63a:	6938      	ldr	r0, [r7, #16]
 800e63c:	f7f2 fb82 	bl	8000d44 <__aeabi_fmul>
 800e640:	4603      	mov	r3, r0
 800e642:	4619      	mov	r1, r3
 800e644:	4620      	mov	r0, r4
 800e646:	f7f2 fa75 	bl	8000b34 <__addsf3>
 800e64a:	4603      	mov	r3, r0
 800e64c:	68f9      	ldr	r1, [r7, #12]
 800e64e:	4618      	mov	r0, r3
 800e650:	f7f2 fb78 	bl	8000d44 <__aeabi_fmul>
 800e654:	4603      	mov	r3, r0
 800e656:	461a      	mov	r2, r3
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	615a      	str	r2, [r3, #20]
            break;
 800e65c:	f000 beef 	b.w	800f43e <_ZN6Biquad10calcBiquadEv+0xf76>

        case BiquadType::highpass:
            norm = 1 / (1 + K / Q + K * K);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	69db      	ldr	r3, [r3, #28]
 800e664:	4619      	mov	r1, r3
 800e666:	6938      	ldr	r0, [r7, #16]
 800e668:	f7f2 fc20 	bl	8000eac <__aeabi_fdiv>
 800e66c:	4603      	mov	r3, r0
 800e66e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e672:	4618      	mov	r0, r3
 800e674:	f7f2 fa5e 	bl	8000b34 <__addsf3>
 800e678:	4603      	mov	r3, r0
 800e67a:	461c      	mov	r4, r3
 800e67c:	6939      	ldr	r1, [r7, #16]
 800e67e:	6938      	ldr	r0, [r7, #16]
 800e680:	f7f2 fb60 	bl	8000d44 <__aeabi_fmul>
 800e684:	4603      	mov	r3, r0
 800e686:	4619      	mov	r1, r3
 800e688:	4620      	mov	r0, r4
 800e68a:	f7f2 fa53 	bl	8000b34 <__addsf3>
 800e68e:	4603      	mov	r3, r0
 800e690:	4619      	mov	r1, r3
 800e692:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e696:	f7f2 fc09 	bl	8000eac <__aeabi_fdiv>
 800e69a:	4603      	mov	r3, r0
 800e69c:	60fb      	str	r3, [r7, #12]
            a0 = 1 * norm;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	605a      	str	r2, [r3, #4]
            a1 = -2 * a0;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7f2 fb49 	bl	8000d44 <__aeabi_fmul>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	609a      	str	r2, [r3, #8]
            a2 = a0;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	60da      	str	r2, [r3, #12]
            b1 = 2 * (K * K - 1) * norm;
 800e6c2:	6939      	ldr	r1, [r7, #16]
 800e6c4:	6938      	ldr	r0, [r7, #16]
 800e6c6:	f7f2 fb3d 	bl	8000d44 <__aeabi_fmul>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7f2 fa2d 	bl	8000b30 <__aeabi_fsub>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	4619      	mov	r1, r3
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7f2 fa2a 	bl	8000b34 <__addsf3>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	68f9      	ldr	r1, [r7, #12]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7f2 fb2d 	bl	8000d44 <__aeabi_fmul>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	611a      	str	r2, [r3, #16]
            b2 = (1 - K / Q + K * K) * norm;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	69db      	ldr	r3, [r3, #28]
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	6938      	ldr	r0, [r7, #16]
 800e6fa:	f7f2 fbd7 	bl	8000eac <__aeabi_fdiv>
 800e6fe:	4603      	mov	r3, r0
 800e700:	4619      	mov	r1, r3
 800e702:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e706:	f7f2 fa13 	bl	8000b30 <__aeabi_fsub>
 800e70a:	4603      	mov	r3, r0
 800e70c:	461c      	mov	r4, r3
 800e70e:	6939      	ldr	r1, [r7, #16]
 800e710:	6938      	ldr	r0, [r7, #16]
 800e712:	f7f2 fb17 	bl	8000d44 <__aeabi_fmul>
 800e716:	4603      	mov	r3, r0
 800e718:	4619      	mov	r1, r3
 800e71a:	4620      	mov	r0, r4
 800e71c:	f7f2 fa0a 	bl	8000b34 <__addsf3>
 800e720:	4603      	mov	r3, r0
 800e722:	68f9      	ldr	r1, [r7, #12]
 800e724:	4618      	mov	r0, r3
 800e726:	f7f2 fb0d 	bl	8000d44 <__aeabi_fmul>
 800e72a:	4603      	mov	r3, r0
 800e72c:	461a      	mov	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	615a      	str	r2, [r3, #20]
            break;
 800e732:	f000 be84 	b.w	800f43e <_ZN6Biquad10calcBiquadEv+0xf76>
 800e736:	bf00      	nop
 800e738:	54442d18 	.word	0x54442d18
 800e73c:	400921fb 	.word	0x400921fb
 800e740:	40340000 	.word	0x40340000

        case BiquadType::bandpass:
            norm = 1 / (1 + K / Q + K * K);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	69db      	ldr	r3, [r3, #28]
 800e748:	4619      	mov	r1, r3
 800e74a:	6938      	ldr	r0, [r7, #16]
 800e74c:	f7f2 fbae 	bl	8000eac <__aeabi_fdiv>
 800e750:	4603      	mov	r3, r0
 800e752:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e756:	4618      	mov	r0, r3
 800e758:	f7f2 f9ec 	bl	8000b34 <__addsf3>
 800e75c:	4603      	mov	r3, r0
 800e75e:	461c      	mov	r4, r3
 800e760:	6939      	ldr	r1, [r7, #16]
 800e762:	6938      	ldr	r0, [r7, #16]
 800e764:	f7f2 faee 	bl	8000d44 <__aeabi_fmul>
 800e768:	4603      	mov	r3, r0
 800e76a:	4619      	mov	r1, r3
 800e76c:	4620      	mov	r0, r4
 800e76e:	f7f2 f9e1 	bl	8000b34 <__addsf3>
 800e772:	4603      	mov	r3, r0
 800e774:	4619      	mov	r1, r3
 800e776:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e77a:	f7f2 fb97 	bl	8000eac <__aeabi_fdiv>
 800e77e:	4603      	mov	r3, r0
 800e780:	60fb      	str	r3, [r7, #12]
            a0 = K / Q * norm;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	69db      	ldr	r3, [r3, #28]
 800e786:	4619      	mov	r1, r3
 800e788:	6938      	ldr	r0, [r7, #16]
 800e78a:	f7f2 fb8f 	bl	8000eac <__aeabi_fdiv>
 800e78e:	4603      	mov	r3, r0
 800e790:	68f9      	ldr	r1, [r7, #12]
 800e792:	4618      	mov	r0, r3
 800e794:	f7f2 fad6 	bl	8000d44 <__aeabi_fmul>
 800e798:	4603      	mov	r3, r0
 800e79a:	461a      	mov	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	605a      	str	r2, [r3, #4]
            a1 = 0;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f04f 0200 	mov.w	r2, #0
 800e7a6:	609a      	str	r2, [r3, #8]
            a2 = -a0;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	60da      	str	r2, [r3, #12]
            b1 = 2 * (K * K - 1) * norm;
 800e7b4:	6939      	ldr	r1, [r7, #16]
 800e7b6:	6938      	ldr	r0, [r7, #16]
 800e7b8:	f7f2 fac4 	bl	8000d44 <__aeabi_fmul>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7f2 f9b4 	bl	8000b30 <__aeabi_fsub>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7f2 f9b1 	bl	8000b34 <__addsf3>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	68f9      	ldr	r1, [r7, #12]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7f2 fab4 	bl	8000d44 <__aeabi_fmul>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	461a      	mov	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	611a      	str	r2, [r3, #16]
            b2 = (1 - K / Q + K * K) * norm;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	69db      	ldr	r3, [r3, #28]
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	6938      	ldr	r0, [r7, #16]
 800e7ec:	f7f2 fb5e 	bl	8000eac <__aeabi_fdiv>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e7f8:	f7f2 f99a 	bl	8000b30 <__aeabi_fsub>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	461c      	mov	r4, r3
 800e800:	6939      	ldr	r1, [r7, #16]
 800e802:	6938      	ldr	r0, [r7, #16]
 800e804:	f7f2 fa9e 	bl	8000d44 <__aeabi_fmul>
 800e808:	4603      	mov	r3, r0
 800e80a:	4619      	mov	r1, r3
 800e80c:	4620      	mov	r0, r4
 800e80e:	f7f2 f991 	bl	8000b34 <__addsf3>
 800e812:	4603      	mov	r3, r0
 800e814:	68f9      	ldr	r1, [r7, #12]
 800e816:	4618      	mov	r0, r3
 800e818:	f7f2 fa94 	bl	8000d44 <__aeabi_fmul>
 800e81c:	4603      	mov	r3, r0
 800e81e:	461a      	mov	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	615a      	str	r2, [r3, #20]
            break;
 800e824:	f000 be0b 	b.w	800f43e <_ZN6Biquad10calcBiquadEv+0xf76>

        case BiquadType::notch:
            norm = 1 / (1 + K / Q + K * K);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	69db      	ldr	r3, [r3, #28]
 800e82c:	4619      	mov	r1, r3
 800e82e:	6938      	ldr	r0, [r7, #16]
 800e830:	f7f2 fb3c 	bl	8000eac <__aeabi_fdiv>
 800e834:	4603      	mov	r3, r0
 800e836:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7f2 f97a 	bl	8000b34 <__addsf3>
 800e840:	4603      	mov	r3, r0
 800e842:	461c      	mov	r4, r3
 800e844:	6939      	ldr	r1, [r7, #16]
 800e846:	6938      	ldr	r0, [r7, #16]
 800e848:	f7f2 fa7c 	bl	8000d44 <__aeabi_fmul>
 800e84c:	4603      	mov	r3, r0
 800e84e:	4619      	mov	r1, r3
 800e850:	4620      	mov	r0, r4
 800e852:	f7f2 f96f 	bl	8000b34 <__addsf3>
 800e856:	4603      	mov	r3, r0
 800e858:	4619      	mov	r1, r3
 800e85a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e85e:	f7f2 fb25 	bl	8000eac <__aeabi_fdiv>
 800e862:	4603      	mov	r3, r0
 800e864:	60fb      	str	r3, [r7, #12]
            a0 = (1 + K * K) * norm;
 800e866:	6939      	ldr	r1, [r7, #16]
 800e868:	6938      	ldr	r0, [r7, #16]
 800e86a:	f7f2 fa6b 	bl	8000d44 <__aeabi_fmul>
 800e86e:	4603      	mov	r3, r0
 800e870:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e874:	4618      	mov	r0, r3
 800e876:	f7f2 f95d 	bl	8000b34 <__addsf3>
 800e87a:	4603      	mov	r3, r0
 800e87c:	68f9      	ldr	r1, [r7, #12]
 800e87e:	4618      	mov	r0, r3
 800e880:	f7f2 fa60 	bl	8000d44 <__aeabi_fmul>
 800e884:	4603      	mov	r3, r0
 800e886:	461a      	mov	r2, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	605a      	str	r2, [r3, #4]
            a1 = 2 * (K * K - 1) * norm;
 800e88c:	6939      	ldr	r1, [r7, #16]
 800e88e:	6938      	ldr	r0, [r7, #16]
 800e890:	f7f2 fa58 	bl	8000d44 <__aeabi_fmul>
 800e894:	4603      	mov	r3, r0
 800e896:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7f2 f948 	bl	8000b30 <__aeabi_fsub>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7f2 f945 	bl	8000b34 <__addsf3>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	68f9      	ldr	r1, [r7, #12]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7f2 fa48 	bl	8000d44 <__aeabi_fmul>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	609a      	str	r2, [r3, #8]
            a2 = a0;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	60da      	str	r2, [r3, #12]
            b1 = a1;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	689a      	ldr	r2, [r3, #8]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	611a      	str	r2, [r3, #16]
            b2 = (1 - K / Q + K * K) * norm;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	69db      	ldr	r3, [r3, #28]
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	6938      	ldr	r0, [r7, #16]
 800e8d4:	f7f2 faea 	bl	8000eac <__aeabi_fdiv>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	4619      	mov	r1, r3
 800e8dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e8e0:	f7f2 f926 	bl	8000b30 <__aeabi_fsub>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	461c      	mov	r4, r3
 800e8e8:	6939      	ldr	r1, [r7, #16]
 800e8ea:	6938      	ldr	r0, [r7, #16]
 800e8ec:	f7f2 fa2a 	bl	8000d44 <__aeabi_fmul>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f7f2 f91d 	bl	8000b34 <__addsf3>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	68f9      	ldr	r1, [r7, #12]
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7f2 fa20 	bl	8000d44 <__aeabi_fmul>
 800e904:	4603      	mov	r3, r0
 800e906:	461a      	mov	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	615a      	str	r2, [r3, #20]
            break;
 800e90c:	f000 bd97 	b.w	800f43e <_ZN6Biquad10calcBiquadEv+0xf76>

        case BiquadType::peak:
            if (peakGain >= 0) {    // boost
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6a1b      	ldr	r3, [r3, #32]
 800e914:	f04f 0100 	mov.w	r1, #0
 800e918:	4618      	mov	r0, r3
 800e91a:	f7f2 fbc5 	bl	80010a8 <__aeabi_fcmpge>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 80b3 	beq.w	800ea8c <_ZN6Biquad10calcBiquadEv+0x5c4>
                norm = 1 / (1 + 1/Q * K + K * K);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	69db      	ldr	r3, [r3, #28]
 800e92a:	4619      	mov	r1, r3
 800e92c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e930:	f7f2 fabc 	bl	8000eac <__aeabi_fdiv>
 800e934:	4603      	mov	r3, r0
 800e936:	6939      	ldr	r1, [r7, #16]
 800e938:	4618      	mov	r0, r3
 800e93a:	f7f2 fa03 	bl	8000d44 <__aeabi_fmul>
 800e93e:	4603      	mov	r3, r0
 800e940:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e944:	4618      	mov	r0, r3
 800e946:	f7f2 f8f5 	bl	8000b34 <__addsf3>
 800e94a:	4603      	mov	r3, r0
 800e94c:	461c      	mov	r4, r3
 800e94e:	6939      	ldr	r1, [r7, #16]
 800e950:	6938      	ldr	r0, [r7, #16]
 800e952:	f7f2 f9f7 	bl	8000d44 <__aeabi_fmul>
 800e956:	4603      	mov	r3, r0
 800e958:	4619      	mov	r1, r3
 800e95a:	4620      	mov	r0, r4
 800e95c:	f7f2 f8ea 	bl	8000b34 <__addsf3>
 800e960:	4603      	mov	r3, r0
 800e962:	4619      	mov	r1, r3
 800e964:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e968:	f7f2 faa0 	bl	8000eac <__aeabi_fdiv>
 800e96c:	4603      	mov	r3, r0
 800e96e:	60fb      	str	r3, [r7, #12]
                a0 = (1 + V/Q * K + K * K) * norm;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	69db      	ldr	r3, [r3, #28]
 800e974:	4619      	mov	r1, r3
 800e976:	6978      	ldr	r0, [r7, #20]
 800e978:	f7f2 fa98 	bl	8000eac <__aeabi_fdiv>
 800e97c:	4603      	mov	r3, r0
 800e97e:	6939      	ldr	r1, [r7, #16]
 800e980:	4618      	mov	r0, r3
 800e982:	f7f2 f9df 	bl	8000d44 <__aeabi_fmul>
 800e986:	4603      	mov	r3, r0
 800e988:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7f2 f8d1 	bl	8000b34 <__addsf3>
 800e992:	4603      	mov	r3, r0
 800e994:	461c      	mov	r4, r3
 800e996:	6939      	ldr	r1, [r7, #16]
 800e998:	6938      	ldr	r0, [r7, #16]
 800e99a:	f7f2 f9d3 	bl	8000d44 <__aeabi_fmul>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f7f2 f8c6 	bl	8000b34 <__addsf3>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	68f9      	ldr	r1, [r7, #12]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7f2 f9c9 	bl	8000d44 <__aeabi_fmul>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	605a      	str	r2, [r3, #4]
                a1 = 2 * (K * K - 1) * norm;
 800e9ba:	6939      	ldr	r1, [r7, #16]
 800e9bc:	6938      	ldr	r0, [r7, #16]
 800e9be:	f7f2 f9c1 	bl	8000d44 <__aeabi_fmul>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7f2 f8b1 	bl	8000b30 <__aeabi_fsub>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7f2 f8ae 	bl	8000b34 <__addsf3>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	68f9      	ldr	r1, [r7, #12]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7f2 f9b1 	bl	8000d44 <__aeabi_fmul>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	609a      	str	r2, [r3, #8]
                a2 = (1 - V/Q * K + K * K) * norm;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	69db      	ldr	r3, [r3, #28]
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	6978      	ldr	r0, [r7, #20]
 800e9f2:	f7f2 fa5b 	bl	8000eac <__aeabi_fdiv>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	6939      	ldr	r1, [r7, #16]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7f2 f9a2 	bl	8000d44 <__aeabi_fmul>
 800ea00:	4603      	mov	r3, r0
 800ea02:	4619      	mov	r1, r3
 800ea04:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ea08:	f7f2 f892 	bl	8000b30 <__aeabi_fsub>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	461c      	mov	r4, r3
 800ea10:	6939      	ldr	r1, [r7, #16]
 800ea12:	6938      	ldr	r0, [r7, #16]
 800ea14:	f7f2 f996 	bl	8000d44 <__aeabi_fmul>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f7f2 f889 	bl	8000b34 <__addsf3>
 800ea22:	4603      	mov	r3, r0
 800ea24:	68f9      	ldr	r1, [r7, #12]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7f2 f98c 	bl	8000d44 <__aeabi_fmul>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	461a      	mov	r2, r3
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	60da      	str	r2, [r3, #12]
                b1 = a1;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	689a      	ldr	r2, [r3, #8]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	611a      	str	r2, [r3, #16]
                b2 = (1 - 1/Q * K + K * K) * norm;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	69db      	ldr	r3, [r3, #28]
 800ea40:	4619      	mov	r1, r3
 800ea42:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ea46:	f7f2 fa31 	bl	8000eac <__aeabi_fdiv>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	6939      	ldr	r1, [r7, #16]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7f2 f978 	bl	8000d44 <__aeabi_fmul>
 800ea54:	4603      	mov	r3, r0
 800ea56:	4619      	mov	r1, r3
 800ea58:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ea5c:	f7f2 f868 	bl	8000b30 <__aeabi_fsub>
 800ea60:	4603      	mov	r3, r0
 800ea62:	461c      	mov	r4, r3
 800ea64:	6939      	ldr	r1, [r7, #16]
 800ea66:	6938      	ldr	r0, [r7, #16]
 800ea68:	f7f2 f96c 	bl	8000d44 <__aeabi_fmul>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	4619      	mov	r1, r3
 800ea70:	4620      	mov	r0, r4
 800ea72:	f7f2 f85f 	bl	8000b34 <__addsf3>
 800ea76:	4603      	mov	r3, r0
 800ea78:	68f9      	ldr	r1, [r7, #12]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7f2 f962 	bl	8000d44 <__aeabi_fmul>
 800ea80:	4603      	mov	r3, r0
 800ea82:	461a      	mov	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	615a      	str	r2, [r3, #20]
                a1 = 2 * (K * K - 1) * norm;
                a2 = (1 - 1/Q * K + K * K) * norm;
                b1 = a1;
                b2 = (1 - V/Q * K + K * K) * norm;
            }
            break;
 800ea88:	f000 bcd9 	b.w	800f43e <_ZN6Biquad10calcBiquadEv+0xf76>
                norm = 1 / (1 + V/Q * K + K * K);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	69db      	ldr	r3, [r3, #28]
 800ea90:	4619      	mov	r1, r3
 800ea92:	6978      	ldr	r0, [r7, #20]
 800ea94:	f7f2 fa0a 	bl	8000eac <__aeabi_fdiv>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	6939      	ldr	r1, [r7, #16]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7f2 f951 	bl	8000d44 <__aeabi_fmul>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7f2 f843 	bl	8000b34 <__addsf3>
 800eaae:	4603      	mov	r3, r0
 800eab0:	461c      	mov	r4, r3
 800eab2:	6939      	ldr	r1, [r7, #16]
 800eab4:	6938      	ldr	r0, [r7, #16]
 800eab6:	f7f2 f945 	bl	8000d44 <__aeabi_fmul>
 800eaba:	4603      	mov	r3, r0
 800eabc:	4619      	mov	r1, r3
 800eabe:	4620      	mov	r0, r4
 800eac0:	f7f2 f838 	bl	8000b34 <__addsf3>
 800eac4:	4603      	mov	r3, r0
 800eac6:	4619      	mov	r1, r3
 800eac8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800eacc:	f7f2 f9ee 	bl	8000eac <__aeabi_fdiv>
 800ead0:	4603      	mov	r3, r0
 800ead2:	60fb      	str	r3, [r7, #12]
                a0 = (1 + 1/Q * K + K * K) * norm;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	69db      	ldr	r3, [r3, #28]
 800ead8:	4619      	mov	r1, r3
 800eada:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800eade:	f7f2 f9e5 	bl	8000eac <__aeabi_fdiv>
 800eae2:	4603      	mov	r3, r0
 800eae4:	6939      	ldr	r1, [r7, #16]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7f2 f92c 	bl	8000d44 <__aeabi_fmul>
 800eaec:	4603      	mov	r3, r0
 800eaee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7f2 f81e 	bl	8000b34 <__addsf3>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	461c      	mov	r4, r3
 800eafc:	6939      	ldr	r1, [r7, #16]
 800eafe:	6938      	ldr	r0, [r7, #16]
 800eb00:	f7f2 f920 	bl	8000d44 <__aeabi_fmul>
 800eb04:	4603      	mov	r3, r0
 800eb06:	4619      	mov	r1, r3
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f7f2 f813 	bl	8000b34 <__addsf3>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	68f9      	ldr	r1, [r7, #12]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7f2 f916 	bl	8000d44 <__aeabi_fmul>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	605a      	str	r2, [r3, #4]
                a1 = 2 * (K * K - 1) * norm;
 800eb20:	6939      	ldr	r1, [r7, #16]
 800eb22:	6938      	ldr	r0, [r7, #16]
 800eb24:	f7f2 f90e 	bl	8000d44 <__aeabi_fmul>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7f1 fffe 	bl	8000b30 <__aeabi_fsub>
 800eb34:	4603      	mov	r3, r0
 800eb36:	4619      	mov	r1, r3
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7f1 fffb 	bl	8000b34 <__addsf3>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	68f9      	ldr	r1, [r7, #12]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f2 f8fe 	bl	8000d44 <__aeabi_fmul>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	609a      	str	r2, [r3, #8]
                a2 = (1 - 1/Q * K + K * K) * norm;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	69db      	ldr	r3, [r3, #28]
 800eb54:	4619      	mov	r1, r3
 800eb56:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800eb5a:	f7f2 f9a7 	bl	8000eac <__aeabi_fdiv>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	6939      	ldr	r1, [r7, #16]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7f2 f8ee 	bl	8000d44 <__aeabi_fmul>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800eb70:	f7f1 ffde 	bl	8000b30 <__aeabi_fsub>
 800eb74:	4603      	mov	r3, r0
 800eb76:	461c      	mov	r4, r3
 800eb78:	6939      	ldr	r1, [r7, #16]
 800eb7a:	6938      	ldr	r0, [r7, #16]
 800eb7c:	f7f2 f8e2 	bl	8000d44 <__aeabi_fmul>
 800eb80:	4603      	mov	r3, r0
 800eb82:	4619      	mov	r1, r3
 800eb84:	4620      	mov	r0, r4
 800eb86:	f7f1 ffd5 	bl	8000b34 <__addsf3>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	68f9      	ldr	r1, [r7, #12]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7f2 f8d8 	bl	8000d44 <__aeabi_fmul>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	60da      	str	r2, [r3, #12]
                b1 = a1;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	689a      	ldr	r2, [r3, #8]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	611a      	str	r2, [r3, #16]
                b2 = (1 - V/Q * K + K * K) * norm;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	69db      	ldr	r3, [r3, #28]
 800eba8:	4619      	mov	r1, r3
 800ebaa:	6978      	ldr	r0, [r7, #20]
 800ebac:	f7f2 f97e 	bl	8000eac <__aeabi_fdiv>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	6939      	ldr	r1, [r7, #16]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7f2 f8c5 	bl	8000d44 <__aeabi_fmul>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ebc2:	f7f1 ffb5 	bl	8000b30 <__aeabi_fsub>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	461c      	mov	r4, r3
 800ebca:	6939      	ldr	r1, [r7, #16]
 800ebcc:	6938      	ldr	r0, [r7, #16]
 800ebce:	f7f2 f8b9 	bl	8000d44 <__aeabi_fmul>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f7f1 ffac 	bl	8000b34 <__addsf3>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	68f9      	ldr	r1, [r7, #12]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7f2 f8af 	bl	8000d44 <__aeabi_fmul>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	461a      	mov	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	615a      	str	r2, [r3, #20]
            break;
 800ebee:	f000 bc26 	b.w	800f43e <_ZN6Biquad10calcBiquadEv+0xf76>
        case BiquadType::lowshelf:
            if (peakGain >= 0) {    // boost
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6a1b      	ldr	r3, [r3, #32]
 800ebf6:	f04f 0100 	mov.w	r1, #0
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7f2 fa54 	bl	80010a8 <__aeabi_fcmpge>
 800ec00:	4603      	mov	r3, r0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f000 810c 	beq.w	800ee20 <_ZN6Biquad10calcBiquadEv+0x958>
                norm = 1 / (1 + sqrt(2) * K + K * K);
 800ec08:	2002      	movs	r0, #2
 800ec0a:	f7ff fc49 	bl	800e4a0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800ec0e:	4604      	mov	r4, r0
 800ec10:	460d      	mov	r5, r1
 800ec12:	6938      	ldr	r0, [r7, #16]
 800ec14:	f7f1 fc08 	bl	8000428 <__aeabi_f2d>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	4629      	mov	r1, r5
 800ec20:	f7f1 fc5a 	bl	80004d8 <__aeabi_dmul>
 800ec24:	4603      	mov	r3, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	4618      	mov	r0, r3
 800ec2a:	4621      	mov	r1, r4
 800ec2c:	f04f 0200 	mov.w	r2, #0
 800ec30:	4b7a      	ldr	r3, [pc, #488]	; (800ee1c <_ZN6Biquad10calcBiquadEv+0x954>)
 800ec32:	f7f1 fa9b 	bl	800016c <__adddf3>
 800ec36:	4603      	mov	r3, r0
 800ec38:	460c      	mov	r4, r1
 800ec3a:	4625      	mov	r5, r4
 800ec3c:	461c      	mov	r4, r3
 800ec3e:	6939      	ldr	r1, [r7, #16]
 800ec40:	6938      	ldr	r0, [r7, #16]
 800ec42:	f7f2 f87f 	bl	8000d44 <__aeabi_fmul>
 800ec46:	4603      	mov	r3, r0
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7f1 fbed 	bl	8000428 <__aeabi_f2d>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4620      	mov	r0, r4
 800ec54:	4629      	mov	r1, r5
 800ec56:	f7f1 fa89 	bl	800016c <__adddf3>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	460c      	mov	r4, r1
 800ec5e:	461a      	mov	r2, r3
 800ec60:	4623      	mov	r3, r4
 800ec62:	f04f 0000 	mov.w	r0, #0
 800ec66:	496d      	ldr	r1, [pc, #436]	; (800ee1c <_ZN6Biquad10calcBiquadEv+0x954>)
 800ec68:	f7f1 fd60 	bl	800072c <__aeabi_ddiv>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	460c      	mov	r4, r1
 800ec70:	4618      	mov	r0, r3
 800ec72:	4621      	mov	r1, r4
 800ec74:	f7f1 ff08 	bl	8000a88 <__aeabi_d2f>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	60fb      	str	r3, [r7, #12]
                a0 = (1 + sqrt(2*V) * K + V * K * K) * norm;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7f1 ff57 	bl	8000b34 <__addsf3>
 800ec86:	4603      	mov	r3, r0
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7ff fb73 	bl	800e374 <_ZSt4sqrtf>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	6939      	ldr	r1, [r7, #16]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7f2 f856 	bl	8000d44 <__aeabi_fmul>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7f1 ff48 	bl	8000b34 <__addsf3>
 800eca4:	4603      	mov	r3, r0
 800eca6:	461c      	mov	r4, r3
 800eca8:	6939      	ldr	r1, [r7, #16]
 800ecaa:	6978      	ldr	r0, [r7, #20]
 800ecac:	f7f2 f84a 	bl	8000d44 <__aeabi_fmul>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	6939      	ldr	r1, [r7, #16]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7f2 f845 	bl	8000d44 <__aeabi_fmul>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f7f1 ff38 	bl	8000b34 <__addsf3>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	68f9      	ldr	r1, [r7, #12]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7f2 f83b 	bl	8000d44 <__aeabi_fmul>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	605a      	str	r2, [r3, #4]
                a1 = 2 * (V * K * K - 1) * norm;
 800ecd6:	6939      	ldr	r1, [r7, #16]
 800ecd8:	6978      	ldr	r0, [r7, #20]
 800ecda:	f7f2 f833 	bl	8000d44 <__aeabi_fmul>
 800ecde:	4603      	mov	r3, r0
 800ece0:	6939      	ldr	r1, [r7, #16]
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7f2 f82e 	bl	8000d44 <__aeabi_fmul>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7f1 ff1e 	bl	8000b30 <__aeabi_fsub>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7f1 ff1b 	bl	8000b34 <__addsf3>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	68f9      	ldr	r1, [r7, #12]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7f2 f81e 	bl	8000d44 <__aeabi_fmul>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	609a      	str	r2, [r3, #8]
                a2 = (1 - sqrt(2*V) * K + V * K * K) * norm;
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	4619      	mov	r1, r3
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7f1 ff0d 	bl	8000b34 <__addsf3>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7ff fb29 	bl	800e374 <_ZSt4sqrtf>
 800ed22:	4603      	mov	r3, r0
 800ed24:	6939      	ldr	r1, [r7, #16]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7f2 f80c 	bl	8000d44 <__aeabi_fmul>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	4619      	mov	r1, r3
 800ed30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ed34:	f7f1 fefc 	bl	8000b30 <__aeabi_fsub>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	461c      	mov	r4, r3
 800ed3c:	6939      	ldr	r1, [r7, #16]
 800ed3e:	6978      	ldr	r0, [r7, #20]
 800ed40:	f7f2 f800 	bl	8000d44 <__aeabi_fmul>
 800ed44:	4603      	mov	r3, r0
 800ed46:	6939      	ldr	r1, [r7, #16]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7f1 fffb 	bl	8000d44 <__aeabi_fmul>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	4619      	mov	r1, r3
 800ed52:	4620      	mov	r0, r4
 800ed54:	f7f1 feee 	bl	8000b34 <__addsf3>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	68f9      	ldr	r1, [r7, #12]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7f1 fff1 	bl	8000d44 <__aeabi_fmul>
 800ed62:	4603      	mov	r3, r0
 800ed64:	461a      	mov	r2, r3
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	60da      	str	r2, [r3, #12]
                b1 = 2 * (K * K - 1) * norm;
 800ed6a:	6939      	ldr	r1, [r7, #16]
 800ed6c:	6938      	ldr	r0, [r7, #16]
 800ed6e:	f7f1 ffe9 	bl	8000d44 <__aeabi_fmul>
 800ed72:	4603      	mov	r3, r0
 800ed74:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7f1 fed9 	bl	8000b30 <__aeabi_fsub>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	4619      	mov	r1, r3
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7f1 fed6 	bl	8000b34 <__addsf3>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	68f9      	ldr	r1, [r7, #12]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7f1 ffd9 	bl	8000d44 <__aeabi_fmul>
 800ed92:	4603      	mov	r3, r0
 800ed94:	461a      	mov	r2, r3
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	611a      	str	r2, [r3, #16]
                b2 = (1 - sqrt(2) * K + K * K) * norm;
 800ed9a:	2002      	movs	r0, #2
 800ed9c:	f7ff fb80 	bl	800e4a0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800eda0:	4604      	mov	r4, r0
 800eda2:	460d      	mov	r5, r1
 800eda4:	6938      	ldr	r0, [r7, #16]
 800eda6:	f7f1 fb3f 	bl	8000428 <__aeabi_f2d>
 800edaa:	4602      	mov	r2, r0
 800edac:	460b      	mov	r3, r1
 800edae:	4620      	mov	r0, r4
 800edb0:	4629      	mov	r1, r5
 800edb2:	f7f1 fb91 	bl	80004d8 <__aeabi_dmul>
 800edb6:	4603      	mov	r3, r0
 800edb8:	460c      	mov	r4, r1
 800edba:	461a      	mov	r2, r3
 800edbc:	4623      	mov	r3, r4
 800edbe:	f04f 0000 	mov.w	r0, #0
 800edc2:	4916      	ldr	r1, [pc, #88]	; (800ee1c <_ZN6Biquad10calcBiquadEv+0x954>)
 800edc4:	f7f1 f9d0 	bl	8000168 <__aeabi_dsub>
 800edc8:	4603      	mov	r3, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	4625      	mov	r5, r4
 800edce:	461c      	mov	r4, r3
 800edd0:	6939      	ldr	r1, [r7, #16]
 800edd2:	6938      	ldr	r0, [r7, #16]
 800edd4:	f7f1 ffb6 	bl	8000d44 <__aeabi_fmul>
 800edd8:	4603      	mov	r3, r0
 800edda:	4618      	mov	r0, r3
 800eddc:	f7f1 fb24 	bl	8000428 <__aeabi_f2d>
 800ede0:	4602      	mov	r2, r0
 800ede2:	460b      	mov	r3, r1
 800ede4:	4620      	mov	r0, r4
 800ede6:	4629      	mov	r1, r5
 800ede8:	f7f1 f9c0 	bl	800016c <__adddf3>
 800edec:	4603      	mov	r3, r0
 800edee:	460c      	mov	r4, r1
 800edf0:	4625      	mov	r5, r4
 800edf2:	461c      	mov	r4, r3
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7f1 fb17 	bl	8000428 <__aeabi_f2d>
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
 800edfe:	4620      	mov	r0, r4
 800ee00:	4629      	mov	r1, r5
 800ee02:	f7f1 fb69 	bl	80004d8 <__aeabi_dmul>
 800ee06:	4603      	mov	r3, r0
 800ee08:	460c      	mov	r4, r1
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	f7f1 fe3b 	bl	8000a88 <__aeabi_d2f>
 800ee12:	4602      	mov	r2, r0
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	615a      	str	r2, [r3, #20]
                a1 = 2 * (K * K - 1) * norm;
                a2 = (1 - sqrt(2) * K + K * K) * norm;
                b1 = 2 * (V * K * K - 1) * norm;
                b2 = (1 - sqrt(2*V) * K + V * K * K) * norm;
            }
            break;
 800ee18:	e311      	b.n	800f43e <_ZN6Biquad10calcBiquadEv+0xf76>
 800ee1a:	bf00      	nop
 800ee1c:	3ff00000 	.word	0x3ff00000
                norm = 1 / (1 + sqrt(2*V) * K + V * K * K);
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	4619      	mov	r1, r3
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7f1 fe85 	bl	8000b34 <__addsf3>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff faa1 	bl	800e374 <_ZSt4sqrtf>
 800ee32:	4603      	mov	r3, r0
 800ee34:	6939      	ldr	r1, [r7, #16]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7f1 ff84 	bl	8000d44 <__aeabi_fmul>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7f1 fe76 	bl	8000b34 <__addsf3>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	461c      	mov	r4, r3
 800ee4c:	6939      	ldr	r1, [r7, #16]
 800ee4e:	6978      	ldr	r0, [r7, #20]
 800ee50:	f7f1 ff78 	bl	8000d44 <__aeabi_fmul>
 800ee54:	4603      	mov	r3, r0
 800ee56:	6939      	ldr	r1, [r7, #16]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7f1 ff73 	bl	8000d44 <__aeabi_fmul>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	4619      	mov	r1, r3
 800ee62:	4620      	mov	r0, r4
 800ee64:	f7f1 fe66 	bl	8000b34 <__addsf3>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ee70:	f7f2 f81c 	bl	8000eac <__aeabi_fdiv>
 800ee74:	4603      	mov	r3, r0
 800ee76:	60fb      	str	r3, [r7, #12]
                a0 = (1 + sqrt(2) * K + K * K) * norm;
 800ee78:	2002      	movs	r0, #2
 800ee7a:	f7ff fb11 	bl	800e4a0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800ee7e:	4604      	mov	r4, r0
 800ee80:	460d      	mov	r5, r1
 800ee82:	6938      	ldr	r0, [r7, #16]
 800ee84:	f7f1 fad0 	bl	8000428 <__aeabi_f2d>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	4629      	mov	r1, r5
 800ee90:	f7f1 fb22 	bl	80004d8 <__aeabi_dmul>
 800ee94:	4603      	mov	r3, r0
 800ee96:	460c      	mov	r4, r1
 800ee98:	4618      	mov	r0, r3
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	f04f 0200 	mov.w	r2, #0
 800eea0:	4b66      	ldr	r3, [pc, #408]	; (800f03c <_ZN6Biquad10calcBiquadEv+0xb74>)
 800eea2:	f7f1 f963 	bl	800016c <__adddf3>
 800eea6:	4603      	mov	r3, r0
 800eea8:	460c      	mov	r4, r1
 800eeaa:	4625      	mov	r5, r4
 800eeac:	461c      	mov	r4, r3
 800eeae:	6939      	ldr	r1, [r7, #16]
 800eeb0:	6938      	ldr	r0, [r7, #16]
 800eeb2:	f7f1 ff47 	bl	8000d44 <__aeabi_fmul>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7f1 fab5 	bl	8000428 <__aeabi_f2d>
 800eebe:	4602      	mov	r2, r0
 800eec0:	460b      	mov	r3, r1
 800eec2:	4620      	mov	r0, r4
 800eec4:	4629      	mov	r1, r5
 800eec6:	f7f1 f951 	bl	800016c <__adddf3>
 800eeca:	4603      	mov	r3, r0
 800eecc:	460c      	mov	r4, r1
 800eece:	4625      	mov	r5, r4
 800eed0:	461c      	mov	r4, r3
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f7f1 faa8 	bl	8000428 <__aeabi_f2d>
 800eed8:	4602      	mov	r2, r0
 800eeda:	460b      	mov	r3, r1
 800eedc:	4620      	mov	r0, r4
 800eede:	4629      	mov	r1, r5
 800eee0:	f7f1 fafa 	bl	80004d8 <__aeabi_dmul>
 800eee4:	4603      	mov	r3, r0
 800eee6:	460c      	mov	r4, r1
 800eee8:	4618      	mov	r0, r3
 800eeea:	4621      	mov	r1, r4
 800eeec:	f7f1 fdcc 	bl	8000a88 <__aeabi_d2f>
 800eef0:	4602      	mov	r2, r0
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	605a      	str	r2, [r3, #4]
                a1 = 2 * (K * K - 1) * norm;
 800eef6:	6939      	ldr	r1, [r7, #16]
 800eef8:	6938      	ldr	r0, [r7, #16]
 800eefa:	f7f1 ff23 	bl	8000d44 <__aeabi_fmul>
 800eefe:	4603      	mov	r3, r0
 800ef00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7f1 fe13 	bl	8000b30 <__aeabi_fsub>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7f1 fe10 	bl	8000b34 <__addsf3>
 800ef14:	4603      	mov	r3, r0
 800ef16:	68f9      	ldr	r1, [r7, #12]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7f1 ff13 	bl	8000d44 <__aeabi_fmul>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	461a      	mov	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	609a      	str	r2, [r3, #8]
                a2 = (1 - sqrt(2) * K + K * K) * norm;
 800ef26:	2002      	movs	r0, #2
 800ef28:	f7ff faba 	bl	800e4a0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	460d      	mov	r5, r1
 800ef30:	6938      	ldr	r0, [r7, #16]
 800ef32:	f7f1 fa79 	bl	8000428 <__aeabi_f2d>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	f7f1 facb 	bl	80004d8 <__aeabi_dmul>
 800ef42:	4603      	mov	r3, r0
 800ef44:	460c      	mov	r4, r1
 800ef46:	461a      	mov	r2, r3
 800ef48:	4623      	mov	r3, r4
 800ef4a:	f04f 0000 	mov.w	r0, #0
 800ef4e:	493b      	ldr	r1, [pc, #236]	; (800f03c <_ZN6Biquad10calcBiquadEv+0xb74>)
 800ef50:	f7f1 f90a 	bl	8000168 <__aeabi_dsub>
 800ef54:	4603      	mov	r3, r0
 800ef56:	460c      	mov	r4, r1
 800ef58:	4625      	mov	r5, r4
 800ef5a:	461c      	mov	r4, r3
 800ef5c:	6939      	ldr	r1, [r7, #16]
 800ef5e:	6938      	ldr	r0, [r7, #16]
 800ef60:	f7f1 fef0 	bl	8000d44 <__aeabi_fmul>
 800ef64:	4603      	mov	r3, r0
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7f1 fa5e 	bl	8000428 <__aeabi_f2d>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	4620      	mov	r0, r4
 800ef72:	4629      	mov	r1, r5
 800ef74:	f7f1 f8fa 	bl	800016c <__adddf3>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	4625      	mov	r5, r4
 800ef7e:	461c      	mov	r4, r3
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f7f1 fa51 	bl	8000428 <__aeabi_f2d>
 800ef86:	4602      	mov	r2, r0
 800ef88:	460b      	mov	r3, r1
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	f7f1 faa3 	bl	80004d8 <__aeabi_dmul>
 800ef92:	4603      	mov	r3, r0
 800ef94:	460c      	mov	r4, r1
 800ef96:	4618      	mov	r0, r3
 800ef98:	4621      	mov	r1, r4
 800ef9a:	f7f1 fd75 	bl	8000a88 <__aeabi_d2f>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	60da      	str	r2, [r3, #12]
                b1 = 2 * (V * K * K - 1) * norm;
 800efa4:	6939      	ldr	r1, [r7, #16]
 800efa6:	6978      	ldr	r0, [r7, #20]
 800efa8:	f7f1 fecc 	bl	8000d44 <__aeabi_fmul>
 800efac:	4603      	mov	r3, r0
 800efae:	6939      	ldr	r1, [r7, #16]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7f1 fec7 	bl	8000d44 <__aeabi_fmul>
 800efb6:	4603      	mov	r3, r0
 800efb8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7f1 fdb7 	bl	8000b30 <__aeabi_fsub>
 800efc2:	4603      	mov	r3, r0
 800efc4:	4619      	mov	r1, r3
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7f1 fdb4 	bl	8000b34 <__addsf3>
 800efcc:	4603      	mov	r3, r0
 800efce:	68f9      	ldr	r1, [r7, #12]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7f1 feb7 	bl	8000d44 <__aeabi_fmul>
 800efd6:	4603      	mov	r3, r0
 800efd8:	461a      	mov	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	611a      	str	r2, [r3, #16]
                b2 = (1 - sqrt(2*V) * K + V * K * K) * norm;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	4619      	mov	r1, r3
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7f1 fda6 	bl	8000b34 <__addsf3>
 800efe8:	4603      	mov	r3, r0
 800efea:	4618      	mov	r0, r3
 800efec:	f7ff f9c2 	bl	800e374 <_ZSt4sqrtf>
 800eff0:	4603      	mov	r3, r0
 800eff2:	6939      	ldr	r1, [r7, #16]
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7f1 fea5 	bl	8000d44 <__aeabi_fmul>
 800effa:	4603      	mov	r3, r0
 800effc:	4619      	mov	r1, r3
 800effe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f002:	f7f1 fd95 	bl	8000b30 <__aeabi_fsub>
 800f006:	4603      	mov	r3, r0
 800f008:	461c      	mov	r4, r3
 800f00a:	6939      	ldr	r1, [r7, #16]
 800f00c:	6978      	ldr	r0, [r7, #20]
 800f00e:	f7f1 fe99 	bl	8000d44 <__aeabi_fmul>
 800f012:	4603      	mov	r3, r0
 800f014:	6939      	ldr	r1, [r7, #16]
 800f016:	4618      	mov	r0, r3
 800f018:	f7f1 fe94 	bl	8000d44 <__aeabi_fmul>
 800f01c:	4603      	mov	r3, r0
 800f01e:	4619      	mov	r1, r3
 800f020:	4620      	mov	r0, r4
 800f022:	f7f1 fd87 	bl	8000b34 <__addsf3>
 800f026:	4603      	mov	r3, r0
 800f028:	68f9      	ldr	r1, [r7, #12]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7f1 fe8a 	bl	8000d44 <__aeabi_fmul>
 800f030:	4603      	mov	r3, r0
 800f032:	461a      	mov	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	615a      	str	r2, [r3, #20]
            break;
 800f038:	e201      	b.n	800f43e <_ZN6Biquad10calcBiquadEv+0xf76>
 800f03a:	bf00      	nop
 800f03c:	3ff00000 	.word	0x3ff00000
        case BiquadType::highshelf:
            if (peakGain >= 0) {    // boost
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6a1b      	ldr	r3, [r3, #32]
 800f044:	f04f 0100 	mov.w	r1, #0
 800f048:	4618      	mov	r0, r3
 800f04a:	f7f2 f82d 	bl	80010a8 <__aeabi_fcmpge>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 80f9 	beq.w	800f248 <_ZN6Biquad10calcBiquadEv+0xd80>
                norm = 1 / (1 + sqrt(2) * K + K * K);
 800f056:	2002      	movs	r0, #2
 800f058:	f7ff fa22 	bl	800e4a0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800f05c:	4604      	mov	r4, r0
 800f05e:	460d      	mov	r5, r1
 800f060:	6938      	ldr	r0, [r7, #16]
 800f062:	f7f1 f9e1 	bl	8000428 <__aeabi_f2d>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	4620      	mov	r0, r4
 800f06c:	4629      	mov	r1, r5
 800f06e:	f7f1 fa33 	bl	80004d8 <__aeabi_dmul>
 800f072:	4603      	mov	r3, r0
 800f074:	460c      	mov	r4, r1
 800f076:	4618      	mov	r0, r3
 800f078:	4621      	mov	r1, r4
 800f07a:	f04f 0200 	mov.w	r2, #0
 800f07e:	4b71      	ldr	r3, [pc, #452]	; (800f244 <_ZN6Biquad10calcBiquadEv+0xd7c>)
 800f080:	f7f1 f874 	bl	800016c <__adddf3>
 800f084:	4603      	mov	r3, r0
 800f086:	460c      	mov	r4, r1
 800f088:	4625      	mov	r5, r4
 800f08a:	461c      	mov	r4, r3
 800f08c:	6939      	ldr	r1, [r7, #16]
 800f08e:	6938      	ldr	r0, [r7, #16]
 800f090:	f7f1 fe58 	bl	8000d44 <__aeabi_fmul>
 800f094:	4603      	mov	r3, r0
 800f096:	4618      	mov	r0, r3
 800f098:	f7f1 f9c6 	bl	8000428 <__aeabi_f2d>
 800f09c:	4602      	mov	r2, r0
 800f09e:	460b      	mov	r3, r1
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	f7f1 f862 	bl	800016c <__adddf3>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	460c      	mov	r4, r1
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	4623      	mov	r3, r4
 800f0b0:	f04f 0000 	mov.w	r0, #0
 800f0b4:	4963      	ldr	r1, [pc, #396]	; (800f244 <_ZN6Biquad10calcBiquadEv+0xd7c>)
 800f0b6:	f7f1 fb39 	bl	800072c <__aeabi_ddiv>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	460c      	mov	r4, r1
 800f0be:	4618      	mov	r0, r3
 800f0c0:	4621      	mov	r1, r4
 800f0c2:	f7f1 fce1 	bl	8000a88 <__aeabi_d2f>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	60fb      	str	r3, [r7, #12]
                a0 = (V + sqrt(2*V) * K + K * K) * norm;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7f1 fd30 	bl	8000b34 <__addsf3>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7ff f94c 	bl	800e374 <_ZSt4sqrtf>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	6939      	ldr	r1, [r7, #16]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7f1 fe2f 	bl	8000d44 <__aeabi_fmul>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	6979      	ldr	r1, [r7, #20]
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7f1 fd22 	bl	8000b34 <__addsf3>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	461c      	mov	r4, r3
 800f0f4:	6939      	ldr	r1, [r7, #16]
 800f0f6:	6938      	ldr	r0, [r7, #16]
 800f0f8:	f7f1 fe24 	bl	8000d44 <__aeabi_fmul>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	4619      	mov	r1, r3
 800f100:	4620      	mov	r0, r4
 800f102:	f7f1 fd17 	bl	8000b34 <__addsf3>
 800f106:	4603      	mov	r3, r0
 800f108:	68f9      	ldr	r1, [r7, #12]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7f1 fe1a 	bl	8000d44 <__aeabi_fmul>
 800f110:	4603      	mov	r3, r0
 800f112:	461a      	mov	r2, r3
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	605a      	str	r2, [r3, #4]
                a1 = 2 * (K * K - V) * norm;
 800f118:	6939      	ldr	r1, [r7, #16]
 800f11a:	6938      	ldr	r0, [r7, #16]
 800f11c:	f7f1 fe12 	bl	8000d44 <__aeabi_fmul>
 800f120:	4603      	mov	r3, r0
 800f122:	6979      	ldr	r1, [r7, #20]
 800f124:	4618      	mov	r0, r3
 800f126:	f7f1 fd03 	bl	8000b30 <__aeabi_fsub>
 800f12a:	4603      	mov	r3, r0
 800f12c:	4619      	mov	r1, r3
 800f12e:	4618      	mov	r0, r3
 800f130:	f7f1 fd00 	bl	8000b34 <__addsf3>
 800f134:	4603      	mov	r3, r0
 800f136:	68f9      	ldr	r1, [r7, #12]
 800f138:	4618      	mov	r0, r3
 800f13a:	f7f1 fe03 	bl	8000d44 <__aeabi_fmul>
 800f13e:	4603      	mov	r3, r0
 800f140:	461a      	mov	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	609a      	str	r2, [r3, #8]
                a2 = (V - sqrt(2*V) * K + K * K) * norm;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	4619      	mov	r1, r3
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7f1 fcf2 	bl	8000b34 <__addsf3>
 800f150:	4603      	mov	r3, r0
 800f152:	4618      	mov	r0, r3
 800f154:	f7ff f90e 	bl	800e374 <_ZSt4sqrtf>
 800f158:	4603      	mov	r3, r0
 800f15a:	6939      	ldr	r1, [r7, #16]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7f1 fdf1 	bl	8000d44 <__aeabi_fmul>
 800f162:	4603      	mov	r3, r0
 800f164:	4619      	mov	r1, r3
 800f166:	6978      	ldr	r0, [r7, #20]
 800f168:	f7f1 fce2 	bl	8000b30 <__aeabi_fsub>
 800f16c:	4603      	mov	r3, r0
 800f16e:	461c      	mov	r4, r3
 800f170:	6939      	ldr	r1, [r7, #16]
 800f172:	6938      	ldr	r0, [r7, #16]
 800f174:	f7f1 fde6 	bl	8000d44 <__aeabi_fmul>
 800f178:	4603      	mov	r3, r0
 800f17a:	4619      	mov	r1, r3
 800f17c:	4620      	mov	r0, r4
 800f17e:	f7f1 fcd9 	bl	8000b34 <__addsf3>
 800f182:	4603      	mov	r3, r0
 800f184:	68f9      	ldr	r1, [r7, #12]
 800f186:	4618      	mov	r0, r3
 800f188:	f7f1 fddc 	bl	8000d44 <__aeabi_fmul>
 800f18c:	4603      	mov	r3, r0
 800f18e:	461a      	mov	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	60da      	str	r2, [r3, #12]
                b1 = 2 * (K * K - 1) * norm;
 800f194:	6939      	ldr	r1, [r7, #16]
 800f196:	6938      	ldr	r0, [r7, #16]
 800f198:	f7f1 fdd4 	bl	8000d44 <__aeabi_fmul>
 800f19c:	4603      	mov	r3, r0
 800f19e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7f1 fcc4 	bl	8000b30 <__aeabi_fsub>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7f1 fcc1 	bl	8000b34 <__addsf3>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	68f9      	ldr	r1, [r7, #12]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7f1 fdc4 	bl	8000d44 <__aeabi_fmul>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	461a      	mov	r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	611a      	str	r2, [r3, #16]
                b2 = (1 - sqrt(2) * K + K * K) * norm;
 800f1c4:	2002      	movs	r0, #2
 800f1c6:	f7ff f96b 	bl	800e4a0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	460d      	mov	r5, r1
 800f1ce:	6938      	ldr	r0, [r7, #16]
 800f1d0:	f7f1 f92a 	bl	8000428 <__aeabi_f2d>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4620      	mov	r0, r4
 800f1da:	4629      	mov	r1, r5
 800f1dc:	f7f1 f97c 	bl	80004d8 <__aeabi_dmul>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	460c      	mov	r4, r1
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	4623      	mov	r3, r4
 800f1e8:	f04f 0000 	mov.w	r0, #0
 800f1ec:	4915      	ldr	r1, [pc, #84]	; (800f244 <_ZN6Biquad10calcBiquadEv+0xd7c>)
 800f1ee:	f7f0 ffbb 	bl	8000168 <__aeabi_dsub>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	460c      	mov	r4, r1
 800f1f6:	4625      	mov	r5, r4
 800f1f8:	461c      	mov	r4, r3
 800f1fa:	6939      	ldr	r1, [r7, #16]
 800f1fc:	6938      	ldr	r0, [r7, #16]
 800f1fe:	f7f1 fda1 	bl	8000d44 <__aeabi_fmul>
 800f202:	4603      	mov	r3, r0
 800f204:	4618      	mov	r0, r3
 800f206:	f7f1 f90f 	bl	8000428 <__aeabi_f2d>
 800f20a:	4602      	mov	r2, r0
 800f20c:	460b      	mov	r3, r1
 800f20e:	4620      	mov	r0, r4
 800f210:	4629      	mov	r1, r5
 800f212:	f7f0 ffab 	bl	800016c <__adddf3>
 800f216:	4603      	mov	r3, r0
 800f218:	460c      	mov	r4, r1
 800f21a:	4625      	mov	r5, r4
 800f21c:	461c      	mov	r4, r3
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f7f1 f902 	bl	8000428 <__aeabi_f2d>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	4620      	mov	r0, r4
 800f22a:	4629      	mov	r1, r5
 800f22c:	f7f1 f954 	bl	80004d8 <__aeabi_dmul>
 800f230:	4603      	mov	r3, r0
 800f232:	460c      	mov	r4, r1
 800f234:	4618      	mov	r0, r3
 800f236:	4621      	mov	r1, r4
 800f238:	f7f1 fc26 	bl	8000a88 <__aeabi_d2f>
 800f23c:	4602      	mov	r2, r0
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	615a      	str	r2, [r3, #20]
                a1 = 2 * (K * K - 1) * norm;
                a2 = (1 - sqrt(2) * K + K * K) * norm;
                b1 = 2 * (K * K - V) * norm;
                b2 = (V - sqrt(2*V) * K + K * K) * norm;
            }
            break;
 800f242:	e0fb      	b.n	800f43c <_ZN6Biquad10calcBiquadEv+0xf74>
 800f244:	3ff00000 	.word	0x3ff00000
                norm = 1 / (V + sqrt(2*V) * K + K * K);
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	4619      	mov	r1, r3
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7f1 fc71 	bl	8000b34 <__addsf3>
 800f252:	4603      	mov	r3, r0
 800f254:	4618      	mov	r0, r3
 800f256:	f7ff f88d 	bl	800e374 <_ZSt4sqrtf>
 800f25a:	4603      	mov	r3, r0
 800f25c:	6939      	ldr	r1, [r7, #16]
 800f25e:	4618      	mov	r0, r3
 800f260:	f7f1 fd70 	bl	8000d44 <__aeabi_fmul>
 800f264:	4603      	mov	r3, r0
 800f266:	6979      	ldr	r1, [r7, #20]
 800f268:	4618      	mov	r0, r3
 800f26a:	f7f1 fc63 	bl	8000b34 <__addsf3>
 800f26e:	4603      	mov	r3, r0
 800f270:	461c      	mov	r4, r3
 800f272:	6939      	ldr	r1, [r7, #16]
 800f274:	6938      	ldr	r0, [r7, #16]
 800f276:	f7f1 fd65 	bl	8000d44 <__aeabi_fmul>
 800f27a:	4603      	mov	r3, r0
 800f27c:	4619      	mov	r1, r3
 800f27e:	4620      	mov	r0, r4
 800f280:	f7f1 fc58 	bl	8000b34 <__addsf3>
 800f284:	4603      	mov	r3, r0
 800f286:	4619      	mov	r1, r3
 800f288:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f28c:	f7f1 fe0e 	bl	8000eac <__aeabi_fdiv>
 800f290:	4603      	mov	r3, r0
 800f292:	60fb      	str	r3, [r7, #12]
                a0 = (1 + sqrt(2) * K + K * K) * norm;
 800f294:	2002      	movs	r0, #2
 800f296:	f7ff f903 	bl	800e4a0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800f29a:	4604      	mov	r4, r0
 800f29c:	460d      	mov	r5, r1
 800f29e:	6938      	ldr	r0, [r7, #16]
 800f2a0:	f7f1 f8c2 	bl	8000428 <__aeabi_f2d>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	4629      	mov	r1, r5
 800f2ac:	f7f1 f914 	bl	80004d8 <__aeabi_dmul>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	f04f 0200 	mov.w	r2, #0
 800f2bc:	4b62      	ldr	r3, [pc, #392]	; (800f448 <_ZN6Biquad10calcBiquadEv+0xf80>)
 800f2be:	f7f0 ff55 	bl	800016c <__adddf3>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	4625      	mov	r5, r4
 800f2c8:	461c      	mov	r4, r3
 800f2ca:	6939      	ldr	r1, [r7, #16]
 800f2cc:	6938      	ldr	r0, [r7, #16]
 800f2ce:	f7f1 fd39 	bl	8000d44 <__aeabi_fmul>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7f1 f8a7 	bl	8000428 <__aeabi_f2d>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	460b      	mov	r3, r1
 800f2de:	4620      	mov	r0, r4
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f7f0 ff43 	bl	800016c <__adddf3>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	460c      	mov	r4, r1
 800f2ea:	4625      	mov	r5, r4
 800f2ec:	461c      	mov	r4, r3
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f7f1 f89a 	bl	8000428 <__aeabi_f2d>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	f7f1 f8ec 	bl	80004d8 <__aeabi_dmul>
 800f300:	4603      	mov	r3, r0
 800f302:	460c      	mov	r4, r1
 800f304:	4618      	mov	r0, r3
 800f306:	4621      	mov	r1, r4
 800f308:	f7f1 fbbe 	bl	8000a88 <__aeabi_d2f>
 800f30c:	4602      	mov	r2, r0
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	605a      	str	r2, [r3, #4]
                a1 = 2 * (K * K - 1) * norm;
 800f312:	6939      	ldr	r1, [r7, #16]
 800f314:	6938      	ldr	r0, [r7, #16]
 800f316:	f7f1 fd15 	bl	8000d44 <__aeabi_fmul>
 800f31a:	4603      	mov	r3, r0
 800f31c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f320:	4618      	mov	r0, r3
 800f322:	f7f1 fc05 	bl	8000b30 <__aeabi_fsub>
 800f326:	4603      	mov	r3, r0
 800f328:	4619      	mov	r1, r3
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7f1 fc02 	bl	8000b34 <__addsf3>
 800f330:	4603      	mov	r3, r0
 800f332:	68f9      	ldr	r1, [r7, #12]
 800f334:	4618      	mov	r0, r3
 800f336:	f7f1 fd05 	bl	8000d44 <__aeabi_fmul>
 800f33a:	4603      	mov	r3, r0
 800f33c:	461a      	mov	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	609a      	str	r2, [r3, #8]
                a2 = (1 - sqrt(2) * K + K * K) * norm;
 800f342:	2002      	movs	r0, #2
 800f344:	f7ff f8ac 	bl	800e4a0 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800f348:	4604      	mov	r4, r0
 800f34a:	460d      	mov	r5, r1
 800f34c:	6938      	ldr	r0, [r7, #16]
 800f34e:	f7f1 f86b 	bl	8000428 <__aeabi_f2d>
 800f352:	4602      	mov	r2, r0
 800f354:	460b      	mov	r3, r1
 800f356:	4620      	mov	r0, r4
 800f358:	4629      	mov	r1, r5
 800f35a:	f7f1 f8bd 	bl	80004d8 <__aeabi_dmul>
 800f35e:	4603      	mov	r3, r0
 800f360:	460c      	mov	r4, r1
 800f362:	461a      	mov	r2, r3
 800f364:	4623      	mov	r3, r4
 800f366:	f04f 0000 	mov.w	r0, #0
 800f36a:	4937      	ldr	r1, [pc, #220]	; (800f448 <_ZN6Biquad10calcBiquadEv+0xf80>)
 800f36c:	f7f0 fefc 	bl	8000168 <__aeabi_dsub>
 800f370:	4603      	mov	r3, r0
 800f372:	460c      	mov	r4, r1
 800f374:	4625      	mov	r5, r4
 800f376:	461c      	mov	r4, r3
 800f378:	6939      	ldr	r1, [r7, #16]
 800f37a:	6938      	ldr	r0, [r7, #16]
 800f37c:	f7f1 fce2 	bl	8000d44 <__aeabi_fmul>
 800f380:	4603      	mov	r3, r0
 800f382:	4618      	mov	r0, r3
 800f384:	f7f1 f850 	bl	8000428 <__aeabi_f2d>
 800f388:	4602      	mov	r2, r0
 800f38a:	460b      	mov	r3, r1
 800f38c:	4620      	mov	r0, r4
 800f38e:	4629      	mov	r1, r5
 800f390:	f7f0 feec 	bl	800016c <__adddf3>
 800f394:	4603      	mov	r3, r0
 800f396:	460c      	mov	r4, r1
 800f398:	4625      	mov	r5, r4
 800f39a:	461c      	mov	r4, r3
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f7f1 f843 	bl	8000428 <__aeabi_f2d>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	4629      	mov	r1, r5
 800f3aa:	f7f1 f895 	bl	80004d8 <__aeabi_dmul>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	460c      	mov	r4, r1
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	4621      	mov	r1, r4
 800f3b6:	f7f1 fb67 	bl	8000a88 <__aeabi_d2f>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	60da      	str	r2, [r3, #12]
                b1 = 2 * (K * K - V) * norm;
 800f3c0:	6939      	ldr	r1, [r7, #16]
 800f3c2:	6938      	ldr	r0, [r7, #16]
 800f3c4:	f7f1 fcbe 	bl	8000d44 <__aeabi_fmul>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	6979      	ldr	r1, [r7, #20]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7f1 fbaf 	bl	8000b30 <__aeabi_fsub>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7f1 fbac 	bl	8000b34 <__addsf3>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	68f9      	ldr	r1, [r7, #12]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7f1 fcaf 	bl	8000d44 <__aeabi_fmul>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	611a      	str	r2, [r3, #16]
                b2 = (V - sqrt(2*V) * K + K * K) * norm;
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7f1 fb9e 	bl	8000b34 <__addsf3>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fe ffba 	bl	800e374 <_ZSt4sqrtf>
 800f400:	4603      	mov	r3, r0
 800f402:	6939      	ldr	r1, [r7, #16]
 800f404:	4618      	mov	r0, r3
 800f406:	f7f1 fc9d 	bl	8000d44 <__aeabi_fmul>
 800f40a:	4603      	mov	r3, r0
 800f40c:	4619      	mov	r1, r3
 800f40e:	6978      	ldr	r0, [r7, #20]
 800f410:	f7f1 fb8e 	bl	8000b30 <__aeabi_fsub>
 800f414:	4603      	mov	r3, r0
 800f416:	461c      	mov	r4, r3
 800f418:	6939      	ldr	r1, [r7, #16]
 800f41a:	6938      	ldr	r0, [r7, #16]
 800f41c:	f7f1 fc92 	bl	8000d44 <__aeabi_fmul>
 800f420:	4603      	mov	r3, r0
 800f422:	4619      	mov	r1, r3
 800f424:	4620      	mov	r0, r4
 800f426:	f7f1 fb85 	bl	8000b34 <__addsf3>
 800f42a:	4603      	mov	r3, r0
 800f42c:	68f9      	ldr	r1, [r7, #12]
 800f42e:	4618      	mov	r0, r3
 800f430:	f7f1 fc88 	bl	8000d44 <__aeabi_fmul>
 800f434:	4603      	mov	r3, r0
 800f436:	461a      	mov	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	615a      	str	r2, [r3, #20]
            break;
 800f43c:	bf00      	nop
    }

    return;
 800f43e:	bf00      	nop
 800f440:	bf00      	nop
}
 800f442:	3718      	adds	r7, #24
 800f444:	46bd      	mov	sp, r7
 800f446:	bdb0      	pop	{r4, r5, r7, pc}
 800f448:	3ff00000 	.word	0x3ff00000

0800f44c <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800f44c:	b590      	push	{r4, r7, lr}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	e9c7 2300 	strd	r2, r3, [r7]
      return pow(__type(__x), __type(__y));
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f7f0 ffd3 	bl	8000404 <__aeabi_i2d>
 800f45e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f462:	f005 fbdd 	bl	8014c20 <pow>
 800f466:	4603      	mov	r3, r0
 800f468:	460c      	mov	r4, r1
    }
 800f46a:	4618      	mov	r0, r3
 800f46c:	4621      	mov	r1, r4
 800f46e:	3714      	adds	r7, #20
 800f470:	46bd      	mov	sp, r7
 800f472:	bd90      	pop	{r4, r7, pc}

0800f474 <_ZN28FFB_BlockLoad_Feature_Data_tC1Ev>:
	{ // FFB: PID Block Load Feature Report
	uint8_t	reportId = HID_ID_BLKLDREP;	// =2
	uint8_t effectBlockIndex;	// 1..40
	uint8_t	loadStatus;	// 1=Success,2=Full,3=Error
	uint16_t	ramPoolAvailable;	// =0 or 0xFFFF?
} __attribute__((packed)) FFB_BlockLoad_Feature_Data_t;
 800f474:	b480      	push	{r7}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2212      	movs	r2, #18
 800f480:	701a      	strb	r2, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	370c      	adds	r7, #12
 800f488:	46bd      	mov	sp, r7
 800f48a:	bc80      	pop	{r7}
 800f48c:	4770      	bx	lr

0800f48e <_ZN26FFB_PIDPool_Feature_Data_tC1Ev>:
	{ // FFB: PID Pool Feature Report
	uint8_t	reportId = HID_ID_POOLREP;
	uint16_t	ramPoolSize = MAX_EFFECTS;
	uint8_t		maxSimultaneousEffects = MAX_EFFECTS;
	uint8_t		memoryManagement = 3;	// Bits: 0=DeviceManagedPool, 1=SharedParameterBlocks
} __attribute__((packed)) FFB_PIDPool_Feature_Data_t;
 800f48e:	b480      	push	{r7}
 800f490:	b083      	sub	sp, #12
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2213      	movs	r2, #19
 800f49a:	701a      	strb	r2, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800f4a4:	705a      	strb	r2, [r3, #1]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	709a      	strb	r2, [r3, #2]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2228      	movs	r2, #40	; 0x28
 800f4ae:	70da      	strb	r2, [r3, #3]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2203      	movs	r2, #3
 800f4b4:	711a      	strb	r2, [r3, #4]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bc80      	pop	{r7}
 800f4c0:	4770      	bx	lr

0800f4c2 <_ZN18reportFFB_status_tC1Ev>:
} __attribute__((packed)) reportFFB_status_t;
 800f4c2:	b480      	push	{r7}
 800f4c4:	b083      	sub	sp, #12
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2202      	movs	r2, #2
 800f4ce:	701a      	strb	r2, [r3, #0]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	705a      	strb	r2, [r3, #1]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	220a      	movs	r2, #10
 800f4da:	709a      	strb	r2, [r3, #2]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	370c      	adds	r7, #12
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bc80      	pop	{r7}
 800f4e6:	4770      	bx	lr

0800f4e8 <_ZN10FFB_EffectC1Ev>:
	uint16_t duration=0,fadeTime=0,attackTime=0, elapsedTime = 0;	// ms
	uint64_t startTime = 0;
	uint16_t samplePeriod = 0;
	uint8_t axis = 0;
	uint16_t	deadBand = 0;
} FFB_Effect;
 800f4e8:	b490      	push	{r4, r7}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	701a      	strb	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	705a      	strb	r2, [r3, #1]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	22ff      	movs	r2, #255	; 0xff
 800f500:	709a      	strb	r2, [r3, #2]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2200      	movs	r2, #0
 800f506:	811a      	strh	r2, [r3, #8]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	815a      	strh	r2, [r3, #10]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2200      	movs	r2, #0
 800f512:	819a      	strh	r2, [r3, #12]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	81da      	strh	r2, [r3, #14]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	821a      	strh	r2, [r3, #16]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	825a      	strh	r2, [r3, #18]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2200      	movs	r2, #0
 800f52a:	829a      	strh	r2, [r3, #20]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	759a      	strb	r2, [r3, #22]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	75da      	strb	r2, [r3, #23]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	831a      	strh	r2, [r3, #24]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2200      	movs	r2, #0
 800f542:	835a      	strh	r2, [r3, #26]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2200      	movs	r2, #0
 800f548:	839a      	strh	r2, [r3, #28]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2200      	movs	r2, #0
 800f54e:	621a      	str	r2, [r3, #32]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2200      	movs	r2, #0
 800f554:	625a      	str	r2, [r3, #36]	; 0x24
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	851a      	strh	r2, [r3, #40]	; 0x28
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2200      	movs	r2, #0
 800f566:	859a      	strh	r2, [r3, #44]	; 0x2c
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2200      	movs	r2, #0
 800f56c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	861a      	strh	r2, [r3, #48]	; 0x30
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	865a      	strh	r2, [r3, #50]	; 0x32
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	f04f 0300 	mov.w	r3, #0
 800f580:	f04f 0400 	mov.w	r4, #0
 800f584:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bc90      	pop	{r4, r7}
 800f5aa:	4770      	bx	lr

0800f5ac <_ZN6HidFFBC1Ev>:
#include "HidFFB.h"
#include "math.h"

HidFFB::HidFFB() {
 800f5ac:	b5b0      	push	{r4, r5, r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f001 fd92 	bl	80110e0 <_ZN13UsbHidHandlerC1Ev>
 800f5bc:	4a2e      	ldr	r2, [pc, #184]	; (800f678 <_ZN6HidFFBC1Ev+0xcc>)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	601a      	str	r2, [r3, #0]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	711a      	strb	r2, [r3, #4]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a2c      	ldr	r2, [pc, #176]	; (800f67c <_ZN6HidFFBC1Ev+0xd0>)
 800f5cc:	609a      	str	r2, [r3, #8]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a2b      	ldr	r2, [pc, #172]	; (800f680 <_ZN6HidFFBC1Ev+0xd4>)
 800f5d2:	60da      	str	r2, [r3, #12]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	741a      	strb	r2, [r3, #16]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a27      	ldr	r2, [pc, #156]	; (800f67c <_ZN6HidFFBC1Ev+0xd0>)
 800f5de:	615a      	str	r2, [r3, #20]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a27      	ldr	r2, [pc, #156]	; (800f680 <_ZN6HidFFBC1Ev+0xd4>)
 800f5e4:	619a      	str	r2, [r3, #24]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	771a      	strb	r2, [r3, #28]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5f2:	83da      	strh	r2, [r3, #30]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	621a      	str	r2, [r3, #32]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2200      	movs	r2, #0
 800f606:	84da      	strh	r2, [r3, #38]	; 0x26
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2200      	movs	r2, #0
 800f614:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	22ff      	movs	r2, #255	; 0xff
 800f61a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2200      	movs	r2, #0
 800f622:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	332e      	adds	r3, #46	; 0x2e
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7ff ff22 	bl	800f474 <_ZN28FFB_BlockLoad_Feature_Data_tC1Ev>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	3333      	adds	r3, #51	; 0x33
 800f634:	4618      	mov	r0, r3
 800f636:	f7ff ff2a 	bl	800f48e <_ZN26FFB_PIDPool_Feature_Data_tC1Ev>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	3338      	adds	r3, #56	; 0x38
 800f63e:	4618      	mov	r0, r3
 800f640:	f7ff ff3f 	bl	800f4c2 <_ZN18reportFFB_status_tC1Ev>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3340      	adds	r3, #64	; 0x40
 800f648:	2427      	movs	r4, #39	; 0x27
 800f64a:	461d      	mov	r5, r3
 800f64c:	2c00      	cmp	r4, #0
 800f64e:	db05      	blt.n	800f65c <_ZN6HidFFBC1Ev+0xb0>
 800f650:	4628      	mov	r0, r5
 800f652:	f7ff ff49 	bl	800f4e8 <_ZN10FFB_EffectC1Ev>
 800f656:	3548      	adds	r5, #72	; 0x48
 800f658:	3c01      	subs	r4, #1
 800f65a:	e7f7      	b.n	800f64c <_ZN6HidFFBC1Ev+0xa0>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
	this->registerHidCallback();
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4618      	mov	r0, r3
 800f668:	f001 fd82 	bl	8011170 <_ZN13UsbHidHandler19registerHidCallbackEv>
}
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4618      	mov	r0, r3
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bdb0      	pop	{r4, r5, r7, pc}
 800f676:	bf00      	nop
 800f678:	08019260 	.word	0x08019260
 800f67c:	42480000 	.word	0x42480000
 800f680:	3e4ccccd 	.word	0x3e4ccccd

0800f684 <_ZN6HidFFBD1Ev>:

HidFFB::~HidFFB() {
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	4a05      	ldr	r2, [pc, #20]	; (800f6a4 <_ZN6HidFFBD1Ev+0x20>)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	601a      	str	r2, [r3, #0]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4618      	mov	r0, r3
 800f696:	f001 fd33 	bl	8011100 <_ZN13UsbHidHandlerD1Ev>

}
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4618      	mov	r0, r3
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	08019260 	.word	0x08019260

0800f6a8 <_ZN6HidFFBD0Ev>:
HidFFB::~HidFFB() {
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
}
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f7ff ffe7 	bl	800f684 <_ZN6HidFFBD1Ev>
 800f6b6:	f640 3188 	movw	r1, #2952	; 0xb88
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f004 ff1e 	bl	80144fc <_ZdlPvj>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
	...

0800f6cc <_ZN6HidFFB6hidOutEPh>:


void HidFFB::hidOut(uint8_t* report){
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
	hid_out_period = HAL_GetTick() - lastOut; // For measuring update rate
 800f6d6:	f7f2 fd8d 	bl	80021f4 <HAL_GetTick>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 3b80 	ldr.w	r3, [r3, #2944]	; 0xb80
 800f6e2:	1ad2      	subs	r2, r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	621a      	str	r2, [r3, #32]
	lastOut = HAL_GetTick();
 800f6e8:	f7f2 fd84 	bl	80021f4 <HAL_GetTick>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
	// FFB Output Message
	report[0] -= FFB_ID_OFFSET;// if offset id was set correct this
 800f6f4:	683a      	ldr	r2, [r7, #0]
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	7812      	ldrb	r2, [r2, #0]
 800f6fa:	701a      	strb	r2, [r3, #0]
	uint8_t event_idx = report[0];
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	73fb      	strb	r3, [r7, #15]


	// -------- Out Reports --------
	switch(event_idx){
 800f702:	7bfb      	ldrb	r3, [r7, #15]
 800f704:	3b01      	subs	r3, #1
 800f706:	2b10      	cmp	r3, #16
 800f708:	f200 809f 	bhi.w	800f84a <_ZN6HidFFB6hidOutEPh+0x17e>
 800f70c:	a201      	add	r2, pc, #4	; (adr r2, 800f714 <_ZN6HidFFB6hidOutEPh+0x48>)
 800f70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f712:	bf00      	nop
 800f714:	0800f765 	.word	0x0800f765
 800f718:	0800f78d 	.word	0x0800f78d
 800f71c:	0800f799 	.word	0x0800f799
 800f720:	0800f7a5 	.word	0x0800f7a5
 800f724:	0800f7b1 	.word	0x0800f7b1
 800f728:	0800f7bd 	.word	0x0800f7bd
 800f72c:	0800f857 	.word	0x0800f857
 800f730:	0800f857 	.word	0x0800f857
 800f734:	0800f84b 	.word	0x0800f84b
 800f738:	0800f7c9 	.word	0x0800f7c9
 800f73c:	0800f835 	.word	0x0800f835
 800f740:	0800f771 	.word	0x0800f771
 800f744:	0800f781 	.word	0x0800f781
 800f748:	0800f84b 	.word	0x0800f84b
 800f74c:	0800f84b 	.word	0x0800f84b
 800f750:	0800f84b 	.word	0x0800f84b
 800f754:	0800f759 	.word	0x0800f759
	case HID_ID_NEWEFREP: //add Effect Report. Feature
		new_effect((FFB_CreateNewEffect_Feature_Data_t*)(report));
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	4619      	mov	r1, r3
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f000 f991 	bl	800fa84 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>
		break;
 800f762:	e079      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	case HID_ID_EFFREP: // Set Effect
		set_effect((FFB_SetEffect_t*)(report));
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	4619      	mov	r1, r3
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f000 f9ef 	bl	800fb4c <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>
		break;
 800f76e:	e073      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	case HID_ID_CTRLREP: // Control report. 1=Enable Actuators, 2=Disable Actuators, 4=Stop All Effects, 8=Reset, 16=Pause, 32=Continue
		ffb_control(report[1]);
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	3301      	adds	r3, #1
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	4619      	mov	r1, r3
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 f8eb 	bl	800f954 <_ZN6HidFFB11ffb_controlEh>
		break;
 800f77e:	e06b      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	case HID_ID_GAINREP:
		gain = report[1];
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	785a      	ldrb	r2, [r3, #1]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 800f78a:	e065      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	case HID_ID_ENVREP:
		set_envelope((FFB_SetEnvelope_Data_t*)(report));
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	4619      	mov	r1, r3
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 fa40 	bl	800fc16 <_ZN6HidFFB12set_envelopeEP22FFB_SetEnvelope_Data_t>
		break;
 800f796:	e05f      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	case HID_ID_CONDREP: // Condition
		set_condition((FFB_SetCondition_Data_t*)report);
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	4619      	mov	r1, r3
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 fb20 	bl	800fde2 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>
		break;
 800f7a2:	e059      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	case HID_ID_PRIDREP: // Periodic
		set_periodic((FFB_SetPeriodic_Data_t*)report);
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 fb59 	bl	800fe60 <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>
		break;
 800f7ae:	e053      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	case HID_ID_CONSTREP: // Constant
		set_constant_effect((FFB_SetConstantForce_Data_t*)report);
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 f94b 	bl	800fa50 <_ZN6HidFFB19set_constant_effectEP27FFB_SetConstantForce_Data_t>
		break;
 800f7ba:	e04d      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	case HID_ID_RAMPREP: // Ramp
		set_ramp_effect((FFB_SetRampForce_Data_t*)report);
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 fa53 	bl	800fc6c <_ZN6HidFFB15set_ramp_effectEP23FFB_SetRampForce_Data_t>
		break;
 800f7c6:	e047      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
		//TODO
		break;
	case HID_ID_EFOPREP: //Effect operation
	{
		// Start or stop effect
		uint8_t id = report[1]-1;
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	73bb      	strb	r3, [r7, #14]
		if(report[2] == 3){
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	3302      	adds	r3, #2
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	2b03      	cmp	r3, #3
 800f7da:	d10a      	bne.n	800f7f2 <_ZN6HidFFB6hidOutEPh+0x126>
			effects[id].state = 0; //Stop
 800f7dc:	7bba      	ldrb	r2, [r7, #14]
 800f7de:	6879      	ldr	r1, [r7, #4]
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	00db      	lsls	r3, r3, #3
 800f7e4:	4413      	add	r3, r2
 800f7e6:	00db      	lsls	r3, r3, #3
 800f7e8:	440b      	add	r3, r1
 800f7ea:	3340      	adds	r3, #64	; 0x40
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	701a      	strb	r2, [r3, #0]
		}else{
			effects[id].state = 1; //Start
			effects[id].counter = 0; // When an effect was stopped reset all parameters that could cause jerking
			set_filters(&effects[id]);
		}
		break;
 800f7f0:	e032      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
			effects[id].state = 1; //Start
 800f7f2:	7bba      	ldrb	r2, [r7, #14]
 800f7f4:	6879      	ldr	r1, [r7, #4]
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	00db      	lsls	r3, r3, #3
 800f7fa:	4413      	add	r3, r2
 800f7fc:	00db      	lsls	r3, r3, #3
 800f7fe:	440b      	add	r3, r1
 800f800:	3340      	adds	r3, #64	; 0x40
 800f802:	2201      	movs	r2, #1
 800f804:	701a      	strb	r2, [r3, #0]
			effects[id].counter = 0; // When an effect was stopped reset all parameters that could cause jerking
 800f806:	7bba      	ldrb	r2, [r7, #14]
 800f808:	6879      	ldr	r1, [r7, #4]
 800f80a:	4613      	mov	r3, r2
 800f80c:	00db      	lsls	r3, r3, #3
 800f80e:	4413      	add	r3, r2
 800f810:	00db      	lsls	r3, r3, #3
 800f812:	440b      	add	r3, r1
 800f814:	3368      	adds	r3, #104	; 0x68
 800f816:	2200      	movs	r2, #0
 800f818:	801a      	strh	r2, [r3, #0]
			set_filters(&effects[id]);
 800f81a:	7bba      	ldrb	r2, [r7, #14]
 800f81c:	4613      	mov	r3, r2
 800f81e:	00db      	lsls	r3, r3, #3
 800f820:	4413      	add	r3, r2
 800f822:	00db      	lsls	r3, r3, #3
 800f824:	3340      	adds	r3, #64	; 0x40
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	4413      	add	r3, r2
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 fa3e 	bl	800fcae <_ZN6HidFFB11set_filtersEP10FFB_Effect>
		break;
 800f832:	e011      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	}
	case HID_ID_BLKFRREP: // Free a block
	{
		free_effect(report[1]-1);
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	3301      	adds	r3, #1
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	3b01      	subs	r3, #1
 800f83e:	b29b      	uxth	r3, r3
 800f840:	4619      	mov	r1, r3
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f80e 	bl	800f864 <_ZN6HidFFB11free_effectEt>
		break;
 800f848:	e006      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
	}

	default:
		printf("Got unknown command: %d",event_idx);
 800f84a:	7bfb      	ldrb	r3, [r7, #15]
 800f84c:	4619      	mov	r1, r3
 800f84e:	4804      	ldr	r0, [pc, #16]	; (800f860 <_ZN6HidFFB6hidOutEPh+0x194>)
 800f850:	f008 f938 	bl	8017ac4 <iprintf>
		break;
 800f854:	e000      	b.n	800f858 <_ZN6HidFFB6hidOutEPh+0x18c>
		break;
 800f856:	bf00      	nop
	}

}
 800f858:	bf00      	nop
 800f85a:	3710      	adds	r7, #16
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	080190a0 	.word	0x080190a0

0800f864 <_ZN6HidFFB11free_effectEt>:

void HidFFB::free_effect(uint16_t idx){
 800f864:	b590      	push	{r4, r7, lr}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	460b      	mov	r3, r1
 800f86e:	807b      	strh	r3, [r7, #2]
	if(idx < MAX_EFFECTS){
 800f870:	887b      	ldrh	r3, [r7, #2]
 800f872:	2b27      	cmp	r3, #39	; 0x27
 800f874:	d830      	bhi.n	800f8d8 <_ZN6HidFFB11free_effectEt+0x74>
		effects[idx].type=FFB_EFFECT_NONE;
 800f876:	887a      	ldrh	r2, [r7, #2]
 800f878:	6879      	ldr	r1, [r7, #4]
 800f87a:	4613      	mov	r3, r2
 800f87c:	00db      	lsls	r3, r3, #3
 800f87e:	4413      	add	r3, r2
 800f880:	00db      	lsls	r3, r3, #3
 800f882:	440b      	add	r3, r1
 800f884:	3341      	adds	r3, #65	; 0x41
 800f886:	2200      	movs	r2, #0
 800f888:	701a      	strb	r2, [r3, #0]
		if(effects[idx].filter != nullptr){
 800f88a:	887a      	ldrh	r2, [r7, #2]
 800f88c:	6879      	ldr	r1, [r7, #4]
 800f88e:	4613      	mov	r3, r2
 800f890:	00db      	lsls	r3, r3, #3
 800f892:	4413      	add	r3, r2
 800f894:	00db      	lsls	r3, r3, #3
 800f896:	440b      	add	r3, r1
 800f898:	3364      	adds	r3, #100	; 0x64
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d01b      	beq.n	800f8d8 <_ZN6HidFFB11free_effectEt+0x74>
			delete effects[idx].filter;
 800f8a0:	887a      	ldrh	r2, [r7, #2]
 800f8a2:	6879      	ldr	r1, [r7, #4]
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	00db      	lsls	r3, r3, #3
 800f8a8:	4413      	add	r3, r2
 800f8aa:	00db      	lsls	r3, r3, #3
 800f8ac:	440b      	add	r3, r1
 800f8ae:	3364      	adds	r3, #100	; 0x64
 800f8b0:	681c      	ldr	r4, [r3, #0]
 800f8b2:	2c00      	cmp	r4, #0
 800f8b4:	d006      	beq.n	800f8c4 <_ZN6HidFFB11free_effectEt+0x60>
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	f7fe fd7d 	bl	800e3b6 <_ZN6BiquadD1Ev>
 800f8bc:	212c      	movs	r1, #44	; 0x2c
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f004 fe1c 	bl	80144fc <_ZdlPvj>
			effects[idx].filter = nullptr;
 800f8c4:	887a      	ldrh	r2, [r7, #2]
 800f8c6:	6879      	ldr	r1, [r7, #4]
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	00db      	lsls	r3, r3, #3
 800f8cc:	4413      	add	r3, r2
 800f8ce:	00db      	lsls	r3, r3, #3
 800f8d0:	440b      	add	r3, r1
 800f8d2:	3364      	adds	r3, #100	; 0x64
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 800f8d8:	bf00      	nop
 800f8da:	370c      	adds	r7, #12
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd90      	pop	{r4, r7, pc}

0800f8e0 <_ZN6HidFFB6hidGetEhtPPh>:


void HidFFB::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){
 800f8e0:	b480      	push	{r7}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	607b      	str	r3, [r7, #4]
 800f8ea:	460b      	mov	r3, r1
 800f8ec:	72fb      	strb	r3, [r7, #11]
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	813b      	strh	r3, [r7, #8]
	// Feature gets go here

	id = id - FFB_ID_OFFSET;

	switch(id){
 800f8f2:	7afb      	ldrb	r3, [r7, #11]
 800f8f4:	2b12      	cmp	r3, #18
 800f8f6:	d002      	beq.n	800f8fe <_ZN6HidFFB6hidGetEhtPPh+0x1e>
 800f8f8:	2b13      	cmp	r3, #19
 800f8fa:	d006      	beq.n	800f90a <_ZN6HidFFB6hidGetEhtPPh+0x2a>
	case HID_ID_POOLREP:
		//printf("Get Pool Report\n");
		*return_buf = (uint8_t*)(&this->pool_report);
		break;
	}
}
 800f8fc:	e00b      	b.n	800f916 <_ZN6HidFFB6hidGetEhtPPh+0x36>
		*return_buf = (uint8_t*)(&this->blockLoad_report);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	601a      	str	r2, [r3, #0]
		break;
 800f908:	e005      	b.n	800f916 <_ZN6HidFFB6hidGetEhtPPh+0x36>
		*return_buf = (uint8_t*)(&this->pool_report);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f103 0233 	add.w	r2, r3, #51	; 0x33
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	601a      	str	r2, [r3, #0]
		break;
 800f914:	bf00      	nop
}
 800f916:	bf00      	nop
 800f918:	3714      	adds	r7, #20
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bc80      	pop	{r7}
 800f91e:	4770      	bx	lr

0800f920 <_ZN6HidFFB9start_FFBEv>:

void HidFFB::start_FFB(){
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
	ffb_active = true;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2201      	movs	r2, #1
 800f92c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d


}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	bc80      	pop	{r7}
 800f938:	4770      	bx	lr

0800f93a <_ZN6HidFFB8stop_FFBEv>:
void HidFFB::stop_FFB(){
 800f93a:	b480      	push	{r7}
 800f93c:	b083      	sub	sp, #12
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
	ffb_active = false;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d


	//TODO Callbacks?
}
 800f94a:	bf00      	nop
 800f94c:	370c      	adds	r7, #12
 800f94e:	46bd      	mov	sp, r7
 800f950:	bc80      	pop	{r7}
 800f952:	4770      	bx	lr

0800f954 <_ZN6HidFFB11ffb_controlEh>:

void HidFFB::ffb_control(uint8_t cmd){
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	460b      	mov	r3, r1
 800f95e:	70fb      	strb	r3, [r7, #3]
	printf("Got Control signal: %d\n",cmd);
 800f960:	78fb      	ldrb	r3, [r7, #3]
 800f962:	4619      	mov	r1, r3
 800f964:	4839      	ldr	r0, [pc, #228]	; (800fa4c <_ZN6HidFFB11ffb_controlEh+0xf8>)
 800f966:	f008 f8ad 	bl	8017ac4 <iprintf>
	if(cmd & 0x01){ //enable
 800f96a:	78fb      	ldrb	r3, [r7, #3]
 800f96c:	f003 0301 	and.w	r3, r3, #1
 800f970:	2b00      	cmp	r3, #0
 800f972:	d002      	beq.n	800f97a <_ZN6HidFFB11ffb_controlEh+0x26>
		start_FFB();
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff ffd3 	bl	800f920 <_ZN6HidFFB9start_FFBEv>
	}if(cmd & 0x02){ //disable
 800f97a:	78fb      	ldrb	r3, [r7, #3]
 800f97c:	f003 0302 	and.w	r3, r3, #2
 800f980:	2b00      	cmp	r3, #0
 800f982:	d003      	beq.n	800f98c <_ZN6HidFFB11ffb_controlEh+0x38>
		ffb_active = false;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2200      	movs	r2, #0
 800f988:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}if(cmd & 0x04){ //stop TODO Some games send wrong commands?
 800f98c:	78fb      	ldrb	r3, [r7, #3]
 800f98e:	f003 0304 	and.w	r3, r3, #4
 800f992:	2b00      	cmp	r3, #0
 800f994:	d002      	beq.n	800f99c <_ZN6HidFFB11ffb_controlEh+0x48>
		stop_FFB();
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7ff ffcf 	bl	800f93a <_ZN6HidFFB8stop_FFBEv>
		//start_FFB();
	}if(cmd & 0x08){ //reset
 800f99c:	78fb      	ldrb	r3, [r7, #3]
 800f99e:	f003 0308 	and.w	r3, r3, #8
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d005      	beq.n	800f9b2 <_ZN6HidFFB11ffb_controlEh+0x5e>
		//ffb_active = true;
		stop_FFB();
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f7ff ffc7 	bl	800f93a <_ZN6HidFFB8stop_FFBEv>
		reset_ffb();
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 faa7 	bl	800ff00 <_ZN6HidFFB9reset_ffbEv>
		// reset effects
	}if(cmd & 0x10){ //pause
 800f9b2:	78fb      	ldrb	r3, [r7, #3]
 800f9b4:	f003 0310 	and.w	r3, r3, #16
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d003      	beq.n	800f9c4 <_ZN6HidFFB11ffb_controlEh+0x70>
		ffb_active = false;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}if(cmd & 0x20){ //continue
 800f9c4:	78fb      	ldrb	r3, [r7, #3]
 800f9c6:	f003 0320 	and.w	r3, r3, #32
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d003      	beq.n	800f9d6 <_ZN6HidFFB11ffb_controlEh+0x82>
		ffb_active = true;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	Bchg(this->reportFFBStatus.status,HID_ENABLE_ACTUATORS & ffb_active);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f9dc:	461a      	mov	r2, r3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9e4:	f003 0302 	and.w	r3, r3, #2
 800f9e8:	401a      	ands	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9f0:	f003 0302 	and.w	r3, r3, #2
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d113      	bne.n	800fa20 <_ZN6HidFFB11ffb_controlEh+0xcc>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f9fe:	b25a      	sxtb	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa06:	f003 0302 	and.w	r3, r3, #2
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	43db      	mvns	r3, r3
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	b25b      	sxtb	r3, r3
 800fa12:	4013      	ands	r3, r2
 800fa14:	b25b      	sxtb	r3, r3
 800fa16:	b2da      	uxtb	r2, r3
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800fa1e:	e010      	b.n	800fa42 <_ZN6HidFFB11ffb_controlEh+0xee>
	Bchg(this->reportFFBStatus.status,HID_ENABLE_ACTUATORS & ffb_active);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa26:	b25a      	sxtb	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa2e:	b25b      	sxtb	r3, r3
 800fa30:	f003 0302 	and.w	r3, r3, #2
 800fa34:	b25b      	sxtb	r3, r3
 800fa36:	4313      	orrs	r3, r2
 800fa38:	b25b      	sxtb	r3, r3
 800fa3a:	b2da      	uxtb	r2, r3
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800fa42:	bf00      	nop
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	080190b8 	.word	0x080190b8

0800fa50 <_ZN6HidFFB19set_constant_effectEP27FFB_SetConstantForce_Data_t>:


void HidFFB::set_constant_effect(FFB_SetConstantForce_Data_t* effect){
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
	effects[effect->effectBlockIndex-1].magnitude = effect->magnitude;
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	785b      	ldrb	r3, [r3, #1]
 800fa5e:	1e5a      	subs	r2, r3, #1
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fa66:	b218      	sxth	r0, r3
 800fa68:	6879      	ldr	r1, [r7, #4]
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	00db      	lsls	r3, r3, #3
 800fa6e:	4413      	add	r3, r2
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	440b      	add	r3, r1
 800fa74:	3350      	adds	r3, #80	; 0x50
 800fa76:	4602      	mov	r2, r0
 800fa78:	801a      	strh	r2, [r3, #0]
}
 800fa7a:	bf00      	nop
 800fa7c:	370c      	adds	r7, #12
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bc80      	pop	{r7}
 800fa82:	4770      	bx	lr

0800fa84 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>:

void HidFFB::new_effect(FFB_CreateNewEffect_Feature_Data_t* effect){
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b096      	sub	sp, #88	; 0x58
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
	// Allocates a new effect

	uint8_t index = find_free_effect(effect->effectType); // next effect
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	785b      	ldrb	r3, [r3, #1]
 800fa92:	4619      	mov	r1, r3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 fa0f 	bl	800feb8 <_ZN6HidFFB16find_free_effectEh>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if(index == 0){
 800faa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d104      	bne.n	800fab2 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0x2e>
		blockLoad_report.loadStatus = 2;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2202      	movs	r2, #2
 800faac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800fab0:	e046      	b.n	800fb40 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0xbc>
		return;
	}
	printf("Creating Effect: %d with size %d at %d\n",effect->effectType,effect->byteCount,index);
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	785b      	ldrb	r3, [r3, #1]
 800fab6:	4619      	mov	r1, r3
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	885b      	ldrh	r3, [r3, #2]
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	461a      	mov	r2, r3
 800fac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fac4:	4820      	ldr	r0, [pc, #128]	; (800fb48 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0xc4>)
 800fac6:	f007 fffd 	bl	8017ac4 <iprintf>

	FFB_Effect new_effect;
 800faca:	f107 0308 	add.w	r3, r7, #8
 800face:	4618      	mov	r0, r3
 800fad0:	f7ff fd0a 	bl	800f4e8 <_ZN10FFB_EffectC1Ev>
	new_effect.type = effect->effectType;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	785b      	ldrb	r3, [r3, #1]
 800fad8:	727b      	strb	r3, [r7, #9]

	set_filters(&new_effect);
 800fada:	f107 0308 	add.w	r3, r7, #8
 800fade:	4619      	mov	r1, r3
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f8e4 	bl	800fcae <_ZN6HidFFB11set_filtersEP10FFB_Effect>

	effects[index-1] = new_effect;
 800fae6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800faea:	1e5a      	subs	r2, r3, #1
 800faec:	6879      	ldr	r1, [r7, #4]
 800faee:	4613      	mov	r3, r2
 800faf0:	00db      	lsls	r3, r3, #3
 800faf2:	4413      	add	r3, r2
 800faf4:	00db      	lsls	r3, r3, #3
 800faf6:	440b      	add	r3, r1
 800faf8:	3340      	adds	r3, #64	; 0x40
 800fafa:	4618      	mov	r0, r3
 800fafc:	f107 0308 	add.w	r3, r7, #8
 800fb00:	2248      	movs	r2, #72	; 0x48
 800fb02:	4619      	mov	r1, r3
 800fb04:	f007 ff0b 	bl	801791e <memcpy>
	// Set block load report
	reportFFBStatus.effectBlockIndex = index;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fb0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	blockLoad_report.effectBlockIndex = index;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fb18:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	used_effects++;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb20:	3301      	adds	r3, #1
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	855a      	strh	r2, [r3, #42]	; 0x2a
	blockLoad_report.ramPoolAvailable = MAX_EFFECTS-used_effects;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb2c:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800fb30:	b29a      	uxth	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8a3 2031 	strh.w	r2, [r3, #49]	; 0x31
	blockLoad_report.loadStatus = 1;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30


}
 800fb40:	3758      	adds	r7, #88	; 0x58
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	080190d0 	.word	0x080190d0

0800fb4c <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>:
void HidFFB::set_effect(FFB_SetEffect_t* effect){
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
	uint8_t index = effect->effectBlockIndex;
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	785b      	ldrb	r3, [r3, #1]
 800fb5a:	73fb      	strb	r3, [r7, #15]
	if(index > MAX_EFFECTS || index == 0)
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
 800fb5e:	2b28      	cmp	r3, #40	; 0x28
 800fb60:	d855      	bhi.n	800fc0e <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xc2>
 800fb62:	7bfb      	ldrb	r3, [r7, #15]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d052      	beq.n	800fc0e <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xc2>
		return;

	FFB_Effect* effect_p = &effects[index-1];
 800fb68:	7bfb      	ldrb	r3, [r7, #15]
 800fb6a:	1e5a      	subs	r2, r3, #1
 800fb6c:	4613      	mov	r3, r2
 800fb6e:	00db      	lsls	r3, r3, #3
 800fb70:	4413      	add	r3, r2
 800fb72:	00db      	lsls	r3, r3, #3
 800fb74:	3340      	adds	r3, #64	; 0x40
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	4413      	add	r3, r2
 800fb7a:	60bb      	str	r3, [r7, #8]
	effect_p->gain = effect->gain;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	7a5a      	ldrb	r2, [r3, #9]
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	709a      	strb	r2, [r3, #2]
	effect_p->type = effect->effectType;
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	789a      	ldrb	r2, [r3, #2]
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	705a      	strb	r2, [r3, #1]
	effect_p->samplePeriod = effect->samplePeriod;
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	if(effect->enableAxis & 0x4){
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	7adb      	ldrb	r3, [r3, #11]
 800fb9e:	f003 0304 	and.w	r3, r3, #4
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d004      	beq.n	800fbb0 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x64>
		// All axes
		effect_p->axis = 0x7;
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	2207      	movs	r2, #7
 800fbaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbae:	e004      	b.n	800fbba <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x6e>
	}else{
		effect_p->axis = effect->enableAxis;
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	7ada      	ldrb	r2, [r3, #11]
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
	if(effect_p->type != effect->effectType){
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	785a      	ldrb	r2, [r3, #1]
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	789b      	ldrb	r3, [r3, #2]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d009      	beq.n	800fbda <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x8e>
		effect_p->counter = 0;
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	851a      	strh	r2, [r3, #40]	; 0x28
		effect_p->last_value = 0;
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	621a      	str	r2, [r3, #32]
		set_filters(effect_p);
 800fbd2:	68b9      	ldr	r1, [r7, #8]
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 f86a 	bl	800fcae <_ZN6HidFFB11set_filtersEP10FFB_Effect>
	}

	effect_p->duration = effect->duration;
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	859a      	strh	r2, [r3, #44]	; 0x2c
	effect_p->directionX = effect->directionX;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	7b1a      	ldrb	r2, [r3, #12]
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	759a      	strb	r2, [r3, #22]
	effect_p->directionY = effect->directionY;
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	7b5a      	ldrb	r2, [r3, #13]
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	75da      	strb	r2, [r3, #23]

	if(!ffb_active)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbfc:	f083 0301 	eor.w	r3, r3, #1
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d004      	beq.n	800fc10 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xc4>
		start_FFB();
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff fe8a 	bl	800f920 <_ZN6HidFFB9start_FFBEv>
 800fc0c:	e000      	b.n	800fc10 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xc4>
		return;
 800fc0e:	bf00      	nop
}
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}

0800fc16 <_ZN6HidFFB12set_envelopeEP22FFB_SetEnvelope_Data_t>:

void HidFFB::set_envelope(FFB_SetEnvelope_Data_t *envelop)
{
 800fc16:	b480      	push	{r7}
 800fc18:	b085      	sub	sp, #20
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
 800fc1e:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect = &effects[envelop->effectBlockIndex-1];
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	785b      	ldrb	r3, [r3, #1]
 800fc24:	1e5a      	subs	r2, r3, #1
 800fc26:	4613      	mov	r3, r2
 800fc28:	00db      	lsls	r3, r3, #3
 800fc2a:	4413      	add	r3, r2
 800fc2c:	00db      	lsls	r3, r3, #3
 800fc2e:	3340      	adds	r3, #64	; 0x40
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	4413      	add	r3, r2
 800fc34:	60fb      	str	r3, [r7, #12]

	effect->attackLevel = envelop->attackLevel;
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	885b      	ldrh	r3, [r3, #2]
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	b21a      	sxth	r2, r3
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	809a      	strh	r2, [r3, #4]
	effect->fadeLevel = envelop->fadeLevel;
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	889b      	ldrh	r3, [r3, #4]
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	b21a      	sxth	r2, r3
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	80da      	strh	r2, [r3, #6]
	effect->attackTime = envelop->attackTime;
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	88db      	ldrh	r3, [r3, #6]
 800fc52:	b29a      	uxth	r2, r3
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	861a      	strh	r2, [r3, #48]	; 0x30
	effect->fadeTime = envelop->fadeTime;
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	891b      	ldrh	r3, [r3, #8]
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 800fc62:	bf00      	nop
 800fc64:	3714      	adds	r7, #20
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bc80      	pop	{r7}
 800fc6a:	4770      	bx	lr

0800fc6c <_ZN6HidFFB15set_ramp_effectEP23FFB_SetRampForce_Data_t>:

void HidFFB::set_ramp_effect(FFB_SetRampForce_Data_t *effect)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect_p = &effects[effect->effectBlockIndex-1];
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	785b      	ldrb	r3, [r3, #1]
 800fc7a:	1e5a      	subs	r2, r3, #1
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	00db      	lsls	r3, r3, #3
 800fc80:	4413      	add	r3, r2
 800fc82:	00db      	lsls	r3, r3, #3
 800fc84:	3340      	adds	r3, #64	; 0x40
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	4413      	add	r3, r2
 800fc8a:	60fb      	str	r3, [r7, #12]

	effect_p->startMagnitude = effect->startMagnitude;
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fc92:	b21a      	sxth	r2, r3
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	825a      	strh	r2, [r3, #18]
	effect_p->endMagnitude = effect->endMagnitude;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fc9e:	b21a      	sxth	r2, r3
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	829a      	strh	r2, [r3, #20]
}
 800fca4:	bf00      	nop
 800fca6:	3714      	adds	r7, #20
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bc80      	pop	{r7}
 800fcac:	4770      	bx	lr

0800fcae <_ZN6HidFFB11set_filtersEP10FFB_Effect>:

void HidFFB::set_filters(FFB_Effect* effect){
 800fcae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcb0:	b085      	sub	sp, #20
 800fcb2:	af02      	add	r7, sp, #8
 800fcb4:	6078      	str	r0, [r7, #4]
 800fcb6:	6039      	str	r1, [r7, #0]
	switch(effect->type){
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	785b      	ldrb	r3, [r3, #1]
 800fcbc:	2b09      	cmp	r3, #9
 800fcbe:	d002      	beq.n	800fcc6 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x18>
 800fcc0:	2b0b      	cmp	r3, #11
 800fcc2:	d045      	beq.n	800fd50 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0xa2>
				effect->filter->setBiquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
			else
				effect->filter = new Biquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
			break;
	}
}
 800fcc4:	e089      	b.n	800fdda <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x12c>
			if(effect->filter != nullptr)
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d01d      	beq.n	800fd0a <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x5c>
				effect->filter->setBiquad(damper_type,(float)damper_f/calcfrequency, damper_q, (float)0.0);
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	7c1d      	ldrb	r5, [r3, #16]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	689e      	ldr	r6, [r3, #8]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	8bdb      	ldrh	r3, [r3, #30]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7f0 ffdc 	bl	8000c9c <__aeabi_i2f>
 800fce4:	4603      	mov	r3, r0
 800fce6:	4619      	mov	r1, r3
 800fce8:	4630      	mov	r0, r6
 800fcea:	f7f1 f8df 	bl	8000eac <__aeabi_fdiv>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	68da      	ldr	r2, [r3, #12]
 800fcf6:	f04f 0300 	mov.w	r3, #0
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	460a      	mov	r2, r1
 800fd00:	4629      	mov	r1, r5
 800fd02:	4620      	mov	r0, r4
 800fd04:	f7fe fbb1 	bl	800e46a <_ZN6Biquad9setBiquadE10BiquadTypefff>
			break;
 800fd08:	e067      	b.n	800fdda <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x12c>
				effect->filter = new Biquad(damper_type,(float)damper_f/calcfrequency, damper_q, (float)0.0);
 800fd0a:	202c      	movs	r0, #44	; 0x2c
 800fd0c:	f004 fbf8 	bl	8014500 <_Znwj>
 800fd10:	4603      	mov	r3, r0
 800fd12:	461c      	mov	r4, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	7c1d      	ldrb	r5, [r3, #16]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	689e      	ldr	r6, [r3, #8]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	8bdb      	ldrh	r3, [r3, #30]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7f0 ffbb 	bl	8000c9c <__aeabi_i2f>
 800fd26:	4603      	mov	r3, r0
 800fd28:	4619      	mov	r1, r3
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	f7f1 f8be 	bl	8000eac <__aeabi_fdiv>
 800fd30:	4603      	mov	r3, r0
 800fd32:	4619      	mov	r1, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	68da      	ldr	r2, [r3, #12]
 800fd38:	f04f 0300 	mov.w	r3, #0
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	4613      	mov	r3, r2
 800fd40:	460a      	mov	r2, r1
 800fd42:	4629      	mov	r1, r5
 800fd44:	4620      	mov	r0, r4
 800fd46:	f7fe fb21 	bl	800e38c <_ZN6BiquadC1E10BiquadTypefff>
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	625c      	str	r4, [r3, #36]	; 0x24
			break;
 800fd4e:	e044      	b.n	800fdda <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x12c>
			if(effect->filter != nullptr)
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d01d      	beq.n	800fd94 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0xe6>
				effect->filter->setBiquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	7f1d      	ldrb	r5, [r3, #28]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	695e      	ldr	r6, [r3, #20]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	8bdb      	ldrh	r3, [r3, #30]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7f0 ff97 	bl	8000c9c <__aeabi_i2f>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	4619      	mov	r1, r3
 800fd72:	4630      	mov	r0, r6
 800fd74:	f7f1 f89a 	bl	8000eac <__aeabi_fdiv>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	699a      	ldr	r2, [r3, #24]
 800fd80:	f04f 0300 	mov.w	r3, #0
 800fd84:	9300      	str	r3, [sp, #0]
 800fd86:	4613      	mov	r3, r2
 800fd88:	460a      	mov	r2, r1
 800fd8a:	4629      	mov	r1, r5
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f7fe fb6c 	bl	800e46a <_ZN6Biquad9setBiquadE10BiquadTypefff>
			break;
 800fd92:	e021      	b.n	800fdd8 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x12a>
				effect->filter = new Biquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
 800fd94:	202c      	movs	r0, #44	; 0x2c
 800fd96:	f004 fbb3 	bl	8014500 <_Znwj>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	461c      	mov	r4, r3
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	7f1d      	ldrb	r5, [r3, #28]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	695e      	ldr	r6, [r3, #20]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	8bdb      	ldrh	r3, [r3, #30]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7f0 ff76 	bl	8000c9c <__aeabi_i2f>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	f7f1 f879 	bl	8000eac <__aeabi_fdiv>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	699a      	ldr	r2, [r3, #24]
 800fdc2:	f04f 0300 	mov.w	r3, #0
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	460a      	mov	r2, r1
 800fdcc:	4629      	mov	r1, r5
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7fe fadc 	bl	800e38c <_ZN6BiquadC1E10BiquadTypefff>
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	625c      	str	r4, [r3, #36]	; 0x24
			break;
 800fdd8:	bf00      	nop
}
 800fdda:	bf00      	nop
 800fddc:	370c      	adds	r7, #12
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fde2 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>:

void HidFFB::set_condition(FFB_SetCondition_Data_t* cond){
 800fde2:	b480      	push	{r7}
 800fde4:	b085      	sub	sp, #20
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
 800fdea:	6039      	str	r1, [r7, #0]
	if(cond->parameterBlockOffset != 0) //TODO if more axes are needed. Only X Axis is implemented now for the wheel.
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	789b      	ldrb	r3, [r3, #2]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d130      	bne.n	800fe56 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x74>
		return;

	FFB_Effect* effect = &effects[cond->effectBlockIndex-1];
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	785b      	ldrb	r3, [r3, #1]
 800fdf8:	1e5a      	subs	r2, r3, #1
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	00db      	lsls	r3, r3, #3
 800fdfe:	4413      	add	r3, r2
 800fe00:	00db      	lsls	r3, r3, #3
 800fe02:	3340      	adds	r3, #64	; 0x40
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	4413      	add	r3, r2
 800fe08:	60fb      	str	r3, [r7, #12]

	effect->offset = cond->cpOffset;
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800fe10:	b21a      	sxth	r2, r3
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	835a      	strh	r2, [r3, #26]
	effect->negativeCoefficient  = cond->negativeCoefficient;
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 800fe1c:	b21a      	sxth	r2, r3
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	815a      	strh	r2, [r3, #10]
	effect->positiveCoefficient = cond->positiveCoefficient;
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800fe28:	b21a      	sxth	r2, r3
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	811a      	strh	r2, [r3, #8]
	effect->negativeSaturation = cond->negativeSaturation;
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800fe34:	b29a      	uxth	r2, r3
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	81da      	strh	r2, [r3, #14]
	effect->positiveSaturation = cond->positiveSaturation;
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800fe40:	b29a      	uxth	r2, r3
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	819a      	strh	r2, [r3, #12]
	effect->deadBand = cond->deadBand;
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800fe4c:	b29a      	uxth	r2, r3
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800fe54:	e000      	b.n	800fe58 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x76>
		return;
 800fe56:	bf00      	nop
}
 800fe58:	3714      	adds	r7, #20
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bc80      	pop	{r7}
 800fe5e:	4770      	bx	lr

0800fe60 <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>:

void HidFFB::set_periodic(FFB_SetPeriodic_Data_t* report){
 800fe60:	b480      	push	{r7}
 800fe62:	b085      	sub	sp, #20
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect = &effects[report->effectBlockIndex-1];
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	785b      	ldrb	r3, [r3, #1]
 800fe6e:	1e5a      	subs	r2, r3, #1
 800fe70:	4613      	mov	r3, r2
 800fe72:	00db      	lsls	r3, r3, #3
 800fe74:	4413      	add	r3, r2
 800fe76:	00db      	lsls	r3, r3, #3
 800fe78:	3340      	adds	r3, #64	; 0x40
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	60fb      	str	r3, [r7, #12]

	effect->period = report->period;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	891b      	ldrh	r3, [r3, #8]
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	855a      	strh	r2, [r3, #42]	; 0x2a
	effect->magnitude = report->magnitude;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	885b      	ldrh	r3, [r3, #2]
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	b21a      	sxth	r2, r3
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	821a      	strh	r2, [r3, #16]
	effect->offset = report->offset;
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fe9c:	b21a      	sxth	r2, r3
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	835a      	strh	r2, [r3, #26]
	effect->phase = report->phase;
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	88db      	ldrh	r3, [r3, #6]
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	b21a      	sxth	r2, r3
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	831a      	strh	r2, [r3, #24]
	//effect->counter = 0;
}
 800feae:	bf00      	nop
 800feb0:	3714      	adds	r7, #20
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bc80      	pop	{r7}
 800feb6:	4770      	bx	lr

0800feb8 <_ZN6HidFFB16find_free_effectEh>:

uint8_t HidFFB::find_free_effect(uint8_t type){ //Will return the first effect index which is empty or the same type
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	460b      	mov	r3, r1
 800fec2:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 800fec4:	2300      	movs	r3, #0
 800fec6:	73fb      	strb	r3, [r7, #15]
 800fec8:	7bfb      	ldrb	r3, [r7, #15]
 800feca:	2b27      	cmp	r3, #39	; 0x27
 800fecc:	d812      	bhi.n	800fef4 <_ZN6HidFFB16find_free_effectEh+0x3c>
		if(effects[i].type == FFB_EFFECT_NONE){
 800fece:	7bfa      	ldrb	r2, [r7, #15]
 800fed0:	6879      	ldr	r1, [r7, #4]
 800fed2:	4613      	mov	r3, r2
 800fed4:	00db      	lsls	r3, r3, #3
 800fed6:	4413      	add	r3, r2
 800fed8:	00db      	lsls	r3, r3, #3
 800feda:	440b      	add	r3, r1
 800fedc:	3341      	adds	r3, #65	; 0x41
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d103      	bne.n	800feec <_ZN6HidFFB16find_free_effectEh+0x34>
			return(i+1);
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	3301      	adds	r3, #1
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	e004      	b.n	800fef6 <_ZN6HidFFB16find_free_effectEh+0x3e>
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 800feec:	7bfb      	ldrb	r3, [r7, #15]
 800feee:	3301      	adds	r3, #1
 800fef0:	73fb      	strb	r3, [r7, #15]
 800fef2:	e7e9      	b.n	800fec8 <_ZN6HidFFB16find_free_effectEh+0x10>
		}
	}
	return 0;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3714      	adds	r7, #20
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bc80      	pop	{r7}
 800fefe:	4770      	bx	lr

0800ff00 <_ZN6HidFFB9reset_ffbEv>:



void HidFFB::reset_ffb(){
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 800ff08:	2300      	movs	r3, #0
 800ff0a:	73fb      	strb	r3, [r7, #15]
 800ff0c:	7bfb      	ldrb	r3, [r7, #15]
 800ff0e:	2b27      	cmp	r3, #39	; 0x27
 800ff10:	d809      	bhi.n	800ff26 <_ZN6HidFFB9reset_ffbEv+0x26>
		free_effect(i);
 800ff12:	7bfb      	ldrb	r3, [r7, #15]
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	4619      	mov	r1, r3
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f7ff fca3 	bl	800f864 <_ZN6HidFFB11free_effectEt>
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 800ff1e:	7bfb      	ldrb	r3, [r7, #15]
 800ff20:	3301      	adds	r3, #1
 800ff22:	73fb      	strb	r3, [r7, #15]
 800ff24:	e7f2      	b.n	800ff0c <_ZN6HidFFB9reset_ffbEv+0xc>
	}
	this->reportFFBStatus.effectBlockIndex = 1;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2201      	movs	r2, #1
 800ff2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	this->reportFFBStatus.status = (HID_ACTUATOR_POWER) | (HID_ENABLE_ACTUATORS);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	220a      	movs	r2, #10
 800ff32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	used_effects = 0;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ff3c:	bf00      	nop
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	0000      	movs	r0, r0
	...

0800ff48 <_ZN6HidFFB16calculateEffectsElh>:

int32_t HidFFB::calculateEffects(int32_t pos,uint8_t axis=1){
 800ff48:	b590      	push	{r4, r7, lr}
 800ff4a:	b09d      	sub	sp, #116	; 0x74
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	4613      	mov	r3, r2
 800ff54:	71fb      	strb	r3, [r7, #7]
	if(!ffb_active){
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff5c:	f083 0301 	eor.w	r3, r3, #1
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d00f      	beq.n	800ff86 <_ZN6HidFFB16calculateEffectsElh+0x3e>
		if(idlecenter){
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	791b      	ldrb	r3, [r3, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d009      	beq.n	800ff82 <_ZN6HidFFB16calculateEffectsElh+0x3a>
			return clip<int32_t,int32_t>(-pos,-5000,5000);
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	425b      	negs	r3, r3
 800ff72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff76:	49a8      	ldr	r1, [pc, #672]	; (8010218 <_ZN6HidFFB16calculateEffectsElh+0x2d0>)
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7fc ff07 	bl	800cd8c <_Z4clipIllET_S0_T0_S1_>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	e1a7      	b.n	80102d2 <_ZN6HidFFB16calculateEffectsElh+0x38a>
		}else{
			return 0;
 800ff82:	2300      	movs	r3, #0
 800ff84:	e1a5      	b.n	80102d2 <_ZN6HidFFB16calculateEffectsElh+0x38a>
		}
	}

	int32_t result_torque = 0;
 800ff86:	2300      	movs	r3, #0
 800ff88:	66fb      	str	r3, [r7, #108]	; 0x6c

	for(uint8_t i = 0;i<MAX_EFFECTS;i++){
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800ff90:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ff94:	2b27      	cmp	r3, #39	; 0x27
 800ff96:	f200 8192 	bhi.w	80102be <_ZN6HidFFB16calculateEffectsElh+0x376>
		FFB_Effect* effect = &effects[i];
 800ff9a:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	00db      	lsls	r3, r3, #3
 800ffa2:	4413      	add	r3, r2
 800ffa4:	00db      	lsls	r3, r3, #3
 800ffa6:	3340      	adds	r3, #64	; 0x40
 800ffa8:	68fa      	ldr	r2, [r7, #12]
 800ffaa:	4413      	add	r3, r2
 800ffac:	65fb      	str	r3, [r7, #92]	; 0x5c
		// Filter out inactive effects
		if(effect->state == 0 || !(axis & effect->axis))
 800ffae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d007      	beq.n	800ffc8 <_ZN6HidFFB16calculateEffectsElh+0x80>
 800ffb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffba:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ffbe:	79fb      	ldrb	r3, [r7, #7]
 800ffc0:	4013      	ands	r3, r2
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d101      	bne.n	800ffcc <_ZN6HidFFB16calculateEffectsElh+0x84>
 800ffc8:	2301      	movs	r3, #1
 800ffca:	e000      	b.n	800ffce <_ZN6HidFFB16calculateEffectsElh+0x86>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f040 816e 	bne.w	80102b0 <_ZN6HidFFB16calculateEffectsElh+0x368>
			continue;

		switch(effect->type){
 800ffd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffd6:	785b      	ldrb	r3, [r3, #1]
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	2b0a      	cmp	r3, #10
 800ffdc:	f200 8154 	bhi.w	8010288 <_ZN6HidFFB16calculateEffectsElh+0x340>
 800ffe0:	a201      	add	r2, pc, #4	; (adr r2, 800ffe8 <_ZN6HidFFB16calculateEffectsElh+0xa0>)
 800ffe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe6:	bf00      	nop
 800ffe8:	08010015 	.word	0x08010015
 800ffec:	08010289 	.word	0x08010289
 800fff0:	080100a7 	.word	0x080100a7
 800fff4:	0801011d 	.word	0x0801011d
 800fff8:	08010289 	.word	0x08010289
 800fffc:	08010289 	.word	0x08010289
 8010000:	08010289 	.word	0x08010289
 8010004:	08010031 	.word	0x08010031
 8010008:	080101f9 	.word	0x080101f9
 801000c:	08010289 	.word	0x08010289
 8010010:	080101f9 	.word	0x080101f9
		case FFB_EFFECT_CONSTANT:
			result_torque -= (effect->magnitude * (1+effect->gain)) >> 8;
 8010014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010016:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801001a:	461a      	mov	r2, r3
 801001c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801001e:	789b      	ldrb	r3, [r3, #2]
 8010020:	3301      	adds	r3, #1
 8010022:	fb03 f302 	mul.w	r3, r3, r2
 8010026:	121b      	asrs	r3, r3, #8
 8010028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	66fb      	str	r3, [r7, #108]	; 0x6c
			break;
 801002e:	e12c      	b.n	801028a <_ZN6HidFFB16calculateEffectsElh+0x342>

		case FFB_EFFECT_SPRING:
		{
			int32_t force = 0;
 8010030:	2300      	movs	r3, #0
 8010032:	667b      	str	r3, [r7, #100]	; 0x64
			if(pos<effect->offset){
 8010034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010036:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801003a:	461a      	mov	r2, r3
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	4293      	cmp	r3, r2
 8010040:	da16      	bge.n	8010070 <_ZN6HidFFB16calculateEffectsElh+0x128>
				force = clip<int32_t,int32_t>(((int32_t)(effect->negativeCoefficient>>3) * (pos - (effect->offset))) >> 6,-effect->negativeSaturation,effect->positiveSaturation);
 8010042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010044:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010048:	10db      	asrs	r3, r3, #3
 801004a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801004c:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8010050:	4611      	mov	r1, r2
 8010052:	68ba      	ldr	r2, [r7, #8]
 8010054:	1a52      	subs	r2, r2, r1
 8010056:	fb02 f303 	mul.w	r3, r2, r3
 801005a:	1198      	asrs	r0, r3, #6
 801005c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801005e:	89db      	ldrh	r3, [r3, #14]
 8010060:	4259      	negs	r1, r3
 8010062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010064:	899b      	ldrh	r3, [r3, #12]
 8010066:	461a      	mov	r2, r3
 8010068:	f7fc fe90 	bl	800cd8c <_Z4clipIllET_S0_T0_S1_>
 801006c:	6678      	str	r0, [r7, #100]	; 0x64
 801006e:	e015      	b.n	801009c <_ZN6HidFFB16calculateEffectsElh+0x154>
			}else{
				force = clip<int32_t,int32_t>(((int32_t)(effect->positiveCoefficient>>3) * (pos - (effect->offset))) >> 6,-effect->negativeSaturation,effect->positiveSaturation);
 8010070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010072:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010076:	10db      	asrs	r3, r3, #3
 8010078:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801007a:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 801007e:	4611      	mov	r1, r2
 8010080:	68ba      	ldr	r2, [r7, #8]
 8010082:	1a52      	subs	r2, r2, r1
 8010084:	fb02 f303 	mul.w	r3, r2, r3
 8010088:	1198      	asrs	r0, r3, #6
 801008a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801008c:	89db      	ldrh	r3, [r3, #14]
 801008e:	4259      	negs	r1, r3
 8010090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010092:	899b      	ldrh	r3, [r3, #12]
 8010094:	461a      	mov	r2, r3
 8010096:	f7fc fe79 	bl	800cd8c <_Z4clipIllET_S0_T0_S1_>
 801009a:	6678      	str	r0, [r7, #100]	; 0x64
			}
			result_torque -= force;
 801009c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801009e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100a0:	1ad3      	subs	r3, r2, r3
 80100a2:	66fb      	str	r3, [r7, #108]	; 0x6c
			break;
 80100a4:	e0f1      	b.n	801028a <_ZN6HidFFB16calculateEffectsElh+0x342>
		}

		case FFB_EFFECT_SQUARE:
		{
			int32_t offset = effect->offset * 2;
 80100a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100a8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80100ac:	005b      	lsls	r3, r3, #1
 80100ae:	63bb      	str	r3, [r7, #56]	; 0x38
			uint32_t magnitude = effect->magnitude;
 80100b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100b2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80100b6:	637b      	str	r3, [r7, #52]	; 0x34
			uint32_t phase = effect->phase;
 80100b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100ba:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80100be:	633b      	str	r3, [r7, #48]	; 0x30
			uint32_t period = effect->period;
 80100c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100c4:	62fb      	str	r3, [r7, #44]	; 0x2c

			int32_t maxMagnitude = offset + magnitude;
 80100c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ca:	4413      	add	r3, r2
 80100cc:	62bb      	str	r3, [r7, #40]	; 0x28
			int32_t minMagnitude = offset - magnitude;
 80100ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d2:	1ad3      	subs	r3, r2, r3
 80100d4:	627b      	str	r3, [r7, #36]	; 0x24
			uint32_t phasetime = (phase * period) / 255;
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100da:	fb02 f303 	mul.w	r3, r2, r3
 80100de:	4a4f      	ldr	r2, [pc, #316]	; (801021c <_ZN6HidFFB16calculateEffectsElh+0x2d4>)
 80100e0:	fba2 2303 	umull	r2, r3, r2, r3
 80100e4:	09db      	lsrs	r3, r3, #7
 80100e6:	623b      	str	r3, [r7, #32]
			uint32_t timeTemp = phasetime;
 80100e8:	6a3b      	ldr	r3, [r7, #32]
 80100ea:	61fb      	str	r3, [r7, #28]
			uint32_t reminder = timeTemp % period;
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80100f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100f6:	fb01 f202 	mul.w	r2, r1, r2
 80100fa:	1a9b      	subs	r3, r3, r2
 80100fc:	61bb      	str	r3, [r7, #24]
			int32_t tempforce;
			if (reminder > (period / 2))
 80100fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010100:	085b      	lsrs	r3, r3, #1
 8010102:	69ba      	ldr	r2, [r7, #24]
 8010104:	429a      	cmp	r2, r3
 8010106:	d902      	bls.n	801010e <_ZN6HidFFB16calculateEffectsElh+0x1c6>
				tempforce = minMagnitude;
 8010108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010a:	663b      	str	r3, [r7, #96]	; 0x60
 801010c:	e001      	b.n	8010112 <_ZN6HidFFB16calculateEffectsElh+0x1ca>
			else
				tempforce = maxMagnitude;
 801010e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010110:	663b      	str	r3, [r7, #96]	; 0x60
			tempforce += minMagnitude;
 8010112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010116:	4413      	add	r3, r2
 8010118:	663b      	str	r3, [r7, #96]	; 0x60

			/*int32_t force =  ((effect->counter + effect->phase) % ((uint32_t)effect->period+2)) < (uint32_t)(effect->period+2)/2 ? -effect->magnitude : effect->magnitude;
			force += effect->offset;
			result_torque -= force;*/
			break;
 801011a:	e0b6      	b.n	801028a <_ZN6HidFFB16calculateEffectsElh+0x342>
		}
		case FFB_EFFECT_SINE:
		{
			uint16_t t = effect->counter;
 801011c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801011e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010120:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			float freq = 1.0f/(float)(std::max<uint16_t>(effect->period,2));
 8010124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010126:	332a      	adds	r3, #42	; 0x2a
 8010128:	2202      	movs	r2, #2
 801012a:	82fa      	strh	r2, [r7, #22]
 801012c:	f107 0216 	add.w	r2, r7, #22
 8010130:	4611      	mov	r1, r2
 8010132:	4618      	mov	r0, r3
 8010134:	f000 f8d2 	bl	80102dc <_ZSt3maxItERKT_S2_S2_>
 8010138:	4603      	mov	r3, r0
 801013a:	881b      	ldrh	r3, [r3, #0]
 801013c:	4618      	mov	r0, r3
 801013e:	f7f0 fda9 	bl	8000c94 <__aeabi_ui2f>
 8010142:	4603      	mov	r3, r0
 8010144:	4619      	mov	r1, r3
 8010146:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801014a:	f7f0 feaf 	bl	8000eac <__aeabi_fdiv>
 801014e:	4603      	mov	r3, r0
 8010150:	64bb      	str	r3, [r7, #72]	; 0x48
			float phase = (float)effect->phase/(float)35999; //degrees
 8010152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010154:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010158:	4618      	mov	r0, r3
 801015a:	f7f0 fd9f 	bl	8000c9c <__aeabi_i2f>
 801015e:	4603      	mov	r3, r0
 8010160:	492f      	ldr	r1, [pc, #188]	; (8010220 <_ZN6HidFFB16calculateEffectsElh+0x2d8>)
 8010162:	4618      	mov	r0, r3
 8010164:	f7f0 fea2 	bl	8000eac <__aeabi_fdiv>
 8010168:	4603      	mov	r3, r0
 801016a:	647b      	str	r3, [r7, #68]	; 0x44
			float sine =  sinf(2.0*(float)M_PI*(t*freq+phase)) * effect->magnitude;
 801016c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010170:	4618      	mov	r0, r3
 8010172:	f7f0 fd93 	bl	8000c9c <__aeabi_i2f>
 8010176:	4603      	mov	r3, r0
 8010178:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801017a:	4618      	mov	r0, r3
 801017c:	f7f0 fde2 	bl	8000d44 <__aeabi_fmul>
 8010180:	4603      	mov	r3, r0
 8010182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010184:	4618      	mov	r0, r3
 8010186:	f7f0 fcd5 	bl	8000b34 <__addsf3>
 801018a:	4603      	mov	r3, r0
 801018c:	4618      	mov	r0, r3
 801018e:	f7f0 f94b 	bl	8000428 <__aeabi_f2d>
 8010192:	a31f      	add	r3, pc, #124	; (adr r3, 8010210 <_ZN6HidFFB16calculateEffectsElh+0x2c8>)
 8010194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010198:	f7f0 f99e 	bl	80004d8 <__aeabi_dmul>
 801019c:	4603      	mov	r3, r0
 801019e:	460c      	mov	r4, r1
 80101a0:	4618      	mov	r0, r3
 80101a2:	4621      	mov	r1, r4
 80101a4:	f7f0 fc70 	bl	8000a88 <__aeabi_d2f>
 80101a8:	4603      	mov	r3, r0
 80101aa:	4618      	mov	r0, r3
 80101ac:	f004 fd02 	bl	8014bb4 <sinf>
 80101b0:	4604      	mov	r4, r0
 80101b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7f0 fd6f 	bl	8000c9c <__aeabi_i2f>
 80101be:	4603      	mov	r3, r0
 80101c0:	4619      	mov	r1, r3
 80101c2:	4620      	mov	r0, r4
 80101c4:	f7f0 fdbe 	bl	8000d44 <__aeabi_fmul>
 80101c8:	4603      	mov	r3, r0
 80101ca:	643b      	str	r3, [r7, #64]	; 0x40
			int32_t force = (int32_t)(effect->offset + sine);
 80101cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101ce:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7f0 fd62 	bl	8000c9c <__aeabi_i2f>
 80101d8:	4603      	mov	r3, r0
 80101da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80101dc:	4618      	mov	r0, r3
 80101de:	f7f0 fca9 	bl	8000b34 <__addsf3>
 80101e2:	4603      	mov	r3, r0
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7f0 ff89 	bl	80010fc <__aeabi_f2iz>
 80101ea:	4603      	mov	r3, r0
 80101ec:	63fb      	str	r3, [r7, #60]	; 0x3c

			result_torque -= force;
 80101ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80101f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f2:	1ad3      	subs	r3, r2, r3
 80101f4:	66fb      	str	r3, [r7, #108]	; 0x6c
			break;
 80101f6:	e048      	b.n	801028a <_ZN6HidFFB16calculateEffectsElh+0x342>
		}
		case FFB_EFFECT_FRICTION:
		case FFB_EFFECT_DAMPER:
		{
			int32_t force = 0;
 80101f8:	2300      	movs	r3, #0
 80101fa:	65bb      	str	r3, [r7, #88]	; 0x58

			if(effect->counter == 0){
 80101fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010200:	2b00      	cmp	r3, #0
 8010202:	d10f      	bne.n	8010224 <_ZN6HidFFB16calculateEffectsElh+0x2dc>
				effect->last_value = pos;
 8010204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	621a      	str	r2, [r3, #32]
				break;
 801020a:	e03e      	b.n	801028a <_ZN6HidFFB16calculateEffectsElh+0x342>
 801020c:	f3af 8000 	nop.w
 8010210:	60000000 	.word	0x60000000
 8010214:	401921fb 	.word	0x401921fb
 8010218:	ffffec78 	.word	0xffffec78
 801021c:	80808081 	.word	0x80808081
 8010220:	470c9f00 	.word	0x470c9f00
			}
			int32_t speed = pos - effect->last_value;
 8010224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010226:	6a1b      	ldr	r3, [r3, #32]
 8010228:	68ba      	ldr	r2, [r7, #8]
 801022a:	1ad3      	subs	r3, r2, r3
 801022c:	657b      	str	r3, [r7, #84]	; 0x54
			effect->last_value = pos;
 801022e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	621a      	str	r2, [r3, #32]

			float val = effect->filter->process(speed);
 8010234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010236:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010238:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801023a:	f7f0 fd2f 	bl	8000c9c <__aeabi_i2f>
 801023e:	4603      	mov	r3, r0
 8010240:	4619      	mov	r1, r3
 8010242:	4620      	mov	r0, r4
 8010244:	f7fe f8c1 	bl	800e3ca <_ZN6Biquad7processEf>
 8010248:	6538      	str	r0, [r7, #80]	; 0x50
			force = clip<int32_t,int32_t>((int32_t)((effect->positiveCoefficient) * val) >> 4,-effect->negativeSaturation,effect->positiveSaturation);
 801024a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801024c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010250:	4618      	mov	r0, r3
 8010252:	f7f0 fd23 	bl	8000c9c <__aeabi_i2f>
 8010256:	4603      	mov	r3, r0
 8010258:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801025a:	4618      	mov	r0, r3
 801025c:	f7f0 fd72 	bl	8000d44 <__aeabi_fmul>
 8010260:	4603      	mov	r3, r0
 8010262:	4618      	mov	r0, r3
 8010264:	f7f0 ff4a 	bl	80010fc <__aeabi_f2iz>
 8010268:	4603      	mov	r3, r0
 801026a:	1118      	asrs	r0, r3, #4
 801026c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801026e:	89db      	ldrh	r3, [r3, #14]
 8010270:	4259      	negs	r1, r3
 8010272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010274:	899b      	ldrh	r3, [r3, #12]
 8010276:	461a      	mov	r2, r3
 8010278:	f7fc fd88 	bl	800cd8c <_Z4clipIllET_S0_T0_S1_>
 801027c:	65b8      	str	r0, [r7, #88]	; 0x58

			result_torque -= force;
 801027e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010282:	1ad3      	subs	r3, r2, r3
 8010284:	66fb      	str	r3, [r7, #108]	; 0x6c
			break;
 8010286:	e000      	b.n	801028a <_ZN6HidFFB16calculateEffectsElh+0x342>
		}
		default:
			// Unsupported effect
			break;
 8010288:	bf00      	nop
		}

		if(effect->counter++ > effect->duration){
 801028a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801028c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801028e:	1c5a      	adds	r2, r3, #1
 8010290:	b291      	uxth	r1, r2
 8010292:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010294:	8511      	strh	r1, [r2, #40]	; 0x28
 8010296:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010298:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 801029a:	4293      	cmp	r3, r2
 801029c:	bf8c      	ite	hi
 801029e:	2301      	movhi	r3, #1
 80102a0:	2300      	movls	r3, #0
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d004      	beq.n	80102b2 <_ZN6HidFFB16calculateEffectsElh+0x36a>
			effect->state = 0;
 80102a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102aa:	2200      	movs	r2, #0
 80102ac:	701a      	strb	r2, [r3, #0]
 80102ae:	e000      	b.n	80102b2 <_ZN6HidFFB16calculateEffectsElh+0x36a>
			continue;
 80102b0:	bf00      	nop
	for(uint8_t i = 0;i<MAX_EFFECTS;i++){
 80102b2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80102b6:	3301      	adds	r3, #1
 80102b8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80102bc:	e668      	b.n	800ff90 <_ZN6HidFFB16calculateEffectsElh+0x48>
		}

	}
	result_torque = (result_torque * (gain+1)) >> 8; // Apply global gain
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102c4:	3301      	adds	r3, #1
 80102c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80102c8:	fb02 f303 	mul.w	r3, r2, r3
 80102cc:	121b      	asrs	r3, r3, #8
 80102ce:	66fb      	str	r3, [r7, #108]	; 0x6c

	return result_torque; //clip(result_torque,-0x7fff,0x7fff);
 80102d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3774      	adds	r7, #116	; 0x74
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd90      	pop	{r4, r7, pc}
 80102da:	bf00      	nop

080102dc <_ZSt3maxItERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80102dc:	b480      	push	{r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	881a      	ldrh	r2, [r3, #0]
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d201      	bcs.n	80102f6 <_ZSt3maxItERKT_S2_S2_+0x1a>
	return __b;
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	e000      	b.n	80102f8 <_ZSt3maxItERKT_S2_S2_+0x1c>
      return __a;
 80102f6:	687b      	ldr	r3, [r7, #4]
    }
 80102f8:	4618      	mov	r0, r3
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bc80      	pop	{r7}
 8010300:	4770      	bx	lr
	...

08010304 <_ZN12LocalButtonsC1Ev>:
 *      Author: Yannick
 */

#include <LocalButtons.h>

LocalButtons::LocalButtons() {
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af02      	add	r7, sp, #8
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	4a18      	ldr	r2, [pc, #96]	; (8010370 <_ZN12LocalButtonsC1Ev+0x6c>)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	601a      	str	r2, [r3, #0]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2201      	movs	r2, #1
 8010316:	809a      	strh	r2, [r3, #4]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2201      	movs	r2, #1
 801031c:	80da      	strh	r2, [r3, #6]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2208      	movs	r2, #8
 8010322:	811a      	strh	r2, [r3, #8]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	4a13      	ldr	r2, [pc, #76]	; (8010374 <_ZN12LocalButtonsC1Ev+0x70>)
 8010328:	60da      	str	r2, [r3, #12]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2227      	movs	r2, #39	; 0x27
 801032e:	74da      	strb	r2, [r3, #19]
	//Initialize I2C buttons
	button_buf[0] = 0xff;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	22ff      	movs	r2, #255	; 0xff
 8010334:	741a      	strb	r2, [r3, #16]
	button_buf[1] = 0xff;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	22ff      	movs	r2, #255	; 0xff
 801033a:	745a      	strb	r2, [r3, #17]

	I2C_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f103 0210 	add.w	r2, r3, #16
 8010342:	230a      	movs	r3, #10
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	2302      	movs	r3, #2
 8010348:	214e      	movs	r1, #78	; 0x4e
 801034a:	480b      	ldr	r0, [pc, #44]	; (8010378 <_ZN12LocalButtonsC1Ev+0x74>)
 801034c:	f7f3 faec 	bl	8003928 <HAL_I2C_Master_Transmit>
 8010350:	4603      	mov	r3, r0
 8010352:	461a      	mov	r2, r3
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	751a      	strb	r2, [r3, #20]
	if ( I2C_status != HAL_OK ) {
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	7d1b      	ldrb	r3, [r3, #20]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d001      	beq.n	8010364 <_ZN12LocalButtonsC1Ev+0x60>
		pulseSysLed();
 8010360:	f001 fb26 	bl	80119b0 <_Z11pulseSysLedv>
	}

}
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4618      	mov	r0, r3
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	08019278 	.word	0x08019278
 8010374:	40010c00 	.word	0x40010c00
 8010378:	20001594 	.word	0x20001594

0801037c <_ZN12LocalButtonsD1Ev>:

LocalButtons::~LocalButtons() {
 801037c:	b480      	push	{r7}
 801037e:	b083      	sub	sp, #12
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	4a04      	ldr	r2, [pc, #16]	; (8010398 <_ZN12LocalButtonsD1Ev+0x1c>)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4618      	mov	r0, r3
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	bc80      	pop	{r7}
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop
 8010398:	08019278 	.word	0x08019278

0801039c <_ZN12LocalButtonsD0Ev>:
LocalButtons::~LocalButtons() {
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
}
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff ffe9 	bl	801037c <_ZN12LocalButtonsD1Ev>
 80103aa:	2118      	movs	r1, #24
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f004 f8a5 	bl	80144fc <_ZdlPvj>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	4618      	mov	r0, r3
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <_ZN12LocalButtons11readButtonsEPm>:


void LocalButtons::readButtons(uint32_t* buf){
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af02      	add	r7, sp, #8
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
	I2C_status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f103 0210 	add.w	r2, r3, #16
 80103cc:	230a      	movs	r3, #10
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	2302      	movs	r3, #2
 80103d2:	214e      	movs	r1, #78	; 0x4e
 80103d4:	482b      	ldr	r0, [pc, #172]	; (8010484 <_ZN12LocalButtons11readButtonsEPm+0xc8>)
 80103d6:	f7f3 fba5 	bl	8003b24 <HAL_I2C_Master_Receive>
 80103da:	4603      	mov	r3, r0
 80103dc:	461a      	mov	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	751a      	strb	r2, [r3, #20]
	if(I2C_status == HAL_OK)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	7d1b      	ldrb	r3, [r3, #20]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d11e      	bne.n	8010428 <_ZN12LocalButtons11readButtonsEPm+0x6c>
	{
		button_buf[0]=~button_buf[0];
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	7c1b      	ldrb	r3, [r3, #16]
 80103ee:	43db      	mvns	r3, r3
 80103f0:	b2da      	uxtb	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	741a      	strb	r2, [r3, #16]
		button_buf[1]=~button_buf[1];
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	7c5b      	ldrb	r3, [r3, #17]
 80103fa:	43db      	mvns	r3, r3
 80103fc:	b2da      	uxtb	r2, r3
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	745a      	strb	r2, [r3, #17]
		*buf |= button_buf[0];
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	7c12      	ldrb	r2, [r2, #16]
 801040a:	431a      	orrs	r2, r3
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	601a      	str	r2, [r3, #0]
		*buf <<= 8;
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	021a      	lsls	r2, r3, #8
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	601a      	str	r2, [r3, #0]
		*buf |= button_buf[1];
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	7c52      	ldrb	r2, [r2, #17]
 8010422:	431a      	orrs	r2, r3
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	601a      	str	r2, [r3, #0]
	}
	uint8_t buttons = this->nButtons;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	88db      	ldrh	r3, [r3, #6]
 801042c:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0;i<buttons;i++){
 801042e:	2300      	movs	r3, #0
 8010430:	73fb      	strb	r3, [r7, #15]
 8010432:	7bfa      	ldrb	r2, [r7, #15]
 8010434:	7bbb      	ldrb	r3, [r7, #14]
 8010436:	429a      	cmp	r2, r3
 8010438:	d220      	bcs.n	801047c <_ZN12LocalButtons11readButtonsEPm+0xc0>
		*buf |= !HAL_GPIO_ReadPin(button_ports[i],button_pins[i]) << (i + 16);
 801043a:	7bfb      	ldrb	r3, [r7, #15]
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	3302      	adds	r3, #2
 8010440:	009b      	lsls	r3, r3, #2
 8010442:	4413      	add	r3, r2
 8010444:	6858      	ldr	r0, [r3, #4]
 8010446:	7bfa      	ldrb	r2, [r7, #15]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	3204      	adds	r2, #4
 801044c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010450:	4619      	mov	r1, r3
 8010452:	f7f3 f8e1 	bl	8003618 <HAL_GPIO_ReadPin>
 8010456:	4603      	mov	r3, r0
 8010458:	2b00      	cmp	r3, #0
 801045a:	bf0c      	ite	eq
 801045c:	2301      	moveq	r3, #1
 801045e:	2300      	movne	r3, #0
 8010460:	b2db      	uxtb	r3, r3
 8010462:	461a      	mov	r2, r3
 8010464:	7bfb      	ldrb	r3, [r7, #15]
 8010466:	3310      	adds	r3, #16
 8010468:	409a      	lsls	r2, r3
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	431a      	orrs	r2, r3
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0;i<buttons;i++){
 8010474:	7bfb      	ldrb	r3, [r7, #15]
 8010476:	3301      	adds	r3, #1
 8010478:	73fb      	strb	r3, [r7, #15]
 801047a:	e7da      	b.n	8010432 <_ZN12LocalButtons11readButtonsEPm+0x76>
	}
}
 801047c:	bf00      	nop
 801047e:	3710      	adds	r7, #16
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}
 8010484:	20001594 	.word	0x20001594

08010488 <_ZN12MotorBTS79604turnEs>:
#include <MotorBTS7960.h>

void MotorBTS7960::turn(int16_t power){
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	807b      	strh	r3, [r7, #2]
	if(!active)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	7a1b      	ldrb	r3, [r3, #8]
 8010498:	f083 0301 	eor.w	r3, r3, #1
 801049c:	b2db      	uxtb	r3, r3
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d12b      	bne.n	80104fa <_ZN12MotorBTS79604turnEs+0x72>
		return;

	int32_t val = (uint32_t)((abs(power) * period)/0x7fff);
 80104a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	bfb8      	it	lt
 80104aa:	425b      	neglt	r3, r3
 80104ac:	461a      	mov	r2, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	fb03 f202 	mul.w	r2, r3, r2
 80104b6:	4b13      	ldr	r3, [pc, #76]	; (8010504 <_ZN12MotorBTS79604turnEs+0x7c>)
 80104b8:	fba3 1302 	umull	r1, r3, r3, r2
 80104bc:	1ad2      	subs	r2, r2, r3
 80104be:	0852      	lsrs	r2, r2, #1
 80104c0:	4413      	add	r3, r2
 80104c2:	0b9b      	lsrs	r3, r3, #14
 80104c4:	60fb      	str	r3, [r7, #12]

	if(power < 0){
 80104c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	da0a      	bge.n	80104e4 <_ZN12MotorBTS79604turnEs+0x5c>
		timer->Instance->CCR1 = 0;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	695b      	ldr	r3, [r3, #20]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2200      	movs	r2, #0
 80104d6:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR2 = val;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	695b      	ldr	r3, [r3, #20]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	639a      	str	r2, [r3, #56]	; 0x38
 80104e2:	e00b      	b.n	80104fc <_ZN12MotorBTS79604turnEs+0x74>
	}else{
		timer->Instance->CCR1 = val;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	695b      	ldr	r3, [r3, #20]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	68fa      	ldr	r2, [r7, #12]
 80104ec:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR2 = 0;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	695b      	ldr	r3, [r3, #20]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2200      	movs	r2, #0
 80104f6:	639a      	str	r2, [r3, #56]	; 0x38
 80104f8:	e000      	b.n	80104fc <_ZN12MotorBTS79604turnEs+0x74>
		return;
 80104fa:	bf00      	nop
	}

}
 80104fc:	3714      	adds	r7, #20
 80104fe:	46bd      	mov	sp, r7
 8010500:	bc80      	pop	{r7}
 8010502:	4770      	bx	lr
 8010504:	00020005 	.word	0x00020005

08010508 <_ZN12MotorBTS7960C1Ev>:

MotorBTS7960::MotorBTS7960() {
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	4a18      	ldr	r2, [pc, #96]	; (8010574 <_ZN12MotorBTS7960C1Ev+0x6c>)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	601a      	str	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f640 620f 	movw	r2, #3599	; 0xe0f
 801051c:	605a      	str	r2, [r3, #4]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	721a      	strb	r2, [r3, #8]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	60da      	str	r2, [r3, #12]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2204      	movs	r2, #4
 801052e:	611a      	str	r2, [r3, #16]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	4a11      	ldr	r2, [pc, #68]	; (8010578 <_ZN12MotorBTS7960C1Ev+0x70>)
 8010534:	615a      	str	r2, [r3, #20]
	timer->Instance->CCR1 = 0;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	695b      	ldr	r3, [r3, #20]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2200      	movs	r2, #0
 801053e:	635a      	str	r2, [r3, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	695b      	ldr	r3, [r3, #20]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2200      	movs	r2, #0
 8010548:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(timer, channel1);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	695a      	ldr	r2, [r3, #20]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	4619      	mov	r1, r3
 8010554:	4610      	mov	r0, r2
 8010556:	f7f5 fc3d 	bl	8005dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, channel2);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	695a      	ldr	r2, [r3, #20]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	691b      	ldr	r3, [r3, #16]
 8010562:	4619      	mov	r1, r3
 8010564:	4610      	mov	r0, r2
 8010566:	f7f5 fc35 	bl	8005dd4 <HAL_TIM_PWM_Start>
}
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4618      	mov	r0, r3
 801056e:	3708      	adds	r7, #8
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	08019288 	.word	0x08019288
 8010578:	2000169c 	.word	0x2000169c

0801057c <_ZN12MotorBTS7960D1Ev>:

MotorBTS7960::~MotorBTS7960() {
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	4a0b      	ldr	r2, [pc, #44]	; (80105b4 <_ZN12MotorBTS7960D1Ev+0x38>)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(timer, channel1);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	695a      	ldr	r2, [r3, #20]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	4619      	mov	r1, r3
 8010594:	4610      	mov	r0, r2
 8010596:	f7f5 fc4f 	bl	8005e38 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer, channel2);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	695a      	ldr	r2, [r3, #20]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	691b      	ldr	r3, [r3, #16]
 80105a2:	4619      	mov	r1, r3
 80105a4:	4610      	mov	r0, r2
 80105a6:	f7f5 fc47 	bl	8005e38 <HAL_TIM_PWM_Stop>
}
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4618      	mov	r0, r3
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	08019288 	.word	0x08019288

080105b8 <_ZN12MotorBTS7960D0Ev>:
MotorBTS7960::~MotorBTS7960() {
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
}
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7ff ffdb 	bl	801057c <_ZN12MotorBTS7960D1Ev>
 80105c6:	2118      	movs	r1, #24
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f003 ff97 	bl	80144fc <_ZdlPvj>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	4618      	mov	r0, r3
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <_ZN12MotorBTS79605startEv>:


void MotorBTS7960::start(){
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
	active = true;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	721a      	strb	r2, [r3, #8]
}
 80105e6:	bf00      	nop
 80105e8:	370c      	adds	r7, #12
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bc80      	pop	{r7}
 80105ee:	4770      	bx	lr

080105f0 <_ZN12MotorBTS79604stopEv>:

void MotorBTS7960::stop(){
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
	active = false;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2200      	movs	r2, #0
 80105fc:	721a      	strb	r2, [r3, #8]
	timer->Instance->CCR1 = 0;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	695b      	ldr	r3, [r3, #20]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2200      	movs	r2, #0
 8010606:	635a      	str	r2, [r3, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	695b      	ldr	r3, [r3, #20]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2200      	movs	r2, #0
 8010610:	639a      	str	r2, [r3, #56]	; 0x38
}
 8010612:	bf00      	nop
 8010614:	370c      	adds	r7, #12
 8010616:	46bd      	mov	sp, r7
 8010618:	bc80      	pop	{r7}
 801061a:	4770      	bx	lr

0801061c <_ZN12TimerHandlerC1Ev>:
#include "TimerHandler.h"

TimerHandler::TimerHandler() {
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	4a07      	ldr	r2, [pc, #28]	; (8010644 <_ZN12TimerHandlerC1Ev+0x28>)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	601a      	str	r2, [r3, #0]
	extern std::vector<TimerHandler*> timerHandlers;
	timerHandlers.push_back(this);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	60fb      	str	r3, [r7, #12]
 801062e:	f107 030c 	add.w	r3, r7, #12
 8010632:	4619      	mov	r1, r3
 8010634:	4804      	ldr	r0, [pc, #16]	; (8010648 <_ZN12TimerHandlerC1Ev+0x2c>)
 8010636:	f000 f879 	bl	801072c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE9push_backEOS1_>

}
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	4618      	mov	r0, r3
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	08019298 	.word	0x08019298
 8010648:	20000b6c 	.word	0x20000b6c

0801064c <_ZN12TimerHandlerD1Ev>:

TimerHandler::~TimerHandler() {
 801064c:	b590      	push	{r4, r7, lr}
 801064e:	b087      	sub	sp, #28
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	4a21      	ldr	r2, [pc, #132]	; (80106dc <_ZN12TimerHandlerD1Ev+0x90>)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	601a      	str	r2, [r3, #0]
	extern std::vector<TimerHandler*> timerHandlers;
	for (uint8_t i = 0; i < timerHandlers.size(); i++){
 801065a:	2300      	movs	r3, #0
 801065c:	75fb      	strb	r3, [r7, #23]
 801065e:	7dfc      	ldrb	r4, [r7, #23]
 8010660:	481f      	ldr	r0, [pc, #124]	; (80106e0 <_ZN12TimerHandlerD1Ev+0x94>)
 8010662:	f000 f874 	bl	801074e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8010666:	4603      	mov	r3, r0
 8010668:	429c      	cmp	r4, r3
 801066a:	bf34      	ite	cc
 801066c:	2301      	movcc	r3, #1
 801066e:	2300      	movcs	r3, #0
 8010670:	b2db      	uxtb	r3, r3
 8010672:	2b00      	cmp	r3, #0
 8010674:	d02d      	beq.n	80106d2 <_ZN12TimerHandlerD1Ev+0x86>
		if(timerHandlers[i] == this){
 8010676:	7dfb      	ldrb	r3, [r7, #23]
 8010678:	4619      	mov	r1, r3
 801067a:	4819      	ldr	r0, [pc, #100]	; (80106e0 <_ZN12TimerHandlerD1Ev+0x94>)
 801067c:	f000 f877 	bl	801076e <_ZNSt6vectorIP12TimerHandlerSaIS1_EEixEj>
 8010680:	4603      	mov	r3, r0
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	429a      	cmp	r2, r3
 8010688:	bf0c      	ite	eq
 801068a:	2301      	moveq	r3, #1
 801068c:	2300      	movne	r3, #0
 801068e:	b2db      	uxtb	r3, r3
 8010690:	2b00      	cmp	r3, #0
 8010692:	d01a      	beq.n	80106ca <_ZN12TimerHandlerD1Ev+0x7e>
			timerHandlers.erase(timerHandlers.begin()+i);
 8010694:	4812      	ldr	r0, [pc, #72]	; (80106e0 <_ZN12TimerHandlerD1Ev+0x94>)
 8010696:	f000 f879 	bl	801078c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 801069a:	4603      	mov	r3, r0
 801069c:	613b      	str	r3, [r7, #16]
 801069e:	7dfa      	ldrb	r2, [r7, #23]
 80106a0:	f107 0310 	add.w	r3, r7, #16
 80106a4:	4611      	mov	r1, r2
 80106a6:	4618      	mov	r0, r3
 80106a8:	f000 f880 	bl	80107ac <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 80106ac:	4603      	mov	r3, r0
 80106ae:	60fb      	str	r3, [r7, #12]
 80106b0:	f107 020c 	add.w	r2, r7, #12
 80106b4:	f107 0308 	add.w	r3, r7, #8
 80106b8:	4611      	mov	r1, r2
 80106ba:	4618      	mov	r0, r3
 80106bc:	f000 f88e 	bl	80107dc <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 80106c0:	68b9      	ldr	r1, [r7, #8]
 80106c2:	4807      	ldr	r0, [pc, #28]	; (80106e0 <_ZN12TimerHandlerD1Ev+0x94>)
 80106c4:	f000 f89b 	bl	80107fe <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 80106c8:	e003      	b.n	80106d2 <_ZN12TimerHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < timerHandlers.size(); i++){
 80106ca:	7dfb      	ldrb	r3, [r7, #23]
 80106cc:	3301      	adds	r3, #1
 80106ce:	75fb      	strb	r3, [r7, #23]
 80106d0:	e7c5      	b.n	801065e <_ZN12TimerHandlerD1Ev+0x12>
		}
	}
}
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4618      	mov	r0, r3
 80106d6:	371c      	adds	r7, #28
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd90      	pop	{r4, r7, pc}
 80106dc:	08019298 	.word	0x08019298
 80106e0:	20000b6c 	.word	0x20000b6c

080106e4 <_ZN12TimerHandlerD0Ev>:
TimerHandler::~TimerHandler() {
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
}
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f7ff ffad 	bl	801064c <_ZN12TimerHandlerD1Ev>
 80106f2:	2104      	movs	r1, #4
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f003 ff01 	bl	80144fc <_ZdlPvj>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4618      	mov	r0, r3
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <_ZN12TimerHandler12timerElapsedEP17TIM_HandleTypeDef>:

void TimerHandler::timerElapsed(TIM_HandleTypeDef* htim){
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]

}
 801070e:	bf00      	nop
 8010710:	370c      	adds	r7, #12
 8010712:	46bd      	mov	sp, r7
 8010714:	bc80      	pop	{r7}
 8010716:	4770      	bx	lr

08010718 <_ZSt4moveIRP12TimerHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	4618      	mov	r0, r3
 8010724:	370c      	adds	r7, #12
 8010726:	46bd      	mov	sp, r7
 8010728:	bc80      	pop	{r7}
 801072a:	4770      	bx	lr

0801072c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010736:	6838      	ldr	r0, [r7, #0]
 8010738:	f7ff ffee 	bl	8010718 <_ZSt4moveIRP12TimerHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 801073c:	4603      	mov	r3, r0
 801073e:	4619      	mov	r1, r3
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f000 f88d 	bl	8010860 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8010746:	bf00      	nop
 8010748:	3708      	adds	r7, #8
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}

0801074e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801074e:	b480      	push	{r7}
 8010750:	b083      	sub	sp, #12
 8010752:	af00      	add	r7, sp, #0
 8010754:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	685b      	ldr	r3, [r3, #4]
 801075a:	461a      	mov	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	1ad3      	subs	r3, r2, r3
 8010762:	109b      	asrs	r3, r3, #2
 8010764:	4618      	mov	r0, r3
 8010766:	370c      	adds	r7, #12
 8010768:	46bd      	mov	sp, r7
 801076a:	bc80      	pop	{r7}
 801076c:	4770      	bx	lr

0801076e <_ZNSt6vectorIP12TimerHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 801076e:	b480      	push	{r7}
 8010770:	b083      	sub	sp, #12
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	4413      	add	r3, r2
      }
 8010782:	4618      	mov	r0, r3
 8010784:	370c      	adds	r7, #12
 8010786:	46bd      	mov	sp, r7
 8010788:	bc80      	pop	{r7}
 801078a:	4770      	bx	lr

0801078c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	f107 030c 	add.w	r3, r7, #12
 801079a:	4611      	mov	r1, r2
 801079c:	4618      	mov	r0, r3
 801079e:	f000 f88d 	bl	80108bc <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	4618      	mov	r0, r3
 80107a6:	3710      	adds	r7, #16
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4413      	add	r3, r2
 80107c0:	60fb      	str	r3, [r7, #12]
 80107c2:	f107 020c 	add.w	r2, r7, #12
 80107c6:	f107 0308 	add.w	r3, r7, #8
 80107ca:	4611      	mov	r1, r2
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 f875 	bl	80108bc <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	4618      	mov	r0, r3
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 80107e6:	6838      	ldr	r0, [r7, #0]
 80107e8:	f000 f877 	bl	80108da <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80107ec:	4603      	mov	r3, r0
 80107ee:	681a      	ldr	r2, [r3, #0]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	4618      	mov	r0, r3
 80107f8:	3708      	adds	r7, #8
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 80107fe:	b580      	push	{r7, lr}
 8010800:	b084      	sub	sp, #16
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
 8010806:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7ff ffbf 	bl	801078c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 801080e:	4603      	mov	r3, r0
 8010810:	60bb      	str	r3, [r7, #8]
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f86b 	bl	80108ee <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE6cbeginEv>
 8010818:	4603      	mov	r3, r0
 801081a:	60fb      	str	r3, [r7, #12]
 801081c:	f107 020c 	add.w	r2, r7, #12
 8010820:	463b      	mov	r3, r7
 8010822:	4611      	mov	r1, r2
 8010824:	4618      	mov	r0, r3
 8010826:	f000 f876 	bl	8010916 <_ZN9__gnu_cxxmiIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801082a:	4602      	mov	r2, r0
 801082c:	f107 0308 	add.w	r3, r7, #8
 8010830:	4611      	mov	r1, r2
 8010832:	4618      	mov	r0, r3
 8010834:	f7ff ffba 	bl	80107ac <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8010838:	4603      	mov	r3, r0
 801083a:	4619      	mov	r1, r3
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f000 f880 	bl	8010942 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 8010842:	4603      	mov	r3, r0
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	4618      	mov	r0, r3
 8010858:	370c      	adds	r7, #12
 801085a:	46bd      	mov	sp, r7
 801085c:	bc80      	pop	{r7}
 801085e:	4770      	bx	lr

08010860 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8010860:	b5b0      	push	{r4, r5, r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	685a      	ldr	r2, [r3, #4]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	689b      	ldr	r3, [r3, #8]
 8010872:	429a      	cmp	r2, r3
 8010874:	d011      	beq.n	801089a <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010876:	687c      	ldr	r4, [r7, #4]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	685d      	ldr	r5, [r3, #4]
 801087c:	6838      	ldr	r0, [r7, #0]
 801087e:	f7ff ffe5 	bl	801084c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010882:	4603      	mov	r3, r0
 8010884:	461a      	mov	r2, r3
 8010886:	4629      	mov	r1, r5
 8010888:	4620      	mov	r0, r4
 801088a:	f000 f896 	bl	80109ba <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	1d1a      	adds	r2, r3, #4
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	605a      	str	r2, [r3, #4]
      }
 8010898:	e00c      	b.n	80108b4 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	f000 f8a0 	bl	80109e0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 80108a0:	4604      	mov	r4, r0
 80108a2:	6838      	ldr	r0, [r7, #0]
 80108a4:	f7ff ffd2 	bl	801084c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 80108a8:	4603      	mov	r3, r0
 80108aa:	461a      	mov	r2, r3
 80108ac:	4621      	mov	r1, r4
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 f8a8 	bl	8010a04 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80108b4:	bf00      	nop
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bdb0      	pop	{r4, r5, r7, pc}

080108bc <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	601a      	str	r2, [r3, #0]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4618      	mov	r0, r3
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bc80      	pop	{r7}
 80108d8:	4770      	bx	lr

080108da <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80108da:	b480      	push	{r7}
 80108dc:	b083      	sub	sp, #12
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4618      	mov	r0, r3
 80108e6:	370c      	adds	r7, #12
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bc80      	pop	{r7}
 80108ec:	4770      	bx	lr

080108ee <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 80108ee:	b580      	push	{r7, lr}
 80108f0:	b084      	sub	sp, #16
 80108f2:	af00      	add	r7, sp, #0
 80108f4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	60fb      	str	r3, [r7, #12]
 80108fc:	f107 020c 	add.w	r2, r7, #12
 8010900:	f107 0308 	add.w	r3, r7, #8
 8010904:	4611      	mov	r1, r2
 8010906:	4618      	mov	r0, r3
 8010908:	f000 f908 	bl	8010b1c <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	4618      	mov	r0, r3
 8010910:	3710      	adds	r7, #16
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <_ZN9__gnu_cxxmiIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010916:	b590      	push	{r4, r7, lr}
 8010918:	b083      	sub	sp, #12
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
 801091e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 f90a 	bl	8010b3a <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8010926:	4603      	mov	r3, r0
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	461c      	mov	r4, r3
 801092c:	6838      	ldr	r0, [r7, #0]
 801092e:	f000 f904 	bl	8010b3a <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8010932:	4603      	mov	r3, r0
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	1ae3      	subs	r3, r4, r3
 8010938:	109b      	asrs	r3, r3, #2
 801093a:	4618      	mov	r0, r3
 801093c:	370c      	adds	r7, #12
 801093e:	46bd      	mov	sp, r7
 8010940:	bd90      	pop	{r4, r7, pc}

08010942 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 8010942:	b590      	push	{r4, r7, lr}
 8010944:	b085      	sub	sp, #20
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 801094c:	463b      	mov	r3, r7
 801094e:	2101      	movs	r1, #1
 8010950:	4618      	mov	r0, r3
 8010952:	f7ff ff2b 	bl	80107ac <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8010956:	4603      	mov	r3, r0
 8010958:	60bb      	str	r3, [r7, #8]
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 f840 	bl	80109e0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 8010960:	4603      	mov	r3, r0
 8010962:	60fb      	str	r3, [r7, #12]
 8010964:	f107 020c 	add.w	r2, r7, #12
 8010968:	f107 0308 	add.w	r3, r7, #8
 801096c:	4611      	mov	r1, r2
 801096e:	4618      	mov	r0, r3
 8010970:	f000 f8ed 	bl	8010b4e <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8010974:	4603      	mov	r3, r0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00e      	beq.n	8010998 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 801097a:	463b      	mov	r3, r7
 801097c:	2101      	movs	r1, #1
 801097e:	4618      	mov	r0, r3
 8010980:	f7ff ff14 	bl	80107ac <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8010984:	4604      	mov	r4, r0
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f000 f82a 	bl	80109e0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 801098c:	4603      	mov	r3, r0
 801098e:	683a      	ldr	r2, [r7, #0]
 8010990:	4619      	mov	r1, r3
 8010992:	4620      	mov	r0, r4
 8010994:	f000 f8f3 	bl	8010b7e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	1f1a      	subs	r2, r3, #4
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	4619      	mov	r1, r3
 80109aa:	4610      	mov	r0, r2
 80109ac:	f000 f8ff 	bl	8010bae <_ZNSt16allocator_traitsISaIP12TimerHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 80109b0:	683b      	ldr	r3, [r7, #0]
    }
 80109b2:	4618      	mov	r0, r3
 80109b4:	3714      	adds	r7, #20
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd90      	pop	{r4, r7, pc}

080109ba <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80109ba:	b580      	push	{r7, lr}
 80109bc:	b084      	sub	sp, #16
 80109be:	af00      	add	r7, sp, #0
 80109c0:	60f8      	str	r0, [r7, #12]
 80109c2:	60b9      	str	r1, [r7, #8]
 80109c4:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff ff40 	bl	801084c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 80109cc:	4603      	mov	r3, r0
 80109ce:	461a      	mov	r2, r3
 80109d0:	68b9      	ldr	r1, [r7, #8]
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f000 f8f8 	bl	8010bc8 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 80109d8:	bf00      	nop
 80109da:	3710      	adds	r7, #16
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	1d1a      	adds	r2, r3, #4
 80109ec:	f107 030c 	add.w	r3, r7, #12
 80109f0:	4611      	mov	r1, r2
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7ff ff62 	bl	80108bc <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	4618      	mov	r0, r3
 80109fc:	3710      	adds	r7, #16
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
	...

08010a04 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010a04:	b5b0      	push	{r4, r5, r7, lr}
 8010a06:	b08a      	sub	sp, #40	; 0x28
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8010a10:	4a41      	ldr	r2, [pc, #260]	; (8010b18 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 8010a12:	2101      	movs	r1, #1
 8010a14:	68f8      	ldr	r0, [r7, #12]
 8010a16:	f000 f8ef 	bl	8010bf8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc>
 8010a1a:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010a1c:	68f8      	ldr	r0, [r7, #12]
 8010a1e:	f7ff feb5 	bl	801078c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 8010a22:	4603      	mov	r3, r0
 8010a24:	617b      	str	r3, [r7, #20]
 8010a26:	f107 0214 	add.w	r2, r7, #20
 8010a2a:	f107 0308 	add.w	r3, r7, #8
 8010a2e:	4611      	mov	r1, r2
 8010a30:	4618      	mov	r0, r3
 8010a32:	f000 f929 	bl	8010c88 <_ZN9__gnu_cxxmiIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8010a36:	4603      	mov	r3, r0
 8010a38:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f000 f938 	bl	8010cb4 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj>
 8010a44:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010a4a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010a4c:	6a3b      	ldr	r3, [r7, #32]
 8010a4e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8010a50:	69fa      	ldr	r2, [r7, #28]
 8010a52:	18d5      	adds	r5, r2, r3
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f7ff fef9 	bl	801084c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	4629      	mov	r1, r5
 8010a60:	4620      	mov	r0, r4
 8010a62:	f7ff ffaa 	bl	80109ba <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8010a66:	2300      	movs	r3, #0
 8010a68:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681c      	ldr	r4, [r3, #0]
 8010a6e:	f107 0308 	add.w	r3, r7, #8
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7ff ff31 	bl	80108da <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f000 f92c 	bl	8010cdc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8010a84:	4603      	mov	r3, r0
	  __new_finish
 8010a86:	69fa      	ldr	r2, [r7, #28]
 8010a88:	4629      	mov	r1, r5
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	f000 f930 	bl	8010cf0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8010a90:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	3304      	adds	r3, #4
 8010a96:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8010a98:	f107 0308 	add.w	r3, r7, #8
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7ff ff1c 	bl	80108da <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	681c      	ldr	r4, [r3, #0]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	4618      	mov	r0, r3
 8010aae:	f000 f915 	bl	8010cdc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8010ab2:	4603      	mov	r3, r0
	  __new_finish
 8010ab4:	69ba      	ldr	r2, [r7, #24]
 8010ab6:	4629      	mov	r1, r5
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f000 f919 	bl	8010cf0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8010abe:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681c      	ldr	r4, [r3, #0]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	4618      	mov	r0, r3
 8010acc:	f000 f906 	bl	8010cdc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8010ad0:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 f923 	bl	8010d22 <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	1ad3      	subs	r3, r2, r3
 8010aee:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8010af0:	461a      	mov	r2, r3
 8010af2:	f000 f924 	bl	8010d3e <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	69fa      	ldr	r2, [r7, #28]
 8010afa:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	69ba      	ldr	r2, [r7, #24]
 8010b00:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	69fa      	ldr	r2, [r7, #28]
 8010b08:	441a      	add	r2, r3
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	609a      	str	r2, [r3, #8]
    }
 8010b0e:	bf00      	nop
 8010b10:	3728      	adds	r7, #40	; 0x28
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bdb0      	pop	{r4, r5, r7, pc}
 8010b16:	bf00      	nop
 8010b18:	080190f8 	.word	0x080190f8

08010b1c <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	4618      	mov	r0, r3
 8010b32:	370c      	adds	r7, #12
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bc80      	pop	{r7}
 8010b38:	4770      	bx	lr

08010b3a <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8010b3a:	b480      	push	{r7}
 8010b3c:	b083      	sub	sp, #12
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	4618      	mov	r0, r3
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bc80      	pop	{r7}
 8010b4c:	4770      	bx	lr

08010b4e <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010b4e:	b590      	push	{r4, r7, lr}
 8010b50:	b083      	sub	sp, #12
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
 8010b56:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7ff febe 	bl	80108da <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	681c      	ldr	r4, [r3, #0]
 8010b62:	6838      	ldr	r0, [r7, #0]
 8010b64:	f7ff feb9 	bl	80108da <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	429c      	cmp	r4, r3
 8010b6e:	bf14      	ite	ne
 8010b70:	2301      	movne	r3, #1
 8010b72:	2300      	moveq	r3, #0
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	4618      	mov	r0, r3
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd90      	pop	{r4, r7, pc}

08010b7e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 8010b7e:	b590      	push	{r4, r7, lr}
 8010b80:	b085      	sub	sp, #20
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	60f8      	str	r0, [r7, #12]
 8010b86:	60b9      	str	r1, [r7, #8]
 8010b88:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8010b8a:	68f8      	ldr	r0, [r7, #12]
 8010b8c:	f000 f8ea 	bl	8010d64 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8010b90:	4604      	mov	r4, r0
 8010b92:	68b8      	ldr	r0, [r7, #8]
 8010b94:	f000 f8e6 	bl	8010d64 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8010b98:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f000 f8ea 	bl	8010d78 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8010ba4:	4603      	mov	r3, r0
    }
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3714      	adds	r7, #20
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd90      	pop	{r4, r7, pc}

08010bae <_ZNSt16allocator_traitsISaIP12TimerHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b082      	sub	sp, #8
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
 8010bb6:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8010bb8:	6839      	ldr	r1, [r7, #0]
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 f902 	bl	8010dc4 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE7destroyIS2_EEvPT_>
 8010bc0:	bf00      	nop
 8010bc2:	3708      	adds	r7, #8
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8010bc8:	b590      	push	{r4, r7, lr}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7ff fe39 	bl	801084c <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	681c      	ldr	r4, [r3, #0]
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	4619      	mov	r1, r3
 8010be2:	2004      	movs	r0, #4
 8010be4:	f7f7 faea 	bl	80081bc <_ZnwjPv>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d000      	beq.n	8010bf0 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 8010bee:	601c      	str	r4, [r3, #0]
 8010bf0:	bf00      	nop
 8010bf2:	3714      	adds	r7, #20
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd90      	pop	{r4, r7, pc}

08010bf8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8010bf8:	b590      	push	{r4, r7, lr}
 8010bfa:	b087      	sub	sp, #28
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f000 f8e7 	bl	8010dd8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f7ff fd9e 	bl	801074e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8010c12:	4603      	mov	r3, r0
 8010c14:	1ae2      	subs	r2, r4, r3
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	bf34      	ite	cc
 8010c1c:	2301      	movcc	r3, #1
 8010c1e:	2300      	movcs	r3, #0
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d003      	beq.n	8010c2e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f003 fc90 	bl	801454e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8010c2e:	68f8      	ldr	r0, [r7, #12]
 8010c30:	f7ff fd8d 	bl	801074e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8010c34:	4604      	mov	r4, r0
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	f7ff fd89 	bl	801074e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	613b      	str	r3, [r7, #16]
 8010c40:	f107 0208 	add.w	r2, r7, #8
 8010c44:	f107 0310 	add.w	r3, r7, #16
 8010c48:	4611      	mov	r1, r2
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7f7 feb1 	bl	80089b2 <_ZSt3maxIjERKT_S2_S2_>
 8010c50:	4603      	mov	r3, r0
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4423      	add	r3, r4
 8010c56:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	f7ff fd78 	bl	801074e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d306      	bcc.n	8010c74 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	f000 f8b6 	bl	8010dd8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	4293      	cmp	r3, r2
 8010c72:	d904      	bls.n	8010c7e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8010c74:	68f8      	ldr	r0, [r7, #12]
 8010c76:	f000 f8af 	bl	8010dd8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	e000      	b.n	8010c80 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 8010c7e:	697b      	ldr	r3, [r7, #20]
      }
 8010c80:	4618      	mov	r0, r3
 8010c82:	371c      	adds	r7, #28
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd90      	pop	{r4, r7, pc}

08010c88 <_ZN9__gnu_cxxmiIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010c88:	b590      	push	{r4, r7, lr}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f7ff fe21 	bl	80108da <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	461c      	mov	r4, r3
 8010c9e:	6838      	ldr	r0, [r7, #0]
 8010ca0:	f7ff fe1b 	bl	80108da <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	1ae3      	subs	r3, r4, r3
 8010caa:	109b      	asrs	r3, r3, #2
 8010cac:	4618      	mov	r0, r3
 8010cae:	370c      	adds	r7, #12
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd90      	pop	{r4, r7, pc}

08010cb4 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d006      	beq.n	8010cd2 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj+0x1e>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6839      	ldr	r1, [r7, #0]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f000 f896 	bl	8010dfa <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8allocateERS2_j>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	e000      	b.n	8010cd4 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj+0x20>
 8010cd2:	2300      	movs	r3, #0
      }
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	370c      	adds	r7, #12
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bc80      	pop	{r7}
 8010cee:	4770      	bx	lr

08010cf0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8010cf0:	b590      	push	{r4, r7, lr}
 8010cf2:	b085      	sub	sp, #20
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	607a      	str	r2, [r7, #4]
 8010cfc:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	f000 f88a 	bl	8010e18 <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>
 8010d04:	4604      	mov	r4, r0
 8010d06:	68b8      	ldr	r0, [r7, #8]
 8010d08:	f000 f886 	bl	8010e18 <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>
 8010d0c:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	4620      	mov	r0, r4
 8010d14:	f000 f88f 	bl	8010e36 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12TimerHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8010d18:	4603      	mov	r3, r0
    }
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3714      	adds	r7, #20
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd90      	pop	{r4, r7, pc}

08010d22 <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b084      	sub	sp, #16
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	60f8      	str	r0, [r7, #12]
 8010d2a:	60b9      	str	r1, [r7, #8]
 8010d2c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8010d2e:	68b9      	ldr	r1, [r7, #8]
 8010d30:	68f8      	ldr	r0, [r7, #12]
 8010d32:	f000 f891 	bl	8010e58 <_ZSt8_DestroyIPP12TimerHandlerEvT_S3_>
    }
 8010d36:	bf00      	nop
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}

08010d3e <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8010d3e:	b580      	push	{r7, lr}
 8010d40:	b084      	sub	sp, #16
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	60f8      	str	r0, [r7, #12]
 8010d46:	60b9      	str	r1, [r7, #8]
 8010d48:	607a      	str	r2, [r7, #4]
	if (__p)
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d005      	beq.n	8010d5c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	68b9      	ldr	r1, [r7, #8]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f000 f88b 	bl	8010e72 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE10deallocateERS2_PS1_j>
      }
 8010d5c:	bf00      	nop
 8010d5e:	3710      	adds	r7, #16
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	370c      	adds	r7, #12
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bc80      	pop	{r7}
 8010d76:	4770      	bx	lr

08010d78 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8010d78:	b5b0      	push	{r4, r5, r7, lr}
 8010d7a:	b086      	sub	sp, #24
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f000 f883 	bl	8010e90 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	68b8      	ldr	r0, [r7, #8]
 8010d8e:	f000 f87f 	bl	8010e90 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8010d92:	4605      	mov	r5, r0
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 f87b 	bl	8010e90 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	4629      	mov	r1, r5
 8010da0:	4620      	mov	r0, r4
 8010da2:	f000 f883 	bl	8010eac <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8010da6:	4603      	mov	r3, r0
 8010da8:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8010daa:	f107 0214 	add.w	r2, r7, #20
 8010dae:	f107 0310 	add.w	r3, r7, #16
 8010db2:	4611      	mov	r1, r2
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fd81 	bl	80108bc <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010dba:	693b      	ldr	r3, [r7, #16]
    }
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3718      	adds	r7, #24
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bdb0      	pop	{r4, r5, r7, pc}

08010dc4 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
 8010dce:	bf00      	nop
 8010dd0:	370c      	adds	r7, #12
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bc80      	pop	{r7}
 8010dd6:	4770      	bx	lr

08010dd8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f000 f880 	bl	8010ee8 <_ZNKSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8010de8:	4603      	mov	r3, r0
 8010dea:	4618      	mov	r0, r3
 8010dec:	f000 f870 	bl	8010ed0 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8max_sizeERKS2_>
 8010df0:	4603      	mov	r3, r0
 8010df2:	4618      	mov	r0, r3
 8010df4:	3708      	adds	r7, #8
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b082      	sub	sp, #8
 8010dfe:	af00      	add	r7, sp, #0
 8010e00:	6078      	str	r0, [r7, #4]
 8010e02:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8010e04:	2200      	movs	r2, #0
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 f877 	bl	8010efc <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	4618      	mov	r0, r3
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8010e20:	f107 030c 	add.w	r3, r7, #12
 8010e24:	6879      	ldr	r1, [r7, #4]
 8010e26:	4618      	mov	r0, r3
 8010e28:	f000 f886 	bl	8010f38 <_ZNSt13move_iteratorIPP12TimerHandlerEC1ES2_>
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3710      	adds	r7, #16
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}

08010e36 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12TimerHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b084      	sub	sp, #16
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	60f8      	str	r0, [r7, #12]
 8010e3e:	60b9      	str	r1, [r7, #8]
 8010e40:	607a      	str	r2, [r7, #4]
 8010e42:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	68b9      	ldr	r1, [r7, #8]
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f000 f883 	bl	8010f54 <_ZSt18uninitialized_copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	4618      	mov	r0, r3
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <_ZSt8_DestroyIPP12TimerHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8010e62:	6839      	ldr	r1, [r7, #0]
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 f887 	bl	8010f78 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12TimerHandlerEEvT_S5_>
    }
 8010e6a:	bf00      	nop
 8010e6c:	3708      	adds	r7, #8
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b084      	sub	sp, #16
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	60f8      	str	r0, [r7, #12]
 8010e7a:	60b9      	str	r1, [r7, #8]
 8010e7c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	68b9      	ldr	r1, [r7, #8]
 8010e82:	68f8      	ldr	r0, [r7, #12]
 8010e84:	f000 f882 	bl	8010f8c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE10deallocateEPS2_j>
 8010e88:	bf00      	nop
 8010e8a:	3710      	adds	r7, #16
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8010e98:	1d3b      	adds	r3, r7, #4
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff fd1d 	bl	80108da <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b086      	sub	sp, #24
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8010eb8:	2301      	movs	r3, #1
 8010eba:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	68b9      	ldr	r1, [r7, #8]
 8010ec0:	68f8      	ldr	r0, [r7, #12]
 8010ec2:	f000 f870 	bl	8010fa6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_>
 8010ec6:	4603      	mov	r3, r0
    }
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3718      	adds	r7, #24
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 f881 	bl	8010fe0 <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <_ZNKSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8010ee8:	b480      	push	{r7}
 8010eea:	b083      	sub	sp, #12
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	370c      	adds	r7, #12
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bc80      	pop	{r7}
 8010efa:	4770      	bx	lr

08010efc <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b084      	sub	sp, #16
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8010f08:	68f8      	ldr	r0, [r7, #12]
 8010f0a:	f000 f869 	bl	8010fe0 <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	4293      	cmp	r3, r2
 8010f14:	bf8c      	ite	hi
 8010f16:	2301      	movhi	r3, #1
 8010f18:	2300      	movls	r3, #0
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d001      	beq.n	8010f24 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8010f20:	f003 fb0c 	bl	801453c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f003 fae9 	bl	8014500 <_Znwj>
 8010f2e:	4603      	mov	r3, r0
      }
 8010f30:	4618      	mov	r0, r3
 8010f32:	3710      	adds	r7, #16
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <_ZNSt13move_iteratorIPP12TimerHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	683a      	ldr	r2, [r7, #0]
 8010f46:	601a      	str	r2, [r3, #0]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bc80      	pop	{r7}
 8010f52:	4770      	bx	lr

08010f54 <_ZSt18uninitialized_copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b086      	sub	sp, #24
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8010f60:	2301      	movs	r3, #1
 8010f62:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	68b9      	ldr	r1, [r7, #8]
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	f000 f844 	bl	8010ff6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12TimerHandlerES5_EET0_T_S8_S7_>
 8010f6e:	4603      	mov	r3, r0
    }
 8010f70:	4618      	mov	r0, r3
 8010f72:	3718      	adds	r7, #24
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12TimerHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
 8010f82:	bf00      	nop
 8010f84:	370c      	adds	r7, #12
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bc80      	pop	{r7}
 8010f8a:	4770      	bx	lr

08010f8c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8010f98:	68b8      	ldr	r0, [r7, #8]
 8010f9a:	f003 facb 	bl	8014534 <_ZdlPv>
      }
 8010f9e:	bf00      	nop
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}

08010fa6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010fa6:	b580      	push	{r7, lr}
 8010fa8:	b086      	sub	sp, #24
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	60f8      	str	r0, [r7, #12]
 8010fae:	60b9      	str	r1, [r7, #8]
 8010fb0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010fb2:	68ba      	ldr	r2, [r7, #8]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	109b      	asrs	r3, r3, #2
 8010fba:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d006      	beq.n	8010fd0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	009b      	lsls	r3, r3, #2
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	68f9      	ldr	r1, [r7, #12]
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f006 fcb2 	bl	8017934 <memmove>
	  return __result + _Num;
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	4413      	add	r3, r2
	}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3718      	adds	r7, #24
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8010fe8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010fec:	4618      	mov	r0, r3
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bc80      	pop	{r7}
 8010ff4:	4770      	bx	lr

08010ff6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12TimerHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b084      	sub	sp, #16
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	60f8      	str	r0, [r7, #12]
 8010ffe:	60b9      	str	r1, [r7, #8]
 8011000:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	68b9      	ldr	r1, [r7, #8]
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	f000 f805 	bl	8011016 <_ZSt4copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>
 801100c:	4603      	mov	r3, r0
 801100e:	4618      	mov	r0, r3
 8011010:	3710      	adds	r7, #16
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}

08011016 <_ZSt4copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8011016:	b590      	push	{r4, r7, lr}
 8011018:	b085      	sub	sp, #20
 801101a:	af00      	add	r7, sp, #0
 801101c:	60f8      	str	r0, [r7, #12]
 801101e:	60b9      	str	r1, [r7, #8]
 8011020:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	f000 f80f 	bl	8011046 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011028:	4604      	mov	r4, r0
 801102a:	68b8      	ldr	r0, [r7, #8]
 801102c:	f000 f80b 	bl	8011046 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011030:	4603      	mov	r3, r0
	       __result));
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	4619      	mov	r1, r3
 8011036:	4620      	mov	r0, r4
 8011038:	f000 f816 	bl	8011068 <_ZSt14__copy_move_a2ILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 801103c:	4603      	mov	r3, r0
    }
 801103e:	4618      	mov	r0, r3
 8011040:	3714      	adds	r7, #20
 8011042:	46bd      	mov	sp, r7
 8011044:	bd90      	pop	{r4, r7, pc}

08011046 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8011046:	b580      	push	{r7, lr}
 8011048:	b082      	sub	sp, #8
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 801104e:	1d3b      	adds	r3, r7, #4
 8011050:	4618      	mov	r0, r3
 8011052:	f000 f825 	bl	80110a0 <_ZNKSt13move_iteratorIPP12TimerHandlerE4baseEv>
 8011056:	4603      	mov	r3, r0
 8011058:	4618      	mov	r0, r3
 801105a:	f000 f82c 	bl	80110b6 <_ZSt12__miter_baseIPP12TimerHandlerET_S3_>
 801105e:	4603      	mov	r3, r0
 8011060:	4618      	mov	r0, r3
 8011062:	3708      	adds	r7, #8
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <_ZSt14__copy_move_a2ILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011068:	b5b0      	push	{r4, r5, r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	60b9      	str	r1, [r7, #8]
 8011072:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f000 f828 	bl	80110ca <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 801107a:	4604      	mov	r4, r0
 801107c:	68b8      	ldr	r0, [r7, #8]
 801107e:	f000 f824 	bl	80110ca <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011082:	4605      	mov	r5, r0
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f000 f820 	bl	80110ca <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 801108a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 801108c:	461a      	mov	r2, r3
 801108e:	4629      	mov	r1, r5
 8011090:	4620      	mov	r0, r4
 8011092:	f7ff ff0b 	bl	8010eac <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8011096:	4603      	mov	r3, r0
    }
 8011098:	4618      	mov	r0, r3
 801109a:	3710      	adds	r7, #16
 801109c:	46bd      	mov	sp, r7
 801109e:	bdb0      	pop	{r4, r5, r7, pc}

080110a0 <_ZNKSt13move_iteratorIPP12TimerHandlerE4baseEv>:
      base() const
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4618      	mov	r0, r3
 80110ae:	370c      	adds	r7, #12
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bc80      	pop	{r7}
 80110b4:	4770      	bx	lr

080110b6 <_ZSt12__miter_baseIPP12TimerHandlerET_S3_>:
    __miter_base(_Iterator __it)
 80110b6:	b480      	push	{r7}
 80110b8:	b083      	sub	sp, #12
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	4618      	mov	r0, r3
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bc80      	pop	{r7}
 80110c8:	4770      	bx	lr

080110ca <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>:
    __niter_base(_Iterator __it)
 80110ca:	b480      	push	{r7}
 80110cc:	b083      	sub	sp, #12
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	4618      	mov	r0, r3
 80110d6:	370c      	adds	r7, #12
 80110d8:	46bd      	mov	sp, r7
 80110da:	bc80      	pop	{r7}
 80110dc:	4770      	bx	lr
	...

080110e0 <_ZN13UsbHidHandlerC1Ev>:
 */

#include "UsbHidHandler.h"
#include "global_callbacks.h"

UsbHidHandler::UsbHidHandler() {
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	4a04      	ldr	r2, [pc, #16]	; (80110fc <_ZN13UsbHidHandlerC1Ev+0x1c>)
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	601a      	str	r2, [r3, #0]
	// Don't auto register. Call registerCallback()
	// There should only be one hid handler for now
}
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	4618      	mov	r0, r3
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bc80      	pop	{r7}
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop
 80110fc:	080192ac 	.word	0x080192ac

08011100 <_ZN13UsbHidHandlerD1Ev>:

UsbHidHandler::~UsbHidHandler() {
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	4a04      	ldr	r2, [pc, #16]	; (801111c <_ZN13UsbHidHandlerD1Ev+0x1c>)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4618      	mov	r0, r3
 8011112:	370c      	adds	r7, #12
 8011114:	46bd      	mov	sp, r7
 8011116:	bc80      	pop	{r7}
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	080192ac 	.word	0x080192ac

08011120 <_ZN13UsbHidHandlerD0Ev>:
UsbHidHandler::~UsbHidHandler() {
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
}
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7ff ffe9 	bl	8011100 <_ZN13UsbHidHandlerD1Ev>
 801112e:	2104      	movs	r1, #4
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f003 f9e3 	bl	80144fc <_ZdlPvj>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	4618      	mov	r0, r3
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <_ZN13UsbHidHandler6hidGetEhtPPh>:



void UsbHidHandler::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){
 8011140:	b480      	push	{r7}
 8011142:	b085      	sub	sp, #20
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	607b      	str	r3, [r7, #4]
 801114a:	460b      	mov	r3, r1
 801114c:	72fb      	strb	r3, [r7, #11]
 801114e:	4613      	mov	r3, r2
 8011150:	813b      	strh	r3, [r7, #8]

}
 8011152:	bf00      	nop
 8011154:	3714      	adds	r7, #20
 8011156:	46bd      	mov	sp, r7
 8011158:	bc80      	pop	{r7}
 801115a:	4770      	bx	lr

0801115c <_ZN13UsbHidHandler6hidOutEPh>:

void UsbHidHandler::hidOut(uint8_t* report){
 801115c:	b480      	push	{r7}
 801115e:	b083      	sub	sp, #12
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	6039      	str	r1, [r7, #0]

}
 8011166:	bf00      	nop
 8011168:	370c      	adds	r7, #12
 801116a:	46bd      	mov	sp, r7
 801116c:	bc80      	pop	{r7}
 801116e:	4770      	bx	lr

08011170 <_ZN13UsbHidHandler19registerHidCallbackEv>:

void UsbHidHandler::registerHidCallback(){
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
	extern UsbHidHandler* globalHidHandler;
	globalHidHandler = this;
 8011178:	4a03      	ldr	r2, [pc, #12]	; (8011188 <_ZN13UsbHidHandler19registerHidCallbackEv+0x18>)
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6013      	str	r3, [r2, #0]
}
 801117e:	bf00      	nop
 8011180:	370c      	adds	r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	bc80      	pop	{r7}
 8011186:	4770      	bx	lr
 8011188:	20000b84 	.word	0x20000b84

0801118c <HAL_ADC_ConvCpltCallback>:
std::vector<CommandHandler*> cmdHandlers;

volatile uint32_t ADC_BUF[ADC_CHANNELS] = {0};


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
		for(AdcHandler* c : adcHandlers){
 8011194:	4b17      	ldr	r3, [pc, #92]	; (80111f4 <HAL_ADC_ConvCpltCallback+0x68>)
 8011196:	617b      	str	r3, [r7, #20]
 8011198:	6978      	ldr	r0, [r7, #20]
 801119a:	f7f7 f8d3 	bl	8008344 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 801119e:	4603      	mov	r3, r0
 80111a0:	60fb      	str	r3, [r7, #12]
 80111a2:	6978      	ldr	r0, [r7, #20]
 80111a4:	f7f7 f9f8 	bl	8008598 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 80111a8:	4603      	mov	r3, r0
 80111aa:	60bb      	str	r3, [r7, #8]
 80111ac:	f107 0208 	add.w	r2, r7, #8
 80111b0:	f107 030c 	add.w	r3, r7, #12
 80111b4:	4611      	mov	r1, r2
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7f7 faa5 	bl	8008706 <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d014      	beq.n	80111ec <HAL_ADC_ConvCpltCallback+0x60>
 80111c2:	f107 030c 	add.w	r3, r7, #12
 80111c6:	4618      	mov	r0, r3
 80111c8:	f000 f913 	bl	80113f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 80111cc:	4603      	mov	r3, r0
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	613b      	str	r3, [r7, #16]
			c->adcUpd(ADC_BUF);
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	3308      	adds	r3, #8
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4907      	ldr	r1, [pc, #28]	; (80111f8 <HAL_ADC_ConvCpltCallback+0x6c>)
 80111dc:	6938      	ldr	r0, [r7, #16]
 80111de:	4798      	blx	r3
		for(AdcHandler* c : adcHandlers){
 80111e0:	f107 030c 	add.w	r3, r7, #12
 80111e4:	4618      	mov	r0, r3
 80111e6:	f000 f8f5 	bl	80113d4 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEppEv>
 80111ea:	e7df      	b.n	80111ac <HAL_ADC_ConvCpltCallback+0x20>
		}
}
 80111ec:	bf00      	nop
 80111ee:	3718      	adds	r7, #24
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	20000b4c 	.word	0x20000b4c
 80111f8:	20000b64 	.word	0x20000b64

080111fc <HAL_TIM_PeriodElapsedCallback>:

std::vector<TimerHandler*> timerHandlers;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
	for(TimerHandler* c : timerHandlers){
 8011204:	4b17      	ldr	r3, [pc, #92]	; (8011264 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8011206:	617b      	str	r3, [r7, #20]
 8011208:	6978      	ldr	r0, [r7, #20]
 801120a:	f7ff fabf 	bl	801078c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 801120e:	4603      	mov	r3, r0
 8011210:	60fb      	str	r3, [r7, #12]
 8011212:	6978      	ldr	r0, [r7, #20]
 8011214:	f7ff fbe4 	bl	80109e0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 8011218:	4603      	mov	r3, r0
 801121a:	60bb      	str	r3, [r7, #8]
 801121c:	f107 0208 	add.w	r2, r7, #8
 8011220:	f107 030c 	add.w	r3, r7, #12
 8011224:	4611      	mov	r1, r2
 8011226:	4618      	mov	r0, r3
 8011228:	f7ff fc91 	bl	8010b4e <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d014      	beq.n	801125c <HAL_TIM_PeriodElapsedCallback+0x60>
 8011232:	f107 030c 	add.w	r3, r7, #12
 8011236:	4618      	mov	r0, r3
 8011238:	f000 f902 	bl	8011440 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 801123c:	4603      	mov	r3, r0
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	613b      	str	r3, [r7, #16]
			c->timerElapsed(htim);
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	3308      	adds	r3, #8
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	6879      	ldr	r1, [r7, #4]
 801124c:	6938      	ldr	r0, [r7, #16]
 801124e:	4798      	blx	r3
	for(TimerHandler* c : timerHandlers){
 8011250:	f107 030c 	add.w	r3, r7, #12
 8011254:	4618      	mov	r0, r3
 8011256:	f000 f8e4 	bl	8011422 <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEppEv>
 801125a:	e7df      	b.n	801121c <HAL_TIM_PeriodElapsedCallback+0x20>
		}
}
 801125c:	bf00      	nop
 801125e:	3718      	adds	r7, #24
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	20000b6c 	.word	0x20000b6c

08011268 <HAL_GPIO_EXTI_Callback>:

std::vector<ExtiHandler*> extiHandlers;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8011268:	b580      	push	{r7, lr}
 801126a:	b086      	sub	sp, #24
 801126c:	af00      	add	r7, sp, #0
 801126e:	4603      	mov	r3, r0
 8011270:	80fb      	strh	r3, [r7, #6]
	for(ExtiHandler* c : extiHandlers){
 8011272:	4b18      	ldr	r3, [pc, #96]	; (80112d4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8011274:	617b      	str	r3, [r7, #20]
 8011276:	6978      	ldr	r0, [r7, #20]
 8011278:	f7fa f9db 	bl	800b632 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 801127c:	4603      	mov	r3, r0
 801127e:	60fb      	str	r3, [r7, #12]
 8011280:	6978      	ldr	r0, [r7, #20]
 8011282:	f7fa fb00 	bl	800b886 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 8011286:	4603      	mov	r3, r0
 8011288:	60bb      	str	r3, [r7, #8]
 801128a:	f107 0208 	add.w	r2, r7, #8
 801128e:	f107 030c 	add.w	r3, r7, #12
 8011292:	4611      	mov	r1, r2
 8011294:	4618      	mov	r0, r3
 8011296:	f7fa fbac 	bl	800b9f2 <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 801129a:	4603      	mov	r3, r0
 801129c:	2b00      	cmp	r3, #0
 801129e:	d015      	beq.n	80112cc <HAL_GPIO_EXTI_Callback+0x64>
 80112a0:	f107 030c 	add.w	r3, r7, #12
 80112a4:	4618      	mov	r0, r3
 80112a6:	f000 f8f2 	bl	801148e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 80112aa:	4603      	mov	r3, r0
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	613b      	str	r3, [r7, #16]
		c->exti(GPIO_Pin);
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	3308      	adds	r3, #8
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	88fa      	ldrh	r2, [r7, #6]
 80112ba:	4611      	mov	r1, r2
 80112bc:	6938      	ldr	r0, [r7, #16]
 80112be:	4798      	blx	r3
	for(ExtiHandler* c : extiHandlers){
 80112c0:	f107 030c 	add.w	r3, r7, #12
 80112c4:	4618      	mov	r0, r3
 80112c6:	f000 f8d3 	bl	8011470 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEppEv>
 80112ca:	e7de      	b.n	801128a <HAL_GPIO_EXTI_Callback+0x22>
	}
}
 80112cc:	bf00      	nop
 80112ce:	3718      	adds	r7, #24
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	20000b78 	.word	0x20000b78

080112d8 <CDC_Callback>:

void CDC_Callback(uint8_t* Buf, uint32_t *Len){
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //DEBUG
 80112e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80112e6:	4809      	ldr	r0, [pc, #36]	; (801130c <CDC_Callback+0x34>)
 80112e8:	f7f2 f9c5 	bl	8003676 <HAL_GPIO_TogglePin>
	if(mainclass!=nullptr)
 80112ec:	4b08      	ldr	r3, [pc, #32]	; (8011310 <CDC_Callback+0x38>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d006      	beq.n	8011302 <CDC_Callback+0x2a>
		mainclass->cdcRcv((char*)Buf,Len);
 80112f4:	4b06      	ldr	r3, [pc, #24]	; (8011310 <CDC_Callback+0x38>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	683a      	ldr	r2, [r7, #0]
 80112fa:	6879      	ldr	r1, [r7, #4]
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7fb fc1d 	bl	800cb3c <_ZN8FFBWheel6cdcRcvEPcPm>
}
 8011302:	bf00      	nop
 8011304:	3708      	adds	r7, #8
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	40011000 	.word	0x40011000
 8011310:	20000914 	.word	0x20000914

08011314 <USBD_OutEvent_HID>:

UsbHidHandler* globalHidHandler = nullptr;
void USBD_OutEvent_HID(uint8_t* report){
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
	if(globalHidHandler!=nullptr)
 801131c:	4b08      	ldr	r3, [pc, #32]	; (8011340 <USBD_OutEvent_HID+0x2c>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d009      	beq.n	8011338 <USBD_OutEvent_HID+0x24>
			globalHidHandler->hidOut(report);
 8011324:	4b06      	ldr	r3, [pc, #24]	; (8011340 <USBD_OutEvent_HID+0x2c>)
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	4b05      	ldr	r3, [pc, #20]	; (8011340 <USBD_OutEvent_HID+0x2c>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	3308      	adds	r3, #8
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	6879      	ldr	r1, [r7, #4]
 8011334:	4610      	mov	r0, r2
 8011336:	4798      	blx	r3
}
 8011338:	bf00      	nop
 801133a:	3708      	adds	r7, #8
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	20000b84 	.word	0x20000b84

08011344 <USBD_GetEvent_HID>:
void USBD_GetEvent_HID(uint8_t id,uint16_t len,uint8_t** return_buf){
 8011344:	b590      	push	{r4, r7, lr}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
 801134a:	4603      	mov	r3, r0
 801134c:	603a      	str	r2, [r7, #0]
 801134e:	71fb      	strb	r3, [r7, #7]
 8011350:	460b      	mov	r3, r1
 8011352:	80bb      	strh	r3, [r7, #4]
	if(globalHidHandler!=nullptr)
 8011354:	4b09      	ldr	r3, [pc, #36]	; (801137c <USBD_GetEvent_HID+0x38>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d00a      	beq.n	8011372 <USBD_GetEvent_HID+0x2e>
		globalHidHandler->hidGet(id, len, return_buf);
 801135c:	4b07      	ldr	r3, [pc, #28]	; (801137c <USBD_GetEvent_HID+0x38>)
 801135e:	6818      	ldr	r0, [r3, #0]
 8011360:	4b06      	ldr	r3, [pc, #24]	; (801137c <USBD_GetEvent_HID+0x38>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	330c      	adds	r3, #12
 8011368:	681c      	ldr	r4, [r3, #0]
 801136a:	88ba      	ldrh	r2, [r7, #4]
 801136c:	79f9      	ldrb	r1, [r7, #7]
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	47a0      	blx	r4
}
 8011372:	bf00      	nop
 8011374:	370c      	adds	r7, #12
 8011376:	46bd      	mov	sp, r7
 8011378:	bd90      	pop	{r4, r7, pc}
 801137a:	bf00      	nop
 801137c:	20000b84 	.word	0x20000b84

08011380 <USB_SOF>:

void USB_SOF(){
 8011380:	b580      	push	{r7, lr}
 8011382:	af00      	add	r7, sp, #0
	if(mainclass!=nullptr)
 8011384:	4b05      	ldr	r3, [pc, #20]	; (801139c <USB_SOF+0x1c>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d004      	beq.n	8011396 <USB_SOF+0x16>
		mainclass->SOF();
 801138c:	4b03      	ldr	r3, [pc, #12]	; (801139c <USB_SOF+0x1c>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	4618      	mov	r0, r3
 8011392:	f7fb fc05 	bl	800cba0 <_ZN8FFBWheel3SOFEv>
}
 8011396:	bf00      	nop
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	20000914 	.word	0x20000914

080113a0 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEC1Ev>:
      vector()
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	4618      	mov	r0, r3
 80113ac:	f000 f886 	bl	80114bc <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EEC1Ev>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4618      	mov	r0, r3
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <_ZNSt6vectorIP14CommandHandlerSaIS1_EEC1Ev>:
      vector()
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b082      	sub	sp, #8
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f000 f8ac 	bl	8011522 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EEC1Ev>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4618      	mov	r0, r3
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
	++_M_current;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	1d1a      	adds	r2, r3, #4
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	601a      	str	r2, [r3, #0]
	return *this;
 80113e6:	687b      	ldr	r3, [r7, #4]
      }
 80113e8:	4618      	mov	r0, r3
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bc80      	pop	{r7}
 80113f0:	4770      	bx	lr

080113f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80113f2:	b480      	push	{r7}
 80113f4:	b083      	sub	sp, #12
 80113f6:	af00      	add	r7, sp, #0
 80113f8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	4618      	mov	r0, r3
 8011400:	370c      	adds	r7, #12
 8011402:	46bd      	mov	sp, r7
 8011404:	bc80      	pop	{r7}
 8011406:	4770      	bx	lr

08011408 <_ZNSt6vectorIP12TimerHandlerSaIS1_EEC1Ev>:
      vector()
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	4618      	mov	r0, r3
 8011414:	f000 f8b8 	bl	8011588 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EEC1Ev>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	4618      	mov	r0, r3
 801141c:	3708      	adds	r7, #8
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}

08011422 <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8011422:	b480      	push	{r7}
 8011424:	b083      	sub	sp, #12
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
	++_M_current;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	1d1a      	adds	r2, r3, #4
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	601a      	str	r2, [r3, #0]
	return *this;
 8011434:	687b      	ldr	r3, [r7, #4]
      }
 8011436:	4618      	mov	r0, r3
 8011438:	370c      	adds	r7, #12
 801143a:	46bd      	mov	sp, r7
 801143c:	bc80      	pop	{r7}
 801143e:	4770      	bx	lr

08011440 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011440:	b480      	push	{r7}
 8011442:	b083      	sub	sp, #12
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4618      	mov	r0, r3
 801144e:	370c      	adds	r7, #12
 8011450:	46bd      	mov	sp, r7
 8011452:	bc80      	pop	{r7}
 8011454:	4770      	bx	lr

08011456 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEC1Ev>:
      vector()
 8011456:	b580      	push	{r7, lr}
 8011458:	b082      	sub	sp, #8
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4618      	mov	r0, r3
 8011462:	f000 f8c4 	bl	80115ee <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EEC1Ev>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4618      	mov	r0, r3
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
	++_M_current;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	1d1a      	adds	r2, r3, #4
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	601a      	str	r2, [r3, #0]
	return *this;
 8011482:	687b      	ldr	r3, [r7, #4]
      }
 8011484:	4618      	mov	r0, r3
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	bc80      	pop	{r7}
 801148c:	4770      	bx	lr

0801148e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801148e:	b480      	push	{r7}
 8011490:	b083      	sub	sp, #12
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	4618      	mov	r0, r3
 801149c:	370c      	adds	r7, #12
 801149e:	46bd      	mov	sp, r7
 80114a0:	bc80      	pop	{r7}
 80114a2:	4770      	bx	lr

080114a4 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f000 f8da 	bl	8011666 <_ZNSaIP10AdcHandlerED1Ev>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	4618      	mov	r0, r3
 80114b6:	3708      	adds	r7, #8
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	4618      	mov	r0, r3
 80114c8:	f000 f8b8 	bl	801163c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implC1Ev>
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	4618      	mov	r0, r3
 80114d0:	3708      	adds	r7, #8
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b082      	sub	sp, #8
 80114da:	af00      	add	r7, sp, #0
 80114dc:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6819      	ldr	r1, [r3, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80114e6:	461a      	mov	r2, r3
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	1ad3      	subs	r3, r2, r3
 80114ee:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80114f0:	461a      	mov	r2, r3
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f7f7 f9ff 	bl	80088f6 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7ff ffd2 	bl	80114a4 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implD1Ev>
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	4618      	mov	r0, r3
 8011504:	3708      	adds	r7, #8
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 801150a:	b580      	push	{r7, lr}
 801150c:	b082      	sub	sp, #8
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 f8c8 	bl	80116a8 <_ZNSaIP14CommandHandlerED1Ev>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	4618      	mov	r0, r3
 801151c:	3708      	adds	r7, #8
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}

08011522 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 8011522:	b580      	push	{r7, lr}
 8011524:	b082      	sub	sp, #8
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4618      	mov	r0, r3
 801152e:	f000 f8a6 	bl	801167e <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implC1Ev>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	3708      	adds	r7, #8
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6819      	ldr	r1, [r3, #0]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 801154c:	461a      	mov	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	1ad3      	subs	r3, r2, r3
 8011554:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8011556:	461a      	mov	r2, r3
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f7f9 fcc2 	bl	800aee2 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4618      	mov	r0, r3
 8011562:	f7ff ffd2 	bl	801150a <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implD1Ev>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	4618      	mov	r0, r3
 801156a:	3708      	adds	r7, #8
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f000 f8b6 	bl	80116ea <_ZNSaIP12TimerHandlerED1Ev>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4618      	mov	r0, r3
 8011582:	3708      	adds	r7, #8
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}

08011588 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	4618      	mov	r0, r3
 8011594:	f000 f894 	bl	80116c0 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implC1Ev>
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	4618      	mov	r0, r3
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b082      	sub	sp, #8
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6819      	ldr	r1, [r3, #0]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80115b2:	461a      	mov	r2, r3
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	1ad3      	subs	r3, r2, r3
 80115ba:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80115bc:	461a      	mov	r2, r3
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f7ff fbbd 	bl	8010d3e <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7ff ffd2 	bl	8011570 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implD1Ev>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4618      	mov	r0, r3
 80115d0:	3708      	adds	r7, #8
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b082      	sub	sp, #8
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f000 f8a4 	bl	801172c <_ZNSaIP11ExtiHandlerED1Ev>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4618      	mov	r0, r3
 80115e8:	3708      	adds	r7, #8
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b082      	sub	sp, #8
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f000 f882 	bl	8011702 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implC1Ev>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4618      	mov	r0, r3
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6819      	ldr	r1, [r3, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8011618:	461a      	mov	r2, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	1ad3      	subs	r3, r2, r3
 8011620:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8011622:	461a      	mov	r2, r3
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7fa fadc 	bl	800bbe2 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	4618      	mov	r0, r3
 801162e:	f7ff ffd2 	bl	80115d6 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implD1Ev>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	4618      	mov	r0, r3
 8011636:	3708      	adds	r7, #8
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 f87d 	bl	8011744 <_ZNSaIP10AdcHandlerEC1Ev>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	601a      	str	r2, [r3, #0]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	605a      	str	r2, [r3, #4]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2200      	movs	r2, #0
 801165a:	609a      	str	r2, [r3, #8]
	{ }
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4618      	mov	r0, r3
 8011660:	3708      	adds	r7, #8
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <_ZNSaIP10AdcHandlerED1Ev>:
 8011666:	b580      	push	{r7, lr}
 8011668:	b082      	sub	sp, #8
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f000 f874 	bl	801175c <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerED1Ev>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4618      	mov	r0, r3
 8011678:	3708      	adds	r7, #8
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}

0801167e <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 801167e:	b580      	push	{r7, lr}
 8011680:	b082      	sub	sp, #8
 8011682:	af00      	add	r7, sp, #0
 8011684:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 f872 	bl	8011770 <_ZNSaIP14CommandHandlerEC1Ev>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	601a      	str	r2, [r3, #0]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	605a      	str	r2, [r3, #4]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	609a      	str	r2, [r3, #8]
	{ }
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <_ZNSaIP14CommandHandlerED1Ev>:
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f000 f869 	bl	8011788 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerED1Ev>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4618      	mov	r0, r3
 80116ba:	3708      	adds	r7, #8
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f000 f867 	bl	801179c <_ZNSaIP12TimerHandlerEC1Ev>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2200      	movs	r2, #0
 80116d2:	601a      	str	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2200      	movs	r2, #0
 80116d8:	605a      	str	r2, [r3, #4]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2200      	movs	r2, #0
 80116de:	609a      	str	r2, [r3, #8]
	{ }
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	4618      	mov	r0, r3
 80116e4:	3708      	adds	r7, #8
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <_ZNSaIP12TimerHandlerED1Ev>:
 80116ea:	b580      	push	{r7, lr}
 80116ec:	b082      	sub	sp, #8
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 f85e 	bl	80117b4 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerED1Ev>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	4618      	mov	r0, r3
 80116fc:	3708      	adds	r7, #8
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8011702:	b580      	push	{r7, lr}
 8011704:	b082      	sub	sp, #8
 8011706:	af00      	add	r7, sp, #0
 8011708:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 f85c 	bl	80117c8 <_ZNSaIP11ExtiHandlerEC1Ev>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2200      	movs	r2, #0
 8011714:	601a      	str	r2, [r3, #0]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2200      	movs	r2, #0
 801171a:	605a      	str	r2, [r3, #4]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2200      	movs	r2, #0
 8011720:	609a      	str	r2, [r3, #8]
	{ }
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	4618      	mov	r0, r3
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <_ZNSaIP11ExtiHandlerED1Ev>:
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 f853 	bl	80117e0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerED1Ev>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	4618      	mov	r0, r3
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <_ZNSaIP10AdcHandlerEC1Ev>:
      allocator() throw() { }
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 f851 	bl	80117f4 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerEC1Ev>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4618      	mov	r0, r3
 8011756:	3708      	adds	r7, #8
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801175c:	b480      	push	{r7}
 801175e:	b083      	sub	sp, #12
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	4618      	mov	r0, r3
 8011768:	370c      	adds	r7, #12
 801176a:	46bd      	mov	sp, r7
 801176c:	bc80      	pop	{r7}
 801176e:	4770      	bx	lr

08011770 <_ZNSaIP14CommandHandlerEC1Ev>:
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 f845 	bl	8011808 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerEC1Ev>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	4618      	mov	r0, r3
 8011782:	3708      	adds	r7, #8
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerED1Ev>:
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	4618      	mov	r0, r3
 8011794:	370c      	adds	r7, #12
 8011796:	46bd      	mov	sp, r7
 8011798:	bc80      	pop	{r7}
 801179a:	4770      	bx	lr

0801179c <_ZNSaIP12TimerHandlerEC1Ev>:
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f000 f839 	bl	801181c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerEC1Ev>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4618      	mov	r0, r3
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerED1Ev>:
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4618      	mov	r0, r3
 80117c0:	370c      	adds	r7, #12
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bc80      	pop	{r7}
 80117c6:	4770      	bx	lr

080117c8 <_ZNSaIP11ExtiHandlerEC1Ev>:
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f000 f82d 	bl	8011830 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerEC1Ev>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	4618      	mov	r0, r3
 80117da:	3708      	adds	r7, #8
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerED1Ev>:
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4618      	mov	r0, r3
 80117ec:	370c      	adds	r7, #12
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bc80      	pop	{r7}
 80117f2:	4770      	bx	lr

080117f4 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	4618      	mov	r0, r3
 8011800:	370c      	adds	r7, #12
 8011802:	46bd      	mov	sp, r7
 8011804:	bc80      	pop	{r7}
 8011806:	4770      	bx	lr

08011808 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerEC1Ev>:
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	4618      	mov	r0, r3
 8011814:	370c      	adds	r7, #12
 8011816:	46bd      	mov	sp, r7
 8011818:	bc80      	pop	{r7}
 801181a:	4770      	bx	lr

0801181c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerEC1Ev>:
 801181c:	b480      	push	{r7}
 801181e:	b083      	sub	sp, #12
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	4618      	mov	r0, r3
 8011828:	370c      	adds	r7, #12
 801182a:	46bd      	mov	sp, r7
 801182c:	bc80      	pop	{r7}
 801182e:	4770      	bx	lr

08011830 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerEC1Ev>:
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4618      	mov	r0, r3
 801183c:	370c      	adds	r7, #12
 801183e:	46bd      	mov	sp, r7
 8011840:	bc80      	pop	{r7}
 8011842:	4770      	bx	lr

08011844 <_Z41__static_initialization_and_destruction_0ii>:
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	6039      	str	r1, [r7, #0]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d110      	bne.n	8011876 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801185a:	4293      	cmp	r3, r2
 801185c:	d10b      	bne.n	8011876 <_Z41__static_initialization_and_destruction_0ii+0x32>
std::vector<AdcHandler*> adcHandlers;
 801185e:	4812      	ldr	r0, [pc, #72]	; (80118a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8011860:	f7ff fd9e 	bl	80113a0 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEC1Ev>
std::vector<CommandHandler*> cmdHandlers;
 8011864:	4811      	ldr	r0, [pc, #68]	; (80118ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011866:	f7ff fda8 	bl	80113ba <_ZNSt6vectorIP14CommandHandlerSaIS1_EEC1Ev>
std::vector<TimerHandler*> timerHandlers;
 801186a:	4811      	ldr	r0, [pc, #68]	; (80118b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801186c:	f7ff fdcc 	bl	8011408 <_ZNSt6vectorIP12TimerHandlerSaIS1_EEC1Ev>
std::vector<ExtiHandler*> extiHandlers;
 8011870:	4810      	ldr	r0, [pc, #64]	; (80118b4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8011872:	f7ff fdf0 	bl	8011456 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEC1Ev>
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d110      	bne.n	801189e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011882:	4293      	cmp	r3, r2
 8011884:	d10b      	bne.n	801189e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8011886:	480b      	ldr	r0, [pc, #44]	; (80118b4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8011888:	f000 f816 	bl	80118b8 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EED1Ev>
std::vector<TimerHandler*> timerHandlers;
 801188c:	4808      	ldr	r0, [pc, #32]	; (80118b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801188e:	f000 f82e 	bl	80118ee <_ZNSt6vectorIP12TimerHandlerSaIS1_EED1Ev>
std::vector<CommandHandler*> cmdHandlers;
 8011892:	4806      	ldr	r0, [pc, #24]	; (80118ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011894:	f000 f846 	bl	8011924 <_ZNSt6vectorIP14CommandHandlerSaIS1_EED1Ev>
std::vector<AdcHandler*> adcHandlers;
 8011898:	4803      	ldr	r0, [pc, #12]	; (80118a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801189a:	f000 f85e 	bl	801195a <_ZNSt6vectorIP10AdcHandlerSaIS1_EED1Ev>
}
 801189e:	bf00      	nop
 80118a0:	3708      	adds	r7, #8
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	20000b4c 	.word	0x20000b4c
 80118ac:	20000b58 	.word	0x20000b58
 80118b0:	20000b6c 	.word	0x20000b6c
 80118b4:	20000b78 	.word	0x20000b78

080118b8 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80118b8:	b5b0      	push	{r4, r5, r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681c      	ldr	r4, [r3, #0]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7fa f958 	bl	800bb80 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80118d0:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80118d2:	461a      	mov	r2, r3
 80118d4:	4629      	mov	r1, r5
 80118d6:	4620      	mov	r0, r4
 80118d8:	f7fa f975 	bl	800bbc6 <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	4618      	mov	r0, r3
 80118e0:	f7ff fe92 	bl	8011608 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EED1Ev>
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	4618      	mov	r0, r3
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bdb0      	pop	{r4, r5, r7, pc}

080118ee <_ZNSt6vectorIP12TimerHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80118ee:	b5b0      	push	{r4, r5, r7, lr}
 80118f0:	b082      	sub	sp, #8
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681c      	ldr	r4, [r3, #0]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	4618      	mov	r0, r3
 8011902:	f7ff f9eb 	bl	8010cdc <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011906:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011908:	461a      	mov	r2, r3
 801190a:	4629      	mov	r1, r5
 801190c:	4620      	mov	r0, r4
 801190e:	f7ff fa08 	bl	8010d22 <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	4618      	mov	r0, r3
 8011916:	f7ff fe44 	bl	80115a2 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EED1Ev>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	4618      	mov	r0, r3
 801191e:	3708      	adds	r7, #8
 8011920:	46bd      	mov	sp, r7
 8011922:	bdb0      	pop	{r4, r5, r7, pc}

08011924 <_ZNSt6vectorIP14CommandHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8011924:	b5b0      	push	{r4, r5, r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681c      	ldr	r4, [r3, #0]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4618      	mov	r0, r3
 8011938:	f7f9 faa2 	bl	800ae80 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 801193c:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801193e:	461a      	mov	r2, r3
 8011940:	4629      	mov	r1, r5
 8011942:	4620      	mov	r0, r4
 8011944:	f7f9 fabf 	bl	800aec6 <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	4618      	mov	r0, r3
 801194c:	f7ff fdf6 	bl	801153c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EED1Ev>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	4618      	mov	r0, r3
 8011954:	3708      	adds	r7, #8
 8011956:	46bd      	mov	sp, r7
 8011958:	bdb0      	pop	{r4, r5, r7, pc}

0801195a <_ZNSt6vectorIP10AdcHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801195a:	b5b0      	push	{r4, r5, r7, lr}
 801195c:	b082      	sub	sp, #8
 801195e:	af00      	add	r7, sp, #0
 8011960:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681c      	ldr	r4, [r3, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	4618      	mov	r0, r3
 801196e:	f7f6 ff91 	bl	8008894 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011972:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011974:	461a      	mov	r2, r3
 8011976:	4629      	mov	r1, r5
 8011978:	4620      	mov	r0, r4
 801197a:	f7f6 ffae 	bl	80088da <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	4618      	mov	r0, r3
 8011982:	f7ff fda8 	bl	80114d6 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EED1Ev>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	4618      	mov	r0, r3
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bdb0      	pop	{r4, r5, r7, pc}

08011990 <_GLOBAL__sub_I_adcHandlers>:
 8011990:	b580      	push	{r7, lr}
 8011992:	af00      	add	r7, sp, #0
 8011994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011998:	2001      	movs	r0, #1
 801199a:	f7ff ff53 	bl	8011844 <_Z41__static_initialization_and_destruction_0ii>
 801199e:	bd80      	pop	{r7, pc}

080119a0 <_GLOBAL__sub_D_adcHandlers>:
 80119a0:	b580      	push	{r7, lr}
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80119a8:	2000      	movs	r0, #0
 80119aa:	f7ff ff4b 	bl	8011844 <_Z41__static_initialization_and_destruction_0ii>
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <_Z11pulseSysLedv>:
#include "ledEffects.h"
#include "main.h"

uint32_t sysledtick=0;

void pulseSysLed(){
 80119b0:	b580      	push	{r7, lr}
 80119b2:	af00      	add	r7, sp, #0
	sysledtick = HAL_GetTick();
 80119b4:	f7f0 fc1e 	bl	80021f4 <HAL_GetTick>
 80119b8:	4602      	mov	r2, r0
 80119ba:	4b05      	ldr	r3, [pc, #20]	; (80119d0 <_Z11pulseSysLedv+0x20>)
 80119bc:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80119be:	2201      	movs	r2, #1
 80119c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80119c4:	4803      	ldr	r0, [pc, #12]	; (80119d4 <_Z11pulseSysLedv+0x24>)
 80119c6:	f7f1 fe3e 	bl	8003646 <HAL_GPIO_WritePin>
}
 80119ca:	bf00      	nop
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	20000b88 	.word	0x20000b88
 80119d4:	40011000 	.word	0x40011000

080119d8 <_Z10updateLedsv>:

void updateLeds(){
 80119d8:	b580      	push	{r7, lr}
 80119da:	af00      	add	r7, sp, #0
	if(sysledtick!=0 && HAL_GetTick() > sysledtick+35){
 80119dc:	4b0d      	ldr	r3, [pc, #52]	; (8011a14 <_Z10updateLedsv+0x3c>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d009      	beq.n	80119f8 <_Z10updateLedsv+0x20>
 80119e4:	f7f0 fc06 	bl	80021f4 <HAL_GetTick>
 80119e8:	4602      	mov	r2, r0
 80119ea:	4b0a      	ldr	r3, [pc, #40]	; (8011a14 <_Z10updateLedsv+0x3c>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	3323      	adds	r3, #35	; 0x23
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d901      	bls.n	80119f8 <_Z10updateLedsv+0x20>
 80119f4:	2301      	movs	r3, #1
 80119f6:	e000      	b.n	80119fa <_Z10updateLedsv+0x22>
 80119f8:	2300      	movs	r3, #0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d008      	beq.n	8011a10 <_Z10updateLedsv+0x38>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80119fe:	2200      	movs	r2, #0
 8011a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a04:	4804      	ldr	r0, [pc, #16]	; (8011a18 <_Z10updateLedsv+0x40>)
 8011a06:	f7f1 fe1e 	bl	8003646 <HAL_GPIO_WritePin>
		sysledtick = 0;
 8011a0a:	4b02      	ldr	r3, [pc, #8]	; (8011a14 <_Z10updateLedsv+0x3c>)
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	601a      	str	r2, [r3, #0]
	}
}
 8011a10:	bf00      	nop
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	20000b88 	.word	0x20000b88
 8011a18:	40011000 	.word	0x40011000

08011a1c <_Z11ws2812_initv>:
		{0, 0, bright},
		{0, 0, bright}
};

void ws2812_init(void)
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b083      	sub	sp, #12
 8011a20:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 8011a22:	2330      	movs	r3, #48	; 0x30
 8011a24:	607b      	str	r3, [r7, #4]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8011a2c:	da08      	bge.n	8011a40 <_Z11ws2812_initv+0x24>
	  BUF_DMA[i] = LOW;
 8011a2e:	4a07      	ldr	r2, [pc, #28]	; (8011a4c <_Z11ws2812_initv+0x30>)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	211a      	movs	r1, #26
 8011a34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	607b      	str	r3, [r7, #4]
 8011a3e:	e7f2      	b.n	8011a26 <_Z11ws2812_initv+0xa>
}
 8011a40:	bf00      	nop
 8011a42:	370c      	adds	r7, #12
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bc80      	pop	{r7}
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	20000b8c 	.word	0x20000b8c

08011a50 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>:

void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8011a50:	b490      	push	{r4, r7}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	4604      	mov	r4, r0
 8011a58:	4608      	mov	r0, r1
 8011a5a:	4611      	mov	r1, r2
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	4623      	mov	r3, r4
 8011a60:	71fb      	strb	r3, [r7, #7]
 8011a62:	4603      	mov	r3, r0
 8011a64:	71bb      	strb	r3, [r7, #6]
 8011a66:	460b      	mov	r3, r1
 8011a68:	717b      	strb	r3, [r7, #5]
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	807b      	strh	r3, [r7, #2]
  for(uint16_t i = 0; i < 8; i++)
 8011a6e:	2300      	movs	r3, #0
 8011a70:	81fb      	strh	r3, [r7, #14]
 8011a72:	89fb      	ldrh	r3, [r7, #14]
 8011a74:	2b07      	cmp	r3, #7
 8011a76:	d850      	bhi.n	8011b1a <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xca>
  {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = BitIsSet(Rpixel,(7-i)) ? HIGH : LOW;
 8011a78:	79fa      	ldrb	r2, [r7, #7]
 8011a7a:	89fb      	ldrh	r3, [r7, #14]
 8011a7c:	f1c3 0307 	rsb	r3, r3, #7
 8011a80:	fa42 f303 	asr.w	r3, r2, r3
 8011a84:	f003 0301 	and.w	r3, r3, #1
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d001      	beq.n	8011a90 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x40>
 8011a8c:	2141      	movs	r1, #65	; 0x41
 8011a8e:	e000      	b.n	8011a92 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x42>
 8011a90:	211a      	movs	r1, #26
 8011a92:	887a      	ldrh	r2, [r7, #2]
 8011a94:	4613      	mov	r3, r2
 8011a96:	005b      	lsls	r3, r3, #1
 8011a98:	4413      	add	r3, r2
 8011a9a:	00db      	lsls	r3, r3, #3
 8011a9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011aa0:	89fb      	ldrh	r3, [r7, #14]
 8011aa2:	4413      	add	r3, r2
 8011aa4:	4a1f      	ldr	r2, [pc, #124]	; (8011b24 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 8011aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      BUF_DMA[DELAY_LEN+posX*24+i+8] = BitIsSet(Gpixel,(7-i)) ? HIGH : LOW;
 8011aaa:	79ba      	ldrb	r2, [r7, #6]
 8011aac:	89fb      	ldrh	r3, [r7, #14]
 8011aae:	f1c3 0307 	rsb	r3, r3, #7
 8011ab2:	fa42 f303 	asr.w	r3, r2, r3
 8011ab6:	f003 0301 	and.w	r3, r3, #1
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d001      	beq.n	8011ac2 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x72>
 8011abe:	2141      	movs	r1, #65	; 0x41
 8011ac0:	e000      	b.n	8011ac4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x74>
 8011ac2:	211a      	movs	r1, #26
 8011ac4:	887a      	ldrh	r2, [r7, #2]
 8011ac6:	4613      	mov	r3, r2
 8011ac8:	005b      	lsls	r3, r3, #1
 8011aca:	4413      	add	r3, r2
 8011acc:	00db      	lsls	r3, r3, #3
 8011ace:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011ad2:	89fb      	ldrh	r3, [r7, #14]
 8011ad4:	4413      	add	r3, r2
 8011ad6:	3308      	adds	r3, #8
 8011ad8:	4a12      	ldr	r2, [pc, #72]	; (8011b24 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 8011ada:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      BUF_DMA[DELAY_LEN+posX*24+i+16] = BitIsSet(Bpixel,(7-i)) ? HIGH : LOW;
 8011ade:	797a      	ldrb	r2, [r7, #5]
 8011ae0:	89fb      	ldrh	r3, [r7, #14]
 8011ae2:	f1c3 0307 	rsb	r3, r3, #7
 8011ae6:	fa42 f303 	asr.w	r3, r2, r3
 8011aea:	f003 0301 	and.w	r3, r3, #1
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d001      	beq.n	8011af6 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xa6>
 8011af2:	2141      	movs	r1, #65	; 0x41
 8011af4:	e000      	b.n	8011af8 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xa8>
 8011af6:	211a      	movs	r1, #26
 8011af8:	887a      	ldrh	r2, [r7, #2]
 8011afa:	4613      	mov	r3, r2
 8011afc:	005b      	lsls	r3, r3, #1
 8011afe:	4413      	add	r3, r2
 8011b00:	00db      	lsls	r3, r3, #3
 8011b02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011b06:	89fb      	ldrh	r3, [r7, #14]
 8011b08:	4413      	add	r3, r2
 8011b0a:	3310      	adds	r3, #16
 8011b0c:	4a05      	ldr	r2, [pc, #20]	; (8011b24 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 8011b0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint16_t i = 0; i < 8; i++)
 8011b12:	89fb      	ldrh	r3, [r7, #14]
 8011b14:	3301      	adds	r3, #1
 8011b16:	81fb      	strh	r3, [r7, #14]
 8011b18:	e7ab      	b.n	8011a72 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x22>
  }
}
 8011b1a:	bf00      	nop
 8011b1c:	3710      	adds	r7, #16
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bc90      	pop	{r4, r7}
 8011b22:	4770      	bx	lr
 8011b24:	20000b8c 	.word	0x20000b8c

08011b28 <_Z16setup_rpm_ws2812h>:

void setup_rpm_ws2812(uint8_t rgb_array)
{
 8011b28:	b590      	push	{r4, r7, lr}
 8011b2a:	b085      	sub	sp, #20
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	4603      	mov	r3, r0
 8011b30:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i < LED_COUNT; i++)
 8011b32:	2300      	movs	r3, #0
 8011b34:	81fb      	strh	r3, [r7, #14]
 8011b36:	89fb      	ldrh	r3, [r7, #14]
 8011b38:	2b0f      	cmp	r3, #15
 8011b3a:	d82a      	bhi.n	8011b92 <_Z16setup_rpm_ws2812h+0x6a>
	{
		if(i < rgb_array)
 8011b3c:	79fb      	ldrb	r3, [r7, #7]
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	89fa      	ldrh	r2, [r7, #14]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d21b      	bcs.n	8011b7e <_Z16setup_rpm_ws2812h+0x56>
			ws2812_pixel_rgb_to_buf_dma(LED_RPM[i].R, LED_RPM[i].G, LED_RPM[i].B, i);
 8011b46:	89fa      	ldrh	r2, [r7, #14]
 8011b48:	4914      	ldr	r1, [pc, #80]	; (8011b9c <_Z16setup_rpm_ws2812h+0x74>)
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	005b      	lsls	r3, r3, #1
 8011b4e:	4413      	add	r3, r2
 8011b50:	440b      	add	r3, r1
 8011b52:	7818      	ldrb	r0, [r3, #0]
 8011b54:	89fa      	ldrh	r2, [r7, #14]
 8011b56:	4911      	ldr	r1, [pc, #68]	; (8011b9c <_Z16setup_rpm_ws2812h+0x74>)
 8011b58:	4613      	mov	r3, r2
 8011b5a:	005b      	lsls	r3, r3, #1
 8011b5c:	4413      	add	r3, r2
 8011b5e:	440b      	add	r3, r1
 8011b60:	3301      	adds	r3, #1
 8011b62:	781c      	ldrb	r4, [r3, #0]
 8011b64:	89fa      	ldrh	r2, [r7, #14]
 8011b66:	490d      	ldr	r1, [pc, #52]	; (8011b9c <_Z16setup_rpm_ws2812h+0x74>)
 8011b68:	4613      	mov	r3, r2
 8011b6a:	005b      	lsls	r3, r3, #1
 8011b6c:	4413      	add	r3, r2
 8011b6e:	440b      	add	r3, r1
 8011b70:	3302      	adds	r3, #2
 8011b72:	781a      	ldrb	r2, [r3, #0]
 8011b74:	89fb      	ldrh	r3, [r7, #14]
 8011b76:	4621      	mov	r1, r4
 8011b78:	f7ff ff6a 	bl	8011a50 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
 8011b7c:	e005      	b.n	8011b8a <_Z16setup_rpm_ws2812h+0x62>
		else
			ws2812_pixel_rgb_to_buf_dma(0, 0, 0, i);
 8011b7e:	89fb      	ldrh	r3, [r7, #14]
 8011b80:	2200      	movs	r2, #0
 8011b82:	2100      	movs	r1, #0
 8011b84:	2000      	movs	r0, #0
 8011b86:	f7ff ff63 	bl	8011a50 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
	for(uint16_t i = 0; i < LED_COUNT; i++)
 8011b8a:	89fb      	ldrh	r3, [r7, #14]
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	81fb      	strh	r3, [r7, #14]
 8011b90:	e7d1      	b.n	8011b36 <_Z16setup_rpm_ws2812h+0xe>
	}
}
 8011b92:	bf00      	nop
 8011b94:	3714      	adds	r7, #20
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd90      	pop	{r4, r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	2000127c 	.word	0x2000127c

08011ba0 <_Z12setup_ws2812P3RGBh>:

void setup_ws2812(RGB* rgb_array, uint8_t size)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b084      	sub	sp, #16
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	460b      	mov	r3, r1
 8011baa:	70fb      	strb	r3, [r7, #3]
	for(uint16_t i = 0; i < size; i++)
 8011bac:	2300      	movs	r3, #0
 8011bae:	81fb      	strh	r3, [r7, #14]
 8011bb0:	78fb      	ldrb	r3, [r7, #3]
 8011bb2:	b29b      	uxth	r3, r3
 8011bb4:	89fa      	ldrh	r2, [r7, #14]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d21b      	bcs.n	8011bf2 <_Z12setup_ws2812P3RGBh+0x52>
	{
		ws2812_pixel_rgb_to_buf_dma(rgb_array[i].R, rgb_array[i].G, rgb_array[i].B, i);
 8011bba:	89fa      	ldrh	r2, [r7, #14]
 8011bbc:	4613      	mov	r3, r2
 8011bbe:	005b      	lsls	r3, r3, #1
 8011bc0:	4413      	add	r3, r2
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	7818      	ldrb	r0, [r3, #0]
 8011bc8:	89fa      	ldrh	r2, [r7, #14]
 8011bca:	4613      	mov	r3, r2
 8011bcc:	005b      	lsls	r3, r3, #1
 8011bce:	4413      	add	r3, r2
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	4413      	add	r3, r2
 8011bd4:	7859      	ldrb	r1, [r3, #1]
 8011bd6:	89fa      	ldrh	r2, [r7, #14]
 8011bd8:	4613      	mov	r3, r2
 8011bda:	005b      	lsls	r3, r3, #1
 8011bdc:	4413      	add	r3, r2
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	4413      	add	r3, r2
 8011be2:	789a      	ldrb	r2, [r3, #2]
 8011be4:	89fb      	ldrh	r3, [r7, #14]
 8011be6:	f7ff ff33 	bl	8011a50 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
	for(uint16_t i = 0; i < size; i++)
 8011bea:	89fb      	ldrh	r3, [r7, #14]
 8011bec:	3301      	adds	r3, #1
 8011bee:	81fb      	strh	r3, [r7, #14]
 8011bf0:	e7de      	b.n	8011bb0 <_Z12setup_ws2812P3RGBh+0x10>
	}
}
 8011bf2:	bf00      	nop
 8011bf4:	3710      	adds	r7, #16
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
	...

08011bfc <_Z41__static_initialization_and_destruction_0ii>:
 8011bfc:	b480      	push	{r7}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d159      	bne.n	8011cc0 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d154      	bne.n	8011cc0 <_Z41__static_initialization_and_destruction_0ii+0xc4>
};
 8011c16:	4b2d      	ldr	r3, [pc, #180]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c18:	781a      	ldrb	r2, [r3, #0]
 8011c1a:	4b2d      	ldr	r3, [pc, #180]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c1c:	705a      	strb	r2, [r3, #1]
 8011c1e:	4b2b      	ldr	r3, [pc, #172]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c20:	781a      	ldrb	r2, [r3, #0]
 8011c22:	4b2b      	ldr	r3, [pc, #172]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c24:	711a      	strb	r2, [r3, #4]
 8011c26:	4b29      	ldr	r3, [pc, #164]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c28:	781a      	ldrb	r2, [r3, #0]
 8011c2a:	4b29      	ldr	r3, [pc, #164]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c2c:	71da      	strb	r2, [r3, #7]
 8011c2e:	4b27      	ldr	r3, [pc, #156]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c30:	781a      	ldrb	r2, [r3, #0]
 8011c32:	4b27      	ldr	r3, [pc, #156]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c34:	729a      	strb	r2, [r3, #10]
 8011c36:	4b25      	ldr	r3, [pc, #148]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c38:	781a      	ldrb	r2, [r3, #0]
 8011c3a:	4b25      	ldr	r3, [pc, #148]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c3c:	731a      	strb	r2, [r3, #12]
 8011c3e:	4b23      	ldr	r3, [pc, #140]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c40:	781a      	ldrb	r2, [r3, #0]
 8011c42:	4b23      	ldr	r3, [pc, #140]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c44:	735a      	strb	r2, [r3, #13]
 8011c46:	4b21      	ldr	r3, [pc, #132]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c48:	781a      	ldrb	r2, [r3, #0]
 8011c4a:	4b21      	ldr	r3, [pc, #132]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c4c:	73da      	strb	r2, [r3, #15]
 8011c4e:	4b1f      	ldr	r3, [pc, #124]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c50:	781a      	ldrb	r2, [r3, #0]
 8011c52:	4b1f      	ldr	r3, [pc, #124]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c54:	741a      	strb	r2, [r3, #16]
 8011c56:	4b1d      	ldr	r3, [pc, #116]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c58:	781a      	ldrb	r2, [r3, #0]
 8011c5a:	4b1d      	ldr	r3, [pc, #116]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c5c:	749a      	strb	r2, [r3, #18]
 8011c5e:	4b1b      	ldr	r3, [pc, #108]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c60:	781a      	ldrb	r2, [r3, #0]
 8011c62:	4b1b      	ldr	r3, [pc, #108]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c64:	74da      	strb	r2, [r3, #19]
 8011c66:	4b19      	ldr	r3, [pc, #100]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c68:	781a      	ldrb	r2, [r3, #0]
 8011c6a:	4b19      	ldr	r3, [pc, #100]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c6c:	755a      	strb	r2, [r3, #21]
 8011c6e:	4b17      	ldr	r3, [pc, #92]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c70:	781a      	ldrb	r2, [r3, #0]
 8011c72:	4b17      	ldr	r3, [pc, #92]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c74:	759a      	strb	r2, [r3, #22]
 8011c76:	4b15      	ldr	r3, [pc, #84]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c78:	781a      	ldrb	r2, [r3, #0]
 8011c7a:	4b15      	ldr	r3, [pc, #84]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c7c:	761a      	strb	r2, [r3, #24]
 8011c7e:	4b13      	ldr	r3, [pc, #76]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c80:	781a      	ldrb	r2, [r3, #0]
 8011c82:	4b13      	ldr	r3, [pc, #76]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c84:	76da      	strb	r2, [r3, #27]
 8011c86:	4b11      	ldr	r3, [pc, #68]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c88:	781a      	ldrb	r2, [r3, #0]
 8011c8a:	4b11      	ldr	r3, [pc, #68]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c8c:	779a      	strb	r2, [r3, #30]
 8011c8e:	4b0f      	ldr	r3, [pc, #60]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c90:	781a      	ldrb	r2, [r3, #0]
 8011c92:	4b0f      	ldr	r3, [pc, #60]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8011c98:	4b0c      	ldr	r3, [pc, #48]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011c9a:	781a      	ldrb	r2, [r3, #0]
 8011c9c:	4b0c      	ldr	r3, [pc, #48]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011c9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8011ca2:	4b0a      	ldr	r3, [pc, #40]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011ca4:	781a      	ldrb	r2, [r3, #0]
 8011ca6:	4b0a      	ldr	r3, [pc, #40]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011ca8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8011cac:	4b07      	ldr	r3, [pc, #28]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011cae:	781a      	ldrb	r2, [r3, #0]
 8011cb0:	4b07      	ldr	r3, [pc, #28]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011cb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8011cb6:	4b05      	ldr	r3, [pc, #20]	; (8011ccc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8011cb8:	781a      	ldrb	r2, [r3, #0]
 8011cba:	4b05      	ldr	r3, [pc, #20]	; (8011cd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8011cbc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8011cc0:	bf00      	nop
 8011cc2:	370c      	adds	r7, #12
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bc80      	pop	{r7}
 8011cc8:	4770      	bx	lr
 8011cca:	bf00      	nop
 8011ccc:	2000001c 	.word	0x2000001c
 8011cd0:	2000127c 	.word	0x2000127c

08011cd4 <_GLOBAL__sub_I_BUF_DMA>:
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	af00      	add	r7, sp, #0
 8011cd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011cdc:	2001      	movs	r0, #1
 8011cde:	f7ff ff8d 	bl	8011bfc <_Z41__static_initialization_and_destruction_0ii>
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	460b      	mov	r3, r1
 8011cee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	73fb      	strb	r3, [r7, #15]

  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	7c1b      	ldrb	r3, [r3, #16]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d10c      	bne.n	8011d16 <USBD_CDC_Init+0x32>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8011cfc:	2340      	movs	r3, #64	; 0x40
 8011cfe:	2202      	movs	r2, #2
 8011d00:	2181      	movs	r1, #129	; 0x81
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 ff1f 	bl	8012b46 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8011d08:	2340      	movs	r3, #64	; 0x40
 8011d0a:	2202      	movs	r2, #2
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 ff19 	bl	8012b46 <USBD_LL_OpenEP>
 8011d14:	e00b      	b.n	8011d2e <USBD_CDC_Init+0x4a>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8011d16:	2340      	movs	r3, #64	; 0x40
 8011d18:	2202      	movs	r2, #2
 8011d1a:	2181      	movs	r1, #129	; 0x81
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 ff12 	bl	8012b46 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8011d22:	2340      	movs	r3, #64	; 0x40
 8011d24:	2202      	movs	r2, #2
 8011d26:	2101      	movs	r1, #1
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f000 ff0c 	bl	8012b46 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8011d2e:	2308      	movs	r3, #8
 8011d30:	2203      	movs	r2, #3
 8011d32:	2182      	movs	r1, #130	; 0x82
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f000 ff06 	bl	8012b46 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  hcdc = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8011d3a:	205a      	movs	r0, #90	; 0x5a
 8011d3c:	f005 fdc2 	bl	80178c4 <malloc>
 8011d40:	4603      	mov	r3, r0
 8011d42:	461a      	mov	r2, r3
 8011d44:	4b2c      	ldr	r3, [pc, #176]	; (8011df8 <USBD_CDC_Init+0x114>)
 8011d46:	601a      	str	r2, [r3, #0]
  pdev->pClassData = hcdc;
 8011d48:	4b2b      	ldr	r3, [pc, #172]	; (8011df8 <USBD_CDC_Init+0x114>)
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(hcdc == NULL)
 8011d52:	4b29      	ldr	r3, [pc, #164]	; (8011df8 <USBD_CDC_Init+0x114>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d102      	bne.n	8011d60 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	73fb      	strb	r3, [r7, #15]
 8011d5e:	e046      	b.n	8011dee <USBD_CDC_Init+0x10a>
  else
  {

    
    /* Init  physical Interface components */
    fops_cdc_p->Init();
 8011d60:	4b26      	ldr	r3, [pc, #152]	; (8011dfc <USBD_CDC_Init+0x118>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8011d68:	4b23      	ldr	r3, [pc, #140]	; (8011df8 <USBD_CDC_Init+0x114>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8011d70:	2200      	movs	r2, #0
 8011d72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8011d76:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8011d80:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8011d84:	2200      	movs	r2, #0
 8011d86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8011d8a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    hcdc->RxState =0;
 8011d94:	4b18      	ldr	r3, [pc, #96]	; (8011df8 <USBD_CDC_Init+0x114>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8011da2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8011da6:	2200      	movs	r2, #0
 8011da8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8011dac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8011db0:	2200      	movs	r2, #0
 8011db2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8011db6:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	7c1b      	ldrb	r3, [r3, #16]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d109      	bne.n	8011ddc <USBD_CDC_Init+0xf8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8011dc8:	4b0b      	ldr	r3, [pc, #44]	; (8011df8 <USBD_CDC_Init+0x114>)
 8011dca:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8011dcc:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8011dd0:	2340      	movs	r3, #64	; 0x40
 8011dd2:	2101      	movs	r1, #1
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f000 ffa0 	bl	8012d1a <USBD_LL_PrepareReceive>
 8011dda:	e008      	b.n	8011dee <USBD_CDC_Init+0x10a>
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8011ddc:	4b06      	ldr	r3, [pc, #24]	; (8011df8 <USBD_CDC_Init+0x114>)
 8011dde:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8011de0:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8011de4:	2340      	movs	r3, #64	; 0x40
 8011de6:	2101      	movs	r1, #1
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f000 ff96 	bl	8012d1a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8011dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3710      	adds	r7, #16
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	200019b0 	.word	0x200019b0
 8011dfc:	200019b4 	.word	0x200019b4

08011e00 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	460b      	mov	r3, r1
 8011e0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8011e10:	2181      	movs	r1, #129	; 0x81
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f000 febd 	bl	8012b92 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8011e18:	2101      	movs	r1, #1
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 feb9 	bl	8012b92 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8011e20:	2182      	movs	r1, #130	; 0x82
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f000 feb5 	bl	8012b92 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(hcdc != NULL)
 8011e28:	4b0a      	ldr	r3, [pc, #40]	; (8011e54 <USBD_CDC_DeInit+0x54>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00b      	beq.n	8011e48 <USBD_CDC_DeInit+0x48>
  {
    fops_cdc_p->DeInit();
 8011e30:	4b09      	ldr	r3, [pc, #36]	; (8011e58 <USBD_CDC_DeInit+0x58>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	4798      	blx	r3
    USBD_free(hcdc);
 8011e38:	4b06      	ldr	r3, [pc, #24]	; (8011e54 <USBD_CDC_DeInit+0x54>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f005 fd49 	bl	80178d4 <free>
    hcdc = NULL;
 8011e42:	4b04      	ldr	r3, [pc, #16]	; (8011e54 <USBD_CDC_DeInit+0x54>)
 8011e44:	2200      	movs	r2, #0
 8011e46:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8011e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3710      	adds	r7, #16
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	200019b0 	.word	0x200019b0
 8011e58:	200019b4 	.word	0x200019b4

08011e5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]

  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d040      	beq.n	8011ef4 <USBD_CDC_Setup+0x98>
 8011e72:	2b20      	cmp	r3, #32
 8011e74:	d000      	beq.n	8011e78 <USBD_CDC_Setup+0x1c>
*/
	  break;
    }
 
  default: 
    break;
 8011e76:	e04c      	b.n	8011f12 <USBD_CDC_Setup+0xb6>
    if (req->wLength)
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	88db      	ldrh	r3, [r3, #6]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d030      	beq.n	8011ee2 <USBD_CDC_Setup+0x86>
      if (req->bmRequest & 0x80)
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	b25b      	sxtb	r3, r3
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	da14      	bge.n	8011eb4 <USBD_CDC_Setup+0x58>
        fops_cdc_p->Control(req->bRequest, (uint8_t *)hcdc->data,req->wLength);
 8011e8a:	4b25      	ldr	r3, [pc, #148]	; (8011f20 <USBD_CDC_Setup+0xc4>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	689b      	ldr	r3, [r3, #8]
 8011e90:	683a      	ldr	r2, [r7, #0]
 8011e92:	7850      	ldrb	r0, [r2, #1]
 8011e94:	4a23      	ldr	r2, [pc, #140]	; (8011f24 <USBD_CDC_Setup+0xc8>)
 8011e96:	6812      	ldr	r2, [r2, #0]
 8011e98:	4611      	mov	r1, r2
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	88d2      	ldrh	r2, [r2, #6]
 8011e9e:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8011ea0:	4b20      	ldr	r3, [pc, #128]	; (8011f24 <USBD_CDC_Setup+0xc8>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	4619      	mov	r1, r3
          USBD_CtlSendData (pdev, 
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	88db      	ldrh	r3, [r3, #6]
 8011eaa:	461a      	mov	r2, r3
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f002 faa1 	bl	80143f4 <USBD_CtlSendData>
    break;
 8011eb2:	e02f      	b.n	8011f14 <USBD_CDC_Setup+0xb8>
        hcdc->CmdOpCode = req->bRequest;
 8011eb4:	4b1b      	ldr	r3, [pc, #108]	; (8011f24 <USBD_CDC_Setup+0xc8>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	683a      	ldr	r2, [r7, #0]
 8011eba:	7852      	ldrb	r2, [r2, #1]
 8011ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hcdc->CmdLength = req->wLength;
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	88da      	ldrh	r2, [r3, #6]
 8011ec4:	4b17      	ldr	r3, [pc, #92]	; (8011f24 <USBD_CDC_Setup+0xc8>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	b2d2      	uxtb	r2, r2
 8011eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                           (uint8_t *)hcdc->data,
 8011ece:	4b15      	ldr	r3, [pc, #84]	; (8011f24 <USBD_CDC_Setup+0xc8>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	4619      	mov	r1, r3
        USBD_CtlPrepareRx (pdev, 
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	88db      	ldrh	r3, [r3, #6]
 8011ed8:	461a      	mov	r2, r3
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f002 fab8 	bl	8014450 <USBD_CtlPrepareRx>
    break;
 8011ee0:	e018      	b.n	8011f14 <USBD_CDC_Setup+0xb8>
      fops_cdc_p->Control(req->bRequest, (uint8_t*)req,0);
 8011ee2:	4b0f      	ldr	r3, [pc, #60]	; (8011f20 <USBD_CDC_Setup+0xc4>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	689b      	ldr	r3, [r3, #8]
 8011ee8:	683a      	ldr	r2, [r7, #0]
 8011eea:	7850      	ldrb	r0, [r2, #1]
 8011eec:	2200      	movs	r2, #0
 8011eee:	6839      	ldr	r1, [r7, #0]
 8011ef0:	4798      	blx	r3
    break;
 8011ef2:	e00f      	b.n	8011f14 <USBD_CDC_Setup+0xb8>
    switch (req->bRequest)
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	785b      	ldrb	r3, [r3, #1]
 8011ef8:	2b0a      	cmp	r3, #10
 8011efa:	d003      	beq.n	8011f04 <USBD_CDC_Setup+0xa8>
 8011efc:	2b0b      	cmp	r3, #11
 8011efe:	d007      	beq.n	8011f10 <USBD_CDC_Setup+0xb4>
 8011f00:	2b06      	cmp	r3, #6
	  break;
 8011f02:	e006      	b.n	8011f12 <USBD_CDC_Setup+0xb6>
      USBD_CtlSendData (pdev,
 8011f04:	2201      	movs	r2, #1
 8011f06:	4908      	ldr	r1, [pc, #32]	; (8011f28 <USBD_CDC_Setup+0xcc>)
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f002 fa73 	bl	80143f4 <USBD_CtlSendData>
      break;
 8011f0e:	e000      	b.n	8011f12 <USBD_CDC_Setup+0xb6>
      break;
 8011f10:	bf00      	nop
    break;
 8011f12:	bf00      	nop
  }
  return USBD_OK;
 8011f14:	2300      	movs	r3, #0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3708      	adds	r7, #8
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	200019b4 	.word	0x200019b4
 8011f24:	200019b0 	.word	0x200019b0
 8011f28:	200012ac 	.word	0x200012ac

08011f2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	70fb      	strb	r3, [r7, #3]

  
  if(hcdc != NULL)
 8011f38:	4b10      	ldr	r3, [pc, #64]	; (8011f7c <USBD_CDC_DataIn+0x50>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d017      	beq.n	8011f70 <USBD_CDC_DataIn+0x44>
  {
    
    hcdc->TxState = 0;
 8011f40:	4b0e      	ldr	r3, [pc, #56]	; (8011f7c <USBD_CDC_DataIn+0x50>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8011f4e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8011f52:	2200      	movs	r2, #0
 8011f54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8011f58:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8011f62:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8011f66:	2200      	movs	r2, #0
 8011f68:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    return USBD_OK;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	e000      	b.n	8011f72 <USBD_CDC_DataIn+0x46>
  }
  else
  {
    return USBD_FAIL;
 8011f70:	2302      	movs	r3, #2
  }
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	370c      	adds	r7, #12
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bc80      	pop	{r7}
 8011f7a:	4770      	bx	lr
 8011f7c:	200019b0 	.word	0x200019b0

08011f80 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8011f80:	b590      	push	{r4, r7, lr}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	460b      	mov	r3, r1
 8011f8a:	70fb      	strb	r3, [r7, #3]

  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8011f8c:	4b10      	ldr	r3, [pc, #64]	; (8011fd0 <USBD_CDC_DataOut+0x50>)
 8011f8e:	681c      	ldr	r4, [r3, #0]
 8011f90:	78fb      	ldrb	r3, [r7, #3]
 8011f92:	4619      	mov	r1, r3
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f000 fee3 	bl	8012d60 <USBD_LL_GetRxDataSize>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	f8c4 304a 	str.w	r3, [r4, #74]	; 0x4a
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(hcdc != NULL)
 8011fa0:	4b0b      	ldr	r3, [pc, #44]	; (8011fd0 <USBD_CDC_DataOut+0x50>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d00d      	beq.n	8011fc4 <USBD_CDC_DataOut+0x44>
  {
    fops_cdc_p->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011fa8:	4b0a      	ldr	r3, [pc, #40]	; (8011fd4 <USBD_CDC_DataOut+0x54>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	4a08      	ldr	r2, [pc, #32]	; (8011fd0 <USBD_CDC_DataOut+0x50>)
 8011fb0:	6812      	ldr	r2, [r2, #0]
 8011fb2:	f8d2 0042 	ldr.w	r0, [r2, #66]	; 0x42
 8011fb6:	4a06      	ldr	r2, [pc, #24]	; (8011fd0 <USBD_CDC_DataOut+0x50>)
 8011fb8:	6812      	ldr	r2, [r2, #0]
 8011fba:	324a      	adds	r2, #74	; 0x4a
 8011fbc:	4611      	mov	r1, r2
 8011fbe:	4798      	blx	r3

    return USBD_OK;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	e000      	b.n	8011fc6 <USBD_CDC_DataOut+0x46>
  }
  else
  {
    return USBD_FAIL;
 8011fc4:	2302      	movs	r3, #2
  }
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	370c      	adds	r7, #12
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd90      	pop	{r4, r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	200019b0 	.word	0x200019b0
 8011fd4:	200019b4 	.word	0x200019b4

08011fd8 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]

  
  if((fops_cdc_p != NULL) && (hcdc->CmdOpCode != 0xFF))
 8011fe0:	4b11      	ldr	r3, [pc, #68]	; (8012028 <USBD_CDC_EP0_RxReady+0x50>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d01a      	beq.n	801201e <USBD_CDC_EP0_RxReady+0x46>
 8011fe8:	4b10      	ldr	r3, [pc, #64]	; (801202c <USBD_CDC_EP0_RxReady+0x54>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ff0:	2bff      	cmp	r3, #255	; 0xff
 8011ff2:	d014      	beq.n	801201e <USBD_CDC_EP0_RxReady+0x46>
  {
    fops_cdc_p->Control(hcdc->CmdOpCode,
 8011ff4:	4b0c      	ldr	r3, [pc, #48]	; (8012028 <USBD_CDC_EP0_RxReady+0x50>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	689b      	ldr	r3, [r3, #8]
 8011ffa:	4a0c      	ldr	r2, [pc, #48]	; (801202c <USBD_CDC_EP0_RxReady+0x54>)
 8011ffc:	6812      	ldr	r2, [r2, #0]
 8011ffe:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                      (uint8_t *)hcdc->data,
 8012002:	4a0a      	ldr	r2, [pc, #40]	; (801202c <USBD_CDC_EP0_RxReady+0x54>)
 8012004:	6812      	ldr	r2, [r2, #0]
 8012006:	4611      	mov	r1, r2
                                                      hcdc->CmdLength);
 8012008:	4a08      	ldr	r2, [pc, #32]	; (801202c <USBD_CDC_EP0_RxReady+0x54>)
 801200a:	6812      	ldr	r2, [r2, #0]
 801200c:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    fops_cdc_p->Control(hcdc->CmdOpCode,
 8012010:	b292      	uxth	r2, r2
 8012012:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8012014:	4b05      	ldr	r3, [pc, #20]	; (801202c <USBD_CDC_EP0_RxReady+0x54>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	22ff      	movs	r2, #255	; 0xff
 801201a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
  }
  return USBD_OK;
 801201e:	2300      	movs	r3, #0
}
 8012020:	4618      	mov	r0, r3
 8012022:	3708      	adds	r7, #8
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	200019b4 	.word	0x200019b4
 801202c:	200019b0 	.word	0x200019b0

08012030 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	224b      	movs	r2, #75	; 0x4b
 801203c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801203e:	4b03      	ldr	r3, [pc, #12]	; (801204c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012040:	4618      	mov	r0, r3
 8012042:	370c      	adds	r7, #12
 8012044:	46bd      	mov	sp, r7
 8012046:	bc80      	pop	{r7}
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	20000064 	.word	0x20000064

08012050 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	224b      	movs	r2, #75	; 0x4b
 801205c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801205e:	4b03      	ldr	r3, [pc, #12]	; (801206c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012060:	4618      	mov	r0, r3
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	bc80      	pop	{r7}
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	20000064 	.word	0x20000064

08012070 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8012070:	b480      	push	{r7}
 8012072:	b083      	sub	sp, #12
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	224b      	movs	r2, #75	; 0x4b
 801207c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801207e:	4b03      	ldr	r3, [pc, #12]	; (801208c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012080:	4618      	mov	r0, r3
 8012082:	370c      	adds	r7, #12
 8012084:	46bd      	mov	sp, r7
 8012086:	bc80      	pop	{r7}
 8012088:	4770      	bx	lr
 801208a:	bf00      	nop
 801208c:	20000064 	.word	0x20000064

08012090 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	220a      	movs	r2, #10
 801209c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801209e:	4b03      	ldr	r3, [pc, #12]	; (80120ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	370c      	adds	r7, #12
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bc80      	pop	{r7}
 80120a8:	4770      	bx	lr
 80120aa:	bf00      	nop
 80120ac:	20000020 	.word	0x20000020

080120b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80120b0:	b480      	push	{r7}
 80120b2:	b085      	sub	sp, #20
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80120ba:	2302      	movs	r3, #2
 80120bc:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d008      	beq.n	80120d6 <USBD_CDC_RegisterInterface+0x26>
  {
    fops_cdc_p= fops;
 80120c4:	4a07      	ldr	r2, [pc, #28]	; (80120e4 <USBD_CDC_RegisterInterface+0x34>)
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	6013      	str	r3, [r2, #0]
    pdev->pUserData = fops;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	683a      	ldr	r2, [r7, #0]
 80120ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80120d2:	2300      	movs	r3, #0
 80120d4:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80120d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80120d8:	4618      	mov	r0, r3
 80120da:	3714      	adds	r7, #20
 80120dc:	46bd      	mov	sp, r7
 80120de:	bc80      	pop	{r7}
 80120e0:	4770      	bx	lr
 80120e2:	bf00      	nop
 80120e4:	200019b4 	.word	0x200019b4

080120e8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b085      	sub	sp, #20
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	60b9      	str	r1, [r7, #8]
 80120f2:	4613      	mov	r3, r2
 80120f4:	80fb      	strh	r3, [r7, #6]

  
  hcdc->TxBuffer = pbuff;
 80120f6:	4b08      	ldr	r3, [pc, #32]	; (8012118 <USBD_CDC_SetTxBuffer+0x30>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	68ba      	ldr	r2, [r7, #8]
 80120fc:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46
  hcdc->TxLength = length;  
 8012100:	4b05      	ldr	r3, [pc, #20]	; (8012118 <USBD_CDC_SetTxBuffer+0x30>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	88fa      	ldrh	r2, [r7, #6]
 8012106:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
  
  return USBD_OK;  
 801210a:	2300      	movs	r3, #0
}
 801210c:	4618      	mov	r0, r3
 801210e:	3714      	adds	r7, #20
 8012110:	46bd      	mov	sp, r7
 8012112:	bc80      	pop	{r7}
 8012114:	4770      	bx	lr
 8012116:	bf00      	nop
 8012118:	200019b0 	.word	0x200019b0

0801211c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 801211c:	b480      	push	{r7}
 801211e:	b083      	sub	sp, #12
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6039      	str	r1, [r7, #0]
  
  hcdc->RxBuffer = pbuff;
 8012126:	4b05      	ldr	r3, [pc, #20]	; (801213c <USBD_CDC_SetRxBuffer+0x20>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	683a      	ldr	r2, [r7, #0]
 801212c:	f8c3 2042 	str.w	r2, [r3, #66]	; 0x42
  
  return USBD_OK;
 8012130:	2300      	movs	r3, #0
}
 8012132:	4618      	mov	r0, r3
 8012134:	370c      	adds	r7, #12
 8012136:	46bd      	mov	sp, r7
 8012138:	bc80      	pop	{r7}
 801213a:	4770      	bx	lr
 801213c:	200019b0 	.word	0x200019b0

08012140 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]

  if(hcdc != NULL)
 8012148:	4b1b      	ldr	r3, [pc, #108]	; (80121b8 <USBD_CDC_TransmitPacket+0x78>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d02e      	beq.n	80121ae <USBD_CDC_TransmitPacket+0x6e>
  {
    if(hcdc->TxState == 0)
 8012150:	4b19      	ldr	r3, [pc, #100]	; (80121b8 <USBD_CDC_TransmitPacket+0x78>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 8012158:	2b00      	cmp	r3, #0
 801215a:	d126      	bne.n	80121aa <USBD_CDC_TransmitPacket+0x6a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 801215c:	4b16      	ldr	r3, [pc, #88]	; (80121b8 <USBD_CDC_TransmitPacket+0x78>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8012164:	2200      	movs	r2, #0
 8012166:	f042 0201 	orr.w	r2, r2, #1
 801216a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 801216e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8012172:	2200      	movs	r2, #0
 8012174:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012178:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801217c:	2200      	movs	r2, #0
 801217e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012182:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8012186:	2200      	movs	r2, #0
 8012188:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
                       CDC_IN_EP,
                       hcdc->TxBuffer,
 801218c:	4b0a      	ldr	r3, [pc, #40]	; (80121b8 <USBD_CDC_TransmitPacket+0x78>)
 801218e:	681b      	ldr	r3, [r3, #0]
      USBD_LL_Transmit(pdev,
 8012190:	f8d3 2046 	ldr.w	r2, [r3, #70]	; 0x46
                       hcdc->TxLength);
 8012194:	4b08      	ldr	r3, [pc, #32]	; (80121b8 <USBD_CDC_TransmitPacket+0x78>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	f8d3 304e 	ldr.w	r3, [r3, #78]	; 0x4e
      USBD_LL_Transmit(pdev,
 801219c:	b29b      	uxth	r3, r3
 801219e:	2181      	movs	r1, #129	; 0x81
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 fd97 	bl	8012cd4 <USBD_LL_Transmit>
      
      return USBD_OK;
 80121a6:	2300      	movs	r3, #0
 80121a8:	e002      	b.n	80121b0 <USBD_CDC_TransmitPacket+0x70>
    }
    else
    {

      return USBD_BUSY;
 80121aa:	2301      	movs	r3, #1
 80121ac:	e000      	b.n	80121b0 <USBD_CDC_TransmitPacket+0x70>
    }
  }
  else
  {
    return USBD_FAIL;
 80121ae:	2302      	movs	r3, #2
  }
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	200019b0 	.word	0x200019b0

080121bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]

  
  /* Suspend or Resume USB Out process */
  if(hcdc != NULL)
 80121c4:	4b10      	ldr	r3, [pc, #64]	; (8012208 <USBD_CDC_ReceivePacket+0x4c>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d018      	beq.n	80121fe <USBD_CDC_ReceivePacket+0x42>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	7c1b      	ldrb	r3, [r3, #16]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d109      	bne.n	80121e8 <USBD_CDC_ReceivePacket+0x2c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 80121d4:	4b0c      	ldr	r3, [pc, #48]	; (8012208 <USBD_CDC_ReceivePacket+0x4c>)
 80121d6:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 80121d8:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 80121dc:	2340      	movs	r3, #64	; 0x40
 80121de:	2101      	movs	r1, #1
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 fd9a 	bl	8012d1a <USBD_LL_PrepareReceive>
 80121e6:	e008      	b.n	80121fa <USBD_CDC_ReceivePacket+0x3e>
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 80121e8:	4b07      	ldr	r3, [pc, #28]	; (8012208 <USBD_CDC_ReceivePacket+0x4c>)
 80121ea:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 80121ec:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 80121f0:	2340      	movs	r3, #64	; 0x40
 80121f2:	2101      	movs	r1, #1
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 fd90 	bl	8012d1a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80121fa:	2300      	movs	r3, #0
 80121fc:	e000      	b.n	8012200 <USBD_CDC_ReceivePacket+0x44>
  }
  else
  {
    return USBD_FAIL;
 80121fe:	2302      	movs	r3, #2
  }
}
 8012200:	4618      	mov	r0, r3
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	200019b0 	.word	0x200019b0

0801220c <CDC_Init_FS>:
  CDC_Receive_FS
};


static int8_t CDC_Init_FS(void)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012210:	2200      	movs	r2, #0
 8012212:	4905      	ldr	r1, [pc, #20]	; (8012228 <CDC_Init_FS+0x1c>)
 8012214:	4805      	ldr	r0, [pc, #20]	; (801222c <CDC_Init_FS+0x20>)
 8012216:	f7ff ff67 	bl	80120e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801221a:	4905      	ldr	r1, [pc, #20]	; (8012230 <CDC_Init_FS+0x24>)
 801221c:	4803      	ldr	r0, [pc, #12]	; (801222c <CDC_Init_FS+0x20>)
 801221e:	f7ff ff7d 	bl	801211c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012222:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012224:	4618      	mov	r0, r3
 8012226:	bd80      	pop	{r7, pc}
 8012228:	200012f0 	.word	0x200012f0
 801222c:	20000918 	.word	0x20000918
 8012230:	200012b0 	.word	0x200012b0

08012234 <CDC_DeInit_FS>:


static int8_t CDC_DeInit_FS(void)
{
 8012234:	b480      	push	{r7}
 8012236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012238:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801223a:	4618      	mov	r0, r3
 801223c:	46bd      	mov	sp, r7
 801223e:	bc80      	pop	{r7}
 8012240:	4770      	bx	lr
	...

08012244 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012244:	b480      	push	{r7}
 8012246:	b085      	sub	sp, #20
 8012248:	af00      	add	r7, sp, #0
 801224a:	4603      	mov	r3, r0
 801224c:	6039      	str	r1, [r7, #0]
 801224e:	71fb      	strb	r3, [r7, #7]
 8012250:	4613      	mov	r3, r2
 8012252:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012254:	79fb      	ldrb	r3, [r7, #7]
 8012256:	2b23      	cmp	r3, #35	; 0x23
 8012258:	d867      	bhi.n	801232a <CDC_Control_FS+0xe6>
 801225a:	a201      	add	r2, pc, #4	; (adr r2, 8012260 <CDC_Control_FS+0x1c>)
 801225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012260:	0801232b 	.word	0x0801232b
 8012264:	0801232b 	.word	0x0801232b
 8012268:	0801232b 	.word	0x0801232b
 801226c:	0801232b 	.word	0x0801232b
 8012270:	0801232b 	.word	0x0801232b
 8012274:	0801232b 	.word	0x0801232b
 8012278:	0801232b 	.word	0x0801232b
 801227c:	0801232b 	.word	0x0801232b
 8012280:	0801232b 	.word	0x0801232b
 8012284:	0801232b 	.word	0x0801232b
 8012288:	0801232b 	.word	0x0801232b
 801228c:	0801232b 	.word	0x0801232b
 8012290:	0801232b 	.word	0x0801232b
 8012294:	0801232b 	.word	0x0801232b
 8012298:	0801232b 	.word	0x0801232b
 801229c:	0801232b 	.word	0x0801232b
 80122a0:	0801232b 	.word	0x0801232b
 80122a4:	0801232b 	.word	0x0801232b
 80122a8:	0801232b 	.word	0x0801232b
 80122ac:	0801232b 	.word	0x0801232b
 80122b0:	0801232b 	.word	0x0801232b
 80122b4:	0801232b 	.word	0x0801232b
 80122b8:	0801232b 	.word	0x0801232b
 80122bc:	0801232b 	.word	0x0801232b
 80122c0:	0801232b 	.word	0x0801232b
 80122c4:	0801232b 	.word	0x0801232b
 80122c8:	0801232b 	.word	0x0801232b
 80122cc:	0801232b 	.word	0x0801232b
 80122d0:	0801232b 	.word	0x0801232b
 80122d4:	0801232b 	.word	0x0801232b
 80122d8:	0801232b 	.word	0x0801232b
 80122dc:	0801232b 	.word	0x0801232b
 80122e0:	080122f1 	.word	0x080122f1
 80122e4:	08012303 	.word	0x08012303
 80122e8:	08012315 	.word	0x08012315
 80122ec:	0801232b 	.word	0x0801232b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&line_coding,pbuf,sizeof(USBD_CDC_LineCodingTypeDef));
 80122f0:	4b11      	ldr	r3, [pc, #68]	; (8012338 <CDC_Control_FS+0xf4>)
 80122f2:	683a      	ldr	r2, [r7, #0]
 80122f4:	6811      	ldr	r1, [r2, #0]
 80122f6:	6019      	str	r1, [r3, #0]
 80122f8:	8891      	ldrh	r1, [r2, #4]
 80122fa:	7992      	ldrb	r2, [r2, #6]
 80122fc:	8099      	strh	r1, [r3, #4]
 80122fe:	719a      	strb	r2, [r3, #6]
	break;
 8012300:	e014      	b.n	801232c <CDC_Control_FS+0xe8>

    case CDC_GET_LINE_CODING:
	    memcpy(pbuf,&line_coding,sizeof(USBD_CDC_LineCodingTypeDef));
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	4a0c      	ldr	r2, [pc, #48]	; (8012338 <CDC_Control_FS+0xf4>)
 8012306:	6811      	ldr	r1, [r2, #0]
 8012308:	6019      	str	r1, [r3, #0]
 801230a:	8891      	ldrh	r1, [r2, #4]
 801230c:	7992      	ldrb	r2, [r2, #6]
 801230e:	8099      	strh	r1, [r3, #4]
 8012310:	719a      	strb	r2, [r3, #6]
	break;
 8012312:	e00b      	b.n	801232c <CDC_Control_FS+0xe8>

    case CDC_SET_CONTROL_LINE_STATE:
    {
    	// DTR
    	USBD_SetupReqTypedef* req = (USBD_SetupReqTypedef*)pbuf;
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	60fb      	str	r3, [r7, #12]
    	cdc_dtr = (req->wValue & 0x0001);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	885b      	ldrh	r3, [r3, #2]
 801231c:	b2db      	uxtb	r3, r3
 801231e:	f003 0301 	and.w	r3, r3, #1
 8012322:	b2da      	uxtb	r2, r3
 8012324:	4b05      	ldr	r3, [pc, #20]	; (801233c <CDC_Control_FS+0xf8>)
 8012326:	701a      	strb	r2, [r3, #0]
    }
    break;
 8012328:	e000      	b.n	801232c <CDC_Control_FS+0xe8>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801232a:	bf00      	nop
  }

  return (USBD_OK);
 801232c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801232e:	4618      	mov	r0, r3
 8012330:	3714      	adds	r7, #20
 8012332:	46bd      	mov	sp, r7
 8012334:	bc80      	pop	{r7}
 8012336:	4770      	bx	lr
 8012338:	200019b8 	.word	0x200019b8
 801233c:	200014f0 	.word	0x200014f0

08012340 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  //memcpy(Buf,UserRxBufferFS, length);
	//_write(0,(char*)UserRxBufferFS,*Len);
  CDC_Callback(Buf, Len);
 801234a:	6839      	ldr	r1, [r7, #0]
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f7fe ffc3 	bl	80112d8 <CDC_Callback>
  //CDC_Transmit_FS(UserRxBufferFS, *Len); //ECHO

	// Prepare next receive
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS); //next buffer
 8012352:	4906      	ldr	r1, [pc, #24]	; (801236c <CDC_Receive_FS+0x2c>)
 8012354:	4806      	ldr	r0, [pc, #24]	; (8012370 <CDC_Receive_FS+0x30>)
 8012356:	f7ff fee1 	bl	801211c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801235a:	4805      	ldr	r0, [pc, #20]	; (8012370 <CDC_Receive_FS+0x30>)
 801235c:	f7ff ff2e 	bl	80121bc <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 8012360:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012362:	4618      	mov	r0, r3
 8012364:	3708      	adds	r7, #8
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	200012b0 	.word	0x200012b0
 8012370:	20000918 	.word	0x20000918

08012374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(const char* Buf, uint16_t Len)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	460b      	mov	r3, r1
 801237e:	807b      	strh	r3, [r7, #2]

  /* USER CODE BEGIN 7 */
  if(hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8012380:	4b13      	ldr	r3, [pc, #76]	; (80123d0 <CDC_Transmit_FS+0x5c>)
 8012382:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8012386:	2b03      	cmp	r3, #3
 8012388:	d001      	beq.n	801238e <CDC_Transmit_FS+0x1a>
	  return USBD_FAIL;
 801238a:	2302      	movs	r3, #2
 801238c:	e01c      	b.n	80123c8 <CDC_Transmit_FS+0x54>
  uint8_t result = USBD_OK;
 801238e:	2300      	movs	r3, #0
 8012390:	73fb      	strb	r3, [r7, #15]
  uint32_t size = sizeof(uint8_t) * Len;
 8012392:	887b      	ldrh	r3, [r7, #2]
 8012394:	60bb      	str	r3, [r7, #8]
//  uint32_t additional_length = 0;

//  if(hcdc->TxState != 0)
//	  additional_length = hcdc->TxLength;

  size = size < APP_TX_DATA_SIZE ? size : APP_TX_DATA_SIZE;
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801239c:	bf28      	it	cs
 801239e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80123a2:	60bb      	str	r3, [r7, #8]

  memcpy(UserTxBufferFS, Buf, size);
 80123a4:	68ba      	ldr	r2, [r7, #8]
 80123a6:	6879      	ldr	r1, [r7, #4]
 80123a8:	480a      	ldr	r0, [pc, #40]	; (80123d4 <CDC_Transmit_FS+0x60>)
 80123aa:	f005 fab8 	bl	801791e <memcpy>


  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, size);
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	461a      	mov	r2, r3
 80123b4:	4907      	ldr	r1, [pc, #28]	; (80123d4 <CDC_Transmit_FS+0x60>)
 80123b6:	4806      	ldr	r0, [pc, #24]	; (80123d0 <CDC_Transmit_FS+0x5c>)
 80123b8:	f7ff fe96 	bl	80120e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80123bc:	4804      	ldr	r0, [pc, #16]	; (80123d0 <CDC_Transmit_FS+0x5c>)
 80123be:	f7ff febf 	bl	8012140 <USBD_CDC_TransmitPacket>
 80123c2:	4603      	mov	r3, r0
 80123c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80123c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3710      	adds	r7, #16
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	20000918 	.word	0x20000918
 80123d4:	200012f0 	.word	0x200012f0

080123d8 <USBD_Composite_IsoINIncomplete>:
uint8_t config_descriptor_buf[CONFIG_DESC_BUF_SIZE];

uint16_t descriptor_size;


static uint8_t USBD_Composite_IsoINIncomplete  (USBD_HandleTypeDef *pdev , uint8_t epnum){
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	460b      	mov	r3, r1
 80123e2:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 80123e4:	2300      	movs	r3, #0
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	370c      	adds	r7, #12
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bc80      	pop	{r7}
 80123ee:	4770      	bx	lr

080123f0 <USBD_Composite_IsoOUTIncomplete>:

static uint8_t USBD_Composite_IsoOUTIncomplete  (USBD_HandleTypeDef *pdev , uint8_t epnum){
 80123f0:	b480      	push	{r7}
 80123f2:	b083      	sub	sp, #12
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	460b      	mov	r3, r1
 80123fa:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 80123fc:	2300      	movs	r3, #0
}
 80123fe:	4618      	mov	r0, r3
 8012400:	370c      	adds	r7, #12
 8012402:	46bd      	mov	sp, r7
 8012404:	bc80      	pop	{r7}
 8012406:	4770      	bx	lr

08012408 <USBD_Composite_SOF>:
static uint8_t  USBD_Composite_SOF (USBD_HandleTypeDef *pdev){
 8012408:	b580      	push	{r7, lr}
 801240a:	b084      	sub	sp, #16
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
	for(int cls = 0; cls < classes; cls++) {
 8012410:	2300      	movs	r3, #0
 8012412:	60fb      	str	r3, [r7, #12]
 8012414:	e010      	b.n	8012438 <USBD_Composite_SOF+0x30>
		if(USBD_Classes[cls]->SOF){
 8012416:	4a0e      	ldr	r2, [pc, #56]	; (8012450 <USBD_Composite_SOF+0x48>)
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801241e:	69db      	ldr	r3, [r3, #28]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d006      	beq.n	8012432 <USBD_Composite_SOF+0x2a>
			USBD_Classes[cls]->SOF(pdev);
 8012424:	4a0a      	ldr	r2, [pc, #40]	; (8012450 <USBD_Composite_SOF+0x48>)
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801242c:	69db      	ldr	r3, [r3, #28]
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	4798      	blx	r3
	for(int cls = 0; cls < classes; cls++) {
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	3301      	adds	r3, #1
 8012436:	60fb      	str	r3, [r7, #12]
 8012438:	4b06      	ldr	r3, [pc, #24]	; (8012454 <USBD_Composite_SOF+0x4c>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	68fa      	ldr	r2, [r7, #12]
 801243e:	429a      	cmp	r2, r3
 8012440:	dbe9      	blt.n	8012416 <USBD_Composite_SOF+0xe>
		}
	}
	USB_SOF();
 8012442:	f7fe ff9d 	bl	8011380 <USB_SOF>
	return USBD_OK;
 8012446:	2300      	movs	r3, #0
}
 8012448:	4618      	mov	r0, r3
 801244a:	3710      	adds	r7, #16
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	200014f8 	.word	0x200014f8
 8012454:	200014f4 	.word	0x200014f4

08012458 <USBD_Composite_EPIN_To_Class>:

void USBD_Composite_EPIN_To_Class(uint8_t ep,uint8_t classid){
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	4603      	mov	r3, r0
 8012460:	460a      	mov	r2, r1
 8012462:	71fb      	strb	r3, [r7, #7]
 8012464:	4613      	mov	r3, r2
 8012466:	71bb      	strb	r3, [r7, #6]
	in_endpoint_to_class[ep & 0x7F] = classid;
 8012468:	79fb      	ldrb	r3, [r7, #7]
 801246a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801246e:	79ba      	ldrb	r2, [r7, #6]
 8012470:	4903      	ldr	r1, [pc, #12]	; (8012480 <USBD_Composite_EPIN_To_Class+0x28>)
 8012472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012476:	bf00      	nop
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	bc80      	pop	{r7}
 801247e:	4770      	bx	lr
 8012480:	20001f60 	.word	0x20001f60

08012484 <USBD_Composite_EPOUT_To_Class>:

void USBD_Composite_EPOUT_To_Class(uint8_t ep,uint8_t classid){
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
 801248a:	4603      	mov	r3, r0
 801248c:	460a      	mov	r2, r1
 801248e:	71fb      	strb	r3, [r7, #7]
 8012490:	4613      	mov	r3, r2
 8012492:	71bb      	strb	r3, [r7, #6]
	out_endpoint_to_class[ep & 0x7F] = classid;
 8012494:	79fb      	ldrb	r3, [r7, #7]
 8012496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801249a:	79ba      	ldrb	r2, [r7, #6]
 801249c:	4903      	ldr	r1, [pc, #12]	; (80124ac <USBD_Composite_EPOUT_To_Class+0x28>)
 801249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80124a2:	bf00      	nop
 80124a4:	370c      	adds	r7, #12
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bc80      	pop	{r7}
 80124aa:	4770      	bx	lr
 80124ac:	20001f20 	.word	0x20001f20

080124b0 <USBD_InitCompositeDescriptor>:
void USBD_Composite_Set_Descriptor(uint8_t *descriptor, uint16_t size) {
    config_descriptor = descriptor;
    descriptor_size = size;
}

void USBD_InitCompositeDescriptor(USB_ConfigDescType* base_desc){
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0;i<CONFIG_DESC_BUF_SIZE;i++){
 80124b8:	2300      	movs	r3, #0
 80124ba:	81fb      	strh	r3, [r7, #14]
 80124bc:	e006      	b.n	80124cc <USBD_InitCompositeDescriptor+0x1c>
		config_descriptor_buf[i] = 0;
 80124be:	89fb      	ldrh	r3, [r7, #14]
 80124c0:	4a0b      	ldr	r2, [pc, #44]	; (80124f0 <USBD_InitCompositeDescriptor+0x40>)
 80124c2:	2100      	movs	r1, #0
 80124c4:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i<CONFIG_DESC_BUF_SIZE;i++){
 80124c6:	89fb      	ldrh	r3, [r7, #14]
 80124c8:	3301      	adds	r3, #1
 80124ca:	81fb      	strh	r3, [r7, #14]
 80124cc:	89fb      	ldrh	r3, [r7, #14]
 80124ce:	2bff      	cmp	r3, #255	; 0xff
 80124d0:	d9f5      	bls.n	80124be <USBD_InitCompositeDescriptor+0xe>
	}
	memcpy(config_descriptor_buf,base_desc,sizeof(USB_ConfigDescType));
 80124d2:	2209      	movs	r2, #9
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	4806      	ldr	r0, [pc, #24]	; (80124f0 <USBD_InitCompositeDescriptor+0x40>)
 80124d8:	f005 fa21 	bl	801791e <memcpy>
	descriptor_size = sizeof(USB_ConfigDescType);
 80124dc:	4b05      	ldr	r3, [pc, #20]	; (80124f4 <USBD_InitCompositeDescriptor+0x44>)
 80124de:	2209      	movs	r2, #9
 80124e0:	801a      	strh	r2, [r3, #0]
	config_descriptor = (uint8_t*)&config_descriptor_buf;
 80124e2:	4b05      	ldr	r3, [pc, #20]	; (80124f8 <USBD_InitCompositeDescriptor+0x48>)
 80124e4:	4a02      	ldr	r2, [pc, #8]	; (80124f0 <USBD_InitCompositeDescriptor+0x40>)
 80124e6:	601a      	str	r2, [r3, #0]
}
 80124e8:	bf00      	nop
 80124ea:	3710      	adds	r7, #16
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	20001e20 	.word	0x20001e20
 80124f4:	200019c0 	.word	0x200019c0
 80124f8:	200019c4 	.word	0x200019c4

080124fc <USBD_AddToCompositeDescriptor>:

void USBD_AddToCompositeDescriptor(uint8_t* dev, uint16_t len){
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b084      	sub	sp, #16
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	460b      	mov	r3, r1
 8012506:	807b      	strh	r3, [r7, #2]
	uint16_t len_base = *dev; // first element contains size of header
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	81fb      	strh	r3, [r7, #14]
	memcpy(&config_descriptor_buf[descriptor_size],dev+len_base,len-len_base);
 801250e:	4b0e      	ldr	r3, [pc, #56]	; (8012548 <USBD_AddToCompositeDescriptor+0x4c>)
 8012510:	881b      	ldrh	r3, [r3, #0]
 8012512:	461a      	mov	r2, r3
 8012514:	4b0d      	ldr	r3, [pc, #52]	; (801254c <USBD_AddToCompositeDescriptor+0x50>)
 8012516:	18d0      	adds	r0, r2, r3
 8012518:	89fb      	ldrh	r3, [r7, #14]
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	18d1      	adds	r1, r2, r3
 801251e:	887a      	ldrh	r2, [r7, #2]
 8012520:	89fb      	ldrh	r3, [r7, #14]
 8012522:	1ad3      	subs	r3, r2, r3
 8012524:	461a      	mov	r2, r3
 8012526:	f005 f9fa 	bl	801791e <memcpy>
	descriptor_size+=len-len_base;
 801252a:	887a      	ldrh	r2, [r7, #2]
 801252c:	89fb      	ldrh	r3, [r7, #14]
 801252e:	1ad3      	subs	r3, r2, r3
 8012530:	b29a      	uxth	r2, r3
 8012532:	4b05      	ldr	r3, [pc, #20]	; (8012548 <USBD_AddToCompositeDescriptor+0x4c>)
 8012534:	881b      	ldrh	r3, [r3, #0]
 8012536:	4413      	add	r3, r2
 8012538:	b29a      	uxth	r2, r3
 801253a:	4b03      	ldr	r3, [pc, #12]	; (8012548 <USBD_AddToCompositeDescriptor+0x4c>)
 801253c:	801a      	strh	r2, [r3, #0]
}
 801253e:	bf00      	nop
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	200019c0 	.word	0x200019c0
 801254c:	20001e20 	.word	0x20001e20

08012550 <USBD_Composite_Set_Classes>:


void USBD_Composite_Set_Classes(USBD_ClassTypeDef* class[],uint8_t num,USB_ConfigDescType* base_desc) {
 8012550:	b580      	push	{r7, lr}
 8012552:	b088      	sub	sp, #32
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	460b      	mov	r3, r1
 801255a:	607a      	str	r2, [r7, #4]
 801255c:	72fb      	strb	r3, [r7, #11]
	uint16_t size = 0;
 801255e:	2300      	movs	r3, #0
 8012560:	83fb      	strh	r3, [r7, #30]
	// Count length of descriptors
	for(uint8_t i = 0;i<num;i++){
 8012562:	2300      	movs	r3, #0
 8012564:	777b      	strb	r3, [r7, #29]
 8012566:	e018      	b.n	801259a <USBD_Composite_Set_Classes+0x4a>
		uint16_t ts = 0;
 8012568:	2300      	movs	r3, #0
 801256a:	827b      	strh	r3, [r7, #18]
		uint8_t* d = class[i]->GetFSConfigDescriptor(&ts);
 801256c:	7f7b      	ldrb	r3, [r7, #29]
 801256e:	009b      	lsls	r3, r3, #2
 8012570:	68fa      	ldr	r2, [r7, #12]
 8012572:	4413      	add	r3, r2
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012578:	f107 0212 	add.w	r2, r7, #18
 801257c:	4610      	mov	r0, r2
 801257e:	4798      	blx	r3
 8012580:	6178      	str	r0, [r7, #20]
		size += (ts - *d);
 8012582:	8a7a      	ldrh	r2, [r7, #18]
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	b29b      	uxth	r3, r3
 801258a:	1ad3      	subs	r3, r2, r3
 801258c:	b29a      	uxth	r2, r3
 801258e:	8bfb      	ldrh	r3, [r7, #30]
 8012590:	4413      	add	r3, r2
 8012592:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 0;i<num;i++){
 8012594:	7f7b      	ldrb	r3, [r7, #29]
 8012596:	3301      	adds	r3, #1
 8012598:	777b      	strb	r3, [r7, #29]
 801259a:	7f7a      	ldrb	r2, [r7, #29]
 801259c:	7afb      	ldrb	r3, [r7, #11]
 801259e:	429a      	cmp	r2, r3
 80125a0:	d3e2      	bcc.n	8012568 <USBD_Composite_Set_Classes+0x18>
	}
	// Assign length to base descriptor
	base_desc->wTotalLength = size+sizeof(USB_ConfigDescType);
 80125a2:	8bfb      	ldrh	r3, [r7, #30]
 80125a4:	3309      	adds	r3, #9
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	805a      	strh	r2, [r3, #2]
	USBD_InitCompositeDescriptor(base_desc);
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ff ff7f 	bl	80124b0 <USBD_InitCompositeDescriptor>

	// Copy class descriptors into composite descriptor
	for(uint8_t i = 0;i<num;i++){
 80125b2:	2300      	movs	r3, #0
 80125b4:	773b      	strb	r3, [r7, #28]
 80125b6:	e01c      	b.n	80125f2 <USBD_Composite_Set_Classes+0xa2>
		uint16_t size = 0;
 80125b8:	2300      	movs	r3, #0
 80125ba:	823b      	strh	r3, [r7, #16]
		USBD_Classes[i] = class[i];
 80125bc:	7f3b      	ldrb	r3, [r7, #28]
 80125be:	009b      	lsls	r3, r3, #2
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	441a      	add	r2, r3
 80125c4:	7f3b      	ldrb	r3, [r7, #28]
 80125c6:	6812      	ldr	r2, [r2, #0]
 80125c8:	490f      	ldr	r1, [pc, #60]	; (8012608 <USBD_Composite_Set_Classes+0xb8>)
 80125ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint8_t* desc = USBD_Classes[i]->GetFSConfigDescriptor(&size);
 80125ce:	7f3b      	ldrb	r3, [r7, #28]
 80125d0:	4a0d      	ldr	r2, [pc, #52]	; (8012608 <USBD_Composite_Set_Classes+0xb8>)
 80125d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125d8:	f107 0210 	add.w	r2, r7, #16
 80125dc:	4610      	mov	r0, r2
 80125de:	4798      	blx	r3
 80125e0:	61b8      	str	r0, [r7, #24]
		USBD_AddToCompositeDescriptor(desc, size);
 80125e2:	8a3b      	ldrh	r3, [r7, #16]
 80125e4:	4619      	mov	r1, r3
 80125e6:	69b8      	ldr	r0, [r7, #24]
 80125e8:	f7ff ff88 	bl	80124fc <USBD_AddToCompositeDescriptor>
	for(uint8_t i = 0;i<num;i++){
 80125ec:	7f3b      	ldrb	r3, [r7, #28]
 80125ee:	3301      	adds	r3, #1
 80125f0:	773b      	strb	r3, [r7, #28]
 80125f2:	7f3a      	ldrb	r2, [r7, #28]
 80125f4:	7afb      	ldrb	r3, [r7, #11]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d3de      	bcc.n	80125b8 <USBD_Composite_Set_Classes+0x68>
	}

	classes = num;
 80125fa:	7afb      	ldrb	r3, [r7, #11]
 80125fc:	4a03      	ldr	r2, [pc, #12]	; (801260c <USBD_Composite_Set_Classes+0xbc>)
 80125fe:	6013      	str	r3, [r2, #0]
}
 8012600:	bf00      	nop
 8012602:	3720      	adds	r7, #32
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	200014f8 	.word	0x200014f8
 801260c:	200014f4 	.word	0x200014f4

08012610 <USBD_Composite_Init>:

static uint8_t USBD_Composite_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	460b      	mov	r3, r1
 801261a:	70fb      	strb	r3, [r7, #3]
  for(int cls = 0; cls < classes; cls++) {
 801261c:	2300      	movs	r3, #0
 801261e:	60fb      	str	r3, [r7, #12]
 8012620:	e012      	b.n	8012648 <USBD_Composite_Init+0x38>
	  uint8_t ret = USBD_Classes[cls]->Init(pdev, cfgidx);
 8012622:	4a0e      	ldr	r2, [pc, #56]	; (801265c <USBD_Composite_Init+0x4c>)
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	78fa      	ldrb	r2, [r7, #3]
 801262e:	4611      	mov	r1, r2
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	4798      	blx	r3
 8012634:	4603      	mov	r3, r0
 8012636:	72fb      	strb	r3, [r7, #11]
      if (ret != USBD_OK) {
 8012638:	7afb      	ldrb	r3, [r7, #11]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d001      	beq.n	8012642 <USBD_Composite_Init+0x32>
          return USBD_FAIL;
 801263e:	2302      	movs	r3, #2
 8012640:	e008      	b.n	8012654 <USBD_Composite_Init+0x44>
  for(int cls = 0; cls < classes; cls++) {
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	3301      	adds	r3, #1
 8012646:	60fb      	str	r3, [r7, #12]
 8012648:	4b05      	ldr	r3, [pc, #20]	; (8012660 <USBD_Composite_Init+0x50>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	68fa      	ldr	r2, [r7, #12]
 801264e:	429a      	cmp	r2, r3
 8012650:	dbe7      	blt.n	8012622 <USBD_Composite_Init+0x12>
      }

  }

  return USBD_OK;
 8012652:	2300      	movs	r3, #0
}
 8012654:	4618      	mov	r0, r3
 8012656:	3710      	adds	r7, #16
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}
 801265c:	200014f8 	.word	0x200014f8
 8012660:	200014f4 	.word	0x200014f4

08012664 <USBD_Composite_DeInit>:

static uint8_t  USBD_Composite_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	460b      	mov	r3, r1
 801266e:	70fb      	strb	r3, [r7, #3]
  for(int cls = 0; cls < classes; cls++) {
 8012670:	2300      	movs	r3, #0
 8012672:	60fb      	str	r3, [r7, #12]
 8012674:	e012      	b.n	801269c <USBD_Composite_DeInit+0x38>
	  uint8_t ret = USBD_Classes[cls]->DeInit(pdev, cfgidx);
 8012676:	4a0e      	ldr	r2, [pc, #56]	; (80126b0 <USBD_Composite_DeInit+0x4c>)
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	78fa      	ldrb	r2, [r7, #3]
 8012682:	4611      	mov	r1, r2
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	4798      	blx	r3
 8012688:	4603      	mov	r3, r0
 801268a:	72fb      	strb	r3, [r7, #11]
      if (ret != USBD_OK) {
 801268c:	7afb      	ldrb	r3, [r7, #11]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d001      	beq.n	8012696 <USBD_Composite_DeInit+0x32>
          return USBD_FAIL;
 8012692:	2302      	movs	r3, #2
 8012694:	e008      	b.n	80126a8 <USBD_Composite_DeInit+0x44>
  for(int cls = 0; cls < classes; cls++) {
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	3301      	adds	r3, #1
 801269a:	60fb      	str	r3, [r7, #12]
 801269c:	4b05      	ldr	r3, [pc, #20]	; (80126b4 <USBD_Composite_DeInit+0x50>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	dbe7      	blt.n	8012676 <USBD_Composite_DeInit+0x12>
      }
  }

  return USBD_OK;
 80126a6:	2300      	movs	r3, #0
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3710      	adds	r7, #16
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}
 80126b0:	200014f8 	.word	0x200014f8
 80126b4:	200014f4 	.word	0x200014f4

080126b8 <USBD_Composite_Setup>:

static uint8_t USBD_Composite_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  uint8_t idx = interface_to_class[req->wIndex & 0x7F];
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	889b      	ldrh	r3, [r3, #4]
 80126c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126ca:	4a21      	ldr	r2, [pc, #132]	; (8012750 <USBD_Composite_Setup+0x98>)
 80126cc:	5cd3      	ldrb	r3, [r2, r3]
 80126ce:	72fb      	strb	r3, [r7, #11]

  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00b      	beq.n	80126f4 <USBD_Composite_Setup+0x3c>
 80126dc:	2b20      	cmp	r3, #32
 80126de:	d132      	bne.n	8012746 <USBD_Composite_Setup+0x8e>
    case USB_REQ_TYPE_CLASS:
    	//TODO Correct class ids?
    	return USBD_Classes[idx]->Setup(pdev, req);
 80126e0:	7afb      	ldrb	r3, [r7, #11]
 80126e2:	4a1c      	ldr	r2, [pc, #112]	; (8012754 <USBD_Composite_Setup+0x9c>)
 80126e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126e8:	689b      	ldr	r3, [r3, #8]
 80126ea:	6839      	ldr	r1, [r7, #0]
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	4798      	blx	r3
 80126f0:	4603      	mov	r3, r0
 80126f2:	e029      	b.n	8012748 <USBD_Composite_Setup+0x90>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest) {
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	785b      	ldrb	r3, [r3, #1]
 80126f8:	2b06      	cmp	r3, #6
 80126fa:	d11a      	bne.n	8012732 <USBD_Composite_Setup+0x7a>

        case USB_REQ_GET_DESCRIPTOR :

          for(int cls = 0; cls < classes; cls++) {
 80126fc:	2300      	movs	r3, #0
 80126fe:	60fb      	str	r3, [r7, #12]
 8012700:	e011      	b.n	8012726 <USBD_Composite_Setup+0x6e>
        	  uint8_t ret = USBD_Classes[cls]->Setup(pdev, req);
 8012702:	4a14      	ldr	r2, [pc, #80]	; (8012754 <USBD_Composite_Setup+0x9c>)
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801270a:	689b      	ldr	r3, [r3, #8]
 801270c:	6839      	ldr	r1, [r7, #0]
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	4798      	blx	r3
 8012712:	4603      	mov	r3, r0
 8012714:	72bb      	strb	r3, [r7, #10]
            if (ret != USBD_OK) {
 8012716:	7abb      	ldrb	r3, [r7, #10]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d001      	beq.n	8012720 <USBD_Composite_Setup+0x68>
              return USBD_FAIL;
 801271c:	2302      	movs	r3, #2
 801271e:	e013      	b.n	8012748 <USBD_Composite_Setup+0x90>
          for(int cls = 0; cls < classes; cls++) {
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	3301      	adds	r3, #1
 8012724:	60fb      	str	r3, [r7, #12]
 8012726:	4b0c      	ldr	r3, [pc, #48]	; (8012758 <USBD_Composite_Setup+0xa0>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	68fa      	ldr	r2, [r7, #12]
 801272c:	429a      	cmp	r2, r3
 801272e:	dbe8      	blt.n	8012702 <USBD_Composite_Setup+0x4a>
            }
          }

        break;
 8012730:	e009      	b.n	8012746 <USBD_Composite_Setup+0x8e>

		case USB_REQ_GET_INTERFACE :
		case USB_REQ_SET_INTERFACE :
		default:

			return USBD_Classes[idx]->Setup(pdev, req);
 8012732:	7afb      	ldrb	r3, [r7, #11]
 8012734:	4a07      	ldr	r2, [pc, #28]	; (8012754 <USBD_Composite_Setup+0x9c>)
 8012736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801273a:	689b      	ldr	r3, [r3, #8]
 801273c:	6839      	ldr	r1, [r7, #0]
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	4798      	blx	r3
 8012742:	4603      	mov	r3, r0
 8012744:	e000      	b.n	8012748 <USBD_Composite_Setup+0x90>
		  }
  }
  return USBD_OK;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3710      	adds	r7, #16
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	200000f8 	.word	0x200000f8
 8012754:	200014f8 	.word	0x200014f8
 8012758:	200014f4 	.word	0x200014f4

0801275c <USBD_Composite_DataIn>:

static uint8_t USBD_Composite_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum) {
 801275c:	b580      	push	{r7, lr}
 801275e:	b084      	sub	sp, #16
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	460b      	mov	r3, r1
 8012766:	70fb      	strb	r3, [r7, #3]
  int class_index;

  class_index = in_endpoint_to_class[epnum];
 8012768:	78fb      	ldrb	r3, [r7, #3]
 801276a:	4a0a      	ldr	r2, [pc, #40]	; (8012794 <USBD_Composite_DataIn+0x38>)
 801276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012770:	60fb      	str	r3, [r7, #12]
  uint8_t ret = USBD_Classes[class_index]->DataIn(pdev, epnum);
 8012772:	4a09      	ldr	r2, [pc, #36]	; (8012798 <USBD_Composite_DataIn+0x3c>)
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801277a:	695b      	ldr	r3, [r3, #20]
 801277c:	78fa      	ldrb	r2, [r7, #3]
 801277e:	4611      	mov	r1, r2
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	4798      	blx	r3
 8012784:	4603      	mov	r3, r0
 8012786:	72fb      	strb	r3, [r7, #11]
  return ret;
 8012788:	7afb      	ldrb	r3, [r7, #11]
}
 801278a:	4618      	mov	r0, r3
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	20001f60 	.word	0x20001f60
 8012798:	200014f8 	.word	0x200014f8

0801279c <USBD_Composite_DataOut>:

static uint8_t USBD_Composite_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum) {
 801279c:	b580      	push	{r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	460b      	mov	r3, r1
 80127a6:	70fb      	strb	r3, [r7, #3]
  int class_index;

  class_index = out_endpoint_to_class[epnum];
 80127a8:	78fb      	ldrb	r3, [r7, #3]
 80127aa:	4a0a      	ldr	r2, [pc, #40]	; (80127d4 <USBD_Composite_DataOut+0x38>)
 80127ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127b0:	60fb      	str	r3, [r7, #12]

  uint8_t ret = USBD_Classes[class_index]->DataOut(pdev, epnum);
 80127b2:	4a09      	ldr	r2, [pc, #36]	; (80127d8 <USBD_Composite_DataOut+0x3c>)
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127ba:	699b      	ldr	r3, [r3, #24]
 80127bc:	78fa      	ldrb	r2, [r7, #3]
 80127be:	4611      	mov	r1, r2
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	4798      	blx	r3
 80127c4:	4603      	mov	r3, r0
 80127c6:	72fb      	strb	r3, [r7, #11]
  return ret;
 80127c8:	7afb      	ldrb	r3, [r7, #11]

}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3710      	adds	r7, #16
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	20001f20 	.word	0x20001f20
 80127d8:	200014f8 	.word	0x200014f8

080127dc <USBD_Composite_EP0_RxReady>:

static uint8_t USBD_Composite_EP0_RxReady (USBD_HandleTypeDef *pdev) {
 80127dc:	b580      	push	{r7, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
  for(int cls = 0; cls < classes; cls++) {
 80127e4:	2300      	movs	r3, #0
 80127e6:	60fb      	str	r3, [r7, #12]
 80127e8:	e017      	b.n	801281a <USBD_Composite_EP0_RxReady+0x3e>
    if (USBD_Classes[cls]->EP0_RxReady != NULL) {
 80127ea:	4a11      	ldr	r2, [pc, #68]	; (8012830 <USBD_Composite_EP0_RxReady+0x54>)
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127f2:	691b      	ldr	r3, [r3, #16]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d00d      	beq.n	8012814 <USBD_Composite_EP0_RxReady+0x38>
    	uint8_t ret = USBD_Classes[cls]->EP0_RxReady(pdev);
 80127f8:	4a0d      	ldr	r2, [pc, #52]	; (8012830 <USBD_Composite_EP0_RxReady+0x54>)
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012800:	691b      	ldr	r3, [r3, #16]
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	4798      	blx	r3
 8012806:	4603      	mov	r3, r0
 8012808:	72fb      	strb	r3, [r7, #11]
        if (ret != USBD_OK) {
 801280a:	7afb      	ldrb	r3, [r7, #11]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d001      	beq.n	8012814 <USBD_Composite_EP0_RxReady+0x38>
        	return USBD_FAIL;
 8012810:	2302      	movs	r3, #2
 8012812:	e008      	b.n	8012826 <USBD_Composite_EP0_RxReady+0x4a>
  for(int cls = 0; cls < classes; cls++) {
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	3301      	adds	r3, #1
 8012818:	60fb      	str	r3, [r7, #12]
 801281a:	4b06      	ldr	r3, [pc, #24]	; (8012834 <USBD_Composite_EP0_RxReady+0x58>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	68fa      	ldr	r2, [r7, #12]
 8012820:	429a      	cmp	r2, r3
 8012822:	dbe2      	blt.n	80127ea <USBD_Composite_EP0_RxReady+0xe>
      }
    }
  }
  return USBD_OK;
 8012824:	2300      	movs	r3, #0
}
 8012826:	4618      	mov	r0, r3
 8012828:	3710      	adds	r7, #16
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	200014f8 	.word	0x200014f8
 8012834:	200014f4 	.word	0x200014f4

08012838 <USBD_Composite_EP0_TxSent>:

static uint8_t USBD_Composite_EP0_TxSent (USBD_HandleTypeDef *pdev){
 8012838:	b480      	push	{r7}
 801283a:	b083      	sub	sp, #12
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
	return USBD_OK;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	370c      	adds	r7, #12
 8012846:	46bd      	mov	sp, r7
 8012848:	bc80      	pop	{r7}
 801284a:	4770      	bx	lr

0801284c <USBD_Composite_GetFSCfgDesc>:

static uint8_t  *USBD_Composite_GetFSCfgDesc (uint16_t *length) {
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 8012854:	4b05      	ldr	r3, [pc, #20]	; (801286c <USBD_Composite_GetFSCfgDesc+0x20>)
 8012856:	881a      	ldrh	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 801285c:	4b04      	ldr	r3, [pc, #16]	; (8012870 <USBD_Composite_GetFSCfgDesc+0x24>)
 801285e:	681b      	ldr	r3, [r3, #0]
}
 8012860:	4618      	mov	r0, r3
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	bc80      	pop	{r7}
 8012868:	4770      	bx	lr
 801286a:	bf00      	nop
 801286c:	200019c0 	.word	0x200019c0
 8012870:	200019c4 	.word	0x200019c4

08012874 <USBD_Composite_GetHSCfgDesc>:

static uint8_t  *USBD_Composite_GetHSCfgDesc (uint16_t *length) {
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 801287c:	4b05      	ldr	r3, [pc, #20]	; (8012894 <USBD_Composite_GetHSCfgDesc+0x20>)
 801287e:	881a      	ldrh	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 8012884:	4b04      	ldr	r3, [pc, #16]	; (8012898 <USBD_Composite_GetHSCfgDesc+0x24>)
 8012886:	681b      	ldr	r3, [r3, #0]
}
 8012888:	4618      	mov	r0, r3
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	bc80      	pop	{r7}
 8012890:	4770      	bx	lr
 8012892:	bf00      	nop
 8012894:	200019c0 	.word	0x200019c0
 8012898:	200019c4 	.word	0x200019c4

0801289c <USBD_Composite_GetOtherSpeedCfgDesc>:

static uint8_t  *USBD_Composite_GetOtherSpeedCfgDesc (uint16_t *length) {
 801289c:	b480      	push	{r7}
 801289e:	b083      	sub	sp, #12
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 80128a4:	4b05      	ldr	r3, [pc, #20]	; (80128bc <USBD_Composite_GetOtherSpeedCfgDesc+0x20>)
 80128a6:	881a      	ldrh	r2, [r3, #0]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 80128ac:	4b04      	ldr	r3, [pc, #16]	; (80128c0 <USBD_Composite_GetOtherSpeedCfgDesc+0x24>)
 80128ae:	681b      	ldr	r3, [r3, #0]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	370c      	adds	r7, #12
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bc80      	pop	{r7}
 80128b8:	4770      	bx	lr
 80128ba:	bf00      	nop
 80128bc:	200019c0 	.word	0x200019c0
 80128c0:	200019c4 	.word	0x200019c4

080128c4 <USBD_Composite_GetDeviceQualifierDescriptor>:
  0x40,
  0x01,
  0x00,
};

uint8_t  *USBD_Composite_GetDeviceQualifierDescriptor (uint16_t *length) {
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Composite_DeviceQualifierDesc);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	220a      	movs	r2, #10
 80128d0:	801a      	strh	r2, [r3, #0]
  return USBD_Composite_DeviceQualifierDesc;
 80128d2:	4b03      	ldr	r3, [pc, #12]	; (80128e0 <USBD_Composite_GetDeviceQualifierDescriptor+0x1c>)
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	370c      	adds	r7, #12
 80128d8:	46bd      	mov	sp, r7
 80128da:	bc80      	pop	{r7}
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	20000108 	.word	0x20000108

080128e4 <USBD_Composite_InterfaceToClass>:


void USBD_Composite_InterfaceToClass(uint8_t ifid, uint8_t clsid){
 80128e4:	b480      	push	{r7}
 80128e6:	b083      	sub	sp, #12
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	4603      	mov	r3, r0
 80128ec:	460a      	mov	r2, r1
 80128ee:	71fb      	strb	r3, [r7, #7]
 80128f0:	4613      	mov	r3, r2
 80128f2:	71bb      	strb	r3, [r7, #6]
	interface_to_class[ifid] = clsid;
 80128f4:	79fb      	ldrb	r3, [r7, #7]
 80128f6:	4904      	ldr	r1, [pc, #16]	; (8012908 <USBD_Composite_InterfaceToClass+0x24>)
 80128f8:	79ba      	ldrb	r2, [r7, #6]
 80128fa:	54ca      	strb	r2, [r1, r3]
}
 80128fc:	bf00      	nop
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	bc80      	pop	{r7}
 8012904:	4770      	bx	lr
 8012906:	bf00      	nop
 8012908:	200000f8 	.word	0x200000f8

0801290c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8012920:	4619      	mov	r1, r3
 8012922:	4610      	mov	r0, r2
 8012924:	f000 faf2 	bl	8012f0c <USBD_LL_SetupStage>
}
 8012928:	bf00      	nop
 801292a:	3708      	adds	r7, #8
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}

08012930 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	460b      	mov	r3, r1
 801293a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8012942:	78fb      	ldrb	r3, [r7, #3]
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	015b      	lsls	r3, r3, #5
 8012948:	4413      	add	r3, r2
 801294a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	78fb      	ldrb	r3, [r7, #3]
 8012952:	4619      	mov	r1, r3
 8012954:	f000 fb25 	bl	8012fa2 <USBD_LL_DataOutStage>
}
 8012958:	bf00      	nop
 801295a:	3708      	adds	r7, #8
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	460b      	mov	r3, r1
 801296a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8012972:	78fb      	ldrb	r3, [r7, #3]
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	015b      	lsls	r3, r3, #5
 8012978:	4413      	add	r3, r2
 801297a:	333c      	adds	r3, #60	; 0x3c
 801297c:	681a      	ldr	r2, [r3, #0]
 801297e:	78fb      	ldrb	r3, [r7, #3]
 8012980:	4619      	mov	r1, r3
 8012982:	f000 fb7f 	bl	8013084 <USBD_LL_DataInStage>
}
 8012986:	bf00      	nop
 8012988:	3708      	adds	r7, #8
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}

0801298e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801298e:	b580      	push	{r7, lr}
 8012990:	b082      	sub	sp, #8
 8012992:	af00      	add	r7, sp, #0
 8012994:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801299c:	4618      	mov	r0, r3
 801299e:	f000 fc88 	bl	80132b2 <USBD_LL_SOF>
}
 80129a2:	bf00      	nop
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}

080129aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80129aa:	b580      	push	{r7, lr}
 80129ac:	b084      	sub	sp, #16
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80129b2:	2301      	movs	r3, #1
 80129b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	689b      	ldr	r3, [r3, #8]
 80129ba:	2b02      	cmp	r3, #2
 80129bc:	d001      	beq.n	80129c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80129be:	f7ef f813 	bl	80019e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80129c8:	7bfa      	ldrb	r2, [r7, #15]
 80129ca:	4611      	mov	r1, r2
 80129cc:	4618      	mov	r0, r3
 80129ce:	f000 fc38 	bl	8013242 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80129d8:	4618      	mov	r0, r3
 80129da:	f000 fbf8 	bl	80131ce <USBD_LL_Reset>
}
 80129de:	bf00      	nop
 80129e0:	3710      	adds	r7, #16
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
	...

080129e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80129f6:	4618      	mov	r0, r3
 80129f8:	f000 fc32 	bl	8013260 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	699b      	ldr	r3, [r3, #24]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d005      	beq.n	8012a10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a04:	4b04      	ldr	r3, [pc, #16]	; (8012a18 <HAL_PCD_SuspendCallback+0x30>)
 8012a06:	691b      	ldr	r3, [r3, #16]
 8012a08:	4a03      	ldr	r2, [pc, #12]	; (8012a18 <HAL_PCD_SuspendCallback+0x30>)
 8012a0a:	f043 0306 	orr.w	r3, r3, #6
 8012a0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012a10:	bf00      	nop
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	e000ed00 	.word	0xe000ed00

08012a1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f000 fc2c 	bl	8013288 <USBD_LL_Resume>
}
 8012a30:	bf00      	nop
 8012a32:	3708      	adds	r7, #8
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}

08012a38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012a40:	4a31      	ldr	r2, [pc, #196]	; (8012b08 <USBD_LL_Init+0xd0>)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	4a2f      	ldr	r2, [pc, #188]	; (8012b08 <USBD_LL_Init+0xd0>)
 8012a4c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8012a50:	4b2d      	ldr	r3, [pc, #180]	; (8012b08 <USBD_LL_Init+0xd0>)
 8012a52:	4a2e      	ldr	r2, [pc, #184]	; (8012b0c <USBD_LL_Init+0xd4>)
 8012a54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012a56:	4b2c      	ldr	r3, [pc, #176]	; (8012b08 <USBD_LL_Init+0xd0>)
 8012a58:	2208      	movs	r2, #8
 8012a5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012a5c:	4b2a      	ldr	r3, [pc, #168]	; (8012b08 <USBD_LL_Init+0xd0>)
 8012a5e:	2202      	movs	r2, #2
 8012a60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012a62:	4b29      	ldr	r3, [pc, #164]	; (8012b08 <USBD_LL_Init+0xd0>)
 8012a64:	2200      	movs	r2, #0
 8012a66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012a68:	4b27      	ldr	r3, [pc, #156]	; (8012b08 <USBD_LL_Init+0xd0>)
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012a6e:	4b26      	ldr	r3, [pc, #152]	; (8012b08 <USBD_LL_Init+0xd0>)
 8012a70:	2200      	movs	r2, #0
 8012a72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012a74:	4824      	ldr	r0, [pc, #144]	; (8012b08 <USBD_LL_Init+0xd0>)
 8012a76:	f7f1 fd8b 	bl	8004590 <HAL_PCD_Init>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d001      	beq.n	8012a84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8012a80:	f7ee ffb2 	bl	80019e8 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);*/


  //CDC ENDPOINTS
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x38);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012a8a:	2338      	movs	r3, #56	; 0x38
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	2100      	movs	r1, #0
 8012a90:	f7f2 fc24 	bl	80052dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x88);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012a9a:	2388      	movs	r3, #136	; 0x88
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	2180      	movs	r1, #128	; 0x80
 8012aa0:	f7f2 fc1c 	bl	80052dc <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xF0);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012aaa:	23f0      	movs	r3, #240	; 0xf0
 8012aac:	2200      	movs	r2, #0
 8012aae:	2181      	movs	r1, #129	; 0x81
 8012ab0:	f7f2 fc14 	bl	80052dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x140);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012aba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8012abe:	2200      	movs	r2, #0
 8012ac0:	2101      	movs	r1, #1
 8012ac2:	f7f2 fc0b 	bl	80052dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x130);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012acc:	f44f 7398 	mov.w	r3, #304	; 0x130
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	2182      	movs	r1, #130	; 0x82
 8012ad4:	f7f2 fc02 	bl	80052dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x83 , PCD_SNG_BUF, 0x180);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012ade:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	2183      	movs	r1, #131	; 0x83
 8012ae6:	f7f2 fbf9 	bl	80052dc <HAL_PCDEx_PMAConfig>
   HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x02 , PCD_SNG_BUF, 0x1D0);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012af0:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8012af4:	2200      	movs	r2, #0
 8012af6:	2102      	movs	r1, #2
 8012af8:	f7f2 fbf0 	bl	80052dc <HAL_PCDEx_PMAConfig>

  return USBD_OK;
 8012afc:	2300      	movs	r3, #0
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3708      	adds	r7, #8
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	2000171c 	.word	0x2000171c
 8012b0c:	40005c00 	.word	0x40005c00

08012b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7f1 fe13 	bl	8004752 <HAL_PCD_Start>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b30:	7bfb      	ldrb	r3, [r7, #15]
 8012b32:	4618      	mov	r0, r3
 8012b34:	f000 f932 	bl	8012d9c <USBD_Get_USB_Status>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8012b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3710      	adds	r7, #16
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012b46:	b580      	push	{r7, lr}
 8012b48:	b084      	sub	sp, #16
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
 8012b4e:	4608      	mov	r0, r1
 8012b50:	4611      	mov	r1, r2
 8012b52:	461a      	mov	r2, r3
 8012b54:	4603      	mov	r3, r0
 8012b56:	70fb      	strb	r3, [r7, #3]
 8012b58:	460b      	mov	r3, r1
 8012b5a:	70bb      	strb	r3, [r7, #2]
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b60:	2300      	movs	r3, #0
 8012b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b64:	2300      	movs	r3, #0
 8012b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012b6e:	78bb      	ldrb	r3, [r7, #2]
 8012b70:	883a      	ldrh	r2, [r7, #0]
 8012b72:	78f9      	ldrb	r1, [r7, #3]
 8012b74:	f7f1 ff46 	bl	8004a04 <HAL_PCD_EP_Open>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b7c:	7bfb      	ldrb	r3, [r7, #15]
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f000 f90c 	bl	8012d9c <USBD_Get_USB_Status>
 8012b84:	4603      	mov	r3, r0
 8012b86:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8012b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3710      	adds	r7, #16
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}

08012b92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b92:	b580      	push	{r7, lr}
 8012b94:	b084      	sub	sp, #16
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	6078      	str	r0, [r7, #4]
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012bac:	78fa      	ldrb	r2, [r7, #3]
 8012bae:	4611      	mov	r1, r2
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7f1 ff87 	bl	8004ac4 <HAL_PCD_EP_Close>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bba:	7bfb      	ldrb	r3, [r7, #15]
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f000 f8ed 	bl	8012d9c <USBD_Get_USB_Status>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8012bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3710      	adds	r7, #16
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b084      	sub	sp, #16
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	460b      	mov	r3, r1
 8012bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012be0:	2300      	movs	r3, #0
 8012be2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012bea:	78fa      	ldrb	r2, [r7, #3]
 8012bec:	4611      	mov	r1, r2
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7f2 f831 	bl	8004c56 <HAL_PCD_EP_SetStall>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bf8:	7bfb      	ldrb	r3, [r7, #15]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f000 f8ce 	bl	8012d9c <USBD_Get_USB_Status>
 8012c00:	4603      	mov	r3, r0
 8012c02:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8012c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3710      	adds	r7, #16
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}

08012c0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b084      	sub	sp, #16
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
 8012c16:	460b      	mov	r3, r1
 8012c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012c28:	78fa      	ldrb	r2, [r7, #3]
 8012c2a:	4611      	mov	r1, r2
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7f2 f86c 	bl	8004d0a <HAL_PCD_EP_ClrStall>
 8012c32:	4603      	mov	r3, r0
 8012c34:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c36:	7bfb      	ldrb	r3, [r7, #15]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f000 f8af 	bl	8012d9c <USBD_Get_USB_Status>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8012c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3710      	adds	r7, #16
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b085      	sub	sp, #20
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	460b      	mov	r3, r1
 8012c56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012c5e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8012c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	da08      	bge.n	8012c7a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8012c68:	78fb      	ldrb	r3, [r7, #3]
 8012c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c6e:	68fa      	ldr	r2, [r7, #12]
 8012c70:	015b      	lsls	r3, r3, #5
 8012c72:	4413      	add	r3, r2
 8012c74:	332a      	adds	r3, #42	; 0x2a
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	e008      	b.n	8012c8c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8012c7a:	78fb      	ldrb	r3, [r7, #3]
 8012c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	015b      	lsls	r3, r3, #5
 8012c84:	4413      	add	r3, r2
 8012c86:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8012c8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3714      	adds	r7, #20
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bc80      	pop	{r7}
 8012c94:	4770      	bx	lr

08012c96 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012c96:	b580      	push	{r7, lr}
 8012c98:	b084      	sub	sp, #16
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
 8012c9e:	460b      	mov	r3, r1
 8012ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012cb0:	78fa      	ldrb	r2, [r7, #3]
 8012cb2:	4611      	mov	r1, r2
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7f1 fe80 	bl	80049ba <HAL_PCD_SetAddress>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8012cbe:	7bfb      	ldrb	r3, [r7, #15]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f000 f86b 	bl	8012d9c <USBD_Get_USB_Status>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8012cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3710      	adds	r7, #16
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b086      	sub	sp, #24
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	60f8      	str	r0, [r7, #12]
 8012cdc:	607a      	str	r2, [r7, #4]
 8012cde:	461a      	mov	r2, r3
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	72fb      	strb	r3, [r7, #11]
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cec:	2300      	movs	r3, #0
 8012cee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012cf6:	893b      	ldrh	r3, [r7, #8]
 8012cf8:	7af9      	ldrb	r1, [r7, #11]
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	f7f1 ff72 	bl	8004be4 <HAL_PCD_EP_Transmit>
 8012d00:	4603      	mov	r3, r0
 8012d02:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d04:	7dfb      	ldrb	r3, [r7, #23]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f000 f848 	bl	8012d9c <USBD_Get_USB_Status>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8012d10:	7dbb      	ldrb	r3, [r7, #22]
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3718      	adds	r7, #24
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}

08012d1a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012d1a:	b580      	push	{r7, lr}
 8012d1c:	b086      	sub	sp, #24
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	60f8      	str	r0, [r7, #12]
 8012d22:	607a      	str	r2, [r7, #4]
 8012d24:	461a      	mov	r2, r3
 8012d26:	460b      	mov	r3, r1
 8012d28:	72fb      	strb	r3, [r7, #11]
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d32:	2300      	movs	r3, #0
 8012d34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8012d3c:	893b      	ldrh	r3, [r7, #8]
 8012d3e:	7af9      	ldrb	r1, [r7, #11]
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	f7f1 ff01 	bl	8004b48 <HAL_PCD_EP_Receive>
 8012d46:	4603      	mov	r3, r0
 8012d48:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d4a:	7dfb      	ldrb	r3, [r7, #23]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f000 f825 	bl	8012d9c <USBD_Get_USB_Status>
 8012d52:	4603      	mov	r3, r0
 8012d54:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8012d56:	7dbb      	ldrb	r3, [r7, #22]
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3718      	adds	r7, #24
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	460b      	mov	r3, r1
 8012d6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012d72:	78fa      	ldrb	r2, [r7, #3]
 8012d74:	4611      	mov	r1, r2
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7f1 ff20 	bl	8004bbc <HAL_PCD_EP_GetRxCount>
 8012d7c:	4603      	mov	r3, r0
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3708      	adds	r7, #8
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}

08012d86 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d86:	b480      	push	{r7}
 8012d88:	b083      	sub	sp, #12
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
 8012d8e:	460b      	mov	r3, r1
 8012d90:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8012d92:	bf00      	nop
 8012d94:	370c      	adds	r7, #12
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bc80      	pop	{r7}
 8012d9a:	4770      	bx	lr

08012d9c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b085      	sub	sp, #20
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	4603      	mov	r3, r0
 8012da4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012da6:	2300      	movs	r3, #0
 8012da8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012daa:	79fb      	ldrb	r3, [r7, #7]
 8012dac:	2b03      	cmp	r3, #3
 8012dae:	d817      	bhi.n	8012de0 <USBD_Get_USB_Status+0x44>
 8012db0:	a201      	add	r2, pc, #4	; (adr r2, 8012db8 <USBD_Get_USB_Status+0x1c>)
 8012db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012db6:	bf00      	nop
 8012db8:	08012dc9 	.word	0x08012dc9
 8012dbc:	08012dcf 	.word	0x08012dcf
 8012dc0:	08012dd5 	.word	0x08012dd5
 8012dc4:	08012ddb 	.word	0x08012ddb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	73fb      	strb	r3, [r7, #15]
    break;
 8012dcc:	e00b      	b.n	8012de6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012dce:	2302      	movs	r3, #2
 8012dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8012dd2:	e008      	b.n	8012de6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8012dd8:	e005      	b.n	8012de6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012dda:	2302      	movs	r3, #2
 8012ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8012dde:	e002      	b.n	8012de6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012de0:	2302      	movs	r3, #2
 8012de2:	73fb      	strb	r3, [r7, #15]
    break;
 8012de4:	bf00      	nop
  }
  return usb_status;
 8012de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3714      	adds	r7, #20
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bc80      	pop	{r7}
 8012df0:	4770      	bx	lr
 8012df2:	bf00      	nop

08012df4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b084      	sub	sp, #16
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	60f8      	str	r0, [r7, #12]
 8012dfc:	60b9      	str	r1, [r7, #8]
 8012dfe:	4613      	mov	r3, r2
 8012e00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d101      	bne.n	8012e0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012e08:	2302      	movs	r3, #2
 8012e0a:	e01a      	b.n	8012e42 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d003      	beq.n	8012e1e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d003      	beq.n	8012e2c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	68ba      	ldr	r2, [r7, #8]
 8012e28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	79fa      	ldrb	r2, [r7, #7]
 8012e38:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8012e3a:	68f8      	ldr	r0, [r7, #12]
 8012e3c:	f7ff fdfc 	bl	8012a38 <USBD_LL_Init>

  return USBD_OK;
 8012e40:	2300      	movs	r3, #0
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	3710      	adds	r7, #16
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}

08012e4a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012e4a:	b480      	push	{r7}
 8012e4c:	b085      	sub	sp, #20
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
 8012e52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8012e54:	2300      	movs	r3, #0
 8012e56:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d006      	beq.n	8012e6c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	683a      	ldr	r2, [r7, #0]
 8012e62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8012e66:	2300      	movs	r3, #0
 8012e68:	73fb      	strb	r3, [r7, #15]
 8012e6a:	e001      	b.n	8012e70 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8012e6c:	2302      	movs	r3, #2
 8012e6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3714      	adds	r7, #20
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bc80      	pop	{r7}
 8012e7a:	4770      	bx	lr

08012e7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f7ff fe43 	bl	8012b10 <USBD_LL_Start>

  return USBD_OK;
 8012e8a:	2300      	movs	r3, #0
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3708      	adds	r7, #8
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012e94:	b480      	push	{r7}
 8012e96:	b083      	sub	sp, #12
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012e9c:	2300      	movs	r3, #0
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	370c      	adds	r7, #12
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bc80      	pop	{r7}
 8012ea6:	4770      	bx	lr

08012ea8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012eb4:	2302      	movs	r3, #2
 8012eb6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d00c      	beq.n	8012edc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	78fa      	ldrb	r2, [r7, #3]
 8012ecc:	4611      	mov	r1, r2
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	4798      	blx	r3
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d101      	bne.n	8012edc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3710      	adds	r7, #16
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}

08012ee6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012ee6:	b580      	push	{r7, lr}
 8012ee8:	b082      	sub	sp, #8
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	6078      	str	r0, [r7, #4]
 8012eee:	460b      	mov	r3, r1
 8012ef0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	78fa      	ldrb	r2, [r7, #3]
 8012efc:	4611      	mov	r1, r2
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	4798      	blx	r3

  return USBD_OK;
 8012f02:	2300      	movs	r3, #0
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3708      	adds	r7, #8
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}

08012f0c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012f1c:	6839      	ldr	r1, [r7, #0]
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f000 fe8c 	bl	8013c3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2201      	movs	r2, #1
 8012f28:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  pdev->ep0_data_len = pdev->request.wLength;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8012f32:	461a      	mov	r2, r3
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

  switch (pdev->request.bmRequest & 0x1FU)
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8012f40:	f003 031f 	and.w	r3, r3, #31
 8012f44:	2b01      	cmp	r3, #1
 8012f46:	d00c      	beq.n	8012f62 <USBD_LL_SetupStage+0x56>
 8012f48:	2b01      	cmp	r3, #1
 8012f4a:	d302      	bcc.n	8012f52 <USBD_LL_SetupStage+0x46>
 8012f4c:	2b02      	cmp	r3, #2
 8012f4e:	d010      	beq.n	8012f72 <USBD_LL_SetupStage+0x66>
 8012f50:	e017      	b.n	8012f82 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012f58:	4619      	mov	r1, r3
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f000 f9c4 	bl	80132e8 <USBD_StdDevReq>
      break;
 8012f60:	e01a      	b.n	8012f98 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012f68:	4619      	mov	r1, r3
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 fa26 	bl	80133bc <USBD_StdItfReq>
      break;
 8012f70:	e012      	b.n	8012f98 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012f78:	4619      	mov	r1, r3
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f000 fa64 	bl	8013448 <USBD_StdEPReq>
      break;
 8012f80:	e00a      	b.n	8012f98 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8012f88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	4619      	mov	r1, r3
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f7ff fe1d 	bl	8012bd0 <USBD_LL_StallEP>
      break;
 8012f96:	bf00      	nop
  }

  return USBD_OK;
 8012f98:	2300      	movs	r3, #0
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3708      	adds	r7, #8
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}

08012fa2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012fa2:	b580      	push	{r7, lr}
 8012fa4:	b086      	sub	sp, #24
 8012fa6:	af00      	add	r7, sp, #0
 8012fa8:	60f8      	str	r0, [r7, #12]
 8012faa:	460b      	mov	r3, r1
 8012fac:	607a      	str	r2, [r7, #4]
 8012fae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012fb0:	7afb      	ldrb	r3, [r7, #11]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d14b      	bne.n	801304e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8012fbc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8012fc4:	2b03      	cmp	r3, #3
 8012fc6:	d134      	bne.n	8013032 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	689a      	ldr	r2, [r3, #8]
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d919      	bls.n	8013008 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	689a      	ldr	r2, [r3, #8]
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	68db      	ldr	r3, [r3, #12]
 8012fdc:	1ad2      	subs	r2, r2, r3
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	609a      	str	r2, [r3, #8]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	689a      	ldr	r2, [r3, #8]
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d203      	bcs.n	8012ff6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueRx(pdev, pdata,
 8012ff2:	b29b      	uxth	r3, r3
 8012ff4:	e002      	b.n	8012ffc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	6879      	ldr	r1, [r7, #4]
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f001 fa43 	bl	801448c <USBD_CtlContinueRx>
 8013006:	e038      	b.n	801307a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801300e:	691b      	ldr	r3, [r3, #16]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d00a      	beq.n	801302a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801301a:	2b03      	cmp	r3, #3
 801301c:	d105      	bne.n	801302a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013024:	691b      	ldr	r3, [r3, #16]
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801302a:	68f8      	ldr	r0, [r7, #12]
 801302c:	f001 fa40 	bl	80144b0 <USBD_CtlSendStatus>
 8013030:	e023      	b.n	801307a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013038:	2b05      	cmp	r3, #5
 801303a:	d11e      	bne.n	801307a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	2200      	movs	r2, #0
 8013040:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        USBD_LL_StallEP(pdev, 0U);
 8013044:	2100      	movs	r1, #0
 8013046:	68f8      	ldr	r0, [r7, #12]
 8013048:	f7ff fdc2 	bl	8012bd0 <USBD_LL_StallEP>
 801304c:	e015      	b.n	801307a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013054:	699b      	ldr	r3, [r3, #24]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d00d      	beq.n	8013076 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if ((pdev->pClass->DataOut != NULL) &&
 8013060:	2b03      	cmp	r3, #3
 8013062:	d108      	bne.n	8013076 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801306a:	699b      	ldr	r3, [r3, #24]
 801306c:	7afa      	ldrb	r2, [r7, #11]
 801306e:	4611      	mov	r1, r2
 8013070:	68f8      	ldr	r0, [r7, #12]
 8013072:	4798      	blx	r3
 8013074:	e001      	b.n	801307a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013076:	2302      	movs	r3, #2
 8013078:	e000      	b.n	801307c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801307a:	2300      	movs	r3, #0
}
 801307c:	4618      	mov	r0, r3
 801307e:	3718      	adds	r7, #24
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b086      	sub	sp, #24
 8013088:	af00      	add	r7, sp, #0
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	460b      	mov	r3, r1
 801308e:	607a      	str	r2, [r7, #4]
 8013090:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013092:	7afb      	ldrb	r3, [r7, #11]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d17f      	bne.n	8013198 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	3314      	adds	r3, #20
 801309c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80130a4:	2b02      	cmp	r3, #2
 80130a6:	d15c      	bne.n	8013162 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	689a      	ldr	r2, [r3, #8]
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	68db      	ldr	r3, [r3, #12]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d915      	bls.n	80130e0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	689a      	ldr	r2, [r3, #8]
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	68db      	ldr	r3, [r3, #12]
 80130bc:	1ad2      	subs	r2, r2, r3
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	609a      	str	r2, [r3, #8]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	689b      	ldr	r3, [r3, #8]
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	461a      	mov	r2, r3
 80130ca:	6879      	ldr	r1, [r7, #4]
 80130cc:	68f8      	ldr	r0, [r7, #12]
 80130ce:	f001 f9ad 	bl	801442c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80130d2:	2300      	movs	r3, #0
 80130d4:	2200      	movs	r2, #0
 80130d6:	2100      	movs	r1, #0
 80130d8:	68f8      	ldr	r0, [r7, #12]
 80130da:	f7ff fe1e 	bl	8012d1a <USBD_LL_PrepareReceive>
 80130de:	e04e      	b.n	801317e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	697a      	ldr	r2, [r7, #20]
 80130e6:	68d2      	ldr	r2, [r2, #12]
 80130e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80130ec:	fb02 f201 	mul.w	r2, r2, r1
 80130f0:	1a9b      	subs	r3, r3, r2
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d11c      	bne.n	8013130 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	685a      	ldr	r2, [r3, #4]
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80130fe:	429a      	cmp	r2, r3
 8013100:	d316      	bcc.n	8013130 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	685a      	ldr	r2, [r3, #4]
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
            (pep->total_length >= pep->maxpacket) &&
 801310c:	429a      	cmp	r2, r3
 801310e:	d20f      	bcs.n	8013130 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013110:	2200      	movs	r2, #0
 8013112:	2100      	movs	r1, #0
 8013114:	68f8      	ldr	r0, [r7, #12]
 8013116:	f001 f989 	bl	801442c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2200      	movs	r2, #0
 801311e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013122:	2300      	movs	r3, #0
 8013124:	2200      	movs	r2, #0
 8013126:	2100      	movs	r1, #0
 8013128:	68f8      	ldr	r0, [r7, #12]
 801312a:	f7ff fdf6 	bl	8012d1a <USBD_LL_PrepareReceive>
 801312e:	e026      	b.n	801317e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d00a      	beq.n	8013152 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013142:	2b03      	cmp	r3, #3
 8013144:	d105      	bne.n	8013152 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801314c:	68db      	ldr	r3, [r3, #12]
 801314e:	68f8      	ldr	r0, [r7, #12]
 8013150:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8013152:	2180      	movs	r1, #128	; 0x80
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f7ff fd3b 	bl	8012bd0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801315a:	68f8      	ldr	r0, [r7, #12]
 801315c:	f001 f9bb 	bl	80144d6 <USBD_CtlReceiveStatus>
 8013160:	e00d      	b.n	801317e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013168:	2b04      	cmp	r3, #4
 801316a:	d004      	beq.n	8013176 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013172:	2b00      	cmp	r3, #0
 8013174:	d103      	bne.n	801317e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8013176:	2180      	movs	r1, #128	; 0x80
 8013178:	68f8      	ldr	r0, [r7, #12]
 801317a:	f7ff fd29 	bl	8012bd0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013184:	2b01      	cmp	r3, #1
 8013186:	d11d      	bne.n	80131c4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013188:	68f8      	ldr	r0, [r7, #12]
 801318a:	f7ff fe83 	bl	8012e94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2200      	movs	r2, #0
 8013192:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8013196:	e015      	b.n	80131c4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801319e:	695b      	ldr	r3, [r3, #20]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d00d      	beq.n	80131c0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if ((pdev->pClass->DataIn != NULL) &&
 80131aa:	2b03      	cmp	r3, #3
 80131ac:	d108      	bne.n	80131c0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80131b4:	695b      	ldr	r3, [r3, #20]
 80131b6:	7afa      	ldrb	r2, [r7, #11]
 80131b8:	4611      	mov	r1, r2
 80131ba:	68f8      	ldr	r0, [r7, #12]
 80131bc:	4798      	blx	r3
 80131be:	e001      	b.n	80131c4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80131c0:	2302      	movs	r3, #2
 80131c2:	e000      	b.n	80131c6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80131c4:	2300      	movs	r3, #0
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3718      	adds	r7, #24
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b082      	sub	sp, #8
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80131d6:	2340      	movs	r3, #64	; 0x40
 80131d8:	2200      	movs	r2, #0
 80131da:	2100      	movs	r1, #0
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f7ff fcb2 	bl	8012b46 <USBD_LL_OpenEP>

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2240      	movs	r2, #64	; 0x40
 80131e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80131ea:	2340      	movs	r3, #64	; 0x40
 80131ec:	2200      	movs	r2, #0
 80131ee:	2180      	movs	r1, #128	; 0x80
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f7ff fca8 	bl	8012b46 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2240      	movs	r2, #64	; 0x40
 80131fa:	621a      	str	r2, [r3, #32]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2201      	movs	r2, #1
 8013200:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->ep0_state = USBD_EP0_IDLE;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2200      	movs	r2, #0
 8013208:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->dev_config = 0U;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2200      	movs	r2, #0
 8013210:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2200      	movs	r2, #0
 8013216:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  if (pdev->pClassData)
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013220:	2b00      	cmp	r3, #0
 8013222:	d009      	beq.n	8013238 <USBD_LL_Reset+0x6a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	6852      	ldr	r2, [r2, #4]
 8013230:	b2d2      	uxtb	r2, r2
 8013232:	4611      	mov	r1, r2
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	4798      	blx	r3
  }

  return USBD_OK;
 8013238:	2300      	movs	r3, #0
}
 801323a:	4618      	mov	r0, r3
 801323c:	3708      	adds	r7, #8
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}

08013242 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013242:	b480      	push	{r7}
 8013244:	b083      	sub	sp, #12
 8013246:	af00      	add	r7, sp, #0
 8013248:	6078      	str	r0, [r7, #4]
 801324a:	460b      	mov	r3, r1
 801324c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	78fa      	ldrb	r2, [r7, #3]
 8013252:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013254:	2300      	movs	r3, #0
}
 8013256:	4618      	mov	r0, r3
 8013258:	370c      	adds	r7, #12
 801325a:	46bd      	mov	sp, r7
 801325c:	bc80      	pop	{r7}
 801325e:	4770      	bx	lr

08013260 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013260:	b480      	push	{r7}
 8013262:	b083      	sub	sp, #12
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2204      	movs	r2, #4
 8013278:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc

  return USBD_OK;
 801327c:	2300      	movs	r3, #0
}
 801327e:	4618      	mov	r0, r3
 8013280:	370c      	adds	r7, #12
 8013282:	46bd      	mov	sp, r7
 8013284:	bc80      	pop	{r7}
 8013286:	4770      	bx	lr

08013288 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013288:	b480      	push	{r7}
 801328a:	b083      	sub	sp, #12
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8013296:	2b04      	cmp	r3, #4
 8013298:	d105      	bne.n	80132a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  }

  return USBD_OK;
 80132a6:	2300      	movs	r3, #0
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	370c      	adds	r7, #12
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bc80      	pop	{r7}
 80132b0:	4770      	bx	lr

080132b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80132b2:	b580      	push	{r7, lr}
 80132b4:	b082      	sub	sp, #8
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80132c0:	2b03      	cmp	r3, #3
 80132c2:	d10b      	bne.n	80132dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80132ca:	69db      	ldr	r3, [r3, #28]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d005      	beq.n	80132dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80132d6:	69db      	ldr	r3, [r3, #28]
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80132dc:	2300      	movs	r3, #0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3708      	adds	r7, #8
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
	...

080132e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
 80132f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80132f2:	2300      	movs	r3, #0
 80132f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80132fe:	2b20      	cmp	r3, #32
 8013300:	d004      	beq.n	801330c <USBD_StdDevReq+0x24>
 8013302:	2b40      	cmp	r3, #64	; 0x40
 8013304:	d002      	beq.n	801330c <USBD_StdDevReq+0x24>
 8013306:	2b00      	cmp	r3, #0
 8013308:	d008      	beq.n	801331c <USBD_StdDevReq+0x34>
 801330a:	e04c      	b.n	80133a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013312:	689b      	ldr	r3, [r3, #8]
 8013314:	6839      	ldr	r1, [r7, #0]
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	4798      	blx	r3
      break;
 801331a:	e049      	b.n	80133b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	785b      	ldrb	r3, [r3, #1]
 8013320:	2b09      	cmp	r3, #9
 8013322:	d83a      	bhi.n	801339a <USBD_StdDevReq+0xb2>
 8013324:	a201      	add	r2, pc, #4	; (adr r2, 801332c <USBD_StdDevReq+0x44>)
 8013326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801332a:	bf00      	nop
 801332c:	0801337d 	.word	0x0801337d
 8013330:	08013391 	.word	0x08013391
 8013334:	0801339b 	.word	0x0801339b
 8013338:	08013387 	.word	0x08013387
 801333c:	0801339b 	.word	0x0801339b
 8013340:	0801335f 	.word	0x0801335f
 8013344:	08013355 	.word	0x08013355
 8013348:	0801339b 	.word	0x0801339b
 801334c:	08013373 	.word	0x08013373
 8013350:	08013369 	.word	0x08013369
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013354:	6839      	ldr	r1, [r7, #0]
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f000 f99c 	bl	8013694 <USBD_GetDescriptor>
          break;
 801335c:	e022      	b.n	80133a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801335e:	6839      	ldr	r1, [r7, #0]
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f000 faff 	bl	8013964 <USBD_SetAddress>
          break;
 8013366:	e01d      	b.n	80133a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8013368:	6839      	ldr	r1, [r7, #0]
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f000 fb3c 	bl	80139e8 <USBD_SetConfig>
          break;
 8013370:	e018      	b.n	80133a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013372:	6839      	ldr	r1, [r7, #0]
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f000 fbc5 	bl	8013b04 <USBD_GetConfig>
          break;
 801337a:	e013      	b.n	80133a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801337c:	6839      	ldr	r1, [r7, #0]
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f000 fbf4 	bl	8013b6c <USBD_GetStatus>
          break;
 8013384:	e00e      	b.n	80133a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013386:	6839      	ldr	r1, [r7, #0]
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f000 fc22 	bl	8013bd2 <USBD_SetFeature>
          break;
 801338e:	e009      	b.n	80133a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013390:	6839      	ldr	r1, [r7, #0]
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f000 fc31 	bl	8013bfa <USBD_ClrFeature>
          break;
 8013398:	e004      	b.n	80133a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801339a:	6839      	ldr	r1, [r7, #0]
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	f000 fc89 	bl	8013cb4 <USBD_CtlError>
          break;
 80133a2:	bf00      	nop
      }
      break;
 80133a4:	e004      	b.n	80133b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80133a6:	6839      	ldr	r1, [r7, #0]
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f000 fc83 	bl	8013cb4 <USBD_CtlError>
      break;
 80133ae:	bf00      	nop
  }

  return ret;
 80133b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3710      	adds	r7, #16
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop

080133bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b084      	sub	sp, #16
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80133c6:	2300      	movs	r3, #0
 80133c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80133d2:	2b20      	cmp	r3, #32
 80133d4:	d003      	beq.n	80133de <USBD_StdItfReq+0x22>
 80133d6:	2b40      	cmp	r3, #64	; 0x40
 80133d8:	d001      	beq.n	80133de <USBD_StdItfReq+0x22>
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d12a      	bne.n	8013434 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80133e4:	3b01      	subs	r3, #1
 80133e6:	2b02      	cmp	r3, #2
 80133e8:	d81d      	bhi.n	8013426 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	889b      	ldrh	r3, [r3, #4]
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	2b03      	cmp	r3, #3
 80133f2:	d813      	bhi.n	801341c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80133fa:	689b      	ldr	r3, [r3, #8]
 80133fc:	6839      	ldr	r1, [r7, #0]
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	4798      	blx	r3
 8013402:	4603      	mov	r3, r0
 8013404:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	88db      	ldrh	r3, [r3, #6]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d110      	bne.n	8013430 <USBD_StdItfReq+0x74>
 801340e:	7bfb      	ldrb	r3, [r7, #15]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d10d      	bne.n	8013430 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f001 f84b 	bl	80144b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801341a:	e009      	b.n	8013430 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 801341c:	6839      	ldr	r1, [r7, #0]
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 fc48 	bl	8013cb4 <USBD_CtlError>
          break;
 8013424:	e004      	b.n	8013430 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8013426:	6839      	ldr	r1, [r7, #0]
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	f000 fc43 	bl	8013cb4 <USBD_CtlError>
          break;
 801342e:	e000      	b.n	8013432 <USBD_StdItfReq+0x76>
          break;
 8013430:	bf00      	nop
      }
      break;
 8013432:	e004      	b.n	801343e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8013434:	6839      	ldr	r1, [r7, #0]
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f000 fc3c 	bl	8013cb4 <USBD_CtlError>
      break;
 801343c:	bf00      	nop
  }

  return USBD_OK;
 801343e:	2300      	movs	r3, #0
}
 8013440:	4618      	mov	r0, r3
 8013442:	3710      	adds	r7, #16
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b084      	sub	sp, #16
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013452:	2300      	movs	r3, #0
 8013454:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	889b      	ldrh	r3, [r3, #4]
 801345a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013464:	2b20      	cmp	r3, #32
 8013466:	d004      	beq.n	8013472 <USBD_StdEPReq+0x2a>
 8013468:	2b40      	cmp	r3, #64	; 0x40
 801346a:	d002      	beq.n	8013472 <USBD_StdEPReq+0x2a>
 801346c:	2b00      	cmp	r3, #0
 801346e:	d008      	beq.n	8013482 <USBD_StdEPReq+0x3a>
 8013470:	e106      	b.n	8013680 <USBD_StdEPReq+0x238>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013478:	689b      	ldr	r3, [r3, #8]
 801347a:	6839      	ldr	r1, [r7, #0]
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	4798      	blx	r3
      break;
 8013480:	e103      	b.n	801368a <USBD_StdEPReq+0x242>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801348a:	2b20      	cmp	r3, #32
 801348c:	d10a      	bne.n	80134a4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013494:	689b      	ldr	r3, [r3, #8]
 8013496:	6839      	ldr	r1, [r7, #0]
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	4798      	blx	r3
 801349c:	4603      	mov	r3, r0
 801349e:	73fb      	strb	r3, [r7, #15]

        return ret;
 80134a0:	7bfb      	ldrb	r3, [r7, #15]
 80134a2:	e0f3      	b.n	801368c <USBD_StdEPReq+0x244>
      }

      switch (req->bRequest)
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	785b      	ldrb	r3, [r3, #1]
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	d03e      	beq.n	801352a <USBD_StdEPReq+0xe2>
 80134ac:	2b03      	cmp	r3, #3
 80134ae:	d002      	beq.n	80134b6 <USBD_StdEPReq+0x6e>
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d070      	beq.n	8013596 <USBD_StdEPReq+0x14e>
 80134b4:	e0de      	b.n	8013674 <USBD_StdEPReq+0x22c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80134bc:	2b02      	cmp	r3, #2
 80134be:	d002      	beq.n	80134c6 <USBD_StdEPReq+0x7e>
 80134c0:	2b03      	cmp	r3, #3
 80134c2:	d015      	beq.n	80134f0 <USBD_StdEPReq+0xa8>
 80134c4:	e02b      	b.n	801351e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80134c6:	7bbb      	ldrb	r3, [r7, #14]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d00c      	beq.n	80134e6 <USBD_StdEPReq+0x9e>
 80134cc:	7bbb      	ldrb	r3, [r7, #14]
 80134ce:	2b80      	cmp	r3, #128	; 0x80
 80134d0:	d009      	beq.n	80134e6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80134d2:	7bbb      	ldrb	r3, [r7, #14]
 80134d4:	4619      	mov	r1, r3
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f7ff fb7a 	bl	8012bd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80134dc:	2180      	movs	r1, #128	; 0x80
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f7ff fb76 	bl	8012bd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80134e4:	e020      	b.n	8013528 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80134e6:	6839      	ldr	r1, [r7, #0]
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f000 fbe3 	bl	8013cb4 <USBD_CtlError>
              break;
 80134ee:	e01b      	b.n	8013528 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	885b      	ldrh	r3, [r3, #2]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d10e      	bne.n	8013516 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80134f8:	7bbb      	ldrb	r3, [r7, #14]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00b      	beq.n	8013516 <USBD_StdEPReq+0xce>
 80134fe:	7bbb      	ldrb	r3, [r7, #14]
 8013500:	2b80      	cmp	r3, #128	; 0x80
 8013502:	d008      	beq.n	8013516 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	88db      	ldrh	r3, [r3, #6]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d104      	bne.n	8013516 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801350c:	7bbb      	ldrb	r3, [r7, #14]
 801350e:	4619      	mov	r1, r3
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f7ff fb5d 	bl	8012bd0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 ffca 	bl	80144b0 <USBD_CtlSendStatus>

              break;
 801351c:	e004      	b.n	8013528 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801351e:	6839      	ldr	r1, [r7, #0]
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f000 fbc7 	bl	8013cb4 <USBD_CtlError>
              break;
 8013526:	bf00      	nop
          }
          break;
 8013528:	e0a9      	b.n	801367e <USBD_StdEPReq+0x236>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8013530:	2b02      	cmp	r3, #2
 8013532:	d002      	beq.n	801353a <USBD_StdEPReq+0xf2>
 8013534:	2b03      	cmp	r3, #3
 8013536:	d015      	beq.n	8013564 <USBD_StdEPReq+0x11c>
 8013538:	e026      	b.n	8013588 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801353a:	7bbb      	ldrb	r3, [r7, #14]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d00c      	beq.n	801355a <USBD_StdEPReq+0x112>
 8013540:	7bbb      	ldrb	r3, [r7, #14]
 8013542:	2b80      	cmp	r3, #128	; 0x80
 8013544:	d009      	beq.n	801355a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8013546:	7bbb      	ldrb	r3, [r7, #14]
 8013548:	4619      	mov	r1, r3
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f7ff fb40 	bl	8012bd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013550:	2180      	movs	r1, #128	; 0x80
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f7ff fb3c 	bl	8012bd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013558:	e01c      	b.n	8013594 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801355a:	6839      	ldr	r1, [r7, #0]
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f000 fba9 	bl	8013cb4 <USBD_CtlError>
              break;
 8013562:	e017      	b.n	8013594 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	885b      	ldrh	r3, [r3, #2]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d112      	bne.n	8013592 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801356c:	7bbb      	ldrb	r3, [r7, #14]
 801356e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013572:	2b00      	cmp	r3, #0
 8013574:	d004      	beq.n	8013580 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8013576:	7bbb      	ldrb	r3, [r7, #14]
 8013578:	4619      	mov	r1, r3
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7ff fb47 	bl	8012c0e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f000 ff95 	bl	80144b0 <USBD_CtlSendStatus>
              }
              break;
 8013586:	e004      	b.n	8013592 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8013588:	6839      	ldr	r1, [r7, #0]
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f000 fb92 	bl	8013cb4 <USBD_CtlError>
              break;
 8013590:	e000      	b.n	8013594 <USBD_StdEPReq+0x14c>
              break;
 8013592:	bf00      	nop
          }
          break;
 8013594:	e073      	b.n	801367e <USBD_StdEPReq+0x236>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801359c:	2b02      	cmp	r3, #2
 801359e:	d002      	beq.n	80135a6 <USBD_StdEPReq+0x15e>
 80135a0:	2b03      	cmp	r3, #3
 80135a2:	d02b      	beq.n	80135fc <USBD_StdEPReq+0x1b4>
 80135a4:	e060      	b.n	8013668 <USBD_StdEPReq+0x220>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80135a6:	7bbb      	ldrb	r3, [r7, #14]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d007      	beq.n	80135bc <USBD_StdEPReq+0x174>
 80135ac:	7bbb      	ldrb	r3, [r7, #14]
 80135ae:	2b80      	cmp	r3, #128	; 0x80
 80135b0:	d004      	beq.n	80135bc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80135b2:	6839      	ldr	r1, [r7, #0]
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 fb7d 	bl	8013cb4 <USBD_CtlError>
                break;
 80135ba:	e05a      	b.n	8013672 <USBD_StdEPReq+0x22a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80135bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	da08      	bge.n	80135d6 <USBD_StdEPReq+0x18e>
 80135c4:	7bbb      	ldrb	r3, [r7, #14]
 80135c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135ca:	3301      	adds	r3, #1
 80135cc:	011b      	lsls	r3, r3, #4
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	4413      	add	r3, r2
 80135d2:	3304      	adds	r3, #4
 80135d4:	e007      	b.n	80135e6 <USBD_StdEPReq+0x19e>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80135d6:	7bbb      	ldrb	r3, [r7, #14]
 80135d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80135dc:	3310      	adds	r3, #16
 80135de:	011b      	lsls	r3, r3, #4
 80135e0:	687a      	ldr	r2, [r7, #4]
 80135e2:	4413      	add	r3, r2
 80135e4:	3304      	adds	r3, #4
 80135e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	2200      	movs	r2, #0
 80135ec:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	2202      	movs	r2, #2
 80135f2:	4619      	mov	r1, r3
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f000 fefd 	bl	80143f4 <USBD_CtlSendData>
              break;
 80135fa:	e03a      	b.n	8013672 <USBD_StdEPReq+0x22a>

            case USBD_STATE_CONFIGURED:

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80135fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013600:	2b00      	cmp	r3, #0
 8013602:	da08      	bge.n	8013616 <USBD_StdEPReq+0x1ce>
 8013604:	7bbb      	ldrb	r3, [r7, #14]
 8013606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801360a:	3301      	adds	r3, #1
 801360c:	011b      	lsls	r3, r3, #4
 801360e:	687a      	ldr	r2, [r7, #4]
 8013610:	4413      	add	r3, r2
 8013612:	3304      	adds	r3, #4
 8013614:	e007      	b.n	8013626 <USBD_StdEPReq+0x1de>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013616:	7bbb      	ldrb	r3, [r7, #14]
 8013618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801361c:	3310      	adds	r3, #16
 801361e:	011b      	lsls	r3, r3, #4
 8013620:	687a      	ldr	r2, [r7, #4]
 8013622:	4413      	add	r3, r2
 8013624:	3304      	adds	r3, #4
 8013626:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013628:	7bbb      	ldrb	r3, [r7, #14]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d002      	beq.n	8013634 <USBD_StdEPReq+0x1ec>
 801362e:	7bbb      	ldrb	r3, [r7, #14]
 8013630:	2b80      	cmp	r3, #128	; 0x80
 8013632:	d103      	bne.n	801363c <USBD_StdEPReq+0x1f4>
              {
                pep->status = 0x0000U;
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	2200      	movs	r2, #0
 8013638:	601a      	str	r2, [r3, #0]
 801363a:	e00e      	b.n	801365a <USBD_StdEPReq+0x212>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801363c:	7bbb      	ldrb	r3, [r7, #14]
 801363e:	4619      	mov	r1, r3
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7ff fb03 	bl	8012c4c <USBD_LL_IsStallEP>
 8013646:	4603      	mov	r3, r0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d003      	beq.n	8013654 <USBD_StdEPReq+0x20c>
              {
                pep->status = 0x0001U;
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	2201      	movs	r2, #1
 8013650:	601a      	str	r2, [r3, #0]
 8013652:	e002      	b.n	801365a <USBD_StdEPReq+0x212>
              }
              else
              {
                pep->status = 0x0000U;
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	2200      	movs	r2, #0
 8013658:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	2202      	movs	r2, #2
 801365e:	4619      	mov	r1, r3
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f000 fec7 	bl	80143f4 <USBD_CtlSendData>
              break;
 8013666:	e004      	b.n	8013672 <USBD_StdEPReq+0x22a>

            default:
              USBD_CtlError(pdev, req);
 8013668:	6839      	ldr	r1, [r7, #0]
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 fb22 	bl	8013cb4 <USBD_CtlError>
              break;
 8013670:	bf00      	nop
          }
          break;
 8013672:	e004      	b.n	801367e <USBD_StdEPReq+0x236>

        default:
          USBD_CtlError(pdev, req);
 8013674:	6839      	ldr	r1, [r7, #0]
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f000 fb1c 	bl	8013cb4 <USBD_CtlError>
          break;
 801367c:	bf00      	nop
      }
      break;
 801367e:	e004      	b.n	801368a <USBD_StdEPReq+0x242>

    default:
      USBD_CtlError(pdev, req);
 8013680:	6839      	ldr	r1, [r7, #0]
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f000 fb16 	bl	8013cb4 <USBD_CtlError>
      break;
 8013688:	bf00      	nop
  }

  return ret;
 801368a:	7bfb      	ldrb	r3, [r7, #15]
}
 801368c:	4618      	mov	r0, r3
 801368e:	3710      	adds	r7, #16
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801369e:	2300      	movs	r3, #0
 80136a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80136a2:	2300      	movs	r3, #0
 80136a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80136a6:	2300      	movs	r3, #0
 80136a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	885b      	ldrh	r3, [r3, #2]
 80136ae:	0a1b      	lsrs	r3, r3, #8
 80136b0:	b29b      	uxth	r3, r3
 80136b2:	3b01      	subs	r3, #1
 80136b4:	2b06      	cmp	r3, #6
 80136b6:	f200 8128 	bhi.w	801390a <USBD_GetDescriptor+0x276>
 80136ba:	a201      	add	r2, pc, #4	; (adr r2, 80136c0 <USBD_GetDescriptor+0x2c>)
 80136bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136c0:	080136dd 	.word	0x080136dd
 80136c4:	080136f5 	.word	0x080136f5
 80136c8:	08013735 	.word	0x08013735
 80136cc:	0801390b 	.word	0x0801390b
 80136d0:	0801390b 	.word	0x0801390b
 80136d4:	080138ab 	.word	0x080138ab
 80136d8:	080138d7 	.word	0x080138d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	7c12      	ldrb	r2, [r2, #16]
 80136e8:	f107 0108 	add.w	r1, r7, #8
 80136ec:	4610      	mov	r0, r2
 80136ee:	4798      	blx	r3
 80136f0:	60f8      	str	r0, [r7, #12]
      break;
 80136f2:	e112      	b.n	801391a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	7c1b      	ldrb	r3, [r3, #16]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d10d      	bne.n	8013718 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013704:	f107 0208 	add.w	r2, r7, #8
 8013708:	4610      	mov	r0, r2
 801370a:	4798      	blx	r3
 801370c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	3301      	adds	r3, #1
 8013712:	2202      	movs	r2, #2
 8013714:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013716:	e100      	b.n	801391a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013720:	f107 0208 	add.w	r2, r7, #8
 8013724:	4610      	mov	r0, r2
 8013726:	4798      	blx	r3
 8013728:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	3301      	adds	r3, #1
 801372e:	2202      	movs	r2, #2
 8013730:	701a      	strb	r2, [r3, #0]
      break;
 8013732:	e0f2      	b.n	801391a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	885b      	ldrh	r3, [r3, #2]
 8013738:	b2db      	uxtb	r3, r3
 801373a:	2b05      	cmp	r3, #5
 801373c:	f200 80ac 	bhi.w	8013898 <USBD_GetDescriptor+0x204>
 8013740:	a201      	add	r2, pc, #4	; (adr r2, 8013748 <USBD_GetDescriptor+0xb4>)
 8013742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013746:	bf00      	nop
 8013748:	08013761 	.word	0x08013761
 801374c:	08013795 	.word	0x08013795
 8013750:	080137c9 	.word	0x080137c9
 8013754:	080137fd 	.word	0x080137fd
 8013758:	08013831 	.word	0x08013831
 801375c:	08013865 	.word	0x08013865
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d00b      	beq.n	8013784 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013772:	685b      	ldr	r3, [r3, #4]
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	7c12      	ldrb	r2, [r2, #16]
 8013778:	f107 0108 	add.w	r1, r7, #8
 801377c:	4610      	mov	r0, r2
 801377e:	4798      	blx	r3
 8013780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013782:	e091      	b.n	80138a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013784:	6839      	ldr	r1, [r7, #0]
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f000 fa94 	bl	8013cb4 <USBD_CtlError>
            err++;
 801378c:	7afb      	ldrb	r3, [r7, #11]
 801378e:	3301      	adds	r3, #1
 8013790:	72fb      	strb	r3, [r7, #11]
          break;
 8013792:	e089      	b.n	80138a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801379a:	689b      	ldr	r3, [r3, #8]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00b      	beq.n	80137b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80137a6:	689b      	ldr	r3, [r3, #8]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	7c12      	ldrb	r2, [r2, #16]
 80137ac:	f107 0108 	add.w	r1, r7, #8
 80137b0:	4610      	mov	r0, r2
 80137b2:	4798      	blx	r3
 80137b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137b6:	e077      	b.n	80138a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80137b8:	6839      	ldr	r1, [r7, #0]
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f000 fa7a 	bl	8013cb4 <USBD_CtlError>
            err++;
 80137c0:	7afb      	ldrb	r3, [r7, #11]
 80137c2:	3301      	adds	r3, #1
 80137c4:	72fb      	strb	r3, [r7, #11]
          break;
 80137c6:	e06f      	b.n	80138a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d00b      	beq.n	80137ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80137da:	68db      	ldr	r3, [r3, #12]
 80137dc:	687a      	ldr	r2, [r7, #4]
 80137de:	7c12      	ldrb	r2, [r2, #16]
 80137e0:	f107 0108 	add.w	r1, r7, #8
 80137e4:	4610      	mov	r0, r2
 80137e6:	4798      	blx	r3
 80137e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137ea:	e05d      	b.n	80138a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80137ec:	6839      	ldr	r1, [r7, #0]
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f000 fa60 	bl	8013cb4 <USBD_CtlError>
            err++;
 80137f4:	7afb      	ldrb	r3, [r7, #11]
 80137f6:	3301      	adds	r3, #1
 80137f8:	72fb      	strb	r3, [r7, #11]
          break;
 80137fa:	e055      	b.n	80138a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013802:	691b      	ldr	r3, [r3, #16]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d00b      	beq.n	8013820 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801380e:	691b      	ldr	r3, [r3, #16]
 8013810:	687a      	ldr	r2, [r7, #4]
 8013812:	7c12      	ldrb	r2, [r2, #16]
 8013814:	f107 0108 	add.w	r1, r7, #8
 8013818:	4610      	mov	r0, r2
 801381a:	4798      	blx	r3
 801381c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801381e:	e043      	b.n	80138a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013820:	6839      	ldr	r1, [r7, #0]
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f000 fa46 	bl	8013cb4 <USBD_CtlError>
            err++;
 8013828:	7afb      	ldrb	r3, [r7, #11]
 801382a:	3301      	adds	r3, #1
 801382c:	72fb      	strb	r3, [r7, #11]
          break;
 801382e:	e03b      	b.n	80138a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013836:	695b      	ldr	r3, [r3, #20]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d00b      	beq.n	8013854 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013842:	695b      	ldr	r3, [r3, #20]
 8013844:	687a      	ldr	r2, [r7, #4]
 8013846:	7c12      	ldrb	r2, [r2, #16]
 8013848:	f107 0108 	add.w	r1, r7, #8
 801384c:	4610      	mov	r0, r2
 801384e:	4798      	blx	r3
 8013850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013852:	e029      	b.n	80138a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013854:	6839      	ldr	r1, [r7, #0]
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f000 fa2c 	bl	8013cb4 <USBD_CtlError>
            err++;
 801385c:	7afb      	ldrb	r3, [r7, #11]
 801385e:	3301      	adds	r3, #1
 8013860:	72fb      	strb	r3, [r7, #11]
          break;
 8013862:	e021      	b.n	80138a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801386a:	699b      	ldr	r3, [r3, #24]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00b      	beq.n	8013888 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013876:	699b      	ldr	r3, [r3, #24]
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	7c12      	ldrb	r2, [r2, #16]
 801387c:	f107 0108 	add.w	r1, r7, #8
 8013880:	4610      	mov	r0, r2
 8013882:	4798      	blx	r3
 8013884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013886:	e00f      	b.n	80138a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013888:	6839      	ldr	r1, [r7, #0]
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f000 fa12 	bl	8013cb4 <USBD_CtlError>
            err++;
 8013890:	7afb      	ldrb	r3, [r7, #11]
 8013892:	3301      	adds	r3, #1
 8013894:	72fb      	strb	r3, [r7, #11]
          break;
 8013896:	e007      	b.n	80138a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8013898:	6839      	ldr	r1, [r7, #0]
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 fa0a 	bl	8013cb4 <USBD_CtlError>
          err++;
 80138a0:	7afb      	ldrb	r3, [r7, #11]
 80138a2:	3301      	adds	r3, #1
 80138a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80138a6:	e038      	b.n	801391a <USBD_GetDescriptor+0x286>
 80138a8:	e037      	b.n	801391a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	7c1b      	ldrb	r3, [r3, #16]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d109      	bne.n	80138c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80138b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138ba:	f107 0208 	add.w	r2, r7, #8
 80138be:	4610      	mov	r0, r2
 80138c0:	4798      	blx	r3
 80138c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80138c4:	e029      	b.n	801391a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80138c6:	6839      	ldr	r1, [r7, #0]
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	f000 f9f3 	bl	8013cb4 <USBD_CtlError>
        err++;
 80138ce:	7afb      	ldrb	r3, [r7, #11]
 80138d0:	3301      	adds	r3, #1
 80138d2:	72fb      	strb	r3, [r7, #11]
      break;
 80138d4:	e021      	b.n	801391a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	7c1b      	ldrb	r3, [r3, #16]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d10d      	bne.n	80138fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80138e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138e6:	f107 0208 	add.w	r2, r7, #8
 80138ea:	4610      	mov	r0, r2
 80138ec:	4798      	blx	r3
 80138ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	3301      	adds	r3, #1
 80138f4:	2207      	movs	r2, #7
 80138f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80138f8:	e00f      	b.n	801391a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80138fa:	6839      	ldr	r1, [r7, #0]
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f000 f9d9 	bl	8013cb4 <USBD_CtlError>
        err++;
 8013902:	7afb      	ldrb	r3, [r7, #11]
 8013904:	3301      	adds	r3, #1
 8013906:	72fb      	strb	r3, [r7, #11]
      break;
 8013908:	e007      	b.n	801391a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801390a:	6839      	ldr	r1, [r7, #0]
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f000 f9d1 	bl	8013cb4 <USBD_CtlError>
      err++;
 8013912:	7afb      	ldrb	r3, [r7, #11]
 8013914:	3301      	adds	r3, #1
 8013916:	72fb      	strb	r3, [r7, #11]
      break;
 8013918:	bf00      	nop
  }

  if (err != 0U)
 801391a:	7afb      	ldrb	r3, [r7, #11]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d11c      	bne.n	801395a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8013920:	893b      	ldrh	r3, [r7, #8]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d011      	beq.n	801394a <USBD_GetDescriptor+0x2b6>
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	88db      	ldrh	r3, [r3, #6]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d00d      	beq.n	801394a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	88da      	ldrh	r2, [r3, #6]
 8013932:	893b      	ldrh	r3, [r7, #8]
 8013934:	4293      	cmp	r3, r2
 8013936:	bf28      	it	cs
 8013938:	4613      	movcs	r3, r2
 801393a:	b29b      	uxth	r3, r3
 801393c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801393e:	893b      	ldrh	r3, [r7, #8]
 8013940:	461a      	mov	r2, r3
 8013942:	68f9      	ldr	r1, [r7, #12]
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f000 fd55 	bl	80143f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	88db      	ldrh	r3, [r3, #6]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d104      	bne.n	801395c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f000 fdac 	bl	80144b0 <USBD_CtlSendStatus>
 8013958:	e000      	b.n	801395c <USBD_GetDescriptor+0x2c8>
    return;
 801395a:	bf00      	nop
    }
  }
}
 801395c:	3710      	adds	r7, #16
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop

08013964 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b084      	sub	sp, #16
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	889b      	ldrh	r3, [r3, #4]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d130      	bne.n	80139d8 <USBD_SetAddress+0x74>
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	88db      	ldrh	r3, [r3, #6]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d12c      	bne.n	80139d8 <USBD_SetAddress+0x74>
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	885b      	ldrh	r3, [r3, #2]
 8013982:	2b7f      	cmp	r3, #127	; 0x7f
 8013984:	d828      	bhi.n	80139d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	885b      	ldrh	r3, [r3, #2]
 801398a:	b2db      	uxtb	r3, r3
 801398c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8013998:	2b03      	cmp	r3, #3
 801399a:	d104      	bne.n	80139a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801399c:	6839      	ldr	r1, [r7, #0]
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f000 f988 	bl	8013cb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139a4:	e01c      	b.n	80139e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	7bfa      	ldrb	r2, [r7, #15]
 80139aa:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80139ae:	7bfb      	ldrb	r3, [r7, #15]
 80139b0:	4619      	mov	r1, r3
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f7ff f96f 	bl	8012c96 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f000 fd79 	bl	80144b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80139be:	7bfb      	ldrb	r3, [r7, #15]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d004      	beq.n	80139ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2202      	movs	r2, #2
 80139c8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139cc:	e008      	b.n	80139e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2201      	movs	r2, #1
 80139d2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139d6:	e003      	b.n	80139e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80139d8:	6839      	ldr	r1, [r7, #0]
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f000 f96a 	bl	8013cb4 <USBD_CtlError>
  }
}
 80139e0:	bf00      	nop
 80139e2:	3710      	adds	r7, #16
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}

080139e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	885b      	ldrh	r3, [r3, #2]
 80139f6:	b2da      	uxtb	r2, r3
 80139f8:	4b41      	ldr	r3, [pc, #260]	; (8013b00 <USBD_SetConfig+0x118>)
 80139fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80139fc:	4b40      	ldr	r3, [pc, #256]	; (8013b00 <USBD_SetConfig+0x118>)
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d904      	bls.n	8013a0e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8013a04:	6839      	ldr	r1, [r7, #0]
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f000 f954 	bl	8013cb4 <USBD_CtlError>
 8013a0c:	e075      	b.n	8013afa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8013a14:	2b02      	cmp	r3, #2
 8013a16:	d002      	beq.n	8013a1e <USBD_SetConfig+0x36>
 8013a18:	2b03      	cmp	r3, #3
 8013a1a:	d023      	beq.n	8013a64 <USBD_SetConfig+0x7c>
 8013a1c:	e062      	b.n	8013ae4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8013a1e:	4b38      	ldr	r3, [pc, #224]	; (8013b00 <USBD_SetConfig+0x118>)
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d01a      	beq.n	8013a5c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8013a26:	4b36      	ldr	r3, [pc, #216]	; (8013b00 <USBD_SetConfig+0x118>)
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2203      	movs	r2, #3
 8013a34:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013a38:	4b31      	ldr	r3, [pc, #196]	; (8013b00 <USBD_SetConfig+0x118>)
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f7ff fa32 	bl	8012ea8 <USBD_SetClassConfig>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b02      	cmp	r3, #2
 8013a48:	d104      	bne.n	8013a54 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8013a4a:	6839      	ldr	r1, [r7, #0]
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f000 f931 	bl	8013cb4 <USBD_CtlError>
            return;
 8013a52:	e052      	b.n	8013afa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f000 fd2b 	bl	80144b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013a5a:	e04e      	b.n	8013afa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f000 fd27 	bl	80144b0 <USBD_CtlSendStatus>
        break;
 8013a62:	e04a      	b.n	8013afa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8013a64:	4b26      	ldr	r3, [pc, #152]	; (8013b00 <USBD_SetConfig+0x118>)
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d112      	bne.n	8013a92 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2202      	movs	r2, #2
 8013a70:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
          pdev->dev_config = cfgidx;
 8013a74:	4b22      	ldr	r3, [pc, #136]	; (8013b00 <USBD_SetConfig+0x118>)
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	461a      	mov	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8013a7e:	4b20      	ldr	r3, [pc, #128]	; (8013b00 <USBD_SetConfig+0x118>)
 8013a80:	781b      	ldrb	r3, [r3, #0]
 8013a82:	4619      	mov	r1, r3
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f7ff fa2e 	bl	8012ee6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f000 fd10 	bl	80144b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013a90:	e033      	b.n	8013afa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8013a92:	4b1b      	ldr	r3, [pc, #108]	; (8013b00 <USBD_SetConfig+0x118>)
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	461a      	mov	r2, r3
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	685b      	ldr	r3, [r3, #4]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d01d      	beq.n	8013adc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7ff fa1c 	bl	8012ee6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8013aae:	4b14      	ldr	r3, [pc, #80]	; (8013b00 <USBD_SetConfig+0x118>)
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013ab8:	4b11      	ldr	r3, [pc, #68]	; (8013b00 <USBD_SetConfig+0x118>)
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	4619      	mov	r1, r3
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f7ff f9f2 	bl	8012ea8 <USBD_SetClassConfig>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b02      	cmp	r3, #2
 8013ac8:	d104      	bne.n	8013ad4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8013aca:	6839      	ldr	r1, [r7, #0]
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f000 f8f1 	bl	8013cb4 <USBD_CtlError>
            return;
 8013ad2:	e012      	b.n	8013afa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f000 fceb 	bl	80144b0 <USBD_CtlSendStatus>
        break;
 8013ada:	e00e      	b.n	8013afa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f000 fce7 	bl	80144b0 <USBD_CtlSendStatus>
        break;
 8013ae2:	e00a      	b.n	8013afa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8013ae4:	6839      	ldr	r1, [r7, #0]
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	f000 f8e4 	bl	8013cb4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8013aec:	4b04      	ldr	r3, [pc, #16]	; (8013b00 <USBD_SetConfig+0x118>)
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	4619      	mov	r1, r3
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f7ff f9f7 	bl	8012ee6 <USBD_ClrClassConfig>
        break;
 8013af8:	bf00      	nop
    }
  }
}
 8013afa:	3708      	adds	r7, #8
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	20001500 	.word	0x20001500

08013b04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	88db      	ldrh	r3, [r3, #6]
 8013b12:	2b01      	cmp	r3, #1
 8013b14:	d004      	beq.n	8013b20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013b16:	6839      	ldr	r1, [r7, #0]
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f000 f8cb 	bl	8013cb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013b1e:	e021      	b.n	8013b64 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	db17      	blt.n	8013b5a <USBD_GetConfig+0x56>
 8013b2a:	2b02      	cmp	r3, #2
 8013b2c:	dd02      	ble.n	8013b34 <USBD_GetConfig+0x30>
 8013b2e:	2b03      	cmp	r3, #3
 8013b30:	d00b      	beq.n	8013b4a <USBD_GetConfig+0x46>
 8013b32:	e012      	b.n	8013b5a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2200      	movs	r2, #0
 8013b38:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	3308      	adds	r3, #8
 8013b3e:	2201      	movs	r2, #1
 8013b40:	4619      	mov	r1, r3
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f000 fc56 	bl	80143f4 <USBD_CtlSendData>
        break;
 8013b48:	e00c      	b.n	8013b64 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	3304      	adds	r3, #4
 8013b4e:	2201      	movs	r2, #1
 8013b50:	4619      	mov	r1, r3
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f000 fc4e 	bl	80143f4 <USBD_CtlSendData>
        break;
 8013b58:	e004      	b.n	8013b64 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8013b5a:	6839      	ldr	r1, [r7, #0]
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f000 f8a9 	bl	8013cb4 <USBD_CtlError>
        break;
 8013b62:	bf00      	nop
}
 8013b64:	bf00      	nop
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b082      	sub	sp, #8
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8013b7c:	3b01      	subs	r3, #1
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	d81e      	bhi.n	8013bc0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	88db      	ldrh	r3, [r3, #6]
 8013b86:	2b02      	cmp	r3, #2
 8013b88:	d004      	beq.n	8013b94 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8013b8a:	6839      	ldr	r1, [r7, #0]
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f000 f891 	bl	8013cb4 <USBD_CtlError>
        break;
 8013b92:	e01a      	b.n	8013bca <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2201      	movs	r2, #1
 8013b98:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d005      	beq.n	8013bb0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	68db      	ldr	r3, [r3, #12]
 8013ba8:	f043 0202 	orr.w	r2, r3, #2
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	330c      	adds	r3, #12
 8013bb4:	2202      	movs	r2, #2
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f000 fc1b 	bl	80143f4 <USBD_CtlSendData>
      break;
 8013bbe:	e004      	b.n	8013bca <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8013bc0:	6839      	ldr	r1, [r7, #0]
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f000 f876 	bl	8013cb4 <USBD_CtlError>
      break;
 8013bc8:	bf00      	nop
  }
}
 8013bca:	bf00      	nop
 8013bcc:	3708      	adds	r7, #8
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}

08013bd2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013bd2:	b580      	push	{r7, lr}
 8013bd4:	b082      	sub	sp, #8
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
 8013bda:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	885b      	ldrh	r3, [r3, #2]
 8013be0:	2b01      	cmp	r3, #1
 8013be2:	d106      	bne.n	8013bf2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2201      	movs	r2, #1
 8013be8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    USBD_CtlSendStatus(pdev);
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f000 fc5f 	bl	80144b0 <USBD_CtlSendStatus>
  }
}
 8013bf2:	bf00      	nop
 8013bf4:	3708      	adds	r7, #8
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b082      	sub	sp, #8
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
 8013c02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8013c0a:	3b01      	subs	r3, #1
 8013c0c:	2b02      	cmp	r3, #2
 8013c0e:	d80b      	bhi.n	8013c28 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	885b      	ldrh	r3, [r3, #2]
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	d10c      	bne.n	8013c32 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        USBD_CtlSendStatus(pdev);
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f000 fc45 	bl	80144b0 <USBD_CtlSendStatus>
      }
      break;
 8013c26:	e004      	b.n	8013c32 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8013c28:	6839      	ldr	r1, [r7, #0]
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f000 f842 	bl	8013cb4 <USBD_CtlError>
      break;
 8013c30:	e000      	b.n	8013c34 <USBD_ClrFeature+0x3a>
      break;
 8013c32:	bf00      	nop
  }
}
 8013c34:	bf00      	nop
 8013c36:	3708      	adds	r7, #8
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b083      	sub	sp, #12
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	781a      	ldrb	r2, [r3, #0]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	785a      	ldrb	r2, [r3, #1]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	3302      	adds	r3, #2
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	b29a      	uxth	r2, r3
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	3303      	adds	r3, #3
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	021b      	lsls	r3, r3, #8
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	4413      	add	r3, r2
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	3304      	adds	r3, #4
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	b29a      	uxth	r2, r3
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	3305      	adds	r3, #5
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	b29b      	uxth	r3, r3
 8013c82:	021b      	lsls	r3, r3, #8
 8013c84:	b29b      	uxth	r3, r3
 8013c86:	4413      	add	r3, r2
 8013c88:	b29a      	uxth	r2, r3
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	3306      	adds	r3, #6
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	3307      	adds	r3, #7
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	021b      	lsls	r3, r3, #8
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	4413      	add	r3, r2
 8013ca4:	b29a      	uxth	r2, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	80da      	strh	r2, [r3, #6]

}
 8013caa:	bf00      	nop
 8013cac:	370c      	adds	r7, #12
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bc80      	pop	{r7}
 8013cb2:	4770      	bx	lr

08013cb4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b082      	sub	sp, #8
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8013cbe:	2180      	movs	r1, #128	; 0x80
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f7fe ff85 	bl	8012bd0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8013cc6:	2100      	movs	r1, #0
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f7fe ff81 	bl	8012bd0 <USBD_LL_StallEP>
}
 8013cce:	bf00      	nop
 8013cd0:	3708      	adds	r7, #8
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}

08013cd6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013cd6:	b580      	push	{r7, lr}
 8013cd8:	b086      	sub	sp, #24
 8013cda:	af00      	add	r7, sp, #0
 8013cdc:	60f8      	str	r0, [r7, #12]
 8013cde:	60b9      	str	r1, [r7, #8]
 8013ce0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d032      	beq.n	8013d52 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8013cec:	68f8      	ldr	r0, [r7, #12]
 8013cee:	f000 f834 	bl	8013d5a <USBD_GetLen>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	3301      	adds	r3, #1
 8013cf6:	b29b      	uxth	r3, r3
 8013cf8:	005b      	lsls	r3, r3, #1
 8013cfa:	b29a      	uxth	r2, r3
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8013d00:	7dfb      	ldrb	r3, [r7, #23]
 8013d02:	1c5a      	adds	r2, r3, #1
 8013d04:	75fa      	strb	r2, [r7, #23]
 8013d06:	461a      	mov	r2, r3
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	4413      	add	r3, r2
 8013d0c:	687a      	ldr	r2, [r7, #4]
 8013d0e:	7812      	ldrb	r2, [r2, #0]
 8013d10:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8013d12:	7dfb      	ldrb	r3, [r7, #23]
 8013d14:	1c5a      	adds	r2, r3, #1
 8013d16:	75fa      	strb	r2, [r7, #23]
 8013d18:	461a      	mov	r2, r3
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	2203      	movs	r2, #3
 8013d20:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8013d22:	e012      	b.n	8013d4a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	1c5a      	adds	r2, r3, #1
 8013d28:	60fa      	str	r2, [r7, #12]
 8013d2a:	7dfa      	ldrb	r2, [r7, #23]
 8013d2c:	1c51      	adds	r1, r2, #1
 8013d2e:	75f9      	strb	r1, [r7, #23]
 8013d30:	4611      	mov	r1, r2
 8013d32:	68ba      	ldr	r2, [r7, #8]
 8013d34:	440a      	add	r2, r1
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8013d3a:	7dfb      	ldrb	r3, [r7, #23]
 8013d3c:	1c5a      	adds	r2, r3, #1
 8013d3e:	75fa      	strb	r2, [r7, #23]
 8013d40:	461a      	mov	r2, r3
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	4413      	add	r3, r2
 8013d46:	2200      	movs	r2, #0
 8013d48:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	781b      	ldrb	r3, [r3, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d1e8      	bne.n	8013d24 <USBD_GetString+0x4e>
    }
  }
}
 8013d52:	bf00      	nop
 8013d54:	3718      	adds	r7, #24
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}

08013d5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013d5a:	b480      	push	{r7}
 8013d5c:	b085      	sub	sp, #20
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013d62:	2300      	movs	r3, #0
 8013d64:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8013d66:	e005      	b.n	8013d74 <USBD_GetLen+0x1a>
  {
    len++;
 8013d68:	7bfb      	ldrb	r3, [r7, #15]
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	3301      	adds	r3, #1
 8013d72:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	781b      	ldrb	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d1f5      	bne.n	8013d68 <USBD_GetLen+0xe>
  }

  return len;
 8013d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3714      	adds	r7, #20
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bc80      	pop	{r7}
 8013d86:	4770      	bx	lr

08013d88 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013d8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bc80      	pop	{r7}
 8013d94:	4770      	bx	lr

08013d96 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8013d96:	b480      	push	{r7}
 8013d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8013d9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	bc80      	pop	{r7}
 8013da2:	4770      	bx	lr

08013da4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* report)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
	 USBD_OutEvent_HID(report);
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f7fd fab1 	bl	8011314 <USBD_OutEvent_HID>
 /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8013db2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	3708      	adds	r7, #8
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <CUSTOM_HID_GetEvent_FS>:

/* USER CODE BEGIN 7 */
static int8_t CUSTOM_HID_GetEvent_FS(USBD_SetupReqTypedef* req,uint8_t** return_buf)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_GetEvent_HID((req->wValue & 0xff),req->wLength,return_buf);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	885b      	ldrh	r3, [r3, #2]
 8013dca:	b2d8      	uxtb	r0, r3
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	88db      	ldrh	r3, [r3, #6]
 8013dd0:	683a      	ldr	r2, [r7, #0]
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	f7fd fab6 	bl	8011344 <USBD_GetEvent_HID>
  return (USBD_OK);
 8013dd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3708      	adds	r7, #8
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}

08013de2 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b084      	sub	sp, #16
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
 8013dea:	460b      	mov	r3, r1
 8013dec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8013dee:	2300      	movs	r3, #0
 8013df0:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8013df2:	2340      	movs	r3, #64	; 0x40
 8013df4:	2203      	movs	r2, #3
 8013df6:	2183      	movs	r1, #131	; 0x83
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f7fe fea4 	bl	8012b46 <USBD_LL_OpenEP>
		  	  	 USBD_EP_TYPE_INTR,
				 CUSTOM_HID_EPIN_SIZE);


  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8013dfe:	2340      	movs	r3, #64	; 0x40
 8013e00:	2203      	movs	r2, #3
 8013e02:	2102      	movs	r1, #2
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	f7fe fe9e 	bl	8012b46 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);



  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8013e0a:	f44f 7005 	mov.w	r0, #532	; 0x214
 8013e0e:	f003 fd59 	bl	80178c4 <malloc>
 8013e12:	4603      	mov	r3, r0
 8013e14:	461a      	mov	r2, r3
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->pClassData == NULL)
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d102      	bne.n	8013e2c <USBD_CUSTOM_HID_Init+0x4a>
  {
    ret = 1U;
 8013e26:	2301      	movs	r3, #1
 8013e28:	73fb      	strb	r3, [r7, #15]
 8013e2a:	e013      	b.n	8013e54 <USBD_CUSTOM_HID_Init+0x72>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013e32:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	2200      	movs	r2, #0
 8013e38:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8013e42:	685b      	ldr	r3, [r3, #4]
 8013e44:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8013e46:	68ba      	ldr	r2, [r7, #8]
 8013e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e4c:	2102      	movs	r1, #2
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f7fe ff63 	bl	8012d1a <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8013e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3710      	adds	r7, #16
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}

08013e5e <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b082      	sub	sp, #8
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
 8013e66:	460b      	mov	r3, r1
 8013e68:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8013e6a:	2183      	movs	r1, #131	; 0x83
 8013e6c:	6878      	ldr	r0, [r7, #4]
 8013e6e:	f7fe fe90 	bl	8012b92 <USBD_LL_CloseEP>


  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8013e72:	2102      	movs	r1, #2
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f7fe fe8c 	bl	8012b92 <USBD_LL_CloseEP>


  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d00e      	beq.n	8013ea2 <USBD_CUSTOM_HID_DeInit+0x44>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8013e8a:	689b      	ldr	r3, [r3, #8]
 8013e8c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013e94:	4618      	mov	r0, r3
 8013e96:	f003 fd1d 	bl	80178d4 <free>
    pdev->pClassData = NULL;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  return USBD_OK;
 8013ea2:	2300      	movs	r3, #0
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3708      	adds	r7, #8
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}

08013eac <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b088      	sub	sp, #32
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013ebc:	613b      	str	r3, [r7, #16]

  uint8_t* get_feature_return_buf;
  uint16_t len = 0U;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d076      	beq.n	8013fc8 <USBD_CUSTOM_HID_Setup+0x11c>
 8013eda:	2b20      	cmp	r3, #32
 8013edc:	f040 8102 	bne.w	80140e4 <USBD_CUSTOM_HID_Setup+0x238>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	785b      	ldrb	r3, [r3, #1]
 8013ee4:	3b01      	subs	r3, #1
 8013ee6:	2b0a      	cmp	r3, #10
 8013ee8:	d866      	bhi.n	8013fb8 <USBD_CUSTOM_HID_Setup+0x10c>
 8013eea:	a201      	add	r2, pc, #4	; (adr r2, 8013ef0 <USBD_CUSTOM_HID_Setup+0x44>)
 8013eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ef0:	08013f7d 	.word	0x08013f7d
 8013ef4:	08013f53 	.word	0x08013f53
 8013ef8:	08013f2d 	.word	0x08013f2d
 8013efc:	08013fb9 	.word	0x08013fb9
 8013f00:	08013fb9 	.word	0x08013fb9
 8013f04:	08013fb9 	.word	0x08013fb9
 8013f08:	08013fb9 	.word	0x08013fb9
 8013f0c:	08013fb9 	.word	0x08013fb9
 8013f10:	08013f65 	.word	0x08013f65
 8013f14:	08013f3f 	.word	0x08013f3f
 8013f18:	08013f1d 	.word	0x08013f1d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	885b      	ldrh	r3, [r3, #2]
 8013f20:	b2db      	uxtb	r3, r3
 8013f22:	461a      	mov	r2, r3
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
          break;
 8013f2a:	e04c      	b.n	8013fc6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013f32:	2201      	movs	r2, #1
 8013f34:	4619      	mov	r1, r3
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 fa5c 	bl	80143f4 <USBD_CtlSendData>
          break;
 8013f3c:	e043      	b.n	8013fc6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	885b      	ldrh	r3, [r3, #2]
 8013f42:	0a1b      	lsrs	r3, r3, #8
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	461a      	mov	r2, r3
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
          break;
 8013f50:	e039      	b.n	8013fc6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8013f58:	2201      	movs	r2, #1
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f000 fa49 	bl	80143f4 <USBD_CtlSendData>
          break;
 8013f62:	e030      	b.n	8013fc6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8013f64:	693b      	ldr	r3, [r7, #16]
 8013f66:	2201      	movs	r2, #1
 8013f68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8013f6c:	6939      	ldr	r1, [r7, #16]
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	88db      	ldrh	r3, [r3, #6]
 8013f72:	461a      	mov	r2, r3
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f000 fa6b 	bl	8014450 <USBD_CtlPrepareRx>
          break;
 8013f7a:	e024      	b.n	8013fc6 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_REPORT: //TODO: check get reports
          get_feature_return_buf = 0;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	60fb      	str	r3, [r7, #12]
          ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->GetEvent(req, &get_feature_return_buf);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8013f86:	691b      	ldr	r3, [r3, #16]
 8013f88:	f107 020c 	add.w	r2, r7, #12
 8013f8c:	4611      	mov	r1, r2
 8013f8e:	6838      	ldr	r0, [r7, #0]
 8013f90:	4798      	blx	r3
          // user must set return buffer in callback now
          if(get_feature_return_buf == 0){
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d105      	bne.n	8013fa4 <USBD_CUSTOM_HID_Setup+0xf8>
        	  USBD_CtlError (pdev, req);
 8013f98:	6839      	ldr	r1, [r7, #0]
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f7ff fe8a 	bl	8013cb4 <USBD_CtlError>
        	  return USBD_FAIL;
 8013fa0:	2302      	movs	r3, #2
 8013fa2:	e0a7      	b.n	80140f4 <USBD_CUSTOM_HID_Setup+0x248>
           }else{
        	   USBD_CtlSendData (pdev, get_feature_return_buf, (uint8_t)(req->wLength));
 8013fa4:	68f9      	ldr	r1, [r7, #12]
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	88db      	ldrh	r3, [r3, #6]
 8013faa:	b2db      	uxtb	r3, r3
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	461a      	mov	r2, r3
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f000 fa1f 	bl	80143f4 <USBD_CtlSendData>
            }

          break;
 8013fb6:	e006      	b.n	8013fc6 <USBD_CUSTOM_HID_Setup+0x11a>
        default:
          USBD_CtlError(pdev, req);
 8013fb8:	6839      	ldr	r1, [r7, #0]
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7ff fe7a 	bl	8013cb4 <USBD_CtlError>
          ret = USBD_FAIL;
 8013fc0:	2302      	movs	r3, #2
 8013fc2:	75fb      	strb	r3, [r7, #23]
          break;
 8013fc4:	bf00      	nop
      }
      break;
 8013fc6:	e094      	b.n	80140f2 <USBD_CUSTOM_HID_Setup+0x246>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	785b      	ldrb	r3, [r3, #1]
 8013fcc:	2b0b      	cmp	r3, #11
 8013fce:	f200 8081 	bhi.w	80140d4 <USBD_CUSTOM_HID_Setup+0x228>
 8013fd2:	a201      	add	r2, pc, #4	; (adr r2, 8013fd8 <USBD_CUSTOM_HID_Setup+0x12c>)
 8013fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fd8:	08014009 	.word	0x08014009
 8013fdc:	080140d5 	.word	0x080140d5
 8013fe0:	080140d5 	.word	0x080140d5
 8013fe4:	080140d5 	.word	0x080140d5
 8013fe8:	080140d5 	.word	0x080140d5
 8013fec:	080140d5 	.word	0x080140d5
 8013ff0:	08014031 	.word	0x08014031
 8013ff4:	080140d5 	.word	0x080140d5
 8013ff8:	080140d5 	.word	0x080140d5
 8013ffc:	080140d5 	.word	0x080140d5
 8014000:	08014083 	.word	0x08014083
 8014004:	080140ad 	.word	0x080140ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801400e:	2b03      	cmp	r3, #3
 8014010:	d107      	bne.n	8014022 <USBD_CUSTOM_HID_Setup+0x176>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8014012:	f107 030a 	add.w	r3, r7, #10
 8014016:	2202      	movs	r2, #2
 8014018:	4619      	mov	r1, r3
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f000 f9ea 	bl	80143f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014020:	e05f      	b.n	80140e2 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f7ff fe45 	bl	8013cb4 <USBD_CtlError>
            ret = USBD_FAIL;
 801402a:	2302      	movs	r3, #2
 801402c:	75fb      	strb	r3, [r7, #23]
          break;
 801402e:	e058      	b.n	80140e2 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	885b      	ldrh	r3, [r3, #2]
 8014034:	0a1b      	lsrs	r3, r3, #8
 8014036:	b29b      	uxth	r3, r3
 8014038:	2b22      	cmp	r3, #34	; 0x22
 801403a:	d10d      	bne.n	8014058 <USBD_CUSTOM_HID_Setup+0x1ac>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	88db      	ldrh	r3, [r3, #6]
 8014040:	f240 42f3 	movw	r2, #1267	; 0x4f3
 8014044:	4293      	cmp	r3, r2
 8014046:	bf28      	it	cs
 8014048:	4613      	movcs	r3, r2
 801404a:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	61bb      	str	r3, [r7, #24]
 8014056:	e00d      	b.n	8014074 <USBD_CUSTOM_HID_Setup+0x1c8>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	885b      	ldrh	r3, [r3, #2]
 801405c:	0a1b      	lsrs	r3, r3, #8
 801405e:	b29b      	uxth	r3, r3
 8014060:	2b21      	cmp	r3, #33	; 0x21
 8014062:	d107      	bne.n	8014074 <USBD_CUSTOM_HID_Setup+0x1c8>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8014064:	4b25      	ldr	r3, [pc, #148]	; (80140fc <USBD_CUSTOM_HID_Setup+0x250>)
 8014066:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	88db      	ldrh	r3, [r3, #6]
 801406c:	2b09      	cmp	r3, #9
 801406e:	bf28      	it	cs
 8014070:	2309      	movcs	r3, #9
 8014072:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8014074:	8bfb      	ldrh	r3, [r7, #30]
 8014076:	461a      	mov	r2, r3
 8014078:	69b9      	ldr	r1, [r7, #24]
 801407a:	6878      	ldr	r0, [r7, #4]
 801407c:	f000 f9ba 	bl	80143f4 <USBD_CtlSendData>
          break;
 8014080:	e02f      	b.n	80140e2 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014088:	2b03      	cmp	r3, #3
 801408a:	d108      	bne.n	801409e <USBD_CUSTOM_HID_Setup+0x1f2>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014092:	2201      	movs	r2, #1
 8014094:	4619      	mov	r1, r3
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f000 f9ac 	bl	80143f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801409c:	e021      	b.n	80140e2 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 801409e:	6839      	ldr	r1, [r7, #0]
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f7ff fe07 	bl	8013cb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80140a6:	2302      	movs	r3, #2
 80140a8:	75fb      	strb	r3, [r7, #23]
          break;
 80140aa:	e01a      	b.n	80140e2 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80140b2:	2b03      	cmp	r3, #3
 80140b4:	d107      	bne.n	80140c6 <USBD_CUSTOM_HID_Setup+0x21a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	885b      	ldrh	r3, [r3, #2]
 80140ba:	b2db      	uxtb	r3, r3
 80140bc:	461a      	mov	r2, r3
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80140c4:	e00d      	b.n	80140e2 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 80140c6:	6839      	ldr	r1, [r7, #0]
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f7ff fdf3 	bl	8013cb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80140ce:	2302      	movs	r3, #2
 80140d0:	75fb      	strb	r3, [r7, #23]
          break;
 80140d2:	e006      	b.n	80140e2 <USBD_CUSTOM_HID_Setup+0x236>

        default:
          USBD_CtlError(pdev, req);
 80140d4:	6839      	ldr	r1, [r7, #0]
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f7ff fdec 	bl	8013cb4 <USBD_CtlError>
          ret = USBD_FAIL;
 80140dc:	2302      	movs	r3, #2
 80140de:	75fb      	strb	r3, [r7, #23]
          break;
 80140e0:	bf00      	nop
      }
      break;
 80140e2:	e006      	b.n	80140f2 <USBD_CUSTOM_HID_Setup+0x246>

    default:
      USBD_CtlError(pdev, req);
 80140e4:	6839      	ldr	r1, [r7, #0]
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7ff fde4 	bl	8013cb4 <USBD_CtlError>
      ret = USBD_FAIL;
 80140ec:	2302      	movs	r3, #2
 80140ee:	75fb      	strb	r3, [r7, #23]
      break;
 80140f0:	bf00      	nop
  }
  return ret;
 80140f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3720      	adds	r7, #32
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	200006d8 	.word	0x200006d8

08014100 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b086      	sub	sp, #24
 8014104:	af00      	add	r7, sp, #0
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	4613      	mov	r3, r2
 801410c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014114:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801411c:	2b03      	cmp	r3, #3
 801411e:	d111      	bne.n	8014144 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8014126:	2b00      	cmp	r3, #0
 8014128:	d10a      	bne.n	8014140 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	2201      	movs	r2, #1
 801412e:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8014132:	88fb      	ldrh	r3, [r7, #6]
 8014134:	68ba      	ldr	r2, [r7, #8]
 8014136:	2183      	movs	r1, #131	; 0x83
 8014138:	68f8      	ldr	r0, [r7, #12]
 801413a:	f7fe fdcb 	bl	8012cd4 <USBD_LL_Transmit>
 801413e:	e001      	b.n	8014144 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8014140:	2301      	movs	r3, #1
 8014142:	e000      	b.n	8014146 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8014144:	2300      	movs	r3, #0
}
 8014146:	4618      	mov	r0, r3
 8014148:	3718      	adds	r7, #24
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
	...

08014150 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8014150:	b480      	push	{r7}
 8014152:	b083      	sub	sp, #12
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2229      	movs	r2, #41	; 0x29
 801415c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 801415e:	4b03      	ldr	r3, [pc, #12]	; (801416c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8014160:	4618      	mov	r0, r3
 8014162:	370c      	adds	r7, #12
 8014164:	46bd      	mov	sp, r7
 8014166:	bc80      	pop	{r7}
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop
 801416c:	20000654 	.word	0x20000654

08014170 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8014170:	b480      	push	{r7}
 8014172:	b083      	sub	sp, #12
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	2229      	movs	r2, #41	; 0x29
 801417c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 801417e:	4b03      	ldr	r3, [pc, #12]	; (801418c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8014180:	4618      	mov	r0, r3
 8014182:	370c      	adds	r7, #12
 8014184:	46bd      	mov	sp, r7
 8014186:	bc80      	pop	{r7}
 8014188:	4770      	bx	lr
 801418a:	bf00      	nop
 801418c:	20000680 	.word	0x20000680

08014190 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014190:	b480      	push	{r7}
 8014192:	b083      	sub	sp, #12
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2229      	movs	r2, #41	; 0x29
 801419c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 801419e:	4b03      	ldr	r3, [pc, #12]	; (80141ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	370c      	adds	r7, #12
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bc80      	pop	{r7}
 80141a8:	4770      	bx	lr
 80141aa:	bf00      	nop
 80141ac:	200006ac 	.word	0x200006ac

080141b0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80141b0:	b480      	push	{r7}
 80141b2:	b083      	sub	sp, #12
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	460b      	mov	r3, r1
 80141ba:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80141c2:	2200      	movs	r2, #0
 80141c4:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80141c8:	2300      	movs	r3, #0
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	370c      	adds	r7, #12
 80141ce:	46bd      	mov	sp, r7
 80141d0:	bc80      	pop	{r7}
 80141d2:	4770      	bx	lr

080141d4 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b084      	sub	sp, #16
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
 80141dc:	460b      	mov	r3, r1
 80141de:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80141e6:	60fb      	str	r3, [r7, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],hhid->Report_buf[1]);

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80141ee:	68db      	ldr	r3, [r3, #12]
 80141f0:	68fa      	ldr	r2, [r7, #12]
 80141f2:	4610      	mov	r0, r2
 80141f4:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80141f6:	68fa      	ldr	r2, [r7, #12]
 80141f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141fc:	2102      	movs	r1, #2
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7fe fd8b 	bl	8012d1a <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}

0801420e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801420e:	b580      	push	{r7, lr}
 8014210:	b084      	sub	sp, #16
 8014212:	af00      	add	r7, sp, #0
 8014214:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801421c:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8014224:	2b01      	cmp	r3, #1
 8014226:	d10a      	bne.n	801423e <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801422e:	68db      	ldr	r3, [r3, #12]
 8014230:	68fa      	ldr	r2, [r7, #12]
 8014232:	4610      	mov	r0, r2
 8014234:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	2200      	movs	r2, #0
 801423a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  }

  return USBD_OK;
 801423e:	2300      	movs	r3, #0
}
 8014240:	4618      	mov	r0, r3
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8014248:	b480      	push	{r7}
 801424a:	b083      	sub	sp, #12
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	220a      	movs	r2, #10
 8014254:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8014256:	4b03      	ldr	r3, [pc, #12]	; (8014264 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8014258:	4618      	mov	r0, r3
 801425a:	370c      	adds	r7, #12
 801425c:	46bd      	mov	sp, r7
 801425e:	bc80      	pop	{r7}
 8014260:	4770      	bx	lr
 8014262:	bf00      	nop
 8014264:	200006e4 	.word	0x200006e4

08014268 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8014268:	b480      	push	{r7}
 801426a:	b085      	sub	sp, #20
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8014272:	2302      	movs	r3, #2
 8014274:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d005      	beq.n	8014288 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	683a      	ldr	r2, [r7, #0]
 8014280:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;
 8014284:	2300      	movs	r3, #0
 8014286:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014288:	7bfb      	ldrb	r3, [r7, #15]
}
 801428a:	4618      	mov	r0, r3
 801428c:	3714      	adds	r7, #20
 801428e:	46bd      	mov	sp, r7
 8014290:	bc80      	pop	{r7}
 8014292:	4770      	bx	lr

08014294 <USBD_FS_DeviceDescriptor_Composite>:
    USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
    USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
  } ;

uint8_t * USBD_FS_DeviceDescriptor_Composite(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014294:	b480      	push	{r7}
 8014296:	b083      	sub	sp, #12
 8014298:	af00      	add	r7, sp, #0
 801429a:	4603      	mov	r3, r0
 801429c:	6039      	str	r1, [r7, #0]
 801429e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc_Composite);
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	2212      	movs	r2, #18
 80142a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc_Composite;
 80142a6:	4b03      	ldr	r3, [pc, #12]	; (80142b4 <USBD_FS_DeviceDescriptor_Composite+0x20>)
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	370c      	adds	r7, #12
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bc80      	pop	{r7}
 80142b0:	4770      	bx	lr
 80142b2:	bf00      	nop
 80142b4:	2000070c 	.word	0x2000070c

080142b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80142b8:	b480      	push	{r7}
 80142ba:	b083      	sub	sp, #12
 80142bc:	af00      	add	r7, sp, #0
 80142be:	4603      	mov	r3, r0
 80142c0:	6039      	str	r1, [r7, #0]
 80142c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	2204      	movs	r2, #4
 80142c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80142ca:	4b03      	ldr	r3, [pc, #12]	; (80142d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	370c      	adds	r7, #12
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bc80      	pop	{r7}
 80142d4:	4770      	bx	lr
 80142d6:	bf00      	nop
 80142d8:	20000720 	.word	0x20000720

080142dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	4603      	mov	r3, r0
 80142e4:	6039      	str	r1, [r7, #0]
 80142e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80142e8:	79fb      	ldrb	r3, [r7, #7]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d105      	bne.n	80142fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80142ee:	683a      	ldr	r2, [r7, #0]
 80142f0:	4907      	ldr	r1, [pc, #28]	; (8014310 <USBD_FS_ProductStrDescriptor+0x34>)
 80142f2:	4808      	ldr	r0, [pc, #32]	; (8014314 <USBD_FS_ProductStrDescriptor+0x38>)
 80142f4:	f7ff fcef 	bl	8013cd6 <USBD_GetString>
 80142f8:	e004      	b.n	8014304 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80142fa:	683a      	ldr	r2, [r7, #0]
 80142fc:	4904      	ldr	r1, [pc, #16]	; (8014310 <USBD_FS_ProductStrDescriptor+0x34>)
 80142fe:	4805      	ldr	r0, [pc, #20]	; (8014314 <USBD_FS_ProductStrDescriptor+0x38>)
 8014300:	f7ff fce9 	bl	8013cd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014304:	4b02      	ldr	r3, [pc, #8]	; (8014310 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014306:	4618      	mov	r0, r3
 8014308:	3708      	adds	r7, #8
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
 801430e:	bf00      	nop
 8014310:	20001fa0 	.word	0x20001fa0
 8014314:	08019114 	.word	0x08019114

08014318 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
 801431e:	4603      	mov	r3, r0
 8014320:	6039      	str	r1, [r7, #0]
 8014322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014324:	683a      	ldr	r2, [r7, #0]
 8014326:	4904      	ldr	r1, [pc, #16]	; (8014338 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014328:	4804      	ldr	r0, [pc, #16]	; (801433c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801432a:	f7ff fcd4 	bl	8013cd6 <USBD_GetString>
  return USBD_StrDesc;
 801432e:	4b02      	ldr	r3, [pc, #8]	; (8014338 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014330:	4618      	mov	r0, r3
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}
 8014338:	20001fa0 	.word	0x20001fa0
 801433c:	08019120 	.word	0x08019120

08014340 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
 8014346:	4603      	mov	r3, r0
 8014348:	6039      	str	r1, [r7, #0]
 801434a:	71fb      	strb	r3, [r7, #7]
	if(speed == USBD_SPEED_HIGH)
 801434c:	79fb      	ldrb	r3, [r7, #7]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d105      	bne.n	801435e <USBD_FS_SerialStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8014352:	683a      	ldr	r2, [r7, #0]
 8014354:	4907      	ldr	r1, [pc, #28]	; (8014374 <USBD_FS_SerialStrDescriptor+0x34>)
 8014356:	4808      	ldr	r0, [pc, #32]	; (8014378 <USBD_FS_SerialStrDescriptor+0x38>)
 8014358:	f7ff fcbd 	bl	8013cd6 <USBD_GetString>
 801435c:	e004      	b.n	8014368 <USBD_FS_SerialStrDescriptor+0x28>
	}
	else
	{
	    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 801435e:	683a      	ldr	r2, [r7, #0]
 8014360:	4904      	ldr	r1, [pc, #16]	; (8014374 <USBD_FS_SerialStrDescriptor+0x34>)
 8014362:	4805      	ldr	r0, [pc, #20]	; (8014378 <USBD_FS_SerialStrDescriptor+0x38>)
 8014364:	f7ff fcb7 	bl	8013cd6 <USBD_GetString>
	}
	return USBD_StrDesc;
 8014368:	4b02      	ldr	r3, [pc, #8]	; (8014374 <USBD_FS_SerialStrDescriptor+0x34>)
}
 801436a:	4618      	mov	r0, r3
 801436c:	3708      	adds	r7, #8
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	20001fa0 	.word	0x20001fa0
 8014378:	08019130 	.word	0x08019130

0801437c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	4603      	mov	r3, r0
 8014384:	6039      	str	r1, [r7, #0]
 8014386:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014388:	79fb      	ldrb	r3, [r7, #7]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d105      	bne.n	801439a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801438e:	683a      	ldr	r2, [r7, #0]
 8014390:	4907      	ldr	r1, [pc, #28]	; (80143b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014392:	4808      	ldr	r0, [pc, #32]	; (80143b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014394:	f7ff fc9f 	bl	8013cd6 <USBD_GetString>
 8014398:	e004      	b.n	80143a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801439a:	683a      	ldr	r2, [r7, #0]
 801439c:	4904      	ldr	r1, [pc, #16]	; (80143b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801439e:	4805      	ldr	r0, [pc, #20]	; (80143b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80143a0:	f7ff fc99 	bl	8013cd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80143a4:	4b02      	ldr	r3, [pc, #8]	; (80143b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3708      	adds	r7, #8
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
 80143ae:	bf00      	nop
 80143b0:	20001fa0 	.word	0x20001fa0
 80143b4:	08019140 	.word	0x08019140

080143b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	4603      	mov	r3, r0
 80143c0:	6039      	str	r1, [r7, #0]
 80143c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80143c4:	79fb      	ldrb	r3, [r7, #7]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d105      	bne.n	80143d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80143ca:	683a      	ldr	r2, [r7, #0]
 80143cc:	4907      	ldr	r1, [pc, #28]	; (80143ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80143ce:	4808      	ldr	r0, [pc, #32]	; (80143f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80143d0:	f7ff fc81 	bl	8013cd6 <USBD_GetString>
 80143d4:	e004      	b.n	80143e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80143d6:	683a      	ldr	r2, [r7, #0]
 80143d8:	4904      	ldr	r1, [pc, #16]	; (80143ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80143da:	4805      	ldr	r0, [pc, #20]	; (80143f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80143dc:	f7ff fc7b 	bl	8013cd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80143e0:	4b02      	ldr	r3, [pc, #8]	; (80143ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	3708      	adds	r7, #8
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	20001fa0 	.word	0x20001fa0
 80143f0:	08019150 	.word	0x08019150

080143f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	4613      	mov	r3, r2
 8014400:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	2202      	movs	r2, #2
 8014406:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 801440a:	88fa      	ldrh	r2, [r7, #6]
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8014410:	88fa      	ldrh	r2, [r7, #6]
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014416:	88fb      	ldrh	r3, [r7, #6]
 8014418:	68ba      	ldr	r2, [r7, #8]
 801441a:	2100      	movs	r1, #0
 801441c:	68f8      	ldr	r0, [r7, #12]
 801441e:	f7fe fc59 	bl	8012cd4 <USBD_LL_Transmit>

  return USBD_OK;
 8014422:	2300      	movs	r3, #0
}
 8014424:	4618      	mov	r0, r3
 8014426:	3710      	adds	r7, #16
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b084      	sub	sp, #16
 8014430:	af00      	add	r7, sp, #0
 8014432:	60f8      	str	r0, [r7, #12]
 8014434:	60b9      	str	r1, [r7, #8]
 8014436:	4613      	mov	r3, r2
 8014438:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801443a:	88fb      	ldrh	r3, [r7, #6]
 801443c:	68ba      	ldr	r2, [r7, #8]
 801443e:	2100      	movs	r1, #0
 8014440:	68f8      	ldr	r0, [r7, #12]
 8014442:	f7fe fc47 	bl	8012cd4 <USBD_LL_Transmit>

  return USBD_OK;
 8014446:	2300      	movs	r3, #0
}
 8014448:	4618      	mov	r0, r3
 801444a:	3710      	adds	r7, #16
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	60f8      	str	r0, [r7, #12]
 8014458:	60b9      	str	r1, [r7, #8]
 801445a:	4613      	mov	r3, r2
 801445c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	2203      	movs	r2, #3
 8014462:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8014466:	88fa      	ldrh	r2, [r7, #6]
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 801446e:	88fa      	ldrh	r2, [r7, #6]
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014476:	88fb      	ldrh	r3, [r7, #6]
 8014478:	68ba      	ldr	r2, [r7, #8]
 801447a:	2100      	movs	r1, #0
 801447c:	68f8      	ldr	r0, [r7, #12]
 801447e:	f7fe fc4c 	bl	8012d1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014482:	2300      	movs	r3, #0
}
 8014484:	4618      	mov	r0, r3
 8014486:	3710      	adds	r7, #16
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	60f8      	str	r0, [r7, #12]
 8014494:	60b9      	str	r1, [r7, #8]
 8014496:	4613      	mov	r3, r2
 8014498:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801449a:	88fb      	ldrh	r3, [r7, #6]
 801449c:	68ba      	ldr	r2, [r7, #8]
 801449e:	2100      	movs	r1, #0
 80144a0:	68f8      	ldr	r0, [r7, #12]
 80144a2:	f7fe fc3a 	bl	8012d1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144a6:	2300      	movs	r3, #0
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3710      	adds	r7, #16
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}

080144b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2204      	movs	r2, #4
 80144bc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80144c0:	2300      	movs	r3, #0
 80144c2:	2200      	movs	r2, #0
 80144c4:	2100      	movs	r1, #0
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f7fe fc04 	bl	8012cd4 <USBD_LL_Transmit>

  return USBD_OK;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3708      	adds	r7, #8
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}

080144d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80144d6:	b580      	push	{r7, lr}
 80144d8:	b082      	sub	sp, #8
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2205      	movs	r2, #5
 80144e2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80144e6:	2300      	movs	r3, #0
 80144e8:	2200      	movs	r2, #0
 80144ea:	2100      	movs	r1, #0
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	f7fe fc14 	bl	8012d1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144f2:	2300      	movs	r3, #0
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3708      	adds	r7, #8
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <_ZdlPvj>:
 80144fc:	f000 b81a 	b.w	8014534 <_ZdlPv>

08014500 <_Znwj>:
 8014500:	b510      	push	{r4, lr}
 8014502:	2800      	cmp	r0, #0
 8014504:	bf14      	ite	ne
 8014506:	4604      	movne	r4, r0
 8014508:	2401      	moveq	r4, #1
 801450a:	4620      	mov	r0, r4
 801450c:	f003 f9da 	bl	80178c4 <malloc>
 8014510:	b930      	cbnz	r0, 8014520 <_Znwj+0x20>
 8014512:	f000 f807 	bl	8014524 <_ZSt15get_new_handlerv>
 8014516:	b908      	cbnz	r0, 801451c <_Znwj+0x1c>
 8014518:	f003 f9a3 	bl	8017862 <abort>
 801451c:	4780      	blx	r0
 801451e:	e7f4      	b.n	801450a <_Znwj+0xa>
 8014520:	bd10      	pop	{r4, pc}
	...

08014524 <_ZSt15get_new_handlerv>:
 8014524:	4b02      	ldr	r3, [pc, #8]	; (8014530 <_ZSt15get_new_handlerv+0xc>)
 8014526:	6818      	ldr	r0, [r3, #0]
 8014528:	f3bf 8f5b 	dmb	ish
 801452c:	4770      	bx	lr
 801452e:	bf00      	nop
 8014530:	20001504 	.word	0x20001504

08014534 <_ZdlPv>:
 8014534:	f003 b9ce 	b.w	80178d4 <free>

08014538 <_ZNSaIcEC1Ev>:
 8014538:	4770      	bx	lr

0801453a <_ZNSaIcED1Ev>:
 801453a:	4770      	bx	lr

0801453c <_ZSt17__throw_bad_allocv>:
 801453c:	b508      	push	{r3, lr}
 801453e:	f003 f990 	bl	8017862 <abort>

08014542 <_ZSt19__throw_logic_errorPKc>:
 8014542:	b508      	push	{r3, lr}
 8014544:	f003 f98d 	bl	8017862 <abort>

08014548 <_ZSt24__throw_invalid_argumentPKc>:
 8014548:	b508      	push	{r3, lr}
 801454a:	f003 f98a 	bl	8017862 <abort>

0801454e <_ZSt20__throw_length_errorPKc>:
 801454e:	b508      	push	{r3, lr}
 8014550:	f003 f987 	bl	8017862 <abort>

08014554 <_ZSt20__throw_out_of_rangePKc>:
 8014554:	b508      	push	{r3, lr}
 8014556:	f003 f984 	bl	8017862 <abort>

0801455a <_ZSt24__throw_out_of_range_fmtPKcz>:
 801455a:	b40f      	push	{r0, r1, r2, r3}
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	f107 0410 	add.w	r4, r7, #16
 8014566:	f854 5b04 	ldr.w	r5, [r4], #4
 801456a:	4628      	mov	r0, r5
 801456c:	f7eb fdf0 	bl	8000150 <strlen>
 8014570:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8014574:	f023 0307 	bic.w	r3, r3, #7
 8014578:	ebad 0d03 	sub.w	sp, sp, r3
 801457c:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8014580:	4623      	mov	r3, r4
 8014582:	462a      	mov	r2, r5
 8014584:	4668      	mov	r0, sp
 8014586:	607c      	str	r4, [r7, #4]
 8014588:	f000 faa8 	bl	8014adc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 801458c:	f003 f969 	bl	8017862 <abort>

08014590 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8014590:	b10a      	cbz	r2, 8014596 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8014592:	f003 b9b5 	b.w	8017900 <memcmp>
 8014596:	4610      	mov	r0, r2
 8014598:	4770      	bx	lr

0801459a <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 801459a:	4613      	mov	r3, r2
 801459c:	460a      	mov	r2, r1
 801459e:	b111      	cbz	r1, 80145a6 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 80145a0:	7819      	ldrb	r1, [r3, #0]
 80145a2:	f003 b99f 	b.w	80178e4 <memchr>
 80145a6:	4608      	mov	r0, r1
 80145a8:	4770      	bx	lr

080145aa <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80145aa:	b10a      	cbz	r2, 80145b0 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80145ac:	f003 b9b7 	b.w	801791e <memcpy>
 80145b0:	4770      	bx	lr

080145b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80145b2:	6001      	str	r1, [r0, #0]
 80145b4:	4770      	bx	lr

080145b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80145b6:	6800      	ldr	r0, [r0, #0]
 80145b8:	4770      	bx	lr

080145ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80145ba:	3008      	adds	r0, #8
 80145bc:	4770      	bx	lr

080145be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80145be:	6081      	str	r1, [r0, #8]
 80145c0:	4770      	bx	lr

080145c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80145c2:	2200      	movs	r2, #0
 80145c4:	6803      	ldr	r3, [r0, #0]
 80145c6:	6041      	str	r1, [r0, #4]
 80145c8:	545a      	strb	r2, [r3, r1]
 80145ca:	4770      	bx	lr

080145cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80145cc:	b508      	push	{r3, lr}
 80145ce:	680b      	ldr	r3, [r1, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	da02      	bge.n	80145da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80145d4:	4809      	ldr	r0, [pc, #36]	; (80145fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80145d6:	f7ff ffba 	bl	801454e <_ZSt20__throw_length_errorPKc>
 80145da:	4293      	cmp	r3, r2
 80145dc:	d908      	bls.n	80145f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80145de:	0052      	lsls	r2, r2, #1
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d205      	bcs.n	80145f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80145e4:	2a00      	cmp	r2, #0
 80145e6:	bfb6      	itet	lt
 80145e8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80145ec:	600a      	strge	r2, [r1, #0]
 80145ee:	600b      	strlt	r3, [r1, #0]
 80145f0:	6808      	ldr	r0, [r1, #0]
 80145f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80145f6:	3001      	adds	r0, #1
 80145f8:	f7ff bf82 	b.w	8014500 <_Znwj>
 80145fc:	08019347 	.word	0x08019347

08014600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8014600:	4603      	mov	r3, r0
 8014602:	f853 0b08 	ldr.w	r0, [r3], #8
 8014606:	4298      	cmp	r0, r3
 8014608:	d001      	beq.n	801460e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801460a:	f7ff bf93 	b.w	8014534 <_ZdlPv>
 801460e:	4770      	bx	lr

08014610 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8014610:	b510      	push	{r4, lr}
 8014612:	6843      	ldr	r3, [r0, #4]
 8014614:	4614      	mov	r4, r2
 8014616:	4299      	cmp	r1, r3
 8014618:	d904      	bls.n	8014624 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 801461a:	460a      	mov	r2, r1
 801461c:	4802      	ldr	r0, [pc, #8]	; (8014628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 801461e:	4621      	mov	r1, r4
 8014620:	f7ff ff9b 	bl	801455a <_ZSt24__throw_out_of_range_fmtPKcz>
 8014624:	4608      	mov	r0, r1
 8014626:	bd10      	pop	{r4, pc}
 8014628:	080192d1 	.word	0x080192d1

0801462c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801462c:	b508      	push	{r3, lr}
 801462e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8014632:	6840      	ldr	r0, [r0, #4]
 8014634:	3901      	subs	r1, #1
 8014636:	1a09      	subs	r1, r1, r0
 8014638:	4291      	cmp	r1, r2
 801463a:	d202      	bcs.n	8014642 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801463c:	4618      	mov	r0, r3
 801463e:	f7ff ff86 	bl	801454e <_ZSt20__throw_length_errorPKc>
 8014642:	bd08      	pop	{r3, pc}

08014644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8014644:	2a01      	cmp	r2, #1
 8014646:	b510      	push	{r4, lr}
 8014648:	d102      	bne.n	8014650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801464a:	780a      	ldrb	r2, [r1, #0]
 801464c:	7002      	strb	r2, [r0, #0]
 801464e:	bd10      	pop	{r4, pc}
 8014650:	f7ff ffab 	bl	80145aa <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8014654:	e7fb      	b.n	801464e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08014656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8014656:	b508      	push	{r3, lr}
 8014658:	1a52      	subs	r2, r2, r1
 801465a:	f7ff fff3 	bl	8014644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801465e:	bd08      	pop	{r3, pc}

08014660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8014660:	b508      	push	{r3, lr}
 8014662:	1a52      	subs	r2, r2, r1
 8014664:	f7ff ffee 	bl	8014644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8014668:	bd08      	pop	{r3, pc}

0801466a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801466a:	4288      	cmp	r0, r1
 801466c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801466e:	4604      	mov	r4, r0
 8014670:	460e      	mov	r6, r1
 8014672:	d020      	beq.n	80146b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8014674:	6802      	ldr	r2, [r0, #0]
 8014676:	f100 0308 	add.w	r3, r0, #8
 801467a:	429a      	cmp	r2, r3
 801467c:	bf08      	it	eq
 801467e:	220f      	moveq	r2, #15
 8014680:	684d      	ldr	r5, [r1, #4]
 8014682:	bf18      	it	ne
 8014684:	6882      	ldrne	r2, [r0, #8]
 8014686:	42aa      	cmp	r2, r5
 8014688:	d20b      	bcs.n	80146a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 801468a:	a902      	add	r1, sp, #8
 801468c:	f841 5d04 	str.w	r5, [r1, #-4]!
 8014690:	f7ff ff9c 	bl	80145cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8014694:	4607      	mov	r7, r0
 8014696:	4620      	mov	r0, r4
 8014698:	f7ff ffb2 	bl	8014600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801469c:	9b01      	ldr	r3, [sp, #4]
 801469e:	6027      	str	r7, [r4, #0]
 80146a0:	60a3      	str	r3, [r4, #8]
 80146a2:	b125      	cbz	r5, 80146ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 80146a4:	462a      	mov	r2, r5
 80146a6:	6831      	ldr	r1, [r6, #0]
 80146a8:	6820      	ldr	r0, [r4, #0]
 80146aa:	f7ff ffcb 	bl	8014644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80146ae:	2200      	movs	r2, #0
 80146b0:	6823      	ldr	r3, [r4, #0]
 80146b2:	6065      	str	r5, [r4, #4]
 80146b4:	555a      	strb	r2, [r3, r5]
 80146b6:	b003      	add	sp, #12
 80146b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80146ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80146be:	4616      	mov	r6, r2
 80146c0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80146c4:	6842      	ldr	r2, [r0, #4]
 80146c6:	469a      	mov	sl, r3
 80146c8:	eba8 0306 	sub.w	r3, r8, r6
 80146cc:	1a57      	subs	r7, r2, r1
 80146ce:	4413      	add	r3, r2
 80146d0:	6802      	ldr	r2, [r0, #0]
 80146d2:	9301      	str	r3, [sp, #4]
 80146d4:	f100 0308 	add.w	r3, r0, #8
 80146d8:	429a      	cmp	r2, r3
 80146da:	460d      	mov	r5, r1
 80146dc:	bf14      	ite	ne
 80146de:	6882      	ldrne	r2, [r0, #8]
 80146e0:	220f      	moveq	r2, #15
 80146e2:	a901      	add	r1, sp, #4
 80146e4:	4604      	mov	r4, r0
 80146e6:	f7ff ff71 	bl	80145cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80146ea:	1bbf      	subs	r7, r7, r6
 80146ec:	4681      	mov	r9, r0
 80146ee:	b11d      	cbz	r5, 80146f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80146f0:	462a      	mov	r2, r5
 80146f2:	6821      	ldr	r1, [r4, #0]
 80146f4:	f7ff ffa6 	bl	8014644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80146f8:	f1ba 0f00 	cmp.w	sl, #0
 80146fc:	d008      	beq.n	8014710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80146fe:	f1b8 0f00 	cmp.w	r8, #0
 8014702:	d005      	beq.n	8014710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8014704:	4642      	mov	r2, r8
 8014706:	4651      	mov	r1, sl
 8014708:	eb09 0005 	add.w	r0, r9, r5
 801470c:	f7ff ff9a 	bl	8014644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8014710:	b147      	cbz	r7, 8014724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8014712:	6821      	ldr	r1, [r4, #0]
 8014714:	442e      	add	r6, r5
 8014716:	eb05 0008 	add.w	r0, r5, r8
 801471a:	463a      	mov	r2, r7
 801471c:	4431      	add	r1, r6
 801471e:	4448      	add	r0, r9
 8014720:	f7ff ff90 	bl	8014644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8014724:	4620      	mov	r0, r4
 8014726:	f7ff ff6b 	bl	8014600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801472a:	9b01      	ldr	r3, [sp, #4]
 801472c:	f8c4 9000 	str.w	r9, [r4]
 8014730:	60a3      	str	r3, [r4, #8]
 8014732:	b002      	add	sp, #8
 8014734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8014738:	f100 0208 	add.w	r2, r0, #8
 801473c:	6002      	str	r2, [r0, #0]
 801473e:	2200      	movs	r2, #0
 8014740:	6042      	str	r2, [r0, #4]
 8014742:	7202      	strb	r2, [r0, #8]
 8014744:	4770      	bx	lr

08014746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8014746:	b570      	push	{r4, r5, r6, lr}
 8014748:	4604      	mov	r4, r0
 801474a:	460e      	mov	r6, r1
 801474c:	3008      	adds	r0, #8
 801474e:	6020      	str	r0, [r4, #0]
 8014750:	f856 3b08 	ldr.w	r3, [r6], #8
 8014754:	460d      	mov	r5, r1
 8014756:	429e      	cmp	r6, r3
 8014758:	d10b      	bne.n	8014772 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 801475a:	2210      	movs	r2, #16
 801475c:	4631      	mov	r1, r6
 801475e:	f7ff ff24 	bl	80145aa <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8014762:	686b      	ldr	r3, [r5, #4]
 8014764:	4620      	mov	r0, r4
 8014766:	6063      	str	r3, [r4, #4]
 8014768:	2300      	movs	r3, #0
 801476a:	602e      	str	r6, [r5, #0]
 801476c:	606b      	str	r3, [r5, #4]
 801476e:	722b      	strb	r3, [r5, #8]
 8014770:	bd70      	pop	{r4, r5, r6, pc}
 8014772:	6023      	str	r3, [r4, #0]
 8014774:	688b      	ldr	r3, [r1, #8]
 8014776:	60a3      	str	r3, [r4, #8]
 8014778:	e7f3      	b.n	8014762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0801477a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801477a:	b510      	push	{r4, lr}
 801477c:	4604      	mov	r4, r0
 801477e:	f7ff ff3f 	bl	8014600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8014782:	4620      	mov	r0, r4
 8014784:	bd10      	pop	{r4, pc}

08014786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8014786:	b510      	push	{r4, lr}
 8014788:	4604      	mov	r4, r0
 801478a:	f7ff ff6e 	bl	801466a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801478e:	4620      	mov	r0, r4
 8014790:	bd10      	pop	{r4, pc}

08014792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8014792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014794:	460b      	mov	r3, r1
 8014796:	4606      	mov	r6, r0
 8014798:	f853 7b08 	ldr.w	r7, [r3], #8
 801479c:	4605      	mov	r5, r0
 801479e:	42bb      	cmp	r3, r7
 80147a0:	460c      	mov	r4, r1
 80147a2:	f856 2b08 	ldr.w	r2, [r6], #8
 80147a6:	d016      	beq.n	80147d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 80147a8:	4296      	cmp	r6, r2
 80147aa:	bf08      	it	eq
 80147ac:	2200      	moveq	r2, #0
 80147ae:	6007      	str	r7, [r0, #0]
 80147b0:	6849      	ldr	r1, [r1, #4]
 80147b2:	bf18      	it	ne
 80147b4:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 80147b8:	6041      	str	r1, [r0, #4]
 80147ba:	68a1      	ldr	r1, [r4, #8]
 80147bc:	6081      	str	r1, [r0, #8]
 80147be:	b142      	cbz	r2, 80147d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80147c0:	6022      	str	r2, [r4, #0]
 80147c2:	f8c4 c008 	str.w	ip, [r4, #8]
 80147c6:	2300      	movs	r3, #0
 80147c8:	6822      	ldr	r2, [r4, #0]
 80147ca:	6063      	str	r3, [r4, #4]
 80147cc:	7013      	strb	r3, [r2, #0]
 80147ce:	4628      	mov	r0, r5
 80147d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147d2:	6023      	str	r3, [r4, #0]
 80147d4:	e7f7      	b.n	80147c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 80147d6:	f7ff ff48 	bl	801466a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80147da:	e7f4      	b.n	80147c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

080147dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80147dc:	6840      	ldr	r0, [r0, #4]
 80147de:	4770      	bx	lr

080147e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80147e0:	2300      	movs	r3, #0
 80147e2:	6802      	ldr	r2, [r0, #0]
 80147e4:	6043      	str	r3, [r0, #4]
 80147e6:	7013      	strb	r3, [r2, #0]
 80147e8:	4770      	bx	lr

080147ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80147ea:	6840      	ldr	r0, [r0, #4]
 80147ec:	fab0 f080 	clz	r0, r0
 80147f0:	0940      	lsrs	r0, r0, #5
 80147f2:	4770      	bx	lr

080147f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80147f4:	6800      	ldr	r0, [r0, #0]
 80147f6:	4408      	add	r0, r1
 80147f8:	4770      	bx	lr

080147fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 80147fa:	6843      	ldr	r3, [r0, #4]
 80147fc:	6800      	ldr	r0, [r0, #0]
 80147fe:	3b01      	subs	r3, #1
 8014800:	4418      	add	r0, r3
 8014802:	4770      	bx	lr

08014804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8014804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014806:	6802      	ldr	r2, [r0, #0]
 8014808:	f100 0308 	add.w	r3, r0, #8
 801480c:	429a      	cmp	r2, r3
 801480e:	bf08      	it	eq
 8014810:	230f      	moveq	r3, #15
 8014812:	6846      	ldr	r6, [r0, #4]
 8014814:	bf18      	it	ne
 8014816:	6883      	ldrne	r3, [r0, #8]
 8014818:	1c75      	adds	r5, r6, #1
 801481a:	429d      	cmp	r5, r3
 801481c:	4604      	mov	r4, r0
 801481e:	460f      	mov	r7, r1
 8014820:	d906      	bls.n	8014830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 8014822:	2301      	movs	r3, #1
 8014824:	9300      	str	r3, [sp, #0]
 8014826:	2300      	movs	r3, #0
 8014828:	4631      	mov	r1, r6
 801482a:	461a      	mov	r2, r3
 801482c:	f7ff ff45 	bl	80146ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8014830:	2200      	movs	r2, #0
 8014832:	6823      	ldr	r3, [r4, #0]
 8014834:	559f      	strb	r7, [r3, r6]
 8014836:	6823      	ldr	r3, [r4, #0]
 8014838:	6065      	str	r5, [r4, #4]
 801483a:	555a      	strb	r2, [r3, r5]
 801483c:	b003      	add	sp, #12
 801483e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8014840:	b510      	push	{r4, lr}
 8014842:	4604      	mov	r4, r0
 8014844:	f7ff ffde 	bl	8014804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8014848:	4620      	mov	r0, r4
 801484a:	bd10      	pop	{r4, pc}

0801484c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 801484c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801484e:	4604      	mov	r4, r0
 8014850:	4626      	mov	r6, r4
 8014852:	f856 3b08 	ldr.w	r3, [r6], #8
 8014856:	6840      	ldr	r0, [r0, #4]
 8014858:	42b3      	cmp	r3, r6
 801485a:	bf0c      	ite	eq
 801485c:	260f      	moveq	r6, #15
 801485e:	68a6      	ldrne	r6, [r4, #8]
 8014860:	1885      	adds	r5, r0, r2
 8014862:	42b5      	cmp	r5, r6
 8014864:	d80a      	bhi.n	801487c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8014866:	b112      	cbz	r2, 801486e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 8014868:	4418      	add	r0, r3
 801486a:	f7ff feeb 	bl	8014644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801486e:	2200      	movs	r2, #0
 8014870:	4620      	mov	r0, r4
 8014872:	6823      	ldr	r3, [r4, #0]
 8014874:	6065      	str	r5, [r4, #4]
 8014876:	555a      	strb	r2, [r3, r5]
 8014878:	b002      	add	sp, #8
 801487a:	bd70      	pop	{r4, r5, r6, pc}
 801487c:	9200      	str	r2, [sp, #0]
 801487e:	460b      	mov	r3, r1
 8014880:	2200      	movs	r2, #0
 8014882:	4601      	mov	r1, r0
 8014884:	4620      	mov	r0, r4
 8014886:	f7ff ff18 	bl	80146ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801488a:	e7f0      	b.n	801486e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0801488c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 801488c:	b508      	push	{r3, lr}
 801488e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8014892:	f7ff ffdb 	bl	801484c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8014896:	bd08      	pop	{r3, pc}

08014898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8014898:	b508      	push	{r3, lr}
 801489a:	f7ff fff7 	bl	801488c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 801489e:	bd08      	pop	{r3, pc}

080148a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 80148a0:	b570      	push	{r4, r5, r6, lr}
 80148a2:	4604      	mov	r4, r0
 80148a4:	460d      	mov	r5, r1
 80148a6:	4616      	mov	r6, r2
 80148a8:	4b04      	ldr	r3, [pc, #16]	; (80148bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 80148aa:	2100      	movs	r1, #0
 80148ac:	f7ff febe 	bl	801462c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80148b0:	4632      	mov	r2, r6
 80148b2:	4629      	mov	r1, r5
 80148b4:	4620      	mov	r0, r4
 80148b6:	f7ff ffc9 	bl	801484c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80148ba:	bd70      	pop	{r4, r5, r6, pc}
 80148bc:	08019332 	.word	0x08019332

080148c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80148c0:	b570      	push	{r4, r5, r6, lr}
 80148c2:	4604      	mov	r4, r0
 80148c4:	4608      	mov	r0, r1
 80148c6:	460d      	mov	r5, r1
 80148c8:	f7eb fc42 	bl	8000150 <strlen>
 80148cc:	4606      	mov	r6, r0
 80148ce:	4602      	mov	r2, r0
 80148d0:	4b05      	ldr	r3, [pc, #20]	; (80148e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80148d2:	4620      	mov	r0, r4
 80148d4:	2100      	movs	r1, #0
 80148d6:	f7ff fea9 	bl	801462c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80148da:	4632      	mov	r2, r6
 80148dc:	4629      	mov	r1, r5
 80148de:	4620      	mov	r0, r4
 80148e0:	f7ff ffb4 	bl	801484c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80148e4:	bd70      	pop	{r4, r5, r6, pc}
 80148e6:	bf00      	nop
 80148e8:	08019332 	.word	0x08019332

080148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 80148ec:	b508      	push	{r3, lr}
 80148ee:	f7ff ffe7 	bl	80148c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80148f2:	bd08      	pop	{r3, pc}

080148f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80148f4:	6800      	ldr	r0, [r0, #0]
 80148f6:	4770      	bx	lr

080148f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 80148f8:	b513      	push	{r0, r1, r4, lr}
 80148fa:	f88d 1007 	strb.w	r1, [sp, #7]
 80148fe:	6841      	ldr	r1, [r0, #4]
 8014900:	4613      	mov	r3, r2
 8014902:	428a      	cmp	r2, r1
 8014904:	d20a      	bcs.n	801491c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8014906:	6804      	ldr	r4, [r0, #0]
 8014908:	f10d 0207 	add.w	r2, sp, #7
 801490c:	1ac9      	subs	r1, r1, r3
 801490e:	18e0      	adds	r0, r4, r3
 8014910:	f7ff fe43 	bl	801459a <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8014914:	b110      	cbz	r0, 801491c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8014916:	1b00      	subs	r0, r0, r4
 8014918:	b002      	add	sp, #8
 801491a:	bd10      	pop	{r4, pc}
 801491c:	f04f 30ff 	mov.w	r0, #4294967295
 8014920:	e7fa      	b.n	8014918 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08014922 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8014922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014924:	4606      	mov	r6, r0
 8014926:	6845      	ldr	r5, [r0, #4]
 8014928:	4608      	mov	r0, r1
 801492a:	460f      	mov	r7, r1
 801492c:	f7eb fc10 	bl	8000150 <strlen>
 8014930:	4285      	cmp	r5, r0
 8014932:	4604      	mov	r4, r0
 8014934:	462a      	mov	r2, r5
 8014936:	4639      	mov	r1, r7
 8014938:	bf28      	it	cs
 801493a:	4602      	movcs	r2, r0
 801493c:	6830      	ldr	r0, [r6, #0]
 801493e:	f7ff fe27 	bl	8014590 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8014942:	b900      	cbnz	r0, 8014946 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8014944:	1b28      	subs	r0, r5, r4
 8014946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8014948:	6001      	str	r1, [r0, #0]
 801494a:	4770      	bx	lr

0801494c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801494c:	b510      	push	{r4, lr}
 801494e:	4604      	mov	r4, r0
 8014950:	f100 0208 	add.w	r2, r0, #8
 8014954:	6002      	str	r2, [r0, #0]
 8014956:	e9d1 1200 	ldrd	r1, r2, [r1]
 801495a:	f04f 0300 	mov.w	r3, #0
 801495e:	440a      	add	r2, r1
 8014960:	f7f9 fc1c 	bl	800e19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8014964:	4620      	mov	r0, r4
 8014966:	bd10      	pop	{r4, pc}

08014968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8014968:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801496a:	4604      	mov	r4, r0
 801496c:	4616      	mov	r6, r2
 801496e:	460d      	mov	r5, r1
 8014970:	b919      	cbnz	r1, 801497a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8014972:	b112      	cbz	r2, 801497a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8014974:	480d      	ldr	r0, [pc, #52]	; (80149ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8014976:	f7ff fde4 	bl	8014542 <_ZSt19__throw_logic_errorPKc>
 801497a:	1b73      	subs	r3, r6, r5
 801497c:	2b0f      	cmp	r3, #15
 801497e:	9301      	str	r3, [sp, #4]
 8014980:	d907      	bls.n	8014992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8014982:	2200      	movs	r2, #0
 8014984:	a901      	add	r1, sp, #4
 8014986:	4620      	mov	r0, r4
 8014988:	f7ff fe20 	bl	80145cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801498c:	9b01      	ldr	r3, [sp, #4]
 801498e:	6020      	str	r0, [r4, #0]
 8014990:	60a3      	str	r3, [r4, #8]
 8014992:	4632      	mov	r2, r6
 8014994:	4629      	mov	r1, r5
 8014996:	6820      	ldr	r0, [r4, #0]
 8014998:	f7ff fe62 	bl	8014660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801499c:	2100      	movs	r1, #0
 801499e:	9b01      	ldr	r3, [sp, #4]
 80149a0:	6822      	ldr	r2, [r4, #0]
 80149a2:	6063      	str	r3, [r4, #4]
 80149a4:	54d1      	strb	r1, [r2, r3]
 80149a6:	b002      	add	sp, #8
 80149a8:	bd70      	pop	{r4, r5, r6, pc}
 80149aa:	bf00      	nop
 80149ac:	08019308 	.word	0x08019308

080149b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80149b0:	b538      	push	{r3, r4, r5, lr}
 80149b2:	f100 0308 	add.w	r3, r0, #8
 80149b6:	4604      	mov	r4, r0
 80149b8:	6003      	str	r3, [r0, #0]
 80149ba:	460d      	mov	r5, r1
 80149bc:	b159      	cbz	r1, 80149d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80149be:	4608      	mov	r0, r1
 80149c0:	f7eb fbc6 	bl	8000150 <strlen>
 80149c4:	182a      	adds	r2, r5, r0
 80149c6:	4620      	mov	r0, r4
 80149c8:	f04f 0300 	mov.w	r3, #0
 80149cc:	4629      	mov	r1, r5
 80149ce:	f7ff ffcb 	bl	8014968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80149d2:	4620      	mov	r0, r4
 80149d4:	bd38      	pop	{r3, r4, r5, pc}
 80149d6:	f04f 32ff 	mov.w	r2, #4294967295
 80149da:	e7f4      	b.n	80149c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080149dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80149dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149de:	460d      	mov	r5, r1
 80149e0:	4616      	mov	r6, r2
 80149e2:	461f      	mov	r7, r3
 80149e4:	f100 0308 	add.w	r3, r0, #8
 80149e8:	4604      	mov	r4, r0
 80149ea:	6003      	str	r3, [r0, #0]
 80149ec:	4631      	mov	r1, r6
 80149ee:	4a09      	ldr	r2, [pc, #36]	; (8014a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
 80149f0:	4628      	mov	r0, r5
 80149f2:	f7ff fe0d 	bl	8014610 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80149f6:	6829      	ldr	r1, [r5, #0]
 80149f8:	686a      	ldr	r2, [r5, #4]
 80149fa:	4401      	add	r1, r0
 80149fc:	1b92      	subs	r2, r2, r6
 80149fe:	4620      	mov	r0, r4
 8014a00:	f04f 0300 	mov.w	r3, #0
 8014a04:	42ba      	cmp	r2, r7
 8014a06:	bf94      	ite	ls
 8014a08:	188a      	addls	r2, r1, r2
 8014a0a:	19ca      	addhi	r2, r1, r7
 8014a0c:	f7ff ffac 	bl	8014968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8014a10:	4620      	mov	r0, r4
 8014a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a14:	0801935f 	.word	0x0801935f

08014a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8014a18:	b570      	push	{r4, r5, r6, lr}
 8014a1a:	460d      	mov	r5, r1
 8014a1c:	4604      	mov	r4, r0
 8014a1e:	4611      	mov	r1, r2
 8014a20:	4628      	mov	r0, r5
 8014a22:	4a06      	ldr	r2, [pc, #24]	; (8014a3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8014a24:	461e      	mov	r6, r3
 8014a26:	f7ff fdf3 	bl	8014610 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8014a2a:	4633      	mov	r3, r6
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	4629      	mov	r1, r5
 8014a30:	4620      	mov	r0, r4
 8014a32:	f7ff ffd3 	bl	80149dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8014a36:	4620      	mov	r0, r4
 8014a38:	bd70      	pop	{r4, r5, r6, pc}
 8014a3a:	bf00      	nop
 8014a3c:	080192bc 	.word	0x080192bc

08014a40 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b09c      	sub	sp, #112	; 0x70
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	1a0e      	subs	r6, r1, r0
 8014a48:	4680      	mov	r8, r0
 8014a4a:	2269      	movs	r2, #105	; 0x69
 8014a4c:	490e      	ldr	r1, [pc, #56]	; (8014a88 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8014a4e:	1d38      	adds	r0, r7, #4
 8014a50:	f002 ff65 	bl	801791e <memcpy>
 8014a54:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8014a58:	f023 0307 	bic.w	r3, r3, #7
 8014a5c:	ebad 0d03 	sub.w	sp, sp, r3
 8014a60:	466c      	mov	r4, sp
 8014a62:	2268      	movs	r2, #104	; 0x68
 8014a64:	1d39      	adds	r1, r7, #4
 8014a66:	4620      	mov	r0, r4
 8014a68:	f002 ff59 	bl	801791e <memcpy>
 8014a6c:	4632      	mov	r2, r6
 8014a6e:	4641      	mov	r1, r8
 8014a70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014a74:	f002 ff53 	bl	801791e <memcpy>
 8014a78:	2300      	movs	r3, #0
 8014a7a:	1c75      	adds	r5, r6, #1
 8014a7c:	4425      	add	r5, r4
 8014a7e:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8014a82:	4620      	mov	r0, r4
 8014a84:	f7ff fd5d 	bl	8014542 <_ZSt19__throw_logic_errorPKc>
 8014a88:	08019385 	.word	0x08019385

08014a8c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8014a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a8e:	af00      	add	r7, sp, #0
 8014a90:	b086      	sub	sp, #24
 8014a92:	466d      	mov	r5, sp
 8014a94:	f105 040c 	add.w	r4, r5, #12
 8014a98:	4623      	mov	r3, r4
 8014a9a:	f04f 0c0a 	mov.w	ip, #10
 8014a9e:	f8df e038 	ldr.w	lr, [pc, #56]	; 8014ad8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8014aa2:	fbb2 f6fc 	udiv	r6, r2, ip
 8014aa6:	fb0c 2216 	mls	r2, ip, r6, r2
 8014aaa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014aae:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8014ab2:	4632      	mov	r2, r6
 8014ab4:	2e00      	cmp	r6, #0
 8014ab6:	d1f4      	bne.n	8014aa2 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8014ab8:	1ae4      	subs	r4, r4, r3
 8014aba:	428c      	cmp	r4, r1
 8014abc:	d808      	bhi.n	8014ad0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8014abe:	f1c4 010c 	rsb	r1, r4, #12
 8014ac2:	4622      	mov	r2, r4
 8014ac4:	4429      	add	r1, r5
 8014ac6:	f002 ff2a 	bl	801791e <memcpy>
 8014aca:	4620      	mov	r0, r4
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ad0:	f04f 34ff 	mov.w	r4, #4294967295
 8014ad4:	e7f9      	b.n	8014aca <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8014ad6:	bf00      	nop
 8014ad8:	0801937a 	.word	0x0801937a

08014adc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8014adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae0:	4606      	mov	r6, r0
 8014ae2:	4615      	mov	r5, r2
 8014ae4:	4604      	mov	r4, r0
 8014ae6:	3901      	subs	r1, #1
 8014ae8:	1847      	adds	r7, r0, r1
 8014aea:	782a      	ldrb	r2, [r5, #0]
 8014aec:	b39a      	cbz	r2, 8014b56 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8014aee:	42bc      	cmp	r4, r7
 8014af0:	d22d      	bcs.n	8014b4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8014af2:	2a25      	cmp	r2, #37	; 0x25
 8014af4:	d107      	bne.n	8014b06 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8014af6:	786a      	ldrb	r2, [r5, #1]
 8014af8:	2a73      	cmp	r2, #115	; 0x73
 8014afa:	d00a      	beq.n	8014b12 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8014afc:	2a7a      	cmp	r2, #122	; 0x7a
 8014afe:	d013      	beq.n	8014b28 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8014b00:	2a25      	cmp	r2, #37	; 0x25
 8014b02:	d100      	bne.n	8014b06 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8014b04:	3501      	adds	r5, #1
 8014b06:	782a      	ldrb	r2, [r5, #0]
 8014b08:	3401      	adds	r4, #1
 8014b0a:	f804 2c01 	strb.w	r2, [r4, #-1]
 8014b0e:	3501      	adds	r5, #1
 8014b10:	e7eb      	b.n	8014aea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8014b12:	1d19      	adds	r1, r3, #4
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	3b01      	subs	r3, #1
 8014b18:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8014b1c:	b1a2      	cbz	r2, 8014b48 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 8014b1e:	42bc      	cmp	r4, r7
 8014b20:	d015      	beq.n	8014b4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8014b22:	f804 2b01 	strb.w	r2, [r4], #1
 8014b26:	e7f7      	b.n	8014b18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8014b28:	78aa      	ldrb	r2, [r5, #2]
 8014b2a:	2a75      	cmp	r2, #117	; 0x75
 8014b2c:	d1eb      	bne.n	8014b06 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8014b2e:	681a      	ldr	r2, [r3, #0]
 8014b30:	1b39      	subs	r1, r7, r4
 8014b32:	4620      	mov	r0, r4
 8014b34:	f103 0804 	add.w	r8, r3, #4
 8014b38:	f7ff ffa8 	bl	8014a8c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	dd06      	ble.n	8014b4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8014b40:	4404      	add	r4, r0
 8014b42:	3503      	adds	r5, #3
 8014b44:	4643      	mov	r3, r8
 8014b46:	e7d0      	b.n	8014aea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8014b48:	3502      	adds	r5, #2
 8014b4a:	460b      	mov	r3, r1
 8014b4c:	e7cd      	b.n	8014aea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8014b4e:	4621      	mov	r1, r4
 8014b50:	4630      	mov	r0, r6
 8014b52:	f7ff ff75 	bl	8014a40 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8014b56:	7022      	strb	r2, [r4, #0]
 8014b58:	1ba0      	subs	r0, r4, r6
 8014b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014b60 <tan>:
 8014b60:	b530      	push	{r4, r5, lr}
 8014b62:	4a12      	ldr	r2, [pc, #72]	; (8014bac <tan+0x4c>)
 8014b64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014b68:	4293      	cmp	r3, r2
 8014b6a:	b087      	sub	sp, #28
 8014b6c:	dc06      	bgt.n	8014b7c <tan+0x1c>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	2200      	movs	r2, #0
 8014b72:	9300      	str	r3, [sp, #0]
 8014b74:	2300      	movs	r3, #0
 8014b76:	f001 feef 	bl	8016958 <__kernel_tan>
 8014b7a:	e006      	b.n	8014b8a <tan+0x2a>
 8014b7c:	4a0c      	ldr	r2, [pc, #48]	; (8014bb0 <tan+0x50>)
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	dd05      	ble.n	8014b8e <tan+0x2e>
 8014b82:	4602      	mov	r2, r0
 8014b84:	460b      	mov	r3, r1
 8014b86:	f7eb faef 	bl	8000168 <__aeabi_dsub>
 8014b8a:	b007      	add	sp, #28
 8014b8c:	bd30      	pop	{r4, r5, pc}
 8014b8e:	aa02      	add	r2, sp, #8
 8014b90:	f000 ff4e 	bl	8015a30 <__ieee754_rem_pio2>
 8014b94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b98:	0040      	lsls	r0, r0, #1
 8014b9a:	f000 0002 	and.w	r0, r0, #2
 8014b9e:	f1c0 0001 	rsb	r0, r0, #1
 8014ba2:	9000      	str	r0, [sp, #0]
 8014ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ba8:	e7e5      	b.n	8014b76 <tan+0x16>
 8014baa:	bf00      	nop
 8014bac:	3fe921fb 	.word	0x3fe921fb
 8014bb0:	7fefffff 	.word	0x7fefffff

08014bb4 <sinf>:
 8014bb4:	b507      	push	{r0, r1, r2, lr}
 8014bb6:	4a19      	ldr	r2, [pc, #100]	; (8014c1c <sinf+0x68>)
 8014bb8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014bbc:	4293      	cmp	r3, r2
 8014bbe:	4601      	mov	r1, r0
 8014bc0:	dc04      	bgt.n	8014bcc <sinf+0x18>
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	2100      	movs	r1, #0
 8014bc6:	f002 fba5 	bl	8017314 <__kernel_sinf>
 8014bca:	e004      	b.n	8014bd6 <sinf+0x22>
 8014bcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014bd0:	db04      	blt.n	8014bdc <sinf+0x28>
 8014bd2:	f7eb ffad 	bl	8000b30 <__aeabi_fsub>
 8014bd6:	b003      	add	sp, #12
 8014bd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bdc:	4669      	mov	r1, sp
 8014bde:	f001 f9c3 	bl	8015f68 <__ieee754_rem_pio2f>
 8014be2:	f000 0003 	and.w	r0, r0, #3
 8014be6:	2801      	cmp	r0, #1
 8014be8:	d006      	beq.n	8014bf8 <sinf+0x44>
 8014bea:	2802      	cmp	r0, #2
 8014bec:	d009      	beq.n	8014c02 <sinf+0x4e>
 8014bee:	b980      	cbnz	r0, 8014c12 <sinf+0x5e>
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	9901      	ldr	r1, [sp, #4]
 8014bf4:	9800      	ldr	r0, [sp, #0]
 8014bf6:	e7e6      	b.n	8014bc6 <sinf+0x12>
 8014bf8:	9901      	ldr	r1, [sp, #4]
 8014bfa:	9800      	ldr	r0, [sp, #0]
 8014bfc:	f002 f86c 	bl	8016cd8 <__kernel_cosf>
 8014c00:	e7e9      	b.n	8014bd6 <sinf+0x22>
 8014c02:	2201      	movs	r2, #1
 8014c04:	9901      	ldr	r1, [sp, #4]
 8014c06:	9800      	ldr	r0, [sp, #0]
 8014c08:	f002 fb84 	bl	8017314 <__kernel_sinf>
 8014c0c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8014c10:	e7e1      	b.n	8014bd6 <sinf+0x22>
 8014c12:	9901      	ldr	r1, [sp, #4]
 8014c14:	9800      	ldr	r0, [sp, #0]
 8014c16:	f002 f85f 	bl	8016cd8 <__kernel_cosf>
 8014c1a:	e7f7      	b.n	8014c0c <sinf+0x58>
 8014c1c:	3f490fd8 	.word	0x3f490fd8

08014c20 <pow>:
 8014c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c24:	b08f      	sub	sp, #60	; 0x3c
 8014c26:	461d      	mov	r5, r3
 8014c28:	4680      	mov	r8, r0
 8014c2a:	4689      	mov	r9, r1
 8014c2c:	4614      	mov	r4, r2
 8014c2e:	f000 f9f3 	bl	8015018 <__ieee754_pow>
 8014c32:	4fa1      	ldr	r7, [pc, #644]	; (8014eb8 <pow+0x298>)
 8014c34:	e9cd 0100 	strd	r0, r1, [sp]
 8014c38:	f997 3000 	ldrsb.w	r3, [r7]
 8014c3c:	463e      	mov	r6, r7
 8014c3e:	9302      	str	r3, [sp, #8]
 8014c40:	3301      	adds	r3, #1
 8014c42:	d05f      	beq.n	8014d04 <pow+0xe4>
 8014c44:	4622      	mov	r2, r4
 8014c46:	462b      	mov	r3, r5
 8014c48:	4620      	mov	r0, r4
 8014c4a:	4629      	mov	r1, r5
 8014c4c:	f7eb fede 	bl	8000a0c <__aeabi_dcmpun>
 8014c50:	4682      	mov	sl, r0
 8014c52:	2800      	cmp	r0, #0
 8014c54:	d156      	bne.n	8014d04 <pow+0xe4>
 8014c56:	4642      	mov	r2, r8
 8014c58:	464b      	mov	r3, r9
 8014c5a:	4640      	mov	r0, r8
 8014c5c:	4649      	mov	r1, r9
 8014c5e:	f7eb fed5 	bl	8000a0c <__aeabi_dcmpun>
 8014c62:	9003      	str	r0, [sp, #12]
 8014c64:	b1e8      	cbz	r0, 8014ca2 <pow+0x82>
 8014c66:	2200      	movs	r2, #0
 8014c68:	2300      	movs	r3, #0
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	4629      	mov	r1, r5
 8014c6e:	f7eb fe9b 	bl	80009a8 <__aeabi_dcmpeq>
 8014c72:	2800      	cmp	r0, #0
 8014c74:	d046      	beq.n	8014d04 <pow+0xe4>
 8014c76:	2301      	movs	r3, #1
 8014c78:	2200      	movs	r2, #0
 8014c7a:	9304      	str	r3, [sp, #16]
 8014c7c:	4b8f      	ldr	r3, [pc, #572]	; (8014ebc <pow+0x29c>)
 8014c7e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8014c82:	9305      	str	r3, [sp, #20]
 8014c84:	4b8e      	ldr	r3, [pc, #568]	; (8014ec0 <pow+0x2a0>)
 8014c86:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014c8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014c8e:	9b02      	ldr	r3, [sp, #8]
 8014c90:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8014c94:	2b02      	cmp	r3, #2
 8014c96:	d031      	beq.n	8014cfc <pow+0xdc>
 8014c98:	a804      	add	r0, sp, #16
 8014c9a:	f002 fc41 	bl	8017520 <matherr>
 8014c9e:	bb38      	cbnz	r0, 8014cf0 <pow+0xd0>
 8014ca0:	e058      	b.n	8014d54 <pow+0x134>
 8014ca2:	f04f 0a00 	mov.w	sl, #0
 8014ca6:	f04f 0b00 	mov.w	fp, #0
 8014caa:	4652      	mov	r2, sl
 8014cac:	465b      	mov	r3, fp
 8014cae:	4640      	mov	r0, r8
 8014cb0:	4649      	mov	r1, r9
 8014cb2:	f7eb fe79 	bl	80009a8 <__aeabi_dcmpeq>
 8014cb6:	2800      	cmp	r0, #0
 8014cb8:	d051      	beq.n	8014d5e <pow+0x13e>
 8014cba:	4652      	mov	r2, sl
 8014cbc:	465b      	mov	r3, fp
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	4629      	mov	r1, r5
 8014cc2:	f7eb fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8014cc6:	4606      	mov	r6, r0
 8014cc8:	b308      	cbz	r0, 8014d0e <pow+0xee>
 8014cca:	2301      	movs	r3, #1
 8014ccc:	9304      	str	r3, [sp, #16]
 8014cce:	4b7b      	ldr	r3, [pc, #492]	; (8014ebc <pow+0x29c>)
 8014cd0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014cd4:	9305      	str	r3, [sp, #20]
 8014cd6:	9b03      	ldr	r3, [sp, #12]
 8014cd8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8014cdc:	930c      	str	r3, [sp, #48]	; 0x30
 8014cde:	9b02      	ldr	r3, [sp, #8]
 8014ce0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d0d7      	beq.n	8014c98 <pow+0x78>
 8014ce8:	2200      	movs	r2, #0
 8014cea:	4b75      	ldr	r3, [pc, #468]	; (8014ec0 <pow+0x2a0>)
 8014cec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cf2:	b11b      	cbz	r3, 8014cfc <pow+0xdc>
 8014cf4:	f002 fdbc 	bl	8017870 <__errno>
 8014cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cfa:	6003      	str	r3, [r0, #0]
 8014cfc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8014d00:	e9cd 3400 	strd	r3, r4, [sp]
 8014d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d08:	b00f      	add	sp, #60	; 0x3c
 8014d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d0e:	4620      	mov	r0, r4
 8014d10:	4629      	mov	r1, r5
 8014d12:	f002 fb79 	bl	8017408 <finite>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	d0f4      	beq.n	8014d04 <pow+0xe4>
 8014d1a:	4652      	mov	r2, sl
 8014d1c:	465b      	mov	r3, fp
 8014d1e:	4620      	mov	r0, r4
 8014d20:	4629      	mov	r1, r5
 8014d22:	f7eb fe4b 	bl	80009bc <__aeabi_dcmplt>
 8014d26:	2800      	cmp	r0, #0
 8014d28:	d0ec      	beq.n	8014d04 <pow+0xe4>
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	9304      	str	r3, [sp, #16]
 8014d2e:	4b63      	ldr	r3, [pc, #396]	; (8014ebc <pow+0x29c>)
 8014d30:	960c      	str	r6, [sp, #48]	; 0x30
 8014d32:	9305      	str	r3, [sp, #20]
 8014d34:	f997 3000 	ldrsb.w	r3, [r7]
 8014d38:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014d3c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8014d40:	b913      	cbnz	r3, 8014d48 <pow+0x128>
 8014d42:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8014d46:	e7a7      	b.n	8014c98 <pow+0x78>
 8014d48:	2000      	movs	r0, #0
 8014d4a:	495e      	ldr	r1, [pc, #376]	; (8014ec4 <pow+0x2a4>)
 8014d4c:	2b02      	cmp	r3, #2
 8014d4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014d52:	d1a1      	bne.n	8014c98 <pow+0x78>
 8014d54:	f002 fd8c 	bl	8017870 <__errno>
 8014d58:	2321      	movs	r3, #33	; 0x21
 8014d5a:	6003      	str	r3, [r0, #0]
 8014d5c:	e7c8      	b.n	8014cf0 <pow+0xd0>
 8014d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d62:	f002 fb51 	bl	8017408 <finite>
 8014d66:	9002      	str	r0, [sp, #8]
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	d177      	bne.n	8014e5c <pow+0x23c>
 8014d6c:	4640      	mov	r0, r8
 8014d6e:	4649      	mov	r1, r9
 8014d70:	f002 fb4a 	bl	8017408 <finite>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d071      	beq.n	8014e5c <pow+0x23c>
 8014d78:	4620      	mov	r0, r4
 8014d7a:	4629      	mov	r1, r5
 8014d7c:	f002 fb44 	bl	8017408 <finite>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	d06b      	beq.n	8014e5c <pow+0x23c>
 8014d84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d88:	4619      	mov	r1, r3
 8014d8a:	4610      	mov	r0, r2
 8014d8c:	f7eb fe3e 	bl	8000a0c <__aeabi_dcmpun>
 8014d90:	f997 7000 	ldrsb.w	r7, [r7]
 8014d94:	4b49      	ldr	r3, [pc, #292]	; (8014ebc <pow+0x29c>)
 8014d96:	b1a0      	cbz	r0, 8014dc2 <pow+0x1a2>
 8014d98:	2201      	movs	r2, #1
 8014d9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014d9e:	9b02      	ldr	r3, [sp, #8]
 8014da0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014da4:	930c      	str	r3, [sp, #48]	; 0x30
 8014da6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8014daa:	2f00      	cmp	r7, #0
 8014dac:	d0c9      	beq.n	8014d42 <pow+0x122>
 8014dae:	4652      	mov	r2, sl
 8014db0:	465b      	mov	r3, fp
 8014db2:	4650      	mov	r0, sl
 8014db4:	4659      	mov	r1, fp
 8014db6:	f7eb fcb9 	bl	800072c <__aeabi_ddiv>
 8014dba:	2f02      	cmp	r7, #2
 8014dbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014dc0:	e7c7      	b.n	8014d52 <pow+0x132>
 8014dc2:	2203      	movs	r2, #3
 8014dc4:	900c      	str	r0, [sp, #48]	; 0x30
 8014dc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014dca:	4620      	mov	r0, r4
 8014dcc:	4629      	mov	r1, r5
 8014dce:	2200      	movs	r2, #0
 8014dd0:	4b3d      	ldr	r3, [pc, #244]	; (8014ec8 <pow+0x2a8>)
 8014dd2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8014dd6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014dda:	f7eb fb7d 	bl	80004d8 <__aeabi_dmul>
 8014dde:	4604      	mov	r4, r0
 8014de0:	460d      	mov	r5, r1
 8014de2:	bb17      	cbnz	r7, 8014e2a <pow+0x20a>
 8014de4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014de8:	4b38      	ldr	r3, [pc, #224]	; (8014ecc <pow+0x2ac>)
 8014dea:	4640      	mov	r0, r8
 8014dec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014df0:	4649      	mov	r1, r9
 8014df2:	4652      	mov	r2, sl
 8014df4:	465b      	mov	r3, fp
 8014df6:	f7eb fde1 	bl	80009bc <__aeabi_dcmplt>
 8014dfa:	2800      	cmp	r0, #0
 8014dfc:	d054      	beq.n	8014ea8 <pow+0x288>
 8014dfe:	4620      	mov	r0, r4
 8014e00:	4629      	mov	r1, r5
 8014e02:	f002 fb95 	bl	8017530 <rint>
 8014e06:	4622      	mov	r2, r4
 8014e08:	462b      	mov	r3, r5
 8014e0a:	f7eb fdcd 	bl	80009a8 <__aeabi_dcmpeq>
 8014e0e:	b920      	cbnz	r0, 8014e1a <pow+0x1fa>
 8014e10:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014e14:	4b2e      	ldr	r3, [pc, #184]	; (8014ed0 <pow+0x2b0>)
 8014e16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014e1a:	f996 3000 	ldrsb.w	r3, [r6]
 8014e1e:	2b02      	cmp	r3, #2
 8014e20:	d142      	bne.n	8014ea8 <pow+0x288>
 8014e22:	f002 fd25 	bl	8017870 <__errno>
 8014e26:	2322      	movs	r3, #34	; 0x22
 8014e28:	e797      	b.n	8014d5a <pow+0x13a>
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	4b29      	ldr	r3, [pc, #164]	; (8014ed4 <pow+0x2b4>)
 8014e2e:	4640      	mov	r0, r8
 8014e30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014e34:	4649      	mov	r1, r9
 8014e36:	4652      	mov	r2, sl
 8014e38:	465b      	mov	r3, fp
 8014e3a:	f7eb fdbf 	bl	80009bc <__aeabi_dcmplt>
 8014e3e:	2800      	cmp	r0, #0
 8014e40:	d0eb      	beq.n	8014e1a <pow+0x1fa>
 8014e42:	4620      	mov	r0, r4
 8014e44:	4629      	mov	r1, r5
 8014e46:	f002 fb73 	bl	8017530 <rint>
 8014e4a:	4622      	mov	r2, r4
 8014e4c:	462b      	mov	r3, r5
 8014e4e:	f7eb fdab 	bl	80009a8 <__aeabi_dcmpeq>
 8014e52:	2800      	cmp	r0, #0
 8014e54:	d1e1      	bne.n	8014e1a <pow+0x1fa>
 8014e56:	2200      	movs	r2, #0
 8014e58:	4b1a      	ldr	r3, [pc, #104]	; (8014ec4 <pow+0x2a4>)
 8014e5a:	e7dc      	b.n	8014e16 <pow+0x1f6>
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e62:	2300      	movs	r3, #0
 8014e64:	f7eb fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	f43f af4b 	beq.w	8014d04 <pow+0xe4>
 8014e6e:	4640      	mov	r0, r8
 8014e70:	4649      	mov	r1, r9
 8014e72:	f002 fac9 	bl	8017408 <finite>
 8014e76:	2800      	cmp	r0, #0
 8014e78:	f43f af44 	beq.w	8014d04 <pow+0xe4>
 8014e7c:	4620      	mov	r0, r4
 8014e7e:	4629      	mov	r1, r5
 8014e80:	f002 fac2 	bl	8017408 <finite>
 8014e84:	2800      	cmp	r0, #0
 8014e86:	f43f af3d 	beq.w	8014d04 <pow+0xe4>
 8014e8a:	2304      	movs	r3, #4
 8014e8c:	9304      	str	r3, [sp, #16]
 8014e8e:	4b0b      	ldr	r3, [pc, #44]	; (8014ebc <pow+0x29c>)
 8014e90:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8014e94:	9305      	str	r3, [sp, #20]
 8014e96:	2300      	movs	r3, #0
 8014e98:	2400      	movs	r4, #0
 8014e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014ea2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8014ea6:	e7b8      	b.n	8014e1a <pow+0x1fa>
 8014ea8:	a804      	add	r0, sp, #16
 8014eaa:	f002 fb39 	bl	8017520 <matherr>
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	f47f af1e 	bne.w	8014cf0 <pow+0xd0>
 8014eb4:	e7b5      	b.n	8014e22 <pow+0x202>
 8014eb6:	bf00      	nop
 8014eb8:	20000724 	.word	0x20000724
 8014ebc:	080193ee 	.word	0x080193ee
 8014ec0:	3ff00000 	.word	0x3ff00000
 8014ec4:	fff00000 	.word	0xfff00000
 8014ec8:	3fe00000 	.word	0x3fe00000
 8014ecc:	47efffff 	.word	0x47efffff
 8014ed0:	c7efffff 	.word	0xc7efffff
 8014ed4:	7ff00000 	.word	0x7ff00000

08014ed8 <sqrt>:
 8014ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014edc:	b08b      	sub	sp, #44	; 0x2c
 8014ede:	4604      	mov	r4, r0
 8014ee0:	460d      	mov	r5, r1
 8014ee2:	f000 ff95 	bl	8015e10 <__ieee754_sqrt>
 8014ee6:	4b24      	ldr	r3, [pc, #144]	; (8014f78 <sqrt+0xa0>)
 8014ee8:	4680      	mov	r8, r0
 8014eea:	f993 a000 	ldrsb.w	sl, [r3]
 8014eee:	4689      	mov	r9, r1
 8014ef0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014ef4:	d02b      	beq.n	8014f4e <sqrt+0x76>
 8014ef6:	4622      	mov	r2, r4
 8014ef8:	462b      	mov	r3, r5
 8014efa:	4620      	mov	r0, r4
 8014efc:	4629      	mov	r1, r5
 8014efe:	f7eb fd85 	bl	8000a0c <__aeabi_dcmpun>
 8014f02:	4683      	mov	fp, r0
 8014f04:	bb18      	cbnz	r0, 8014f4e <sqrt+0x76>
 8014f06:	2600      	movs	r6, #0
 8014f08:	2700      	movs	r7, #0
 8014f0a:	4632      	mov	r2, r6
 8014f0c:	463b      	mov	r3, r7
 8014f0e:	4620      	mov	r0, r4
 8014f10:	4629      	mov	r1, r5
 8014f12:	f7eb fd53 	bl	80009bc <__aeabi_dcmplt>
 8014f16:	b1d0      	cbz	r0, 8014f4e <sqrt+0x76>
 8014f18:	2301      	movs	r3, #1
 8014f1a:	9300      	str	r3, [sp, #0]
 8014f1c:	4b17      	ldr	r3, [pc, #92]	; (8014f7c <sqrt+0xa4>)
 8014f1e:	f8cd b020 	str.w	fp, [sp, #32]
 8014f22:	9301      	str	r3, [sp, #4]
 8014f24:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014f28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014f2c:	f1ba 0f00 	cmp.w	sl, #0
 8014f30:	d112      	bne.n	8014f58 <sqrt+0x80>
 8014f32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014f36:	4668      	mov	r0, sp
 8014f38:	f002 faf2 	bl	8017520 <matherr>
 8014f3c:	b1b8      	cbz	r0, 8014f6e <sqrt+0x96>
 8014f3e:	9b08      	ldr	r3, [sp, #32]
 8014f40:	b11b      	cbz	r3, 8014f4a <sqrt+0x72>
 8014f42:	f002 fc95 	bl	8017870 <__errno>
 8014f46:	9b08      	ldr	r3, [sp, #32]
 8014f48:	6003      	str	r3, [r0, #0]
 8014f4a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8014f4e:	4640      	mov	r0, r8
 8014f50:	4649      	mov	r1, r9
 8014f52:	b00b      	add	sp, #44	; 0x2c
 8014f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f58:	4632      	mov	r2, r6
 8014f5a:	463b      	mov	r3, r7
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	4639      	mov	r1, r7
 8014f60:	f7eb fbe4 	bl	800072c <__aeabi_ddiv>
 8014f64:	f1ba 0f02 	cmp.w	sl, #2
 8014f68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014f6c:	d1e3      	bne.n	8014f36 <sqrt+0x5e>
 8014f6e:	f002 fc7f 	bl	8017870 <__errno>
 8014f72:	2321      	movs	r3, #33	; 0x21
 8014f74:	6003      	str	r3, [r0, #0]
 8014f76:	e7e2      	b.n	8014f3e <sqrt+0x66>
 8014f78:	20000724 	.word	0x20000724
 8014f7c:	080193f2 	.word	0x080193f2

08014f80 <sqrtf>:
 8014f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f82:	b08b      	sub	sp, #44	; 0x2c
 8014f84:	4604      	mov	r4, r0
 8014f86:	f001 f947 	bl	8016218 <__ieee754_sqrtf>
 8014f8a:	4b20      	ldr	r3, [pc, #128]	; (801500c <sqrtf+0x8c>)
 8014f8c:	4606      	mov	r6, r0
 8014f8e:	f993 5000 	ldrsb.w	r5, [r3]
 8014f92:	1c6b      	adds	r3, r5, #1
 8014f94:	d02a      	beq.n	8014fec <sqrtf+0x6c>
 8014f96:	4621      	mov	r1, r4
 8014f98:	4620      	mov	r0, r4
 8014f9a:	f7ec f899 	bl	80010d0 <__aeabi_fcmpun>
 8014f9e:	4607      	mov	r7, r0
 8014fa0:	bb20      	cbnz	r0, 8014fec <sqrtf+0x6c>
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f7ec f86b 	bl	8001080 <__aeabi_fcmplt>
 8014faa:	b1f8      	cbz	r0, 8014fec <sqrtf+0x6c>
 8014fac:	2301      	movs	r3, #1
 8014fae:	9300      	str	r3, [sp, #0]
 8014fb0:	4b17      	ldr	r3, [pc, #92]	; (8015010 <sqrtf+0x90>)
 8014fb2:	4620      	mov	r0, r4
 8014fb4:	9301      	str	r3, [sp, #4]
 8014fb6:	9708      	str	r7, [sp, #32]
 8014fb8:	f7eb fa36 	bl	8000428 <__aeabi_f2d>
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	b99d      	cbnz	r5, 8014ff2 <sqrtf+0x72>
 8014fca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014fce:	4668      	mov	r0, sp
 8014fd0:	f002 faa6 	bl	8017520 <matherr>
 8014fd4:	b1a8      	cbz	r0, 8015002 <sqrtf+0x82>
 8014fd6:	9b08      	ldr	r3, [sp, #32]
 8014fd8:	b11b      	cbz	r3, 8014fe2 <sqrtf+0x62>
 8014fda:	f002 fc49 	bl	8017870 <__errno>
 8014fde:	9b08      	ldr	r3, [sp, #32]
 8014fe0:	6003      	str	r3, [r0, #0]
 8014fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014fe6:	f7eb fd4f 	bl	8000a88 <__aeabi_d2f>
 8014fea:	4606      	mov	r6, r0
 8014fec:	4630      	mov	r0, r6
 8014fee:	b00b      	add	sp, #44	; 0x2c
 8014ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ff2:	4610      	mov	r0, r2
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	f7eb fb99 	bl	800072c <__aeabi_ddiv>
 8014ffa:	2d02      	cmp	r5, #2
 8014ffc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015000:	d1e5      	bne.n	8014fce <sqrtf+0x4e>
 8015002:	f002 fc35 	bl	8017870 <__errno>
 8015006:	2321      	movs	r3, #33	; 0x21
 8015008:	6003      	str	r3, [r0, #0]
 801500a:	e7e4      	b.n	8014fd6 <sqrtf+0x56>
 801500c:	20000724 	.word	0x20000724
 8015010:	080193f7 	.word	0x080193f7
 8015014:	00000000 	.word	0x00000000

08015018 <__ieee754_pow>:
 8015018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801501c:	b091      	sub	sp, #68	; 0x44
 801501e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015022:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8015026:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801502a:	ea55 0302 	orrs.w	r3, r5, r2
 801502e:	4607      	mov	r7, r0
 8015030:	4688      	mov	r8, r1
 8015032:	f000 84b7 	beq.w	80159a4 <__ieee754_pow+0x98c>
 8015036:	4b80      	ldr	r3, [pc, #512]	; (8015238 <__ieee754_pow+0x220>)
 8015038:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 801503c:	429c      	cmp	r4, r3
 801503e:	4689      	mov	r9, r1
 8015040:	4682      	mov	sl, r0
 8015042:	dc09      	bgt.n	8015058 <__ieee754_pow+0x40>
 8015044:	d103      	bne.n	801504e <__ieee754_pow+0x36>
 8015046:	b938      	cbnz	r0, 8015058 <__ieee754_pow+0x40>
 8015048:	42a5      	cmp	r5, r4
 801504a:	dc0d      	bgt.n	8015068 <__ieee754_pow+0x50>
 801504c:	e001      	b.n	8015052 <__ieee754_pow+0x3a>
 801504e:	429d      	cmp	r5, r3
 8015050:	dc02      	bgt.n	8015058 <__ieee754_pow+0x40>
 8015052:	429d      	cmp	r5, r3
 8015054:	d10e      	bne.n	8015074 <__ieee754_pow+0x5c>
 8015056:	b16a      	cbz	r2, 8015074 <__ieee754_pow+0x5c>
 8015058:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801505c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015060:	ea54 030a 	orrs.w	r3, r4, sl
 8015064:	f000 849e 	beq.w	80159a4 <__ieee754_pow+0x98c>
 8015068:	4874      	ldr	r0, [pc, #464]	; (801523c <__ieee754_pow+0x224>)
 801506a:	b011      	add	sp, #68	; 0x44
 801506c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015070:	f002 ba58 	b.w	8017524 <nan>
 8015074:	f1b9 0f00 	cmp.w	r9, #0
 8015078:	da53      	bge.n	8015122 <__ieee754_pow+0x10a>
 801507a:	4b71      	ldr	r3, [pc, #452]	; (8015240 <__ieee754_pow+0x228>)
 801507c:	429d      	cmp	r5, r3
 801507e:	dc4e      	bgt.n	801511e <__ieee754_pow+0x106>
 8015080:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015084:	429d      	cmp	r5, r3
 8015086:	dd4c      	ble.n	8015122 <__ieee754_pow+0x10a>
 8015088:	152b      	asrs	r3, r5, #20
 801508a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801508e:	2b14      	cmp	r3, #20
 8015090:	dd28      	ble.n	80150e4 <__ieee754_pow+0xcc>
 8015092:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015096:	fa22 f103 	lsr.w	r1, r2, r3
 801509a:	fa01 f303 	lsl.w	r3, r1, r3
 801509e:	4293      	cmp	r3, r2
 80150a0:	d13f      	bne.n	8015122 <__ieee754_pow+0x10a>
 80150a2:	f001 0101 	and.w	r1, r1, #1
 80150a6:	f1c1 0302 	rsb	r3, r1, #2
 80150aa:	9300      	str	r3, [sp, #0]
 80150ac:	2a00      	cmp	r2, #0
 80150ae:	d15c      	bne.n	801516a <__ieee754_pow+0x152>
 80150b0:	4b61      	ldr	r3, [pc, #388]	; (8015238 <__ieee754_pow+0x220>)
 80150b2:	429d      	cmp	r5, r3
 80150b4:	d126      	bne.n	8015104 <__ieee754_pow+0xec>
 80150b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80150ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80150be:	ea53 030a 	orrs.w	r3, r3, sl
 80150c2:	f000 846f 	beq.w	80159a4 <__ieee754_pow+0x98c>
 80150c6:	4b5f      	ldr	r3, [pc, #380]	; (8015244 <__ieee754_pow+0x22c>)
 80150c8:	429c      	cmp	r4, r3
 80150ca:	dd2c      	ble.n	8015126 <__ieee754_pow+0x10e>
 80150cc:	2e00      	cmp	r6, #0
 80150ce:	f280 846f 	bge.w	80159b0 <__ieee754_pow+0x998>
 80150d2:	f04f 0b00 	mov.w	fp, #0
 80150d6:	f04f 0c00 	mov.w	ip, #0
 80150da:	4658      	mov	r0, fp
 80150dc:	4661      	mov	r1, ip
 80150de:	b011      	add	sp, #68	; 0x44
 80150e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e4:	2a00      	cmp	r2, #0
 80150e6:	d13e      	bne.n	8015166 <__ieee754_pow+0x14e>
 80150e8:	f1c3 0314 	rsb	r3, r3, #20
 80150ec:	fa45 f103 	asr.w	r1, r5, r3
 80150f0:	fa01 f303 	lsl.w	r3, r1, r3
 80150f4:	42ab      	cmp	r3, r5
 80150f6:	f040 8463 	bne.w	80159c0 <__ieee754_pow+0x9a8>
 80150fa:	f001 0101 	and.w	r1, r1, #1
 80150fe:	f1c1 0302 	rsb	r3, r1, #2
 8015102:	9300      	str	r3, [sp, #0]
 8015104:	4b50      	ldr	r3, [pc, #320]	; (8015248 <__ieee754_pow+0x230>)
 8015106:	429d      	cmp	r5, r3
 8015108:	d114      	bne.n	8015134 <__ieee754_pow+0x11c>
 801510a:	2e00      	cmp	r6, #0
 801510c:	f280 8454 	bge.w	80159b8 <__ieee754_pow+0x9a0>
 8015110:	463a      	mov	r2, r7
 8015112:	4643      	mov	r3, r8
 8015114:	2000      	movs	r0, #0
 8015116:	494c      	ldr	r1, [pc, #304]	; (8015248 <__ieee754_pow+0x230>)
 8015118:	f7eb fb08 	bl	800072c <__aeabi_ddiv>
 801511c:	e013      	b.n	8015146 <__ieee754_pow+0x12e>
 801511e:	2302      	movs	r3, #2
 8015120:	e7c3      	b.n	80150aa <__ieee754_pow+0x92>
 8015122:	2300      	movs	r3, #0
 8015124:	e7c1      	b.n	80150aa <__ieee754_pow+0x92>
 8015126:	2e00      	cmp	r6, #0
 8015128:	dad3      	bge.n	80150d2 <__ieee754_pow+0xba>
 801512a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801512e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8015132:	e7d2      	b.n	80150da <__ieee754_pow+0xc2>
 8015134:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8015138:	d108      	bne.n	801514c <__ieee754_pow+0x134>
 801513a:	463a      	mov	r2, r7
 801513c:	4643      	mov	r3, r8
 801513e:	4638      	mov	r0, r7
 8015140:	4641      	mov	r1, r8
 8015142:	f7eb f9c9 	bl	80004d8 <__aeabi_dmul>
 8015146:	4683      	mov	fp, r0
 8015148:	468c      	mov	ip, r1
 801514a:	e7c6      	b.n	80150da <__ieee754_pow+0xc2>
 801514c:	4b3f      	ldr	r3, [pc, #252]	; (801524c <__ieee754_pow+0x234>)
 801514e:	429e      	cmp	r6, r3
 8015150:	d10b      	bne.n	801516a <__ieee754_pow+0x152>
 8015152:	f1b9 0f00 	cmp.w	r9, #0
 8015156:	db08      	blt.n	801516a <__ieee754_pow+0x152>
 8015158:	4638      	mov	r0, r7
 801515a:	4641      	mov	r1, r8
 801515c:	b011      	add	sp, #68	; 0x44
 801515e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015162:	f000 be55 	b.w	8015e10 <__ieee754_sqrt>
 8015166:	2300      	movs	r3, #0
 8015168:	9300      	str	r3, [sp, #0]
 801516a:	4638      	mov	r0, r7
 801516c:	4641      	mov	r1, r8
 801516e:	f002 f947 	bl	8017400 <fabs>
 8015172:	4683      	mov	fp, r0
 8015174:	468c      	mov	ip, r1
 8015176:	f1ba 0f00 	cmp.w	sl, #0
 801517a:	d12b      	bne.n	80151d4 <__ieee754_pow+0x1bc>
 801517c:	b124      	cbz	r4, 8015188 <__ieee754_pow+0x170>
 801517e:	4b32      	ldr	r3, [pc, #200]	; (8015248 <__ieee754_pow+0x230>)
 8015180:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8015184:	429a      	cmp	r2, r3
 8015186:	d125      	bne.n	80151d4 <__ieee754_pow+0x1bc>
 8015188:	2e00      	cmp	r6, #0
 801518a:	da07      	bge.n	801519c <__ieee754_pow+0x184>
 801518c:	465a      	mov	r2, fp
 801518e:	4663      	mov	r3, ip
 8015190:	2000      	movs	r0, #0
 8015192:	492d      	ldr	r1, [pc, #180]	; (8015248 <__ieee754_pow+0x230>)
 8015194:	f7eb faca 	bl	800072c <__aeabi_ddiv>
 8015198:	4683      	mov	fp, r0
 801519a:	468c      	mov	ip, r1
 801519c:	f1b9 0f00 	cmp.w	r9, #0
 80151a0:	da9b      	bge.n	80150da <__ieee754_pow+0xc2>
 80151a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80151a6:	9b00      	ldr	r3, [sp, #0]
 80151a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80151ac:	4323      	orrs	r3, r4
 80151ae:	d108      	bne.n	80151c2 <__ieee754_pow+0x1aa>
 80151b0:	465a      	mov	r2, fp
 80151b2:	4663      	mov	r3, ip
 80151b4:	4658      	mov	r0, fp
 80151b6:	4661      	mov	r1, ip
 80151b8:	f7ea ffd6 	bl	8000168 <__aeabi_dsub>
 80151bc:	4602      	mov	r2, r0
 80151be:	460b      	mov	r3, r1
 80151c0:	e7aa      	b.n	8015118 <__ieee754_pow+0x100>
 80151c2:	9b00      	ldr	r3, [sp, #0]
 80151c4:	2b01      	cmp	r3, #1
 80151c6:	d188      	bne.n	80150da <__ieee754_pow+0xc2>
 80151c8:	4658      	mov	r0, fp
 80151ca:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80151ce:	4683      	mov	fp, r0
 80151d0:	469c      	mov	ip, r3
 80151d2:	e782      	b.n	80150da <__ieee754_pow+0xc2>
 80151d4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80151d8:	f109 33ff 	add.w	r3, r9, #4294967295
 80151dc:	930d      	str	r3, [sp, #52]	; 0x34
 80151de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151e0:	9b00      	ldr	r3, [sp, #0]
 80151e2:	4313      	orrs	r3, r2
 80151e4:	d104      	bne.n	80151f0 <__ieee754_pow+0x1d8>
 80151e6:	463a      	mov	r2, r7
 80151e8:	4643      	mov	r3, r8
 80151ea:	4638      	mov	r0, r7
 80151ec:	4641      	mov	r1, r8
 80151ee:	e7e3      	b.n	80151b8 <__ieee754_pow+0x1a0>
 80151f0:	4b17      	ldr	r3, [pc, #92]	; (8015250 <__ieee754_pow+0x238>)
 80151f2:	429d      	cmp	r5, r3
 80151f4:	f340 80fe 	ble.w	80153f4 <__ieee754_pow+0x3dc>
 80151f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80151fc:	429d      	cmp	r5, r3
 80151fe:	dd0b      	ble.n	8015218 <__ieee754_pow+0x200>
 8015200:	4b10      	ldr	r3, [pc, #64]	; (8015244 <__ieee754_pow+0x22c>)
 8015202:	429c      	cmp	r4, r3
 8015204:	dc0e      	bgt.n	8015224 <__ieee754_pow+0x20c>
 8015206:	2e00      	cmp	r6, #0
 8015208:	f6bf af63 	bge.w	80150d2 <__ieee754_pow+0xba>
 801520c:	a308      	add	r3, pc, #32	; (adr r3, 8015230 <__ieee754_pow+0x218>)
 801520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015212:	4610      	mov	r0, r2
 8015214:	4619      	mov	r1, r3
 8015216:	e794      	b.n	8015142 <__ieee754_pow+0x12a>
 8015218:	4b0e      	ldr	r3, [pc, #56]	; (8015254 <__ieee754_pow+0x23c>)
 801521a:	429c      	cmp	r4, r3
 801521c:	ddf3      	ble.n	8015206 <__ieee754_pow+0x1ee>
 801521e:	4b0a      	ldr	r3, [pc, #40]	; (8015248 <__ieee754_pow+0x230>)
 8015220:	429c      	cmp	r4, r3
 8015222:	dd19      	ble.n	8015258 <__ieee754_pow+0x240>
 8015224:	2e00      	cmp	r6, #0
 8015226:	dcf1      	bgt.n	801520c <__ieee754_pow+0x1f4>
 8015228:	e753      	b.n	80150d2 <__ieee754_pow+0xba>
 801522a:	bf00      	nop
 801522c:	f3af 8000 	nop.w
 8015230:	8800759c 	.word	0x8800759c
 8015234:	7e37e43c 	.word	0x7e37e43c
 8015238:	7ff00000 	.word	0x7ff00000
 801523c:	080193ed 	.word	0x080193ed
 8015240:	433fffff 	.word	0x433fffff
 8015244:	3fefffff 	.word	0x3fefffff
 8015248:	3ff00000 	.word	0x3ff00000
 801524c:	3fe00000 	.word	0x3fe00000
 8015250:	41e00000 	.word	0x41e00000
 8015254:	3feffffe 	.word	0x3feffffe
 8015258:	4661      	mov	r1, ip
 801525a:	2200      	movs	r2, #0
 801525c:	4b60      	ldr	r3, [pc, #384]	; (80153e0 <__ieee754_pow+0x3c8>)
 801525e:	4658      	mov	r0, fp
 8015260:	f7ea ff82 	bl	8000168 <__aeabi_dsub>
 8015264:	a354      	add	r3, pc, #336	; (adr r3, 80153b8 <__ieee754_pow+0x3a0>)
 8015266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801526a:	4604      	mov	r4, r0
 801526c:	460d      	mov	r5, r1
 801526e:	f7eb f933 	bl	80004d8 <__aeabi_dmul>
 8015272:	a353      	add	r3, pc, #332	; (adr r3, 80153c0 <__ieee754_pow+0x3a8>)
 8015274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015278:	4606      	mov	r6, r0
 801527a:	460f      	mov	r7, r1
 801527c:	4620      	mov	r0, r4
 801527e:	4629      	mov	r1, r5
 8015280:	f7eb f92a 	bl	80004d8 <__aeabi_dmul>
 8015284:	2200      	movs	r2, #0
 8015286:	4682      	mov	sl, r0
 8015288:	468b      	mov	fp, r1
 801528a:	4b56      	ldr	r3, [pc, #344]	; (80153e4 <__ieee754_pow+0x3cc>)
 801528c:	4620      	mov	r0, r4
 801528e:	4629      	mov	r1, r5
 8015290:	f7eb f922 	bl	80004d8 <__aeabi_dmul>
 8015294:	4602      	mov	r2, r0
 8015296:	460b      	mov	r3, r1
 8015298:	a14b      	add	r1, pc, #300	; (adr r1, 80153c8 <__ieee754_pow+0x3b0>)
 801529a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801529e:	f7ea ff63 	bl	8000168 <__aeabi_dsub>
 80152a2:	4622      	mov	r2, r4
 80152a4:	462b      	mov	r3, r5
 80152a6:	f7eb f917 	bl	80004d8 <__aeabi_dmul>
 80152aa:	4602      	mov	r2, r0
 80152ac:	460b      	mov	r3, r1
 80152ae:	2000      	movs	r0, #0
 80152b0:	494d      	ldr	r1, [pc, #308]	; (80153e8 <__ieee754_pow+0x3d0>)
 80152b2:	f7ea ff59 	bl	8000168 <__aeabi_dsub>
 80152b6:	4622      	mov	r2, r4
 80152b8:	462b      	mov	r3, r5
 80152ba:	4680      	mov	r8, r0
 80152bc:	4689      	mov	r9, r1
 80152be:	4620      	mov	r0, r4
 80152c0:	4629      	mov	r1, r5
 80152c2:	f7eb f909 	bl	80004d8 <__aeabi_dmul>
 80152c6:	4602      	mov	r2, r0
 80152c8:	460b      	mov	r3, r1
 80152ca:	4640      	mov	r0, r8
 80152cc:	4649      	mov	r1, r9
 80152ce:	f7eb f903 	bl	80004d8 <__aeabi_dmul>
 80152d2:	a33f      	add	r3, pc, #252	; (adr r3, 80153d0 <__ieee754_pow+0x3b8>)
 80152d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152d8:	f7eb f8fe 	bl	80004d8 <__aeabi_dmul>
 80152dc:	4602      	mov	r2, r0
 80152de:	460b      	mov	r3, r1
 80152e0:	4650      	mov	r0, sl
 80152e2:	4659      	mov	r1, fp
 80152e4:	f7ea ff40 	bl	8000168 <__aeabi_dsub>
 80152e8:	4602      	mov	r2, r0
 80152ea:	460b      	mov	r3, r1
 80152ec:	4604      	mov	r4, r0
 80152ee:	460d      	mov	r5, r1
 80152f0:	4630      	mov	r0, r6
 80152f2:	4639      	mov	r1, r7
 80152f4:	f7ea ff3a 	bl	800016c <__adddf3>
 80152f8:	2000      	movs	r0, #0
 80152fa:	468b      	mov	fp, r1
 80152fc:	4682      	mov	sl, r0
 80152fe:	4632      	mov	r2, r6
 8015300:	463b      	mov	r3, r7
 8015302:	f7ea ff31 	bl	8000168 <__aeabi_dsub>
 8015306:	4602      	mov	r2, r0
 8015308:	460b      	mov	r3, r1
 801530a:	4620      	mov	r0, r4
 801530c:	4629      	mov	r1, r5
 801530e:	f7ea ff2b 	bl	8000168 <__aeabi_dsub>
 8015312:	9b00      	ldr	r3, [sp, #0]
 8015314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015316:	3b01      	subs	r3, #1
 8015318:	4313      	orrs	r3, r2
 801531a:	f04f 0300 	mov.w	r3, #0
 801531e:	bf0c      	ite	eq
 8015320:	4c32      	ldreq	r4, [pc, #200]	; (80153ec <__ieee754_pow+0x3d4>)
 8015322:	4c2f      	ldrne	r4, [pc, #188]	; (80153e0 <__ieee754_pow+0x3c8>)
 8015324:	4606      	mov	r6, r0
 8015326:	e9cd 3400 	strd	r3, r4, [sp]
 801532a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801532e:	2400      	movs	r4, #0
 8015330:	460f      	mov	r7, r1
 8015332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015336:	4622      	mov	r2, r4
 8015338:	462b      	mov	r3, r5
 801533a:	f7ea ff15 	bl	8000168 <__aeabi_dsub>
 801533e:	4652      	mov	r2, sl
 8015340:	465b      	mov	r3, fp
 8015342:	f7eb f8c9 	bl	80004d8 <__aeabi_dmul>
 8015346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801534a:	4680      	mov	r8, r0
 801534c:	4689      	mov	r9, r1
 801534e:	4630      	mov	r0, r6
 8015350:	4639      	mov	r1, r7
 8015352:	f7eb f8c1 	bl	80004d8 <__aeabi_dmul>
 8015356:	4602      	mov	r2, r0
 8015358:	460b      	mov	r3, r1
 801535a:	4640      	mov	r0, r8
 801535c:	4649      	mov	r1, r9
 801535e:	f7ea ff05 	bl	800016c <__adddf3>
 8015362:	4622      	mov	r2, r4
 8015364:	462b      	mov	r3, r5
 8015366:	4680      	mov	r8, r0
 8015368:	4689      	mov	r9, r1
 801536a:	4650      	mov	r0, sl
 801536c:	4659      	mov	r1, fp
 801536e:	f7eb f8b3 	bl	80004d8 <__aeabi_dmul>
 8015372:	4604      	mov	r4, r0
 8015374:	460d      	mov	r5, r1
 8015376:	460b      	mov	r3, r1
 8015378:	4602      	mov	r2, r0
 801537a:	4649      	mov	r1, r9
 801537c:	4640      	mov	r0, r8
 801537e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015382:	f7ea fef3 	bl	800016c <__adddf3>
 8015386:	4b1a      	ldr	r3, [pc, #104]	; (80153f0 <__ieee754_pow+0x3d8>)
 8015388:	4682      	mov	sl, r0
 801538a:	4299      	cmp	r1, r3
 801538c:	460f      	mov	r7, r1
 801538e:	460e      	mov	r6, r1
 8015390:	f340 82e1 	ble.w	8015956 <__ieee754_pow+0x93e>
 8015394:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015398:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801539c:	4303      	orrs	r3, r0
 801539e:	f000 81db 	beq.w	8015758 <__ieee754_pow+0x740>
 80153a2:	a30d      	add	r3, pc, #52	; (adr r3, 80153d8 <__ieee754_pow+0x3c0>)
 80153a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153ac:	f7eb f894 	bl	80004d8 <__aeabi_dmul>
 80153b0:	a309      	add	r3, pc, #36	; (adr r3, 80153d8 <__ieee754_pow+0x3c0>)
 80153b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b6:	e6c4      	b.n	8015142 <__ieee754_pow+0x12a>
 80153b8:	60000000 	.word	0x60000000
 80153bc:	3ff71547 	.word	0x3ff71547
 80153c0:	f85ddf44 	.word	0xf85ddf44
 80153c4:	3e54ae0b 	.word	0x3e54ae0b
 80153c8:	55555555 	.word	0x55555555
 80153cc:	3fd55555 	.word	0x3fd55555
 80153d0:	652b82fe 	.word	0x652b82fe
 80153d4:	3ff71547 	.word	0x3ff71547
 80153d8:	8800759c 	.word	0x8800759c
 80153dc:	7e37e43c 	.word	0x7e37e43c
 80153e0:	3ff00000 	.word	0x3ff00000
 80153e4:	3fd00000 	.word	0x3fd00000
 80153e8:	3fe00000 	.word	0x3fe00000
 80153ec:	bff00000 	.word	0xbff00000
 80153f0:	408fffff 	.word	0x408fffff
 80153f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80153f8:	f04f 0200 	mov.w	r2, #0
 80153fc:	da08      	bge.n	8015410 <__ieee754_pow+0x3f8>
 80153fe:	4658      	mov	r0, fp
 8015400:	4bcd      	ldr	r3, [pc, #820]	; (8015738 <__ieee754_pow+0x720>)
 8015402:	4661      	mov	r1, ip
 8015404:	f7eb f868 	bl	80004d8 <__aeabi_dmul>
 8015408:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801540c:	4683      	mov	fp, r0
 801540e:	460c      	mov	r4, r1
 8015410:	1523      	asrs	r3, r4, #20
 8015412:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015416:	4413      	add	r3, r2
 8015418:	930c      	str	r3, [sp, #48]	; 0x30
 801541a:	4bc8      	ldr	r3, [pc, #800]	; (801573c <__ieee754_pow+0x724>)
 801541c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015420:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015424:	429c      	cmp	r4, r3
 8015426:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801542a:	dd08      	ble.n	801543e <__ieee754_pow+0x426>
 801542c:	4bc4      	ldr	r3, [pc, #784]	; (8015740 <__ieee754_pow+0x728>)
 801542e:	429c      	cmp	r4, r3
 8015430:	f340 815b 	ble.w	80156ea <__ieee754_pow+0x6d2>
 8015434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015436:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801543a:	3301      	adds	r3, #1
 801543c:	930c      	str	r3, [sp, #48]	; 0x30
 801543e:	f04f 0800 	mov.w	r8, #0
 8015442:	4658      	mov	r0, fp
 8015444:	4629      	mov	r1, r5
 8015446:	4bbf      	ldr	r3, [pc, #764]	; (8015744 <__ieee754_pow+0x72c>)
 8015448:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 801544c:	444b      	add	r3, r9
 801544e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015452:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8015456:	461a      	mov	r2, r3
 8015458:	4623      	mov	r3, r4
 801545a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801545e:	f7ea fe83 	bl	8000168 <__aeabi_dsub>
 8015462:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015466:	4606      	mov	r6, r0
 8015468:	460f      	mov	r7, r1
 801546a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801546e:	f7ea fe7d 	bl	800016c <__adddf3>
 8015472:	4602      	mov	r2, r0
 8015474:	460b      	mov	r3, r1
 8015476:	2000      	movs	r0, #0
 8015478:	49b3      	ldr	r1, [pc, #716]	; (8015748 <__ieee754_pow+0x730>)
 801547a:	f7eb f957 	bl	800072c <__aeabi_ddiv>
 801547e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015482:	4602      	mov	r2, r0
 8015484:	460b      	mov	r3, r1
 8015486:	4630      	mov	r0, r6
 8015488:	4639      	mov	r1, r7
 801548a:	f7eb f825 	bl	80004d8 <__aeabi_dmul>
 801548e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015492:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8015496:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801549a:	2300      	movs	r3, #0
 801549c:	2200      	movs	r2, #0
 801549e:	106d      	asrs	r5, r5, #1
 80154a0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80154a4:	9304      	str	r3, [sp, #16]
 80154a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80154aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80154ae:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80154b2:	4650      	mov	r0, sl
 80154b4:	4659      	mov	r1, fp
 80154b6:	4614      	mov	r4, r2
 80154b8:	461d      	mov	r5, r3
 80154ba:	f7eb f80d 	bl	80004d8 <__aeabi_dmul>
 80154be:	4602      	mov	r2, r0
 80154c0:	460b      	mov	r3, r1
 80154c2:	4630      	mov	r0, r6
 80154c4:	4639      	mov	r1, r7
 80154c6:	f7ea fe4f 	bl	8000168 <__aeabi_dsub>
 80154ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80154ce:	4606      	mov	r6, r0
 80154d0:	460f      	mov	r7, r1
 80154d2:	4620      	mov	r0, r4
 80154d4:	4629      	mov	r1, r5
 80154d6:	f7ea fe47 	bl	8000168 <__aeabi_dsub>
 80154da:	4602      	mov	r2, r0
 80154dc:	460b      	mov	r3, r1
 80154de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80154e2:	f7ea fe41 	bl	8000168 <__aeabi_dsub>
 80154e6:	4652      	mov	r2, sl
 80154e8:	465b      	mov	r3, fp
 80154ea:	f7ea fff5 	bl	80004d8 <__aeabi_dmul>
 80154ee:	4602      	mov	r2, r0
 80154f0:	460b      	mov	r3, r1
 80154f2:	4630      	mov	r0, r6
 80154f4:	4639      	mov	r1, r7
 80154f6:	f7ea fe37 	bl	8000168 <__aeabi_dsub>
 80154fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80154fe:	f7ea ffeb 	bl	80004d8 <__aeabi_dmul>
 8015502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015506:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801550a:	4610      	mov	r0, r2
 801550c:	4619      	mov	r1, r3
 801550e:	f7ea ffe3 	bl	80004d8 <__aeabi_dmul>
 8015512:	a377      	add	r3, pc, #476	; (adr r3, 80156f0 <__ieee754_pow+0x6d8>)
 8015514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015518:	4604      	mov	r4, r0
 801551a:	460d      	mov	r5, r1
 801551c:	f7ea ffdc 	bl	80004d8 <__aeabi_dmul>
 8015520:	a375      	add	r3, pc, #468	; (adr r3, 80156f8 <__ieee754_pow+0x6e0>)
 8015522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015526:	f7ea fe21 	bl	800016c <__adddf3>
 801552a:	4622      	mov	r2, r4
 801552c:	462b      	mov	r3, r5
 801552e:	f7ea ffd3 	bl	80004d8 <__aeabi_dmul>
 8015532:	a373      	add	r3, pc, #460	; (adr r3, 8015700 <__ieee754_pow+0x6e8>)
 8015534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015538:	f7ea fe18 	bl	800016c <__adddf3>
 801553c:	4622      	mov	r2, r4
 801553e:	462b      	mov	r3, r5
 8015540:	f7ea ffca 	bl	80004d8 <__aeabi_dmul>
 8015544:	a370      	add	r3, pc, #448	; (adr r3, 8015708 <__ieee754_pow+0x6f0>)
 8015546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801554a:	f7ea fe0f 	bl	800016c <__adddf3>
 801554e:	4622      	mov	r2, r4
 8015550:	462b      	mov	r3, r5
 8015552:	f7ea ffc1 	bl	80004d8 <__aeabi_dmul>
 8015556:	a36e      	add	r3, pc, #440	; (adr r3, 8015710 <__ieee754_pow+0x6f8>)
 8015558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801555c:	f7ea fe06 	bl	800016c <__adddf3>
 8015560:	4622      	mov	r2, r4
 8015562:	462b      	mov	r3, r5
 8015564:	f7ea ffb8 	bl	80004d8 <__aeabi_dmul>
 8015568:	a36b      	add	r3, pc, #428	; (adr r3, 8015718 <__ieee754_pow+0x700>)
 801556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556e:	f7ea fdfd 	bl	800016c <__adddf3>
 8015572:	4622      	mov	r2, r4
 8015574:	4606      	mov	r6, r0
 8015576:	460f      	mov	r7, r1
 8015578:	462b      	mov	r3, r5
 801557a:	4620      	mov	r0, r4
 801557c:	4629      	mov	r1, r5
 801557e:	f7ea ffab 	bl	80004d8 <__aeabi_dmul>
 8015582:	4602      	mov	r2, r0
 8015584:	460b      	mov	r3, r1
 8015586:	4630      	mov	r0, r6
 8015588:	4639      	mov	r1, r7
 801558a:	f7ea ffa5 	bl	80004d8 <__aeabi_dmul>
 801558e:	4604      	mov	r4, r0
 8015590:	460d      	mov	r5, r1
 8015592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015596:	4652      	mov	r2, sl
 8015598:	465b      	mov	r3, fp
 801559a:	f7ea fde7 	bl	800016c <__adddf3>
 801559e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80155a2:	f7ea ff99 	bl	80004d8 <__aeabi_dmul>
 80155a6:	4622      	mov	r2, r4
 80155a8:	462b      	mov	r3, r5
 80155aa:	f7ea fddf 	bl	800016c <__adddf3>
 80155ae:	4652      	mov	r2, sl
 80155b0:	4606      	mov	r6, r0
 80155b2:	460f      	mov	r7, r1
 80155b4:	465b      	mov	r3, fp
 80155b6:	4650      	mov	r0, sl
 80155b8:	4659      	mov	r1, fp
 80155ba:	f7ea ff8d 	bl	80004d8 <__aeabi_dmul>
 80155be:	2200      	movs	r2, #0
 80155c0:	4b62      	ldr	r3, [pc, #392]	; (801574c <__ieee754_pow+0x734>)
 80155c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80155c6:	f7ea fdd1 	bl	800016c <__adddf3>
 80155ca:	4632      	mov	r2, r6
 80155cc:	463b      	mov	r3, r7
 80155ce:	f7ea fdcd 	bl	800016c <__adddf3>
 80155d2:	9804      	ldr	r0, [sp, #16]
 80155d4:	460d      	mov	r5, r1
 80155d6:	4604      	mov	r4, r0
 80155d8:	4602      	mov	r2, r0
 80155da:	460b      	mov	r3, r1
 80155dc:	4650      	mov	r0, sl
 80155de:	4659      	mov	r1, fp
 80155e0:	f7ea ff7a 	bl	80004d8 <__aeabi_dmul>
 80155e4:	2200      	movs	r2, #0
 80155e6:	4682      	mov	sl, r0
 80155e8:	468b      	mov	fp, r1
 80155ea:	4b58      	ldr	r3, [pc, #352]	; (801574c <__ieee754_pow+0x734>)
 80155ec:	4620      	mov	r0, r4
 80155ee:	4629      	mov	r1, r5
 80155f0:	f7ea fdba 	bl	8000168 <__aeabi_dsub>
 80155f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80155f8:	f7ea fdb6 	bl	8000168 <__aeabi_dsub>
 80155fc:	4602      	mov	r2, r0
 80155fe:	460b      	mov	r3, r1
 8015600:	4630      	mov	r0, r6
 8015602:	4639      	mov	r1, r7
 8015604:	f7ea fdb0 	bl	8000168 <__aeabi_dsub>
 8015608:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801560c:	f7ea ff64 	bl	80004d8 <__aeabi_dmul>
 8015610:	4622      	mov	r2, r4
 8015612:	4606      	mov	r6, r0
 8015614:	460f      	mov	r7, r1
 8015616:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801561a:	462b      	mov	r3, r5
 801561c:	f7ea ff5c 	bl	80004d8 <__aeabi_dmul>
 8015620:	4602      	mov	r2, r0
 8015622:	460b      	mov	r3, r1
 8015624:	4630      	mov	r0, r6
 8015626:	4639      	mov	r1, r7
 8015628:	f7ea fda0 	bl	800016c <__adddf3>
 801562c:	4606      	mov	r6, r0
 801562e:	460f      	mov	r7, r1
 8015630:	4602      	mov	r2, r0
 8015632:	460b      	mov	r3, r1
 8015634:	4650      	mov	r0, sl
 8015636:	4659      	mov	r1, fp
 8015638:	f7ea fd98 	bl	800016c <__adddf3>
 801563c:	a338      	add	r3, pc, #224	; (adr r3, 8015720 <__ieee754_pow+0x708>)
 801563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015642:	9804      	ldr	r0, [sp, #16]
 8015644:	460d      	mov	r5, r1
 8015646:	4604      	mov	r4, r0
 8015648:	f7ea ff46 	bl	80004d8 <__aeabi_dmul>
 801564c:	4652      	mov	r2, sl
 801564e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015652:	465b      	mov	r3, fp
 8015654:	4620      	mov	r0, r4
 8015656:	4629      	mov	r1, r5
 8015658:	f7ea fd86 	bl	8000168 <__aeabi_dsub>
 801565c:	4602      	mov	r2, r0
 801565e:	460b      	mov	r3, r1
 8015660:	4630      	mov	r0, r6
 8015662:	4639      	mov	r1, r7
 8015664:	f7ea fd80 	bl	8000168 <__aeabi_dsub>
 8015668:	a32f      	add	r3, pc, #188	; (adr r3, 8015728 <__ieee754_pow+0x710>)
 801566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801566e:	f7ea ff33 	bl	80004d8 <__aeabi_dmul>
 8015672:	a32f      	add	r3, pc, #188	; (adr r3, 8015730 <__ieee754_pow+0x718>)
 8015674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015678:	4606      	mov	r6, r0
 801567a:	460f      	mov	r7, r1
 801567c:	4620      	mov	r0, r4
 801567e:	4629      	mov	r1, r5
 8015680:	f7ea ff2a 	bl	80004d8 <__aeabi_dmul>
 8015684:	4602      	mov	r2, r0
 8015686:	460b      	mov	r3, r1
 8015688:	4630      	mov	r0, r6
 801568a:	4639      	mov	r1, r7
 801568c:	f7ea fd6e 	bl	800016c <__adddf3>
 8015690:	4b2f      	ldr	r3, [pc, #188]	; (8015750 <__ieee754_pow+0x738>)
 8015692:	444b      	add	r3, r9
 8015694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015698:	f7ea fd68 	bl	800016c <__adddf3>
 801569c:	4604      	mov	r4, r0
 801569e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80156a0:	460d      	mov	r5, r1
 80156a2:	f7ea feaf 	bl	8000404 <__aeabi_i2d>
 80156a6:	4606      	mov	r6, r0
 80156a8:	460f      	mov	r7, r1
 80156aa:	4b2a      	ldr	r3, [pc, #168]	; (8015754 <__ieee754_pow+0x73c>)
 80156ac:	4622      	mov	r2, r4
 80156ae:	444b      	add	r3, r9
 80156b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80156b4:	462b      	mov	r3, r5
 80156b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156ba:	f7ea fd57 	bl	800016c <__adddf3>
 80156be:	4642      	mov	r2, r8
 80156c0:	464b      	mov	r3, r9
 80156c2:	f7ea fd53 	bl	800016c <__adddf3>
 80156c6:	4632      	mov	r2, r6
 80156c8:	463b      	mov	r3, r7
 80156ca:	f7ea fd4f 	bl	800016c <__adddf3>
 80156ce:	9804      	ldr	r0, [sp, #16]
 80156d0:	4632      	mov	r2, r6
 80156d2:	463b      	mov	r3, r7
 80156d4:	4682      	mov	sl, r0
 80156d6:	468b      	mov	fp, r1
 80156d8:	f7ea fd46 	bl	8000168 <__aeabi_dsub>
 80156dc:	4642      	mov	r2, r8
 80156de:	464b      	mov	r3, r9
 80156e0:	f7ea fd42 	bl	8000168 <__aeabi_dsub>
 80156e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80156e8:	e60b      	b.n	8015302 <__ieee754_pow+0x2ea>
 80156ea:	f04f 0801 	mov.w	r8, #1
 80156ee:	e6a8      	b.n	8015442 <__ieee754_pow+0x42a>
 80156f0:	4a454eef 	.word	0x4a454eef
 80156f4:	3fca7e28 	.word	0x3fca7e28
 80156f8:	93c9db65 	.word	0x93c9db65
 80156fc:	3fcd864a 	.word	0x3fcd864a
 8015700:	a91d4101 	.word	0xa91d4101
 8015704:	3fd17460 	.word	0x3fd17460
 8015708:	518f264d 	.word	0x518f264d
 801570c:	3fd55555 	.word	0x3fd55555
 8015710:	db6fabff 	.word	0xdb6fabff
 8015714:	3fdb6db6 	.word	0x3fdb6db6
 8015718:	33333303 	.word	0x33333303
 801571c:	3fe33333 	.word	0x3fe33333
 8015720:	e0000000 	.word	0xe0000000
 8015724:	3feec709 	.word	0x3feec709
 8015728:	dc3a03fd 	.word	0xdc3a03fd
 801572c:	3feec709 	.word	0x3feec709
 8015730:	145b01f5 	.word	0x145b01f5
 8015734:	be3e2fe0 	.word	0xbe3e2fe0
 8015738:	43400000 	.word	0x43400000
 801573c:	0003988e 	.word	0x0003988e
 8015740:	000bb679 	.word	0x000bb679
 8015744:	08019400 	.word	0x08019400
 8015748:	3ff00000 	.word	0x3ff00000
 801574c:	40080000 	.word	0x40080000
 8015750:	08019420 	.word	0x08019420
 8015754:	08019410 	.word	0x08019410
 8015758:	a39b      	add	r3, pc, #620	; (adr r3, 80159c8 <__ieee754_pow+0x9b0>)
 801575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801575e:	4640      	mov	r0, r8
 8015760:	4649      	mov	r1, r9
 8015762:	f7ea fd03 	bl	800016c <__adddf3>
 8015766:	4622      	mov	r2, r4
 8015768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801576c:	462b      	mov	r3, r5
 801576e:	4650      	mov	r0, sl
 8015770:	4639      	mov	r1, r7
 8015772:	f7ea fcf9 	bl	8000168 <__aeabi_dsub>
 8015776:	4602      	mov	r2, r0
 8015778:	460b      	mov	r3, r1
 801577a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801577e:	f7eb f93b 	bl	80009f8 <__aeabi_dcmpgt>
 8015782:	2800      	cmp	r0, #0
 8015784:	f47f ae0d 	bne.w	80153a2 <__ieee754_pow+0x38a>
 8015788:	4aa3      	ldr	r2, [pc, #652]	; (8015a18 <__ieee754_pow+0xa00>)
 801578a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 801578e:	4293      	cmp	r3, r2
 8015790:	f340 8103 	ble.w	801599a <__ieee754_pow+0x982>
 8015794:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015798:	2000      	movs	r0, #0
 801579a:	151b      	asrs	r3, r3, #20
 801579c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80157a0:	fa4a f303 	asr.w	r3, sl, r3
 80157a4:	4433      	add	r3, r6
 80157a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80157aa:	4f9c      	ldr	r7, [pc, #624]	; (8015a1c <__ieee754_pow+0xa04>)
 80157ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80157b0:	4117      	asrs	r7, r2
 80157b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80157b6:	ea23 0107 	bic.w	r1, r3, r7
 80157ba:	f1c2 0214 	rsb	r2, r2, #20
 80157be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80157c2:	fa4a fa02 	asr.w	sl, sl, r2
 80157c6:	2e00      	cmp	r6, #0
 80157c8:	4602      	mov	r2, r0
 80157ca:	460b      	mov	r3, r1
 80157cc:	4620      	mov	r0, r4
 80157ce:	4629      	mov	r1, r5
 80157d0:	bfb8      	it	lt
 80157d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80157d6:	f7ea fcc7 	bl	8000168 <__aeabi_dsub>
 80157da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80157de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80157e2:	4642      	mov	r2, r8
 80157e4:	464b      	mov	r3, r9
 80157e6:	f7ea fcc1 	bl	800016c <__adddf3>
 80157ea:	a379      	add	r3, pc, #484	; (adr r3, 80159d0 <__ieee754_pow+0x9b8>)
 80157ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f0:	2000      	movs	r0, #0
 80157f2:	460d      	mov	r5, r1
 80157f4:	4604      	mov	r4, r0
 80157f6:	f7ea fe6f 	bl	80004d8 <__aeabi_dmul>
 80157fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157fe:	4606      	mov	r6, r0
 8015800:	460f      	mov	r7, r1
 8015802:	4620      	mov	r0, r4
 8015804:	4629      	mov	r1, r5
 8015806:	f7ea fcaf 	bl	8000168 <__aeabi_dsub>
 801580a:	4602      	mov	r2, r0
 801580c:	460b      	mov	r3, r1
 801580e:	4640      	mov	r0, r8
 8015810:	4649      	mov	r1, r9
 8015812:	f7ea fca9 	bl	8000168 <__aeabi_dsub>
 8015816:	a370      	add	r3, pc, #448	; (adr r3, 80159d8 <__ieee754_pow+0x9c0>)
 8015818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801581c:	f7ea fe5c 	bl	80004d8 <__aeabi_dmul>
 8015820:	a36f      	add	r3, pc, #444	; (adr r3, 80159e0 <__ieee754_pow+0x9c8>)
 8015822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015826:	4680      	mov	r8, r0
 8015828:	4689      	mov	r9, r1
 801582a:	4620      	mov	r0, r4
 801582c:	4629      	mov	r1, r5
 801582e:	f7ea fe53 	bl	80004d8 <__aeabi_dmul>
 8015832:	4602      	mov	r2, r0
 8015834:	460b      	mov	r3, r1
 8015836:	4640      	mov	r0, r8
 8015838:	4649      	mov	r1, r9
 801583a:	f7ea fc97 	bl	800016c <__adddf3>
 801583e:	4604      	mov	r4, r0
 8015840:	460d      	mov	r5, r1
 8015842:	4602      	mov	r2, r0
 8015844:	460b      	mov	r3, r1
 8015846:	4630      	mov	r0, r6
 8015848:	4639      	mov	r1, r7
 801584a:	f7ea fc8f 	bl	800016c <__adddf3>
 801584e:	4632      	mov	r2, r6
 8015850:	463b      	mov	r3, r7
 8015852:	4680      	mov	r8, r0
 8015854:	4689      	mov	r9, r1
 8015856:	f7ea fc87 	bl	8000168 <__aeabi_dsub>
 801585a:	4602      	mov	r2, r0
 801585c:	460b      	mov	r3, r1
 801585e:	4620      	mov	r0, r4
 8015860:	4629      	mov	r1, r5
 8015862:	f7ea fc81 	bl	8000168 <__aeabi_dsub>
 8015866:	4642      	mov	r2, r8
 8015868:	4606      	mov	r6, r0
 801586a:	460f      	mov	r7, r1
 801586c:	464b      	mov	r3, r9
 801586e:	4640      	mov	r0, r8
 8015870:	4649      	mov	r1, r9
 8015872:	f7ea fe31 	bl	80004d8 <__aeabi_dmul>
 8015876:	a35c      	add	r3, pc, #368	; (adr r3, 80159e8 <__ieee754_pow+0x9d0>)
 8015878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801587c:	4604      	mov	r4, r0
 801587e:	460d      	mov	r5, r1
 8015880:	f7ea fe2a 	bl	80004d8 <__aeabi_dmul>
 8015884:	a35a      	add	r3, pc, #360	; (adr r3, 80159f0 <__ieee754_pow+0x9d8>)
 8015886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801588a:	f7ea fc6d 	bl	8000168 <__aeabi_dsub>
 801588e:	4622      	mov	r2, r4
 8015890:	462b      	mov	r3, r5
 8015892:	f7ea fe21 	bl	80004d8 <__aeabi_dmul>
 8015896:	a358      	add	r3, pc, #352	; (adr r3, 80159f8 <__ieee754_pow+0x9e0>)
 8015898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801589c:	f7ea fc66 	bl	800016c <__adddf3>
 80158a0:	4622      	mov	r2, r4
 80158a2:	462b      	mov	r3, r5
 80158a4:	f7ea fe18 	bl	80004d8 <__aeabi_dmul>
 80158a8:	a355      	add	r3, pc, #340	; (adr r3, 8015a00 <__ieee754_pow+0x9e8>)
 80158aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ae:	f7ea fc5b 	bl	8000168 <__aeabi_dsub>
 80158b2:	4622      	mov	r2, r4
 80158b4:	462b      	mov	r3, r5
 80158b6:	f7ea fe0f 	bl	80004d8 <__aeabi_dmul>
 80158ba:	a353      	add	r3, pc, #332	; (adr r3, 8015a08 <__ieee754_pow+0x9f0>)
 80158bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c0:	f7ea fc54 	bl	800016c <__adddf3>
 80158c4:	4622      	mov	r2, r4
 80158c6:	462b      	mov	r3, r5
 80158c8:	f7ea fe06 	bl	80004d8 <__aeabi_dmul>
 80158cc:	4602      	mov	r2, r0
 80158ce:	460b      	mov	r3, r1
 80158d0:	4640      	mov	r0, r8
 80158d2:	4649      	mov	r1, r9
 80158d4:	f7ea fc48 	bl	8000168 <__aeabi_dsub>
 80158d8:	4604      	mov	r4, r0
 80158da:	460d      	mov	r5, r1
 80158dc:	4602      	mov	r2, r0
 80158de:	460b      	mov	r3, r1
 80158e0:	4640      	mov	r0, r8
 80158e2:	4649      	mov	r1, r9
 80158e4:	f7ea fdf8 	bl	80004d8 <__aeabi_dmul>
 80158e8:	2200      	movs	r2, #0
 80158ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80158ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80158f2:	4620      	mov	r0, r4
 80158f4:	4629      	mov	r1, r5
 80158f6:	f7ea fc37 	bl	8000168 <__aeabi_dsub>
 80158fa:	4602      	mov	r2, r0
 80158fc:	460b      	mov	r3, r1
 80158fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015902:	f7ea ff13 	bl	800072c <__aeabi_ddiv>
 8015906:	4632      	mov	r2, r6
 8015908:	4604      	mov	r4, r0
 801590a:	460d      	mov	r5, r1
 801590c:	463b      	mov	r3, r7
 801590e:	4640      	mov	r0, r8
 8015910:	4649      	mov	r1, r9
 8015912:	f7ea fde1 	bl	80004d8 <__aeabi_dmul>
 8015916:	4632      	mov	r2, r6
 8015918:	463b      	mov	r3, r7
 801591a:	f7ea fc27 	bl	800016c <__adddf3>
 801591e:	4602      	mov	r2, r0
 8015920:	460b      	mov	r3, r1
 8015922:	4620      	mov	r0, r4
 8015924:	4629      	mov	r1, r5
 8015926:	f7ea fc1f 	bl	8000168 <__aeabi_dsub>
 801592a:	4642      	mov	r2, r8
 801592c:	464b      	mov	r3, r9
 801592e:	f7ea fc1b 	bl	8000168 <__aeabi_dsub>
 8015932:	4602      	mov	r2, r0
 8015934:	460b      	mov	r3, r1
 8015936:	2000      	movs	r0, #0
 8015938:	4939      	ldr	r1, [pc, #228]	; (8015a20 <__ieee754_pow+0xa08>)
 801593a:	f7ea fc15 	bl	8000168 <__aeabi_dsub>
 801593e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015942:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015946:	da2b      	bge.n	80159a0 <__ieee754_pow+0x988>
 8015948:	4652      	mov	r2, sl
 801594a:	f001 fe7d 	bl	8017648 <scalbn>
 801594e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015952:	f7ff bbf6 	b.w	8015142 <__ieee754_pow+0x12a>
 8015956:	4b33      	ldr	r3, [pc, #204]	; (8015a24 <__ieee754_pow+0xa0c>)
 8015958:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801595c:	429f      	cmp	r7, r3
 801595e:	f77f af13 	ble.w	8015788 <__ieee754_pow+0x770>
 8015962:	4b31      	ldr	r3, [pc, #196]	; (8015a28 <__ieee754_pow+0xa10>)
 8015964:	440b      	add	r3, r1
 8015966:	4303      	orrs	r3, r0
 8015968:	d00b      	beq.n	8015982 <__ieee754_pow+0x96a>
 801596a:	a329      	add	r3, pc, #164	; (adr r3, 8015a10 <__ieee754_pow+0x9f8>)
 801596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015970:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015974:	f7ea fdb0 	bl	80004d8 <__aeabi_dmul>
 8015978:	a325      	add	r3, pc, #148	; (adr r3, 8015a10 <__ieee754_pow+0x9f8>)
 801597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801597e:	f7ff bbe0 	b.w	8015142 <__ieee754_pow+0x12a>
 8015982:	4622      	mov	r2, r4
 8015984:	462b      	mov	r3, r5
 8015986:	f7ea fbef 	bl	8000168 <__aeabi_dsub>
 801598a:	4642      	mov	r2, r8
 801598c:	464b      	mov	r3, r9
 801598e:	f7eb f829 	bl	80009e4 <__aeabi_dcmpge>
 8015992:	2800      	cmp	r0, #0
 8015994:	f43f aef8 	beq.w	8015788 <__ieee754_pow+0x770>
 8015998:	e7e7      	b.n	801596a <__ieee754_pow+0x952>
 801599a:	f04f 0a00 	mov.w	sl, #0
 801599e:	e71e      	b.n	80157de <__ieee754_pow+0x7c6>
 80159a0:	4621      	mov	r1, r4
 80159a2:	e7d4      	b.n	801594e <__ieee754_pow+0x936>
 80159a4:	f04f 0b00 	mov.w	fp, #0
 80159a8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015a20 <__ieee754_pow+0xa08>
 80159ac:	f7ff bb95 	b.w	80150da <__ieee754_pow+0xc2>
 80159b0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80159b4:	f7ff bb91 	b.w	80150da <__ieee754_pow+0xc2>
 80159b8:	4638      	mov	r0, r7
 80159ba:	4641      	mov	r1, r8
 80159bc:	f7ff bbc3 	b.w	8015146 <__ieee754_pow+0x12e>
 80159c0:	9200      	str	r2, [sp, #0]
 80159c2:	f7ff bb9f 	b.w	8015104 <__ieee754_pow+0xec>
 80159c6:	bf00      	nop
 80159c8:	652b82fe 	.word	0x652b82fe
 80159cc:	3c971547 	.word	0x3c971547
 80159d0:	00000000 	.word	0x00000000
 80159d4:	3fe62e43 	.word	0x3fe62e43
 80159d8:	fefa39ef 	.word	0xfefa39ef
 80159dc:	3fe62e42 	.word	0x3fe62e42
 80159e0:	0ca86c39 	.word	0x0ca86c39
 80159e4:	be205c61 	.word	0xbe205c61
 80159e8:	72bea4d0 	.word	0x72bea4d0
 80159ec:	3e663769 	.word	0x3e663769
 80159f0:	c5d26bf1 	.word	0xc5d26bf1
 80159f4:	3ebbbd41 	.word	0x3ebbbd41
 80159f8:	af25de2c 	.word	0xaf25de2c
 80159fc:	3f11566a 	.word	0x3f11566a
 8015a00:	16bebd93 	.word	0x16bebd93
 8015a04:	3f66c16c 	.word	0x3f66c16c
 8015a08:	5555553e 	.word	0x5555553e
 8015a0c:	3fc55555 	.word	0x3fc55555
 8015a10:	c2f8f359 	.word	0xc2f8f359
 8015a14:	01a56e1f 	.word	0x01a56e1f
 8015a18:	3fe00000 	.word	0x3fe00000
 8015a1c:	000fffff 	.word	0x000fffff
 8015a20:	3ff00000 	.word	0x3ff00000
 8015a24:	4090cbff 	.word	0x4090cbff
 8015a28:	3f6f3400 	.word	0x3f6f3400
 8015a2c:	00000000 	.word	0x00000000

08015a30 <__ieee754_rem_pio2>:
 8015a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a34:	4614      	mov	r4, r2
 8015a36:	4ac2      	ldr	r2, [pc, #776]	; (8015d40 <__ieee754_rem_pio2+0x310>)
 8015a38:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8015a3c:	4592      	cmp	sl, r2
 8015a3e:	b08d      	sub	sp, #52	; 0x34
 8015a40:	468b      	mov	fp, r1
 8015a42:	dc07      	bgt.n	8015a54 <__ieee754_rem_pio2+0x24>
 8015a44:	2200      	movs	r2, #0
 8015a46:	2300      	movs	r3, #0
 8015a48:	e9c4 0100 	strd	r0, r1, [r4]
 8015a4c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8015a50:	2500      	movs	r5, #0
 8015a52:	e023      	b.n	8015a9c <__ieee754_rem_pio2+0x6c>
 8015a54:	4abb      	ldr	r2, [pc, #748]	; (8015d44 <__ieee754_rem_pio2+0x314>)
 8015a56:	4592      	cmp	sl, r2
 8015a58:	dc71      	bgt.n	8015b3e <__ieee754_rem_pio2+0x10e>
 8015a5a:	a3ab      	add	r3, pc, #684	; (adr r3, 8015d08 <__ieee754_rem_pio2+0x2d8>)
 8015a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a60:	2900      	cmp	r1, #0
 8015a62:	4db9      	ldr	r5, [pc, #740]	; (8015d48 <__ieee754_rem_pio2+0x318>)
 8015a64:	dd36      	ble.n	8015ad4 <__ieee754_rem_pio2+0xa4>
 8015a66:	f7ea fb7f 	bl	8000168 <__aeabi_dsub>
 8015a6a:	45aa      	cmp	sl, r5
 8015a6c:	4606      	mov	r6, r0
 8015a6e:	460f      	mov	r7, r1
 8015a70:	d018      	beq.n	8015aa4 <__ieee754_rem_pio2+0x74>
 8015a72:	a3a7      	add	r3, pc, #668	; (adr r3, 8015d10 <__ieee754_rem_pio2+0x2e0>)
 8015a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a78:	f7ea fb76 	bl	8000168 <__aeabi_dsub>
 8015a7c:	4602      	mov	r2, r0
 8015a7e:	460b      	mov	r3, r1
 8015a80:	4630      	mov	r0, r6
 8015a82:	e9c4 2300 	strd	r2, r3, [r4]
 8015a86:	4639      	mov	r1, r7
 8015a88:	f7ea fb6e 	bl	8000168 <__aeabi_dsub>
 8015a8c:	a3a0      	add	r3, pc, #640	; (adr r3, 8015d10 <__ieee754_rem_pio2+0x2e0>)
 8015a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a92:	f7ea fb69 	bl	8000168 <__aeabi_dsub>
 8015a96:	2501      	movs	r5, #1
 8015a98:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	b00d      	add	sp, #52	; 0x34
 8015aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa4:	a39c      	add	r3, pc, #624	; (adr r3, 8015d18 <__ieee754_rem_pio2+0x2e8>)
 8015aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aaa:	f7ea fb5d 	bl	8000168 <__aeabi_dsub>
 8015aae:	a39c      	add	r3, pc, #624	; (adr r3, 8015d20 <__ieee754_rem_pio2+0x2f0>)
 8015ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab4:	4606      	mov	r6, r0
 8015ab6:	460f      	mov	r7, r1
 8015ab8:	f7ea fb56 	bl	8000168 <__aeabi_dsub>
 8015abc:	4602      	mov	r2, r0
 8015abe:	460b      	mov	r3, r1
 8015ac0:	4630      	mov	r0, r6
 8015ac2:	e9c4 2300 	strd	r2, r3, [r4]
 8015ac6:	4639      	mov	r1, r7
 8015ac8:	f7ea fb4e 	bl	8000168 <__aeabi_dsub>
 8015acc:	a394      	add	r3, pc, #592	; (adr r3, 8015d20 <__ieee754_rem_pio2+0x2f0>)
 8015ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad2:	e7de      	b.n	8015a92 <__ieee754_rem_pio2+0x62>
 8015ad4:	f7ea fb4a 	bl	800016c <__adddf3>
 8015ad8:	45aa      	cmp	sl, r5
 8015ada:	4606      	mov	r6, r0
 8015adc:	460f      	mov	r7, r1
 8015ade:	d016      	beq.n	8015b0e <__ieee754_rem_pio2+0xde>
 8015ae0:	a38b      	add	r3, pc, #556	; (adr r3, 8015d10 <__ieee754_rem_pio2+0x2e0>)
 8015ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae6:	f7ea fb41 	bl	800016c <__adddf3>
 8015aea:	4602      	mov	r2, r0
 8015aec:	460b      	mov	r3, r1
 8015aee:	4630      	mov	r0, r6
 8015af0:	e9c4 2300 	strd	r2, r3, [r4]
 8015af4:	4639      	mov	r1, r7
 8015af6:	f7ea fb37 	bl	8000168 <__aeabi_dsub>
 8015afa:	a385      	add	r3, pc, #532	; (adr r3, 8015d10 <__ieee754_rem_pio2+0x2e0>)
 8015afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b00:	f7ea fb34 	bl	800016c <__adddf3>
 8015b04:	f04f 35ff 	mov.w	r5, #4294967295
 8015b08:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015b0c:	e7c6      	b.n	8015a9c <__ieee754_rem_pio2+0x6c>
 8015b0e:	a382      	add	r3, pc, #520	; (adr r3, 8015d18 <__ieee754_rem_pio2+0x2e8>)
 8015b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b14:	f7ea fb2a 	bl	800016c <__adddf3>
 8015b18:	a381      	add	r3, pc, #516	; (adr r3, 8015d20 <__ieee754_rem_pio2+0x2f0>)
 8015b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b1e:	4606      	mov	r6, r0
 8015b20:	460f      	mov	r7, r1
 8015b22:	f7ea fb23 	bl	800016c <__adddf3>
 8015b26:	4602      	mov	r2, r0
 8015b28:	460b      	mov	r3, r1
 8015b2a:	4630      	mov	r0, r6
 8015b2c:	e9c4 2300 	strd	r2, r3, [r4]
 8015b30:	4639      	mov	r1, r7
 8015b32:	f7ea fb19 	bl	8000168 <__aeabi_dsub>
 8015b36:	a37a      	add	r3, pc, #488	; (adr r3, 8015d20 <__ieee754_rem_pio2+0x2f0>)
 8015b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b3c:	e7e0      	b.n	8015b00 <__ieee754_rem_pio2+0xd0>
 8015b3e:	4a83      	ldr	r2, [pc, #524]	; (8015d4c <__ieee754_rem_pio2+0x31c>)
 8015b40:	4592      	cmp	sl, r2
 8015b42:	f300 80d2 	bgt.w	8015cea <__ieee754_rem_pio2+0x2ba>
 8015b46:	f001 fc5b 	bl	8017400 <fabs>
 8015b4a:	a377      	add	r3, pc, #476	; (adr r3, 8015d28 <__ieee754_rem_pio2+0x2f8>)
 8015b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b50:	4606      	mov	r6, r0
 8015b52:	460f      	mov	r7, r1
 8015b54:	f7ea fcc0 	bl	80004d8 <__aeabi_dmul>
 8015b58:	2200      	movs	r2, #0
 8015b5a:	4b7d      	ldr	r3, [pc, #500]	; (8015d50 <__ieee754_rem_pio2+0x320>)
 8015b5c:	f7ea fb06 	bl	800016c <__adddf3>
 8015b60:	f7ea ff6a 	bl	8000a38 <__aeabi_d2iz>
 8015b64:	4605      	mov	r5, r0
 8015b66:	f7ea fc4d 	bl	8000404 <__aeabi_i2d>
 8015b6a:	a367      	add	r3, pc, #412	; (adr r3, 8015d08 <__ieee754_rem_pio2+0x2d8>)
 8015b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b74:	f7ea fcb0 	bl	80004d8 <__aeabi_dmul>
 8015b78:	4602      	mov	r2, r0
 8015b7a:	460b      	mov	r3, r1
 8015b7c:	4630      	mov	r0, r6
 8015b7e:	4639      	mov	r1, r7
 8015b80:	f7ea faf2 	bl	8000168 <__aeabi_dsub>
 8015b84:	a362      	add	r3, pc, #392	; (adr r3, 8015d10 <__ieee754_rem_pio2+0x2e0>)
 8015b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b8a:	4606      	mov	r6, r0
 8015b8c:	460f      	mov	r7, r1
 8015b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b92:	f7ea fca1 	bl	80004d8 <__aeabi_dmul>
 8015b96:	2d1f      	cmp	r5, #31
 8015b98:	4680      	mov	r8, r0
 8015b9a:	4689      	mov	r9, r1
 8015b9c:	dc0e      	bgt.n	8015bbc <__ieee754_rem_pio2+0x18c>
 8015b9e:	4b6d      	ldr	r3, [pc, #436]	; (8015d54 <__ieee754_rem_pio2+0x324>)
 8015ba0:	1e6a      	subs	r2, r5, #1
 8015ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ba6:	4553      	cmp	r3, sl
 8015ba8:	d008      	beq.n	8015bbc <__ieee754_rem_pio2+0x18c>
 8015baa:	4642      	mov	r2, r8
 8015bac:	464b      	mov	r3, r9
 8015bae:	4630      	mov	r0, r6
 8015bb0:	4639      	mov	r1, r7
 8015bb2:	f7ea fad9 	bl	8000168 <__aeabi_dsub>
 8015bb6:	e9c4 0100 	strd	r0, r1, [r4]
 8015bba:	e011      	b.n	8015be0 <__ieee754_rem_pio2+0x1b0>
 8015bbc:	464b      	mov	r3, r9
 8015bbe:	4642      	mov	r2, r8
 8015bc0:	4630      	mov	r0, r6
 8015bc2:	4639      	mov	r1, r7
 8015bc4:	f7ea fad0 	bl	8000168 <__aeabi_dsub>
 8015bc8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8015bcc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015bd0:	ebaa 0303 	sub.w	r3, sl, r3
 8015bd4:	2b10      	cmp	r3, #16
 8015bd6:	dc1f      	bgt.n	8015c18 <__ieee754_rem_pio2+0x1e8>
 8015bd8:	4602      	mov	r2, r0
 8015bda:	460b      	mov	r3, r1
 8015bdc:	e9c4 2300 	strd	r2, r3, [r4]
 8015be0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8015be4:	4630      	mov	r0, r6
 8015be6:	4653      	mov	r3, sl
 8015be8:	4639      	mov	r1, r7
 8015bea:	f7ea fabd 	bl	8000168 <__aeabi_dsub>
 8015bee:	4642      	mov	r2, r8
 8015bf0:	464b      	mov	r3, r9
 8015bf2:	f7ea fab9 	bl	8000168 <__aeabi_dsub>
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	460b      	mov	r3, r1
 8015bfa:	f1bb 0f00 	cmp.w	fp, #0
 8015bfe:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8015c02:	f6bf af4b 	bge.w	8015a9c <__ieee754_rem_pio2+0x6c>
 8015c06:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8015c0a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8015c0e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8015c12:	60e1      	str	r1, [r4, #12]
 8015c14:	426d      	negs	r5, r5
 8015c16:	e741      	b.n	8015a9c <__ieee754_rem_pio2+0x6c>
 8015c18:	a33f      	add	r3, pc, #252	; (adr r3, 8015d18 <__ieee754_rem_pio2+0x2e8>)
 8015c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c22:	f7ea fc59 	bl	80004d8 <__aeabi_dmul>
 8015c26:	4680      	mov	r8, r0
 8015c28:	4689      	mov	r9, r1
 8015c2a:	4602      	mov	r2, r0
 8015c2c:	460b      	mov	r3, r1
 8015c2e:	4630      	mov	r0, r6
 8015c30:	4639      	mov	r1, r7
 8015c32:	f7ea fa99 	bl	8000168 <__aeabi_dsub>
 8015c36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015c3a:	4602      	mov	r2, r0
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	4630      	mov	r0, r6
 8015c40:	4639      	mov	r1, r7
 8015c42:	f7ea fa91 	bl	8000168 <__aeabi_dsub>
 8015c46:	4642      	mov	r2, r8
 8015c48:	464b      	mov	r3, r9
 8015c4a:	f7ea fa8d 	bl	8000168 <__aeabi_dsub>
 8015c4e:	a334      	add	r3, pc, #208	; (adr r3, 8015d20 <__ieee754_rem_pio2+0x2f0>)
 8015c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c54:	4606      	mov	r6, r0
 8015c56:	460f      	mov	r7, r1
 8015c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c5c:	f7ea fc3c 	bl	80004d8 <__aeabi_dmul>
 8015c60:	4632      	mov	r2, r6
 8015c62:	463b      	mov	r3, r7
 8015c64:	f7ea fa80 	bl	8000168 <__aeabi_dsub>
 8015c68:	460b      	mov	r3, r1
 8015c6a:	4602      	mov	r2, r0
 8015c6c:	4680      	mov	r8, r0
 8015c6e:	4689      	mov	r9, r1
 8015c70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015c74:	f7ea fa78 	bl	8000168 <__aeabi_dsub>
 8015c78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015c7c:	ebaa 0a03 	sub.w	sl, sl, r3
 8015c80:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8015c84:	dc06      	bgt.n	8015c94 <__ieee754_rem_pio2+0x264>
 8015c86:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8015c8a:	4602      	mov	r2, r0
 8015c8c:	460b      	mov	r3, r1
 8015c8e:	e9c4 2300 	strd	r2, r3, [r4]
 8015c92:	e7a5      	b.n	8015be0 <__ieee754_rem_pio2+0x1b0>
 8015c94:	a326      	add	r3, pc, #152	; (adr r3, 8015d30 <__ieee754_rem_pio2+0x300>)
 8015c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c9e:	f7ea fc1b 	bl	80004d8 <__aeabi_dmul>
 8015ca2:	4680      	mov	r8, r0
 8015ca4:	4689      	mov	r9, r1
 8015ca6:	4602      	mov	r2, r0
 8015ca8:	460b      	mov	r3, r1
 8015caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015cae:	f7ea fa5b 	bl	8000168 <__aeabi_dsub>
 8015cb2:	4602      	mov	r2, r0
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	4606      	mov	r6, r0
 8015cb8:	460f      	mov	r7, r1
 8015cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015cbe:	f7ea fa53 	bl	8000168 <__aeabi_dsub>
 8015cc2:	4642      	mov	r2, r8
 8015cc4:	464b      	mov	r3, r9
 8015cc6:	f7ea fa4f 	bl	8000168 <__aeabi_dsub>
 8015cca:	a31b      	add	r3, pc, #108	; (adr r3, 8015d38 <__ieee754_rem_pio2+0x308>)
 8015ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd0:	4680      	mov	r8, r0
 8015cd2:	4689      	mov	r9, r1
 8015cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015cd8:	f7ea fbfe 	bl	80004d8 <__aeabi_dmul>
 8015cdc:	4642      	mov	r2, r8
 8015cde:	464b      	mov	r3, r9
 8015ce0:	f7ea fa42 	bl	8000168 <__aeabi_dsub>
 8015ce4:	4680      	mov	r8, r0
 8015ce6:	4689      	mov	r9, r1
 8015ce8:	e75f      	b.n	8015baa <__ieee754_rem_pio2+0x17a>
 8015cea:	4a1b      	ldr	r2, [pc, #108]	; (8015d58 <__ieee754_rem_pio2+0x328>)
 8015cec:	4592      	cmp	sl, r2
 8015cee:	dd35      	ble.n	8015d5c <__ieee754_rem_pio2+0x32c>
 8015cf0:	4602      	mov	r2, r0
 8015cf2:	460b      	mov	r3, r1
 8015cf4:	f7ea fa38 	bl	8000168 <__aeabi_dsub>
 8015cf8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015cfc:	e9c4 0100 	strd	r0, r1, [r4]
 8015d00:	e6a6      	b.n	8015a50 <__ieee754_rem_pio2+0x20>
 8015d02:	bf00      	nop
 8015d04:	f3af 8000 	nop.w
 8015d08:	54400000 	.word	0x54400000
 8015d0c:	3ff921fb 	.word	0x3ff921fb
 8015d10:	1a626331 	.word	0x1a626331
 8015d14:	3dd0b461 	.word	0x3dd0b461
 8015d18:	1a600000 	.word	0x1a600000
 8015d1c:	3dd0b461 	.word	0x3dd0b461
 8015d20:	2e037073 	.word	0x2e037073
 8015d24:	3ba3198a 	.word	0x3ba3198a
 8015d28:	6dc9c883 	.word	0x6dc9c883
 8015d2c:	3fe45f30 	.word	0x3fe45f30
 8015d30:	2e000000 	.word	0x2e000000
 8015d34:	3ba3198a 	.word	0x3ba3198a
 8015d38:	252049c1 	.word	0x252049c1
 8015d3c:	397b839a 	.word	0x397b839a
 8015d40:	3fe921fb 	.word	0x3fe921fb
 8015d44:	4002d97b 	.word	0x4002d97b
 8015d48:	3ff921fb 	.word	0x3ff921fb
 8015d4c:	413921fb 	.word	0x413921fb
 8015d50:	3fe00000 	.word	0x3fe00000
 8015d54:	08019430 	.word	0x08019430
 8015d58:	7fefffff 	.word	0x7fefffff
 8015d5c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8015d60:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8015d64:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8015d68:	460f      	mov	r7, r1
 8015d6a:	4606      	mov	r6, r0
 8015d6c:	f7ea fe64 	bl	8000a38 <__aeabi_d2iz>
 8015d70:	f7ea fb48 	bl	8000404 <__aeabi_i2d>
 8015d74:	4602      	mov	r2, r0
 8015d76:	460b      	mov	r3, r1
 8015d78:	4630      	mov	r0, r6
 8015d7a:	4639      	mov	r1, r7
 8015d7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015d80:	f7ea f9f2 	bl	8000168 <__aeabi_dsub>
 8015d84:	2200      	movs	r2, #0
 8015d86:	4b20      	ldr	r3, [pc, #128]	; (8015e08 <__ieee754_rem_pio2+0x3d8>)
 8015d88:	f7ea fba6 	bl	80004d8 <__aeabi_dmul>
 8015d8c:	460f      	mov	r7, r1
 8015d8e:	4606      	mov	r6, r0
 8015d90:	f7ea fe52 	bl	8000a38 <__aeabi_d2iz>
 8015d94:	f7ea fb36 	bl	8000404 <__aeabi_i2d>
 8015d98:	4602      	mov	r2, r0
 8015d9a:	460b      	mov	r3, r1
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	4639      	mov	r1, r7
 8015da0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015da4:	f7ea f9e0 	bl	8000168 <__aeabi_dsub>
 8015da8:	2200      	movs	r2, #0
 8015daa:	4b17      	ldr	r3, [pc, #92]	; (8015e08 <__ieee754_rem_pio2+0x3d8>)
 8015dac:	f7ea fb94 	bl	80004d8 <__aeabi_dmul>
 8015db0:	f04f 0803 	mov.w	r8, #3
 8015db4:	2600      	movs	r6, #0
 8015db6:	2700      	movs	r7, #0
 8015db8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015dbc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8015dc0:	4632      	mov	r2, r6
 8015dc2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8015dc6:	463b      	mov	r3, r7
 8015dc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8015dcc:	f7ea fdec 	bl	80009a8 <__aeabi_dcmpeq>
 8015dd0:	b9b8      	cbnz	r0, 8015e02 <__ieee754_rem_pio2+0x3d2>
 8015dd2:	4b0e      	ldr	r3, [pc, #56]	; (8015e0c <__ieee754_rem_pio2+0x3dc>)
 8015dd4:	462a      	mov	r2, r5
 8015dd6:	9301      	str	r3, [sp, #4]
 8015dd8:	2302      	movs	r3, #2
 8015dda:	4621      	mov	r1, r4
 8015ddc:	9300      	str	r3, [sp, #0]
 8015dde:	a806      	add	r0, sp, #24
 8015de0:	4643      	mov	r3, r8
 8015de2:	f000 fa6d 	bl	80162c0 <__kernel_rem_pio2>
 8015de6:	f1bb 0f00 	cmp.w	fp, #0
 8015dea:	4605      	mov	r5, r0
 8015dec:	f6bf ae56 	bge.w	8015a9c <__ieee754_rem_pio2+0x6c>
 8015df0:	6863      	ldr	r3, [r4, #4]
 8015df2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015df6:	6063      	str	r3, [r4, #4]
 8015df8:	68e3      	ldr	r3, [r4, #12]
 8015dfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015dfe:	60e3      	str	r3, [r4, #12]
 8015e00:	e708      	b.n	8015c14 <__ieee754_rem_pio2+0x1e4>
 8015e02:	46d0      	mov	r8, sl
 8015e04:	e7dc      	b.n	8015dc0 <__ieee754_rem_pio2+0x390>
 8015e06:	bf00      	nop
 8015e08:	41700000 	.word	0x41700000
 8015e0c:	080194b0 	.word	0x080194b0

08015e10 <__ieee754_sqrt>:
 8015e10:	4b54      	ldr	r3, [pc, #336]	; (8015f64 <__ieee754_sqrt+0x154>)
 8015e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e16:	438b      	bics	r3, r1
 8015e18:	4606      	mov	r6, r0
 8015e1a:	460d      	mov	r5, r1
 8015e1c:	460a      	mov	r2, r1
 8015e1e:	460c      	mov	r4, r1
 8015e20:	d10f      	bne.n	8015e42 <__ieee754_sqrt+0x32>
 8015e22:	4602      	mov	r2, r0
 8015e24:	460b      	mov	r3, r1
 8015e26:	f7ea fb57 	bl	80004d8 <__aeabi_dmul>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	4630      	mov	r0, r6
 8015e30:	4629      	mov	r1, r5
 8015e32:	f7ea f99b 	bl	800016c <__adddf3>
 8015e36:	4606      	mov	r6, r0
 8015e38:	460d      	mov	r5, r1
 8015e3a:	4630      	mov	r0, r6
 8015e3c:	4629      	mov	r1, r5
 8015e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e42:	2900      	cmp	r1, #0
 8015e44:	4607      	mov	r7, r0
 8015e46:	4603      	mov	r3, r0
 8015e48:	dc0e      	bgt.n	8015e68 <__ieee754_sqrt+0x58>
 8015e4a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8015e4e:	ea5c 0707 	orrs.w	r7, ip, r7
 8015e52:	d0f2      	beq.n	8015e3a <__ieee754_sqrt+0x2a>
 8015e54:	b141      	cbz	r1, 8015e68 <__ieee754_sqrt+0x58>
 8015e56:	4602      	mov	r2, r0
 8015e58:	460b      	mov	r3, r1
 8015e5a:	f7ea f985 	bl	8000168 <__aeabi_dsub>
 8015e5e:	4602      	mov	r2, r0
 8015e60:	460b      	mov	r3, r1
 8015e62:	f7ea fc63 	bl	800072c <__aeabi_ddiv>
 8015e66:	e7e6      	b.n	8015e36 <__ieee754_sqrt+0x26>
 8015e68:	1512      	asrs	r2, r2, #20
 8015e6a:	d074      	beq.n	8015f56 <__ieee754_sqrt+0x146>
 8015e6c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015e70:	07d5      	lsls	r5, r2, #31
 8015e72:	f04f 0500 	mov.w	r5, #0
 8015e76:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015e7a:	bf48      	it	mi
 8015e7c:	0fd9      	lsrmi	r1, r3, #31
 8015e7e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8015e82:	bf44      	itt	mi
 8015e84:	005b      	lslmi	r3, r3, #1
 8015e86:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8015e8a:	1051      	asrs	r1, r2, #1
 8015e8c:	0fda      	lsrs	r2, r3, #31
 8015e8e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015e92:	4628      	mov	r0, r5
 8015e94:	2216      	movs	r2, #22
 8015e96:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015e9a:	005b      	lsls	r3, r3, #1
 8015e9c:	1987      	adds	r7, r0, r6
 8015e9e:	42a7      	cmp	r7, r4
 8015ea0:	bfde      	ittt	le
 8015ea2:	19b8      	addle	r0, r7, r6
 8015ea4:	1be4      	suble	r4, r4, r7
 8015ea6:	19ad      	addle	r5, r5, r6
 8015ea8:	0fdf      	lsrs	r7, r3, #31
 8015eaa:	3a01      	subs	r2, #1
 8015eac:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8015eb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015eb4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015eb8:	d1f0      	bne.n	8015e9c <__ieee754_sqrt+0x8c>
 8015eba:	f04f 0c20 	mov.w	ip, #32
 8015ebe:	4696      	mov	lr, r2
 8015ec0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015ec4:	4284      	cmp	r4, r0
 8015ec6:	eb06 070e 	add.w	r7, r6, lr
 8015eca:	dc02      	bgt.n	8015ed2 <__ieee754_sqrt+0xc2>
 8015ecc:	d112      	bne.n	8015ef4 <__ieee754_sqrt+0xe4>
 8015ece:	429f      	cmp	r7, r3
 8015ed0:	d810      	bhi.n	8015ef4 <__ieee754_sqrt+0xe4>
 8015ed2:	2f00      	cmp	r7, #0
 8015ed4:	eb07 0e06 	add.w	lr, r7, r6
 8015ed8:	da42      	bge.n	8015f60 <__ieee754_sqrt+0x150>
 8015eda:	f1be 0f00 	cmp.w	lr, #0
 8015ede:	db3f      	blt.n	8015f60 <__ieee754_sqrt+0x150>
 8015ee0:	f100 0801 	add.w	r8, r0, #1
 8015ee4:	1a24      	subs	r4, r4, r0
 8015ee6:	4640      	mov	r0, r8
 8015ee8:	429f      	cmp	r7, r3
 8015eea:	bf88      	it	hi
 8015eec:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8015ef0:	1bdb      	subs	r3, r3, r7
 8015ef2:	4432      	add	r2, r6
 8015ef4:	0064      	lsls	r4, r4, #1
 8015ef6:	f1bc 0c01 	subs.w	ip, ip, #1
 8015efa:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8015efe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015f02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015f06:	d1dd      	bne.n	8015ec4 <__ieee754_sqrt+0xb4>
 8015f08:	4323      	orrs	r3, r4
 8015f0a:	d006      	beq.n	8015f1a <__ieee754_sqrt+0x10a>
 8015f0c:	1c54      	adds	r4, r2, #1
 8015f0e:	bf0b      	itete	eq
 8015f10:	4662      	moveq	r2, ip
 8015f12:	3201      	addne	r2, #1
 8015f14:	3501      	addeq	r5, #1
 8015f16:	f022 0201 	bicne.w	r2, r2, #1
 8015f1a:	106b      	asrs	r3, r5, #1
 8015f1c:	0852      	lsrs	r2, r2, #1
 8015f1e:	07e8      	lsls	r0, r5, #31
 8015f20:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015f24:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015f28:	bf48      	it	mi
 8015f2a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8015f2e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8015f32:	4616      	mov	r6, r2
 8015f34:	e781      	b.n	8015e3a <__ieee754_sqrt+0x2a>
 8015f36:	0adc      	lsrs	r4, r3, #11
 8015f38:	3915      	subs	r1, #21
 8015f3a:	055b      	lsls	r3, r3, #21
 8015f3c:	2c00      	cmp	r4, #0
 8015f3e:	d0fa      	beq.n	8015f36 <__ieee754_sqrt+0x126>
 8015f40:	02e6      	lsls	r6, r4, #11
 8015f42:	d50a      	bpl.n	8015f5a <__ieee754_sqrt+0x14a>
 8015f44:	f1c2 0020 	rsb	r0, r2, #32
 8015f48:	fa23 f000 	lsr.w	r0, r3, r0
 8015f4c:	1e55      	subs	r5, r2, #1
 8015f4e:	4093      	lsls	r3, r2
 8015f50:	4304      	orrs	r4, r0
 8015f52:	1b4a      	subs	r2, r1, r5
 8015f54:	e78a      	b.n	8015e6c <__ieee754_sqrt+0x5c>
 8015f56:	4611      	mov	r1, r2
 8015f58:	e7f0      	b.n	8015f3c <__ieee754_sqrt+0x12c>
 8015f5a:	0064      	lsls	r4, r4, #1
 8015f5c:	3201      	adds	r2, #1
 8015f5e:	e7ef      	b.n	8015f40 <__ieee754_sqrt+0x130>
 8015f60:	4680      	mov	r8, r0
 8015f62:	e7bf      	b.n	8015ee4 <__ieee754_sqrt+0xd4>
 8015f64:	7ff00000 	.word	0x7ff00000

08015f68 <__ieee754_rem_pio2f>:
 8015f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f6c:	4a9d      	ldr	r2, [pc, #628]	; (80161e4 <__ieee754_rem_pio2f+0x27c>)
 8015f6e:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8015f72:	4295      	cmp	r5, r2
 8015f74:	b087      	sub	sp, #28
 8015f76:	460c      	mov	r4, r1
 8015f78:	4607      	mov	r7, r0
 8015f7a:	dc04      	bgt.n	8015f86 <__ieee754_rem_pio2f+0x1e>
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	6020      	str	r0, [r4, #0]
 8015f80:	604b      	str	r3, [r1, #4]
 8015f82:	2600      	movs	r6, #0
 8015f84:	e01a      	b.n	8015fbc <__ieee754_rem_pio2f+0x54>
 8015f86:	4a98      	ldr	r2, [pc, #608]	; (80161e8 <__ieee754_rem_pio2f+0x280>)
 8015f88:	4295      	cmp	r5, r2
 8015f8a:	dc4b      	bgt.n	8016024 <__ieee754_rem_pio2f+0xbc>
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	f025 050f 	bic.w	r5, r5, #15
 8015f92:	4996      	ldr	r1, [pc, #600]	; (80161ec <__ieee754_rem_pio2f+0x284>)
 8015f94:	4e96      	ldr	r6, [pc, #600]	; (80161f0 <__ieee754_rem_pio2f+0x288>)
 8015f96:	dd23      	ble.n	8015fe0 <__ieee754_rem_pio2f+0x78>
 8015f98:	f7ea fdca 	bl	8000b30 <__aeabi_fsub>
 8015f9c:	42b5      	cmp	r5, r6
 8015f9e:	4607      	mov	r7, r0
 8015fa0:	d010      	beq.n	8015fc4 <__ieee754_rem_pio2f+0x5c>
 8015fa2:	4994      	ldr	r1, [pc, #592]	; (80161f4 <__ieee754_rem_pio2f+0x28c>)
 8015fa4:	f7ea fdc4 	bl	8000b30 <__aeabi_fsub>
 8015fa8:	4601      	mov	r1, r0
 8015faa:	6020      	str	r0, [r4, #0]
 8015fac:	4638      	mov	r0, r7
 8015fae:	f7ea fdbf 	bl	8000b30 <__aeabi_fsub>
 8015fb2:	4990      	ldr	r1, [pc, #576]	; (80161f4 <__ieee754_rem_pio2f+0x28c>)
 8015fb4:	f7ea fdbc 	bl	8000b30 <__aeabi_fsub>
 8015fb8:	2601      	movs	r6, #1
 8015fba:	6060      	str	r0, [r4, #4]
 8015fbc:	4630      	mov	r0, r6
 8015fbe:	b007      	add	sp, #28
 8015fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fc4:	498c      	ldr	r1, [pc, #560]	; (80161f8 <__ieee754_rem_pio2f+0x290>)
 8015fc6:	f7ea fdb3 	bl	8000b30 <__aeabi_fsub>
 8015fca:	498c      	ldr	r1, [pc, #560]	; (80161fc <__ieee754_rem_pio2f+0x294>)
 8015fcc:	4605      	mov	r5, r0
 8015fce:	f7ea fdaf 	bl	8000b30 <__aeabi_fsub>
 8015fd2:	4601      	mov	r1, r0
 8015fd4:	6020      	str	r0, [r4, #0]
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	f7ea fdaa 	bl	8000b30 <__aeabi_fsub>
 8015fdc:	4987      	ldr	r1, [pc, #540]	; (80161fc <__ieee754_rem_pio2f+0x294>)
 8015fde:	e7e9      	b.n	8015fb4 <__ieee754_rem_pio2f+0x4c>
 8015fe0:	f7ea fda8 	bl	8000b34 <__addsf3>
 8015fe4:	42b5      	cmp	r5, r6
 8015fe6:	4607      	mov	r7, r0
 8015fe8:	d00e      	beq.n	8016008 <__ieee754_rem_pio2f+0xa0>
 8015fea:	4982      	ldr	r1, [pc, #520]	; (80161f4 <__ieee754_rem_pio2f+0x28c>)
 8015fec:	f7ea fda2 	bl	8000b34 <__addsf3>
 8015ff0:	4601      	mov	r1, r0
 8015ff2:	6020      	str	r0, [r4, #0]
 8015ff4:	4638      	mov	r0, r7
 8015ff6:	f7ea fd9b 	bl	8000b30 <__aeabi_fsub>
 8015ffa:	497e      	ldr	r1, [pc, #504]	; (80161f4 <__ieee754_rem_pio2f+0x28c>)
 8015ffc:	f7ea fd9a 	bl	8000b34 <__addsf3>
 8016000:	f04f 36ff 	mov.w	r6, #4294967295
 8016004:	6060      	str	r0, [r4, #4]
 8016006:	e7d9      	b.n	8015fbc <__ieee754_rem_pio2f+0x54>
 8016008:	497b      	ldr	r1, [pc, #492]	; (80161f8 <__ieee754_rem_pio2f+0x290>)
 801600a:	f7ea fd93 	bl	8000b34 <__addsf3>
 801600e:	497b      	ldr	r1, [pc, #492]	; (80161fc <__ieee754_rem_pio2f+0x294>)
 8016010:	4605      	mov	r5, r0
 8016012:	f7ea fd8f 	bl	8000b34 <__addsf3>
 8016016:	4601      	mov	r1, r0
 8016018:	6020      	str	r0, [r4, #0]
 801601a:	4628      	mov	r0, r5
 801601c:	f7ea fd88 	bl	8000b30 <__aeabi_fsub>
 8016020:	4976      	ldr	r1, [pc, #472]	; (80161fc <__ieee754_rem_pio2f+0x294>)
 8016022:	e7eb      	b.n	8015ffc <__ieee754_rem_pio2f+0x94>
 8016024:	4a76      	ldr	r2, [pc, #472]	; (8016200 <__ieee754_rem_pio2f+0x298>)
 8016026:	4295      	cmp	r5, r2
 8016028:	f300 808c 	bgt.w	8016144 <__ieee754_rem_pio2f+0x1dc>
 801602c:	f001 fb7a 	bl	8017724 <fabsf>
 8016030:	4974      	ldr	r1, [pc, #464]	; (8016204 <__ieee754_rem_pio2f+0x29c>)
 8016032:	4680      	mov	r8, r0
 8016034:	f7ea fe86 	bl	8000d44 <__aeabi_fmul>
 8016038:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801603c:	f7ea fd7a 	bl	8000b34 <__addsf3>
 8016040:	f7eb f85c 	bl	80010fc <__aeabi_f2iz>
 8016044:	4606      	mov	r6, r0
 8016046:	f7ea fe29 	bl	8000c9c <__aeabi_i2f>
 801604a:	4968      	ldr	r1, [pc, #416]	; (80161ec <__ieee754_rem_pio2f+0x284>)
 801604c:	4682      	mov	sl, r0
 801604e:	f7ea fe79 	bl	8000d44 <__aeabi_fmul>
 8016052:	4601      	mov	r1, r0
 8016054:	4640      	mov	r0, r8
 8016056:	f7ea fd6b 	bl	8000b30 <__aeabi_fsub>
 801605a:	4966      	ldr	r1, [pc, #408]	; (80161f4 <__ieee754_rem_pio2f+0x28c>)
 801605c:	4680      	mov	r8, r0
 801605e:	4650      	mov	r0, sl
 8016060:	f7ea fe70 	bl	8000d44 <__aeabi_fmul>
 8016064:	2e1f      	cmp	r6, #31
 8016066:	4681      	mov	r9, r0
 8016068:	dc0c      	bgt.n	8016084 <__ieee754_rem_pio2f+0x11c>
 801606a:	4a67      	ldr	r2, [pc, #412]	; (8016208 <__ieee754_rem_pio2f+0x2a0>)
 801606c:	1e71      	subs	r1, r6, #1
 801606e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016072:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8016076:	4293      	cmp	r3, r2
 8016078:	d004      	beq.n	8016084 <__ieee754_rem_pio2f+0x11c>
 801607a:	4649      	mov	r1, r9
 801607c:	4640      	mov	r0, r8
 801607e:	f7ea fd57 	bl	8000b30 <__aeabi_fsub>
 8016082:	e009      	b.n	8016098 <__ieee754_rem_pio2f+0x130>
 8016084:	4649      	mov	r1, r9
 8016086:	4640      	mov	r0, r8
 8016088:	f7ea fd52 	bl	8000b30 <__aeabi_fsub>
 801608c:	15ed      	asrs	r5, r5, #23
 801608e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016092:	1aeb      	subs	r3, r5, r3
 8016094:	2b08      	cmp	r3, #8
 8016096:	dc01      	bgt.n	801609c <__ieee754_rem_pio2f+0x134>
 8016098:	6020      	str	r0, [r4, #0]
 801609a:	e024      	b.n	80160e6 <__ieee754_rem_pio2f+0x17e>
 801609c:	4956      	ldr	r1, [pc, #344]	; (80161f8 <__ieee754_rem_pio2f+0x290>)
 801609e:	4650      	mov	r0, sl
 80160a0:	f7ea fe50 	bl	8000d44 <__aeabi_fmul>
 80160a4:	4681      	mov	r9, r0
 80160a6:	4601      	mov	r1, r0
 80160a8:	4640      	mov	r0, r8
 80160aa:	f7ea fd41 	bl	8000b30 <__aeabi_fsub>
 80160ae:	4601      	mov	r1, r0
 80160b0:	4683      	mov	fp, r0
 80160b2:	4640      	mov	r0, r8
 80160b4:	f7ea fd3c 	bl	8000b30 <__aeabi_fsub>
 80160b8:	4649      	mov	r1, r9
 80160ba:	f7ea fd39 	bl	8000b30 <__aeabi_fsub>
 80160be:	4680      	mov	r8, r0
 80160c0:	494e      	ldr	r1, [pc, #312]	; (80161fc <__ieee754_rem_pio2f+0x294>)
 80160c2:	4650      	mov	r0, sl
 80160c4:	f7ea fe3e 	bl	8000d44 <__aeabi_fmul>
 80160c8:	4641      	mov	r1, r8
 80160ca:	f7ea fd31 	bl	8000b30 <__aeabi_fsub>
 80160ce:	4601      	mov	r1, r0
 80160d0:	4681      	mov	r9, r0
 80160d2:	4658      	mov	r0, fp
 80160d4:	f7ea fd2c 	bl	8000b30 <__aeabi_fsub>
 80160d8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80160dc:	1aed      	subs	r5, r5, r3
 80160de:	2d19      	cmp	r5, #25
 80160e0:	dc15      	bgt.n	801610e <__ieee754_rem_pio2f+0x1a6>
 80160e2:	46d8      	mov	r8, fp
 80160e4:	6020      	str	r0, [r4, #0]
 80160e6:	6825      	ldr	r5, [r4, #0]
 80160e8:	4640      	mov	r0, r8
 80160ea:	4629      	mov	r1, r5
 80160ec:	f7ea fd20 	bl	8000b30 <__aeabi_fsub>
 80160f0:	4649      	mov	r1, r9
 80160f2:	f7ea fd1d 	bl	8000b30 <__aeabi_fsub>
 80160f6:	2f00      	cmp	r7, #0
 80160f8:	6060      	str	r0, [r4, #4]
 80160fa:	f6bf af5f 	bge.w	8015fbc <__ieee754_rem_pio2f+0x54>
 80160fe:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8016102:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8016106:	6025      	str	r5, [r4, #0]
 8016108:	6060      	str	r0, [r4, #4]
 801610a:	4276      	negs	r6, r6
 801610c:	e756      	b.n	8015fbc <__ieee754_rem_pio2f+0x54>
 801610e:	493f      	ldr	r1, [pc, #252]	; (801620c <__ieee754_rem_pio2f+0x2a4>)
 8016110:	4650      	mov	r0, sl
 8016112:	f7ea fe17 	bl	8000d44 <__aeabi_fmul>
 8016116:	4605      	mov	r5, r0
 8016118:	4601      	mov	r1, r0
 801611a:	4658      	mov	r0, fp
 801611c:	f7ea fd08 	bl	8000b30 <__aeabi_fsub>
 8016120:	4601      	mov	r1, r0
 8016122:	4680      	mov	r8, r0
 8016124:	4658      	mov	r0, fp
 8016126:	f7ea fd03 	bl	8000b30 <__aeabi_fsub>
 801612a:	4629      	mov	r1, r5
 801612c:	f7ea fd00 	bl	8000b30 <__aeabi_fsub>
 8016130:	4605      	mov	r5, r0
 8016132:	4937      	ldr	r1, [pc, #220]	; (8016210 <__ieee754_rem_pio2f+0x2a8>)
 8016134:	4650      	mov	r0, sl
 8016136:	f7ea fe05 	bl	8000d44 <__aeabi_fmul>
 801613a:	4629      	mov	r1, r5
 801613c:	f7ea fcf8 	bl	8000b30 <__aeabi_fsub>
 8016140:	4681      	mov	r9, r0
 8016142:	e79a      	b.n	801607a <__ieee754_rem_pio2f+0x112>
 8016144:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016148:	db05      	blt.n	8016156 <__ieee754_rem_pio2f+0x1ee>
 801614a:	4601      	mov	r1, r0
 801614c:	f7ea fcf0 	bl	8000b30 <__aeabi_fsub>
 8016150:	6060      	str	r0, [r4, #4]
 8016152:	6020      	str	r0, [r4, #0]
 8016154:	e715      	b.n	8015f82 <__ieee754_rem_pio2f+0x1a>
 8016156:	15ee      	asrs	r6, r5, #23
 8016158:	3e86      	subs	r6, #134	; 0x86
 801615a:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 801615e:	4628      	mov	r0, r5
 8016160:	f7ea ffcc 	bl	80010fc <__aeabi_f2iz>
 8016164:	f7ea fd9a 	bl	8000c9c <__aeabi_i2f>
 8016168:	4601      	mov	r1, r0
 801616a:	9003      	str	r0, [sp, #12]
 801616c:	4628      	mov	r0, r5
 801616e:	f7ea fcdf 	bl	8000b30 <__aeabi_fsub>
 8016172:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8016176:	f7ea fde5 	bl	8000d44 <__aeabi_fmul>
 801617a:	4680      	mov	r8, r0
 801617c:	f7ea ffbe 	bl	80010fc <__aeabi_f2iz>
 8016180:	f7ea fd8c 	bl	8000c9c <__aeabi_i2f>
 8016184:	4601      	mov	r1, r0
 8016186:	9004      	str	r0, [sp, #16]
 8016188:	4605      	mov	r5, r0
 801618a:	4640      	mov	r0, r8
 801618c:	f7ea fcd0 	bl	8000b30 <__aeabi_fsub>
 8016190:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8016194:	f7ea fdd6 	bl	8000d44 <__aeabi_fmul>
 8016198:	2100      	movs	r1, #0
 801619a:	9005      	str	r0, [sp, #20]
 801619c:	f7ea ff66 	bl	800106c <__aeabi_fcmpeq>
 80161a0:	b1e8      	cbz	r0, 80161de <__ieee754_rem_pio2f+0x276>
 80161a2:	2100      	movs	r1, #0
 80161a4:	4628      	mov	r0, r5
 80161a6:	f7ea ff61 	bl	800106c <__aeabi_fcmpeq>
 80161aa:	2800      	cmp	r0, #0
 80161ac:	bf14      	ite	ne
 80161ae:	2301      	movne	r3, #1
 80161b0:	2302      	moveq	r3, #2
 80161b2:	4a18      	ldr	r2, [pc, #96]	; (8016214 <__ieee754_rem_pio2f+0x2ac>)
 80161b4:	4621      	mov	r1, r4
 80161b6:	9201      	str	r2, [sp, #4]
 80161b8:	2202      	movs	r2, #2
 80161ba:	a803      	add	r0, sp, #12
 80161bc:	9200      	str	r2, [sp, #0]
 80161be:	4632      	mov	r2, r6
 80161c0:	f000 fe0a 	bl	8016dd8 <__kernel_rem_pio2f>
 80161c4:	2f00      	cmp	r7, #0
 80161c6:	4606      	mov	r6, r0
 80161c8:	f6bf aef8 	bge.w	8015fbc <__ieee754_rem_pio2f+0x54>
 80161cc:	6823      	ldr	r3, [r4, #0]
 80161ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80161d2:	6023      	str	r3, [r4, #0]
 80161d4:	6863      	ldr	r3, [r4, #4]
 80161d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80161da:	6063      	str	r3, [r4, #4]
 80161dc:	e795      	b.n	801610a <__ieee754_rem_pio2f+0x1a2>
 80161de:	2303      	movs	r3, #3
 80161e0:	e7e7      	b.n	80161b2 <__ieee754_rem_pio2f+0x24a>
 80161e2:	bf00      	nop
 80161e4:	3f490fd8 	.word	0x3f490fd8
 80161e8:	4016cbe3 	.word	0x4016cbe3
 80161ec:	3fc90f80 	.word	0x3fc90f80
 80161f0:	3fc90fd0 	.word	0x3fc90fd0
 80161f4:	37354443 	.word	0x37354443
 80161f8:	37354400 	.word	0x37354400
 80161fc:	2e85a308 	.word	0x2e85a308
 8016200:	43490f80 	.word	0x43490f80
 8016204:	3f22f984 	.word	0x3f22f984
 8016208:	080195b8 	.word	0x080195b8
 801620c:	2e85a300 	.word	0x2e85a300
 8016210:	248d3132 	.word	0x248d3132
 8016214:	08019638 	.word	0x08019638

08016218 <__ieee754_sqrtf>:
 8016218:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801621c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016220:	b570      	push	{r4, r5, r6, lr}
 8016222:	4603      	mov	r3, r0
 8016224:	4604      	mov	r4, r0
 8016226:	d309      	bcc.n	801623c <__ieee754_sqrtf+0x24>
 8016228:	4601      	mov	r1, r0
 801622a:	f7ea fd8b 	bl	8000d44 <__aeabi_fmul>
 801622e:	4601      	mov	r1, r0
 8016230:	4620      	mov	r0, r4
 8016232:	f7ea fc7f 	bl	8000b34 <__addsf3>
 8016236:	4604      	mov	r4, r0
 8016238:	4620      	mov	r0, r4
 801623a:	bd70      	pop	{r4, r5, r6, pc}
 801623c:	2a00      	cmp	r2, #0
 801623e:	d0fb      	beq.n	8016238 <__ieee754_sqrtf+0x20>
 8016240:	2800      	cmp	r0, #0
 8016242:	da06      	bge.n	8016252 <__ieee754_sqrtf+0x3a>
 8016244:	4601      	mov	r1, r0
 8016246:	f7ea fc73 	bl	8000b30 <__aeabi_fsub>
 801624a:	4601      	mov	r1, r0
 801624c:	f7ea fe2e 	bl	8000eac <__aeabi_fdiv>
 8016250:	e7f1      	b.n	8016236 <__ieee754_sqrtf+0x1e>
 8016252:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8016256:	ea4f 54e0 	mov.w	r4, r0, asr #23
 801625a:	d32e      	bcc.n	80162ba <__ieee754_sqrtf+0xa2>
 801625c:	3c7f      	subs	r4, #127	; 0x7f
 801625e:	07e2      	lsls	r2, r4, #31
 8016260:	f04f 0200 	mov.w	r2, #0
 8016264:	ea4f 0164 	mov.w	r1, r4, asr #1
 8016268:	4616      	mov	r6, r2
 801626a:	f04f 0419 	mov.w	r4, #25
 801626e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8016272:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016276:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801627a:	bf48      	it	mi
 801627c:	005b      	lslmi	r3, r3, #1
 801627e:	005b      	lsls	r3, r3, #1
 8016280:	1835      	adds	r5, r6, r0
 8016282:	429d      	cmp	r5, r3
 8016284:	bfde      	ittt	le
 8016286:	182e      	addle	r6, r5, r0
 8016288:	1b5b      	suble	r3, r3, r5
 801628a:	1812      	addle	r2, r2, r0
 801628c:	3c01      	subs	r4, #1
 801628e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016292:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8016296:	d1f3      	bne.n	8016280 <__ieee754_sqrtf+0x68>
 8016298:	b113      	cbz	r3, 80162a0 <__ieee754_sqrtf+0x88>
 801629a:	3201      	adds	r2, #1
 801629c:	f022 0201 	bic.w	r2, r2, #1
 80162a0:	1054      	asrs	r4, r2, #1
 80162a2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80162a6:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 80162aa:	e7c5      	b.n	8016238 <__ieee754_sqrtf+0x20>
 80162ac:	005b      	lsls	r3, r3, #1
 80162ae:	3201      	adds	r2, #1
 80162b0:	0219      	lsls	r1, r3, #8
 80162b2:	d5fb      	bpl.n	80162ac <__ieee754_sqrtf+0x94>
 80162b4:	3a01      	subs	r2, #1
 80162b6:	1aa4      	subs	r4, r4, r2
 80162b8:	e7d0      	b.n	801625c <__ieee754_sqrtf+0x44>
 80162ba:	2200      	movs	r2, #0
 80162bc:	e7f8      	b.n	80162b0 <__ieee754_sqrtf+0x98>
	...

080162c0 <__kernel_rem_pio2>:
 80162c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162c4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80162c8:	9307      	str	r3, [sp, #28]
 80162ca:	9104      	str	r1, [sp, #16]
 80162cc:	4bbf      	ldr	r3, [pc, #764]	; (80165cc <__kernel_rem_pio2+0x30c>)
 80162ce:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80162d0:	1ed4      	subs	r4, r2, #3
 80162d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80162d6:	2500      	movs	r5, #0
 80162d8:	9302      	str	r3, [sp, #8]
 80162da:	9b07      	ldr	r3, [sp, #28]
 80162dc:	9008      	str	r0, [sp, #32]
 80162de:	3b01      	subs	r3, #1
 80162e0:	9306      	str	r3, [sp, #24]
 80162e2:	2318      	movs	r3, #24
 80162e4:	fb94 f4f3 	sdiv	r4, r4, r3
 80162e8:	f06f 0317 	mvn.w	r3, #23
 80162ec:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80162f0:	fb04 3303 	mla	r3, r4, r3, r3
 80162f4:	eb03 0a02 	add.w	sl, r3, r2
 80162f8:	9a06      	ldr	r2, [sp, #24]
 80162fa:	9b02      	ldr	r3, [sp, #8]
 80162fc:	1aa7      	subs	r7, r4, r2
 80162fe:	eb03 0802 	add.w	r8, r3, r2
 8016302:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8016304:	2200      	movs	r2, #0
 8016306:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801630a:	2300      	movs	r3, #0
 801630c:	ae1e      	add	r6, sp, #120	; 0x78
 801630e:	4545      	cmp	r5, r8
 8016310:	dd14      	ble.n	801633c <__kernel_rem_pio2+0x7c>
 8016312:	2600      	movs	r6, #0
 8016314:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8016318:	9b02      	ldr	r3, [sp, #8]
 801631a:	429e      	cmp	r6, r3
 801631c:	dc39      	bgt.n	8016392 <__kernel_rem_pio2+0xd2>
 801631e:	9b08      	ldr	r3, [sp, #32]
 8016320:	f04f 0800 	mov.w	r8, #0
 8016324:	3b08      	subs	r3, #8
 8016326:	9300      	str	r3, [sp, #0]
 8016328:	9b07      	ldr	r3, [sp, #28]
 801632a:	f04f 0900 	mov.w	r9, #0
 801632e:	199d      	adds	r5, r3, r6
 8016330:	ab20      	add	r3, sp, #128	; 0x80
 8016332:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016336:	9305      	str	r3, [sp, #20]
 8016338:	2700      	movs	r7, #0
 801633a:	e023      	b.n	8016384 <__kernel_rem_pio2+0xc4>
 801633c:	42ef      	cmn	r7, r5
 801633e:	d40b      	bmi.n	8016358 <__kernel_rem_pio2+0x98>
 8016340:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016344:	e9cd 2300 	strd	r2, r3, [sp]
 8016348:	f7ea f85c 	bl	8000404 <__aeabi_i2d>
 801634c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016350:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8016354:	3501      	adds	r5, #1
 8016356:	e7da      	b.n	801630e <__kernel_rem_pio2+0x4e>
 8016358:	4610      	mov	r0, r2
 801635a:	4619      	mov	r1, r3
 801635c:	e7f8      	b.n	8016350 <__kernel_rem_pio2+0x90>
 801635e:	9905      	ldr	r1, [sp, #20]
 8016360:	9d00      	ldr	r5, [sp, #0]
 8016362:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8016366:	9105      	str	r1, [sp, #20]
 8016368:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 801636c:	9500      	str	r5, [sp, #0]
 801636e:	f7ea f8b3 	bl	80004d8 <__aeabi_dmul>
 8016372:	4602      	mov	r2, r0
 8016374:	460b      	mov	r3, r1
 8016376:	4640      	mov	r0, r8
 8016378:	4649      	mov	r1, r9
 801637a:	f7e9 fef7 	bl	800016c <__adddf3>
 801637e:	4680      	mov	r8, r0
 8016380:	4689      	mov	r9, r1
 8016382:	3701      	adds	r7, #1
 8016384:	9b06      	ldr	r3, [sp, #24]
 8016386:	429f      	cmp	r7, r3
 8016388:	dde9      	ble.n	801635e <__kernel_rem_pio2+0x9e>
 801638a:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 801638e:	3601      	adds	r6, #1
 8016390:	e7c2      	b.n	8016318 <__kernel_rem_pio2+0x58>
 8016392:	9b02      	ldr	r3, [sp, #8]
 8016394:	aa0c      	add	r2, sp, #48	; 0x30
 8016396:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801639a:	930b      	str	r3, [sp, #44]	; 0x2c
 801639c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801639e:	9f02      	ldr	r7, [sp, #8]
 80163a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80163a4:	930a      	str	r3, [sp, #40]	; 0x28
 80163a6:	2600      	movs	r6, #0
 80163a8:	ab98      	add	r3, sp, #608	; 0x260
 80163aa:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80163ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80163b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80163b6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80163ba:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80163be:	ab98      	add	r3, sp, #608	; 0x260
 80163c0:	445b      	add	r3, fp
 80163c2:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 80163c6:	1bbb      	subs	r3, r7, r6
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	dc71      	bgt.n	80164b0 <__kernel_rem_pio2+0x1f0>
 80163cc:	4652      	mov	r2, sl
 80163ce:	4640      	mov	r0, r8
 80163d0:	4649      	mov	r1, r9
 80163d2:	f001 f939 	bl	8017648 <scalbn>
 80163d6:	2200      	movs	r2, #0
 80163d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80163dc:	4604      	mov	r4, r0
 80163de:	460d      	mov	r5, r1
 80163e0:	f7ea f87a 	bl	80004d8 <__aeabi_dmul>
 80163e4:	f001 f818 	bl	8017418 <floor>
 80163e8:	2200      	movs	r2, #0
 80163ea:	4b79      	ldr	r3, [pc, #484]	; (80165d0 <__kernel_rem_pio2+0x310>)
 80163ec:	f7ea f874 	bl	80004d8 <__aeabi_dmul>
 80163f0:	4602      	mov	r2, r0
 80163f2:	460b      	mov	r3, r1
 80163f4:	4620      	mov	r0, r4
 80163f6:	4629      	mov	r1, r5
 80163f8:	f7e9 feb6 	bl	8000168 <__aeabi_dsub>
 80163fc:	460d      	mov	r5, r1
 80163fe:	4604      	mov	r4, r0
 8016400:	f7ea fb1a 	bl	8000a38 <__aeabi_d2iz>
 8016404:	9005      	str	r0, [sp, #20]
 8016406:	f7e9 fffd 	bl	8000404 <__aeabi_i2d>
 801640a:	4602      	mov	r2, r0
 801640c:	460b      	mov	r3, r1
 801640e:	4620      	mov	r0, r4
 8016410:	4629      	mov	r1, r5
 8016412:	f7e9 fea9 	bl	8000168 <__aeabi_dsub>
 8016416:	f1ba 0f00 	cmp.w	sl, #0
 801641a:	4680      	mov	r8, r0
 801641c:	4689      	mov	r9, r1
 801641e:	dd6c      	ble.n	80164fa <__kernel_rem_pio2+0x23a>
 8016420:	1e7a      	subs	r2, r7, #1
 8016422:	ab0c      	add	r3, sp, #48	; 0x30
 8016424:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016428:	f1ca 0118 	rsb	r1, sl, #24
 801642c:	9c05      	ldr	r4, [sp, #20]
 801642e:	fa40 f301 	asr.w	r3, r0, r1
 8016432:	441c      	add	r4, r3
 8016434:	408b      	lsls	r3, r1
 8016436:	1ac0      	subs	r0, r0, r3
 8016438:	ab0c      	add	r3, sp, #48	; 0x30
 801643a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801643e:	f1ca 0317 	rsb	r3, sl, #23
 8016442:	9405      	str	r4, [sp, #20]
 8016444:	fa40 f303 	asr.w	r3, r0, r3
 8016448:	9300      	str	r3, [sp, #0]
 801644a:	9b00      	ldr	r3, [sp, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	dd62      	ble.n	8016516 <__kernel_rem_pio2+0x256>
 8016450:	2200      	movs	r2, #0
 8016452:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016456:	4614      	mov	r4, r2
 8016458:	9b05      	ldr	r3, [sp, #20]
 801645a:	3301      	adds	r3, #1
 801645c:	9305      	str	r3, [sp, #20]
 801645e:	4297      	cmp	r7, r2
 8016460:	f300 809f 	bgt.w	80165a2 <__kernel_rem_pio2+0x2e2>
 8016464:	f1ba 0f00 	cmp.w	sl, #0
 8016468:	dd07      	ble.n	801647a <__kernel_rem_pio2+0x1ba>
 801646a:	f1ba 0f01 	cmp.w	sl, #1
 801646e:	f000 80bb 	beq.w	80165e8 <__kernel_rem_pio2+0x328>
 8016472:	f1ba 0f02 	cmp.w	sl, #2
 8016476:	f000 80c1 	beq.w	80165fc <__kernel_rem_pio2+0x33c>
 801647a:	9b00      	ldr	r3, [sp, #0]
 801647c:	2b02      	cmp	r3, #2
 801647e:	d14a      	bne.n	8016516 <__kernel_rem_pio2+0x256>
 8016480:	4642      	mov	r2, r8
 8016482:	464b      	mov	r3, r9
 8016484:	2000      	movs	r0, #0
 8016486:	4953      	ldr	r1, [pc, #332]	; (80165d4 <__kernel_rem_pio2+0x314>)
 8016488:	f7e9 fe6e 	bl	8000168 <__aeabi_dsub>
 801648c:	4680      	mov	r8, r0
 801648e:	4689      	mov	r9, r1
 8016490:	2c00      	cmp	r4, #0
 8016492:	d040      	beq.n	8016516 <__kernel_rem_pio2+0x256>
 8016494:	4652      	mov	r2, sl
 8016496:	2000      	movs	r0, #0
 8016498:	494e      	ldr	r1, [pc, #312]	; (80165d4 <__kernel_rem_pio2+0x314>)
 801649a:	f001 f8d5 	bl	8017648 <scalbn>
 801649e:	4602      	mov	r2, r0
 80164a0:	460b      	mov	r3, r1
 80164a2:	4640      	mov	r0, r8
 80164a4:	4649      	mov	r1, r9
 80164a6:	f7e9 fe5f 	bl	8000168 <__aeabi_dsub>
 80164aa:	4680      	mov	r8, r0
 80164ac:	4689      	mov	r9, r1
 80164ae:	e032      	b.n	8016516 <__kernel_rem_pio2+0x256>
 80164b0:	2200      	movs	r2, #0
 80164b2:	4b49      	ldr	r3, [pc, #292]	; (80165d8 <__kernel_rem_pio2+0x318>)
 80164b4:	4640      	mov	r0, r8
 80164b6:	4649      	mov	r1, r9
 80164b8:	f7ea f80e 	bl	80004d8 <__aeabi_dmul>
 80164bc:	f7ea fabc 	bl	8000a38 <__aeabi_d2iz>
 80164c0:	f7e9 ffa0 	bl	8000404 <__aeabi_i2d>
 80164c4:	2200      	movs	r2, #0
 80164c6:	4b45      	ldr	r3, [pc, #276]	; (80165dc <__kernel_rem_pio2+0x31c>)
 80164c8:	e9cd 0100 	strd	r0, r1, [sp]
 80164cc:	f7ea f804 	bl	80004d8 <__aeabi_dmul>
 80164d0:	4602      	mov	r2, r0
 80164d2:	460b      	mov	r3, r1
 80164d4:	4640      	mov	r0, r8
 80164d6:	4649      	mov	r1, r9
 80164d8:	f7e9 fe46 	bl	8000168 <__aeabi_dsub>
 80164dc:	f7ea faac 	bl	8000a38 <__aeabi_d2iz>
 80164e0:	ab0c      	add	r3, sp, #48	; 0x30
 80164e2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80164e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80164ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80164ee:	f7e9 fe3d 	bl	800016c <__adddf3>
 80164f2:	3601      	adds	r6, #1
 80164f4:	4680      	mov	r8, r0
 80164f6:	4689      	mov	r9, r1
 80164f8:	e765      	b.n	80163c6 <__kernel_rem_pio2+0x106>
 80164fa:	d105      	bne.n	8016508 <__kernel_rem_pio2+0x248>
 80164fc:	1e7b      	subs	r3, r7, #1
 80164fe:	aa0c      	add	r2, sp, #48	; 0x30
 8016500:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016504:	15c3      	asrs	r3, r0, #23
 8016506:	e79f      	b.n	8016448 <__kernel_rem_pio2+0x188>
 8016508:	2200      	movs	r2, #0
 801650a:	4b35      	ldr	r3, [pc, #212]	; (80165e0 <__kernel_rem_pio2+0x320>)
 801650c:	f7ea fa6a 	bl	80009e4 <__aeabi_dcmpge>
 8016510:	2800      	cmp	r0, #0
 8016512:	d143      	bne.n	801659c <__kernel_rem_pio2+0x2dc>
 8016514:	9000      	str	r0, [sp, #0]
 8016516:	2200      	movs	r2, #0
 8016518:	2300      	movs	r3, #0
 801651a:	4640      	mov	r0, r8
 801651c:	4649      	mov	r1, r9
 801651e:	f7ea fa43 	bl	80009a8 <__aeabi_dcmpeq>
 8016522:	2800      	cmp	r0, #0
 8016524:	f000 80c3 	beq.w	80166ae <__kernel_rem_pio2+0x3ee>
 8016528:	1e7c      	subs	r4, r7, #1
 801652a:	4623      	mov	r3, r4
 801652c:	2200      	movs	r2, #0
 801652e:	9902      	ldr	r1, [sp, #8]
 8016530:	428b      	cmp	r3, r1
 8016532:	da6a      	bge.n	801660a <__kernel_rem_pio2+0x34a>
 8016534:	2a00      	cmp	r2, #0
 8016536:	f000 8084 	beq.w	8016642 <__kernel_rem_pio2+0x382>
 801653a:	ab0c      	add	r3, sp, #48	; 0x30
 801653c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016540:	f1aa 0a18 	sub.w	sl, sl, #24
 8016544:	2b00      	cmp	r3, #0
 8016546:	f000 80b0 	beq.w	80166aa <__kernel_rem_pio2+0x3ea>
 801654a:	4652      	mov	r2, sl
 801654c:	2000      	movs	r0, #0
 801654e:	4921      	ldr	r1, [pc, #132]	; (80165d4 <__kernel_rem_pio2+0x314>)
 8016550:	f001 f87a 	bl	8017648 <scalbn>
 8016554:	4625      	mov	r5, r4
 8016556:	4606      	mov	r6, r0
 8016558:	460f      	mov	r7, r1
 801655a:	f04f 0a00 	mov.w	sl, #0
 801655e:	00e3      	lsls	r3, r4, #3
 8016560:	aa98      	add	r2, sp, #608	; 0x260
 8016562:	eb02 0803 	add.w	r8, r2, r3
 8016566:	f8df b070 	ldr.w	fp, [pc, #112]	; 80165d8 <__kernel_rem_pio2+0x318>
 801656a:	9306      	str	r3, [sp, #24]
 801656c:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8016570:	2d00      	cmp	r5, #0
 8016572:	f280 80d2 	bge.w	801671a <__kernel_rem_pio2+0x45a>
 8016576:	2500      	movs	r5, #0
 8016578:	9a06      	ldr	r2, [sp, #24]
 801657a:	ab98      	add	r3, sp, #608	; 0x260
 801657c:	189e      	adds	r6, r3, r2
 801657e:	3ea8      	subs	r6, #168	; 0xa8
 8016580:	1b63      	subs	r3, r4, r5
 8016582:	2b00      	cmp	r3, #0
 8016584:	f2c0 80f9 	blt.w	801677a <__kernel_rem_pio2+0x4ba>
 8016588:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80165e4 <__kernel_rem_pio2+0x324>
 801658c:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8016590:	f04f 0a00 	mov.w	sl, #0
 8016594:	f04f 0b00 	mov.w	fp, #0
 8016598:	2700      	movs	r7, #0
 801659a:	e0e2      	b.n	8016762 <__kernel_rem_pio2+0x4a2>
 801659c:	2302      	movs	r3, #2
 801659e:	9300      	str	r3, [sp, #0]
 80165a0:	e756      	b.n	8016450 <__kernel_rem_pio2+0x190>
 80165a2:	ab0c      	add	r3, sp, #48	; 0x30
 80165a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165a8:	b94c      	cbnz	r4, 80165be <__kernel_rem_pio2+0x2fe>
 80165aa:	b12b      	cbz	r3, 80165b8 <__kernel_rem_pio2+0x2f8>
 80165ac:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80165b0:	a80c      	add	r0, sp, #48	; 0x30
 80165b2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80165b6:	2301      	movs	r3, #1
 80165b8:	3201      	adds	r2, #1
 80165ba:	461c      	mov	r4, r3
 80165bc:	e74f      	b.n	801645e <__kernel_rem_pio2+0x19e>
 80165be:	1acb      	subs	r3, r1, r3
 80165c0:	a80c      	add	r0, sp, #48	; 0x30
 80165c2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80165c6:	4623      	mov	r3, r4
 80165c8:	e7f6      	b.n	80165b8 <__kernel_rem_pio2+0x2f8>
 80165ca:	bf00      	nop
 80165cc:	08019990 	.word	0x08019990
 80165d0:	40200000 	.word	0x40200000
 80165d4:	3ff00000 	.word	0x3ff00000
 80165d8:	3e700000 	.word	0x3e700000
 80165dc:	41700000 	.word	0x41700000
 80165e0:	3fe00000 	.word	0x3fe00000
 80165e4:	08019948 	.word	0x08019948
 80165e8:	1e7a      	subs	r2, r7, #1
 80165ea:	ab0c      	add	r3, sp, #48	; 0x30
 80165ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165f0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80165f4:	a90c      	add	r1, sp, #48	; 0x30
 80165f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80165fa:	e73e      	b.n	801647a <__kernel_rem_pio2+0x1ba>
 80165fc:	1e7a      	subs	r2, r7, #1
 80165fe:	ab0c      	add	r3, sp, #48	; 0x30
 8016600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016604:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016608:	e7f4      	b.n	80165f4 <__kernel_rem_pio2+0x334>
 801660a:	a90c      	add	r1, sp, #48	; 0x30
 801660c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016610:	3b01      	subs	r3, #1
 8016612:	430a      	orrs	r2, r1
 8016614:	e78b      	b.n	801652e <__kernel_rem_pio2+0x26e>
 8016616:	3401      	adds	r4, #1
 8016618:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801661c:	2a00      	cmp	r2, #0
 801661e:	d0fa      	beq.n	8016616 <__kernel_rem_pio2+0x356>
 8016620:	ab98      	add	r3, sp, #608	; 0x260
 8016622:	449b      	add	fp, r3
 8016624:	9b07      	ldr	r3, [sp, #28]
 8016626:	1c7e      	adds	r6, r7, #1
 8016628:	19dd      	adds	r5, r3, r7
 801662a:	ab98      	add	r3, sp, #608	; 0x260
 801662c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016630:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8016634:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8016638:	443c      	add	r4, r7
 801663a:	42b4      	cmp	r4, r6
 801663c:	da04      	bge.n	8016648 <__kernel_rem_pio2+0x388>
 801663e:	4627      	mov	r7, r4
 8016640:	e6b1      	b.n	80163a6 <__kernel_rem_pio2+0xe6>
 8016642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016644:	2401      	movs	r4, #1
 8016646:	e7e7      	b.n	8016618 <__kernel_rem_pio2+0x358>
 8016648:	f105 0308 	add.w	r3, r5, #8
 801664c:	9309      	str	r3, [sp, #36]	; 0x24
 801664e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016650:	2700      	movs	r7, #0
 8016652:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016656:	f7e9 fed5 	bl	8000404 <__aeabi_i2d>
 801665a:	f04f 0800 	mov.w	r8, #0
 801665e:	f04f 0900 	mov.w	r9, #0
 8016662:	9b08      	ldr	r3, [sp, #32]
 8016664:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8016668:	3b08      	subs	r3, #8
 801666a:	9300      	str	r3, [sp, #0]
 801666c:	f105 0310 	add.w	r3, r5, #16
 8016670:	9305      	str	r3, [sp, #20]
 8016672:	9b06      	ldr	r3, [sp, #24]
 8016674:	429f      	cmp	r7, r3
 8016676:	dd04      	ble.n	8016682 <__kernel_rem_pio2+0x3c2>
 8016678:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 801667c:	3601      	adds	r6, #1
 801667e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016680:	e7db      	b.n	801663a <__kernel_rem_pio2+0x37a>
 8016682:	9905      	ldr	r1, [sp, #20]
 8016684:	9d00      	ldr	r5, [sp, #0]
 8016686:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801668a:	9105      	str	r1, [sp, #20]
 801668c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8016690:	9500      	str	r5, [sp, #0]
 8016692:	f7e9 ff21 	bl	80004d8 <__aeabi_dmul>
 8016696:	4602      	mov	r2, r0
 8016698:	460b      	mov	r3, r1
 801669a:	4640      	mov	r0, r8
 801669c:	4649      	mov	r1, r9
 801669e:	f7e9 fd65 	bl	800016c <__adddf3>
 80166a2:	3701      	adds	r7, #1
 80166a4:	4680      	mov	r8, r0
 80166a6:	4689      	mov	r9, r1
 80166a8:	e7e3      	b.n	8016672 <__kernel_rem_pio2+0x3b2>
 80166aa:	3c01      	subs	r4, #1
 80166ac:	e745      	b.n	801653a <__kernel_rem_pio2+0x27a>
 80166ae:	f1ca 0200 	rsb	r2, sl, #0
 80166b2:	4640      	mov	r0, r8
 80166b4:	4649      	mov	r1, r9
 80166b6:	f000 ffc7 	bl	8017648 <scalbn>
 80166ba:	2200      	movs	r2, #0
 80166bc:	4ba3      	ldr	r3, [pc, #652]	; (801694c <__kernel_rem_pio2+0x68c>)
 80166be:	4604      	mov	r4, r0
 80166c0:	460d      	mov	r5, r1
 80166c2:	f7ea f98f 	bl	80009e4 <__aeabi_dcmpge>
 80166c6:	b1f8      	cbz	r0, 8016708 <__kernel_rem_pio2+0x448>
 80166c8:	2200      	movs	r2, #0
 80166ca:	4ba1      	ldr	r3, [pc, #644]	; (8016950 <__kernel_rem_pio2+0x690>)
 80166cc:	4620      	mov	r0, r4
 80166ce:	4629      	mov	r1, r5
 80166d0:	f7e9 ff02 	bl	80004d8 <__aeabi_dmul>
 80166d4:	f7ea f9b0 	bl	8000a38 <__aeabi_d2iz>
 80166d8:	4606      	mov	r6, r0
 80166da:	f7e9 fe93 	bl	8000404 <__aeabi_i2d>
 80166de:	2200      	movs	r2, #0
 80166e0:	4b9a      	ldr	r3, [pc, #616]	; (801694c <__kernel_rem_pio2+0x68c>)
 80166e2:	f7e9 fef9 	bl	80004d8 <__aeabi_dmul>
 80166e6:	460b      	mov	r3, r1
 80166e8:	4602      	mov	r2, r0
 80166ea:	4629      	mov	r1, r5
 80166ec:	4620      	mov	r0, r4
 80166ee:	f7e9 fd3b 	bl	8000168 <__aeabi_dsub>
 80166f2:	f7ea f9a1 	bl	8000a38 <__aeabi_d2iz>
 80166f6:	1c7c      	adds	r4, r7, #1
 80166f8:	ab0c      	add	r3, sp, #48	; 0x30
 80166fa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80166fe:	f10a 0a18 	add.w	sl, sl, #24
 8016702:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8016706:	e720      	b.n	801654a <__kernel_rem_pio2+0x28a>
 8016708:	4620      	mov	r0, r4
 801670a:	4629      	mov	r1, r5
 801670c:	f7ea f994 	bl	8000a38 <__aeabi_d2iz>
 8016710:	ab0c      	add	r3, sp, #48	; 0x30
 8016712:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8016716:	463c      	mov	r4, r7
 8016718:	e717      	b.n	801654a <__kernel_rem_pio2+0x28a>
 801671a:	ab0c      	add	r3, sp, #48	; 0x30
 801671c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016720:	f7e9 fe70 	bl	8000404 <__aeabi_i2d>
 8016724:	4632      	mov	r2, r6
 8016726:	463b      	mov	r3, r7
 8016728:	f7e9 fed6 	bl	80004d8 <__aeabi_dmul>
 801672c:	4652      	mov	r2, sl
 801672e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8016732:	465b      	mov	r3, fp
 8016734:	4630      	mov	r0, r6
 8016736:	4639      	mov	r1, r7
 8016738:	f7e9 fece 	bl	80004d8 <__aeabi_dmul>
 801673c:	3d01      	subs	r5, #1
 801673e:	4606      	mov	r6, r0
 8016740:	460f      	mov	r7, r1
 8016742:	e715      	b.n	8016570 <__kernel_rem_pio2+0x2b0>
 8016744:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8016748:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 801674c:	f7e9 fec4 	bl	80004d8 <__aeabi_dmul>
 8016750:	4602      	mov	r2, r0
 8016752:	460b      	mov	r3, r1
 8016754:	4650      	mov	r0, sl
 8016756:	4659      	mov	r1, fp
 8016758:	f7e9 fd08 	bl	800016c <__adddf3>
 801675c:	4682      	mov	sl, r0
 801675e:	468b      	mov	fp, r1
 8016760:	3701      	adds	r7, #1
 8016762:	9b02      	ldr	r3, [sp, #8]
 8016764:	429f      	cmp	r7, r3
 8016766:	dc01      	bgt.n	801676c <__kernel_rem_pio2+0x4ac>
 8016768:	42bd      	cmp	r5, r7
 801676a:	daeb      	bge.n	8016744 <__kernel_rem_pio2+0x484>
 801676c:	ab48      	add	r3, sp, #288	; 0x120
 801676e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016772:	e9c3 ab00 	strd	sl, fp, [r3]
 8016776:	3501      	adds	r5, #1
 8016778:	e702      	b.n	8016580 <__kernel_rem_pio2+0x2c0>
 801677a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 801677c:	2b03      	cmp	r3, #3
 801677e:	d86c      	bhi.n	801685a <__kernel_rem_pio2+0x59a>
 8016780:	e8df f003 	tbb	[pc, r3]
 8016784:	022f2f59 	.word	0x022f2f59
 8016788:	9a06      	ldr	r2, [sp, #24]
 801678a:	ab48      	add	r3, sp, #288	; 0x120
 801678c:	189d      	adds	r5, r3, r2
 801678e:	46aa      	mov	sl, r5
 8016790:	46a3      	mov	fp, r4
 8016792:	f1bb 0f00 	cmp.w	fp, #0
 8016796:	f300 8087 	bgt.w	80168a8 <__kernel_rem_pio2+0x5e8>
 801679a:	46a2      	mov	sl, r4
 801679c:	f1ba 0f01 	cmp.w	sl, #1
 80167a0:	f300 809f 	bgt.w	80168e2 <__kernel_rem_pio2+0x622>
 80167a4:	2700      	movs	r7, #0
 80167a6:	463e      	mov	r6, r7
 80167a8:	9d06      	ldr	r5, [sp, #24]
 80167aa:	ab48      	add	r3, sp, #288	; 0x120
 80167ac:	3508      	adds	r5, #8
 80167ae:	441d      	add	r5, r3
 80167b0:	2c01      	cmp	r4, #1
 80167b2:	f300 80b3 	bgt.w	801691c <__kernel_rem_pio2+0x65c>
 80167b6:	9b00      	ldr	r3, [sp, #0]
 80167b8:	9d48      	ldr	r5, [sp, #288]	; 0x120
 80167ba:	9849      	ldr	r0, [sp, #292]	; 0x124
 80167bc:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 80167be:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	f040 80b5 	bne.w	8016930 <__kernel_rem_pio2+0x670>
 80167c6:	4603      	mov	r3, r0
 80167c8:	462a      	mov	r2, r5
 80167ca:	9804      	ldr	r0, [sp, #16]
 80167cc:	e9c0 2300 	strd	r2, r3, [r0]
 80167d0:	4622      	mov	r2, r4
 80167d2:	460b      	mov	r3, r1
 80167d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80167d8:	463a      	mov	r2, r7
 80167da:	4633      	mov	r3, r6
 80167dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80167e0:	e03b      	b.n	801685a <__kernel_rem_pio2+0x59a>
 80167e2:	f04f 0c00 	mov.w	ip, #0
 80167e6:	4626      	mov	r6, r4
 80167e8:	4667      	mov	r7, ip
 80167ea:	9d06      	ldr	r5, [sp, #24]
 80167ec:	ab48      	add	r3, sp, #288	; 0x120
 80167ee:	3508      	adds	r5, #8
 80167f0:	441d      	add	r5, r3
 80167f2:	2e00      	cmp	r6, #0
 80167f4:	da42      	bge.n	801687c <__kernel_rem_pio2+0x5bc>
 80167f6:	9b00      	ldr	r3, [sp, #0]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d049      	beq.n	8016890 <__kernel_rem_pio2+0x5d0>
 80167fc:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8016800:	4662      	mov	r2, ip
 8016802:	460b      	mov	r3, r1
 8016804:	9904      	ldr	r1, [sp, #16]
 8016806:	2601      	movs	r6, #1
 8016808:	e9c1 2300 	strd	r2, r3, [r1]
 801680c:	a948      	add	r1, sp, #288	; 0x120
 801680e:	463b      	mov	r3, r7
 8016810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016814:	f7e9 fca8 	bl	8000168 <__aeabi_dsub>
 8016818:	4684      	mov	ip, r0
 801681a:	460f      	mov	r7, r1
 801681c:	ad48      	add	r5, sp, #288	; 0x120
 801681e:	42b4      	cmp	r4, r6
 8016820:	da38      	bge.n	8016894 <__kernel_rem_pio2+0x5d4>
 8016822:	9b00      	ldr	r3, [sp, #0]
 8016824:	b10b      	cbz	r3, 801682a <__kernel_rem_pio2+0x56a>
 8016826:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801682a:	4662      	mov	r2, ip
 801682c:	463b      	mov	r3, r7
 801682e:	9904      	ldr	r1, [sp, #16]
 8016830:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8016834:	e011      	b.n	801685a <__kernel_rem_pio2+0x59a>
 8016836:	2700      	movs	r7, #0
 8016838:	463d      	mov	r5, r7
 801683a:	9b06      	ldr	r3, [sp, #24]
 801683c:	aa98      	add	r2, sp, #608	; 0x260
 801683e:	4413      	add	r3, r2
 8016840:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8016844:	2c00      	cmp	r4, #0
 8016846:	da0f      	bge.n	8016868 <__kernel_rem_pio2+0x5a8>
 8016848:	9b00      	ldr	r3, [sp, #0]
 801684a:	b10b      	cbz	r3, 8016850 <__kernel_rem_pio2+0x590>
 801684c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8016850:	463a      	mov	r2, r7
 8016852:	462b      	mov	r3, r5
 8016854:	9904      	ldr	r1, [sp, #16]
 8016856:	e9c1 2300 	strd	r2, r3, [r1]
 801685a:	9b05      	ldr	r3, [sp, #20]
 801685c:	f003 0007 	and.w	r0, r3, #7
 8016860:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8016864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016868:	4638      	mov	r0, r7
 801686a:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801686e:	4629      	mov	r1, r5
 8016870:	f7e9 fc7c 	bl	800016c <__adddf3>
 8016874:	3c01      	subs	r4, #1
 8016876:	4607      	mov	r7, r0
 8016878:	460d      	mov	r5, r1
 801687a:	e7e3      	b.n	8016844 <__kernel_rem_pio2+0x584>
 801687c:	4660      	mov	r0, ip
 801687e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8016882:	4639      	mov	r1, r7
 8016884:	f7e9 fc72 	bl	800016c <__adddf3>
 8016888:	3e01      	subs	r6, #1
 801688a:	4684      	mov	ip, r0
 801688c:	460f      	mov	r7, r1
 801688e:	e7b0      	b.n	80167f2 <__kernel_rem_pio2+0x532>
 8016890:	4639      	mov	r1, r7
 8016892:	e7b5      	b.n	8016800 <__kernel_rem_pio2+0x540>
 8016894:	4660      	mov	r0, ip
 8016896:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 801689a:	4639      	mov	r1, r7
 801689c:	f7e9 fc66 	bl	800016c <__adddf3>
 80168a0:	3601      	adds	r6, #1
 80168a2:	4684      	mov	ip, r0
 80168a4:	460f      	mov	r7, r1
 80168a6:	e7ba      	b.n	801681e <__kernel_rem_pio2+0x55e>
 80168a8:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 80168ac:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80168b0:	4640      	mov	r0, r8
 80168b2:	4649      	mov	r1, r9
 80168b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80168b8:	f7e9 fc58 	bl	800016c <__adddf3>
 80168bc:	4602      	mov	r2, r0
 80168be:	460b      	mov	r3, r1
 80168c0:	4606      	mov	r6, r0
 80168c2:	460f      	mov	r7, r1
 80168c4:	4640      	mov	r0, r8
 80168c6:	4649      	mov	r1, r9
 80168c8:	f7e9 fc4e 	bl	8000168 <__aeabi_dsub>
 80168cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80168d0:	f7e9 fc4c 	bl	800016c <__adddf3>
 80168d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80168d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80168dc:	e9ca 6700 	strd	r6, r7, [sl]
 80168e0:	e757      	b.n	8016792 <__kernel_rem_pio2+0x4d2>
 80168e2:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 80168e6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80168ea:	4630      	mov	r0, r6
 80168ec:	4639      	mov	r1, r7
 80168ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80168f2:	f7e9 fc3b 	bl	800016c <__adddf3>
 80168f6:	4602      	mov	r2, r0
 80168f8:	460b      	mov	r3, r1
 80168fa:	4680      	mov	r8, r0
 80168fc:	4689      	mov	r9, r1
 80168fe:	4630      	mov	r0, r6
 8016900:	4639      	mov	r1, r7
 8016902:	f7e9 fc31 	bl	8000168 <__aeabi_dsub>
 8016906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801690a:	f7e9 fc2f 	bl	800016c <__adddf3>
 801690e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016912:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8016916:	e9c5 8900 	strd	r8, r9, [r5]
 801691a:	e73f      	b.n	801679c <__kernel_rem_pio2+0x4dc>
 801691c:	4638      	mov	r0, r7
 801691e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8016922:	4631      	mov	r1, r6
 8016924:	f7e9 fc22 	bl	800016c <__adddf3>
 8016928:	3c01      	subs	r4, #1
 801692a:	4607      	mov	r7, r0
 801692c:	460e      	mov	r6, r1
 801692e:	e73f      	b.n	80167b0 <__kernel_rem_pio2+0x4f0>
 8016930:	9b04      	ldr	r3, [sp, #16]
 8016932:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8016936:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801693a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801693e:	601d      	str	r5, [r3, #0]
 8016940:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8016944:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8016948:	615e      	str	r6, [r3, #20]
 801694a:	e786      	b.n	801685a <__kernel_rem_pio2+0x59a>
 801694c:	41700000 	.word	0x41700000
 8016950:	3e700000 	.word	0x3e700000
 8016954:	00000000 	.word	0x00000000

08016958 <__kernel_tan>:
 8016958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801695c:	461f      	mov	r7, r3
 801695e:	4bda      	ldr	r3, [pc, #872]	; (8016cc8 <__kernel_tan+0x370>)
 8016960:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016964:	b089      	sub	sp, #36	; 0x24
 8016966:	429e      	cmp	r6, r3
 8016968:	4682      	mov	sl, r0
 801696a:	468b      	mov	fp, r1
 801696c:	4690      	mov	r8, r2
 801696e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8016972:	9105      	str	r1, [sp, #20]
 8016974:	dc21      	bgt.n	80169ba <__kernel_tan+0x62>
 8016976:	f7ea f85f 	bl	8000a38 <__aeabi_d2iz>
 801697a:	2800      	cmp	r0, #0
 801697c:	d140      	bne.n	8016a00 <__kernel_tan+0xa8>
 801697e:	4652      	mov	r2, sl
 8016980:	f109 0301 	add.w	r3, r9, #1
 8016984:	4313      	orrs	r3, r2
 8016986:	4333      	orrs	r3, r6
 8016988:	d110      	bne.n	80169ac <__kernel_tan+0x54>
 801698a:	4650      	mov	r0, sl
 801698c:	4659      	mov	r1, fp
 801698e:	f000 fd37 	bl	8017400 <fabs>
 8016992:	4602      	mov	r2, r0
 8016994:	2000      	movs	r0, #0
 8016996:	460b      	mov	r3, r1
 8016998:	49cc      	ldr	r1, [pc, #816]	; (8016ccc <__kernel_tan+0x374>)
 801699a:	f7e9 fec7 	bl	800072c <__aeabi_ddiv>
 801699e:	4682      	mov	sl, r0
 80169a0:	468b      	mov	fp, r1
 80169a2:	4650      	mov	r0, sl
 80169a4:	4659      	mov	r1, fp
 80169a6:	b009      	add	sp, #36	; 0x24
 80169a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ac:	f1b9 0f01 	cmp.w	r9, #1
 80169b0:	d0f7      	beq.n	80169a2 <__kernel_tan+0x4a>
 80169b2:	465b      	mov	r3, fp
 80169b4:	2000      	movs	r0, #0
 80169b6:	49c6      	ldr	r1, [pc, #792]	; (8016cd0 <__kernel_tan+0x378>)
 80169b8:	e7ef      	b.n	801699a <__kernel_tan+0x42>
 80169ba:	4bc6      	ldr	r3, [pc, #792]	; (8016cd4 <__kernel_tan+0x37c>)
 80169bc:	429e      	cmp	r6, r3
 80169be:	dd1f      	ble.n	8016a00 <__kernel_tan+0xa8>
 80169c0:	2900      	cmp	r1, #0
 80169c2:	da04      	bge.n	80169ce <__kernel_tan+0x76>
 80169c4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80169c8:	469b      	mov	fp, r3
 80169ca:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80169ce:	4652      	mov	r2, sl
 80169d0:	a19f      	add	r1, pc, #636	; (adr r1, 8016c50 <__kernel_tan+0x2f8>)
 80169d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169d6:	465b      	mov	r3, fp
 80169d8:	f7e9 fbc6 	bl	8000168 <__aeabi_dsub>
 80169dc:	4604      	mov	r4, r0
 80169de:	460d      	mov	r5, r1
 80169e0:	a19d      	add	r1, pc, #628	; (adr r1, 8016c58 <__kernel_tan+0x300>)
 80169e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169e6:	4642      	mov	r2, r8
 80169e8:	463b      	mov	r3, r7
 80169ea:	f7e9 fbbd 	bl	8000168 <__aeabi_dsub>
 80169ee:	4622      	mov	r2, r4
 80169f0:	462b      	mov	r3, r5
 80169f2:	f7e9 fbbb 	bl	800016c <__adddf3>
 80169f6:	f04f 0800 	mov.w	r8, #0
 80169fa:	4682      	mov	sl, r0
 80169fc:	468b      	mov	fp, r1
 80169fe:	4647      	mov	r7, r8
 8016a00:	4652      	mov	r2, sl
 8016a02:	465b      	mov	r3, fp
 8016a04:	4650      	mov	r0, sl
 8016a06:	4659      	mov	r1, fp
 8016a08:	f7e9 fd66 	bl	80004d8 <__aeabi_dmul>
 8016a0c:	4602      	mov	r2, r0
 8016a0e:	460b      	mov	r3, r1
 8016a10:	e9cd 0100 	strd	r0, r1, [sp]
 8016a14:	f7e9 fd60 	bl	80004d8 <__aeabi_dmul>
 8016a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a1c:	4604      	mov	r4, r0
 8016a1e:	460d      	mov	r5, r1
 8016a20:	4650      	mov	r0, sl
 8016a22:	4659      	mov	r1, fp
 8016a24:	f7e9 fd58 	bl	80004d8 <__aeabi_dmul>
 8016a28:	a38d      	add	r3, pc, #564	; (adr r3, 8016c60 <__kernel_tan+0x308>)
 8016a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a32:	4620      	mov	r0, r4
 8016a34:	4629      	mov	r1, r5
 8016a36:	f7e9 fd4f 	bl	80004d8 <__aeabi_dmul>
 8016a3a:	a38b      	add	r3, pc, #556	; (adr r3, 8016c68 <__kernel_tan+0x310>)
 8016a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a40:	f7e9 fb94 	bl	800016c <__adddf3>
 8016a44:	4622      	mov	r2, r4
 8016a46:	462b      	mov	r3, r5
 8016a48:	f7e9 fd46 	bl	80004d8 <__aeabi_dmul>
 8016a4c:	a388      	add	r3, pc, #544	; (adr r3, 8016c70 <__kernel_tan+0x318>)
 8016a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a52:	f7e9 fb8b 	bl	800016c <__adddf3>
 8016a56:	4622      	mov	r2, r4
 8016a58:	462b      	mov	r3, r5
 8016a5a:	f7e9 fd3d 	bl	80004d8 <__aeabi_dmul>
 8016a5e:	a386      	add	r3, pc, #536	; (adr r3, 8016c78 <__kernel_tan+0x320>)
 8016a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a64:	f7e9 fb82 	bl	800016c <__adddf3>
 8016a68:	4622      	mov	r2, r4
 8016a6a:	462b      	mov	r3, r5
 8016a6c:	f7e9 fd34 	bl	80004d8 <__aeabi_dmul>
 8016a70:	a383      	add	r3, pc, #524	; (adr r3, 8016c80 <__kernel_tan+0x328>)
 8016a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a76:	f7e9 fb79 	bl	800016c <__adddf3>
 8016a7a:	4622      	mov	r2, r4
 8016a7c:	462b      	mov	r3, r5
 8016a7e:	f7e9 fd2b 	bl	80004d8 <__aeabi_dmul>
 8016a82:	a381      	add	r3, pc, #516	; (adr r3, 8016c88 <__kernel_tan+0x330>)
 8016a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a88:	f7e9 fb70 	bl	800016c <__adddf3>
 8016a8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a90:	f7e9 fd22 	bl	80004d8 <__aeabi_dmul>
 8016a94:	a37e      	add	r3, pc, #504	; (adr r3, 8016c90 <__kernel_tan+0x338>)
 8016a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016a9e:	4620      	mov	r0, r4
 8016aa0:	4629      	mov	r1, r5
 8016aa2:	f7e9 fd19 	bl	80004d8 <__aeabi_dmul>
 8016aa6:	a37c      	add	r3, pc, #496	; (adr r3, 8016c98 <__kernel_tan+0x340>)
 8016aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aac:	f7e9 fb5e 	bl	800016c <__adddf3>
 8016ab0:	4622      	mov	r2, r4
 8016ab2:	462b      	mov	r3, r5
 8016ab4:	f7e9 fd10 	bl	80004d8 <__aeabi_dmul>
 8016ab8:	a379      	add	r3, pc, #484	; (adr r3, 8016ca0 <__kernel_tan+0x348>)
 8016aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016abe:	f7e9 fb55 	bl	800016c <__adddf3>
 8016ac2:	4622      	mov	r2, r4
 8016ac4:	462b      	mov	r3, r5
 8016ac6:	f7e9 fd07 	bl	80004d8 <__aeabi_dmul>
 8016aca:	a377      	add	r3, pc, #476	; (adr r3, 8016ca8 <__kernel_tan+0x350>)
 8016acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad0:	f7e9 fb4c 	bl	800016c <__adddf3>
 8016ad4:	4622      	mov	r2, r4
 8016ad6:	462b      	mov	r3, r5
 8016ad8:	f7e9 fcfe 	bl	80004d8 <__aeabi_dmul>
 8016adc:	a374      	add	r3, pc, #464	; (adr r3, 8016cb0 <__kernel_tan+0x358>)
 8016ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae2:	f7e9 fb43 	bl	800016c <__adddf3>
 8016ae6:	4622      	mov	r2, r4
 8016ae8:	462b      	mov	r3, r5
 8016aea:	f7e9 fcf5 	bl	80004d8 <__aeabi_dmul>
 8016aee:	a372      	add	r3, pc, #456	; (adr r3, 8016cb8 <__kernel_tan+0x360>)
 8016af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af4:	f7e9 fb3a 	bl	800016c <__adddf3>
 8016af8:	4602      	mov	r2, r0
 8016afa:	460b      	mov	r3, r1
 8016afc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016b00:	f7e9 fb34 	bl	800016c <__adddf3>
 8016b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b08:	f7e9 fce6 	bl	80004d8 <__aeabi_dmul>
 8016b0c:	4642      	mov	r2, r8
 8016b0e:	463b      	mov	r3, r7
 8016b10:	f7e9 fb2c 	bl	800016c <__adddf3>
 8016b14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b18:	f7e9 fcde 	bl	80004d8 <__aeabi_dmul>
 8016b1c:	4642      	mov	r2, r8
 8016b1e:	463b      	mov	r3, r7
 8016b20:	f7e9 fb24 	bl	800016c <__adddf3>
 8016b24:	a366      	add	r3, pc, #408	; (adr r3, 8016cc0 <__kernel_tan+0x368>)
 8016b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	460d      	mov	r5, r1
 8016b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b32:	f7e9 fcd1 	bl	80004d8 <__aeabi_dmul>
 8016b36:	4622      	mov	r2, r4
 8016b38:	462b      	mov	r3, r5
 8016b3a:	f7e9 fb17 	bl	800016c <__adddf3>
 8016b3e:	e9cd 0100 	strd	r0, r1, [sp]
 8016b42:	460b      	mov	r3, r1
 8016b44:	4602      	mov	r2, r0
 8016b46:	4659      	mov	r1, fp
 8016b48:	4650      	mov	r0, sl
 8016b4a:	f7e9 fb0f 	bl	800016c <__adddf3>
 8016b4e:	4b61      	ldr	r3, [pc, #388]	; (8016cd4 <__kernel_tan+0x37c>)
 8016b50:	4604      	mov	r4, r0
 8016b52:	429e      	cmp	r6, r3
 8016b54:	460d      	mov	r5, r1
 8016b56:	dd3d      	ble.n	8016bd4 <__kernel_tan+0x27c>
 8016b58:	4648      	mov	r0, r9
 8016b5a:	f7e9 fc53 	bl	8000404 <__aeabi_i2d>
 8016b5e:	4622      	mov	r2, r4
 8016b60:	4680      	mov	r8, r0
 8016b62:	4689      	mov	r9, r1
 8016b64:	462b      	mov	r3, r5
 8016b66:	4620      	mov	r0, r4
 8016b68:	4629      	mov	r1, r5
 8016b6a:	f7e9 fcb5 	bl	80004d8 <__aeabi_dmul>
 8016b6e:	4642      	mov	r2, r8
 8016b70:	4606      	mov	r6, r0
 8016b72:	460f      	mov	r7, r1
 8016b74:	464b      	mov	r3, r9
 8016b76:	4620      	mov	r0, r4
 8016b78:	4629      	mov	r1, r5
 8016b7a:	f7e9 faf7 	bl	800016c <__adddf3>
 8016b7e:	4602      	mov	r2, r0
 8016b80:	460b      	mov	r3, r1
 8016b82:	4630      	mov	r0, r6
 8016b84:	4639      	mov	r1, r7
 8016b86:	f7e9 fdd1 	bl	800072c <__aeabi_ddiv>
 8016b8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b8e:	f7e9 faeb 	bl	8000168 <__aeabi_dsub>
 8016b92:	4602      	mov	r2, r0
 8016b94:	460b      	mov	r3, r1
 8016b96:	4650      	mov	r0, sl
 8016b98:	4659      	mov	r1, fp
 8016b9a:	f7e9 fae5 	bl	8000168 <__aeabi_dsub>
 8016b9e:	4602      	mov	r2, r0
 8016ba0:	460b      	mov	r3, r1
 8016ba2:	f7e9 fae3 	bl	800016c <__adddf3>
 8016ba6:	4602      	mov	r2, r0
 8016ba8:	460b      	mov	r3, r1
 8016baa:	4640      	mov	r0, r8
 8016bac:	4649      	mov	r1, r9
 8016bae:	f7e9 fadb 	bl	8000168 <__aeabi_dsub>
 8016bb2:	9b05      	ldr	r3, [sp, #20]
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	1798      	asrs	r0, r3, #30
 8016bb8:	f000 0002 	and.w	r0, r0, #2
 8016bbc:	f1c0 0001 	rsb	r0, r0, #1
 8016bc0:	460d      	mov	r5, r1
 8016bc2:	f7e9 fc1f 	bl	8000404 <__aeabi_i2d>
 8016bc6:	4602      	mov	r2, r0
 8016bc8:	460b      	mov	r3, r1
 8016bca:	4620      	mov	r0, r4
 8016bcc:	4629      	mov	r1, r5
 8016bce:	f7e9 fc83 	bl	80004d8 <__aeabi_dmul>
 8016bd2:	e6e4      	b.n	801699e <__kernel_tan+0x46>
 8016bd4:	f1b9 0f01 	cmp.w	r9, #1
 8016bd8:	d036      	beq.n	8016c48 <__kernel_tan+0x2f0>
 8016bda:	460f      	mov	r7, r1
 8016bdc:	4602      	mov	r2, r0
 8016bde:	460b      	mov	r3, r1
 8016be0:	2000      	movs	r0, #0
 8016be2:	493b      	ldr	r1, [pc, #236]	; (8016cd0 <__kernel_tan+0x378>)
 8016be4:	f7e9 fda2 	bl	800072c <__aeabi_ddiv>
 8016be8:	2600      	movs	r6, #0
 8016bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016bee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016bf2:	4652      	mov	r2, sl
 8016bf4:	465b      	mov	r3, fp
 8016bf6:	4630      	mov	r0, r6
 8016bf8:	4639      	mov	r1, r7
 8016bfa:	f7e9 fab5 	bl	8000168 <__aeabi_dsub>
 8016bfe:	4602      	mov	r2, r0
 8016c00:	460b      	mov	r3, r1
 8016c02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c06:	f7e9 faaf 	bl	8000168 <__aeabi_dsub>
 8016c0a:	4632      	mov	r2, r6
 8016c0c:	462b      	mov	r3, r5
 8016c0e:	f7e9 fc63 	bl	80004d8 <__aeabi_dmul>
 8016c12:	4632      	mov	r2, r6
 8016c14:	4682      	mov	sl, r0
 8016c16:	468b      	mov	fp, r1
 8016c18:	462b      	mov	r3, r5
 8016c1a:	4630      	mov	r0, r6
 8016c1c:	4639      	mov	r1, r7
 8016c1e:	f7e9 fc5b 	bl	80004d8 <__aeabi_dmul>
 8016c22:	2200      	movs	r2, #0
 8016c24:	4b29      	ldr	r3, [pc, #164]	; (8016ccc <__kernel_tan+0x374>)
 8016c26:	f7e9 faa1 	bl	800016c <__adddf3>
 8016c2a:	4602      	mov	r2, r0
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	4650      	mov	r0, sl
 8016c30:	4659      	mov	r1, fp
 8016c32:	f7e9 fa9b 	bl	800016c <__adddf3>
 8016c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c3a:	f7e9 fc4d 	bl	80004d8 <__aeabi_dmul>
 8016c3e:	4632      	mov	r2, r6
 8016c40:	462b      	mov	r3, r5
 8016c42:	f7e9 fa93 	bl	800016c <__adddf3>
 8016c46:	e6aa      	b.n	801699e <__kernel_tan+0x46>
 8016c48:	4682      	mov	sl, r0
 8016c4a:	468b      	mov	fp, r1
 8016c4c:	e6a9      	b.n	80169a2 <__kernel_tan+0x4a>
 8016c4e:	bf00      	nop
 8016c50:	54442d18 	.word	0x54442d18
 8016c54:	3fe921fb 	.word	0x3fe921fb
 8016c58:	33145c07 	.word	0x33145c07
 8016c5c:	3c81a626 	.word	0x3c81a626
 8016c60:	74bf7ad4 	.word	0x74bf7ad4
 8016c64:	3efb2a70 	.word	0x3efb2a70
 8016c68:	32f0a7e9 	.word	0x32f0a7e9
 8016c6c:	3f12b80f 	.word	0x3f12b80f
 8016c70:	1a8d1068 	.word	0x1a8d1068
 8016c74:	3f3026f7 	.word	0x3f3026f7
 8016c78:	fee08315 	.word	0xfee08315
 8016c7c:	3f57dbc8 	.word	0x3f57dbc8
 8016c80:	e96e8493 	.word	0xe96e8493
 8016c84:	3f8226e3 	.word	0x3f8226e3
 8016c88:	1bb341fe 	.word	0x1bb341fe
 8016c8c:	3faba1ba 	.word	0x3faba1ba
 8016c90:	db605373 	.word	0xdb605373
 8016c94:	bef375cb 	.word	0xbef375cb
 8016c98:	a03792a6 	.word	0xa03792a6
 8016c9c:	3f147e88 	.word	0x3f147e88
 8016ca0:	f2f26501 	.word	0xf2f26501
 8016ca4:	3f4344d8 	.word	0x3f4344d8
 8016ca8:	c9560328 	.word	0xc9560328
 8016cac:	3f6d6d22 	.word	0x3f6d6d22
 8016cb0:	8406d637 	.word	0x8406d637
 8016cb4:	3f9664f4 	.word	0x3f9664f4
 8016cb8:	1110fe7a 	.word	0x1110fe7a
 8016cbc:	3fc11111 	.word	0x3fc11111
 8016cc0:	55555563 	.word	0x55555563
 8016cc4:	3fd55555 	.word	0x3fd55555
 8016cc8:	3e2fffff 	.word	0x3e2fffff
 8016ccc:	3ff00000 	.word	0x3ff00000
 8016cd0:	bff00000 	.word	0xbff00000
 8016cd4:	3fe59427 	.word	0x3fe59427

08016cd8 <__kernel_cosf>:
 8016cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cdc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8016ce0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8016ce4:	4606      	mov	r6, r0
 8016ce6:	4688      	mov	r8, r1
 8016ce8:	da03      	bge.n	8016cf2 <__kernel_cosf+0x1a>
 8016cea:	f7ea fa07 	bl	80010fc <__aeabi_f2iz>
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	d05c      	beq.n	8016dac <__kernel_cosf+0xd4>
 8016cf2:	4631      	mov	r1, r6
 8016cf4:	4630      	mov	r0, r6
 8016cf6:	f7ea f825 	bl	8000d44 <__aeabi_fmul>
 8016cfa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8016cfe:	4605      	mov	r5, r0
 8016d00:	f7ea f820 	bl	8000d44 <__aeabi_fmul>
 8016d04:	492b      	ldr	r1, [pc, #172]	; (8016db4 <__kernel_cosf+0xdc>)
 8016d06:	4607      	mov	r7, r0
 8016d08:	4628      	mov	r0, r5
 8016d0a:	f7ea f81b 	bl	8000d44 <__aeabi_fmul>
 8016d0e:	492a      	ldr	r1, [pc, #168]	; (8016db8 <__kernel_cosf+0xe0>)
 8016d10:	f7e9 ff10 	bl	8000b34 <__addsf3>
 8016d14:	4629      	mov	r1, r5
 8016d16:	f7ea f815 	bl	8000d44 <__aeabi_fmul>
 8016d1a:	4928      	ldr	r1, [pc, #160]	; (8016dbc <__kernel_cosf+0xe4>)
 8016d1c:	f7e9 ff08 	bl	8000b30 <__aeabi_fsub>
 8016d20:	4629      	mov	r1, r5
 8016d22:	f7ea f80f 	bl	8000d44 <__aeabi_fmul>
 8016d26:	4926      	ldr	r1, [pc, #152]	; (8016dc0 <__kernel_cosf+0xe8>)
 8016d28:	f7e9 ff04 	bl	8000b34 <__addsf3>
 8016d2c:	4629      	mov	r1, r5
 8016d2e:	f7ea f809 	bl	8000d44 <__aeabi_fmul>
 8016d32:	4924      	ldr	r1, [pc, #144]	; (8016dc4 <__kernel_cosf+0xec>)
 8016d34:	f7e9 fefc 	bl	8000b30 <__aeabi_fsub>
 8016d38:	4629      	mov	r1, r5
 8016d3a:	f7ea f803 	bl	8000d44 <__aeabi_fmul>
 8016d3e:	4922      	ldr	r1, [pc, #136]	; (8016dc8 <__kernel_cosf+0xf0>)
 8016d40:	f7e9 fef8 	bl	8000b34 <__addsf3>
 8016d44:	4629      	mov	r1, r5
 8016d46:	f7e9 fffd 	bl	8000d44 <__aeabi_fmul>
 8016d4a:	4629      	mov	r1, r5
 8016d4c:	f7e9 fffa 	bl	8000d44 <__aeabi_fmul>
 8016d50:	4641      	mov	r1, r8
 8016d52:	4605      	mov	r5, r0
 8016d54:	4630      	mov	r0, r6
 8016d56:	f7e9 fff5 	bl	8000d44 <__aeabi_fmul>
 8016d5a:	4601      	mov	r1, r0
 8016d5c:	4628      	mov	r0, r5
 8016d5e:	f7e9 fee7 	bl	8000b30 <__aeabi_fsub>
 8016d62:	4b1a      	ldr	r3, [pc, #104]	; (8016dcc <__kernel_cosf+0xf4>)
 8016d64:	4605      	mov	r5, r0
 8016d66:	429c      	cmp	r4, r3
 8016d68:	dc0a      	bgt.n	8016d80 <__kernel_cosf+0xa8>
 8016d6a:	4601      	mov	r1, r0
 8016d6c:	4638      	mov	r0, r7
 8016d6e:	f7e9 fedf 	bl	8000b30 <__aeabi_fsub>
 8016d72:	4601      	mov	r1, r0
 8016d74:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016d78:	f7e9 feda 	bl	8000b30 <__aeabi_fsub>
 8016d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d80:	4b13      	ldr	r3, [pc, #76]	; (8016dd0 <__kernel_cosf+0xf8>)
 8016d82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016d86:	429c      	cmp	r4, r3
 8016d88:	bfcc      	ite	gt
 8016d8a:	4c12      	ldrgt	r4, [pc, #72]	; (8016dd4 <__kernel_cosf+0xfc>)
 8016d8c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8016d90:	4621      	mov	r1, r4
 8016d92:	f7e9 fecd 	bl	8000b30 <__aeabi_fsub>
 8016d96:	4621      	mov	r1, r4
 8016d98:	4606      	mov	r6, r0
 8016d9a:	4638      	mov	r0, r7
 8016d9c:	f7e9 fec8 	bl	8000b30 <__aeabi_fsub>
 8016da0:	4629      	mov	r1, r5
 8016da2:	f7e9 fec5 	bl	8000b30 <__aeabi_fsub>
 8016da6:	4601      	mov	r1, r0
 8016da8:	4630      	mov	r0, r6
 8016daa:	e7e5      	b.n	8016d78 <__kernel_cosf+0xa0>
 8016dac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016db0:	e7e4      	b.n	8016d7c <__kernel_cosf+0xa4>
 8016db2:	bf00      	nop
 8016db4:	ad47d74e 	.word	0xad47d74e
 8016db8:	310f74f6 	.word	0x310f74f6
 8016dbc:	3493f27c 	.word	0x3493f27c
 8016dc0:	37d00d01 	.word	0x37d00d01
 8016dc4:	3ab60b61 	.word	0x3ab60b61
 8016dc8:	3d2aaaab 	.word	0x3d2aaaab
 8016dcc:	3e999999 	.word	0x3e999999
 8016dd0:	3f480000 	.word	0x3f480000
 8016dd4:	3e900000 	.word	0x3e900000

08016dd8 <__kernel_rem_pio2f>:
 8016dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ddc:	b0d9      	sub	sp, #356	; 0x164
 8016dde:	9304      	str	r3, [sp, #16]
 8016de0:	9101      	str	r1, [sp, #4]
 8016de2:	4bc3      	ldr	r3, [pc, #780]	; (80170f0 <__kernel_rem_pio2f+0x318>)
 8016de4:	9962      	ldr	r1, [sp, #392]	; 0x188
 8016de6:	1ed4      	subs	r4, r2, #3
 8016de8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016dec:	2500      	movs	r5, #0
 8016dee:	9302      	str	r3, [sp, #8]
 8016df0:	9b04      	ldr	r3, [sp, #16]
 8016df2:	f04f 0a00 	mov.w	sl, #0
 8016df6:	3b01      	subs	r3, #1
 8016df8:	9303      	str	r3, [sp, #12]
 8016dfa:	2308      	movs	r3, #8
 8016dfc:	fb94 f4f3 	sdiv	r4, r4, r3
 8016e00:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8016e04:	1c66      	adds	r6, r4, #1
 8016e06:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8016e0a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016e0e:	eb03 0802 	add.w	r8, r3, r2
 8016e12:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8016e14:	1aa7      	subs	r7, r4, r2
 8016e16:	9005      	str	r0, [sp, #20]
 8016e18:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016e1c:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8016e20:	4545      	cmp	r5, r8
 8016e22:	dd7f      	ble.n	8016f24 <__kernel_rem_pio2f+0x14c>
 8016e24:	f04f 0800 	mov.w	r8, #0
 8016e28:	f04f 0a00 	mov.w	sl, #0
 8016e2c:	f06f 0b03 	mvn.w	fp, #3
 8016e30:	9b04      	ldr	r3, [sp, #16]
 8016e32:	aa1c      	add	r2, sp, #112	; 0x70
 8016e34:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8016e38:	ab44      	add	r3, sp, #272	; 0x110
 8016e3a:	9a02      	ldr	r2, [sp, #8]
 8016e3c:	4590      	cmp	r8, r2
 8016e3e:	f340 8097 	ble.w	8016f70 <__kernel_rem_pio2f+0x198>
 8016e42:	4613      	mov	r3, r2
 8016e44:	aa08      	add	r2, sp, #32
 8016e46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016e4a:	9307      	str	r3, [sp, #28]
 8016e4c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8016e4e:	9f02      	ldr	r7, [sp, #8]
 8016e50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016e54:	9306      	str	r3, [sp, #24]
 8016e56:	46ba      	mov	sl, r7
 8016e58:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8016e5c:	ab58      	add	r3, sp, #352	; 0x160
 8016e5e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8016e62:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8016e66:	ad07      	add	r5, sp, #28
 8016e68:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8016e6c:	f1ba 0f00 	cmp.w	sl, #0
 8016e70:	f300 8081 	bgt.w	8016f76 <__kernel_rem_pio2f+0x19e>
 8016e74:	4631      	mov	r1, r6
 8016e76:	4620      	mov	r0, r4
 8016e78:	f000 fc98 	bl	80177ac <scalbnf>
 8016e7c:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8016e80:	4604      	mov	r4, r0
 8016e82:	f7e9 ff5f 	bl	8000d44 <__aeabi_fmul>
 8016e86:	f000 fc51 	bl	801772c <floorf>
 8016e8a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8016e8e:	f7e9 ff59 	bl	8000d44 <__aeabi_fmul>
 8016e92:	4601      	mov	r1, r0
 8016e94:	4620      	mov	r0, r4
 8016e96:	f7e9 fe4b 	bl	8000b30 <__aeabi_fsub>
 8016e9a:	4604      	mov	r4, r0
 8016e9c:	f7ea f92e 	bl	80010fc <__aeabi_f2iz>
 8016ea0:	4681      	mov	r9, r0
 8016ea2:	f7e9 fefb 	bl	8000c9c <__aeabi_i2f>
 8016ea6:	4601      	mov	r1, r0
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	f7e9 fe41 	bl	8000b30 <__aeabi_fsub>
 8016eae:	2e00      	cmp	r6, #0
 8016eb0:	4604      	mov	r4, r0
 8016eb2:	dd7e      	ble.n	8016fb2 <__kernel_rem_pio2f+0x1da>
 8016eb4:	1e7b      	subs	r3, r7, #1
 8016eb6:	aa08      	add	r2, sp, #32
 8016eb8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8016ebc:	f1c6 0208 	rsb	r2, r6, #8
 8016ec0:	fa45 f002 	asr.w	r0, r5, r2
 8016ec4:	4481      	add	r9, r0
 8016ec6:	4090      	lsls	r0, r2
 8016ec8:	1a2d      	subs	r5, r5, r0
 8016eca:	aa08      	add	r2, sp, #32
 8016ecc:	f1c6 0007 	rsb	r0, r6, #7
 8016ed0:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8016ed4:	4105      	asrs	r5, r0
 8016ed6:	2d00      	cmp	r5, #0
 8016ed8:	dd79      	ble.n	8016fce <__kernel_rem_pio2f+0x1f6>
 8016eda:	2200      	movs	r2, #0
 8016edc:	4690      	mov	r8, r2
 8016ede:	f109 0901 	add.w	r9, r9, #1
 8016ee2:	4297      	cmp	r7, r2
 8016ee4:	f300 80ae 	bgt.w	8017044 <__kernel_rem_pio2f+0x26c>
 8016ee8:	2e00      	cmp	r6, #0
 8016eea:	dd05      	ble.n	8016ef8 <__kernel_rem_pio2f+0x120>
 8016eec:	2e01      	cmp	r6, #1
 8016eee:	f000 80c0 	beq.w	8017072 <__kernel_rem_pio2f+0x29a>
 8016ef2:	2e02      	cmp	r6, #2
 8016ef4:	f000 80c7 	beq.w	8017086 <__kernel_rem_pio2f+0x2ae>
 8016ef8:	2d02      	cmp	r5, #2
 8016efa:	d168      	bne.n	8016fce <__kernel_rem_pio2f+0x1f6>
 8016efc:	4621      	mov	r1, r4
 8016efe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016f02:	f7e9 fe15 	bl	8000b30 <__aeabi_fsub>
 8016f06:	4604      	mov	r4, r0
 8016f08:	f1b8 0f00 	cmp.w	r8, #0
 8016f0c:	d05f      	beq.n	8016fce <__kernel_rem_pio2f+0x1f6>
 8016f0e:	4631      	mov	r1, r6
 8016f10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016f14:	f000 fc4a 	bl	80177ac <scalbnf>
 8016f18:	4601      	mov	r1, r0
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	f7e9 fe08 	bl	8000b30 <__aeabi_fsub>
 8016f20:	4604      	mov	r4, r0
 8016f22:	e054      	b.n	8016fce <__kernel_rem_pio2f+0x1f6>
 8016f24:	42ef      	cmn	r7, r5
 8016f26:	d407      	bmi.n	8016f38 <__kernel_rem_pio2f+0x160>
 8016f28:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016f2c:	f7e9 feb6 	bl	8000c9c <__aeabi_i2f>
 8016f30:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8016f34:	3501      	adds	r5, #1
 8016f36:	e773      	b.n	8016e20 <__kernel_rem_pio2f+0x48>
 8016f38:	4650      	mov	r0, sl
 8016f3a:	e7f9      	b.n	8016f30 <__kernel_rem_pio2f+0x158>
 8016f3c:	fb0b 5207 	mla	r2, fp, r7, r5
 8016f40:	9306      	str	r3, [sp, #24]
 8016f42:	9b05      	ldr	r3, [sp, #20]
 8016f44:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016f48:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8016f4c:	f7e9 fefa 	bl	8000d44 <__aeabi_fmul>
 8016f50:	4601      	mov	r1, r0
 8016f52:	4648      	mov	r0, r9
 8016f54:	f7e9 fdee 	bl	8000b34 <__addsf3>
 8016f58:	4681      	mov	r9, r0
 8016f5a:	9b06      	ldr	r3, [sp, #24]
 8016f5c:	3701      	adds	r7, #1
 8016f5e:	9a03      	ldr	r2, [sp, #12]
 8016f60:	4297      	cmp	r7, r2
 8016f62:	ddeb      	ble.n	8016f3c <__kernel_rem_pio2f+0x164>
 8016f64:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8016f68:	3504      	adds	r5, #4
 8016f6a:	f108 0801 	add.w	r8, r8, #1
 8016f6e:	e764      	b.n	8016e3a <__kernel_rem_pio2f+0x62>
 8016f70:	46d1      	mov	r9, sl
 8016f72:	2700      	movs	r7, #0
 8016f74:	e7f3      	b.n	8016f5e <__kernel_rem_pio2f+0x186>
 8016f76:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8016f7a:	4620      	mov	r0, r4
 8016f7c:	f7e9 fee2 	bl	8000d44 <__aeabi_fmul>
 8016f80:	f7ea f8bc 	bl	80010fc <__aeabi_f2iz>
 8016f84:	f7e9 fe8a 	bl	8000c9c <__aeabi_i2f>
 8016f88:	4641      	mov	r1, r8
 8016f8a:	4683      	mov	fp, r0
 8016f8c:	f7e9 feda 	bl	8000d44 <__aeabi_fmul>
 8016f90:	4601      	mov	r1, r0
 8016f92:	4620      	mov	r0, r4
 8016f94:	f7e9 fdcc 	bl	8000b30 <__aeabi_fsub>
 8016f98:	f7ea f8b0 	bl	80010fc <__aeabi_f2iz>
 8016f9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fa0:	f845 0f04 	str.w	r0, [r5, #4]!
 8016fa4:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8016fa8:	4658      	mov	r0, fp
 8016faa:	f7e9 fdc3 	bl	8000b34 <__addsf3>
 8016fae:	4604      	mov	r4, r0
 8016fb0:	e75c      	b.n	8016e6c <__kernel_rem_pio2f+0x94>
 8016fb2:	d105      	bne.n	8016fc0 <__kernel_rem_pio2f+0x1e8>
 8016fb4:	1e7b      	subs	r3, r7, #1
 8016fb6:	aa08      	add	r2, sp, #32
 8016fb8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8016fbc:	122d      	asrs	r5, r5, #8
 8016fbe:	e78a      	b.n	8016ed6 <__kernel_rem_pio2f+0xfe>
 8016fc0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8016fc4:	f7ea f870 	bl	80010a8 <__aeabi_fcmpge>
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	d139      	bne.n	8017040 <__kernel_rem_pio2f+0x268>
 8016fcc:	4605      	mov	r5, r0
 8016fce:	2100      	movs	r1, #0
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	f7ea f84b 	bl	800106c <__aeabi_fcmpeq>
 8016fd6:	2800      	cmp	r0, #0
 8016fd8:	f000 80a0 	beq.w	801711c <__kernel_rem_pio2f+0x344>
 8016fdc:	1e7c      	subs	r4, r7, #1
 8016fde:	4623      	mov	r3, r4
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	9902      	ldr	r1, [sp, #8]
 8016fe4:	428b      	cmp	r3, r1
 8016fe6:	da55      	bge.n	8017094 <__kernel_rem_pio2f+0x2bc>
 8016fe8:	2a00      	cmp	r2, #0
 8016fea:	d07e      	beq.n	80170ea <__kernel_rem_pio2f+0x312>
 8016fec:	ab08      	add	r3, sp, #32
 8016fee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016ff2:	3e08      	subs	r6, #8
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	f000 808f 	beq.w	8017118 <__kernel_rem_pio2f+0x340>
 8016ffa:	4631      	mov	r1, r6
 8016ffc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017000:	f000 fbd4 	bl	80177ac <scalbnf>
 8017004:	46a0      	mov	r8, r4
 8017006:	4682      	mov	sl, r0
 8017008:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 801700c:	af44      	add	r7, sp, #272	; 0x110
 801700e:	f1b8 0f00 	cmp.w	r8, #0
 8017012:	f280 80b5 	bge.w	8017180 <__kernel_rem_pio2f+0x3a8>
 8017016:	f04f 0a00 	mov.w	sl, #0
 801701a:	2300      	movs	r3, #0
 801701c:	00a6      	lsls	r6, r4, #2
 801701e:	4a35      	ldr	r2, [pc, #212]	; (80170f4 <__kernel_rem_pio2f+0x31c>)
 8017020:	4437      	add	r7, r6
 8017022:	eba4 010a 	sub.w	r1, r4, sl
 8017026:	2900      	cmp	r1, #0
 8017028:	f280 80db 	bge.w	80171e2 <__kernel_rem_pio2f+0x40a>
 801702c:	9b62      	ldr	r3, [sp, #392]	; 0x188
 801702e:	2b03      	cmp	r3, #3
 8017030:	f200 80ff 	bhi.w	8017232 <__kernel_rem_pio2f+0x45a>
 8017034:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017038:	01200102 	.word	0x01200102
 801703c:	00d90120 	.word	0x00d90120
 8017040:	2502      	movs	r5, #2
 8017042:	e74a      	b.n	8016eda <__kernel_rem_pio2f+0x102>
 8017044:	ab08      	add	r3, sp, #32
 8017046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801704a:	f1b8 0f00 	cmp.w	r8, #0
 801704e:	d109      	bne.n	8017064 <__kernel_rem_pio2f+0x28c>
 8017050:	b12b      	cbz	r3, 801705e <__kernel_rem_pio2f+0x286>
 8017052:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8017056:	a908      	add	r1, sp, #32
 8017058:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801705c:	2301      	movs	r3, #1
 801705e:	3201      	adds	r2, #1
 8017060:	4698      	mov	r8, r3
 8017062:	e73e      	b.n	8016ee2 <__kernel_rem_pio2f+0x10a>
 8017064:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8017068:	a908      	add	r1, sp, #32
 801706a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801706e:	4643      	mov	r3, r8
 8017070:	e7f5      	b.n	801705e <__kernel_rem_pio2f+0x286>
 8017072:	1e7a      	subs	r2, r7, #1
 8017074:	ab08      	add	r3, sp, #32
 8017076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801707a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801707e:	a908      	add	r1, sp, #32
 8017080:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017084:	e738      	b.n	8016ef8 <__kernel_rem_pio2f+0x120>
 8017086:	1e7a      	subs	r2, r7, #1
 8017088:	ab08      	add	r3, sp, #32
 801708a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801708e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017092:	e7f4      	b.n	801707e <__kernel_rem_pio2f+0x2a6>
 8017094:	a908      	add	r1, sp, #32
 8017096:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801709a:	3b01      	subs	r3, #1
 801709c:	430a      	orrs	r2, r1
 801709e:	e7a0      	b.n	8016fe2 <__kernel_rem_pio2f+0x20a>
 80170a0:	3301      	adds	r3, #1
 80170a2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80170a6:	2900      	cmp	r1, #0
 80170a8:	d0fa      	beq.n	80170a0 <__kernel_rem_pio2f+0x2c8>
 80170aa:	f06f 0803 	mvn.w	r8, #3
 80170ae:	9a04      	ldr	r2, [sp, #16]
 80170b0:	1c7d      	adds	r5, r7, #1
 80170b2:	18bc      	adds	r4, r7, r2
 80170b4:	aa1c      	add	r2, sp, #112	; 0x70
 80170b6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80170ba:	441f      	add	r7, r3
 80170bc:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80170c0:	42af      	cmp	r7, r5
 80170c2:	f6ff aec8 	blt.w	8016e56 <__kernel_rem_pio2f+0x7e>
 80170c6:	9b06      	ldr	r3, [sp, #24]
 80170c8:	f04f 0a00 	mov.w	sl, #0
 80170cc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80170d0:	f7e9 fde4 	bl	8000c9c <__aeabi_i2f>
 80170d4:	f04f 0b00 	mov.w	fp, #0
 80170d8:	6020      	str	r0, [r4, #0]
 80170da:	9b03      	ldr	r3, [sp, #12]
 80170dc:	459a      	cmp	sl, r3
 80170de:	dd0b      	ble.n	80170f8 <__kernel_rem_pio2f+0x320>
 80170e0:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 80170e4:	3404      	adds	r4, #4
 80170e6:	3501      	adds	r5, #1
 80170e8:	e7ea      	b.n	80170c0 <__kernel_rem_pio2f+0x2e8>
 80170ea:	9a07      	ldr	r2, [sp, #28]
 80170ec:	2301      	movs	r3, #1
 80170ee:	e7d8      	b.n	80170a2 <__kernel_rem_pio2f+0x2ca>
 80170f0:	080199cc 	.word	0x080199cc
 80170f4:	080199a0 	.word	0x080199a0
 80170f8:	fb08 f30a 	mul.w	r3, r8, sl
 80170fc:	9a05      	ldr	r2, [sp, #20]
 80170fe:	58e0      	ldr	r0, [r4, r3]
 8017100:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8017104:	f7e9 fe1e 	bl	8000d44 <__aeabi_fmul>
 8017108:	4601      	mov	r1, r0
 801710a:	4658      	mov	r0, fp
 801710c:	f7e9 fd12 	bl	8000b34 <__addsf3>
 8017110:	f10a 0a01 	add.w	sl, sl, #1
 8017114:	4683      	mov	fp, r0
 8017116:	e7e0      	b.n	80170da <__kernel_rem_pio2f+0x302>
 8017118:	3c01      	subs	r4, #1
 801711a:	e767      	b.n	8016fec <__kernel_rem_pio2f+0x214>
 801711c:	4271      	negs	r1, r6
 801711e:	4620      	mov	r0, r4
 8017120:	f000 fb44 	bl	80177ac <scalbnf>
 8017124:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017128:	4604      	mov	r4, r0
 801712a:	f7e9 ffbd 	bl	80010a8 <__aeabi_fcmpge>
 801712e:	b1f8      	cbz	r0, 8017170 <__kernel_rem_pio2f+0x398>
 8017130:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8017134:	4620      	mov	r0, r4
 8017136:	f7e9 fe05 	bl	8000d44 <__aeabi_fmul>
 801713a:	f7e9 ffdf 	bl	80010fc <__aeabi_f2iz>
 801713e:	f7e9 fdad 	bl	8000c9c <__aeabi_i2f>
 8017142:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017146:	4680      	mov	r8, r0
 8017148:	f7e9 fdfc 	bl	8000d44 <__aeabi_fmul>
 801714c:	4601      	mov	r1, r0
 801714e:	4620      	mov	r0, r4
 8017150:	f7e9 fcee 	bl	8000b30 <__aeabi_fsub>
 8017154:	f7e9 ffd2 	bl	80010fc <__aeabi_f2iz>
 8017158:	ab08      	add	r3, sp, #32
 801715a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 801715e:	4640      	mov	r0, r8
 8017160:	f7e9 ffcc 	bl	80010fc <__aeabi_f2iz>
 8017164:	1c7c      	adds	r4, r7, #1
 8017166:	ab08      	add	r3, sp, #32
 8017168:	3608      	adds	r6, #8
 801716a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801716e:	e744      	b.n	8016ffa <__kernel_rem_pio2f+0x222>
 8017170:	4620      	mov	r0, r4
 8017172:	f7e9 ffc3 	bl	80010fc <__aeabi_f2iz>
 8017176:	ab08      	add	r3, sp, #32
 8017178:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 801717c:	463c      	mov	r4, r7
 801717e:	e73c      	b.n	8016ffa <__kernel_rem_pio2f+0x222>
 8017180:	ab08      	add	r3, sp, #32
 8017182:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017186:	f7e9 fd89 	bl	8000c9c <__aeabi_i2f>
 801718a:	4651      	mov	r1, sl
 801718c:	f7e9 fdda 	bl	8000d44 <__aeabi_fmul>
 8017190:	4631      	mov	r1, r6
 8017192:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8017196:	4650      	mov	r0, sl
 8017198:	f7e9 fdd4 	bl	8000d44 <__aeabi_fmul>
 801719c:	f108 38ff 	add.w	r8, r8, #4294967295
 80171a0:	4682      	mov	sl, r0
 80171a2:	e734      	b.n	801700e <__kernel_rem_pio2f+0x236>
 80171a4:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 80171a8:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80171ac:	9304      	str	r3, [sp, #16]
 80171ae:	9203      	str	r2, [sp, #12]
 80171b0:	f7e9 fdc8 	bl	8000d44 <__aeabi_fmul>
 80171b4:	4601      	mov	r1, r0
 80171b6:	4658      	mov	r0, fp
 80171b8:	f7e9 fcbc 	bl	8000b34 <__addsf3>
 80171bc:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80171c0:	4683      	mov	fp, r0
 80171c2:	f108 0801 	add.w	r8, r8, #1
 80171c6:	9902      	ldr	r1, [sp, #8]
 80171c8:	4588      	cmp	r8, r1
 80171ca:	dc01      	bgt.n	80171d0 <__kernel_rem_pio2f+0x3f8>
 80171cc:	45c2      	cmp	sl, r8
 80171ce:	dae9      	bge.n	80171a4 <__kernel_rem_pio2f+0x3cc>
 80171d0:	a958      	add	r1, sp, #352	; 0x160
 80171d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80171d6:	f841 bca0 	str.w	fp, [r1, #-160]
 80171da:	f10a 0a01 	add.w	sl, sl, #1
 80171de:	3f04      	subs	r7, #4
 80171e0:	e71f      	b.n	8017022 <__kernel_rem_pio2f+0x24a>
 80171e2:	469b      	mov	fp, r3
 80171e4:	f04f 0800 	mov.w	r8, #0
 80171e8:	e7ed      	b.n	80171c6 <__kernel_rem_pio2f+0x3ee>
 80171ea:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 80171ee:	4456      	add	r6, sl
 80171f0:	4637      	mov	r7, r6
 80171f2:	46a0      	mov	r8, r4
 80171f4:	f1b8 0f00 	cmp.w	r8, #0
 80171f8:	dc4a      	bgt.n	8017290 <__kernel_rem_pio2f+0x4b8>
 80171fa:	4627      	mov	r7, r4
 80171fc:	2f01      	cmp	r7, #1
 80171fe:	dc60      	bgt.n	80172c2 <__kernel_rem_pio2f+0x4ea>
 8017200:	2000      	movs	r0, #0
 8017202:	2c01      	cmp	r4, #1
 8017204:	dc74      	bgt.n	80172f0 <__kernel_rem_pio2f+0x518>
 8017206:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8017208:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801720a:	2d00      	cmp	r5, #0
 801720c:	d176      	bne.n	80172fc <__kernel_rem_pio2f+0x524>
 801720e:	9901      	ldr	r1, [sp, #4]
 8017210:	600a      	str	r2, [r1, #0]
 8017212:	460a      	mov	r2, r1
 8017214:	604b      	str	r3, [r1, #4]
 8017216:	6090      	str	r0, [r2, #8]
 8017218:	e00b      	b.n	8017232 <__kernel_rem_pio2f+0x45a>
 801721a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 801721e:	f7e9 fc89 	bl	8000b34 <__addsf3>
 8017222:	3c01      	subs	r4, #1
 8017224:	2c00      	cmp	r4, #0
 8017226:	daf8      	bge.n	801721a <__kernel_rem_pio2f+0x442>
 8017228:	b10d      	cbz	r5, 801722e <__kernel_rem_pio2f+0x456>
 801722a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801722e:	9b01      	ldr	r3, [sp, #4]
 8017230:	6018      	str	r0, [r3, #0]
 8017232:	f009 0007 	and.w	r0, r9, #7
 8017236:	b059      	add	sp, #356	; 0x164
 8017238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801723c:	2000      	movs	r0, #0
 801723e:	ae30      	add	r6, sp, #192	; 0xc0
 8017240:	e7f0      	b.n	8017224 <__kernel_rem_pio2f+0x44c>
 8017242:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8017246:	f7e9 fc75 	bl	8000b34 <__addsf3>
 801724a:	3e01      	subs	r6, #1
 801724c:	2e00      	cmp	r6, #0
 801724e:	daf8      	bge.n	8017242 <__kernel_rem_pio2f+0x46a>
 8017250:	b1b5      	cbz	r5, 8017280 <__kernel_rem_pio2f+0x4a8>
 8017252:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8017256:	9a01      	ldr	r2, [sp, #4]
 8017258:	af58      	add	r7, sp, #352	; 0x160
 801725a:	4601      	mov	r1, r0
 801725c:	6013      	str	r3, [r2, #0]
 801725e:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8017262:	f7e9 fc65 	bl	8000b30 <__aeabi_fsub>
 8017266:	2601      	movs	r6, #1
 8017268:	42b4      	cmp	r4, r6
 801726a:	da0b      	bge.n	8017284 <__kernel_rem_pio2f+0x4ac>
 801726c:	b10d      	cbz	r5, 8017272 <__kernel_rem_pio2f+0x49a>
 801726e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8017272:	9b01      	ldr	r3, [sp, #4]
 8017274:	6058      	str	r0, [r3, #4]
 8017276:	e7dc      	b.n	8017232 <__kernel_rem_pio2f+0x45a>
 8017278:	4626      	mov	r6, r4
 801727a:	2000      	movs	r0, #0
 801727c:	af30      	add	r7, sp, #192	; 0xc0
 801727e:	e7e5      	b.n	801724c <__kernel_rem_pio2f+0x474>
 8017280:	4603      	mov	r3, r0
 8017282:	e7e8      	b.n	8017256 <__kernel_rem_pio2f+0x47e>
 8017284:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8017288:	f7e9 fc54 	bl	8000b34 <__addsf3>
 801728c:	3601      	adds	r6, #1
 801728e:	e7eb      	b.n	8017268 <__kernel_rem_pio2f+0x490>
 8017290:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8017294:	f108 38ff 	add.w	r8, r8, #4294967295
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	4610      	mov	r0, r2
 801729c:	4619      	mov	r1, r3
 801729e:	9303      	str	r3, [sp, #12]
 80172a0:	9202      	str	r2, [sp, #8]
 80172a2:	f7e9 fc47 	bl	8000b34 <__addsf3>
 80172a6:	9a02      	ldr	r2, [sp, #8]
 80172a8:	4601      	mov	r1, r0
 80172aa:	4683      	mov	fp, r0
 80172ac:	4610      	mov	r0, r2
 80172ae:	f7e9 fc3f 	bl	8000b30 <__aeabi_fsub>
 80172b2:	9b03      	ldr	r3, [sp, #12]
 80172b4:	4619      	mov	r1, r3
 80172b6:	f7e9 fc3d 	bl	8000b34 <__addsf3>
 80172ba:	f8c7 b000 	str.w	fp, [r7]
 80172be:	6078      	str	r0, [r7, #4]
 80172c0:	e798      	b.n	80171f4 <__kernel_rem_pio2f+0x41c>
 80172c2:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 80172c6:	3f01      	subs	r7, #1
 80172c8:	f8d6 b004 	ldr.w	fp, [r6, #4]
 80172cc:	4618      	mov	r0, r3
 80172ce:	4659      	mov	r1, fp
 80172d0:	9302      	str	r3, [sp, #8]
 80172d2:	f7e9 fc2f 	bl	8000b34 <__addsf3>
 80172d6:	9b02      	ldr	r3, [sp, #8]
 80172d8:	4601      	mov	r1, r0
 80172da:	4680      	mov	r8, r0
 80172dc:	4618      	mov	r0, r3
 80172de:	f7e9 fc27 	bl	8000b30 <__aeabi_fsub>
 80172e2:	4659      	mov	r1, fp
 80172e4:	f7e9 fc26 	bl	8000b34 <__addsf3>
 80172e8:	f8c6 8000 	str.w	r8, [r6]
 80172ec:	6070      	str	r0, [r6, #4]
 80172ee:	e785      	b.n	80171fc <__kernel_rem_pio2f+0x424>
 80172f0:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 80172f4:	f7e9 fc1e 	bl	8000b34 <__addsf3>
 80172f8:	3c01      	subs	r4, #1
 80172fa:	e782      	b.n	8017202 <__kernel_rem_pio2f+0x42a>
 80172fc:	9901      	ldr	r1, [sp, #4]
 80172fe:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8017302:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017306:	600a      	str	r2, [r1, #0]
 8017308:	604b      	str	r3, [r1, #4]
 801730a:	460a      	mov	r2, r1
 801730c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8017310:	e781      	b.n	8017216 <__kernel_rem_pio2f+0x43e>
 8017312:	bf00      	nop

08017314 <__kernel_sinf>:
 8017314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017318:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801731c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8017320:	4604      	mov	r4, r0
 8017322:	460f      	mov	r7, r1
 8017324:	4691      	mov	r9, r2
 8017326:	da03      	bge.n	8017330 <__kernel_sinf+0x1c>
 8017328:	f7e9 fee8 	bl	80010fc <__aeabi_f2iz>
 801732c:	2800      	cmp	r0, #0
 801732e:	d035      	beq.n	801739c <__kernel_sinf+0x88>
 8017330:	4621      	mov	r1, r4
 8017332:	4620      	mov	r0, r4
 8017334:	f7e9 fd06 	bl	8000d44 <__aeabi_fmul>
 8017338:	4605      	mov	r5, r0
 801733a:	4601      	mov	r1, r0
 801733c:	4620      	mov	r0, r4
 801733e:	f7e9 fd01 	bl	8000d44 <__aeabi_fmul>
 8017342:	4929      	ldr	r1, [pc, #164]	; (80173e8 <__kernel_sinf+0xd4>)
 8017344:	4606      	mov	r6, r0
 8017346:	4628      	mov	r0, r5
 8017348:	f7e9 fcfc 	bl	8000d44 <__aeabi_fmul>
 801734c:	4927      	ldr	r1, [pc, #156]	; (80173ec <__kernel_sinf+0xd8>)
 801734e:	f7e9 fbef 	bl	8000b30 <__aeabi_fsub>
 8017352:	4629      	mov	r1, r5
 8017354:	f7e9 fcf6 	bl	8000d44 <__aeabi_fmul>
 8017358:	4925      	ldr	r1, [pc, #148]	; (80173f0 <__kernel_sinf+0xdc>)
 801735a:	f7e9 fbeb 	bl	8000b34 <__addsf3>
 801735e:	4629      	mov	r1, r5
 8017360:	f7e9 fcf0 	bl	8000d44 <__aeabi_fmul>
 8017364:	4923      	ldr	r1, [pc, #140]	; (80173f4 <__kernel_sinf+0xe0>)
 8017366:	f7e9 fbe3 	bl	8000b30 <__aeabi_fsub>
 801736a:	4629      	mov	r1, r5
 801736c:	f7e9 fcea 	bl	8000d44 <__aeabi_fmul>
 8017370:	4921      	ldr	r1, [pc, #132]	; (80173f8 <__kernel_sinf+0xe4>)
 8017372:	f7e9 fbdf 	bl	8000b34 <__addsf3>
 8017376:	4680      	mov	r8, r0
 8017378:	f1b9 0f00 	cmp.w	r9, #0
 801737c:	d111      	bne.n	80173a2 <__kernel_sinf+0x8e>
 801737e:	4601      	mov	r1, r0
 8017380:	4628      	mov	r0, r5
 8017382:	f7e9 fcdf 	bl	8000d44 <__aeabi_fmul>
 8017386:	491d      	ldr	r1, [pc, #116]	; (80173fc <__kernel_sinf+0xe8>)
 8017388:	f7e9 fbd2 	bl	8000b30 <__aeabi_fsub>
 801738c:	4631      	mov	r1, r6
 801738e:	f7e9 fcd9 	bl	8000d44 <__aeabi_fmul>
 8017392:	4601      	mov	r1, r0
 8017394:	4620      	mov	r0, r4
 8017396:	f7e9 fbcd 	bl	8000b34 <__addsf3>
 801739a:	4604      	mov	r4, r0
 801739c:	4620      	mov	r0, r4
 801739e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173a2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80173a6:	4638      	mov	r0, r7
 80173a8:	f7e9 fccc 	bl	8000d44 <__aeabi_fmul>
 80173ac:	4641      	mov	r1, r8
 80173ae:	4681      	mov	r9, r0
 80173b0:	4630      	mov	r0, r6
 80173b2:	f7e9 fcc7 	bl	8000d44 <__aeabi_fmul>
 80173b6:	4601      	mov	r1, r0
 80173b8:	4648      	mov	r0, r9
 80173ba:	f7e9 fbb9 	bl	8000b30 <__aeabi_fsub>
 80173be:	4629      	mov	r1, r5
 80173c0:	f7e9 fcc0 	bl	8000d44 <__aeabi_fmul>
 80173c4:	4639      	mov	r1, r7
 80173c6:	f7e9 fbb3 	bl	8000b30 <__aeabi_fsub>
 80173ca:	490c      	ldr	r1, [pc, #48]	; (80173fc <__kernel_sinf+0xe8>)
 80173cc:	4605      	mov	r5, r0
 80173ce:	4630      	mov	r0, r6
 80173d0:	f7e9 fcb8 	bl	8000d44 <__aeabi_fmul>
 80173d4:	4601      	mov	r1, r0
 80173d6:	4628      	mov	r0, r5
 80173d8:	f7e9 fbac 	bl	8000b34 <__addsf3>
 80173dc:	4601      	mov	r1, r0
 80173de:	4620      	mov	r0, r4
 80173e0:	f7e9 fba6 	bl	8000b30 <__aeabi_fsub>
 80173e4:	e7d9      	b.n	801739a <__kernel_sinf+0x86>
 80173e6:	bf00      	nop
 80173e8:	2f2ec9d3 	.word	0x2f2ec9d3
 80173ec:	32d72f34 	.word	0x32d72f34
 80173f0:	3638ef1b 	.word	0x3638ef1b
 80173f4:	39500d01 	.word	0x39500d01
 80173f8:	3c088889 	.word	0x3c088889
 80173fc:	3e2aaaab 	.word	0x3e2aaaab

08017400 <fabs>:
 8017400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017404:	4619      	mov	r1, r3
 8017406:	4770      	bx	lr

08017408 <finite>:
 8017408:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 801740c:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8017410:	0fc0      	lsrs	r0, r0, #31
 8017412:	4770      	bx	lr
 8017414:	0000      	movs	r0, r0
	...

08017418 <floor>:
 8017418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801741c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8017420:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8017424:	2e13      	cmp	r6, #19
 8017426:	4607      	mov	r7, r0
 8017428:	460b      	mov	r3, r1
 801742a:	460c      	mov	r4, r1
 801742c:	4605      	mov	r5, r0
 801742e:	dc35      	bgt.n	801749c <floor+0x84>
 8017430:	2e00      	cmp	r6, #0
 8017432:	da16      	bge.n	8017462 <floor+0x4a>
 8017434:	a336      	add	r3, pc, #216	; (adr r3, 8017510 <floor+0xf8>)
 8017436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801743a:	f7e8 fe97 	bl	800016c <__adddf3>
 801743e:	2200      	movs	r2, #0
 8017440:	2300      	movs	r3, #0
 8017442:	f7e9 fad9 	bl	80009f8 <__aeabi_dcmpgt>
 8017446:	b148      	cbz	r0, 801745c <floor+0x44>
 8017448:	2c00      	cmp	r4, #0
 801744a:	da5b      	bge.n	8017504 <floor+0xec>
 801744c:	2500      	movs	r5, #0
 801744e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017452:	4a31      	ldr	r2, [pc, #196]	; (8017518 <floor+0x100>)
 8017454:	433b      	orrs	r3, r7
 8017456:	42ab      	cmp	r3, r5
 8017458:	bf18      	it	ne
 801745a:	4614      	movne	r4, r2
 801745c:	4623      	mov	r3, r4
 801745e:	462f      	mov	r7, r5
 8017460:	e026      	b.n	80174b0 <floor+0x98>
 8017462:	4a2e      	ldr	r2, [pc, #184]	; (801751c <floor+0x104>)
 8017464:	fa42 f806 	asr.w	r8, r2, r6
 8017468:	ea01 0208 	and.w	r2, r1, r8
 801746c:	4302      	orrs	r2, r0
 801746e:	d01f      	beq.n	80174b0 <floor+0x98>
 8017470:	a327      	add	r3, pc, #156	; (adr r3, 8017510 <floor+0xf8>)
 8017472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017476:	f7e8 fe79 	bl	800016c <__adddf3>
 801747a:	2200      	movs	r2, #0
 801747c:	2300      	movs	r3, #0
 801747e:	f7e9 fabb 	bl	80009f8 <__aeabi_dcmpgt>
 8017482:	2800      	cmp	r0, #0
 8017484:	d0ea      	beq.n	801745c <floor+0x44>
 8017486:	2c00      	cmp	r4, #0
 8017488:	bfbe      	ittt	lt
 801748a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801748e:	fa43 f606 	asrlt.w	r6, r3, r6
 8017492:	19a4      	addlt	r4, r4, r6
 8017494:	ea24 0408 	bic.w	r4, r4, r8
 8017498:	2500      	movs	r5, #0
 801749a:	e7df      	b.n	801745c <floor+0x44>
 801749c:	2e33      	cmp	r6, #51	; 0x33
 801749e:	dd0b      	ble.n	80174b8 <floor+0xa0>
 80174a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80174a4:	d104      	bne.n	80174b0 <floor+0x98>
 80174a6:	4602      	mov	r2, r0
 80174a8:	f7e8 fe60 	bl	800016c <__adddf3>
 80174ac:	4607      	mov	r7, r0
 80174ae:	460b      	mov	r3, r1
 80174b0:	4638      	mov	r0, r7
 80174b2:	4619      	mov	r1, r3
 80174b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174b8:	f04f 32ff 	mov.w	r2, #4294967295
 80174bc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80174c0:	fa22 f808 	lsr.w	r8, r2, r8
 80174c4:	ea18 0f00 	tst.w	r8, r0
 80174c8:	d0f2      	beq.n	80174b0 <floor+0x98>
 80174ca:	a311      	add	r3, pc, #68	; (adr r3, 8017510 <floor+0xf8>)
 80174cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174d0:	f7e8 fe4c 	bl	800016c <__adddf3>
 80174d4:	2200      	movs	r2, #0
 80174d6:	2300      	movs	r3, #0
 80174d8:	f7e9 fa8e 	bl	80009f8 <__aeabi_dcmpgt>
 80174dc:	2800      	cmp	r0, #0
 80174de:	d0bd      	beq.n	801745c <floor+0x44>
 80174e0:	2c00      	cmp	r4, #0
 80174e2:	da02      	bge.n	80174ea <floor+0xd2>
 80174e4:	2e14      	cmp	r6, #20
 80174e6:	d103      	bne.n	80174f0 <floor+0xd8>
 80174e8:	3401      	adds	r4, #1
 80174ea:	ea25 0508 	bic.w	r5, r5, r8
 80174ee:	e7b5      	b.n	801745c <floor+0x44>
 80174f0:	2301      	movs	r3, #1
 80174f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80174f6:	fa03 f606 	lsl.w	r6, r3, r6
 80174fa:	4435      	add	r5, r6
 80174fc:	42bd      	cmp	r5, r7
 80174fe:	bf38      	it	cc
 8017500:	18e4      	addcc	r4, r4, r3
 8017502:	e7f2      	b.n	80174ea <floor+0xd2>
 8017504:	2500      	movs	r5, #0
 8017506:	462c      	mov	r4, r5
 8017508:	e7a8      	b.n	801745c <floor+0x44>
 801750a:	bf00      	nop
 801750c:	f3af 8000 	nop.w
 8017510:	8800759c 	.word	0x8800759c
 8017514:	7e37e43c 	.word	0x7e37e43c
 8017518:	bff00000 	.word	0xbff00000
 801751c:	000fffff 	.word	0x000fffff

08017520 <matherr>:
 8017520:	2000      	movs	r0, #0
 8017522:	4770      	bx	lr

08017524 <nan>:
 8017524:	2000      	movs	r0, #0
 8017526:	4901      	ldr	r1, [pc, #4]	; (801752c <nan+0x8>)
 8017528:	4770      	bx	lr
 801752a:	bf00      	nop
 801752c:	7ff80000 	.word	0x7ff80000

08017530 <rint>:
 8017530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017532:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017536:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 801753a:	f1bc 0f13 	cmp.w	ip, #19
 801753e:	4604      	mov	r4, r0
 8017540:	460d      	mov	r5, r1
 8017542:	460b      	mov	r3, r1
 8017544:	4606      	mov	r6, r0
 8017546:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 801754a:	dc5a      	bgt.n	8017602 <rint+0xd2>
 801754c:	f1bc 0f00 	cmp.w	ip, #0
 8017550:	da2b      	bge.n	80175aa <rint+0x7a>
 8017552:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017556:	4302      	orrs	r2, r0
 8017558:	d023      	beq.n	80175a2 <rint+0x72>
 801755a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801755e:	4302      	orrs	r2, r0
 8017560:	4256      	negs	r6, r2
 8017562:	4316      	orrs	r6, r2
 8017564:	0c4b      	lsrs	r3, r1, #17
 8017566:	0b36      	lsrs	r6, r6, #12
 8017568:	4934      	ldr	r1, [pc, #208]	; (801763c <rint+0x10c>)
 801756a:	045b      	lsls	r3, r3, #17
 801756c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8017570:	ea46 0503 	orr.w	r5, r6, r3
 8017574:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8017578:	4602      	mov	r2, r0
 801757a:	462b      	mov	r3, r5
 801757c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017580:	4620      	mov	r0, r4
 8017582:	4629      	mov	r1, r5
 8017584:	f7e8 fdf2 	bl	800016c <__adddf3>
 8017588:	e9cd 0100 	strd	r0, r1, [sp]
 801758c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017590:	462b      	mov	r3, r5
 8017592:	4622      	mov	r2, r4
 8017594:	f7e8 fde8 	bl	8000168 <__aeabi_dsub>
 8017598:	4604      	mov	r4, r0
 801759a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801759e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80175a2:	4620      	mov	r0, r4
 80175a4:	4629      	mov	r1, r5
 80175a6:	b003      	add	sp, #12
 80175a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175aa:	4a25      	ldr	r2, [pc, #148]	; (8017640 <rint+0x110>)
 80175ac:	fa42 f20c 	asr.w	r2, r2, ip
 80175b0:	4011      	ands	r1, r2
 80175b2:	4301      	orrs	r1, r0
 80175b4:	d0f5      	beq.n	80175a2 <rint+0x72>
 80175b6:	0852      	lsrs	r2, r2, #1
 80175b8:	ea05 0102 	and.w	r1, r5, r2
 80175bc:	ea50 0601 	orrs.w	r6, r0, r1
 80175c0:	d00c      	beq.n	80175dc <rint+0xac>
 80175c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80175c6:	f1bc 0f13 	cmp.w	ip, #19
 80175ca:	bf0c      	ite	eq
 80175cc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80175d0:	2600      	movne	r6, #0
 80175d2:	ea25 0202 	bic.w	r2, r5, r2
 80175d6:	fa43 f30c 	asr.w	r3, r3, ip
 80175da:	4313      	orrs	r3, r2
 80175dc:	4917      	ldr	r1, [pc, #92]	; (801763c <rint+0x10c>)
 80175de:	4632      	mov	r2, r6
 80175e0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80175e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80175e8:	4620      	mov	r0, r4
 80175ea:	4629      	mov	r1, r5
 80175ec:	f7e8 fdbe 	bl	800016c <__adddf3>
 80175f0:	e9cd 0100 	strd	r0, r1, [sp]
 80175f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80175f8:	4622      	mov	r2, r4
 80175fa:	462b      	mov	r3, r5
 80175fc:	f7e8 fdb4 	bl	8000168 <__aeabi_dsub>
 8017600:	e008      	b.n	8017614 <rint+0xe4>
 8017602:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8017606:	dd08      	ble.n	801761a <rint+0xea>
 8017608:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 801760c:	d1c9      	bne.n	80175a2 <rint+0x72>
 801760e:	4602      	mov	r2, r0
 8017610:	f7e8 fdac 	bl	800016c <__adddf3>
 8017614:	4604      	mov	r4, r0
 8017616:	460d      	mov	r5, r1
 8017618:	e7c3      	b.n	80175a2 <rint+0x72>
 801761a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 801761e:	f04f 32ff 	mov.w	r2, #4294967295
 8017622:	40ca      	lsrs	r2, r1
 8017624:	4210      	tst	r0, r2
 8017626:	d0bc      	beq.n	80175a2 <rint+0x72>
 8017628:	0852      	lsrs	r2, r2, #1
 801762a:	4210      	tst	r0, r2
 801762c:	bf1f      	itttt	ne
 801762e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8017632:	ea20 0202 	bicne.w	r2, r0, r2
 8017636:	410e      	asrne	r6, r1
 8017638:	4316      	orrne	r6, r2
 801763a:	e7cf      	b.n	80175dc <rint+0xac>
 801763c:	080199d8 	.word	0x080199d8
 8017640:	000fffff 	.word	0x000fffff
 8017644:	00000000 	.word	0x00000000

08017648 <scalbn>:
 8017648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801764a:	4616      	mov	r6, r2
 801764c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017650:	4604      	mov	r4, r0
 8017652:	460d      	mov	r5, r1
 8017654:	460b      	mov	r3, r1
 8017656:	b982      	cbnz	r2, 801767a <scalbn+0x32>
 8017658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801765c:	4303      	orrs	r3, r0
 801765e:	d034      	beq.n	80176ca <scalbn+0x82>
 8017660:	4b2d      	ldr	r3, [pc, #180]	; (8017718 <scalbn+0xd0>)
 8017662:	2200      	movs	r2, #0
 8017664:	f7e8 ff38 	bl	80004d8 <__aeabi_dmul>
 8017668:	4b2c      	ldr	r3, [pc, #176]	; (801771c <scalbn+0xd4>)
 801766a:	4604      	mov	r4, r0
 801766c:	429e      	cmp	r6, r3
 801766e:	460d      	mov	r5, r1
 8017670:	da0d      	bge.n	801768e <scalbn+0x46>
 8017672:	a325      	add	r3, pc, #148	; (adr r3, 8017708 <scalbn+0xc0>)
 8017674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017678:	e01c      	b.n	80176b4 <scalbn+0x6c>
 801767a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 801767e:	42ba      	cmp	r2, r7
 8017680:	d109      	bne.n	8017696 <scalbn+0x4e>
 8017682:	4602      	mov	r2, r0
 8017684:	f7e8 fd72 	bl	800016c <__adddf3>
 8017688:	4604      	mov	r4, r0
 801768a:	460d      	mov	r5, r1
 801768c:	e01d      	b.n	80176ca <scalbn+0x82>
 801768e:	460b      	mov	r3, r1
 8017690:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017694:	3a36      	subs	r2, #54	; 0x36
 8017696:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801769a:	4432      	add	r2, r6
 801769c:	428a      	cmp	r2, r1
 801769e:	dd0c      	ble.n	80176ba <scalbn+0x72>
 80176a0:	4622      	mov	r2, r4
 80176a2:	462b      	mov	r3, r5
 80176a4:	a11a      	add	r1, pc, #104	; (adr r1, 8017710 <scalbn+0xc8>)
 80176a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176aa:	f000 f8cb 	bl	8017844 <copysign>
 80176ae:	a318      	add	r3, pc, #96	; (adr r3, 8017710 <scalbn+0xc8>)
 80176b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b4:	f7e8 ff10 	bl	80004d8 <__aeabi_dmul>
 80176b8:	e7e6      	b.n	8017688 <scalbn+0x40>
 80176ba:	2a00      	cmp	r2, #0
 80176bc:	dd08      	ble.n	80176d0 <scalbn+0x88>
 80176be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80176c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80176c6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80176ca:	4620      	mov	r0, r4
 80176cc:	4629      	mov	r1, r5
 80176ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176d0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80176d4:	da0b      	bge.n	80176ee <scalbn+0xa6>
 80176d6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80176da:	429e      	cmp	r6, r3
 80176dc:	4622      	mov	r2, r4
 80176de:	462b      	mov	r3, r5
 80176e0:	dce0      	bgt.n	80176a4 <scalbn+0x5c>
 80176e2:	a109      	add	r1, pc, #36	; (adr r1, 8017708 <scalbn+0xc0>)
 80176e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176e8:	f000 f8ac 	bl	8017844 <copysign>
 80176ec:	e7c1      	b.n	8017672 <scalbn+0x2a>
 80176ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80176f2:	3236      	adds	r2, #54	; 0x36
 80176f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80176f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80176fc:	4620      	mov	r0, r4
 80176fe:	4629      	mov	r1, r5
 8017700:	2200      	movs	r2, #0
 8017702:	4b07      	ldr	r3, [pc, #28]	; (8017720 <scalbn+0xd8>)
 8017704:	e7d6      	b.n	80176b4 <scalbn+0x6c>
 8017706:	bf00      	nop
 8017708:	c2f8f359 	.word	0xc2f8f359
 801770c:	01a56e1f 	.word	0x01a56e1f
 8017710:	8800759c 	.word	0x8800759c
 8017714:	7e37e43c 	.word	0x7e37e43c
 8017718:	43500000 	.word	0x43500000
 801771c:	ffff3cb0 	.word	0xffff3cb0
 8017720:	3c900000 	.word	0x3c900000

08017724 <fabsf>:
 8017724:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017728:	4770      	bx	lr
	...

0801772c <floorf>:
 801772c:	b570      	push	{r4, r5, r6, lr}
 801772e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8017732:	0df5      	lsrs	r5, r6, #23
 8017734:	3d7f      	subs	r5, #127	; 0x7f
 8017736:	2d16      	cmp	r5, #22
 8017738:	4601      	mov	r1, r0
 801773a:	4604      	mov	r4, r0
 801773c:	dc26      	bgt.n	801778c <floorf+0x60>
 801773e:	2d00      	cmp	r5, #0
 8017740:	da0e      	bge.n	8017760 <floorf+0x34>
 8017742:	4917      	ldr	r1, [pc, #92]	; (80177a0 <floorf+0x74>)
 8017744:	f7e9 f9f6 	bl	8000b34 <__addsf3>
 8017748:	2100      	movs	r1, #0
 801774a:	f7e9 fcb7 	bl	80010bc <__aeabi_fcmpgt>
 801774e:	b128      	cbz	r0, 801775c <floorf+0x30>
 8017750:	2c00      	cmp	r4, #0
 8017752:	da23      	bge.n	801779c <floorf+0x70>
 8017754:	4b13      	ldr	r3, [pc, #76]	; (80177a4 <floorf+0x78>)
 8017756:	2e00      	cmp	r6, #0
 8017758:	bf18      	it	ne
 801775a:	461c      	movne	r4, r3
 801775c:	4621      	mov	r1, r4
 801775e:	e01b      	b.n	8017798 <floorf+0x6c>
 8017760:	4e11      	ldr	r6, [pc, #68]	; (80177a8 <floorf+0x7c>)
 8017762:	412e      	asrs	r6, r5
 8017764:	4230      	tst	r0, r6
 8017766:	d017      	beq.n	8017798 <floorf+0x6c>
 8017768:	490d      	ldr	r1, [pc, #52]	; (80177a0 <floorf+0x74>)
 801776a:	f7e9 f9e3 	bl	8000b34 <__addsf3>
 801776e:	2100      	movs	r1, #0
 8017770:	f7e9 fca4 	bl	80010bc <__aeabi_fcmpgt>
 8017774:	2800      	cmp	r0, #0
 8017776:	d0f1      	beq.n	801775c <floorf+0x30>
 8017778:	2c00      	cmp	r4, #0
 801777a:	bfbe      	ittt	lt
 801777c:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8017780:	fa43 f505 	asrlt.w	r5, r3, r5
 8017784:	1964      	addlt	r4, r4, r5
 8017786:	ea24 0406 	bic.w	r4, r4, r6
 801778a:	e7e7      	b.n	801775c <floorf+0x30>
 801778c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8017790:	d302      	bcc.n	8017798 <floorf+0x6c>
 8017792:	f7e9 f9cf 	bl	8000b34 <__addsf3>
 8017796:	4601      	mov	r1, r0
 8017798:	4608      	mov	r0, r1
 801779a:	bd70      	pop	{r4, r5, r6, pc}
 801779c:	2400      	movs	r4, #0
 801779e:	e7dd      	b.n	801775c <floorf+0x30>
 80177a0:	7149f2ca 	.word	0x7149f2ca
 80177a4:	bf800000 	.word	0xbf800000
 80177a8:	007fffff 	.word	0x007fffff

080177ac <scalbnf>:
 80177ac:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 80177b0:	b510      	push	{r4, lr}
 80177b2:	4602      	mov	r2, r0
 80177b4:	460c      	mov	r4, r1
 80177b6:	4601      	mov	r1, r0
 80177b8:	d027      	beq.n	801780a <scalbnf+0x5e>
 80177ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80177be:	d303      	bcc.n	80177c8 <scalbnf+0x1c>
 80177c0:	f7e9 f9b8 	bl	8000b34 <__addsf3>
 80177c4:	4602      	mov	r2, r0
 80177c6:	e020      	b.n	801780a <scalbnf+0x5e>
 80177c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80177cc:	d215      	bcs.n	80177fa <scalbnf+0x4e>
 80177ce:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80177d2:	f7e9 fab7 	bl	8000d44 <__aeabi_fmul>
 80177d6:	4b18      	ldr	r3, [pc, #96]	; (8017838 <scalbnf+0x8c>)
 80177d8:	4602      	mov	r2, r0
 80177da:	429c      	cmp	r4, r3
 80177dc:	db22      	blt.n	8017824 <scalbnf+0x78>
 80177de:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80177e2:	3b19      	subs	r3, #25
 80177e4:	4423      	add	r3, r4
 80177e6:	2bfe      	cmp	r3, #254	; 0xfe
 80177e8:	dd09      	ble.n	80177fe <scalbnf+0x52>
 80177ea:	4611      	mov	r1, r2
 80177ec:	4813      	ldr	r0, [pc, #76]	; (801783c <scalbnf+0x90>)
 80177ee:	f000 f832 	bl	8017856 <copysignf>
 80177f2:	4912      	ldr	r1, [pc, #72]	; (801783c <scalbnf+0x90>)
 80177f4:	f7e9 faa6 	bl	8000d44 <__aeabi_fmul>
 80177f8:	e7e4      	b.n	80177c4 <scalbnf+0x18>
 80177fa:	0ddb      	lsrs	r3, r3, #23
 80177fc:	e7f2      	b.n	80177e4 <scalbnf+0x38>
 80177fe:	2b00      	cmp	r3, #0
 8017800:	dd05      	ble.n	801780e <scalbnf+0x62>
 8017802:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8017806:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 801780a:	4610      	mov	r0, r2
 801780c:	bd10      	pop	{r4, pc}
 801780e:	f113 0f16 	cmn.w	r3, #22
 8017812:	da09      	bge.n	8017828 <scalbnf+0x7c>
 8017814:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017818:	429c      	cmp	r4, r3
 801781a:	4611      	mov	r1, r2
 801781c:	dce6      	bgt.n	80177ec <scalbnf+0x40>
 801781e:	4808      	ldr	r0, [pc, #32]	; (8017840 <scalbnf+0x94>)
 8017820:	f000 f819 	bl	8017856 <copysignf>
 8017824:	4906      	ldr	r1, [pc, #24]	; (8017840 <scalbnf+0x94>)
 8017826:	e7e5      	b.n	80177f4 <scalbnf+0x48>
 8017828:	3319      	adds	r3, #25
 801782a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 801782e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8017832:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8017836:	e7dd      	b.n	80177f4 <scalbnf+0x48>
 8017838:	ffff3cb0 	.word	0xffff3cb0
 801783c:	7149f2ca 	.word	0x7149f2ca
 8017840:	0da24260 	.word	0x0da24260

08017844 <copysign>:
 8017844:	b530      	push	{r4, r5, lr}
 8017846:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801784a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801784e:	ea42 0503 	orr.w	r5, r2, r3
 8017852:	4629      	mov	r1, r5
 8017854:	bd30      	pop	{r4, r5, pc}

08017856 <copysignf>:
 8017856:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801785a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801785e:	4308      	orrs	r0, r1
 8017860:	4770      	bx	lr

08017862 <abort>:
 8017862:	b508      	push	{r3, lr}
 8017864:	2006      	movs	r0, #6
 8017866:	f000 f97d 	bl	8017b64 <raise>
 801786a:	2001      	movs	r0, #1
 801786c:	f7ea fb71 	bl	8001f52 <_exit>

08017870 <__errno>:
 8017870:	4b01      	ldr	r3, [pc, #4]	; (8017878 <__errno+0x8>)
 8017872:	6818      	ldr	r0, [r3, #0]
 8017874:	4770      	bx	lr
 8017876:	bf00      	nop
 8017878:	20000728 	.word	0x20000728

0801787c <__libc_init_array>:
 801787c:	b570      	push	{r4, r5, r6, lr}
 801787e:	2500      	movs	r5, #0
 8017880:	4e0c      	ldr	r6, [pc, #48]	; (80178b4 <__libc_init_array+0x38>)
 8017882:	4c0d      	ldr	r4, [pc, #52]	; (80178b8 <__libc_init_array+0x3c>)
 8017884:	1ba4      	subs	r4, r4, r6
 8017886:	10a4      	asrs	r4, r4, #2
 8017888:	42a5      	cmp	r5, r4
 801788a:	d109      	bne.n	80178a0 <__libc_init_array+0x24>
 801788c:	f001 fa08 	bl	8018ca0 <_init>
 8017890:	2500      	movs	r5, #0
 8017892:	4e0a      	ldr	r6, [pc, #40]	; (80178bc <__libc_init_array+0x40>)
 8017894:	4c0a      	ldr	r4, [pc, #40]	; (80178c0 <__libc_init_array+0x44>)
 8017896:	1ba4      	subs	r4, r4, r6
 8017898:	10a4      	asrs	r4, r4, #2
 801789a:	42a5      	cmp	r5, r4
 801789c:	d105      	bne.n	80178aa <__libc_init_array+0x2e>
 801789e:	bd70      	pop	{r4, r5, r6, pc}
 80178a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80178a4:	4798      	blx	r3
 80178a6:	3501      	adds	r5, #1
 80178a8:	e7ee      	b.n	8017888 <__libc_init_array+0xc>
 80178aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80178ae:	4798      	blx	r3
 80178b0:	3501      	adds	r5, #1
 80178b2:	e7f2      	b.n	801789a <__libc_init_array+0x1e>
 80178b4:	08019b8c 	.word	0x08019b8c
 80178b8:	08019b8c 	.word	0x08019b8c
 80178bc:	08019b8c 	.word	0x08019b8c
 80178c0:	08019b98 	.word	0x08019b98

080178c4 <malloc>:
 80178c4:	4b02      	ldr	r3, [pc, #8]	; (80178d0 <malloc+0xc>)
 80178c6:	4601      	mov	r1, r0
 80178c8:	6818      	ldr	r0, [r3, #0]
 80178ca:	f000 b8a1 	b.w	8017a10 <_malloc_r>
 80178ce:	bf00      	nop
 80178d0:	20000728 	.word	0x20000728

080178d4 <free>:
 80178d4:	4b02      	ldr	r3, [pc, #8]	; (80178e0 <free+0xc>)
 80178d6:	4601      	mov	r1, r0
 80178d8:	6818      	ldr	r0, [r3, #0]
 80178da:	f000 b84d 	b.w	8017978 <_free_r>
 80178de:	bf00      	nop
 80178e0:	20000728 	.word	0x20000728

080178e4 <memchr>:
 80178e4:	b510      	push	{r4, lr}
 80178e6:	b2c9      	uxtb	r1, r1
 80178e8:	4402      	add	r2, r0
 80178ea:	4290      	cmp	r0, r2
 80178ec:	4603      	mov	r3, r0
 80178ee:	d101      	bne.n	80178f4 <memchr+0x10>
 80178f0:	2300      	movs	r3, #0
 80178f2:	e003      	b.n	80178fc <memchr+0x18>
 80178f4:	781c      	ldrb	r4, [r3, #0]
 80178f6:	3001      	adds	r0, #1
 80178f8:	428c      	cmp	r4, r1
 80178fa:	d1f6      	bne.n	80178ea <memchr+0x6>
 80178fc:	4618      	mov	r0, r3
 80178fe:	bd10      	pop	{r4, pc}

08017900 <memcmp>:
 8017900:	b530      	push	{r4, r5, lr}
 8017902:	2400      	movs	r4, #0
 8017904:	42a2      	cmp	r2, r4
 8017906:	d101      	bne.n	801790c <memcmp+0xc>
 8017908:	2000      	movs	r0, #0
 801790a:	e007      	b.n	801791c <memcmp+0x1c>
 801790c:	5d03      	ldrb	r3, [r0, r4]
 801790e:	3401      	adds	r4, #1
 8017910:	190d      	adds	r5, r1, r4
 8017912:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017916:	42ab      	cmp	r3, r5
 8017918:	d0f4      	beq.n	8017904 <memcmp+0x4>
 801791a:	1b58      	subs	r0, r3, r5
 801791c:	bd30      	pop	{r4, r5, pc}

0801791e <memcpy>:
 801791e:	b510      	push	{r4, lr}
 8017920:	1e43      	subs	r3, r0, #1
 8017922:	440a      	add	r2, r1
 8017924:	4291      	cmp	r1, r2
 8017926:	d100      	bne.n	801792a <memcpy+0xc>
 8017928:	bd10      	pop	{r4, pc}
 801792a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801792e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017932:	e7f7      	b.n	8017924 <memcpy+0x6>

08017934 <memmove>:
 8017934:	4288      	cmp	r0, r1
 8017936:	b510      	push	{r4, lr}
 8017938:	eb01 0302 	add.w	r3, r1, r2
 801793c:	d807      	bhi.n	801794e <memmove+0x1a>
 801793e:	1e42      	subs	r2, r0, #1
 8017940:	4299      	cmp	r1, r3
 8017942:	d00a      	beq.n	801795a <memmove+0x26>
 8017944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017948:	f802 4f01 	strb.w	r4, [r2, #1]!
 801794c:	e7f8      	b.n	8017940 <memmove+0xc>
 801794e:	4283      	cmp	r3, r0
 8017950:	d9f5      	bls.n	801793e <memmove+0xa>
 8017952:	1881      	adds	r1, r0, r2
 8017954:	1ad2      	subs	r2, r2, r3
 8017956:	42d3      	cmn	r3, r2
 8017958:	d100      	bne.n	801795c <memmove+0x28>
 801795a:	bd10      	pop	{r4, pc}
 801795c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017960:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017964:	e7f7      	b.n	8017956 <memmove+0x22>

08017966 <memset>:
 8017966:	4603      	mov	r3, r0
 8017968:	4402      	add	r2, r0
 801796a:	4293      	cmp	r3, r2
 801796c:	d100      	bne.n	8017970 <memset+0xa>
 801796e:	4770      	bx	lr
 8017970:	f803 1b01 	strb.w	r1, [r3], #1
 8017974:	e7f9      	b.n	801796a <memset+0x4>
	...

08017978 <_free_r>:
 8017978:	b538      	push	{r3, r4, r5, lr}
 801797a:	4605      	mov	r5, r0
 801797c:	2900      	cmp	r1, #0
 801797e:	d043      	beq.n	8017a08 <_free_r+0x90>
 8017980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017984:	1f0c      	subs	r4, r1, #4
 8017986:	2b00      	cmp	r3, #0
 8017988:	bfb8      	it	lt
 801798a:	18e4      	addlt	r4, r4, r3
 801798c:	f000 fab1 	bl	8017ef2 <__malloc_lock>
 8017990:	4a1e      	ldr	r2, [pc, #120]	; (8017a0c <_free_r+0x94>)
 8017992:	6813      	ldr	r3, [r2, #0]
 8017994:	4610      	mov	r0, r2
 8017996:	b933      	cbnz	r3, 80179a6 <_free_r+0x2e>
 8017998:	6063      	str	r3, [r4, #4]
 801799a:	6014      	str	r4, [r2, #0]
 801799c:	4628      	mov	r0, r5
 801799e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179a2:	f000 baa7 	b.w	8017ef4 <__malloc_unlock>
 80179a6:	42a3      	cmp	r3, r4
 80179a8:	d90b      	bls.n	80179c2 <_free_r+0x4a>
 80179aa:	6821      	ldr	r1, [r4, #0]
 80179ac:	1862      	adds	r2, r4, r1
 80179ae:	4293      	cmp	r3, r2
 80179b0:	bf01      	itttt	eq
 80179b2:	681a      	ldreq	r2, [r3, #0]
 80179b4:	685b      	ldreq	r3, [r3, #4]
 80179b6:	1852      	addeq	r2, r2, r1
 80179b8:	6022      	streq	r2, [r4, #0]
 80179ba:	6063      	str	r3, [r4, #4]
 80179bc:	6004      	str	r4, [r0, #0]
 80179be:	e7ed      	b.n	801799c <_free_r+0x24>
 80179c0:	4613      	mov	r3, r2
 80179c2:	685a      	ldr	r2, [r3, #4]
 80179c4:	b10a      	cbz	r2, 80179ca <_free_r+0x52>
 80179c6:	42a2      	cmp	r2, r4
 80179c8:	d9fa      	bls.n	80179c0 <_free_r+0x48>
 80179ca:	6819      	ldr	r1, [r3, #0]
 80179cc:	1858      	adds	r0, r3, r1
 80179ce:	42a0      	cmp	r0, r4
 80179d0:	d10b      	bne.n	80179ea <_free_r+0x72>
 80179d2:	6820      	ldr	r0, [r4, #0]
 80179d4:	4401      	add	r1, r0
 80179d6:	1858      	adds	r0, r3, r1
 80179d8:	4282      	cmp	r2, r0
 80179da:	6019      	str	r1, [r3, #0]
 80179dc:	d1de      	bne.n	801799c <_free_r+0x24>
 80179de:	6810      	ldr	r0, [r2, #0]
 80179e0:	6852      	ldr	r2, [r2, #4]
 80179e2:	4401      	add	r1, r0
 80179e4:	6019      	str	r1, [r3, #0]
 80179e6:	605a      	str	r2, [r3, #4]
 80179e8:	e7d8      	b.n	801799c <_free_r+0x24>
 80179ea:	d902      	bls.n	80179f2 <_free_r+0x7a>
 80179ec:	230c      	movs	r3, #12
 80179ee:	602b      	str	r3, [r5, #0]
 80179f0:	e7d4      	b.n	801799c <_free_r+0x24>
 80179f2:	6820      	ldr	r0, [r4, #0]
 80179f4:	1821      	adds	r1, r4, r0
 80179f6:	428a      	cmp	r2, r1
 80179f8:	bf01      	itttt	eq
 80179fa:	6811      	ldreq	r1, [r2, #0]
 80179fc:	6852      	ldreq	r2, [r2, #4]
 80179fe:	1809      	addeq	r1, r1, r0
 8017a00:	6021      	streq	r1, [r4, #0]
 8017a02:	6062      	str	r2, [r4, #4]
 8017a04:	605c      	str	r4, [r3, #4]
 8017a06:	e7c9      	b.n	801799c <_free_r+0x24>
 8017a08:	bd38      	pop	{r3, r4, r5, pc}
 8017a0a:	bf00      	nop
 8017a0c:	20001508 	.word	0x20001508

08017a10 <_malloc_r>:
 8017a10:	b570      	push	{r4, r5, r6, lr}
 8017a12:	1ccd      	adds	r5, r1, #3
 8017a14:	f025 0503 	bic.w	r5, r5, #3
 8017a18:	3508      	adds	r5, #8
 8017a1a:	2d0c      	cmp	r5, #12
 8017a1c:	bf38      	it	cc
 8017a1e:	250c      	movcc	r5, #12
 8017a20:	2d00      	cmp	r5, #0
 8017a22:	4606      	mov	r6, r0
 8017a24:	db01      	blt.n	8017a2a <_malloc_r+0x1a>
 8017a26:	42a9      	cmp	r1, r5
 8017a28:	d903      	bls.n	8017a32 <_malloc_r+0x22>
 8017a2a:	230c      	movs	r3, #12
 8017a2c:	6033      	str	r3, [r6, #0]
 8017a2e:	2000      	movs	r0, #0
 8017a30:	bd70      	pop	{r4, r5, r6, pc}
 8017a32:	f000 fa5e 	bl	8017ef2 <__malloc_lock>
 8017a36:	4a21      	ldr	r2, [pc, #132]	; (8017abc <_malloc_r+0xac>)
 8017a38:	6814      	ldr	r4, [r2, #0]
 8017a3a:	4621      	mov	r1, r4
 8017a3c:	b991      	cbnz	r1, 8017a64 <_malloc_r+0x54>
 8017a3e:	4c20      	ldr	r4, [pc, #128]	; (8017ac0 <_malloc_r+0xb0>)
 8017a40:	6823      	ldr	r3, [r4, #0]
 8017a42:	b91b      	cbnz	r3, 8017a4c <_malloc_r+0x3c>
 8017a44:	4630      	mov	r0, r6
 8017a46:	f000 f855 	bl	8017af4 <_sbrk_r>
 8017a4a:	6020      	str	r0, [r4, #0]
 8017a4c:	4629      	mov	r1, r5
 8017a4e:	4630      	mov	r0, r6
 8017a50:	f000 f850 	bl	8017af4 <_sbrk_r>
 8017a54:	1c43      	adds	r3, r0, #1
 8017a56:	d124      	bne.n	8017aa2 <_malloc_r+0x92>
 8017a58:	230c      	movs	r3, #12
 8017a5a:	4630      	mov	r0, r6
 8017a5c:	6033      	str	r3, [r6, #0]
 8017a5e:	f000 fa49 	bl	8017ef4 <__malloc_unlock>
 8017a62:	e7e4      	b.n	8017a2e <_malloc_r+0x1e>
 8017a64:	680b      	ldr	r3, [r1, #0]
 8017a66:	1b5b      	subs	r3, r3, r5
 8017a68:	d418      	bmi.n	8017a9c <_malloc_r+0x8c>
 8017a6a:	2b0b      	cmp	r3, #11
 8017a6c:	d90f      	bls.n	8017a8e <_malloc_r+0x7e>
 8017a6e:	600b      	str	r3, [r1, #0]
 8017a70:	18cc      	adds	r4, r1, r3
 8017a72:	50cd      	str	r5, [r1, r3]
 8017a74:	4630      	mov	r0, r6
 8017a76:	f000 fa3d 	bl	8017ef4 <__malloc_unlock>
 8017a7a:	f104 000b 	add.w	r0, r4, #11
 8017a7e:	1d23      	adds	r3, r4, #4
 8017a80:	f020 0007 	bic.w	r0, r0, #7
 8017a84:	1ac3      	subs	r3, r0, r3
 8017a86:	d0d3      	beq.n	8017a30 <_malloc_r+0x20>
 8017a88:	425a      	negs	r2, r3
 8017a8a:	50e2      	str	r2, [r4, r3]
 8017a8c:	e7d0      	b.n	8017a30 <_malloc_r+0x20>
 8017a8e:	684b      	ldr	r3, [r1, #4]
 8017a90:	428c      	cmp	r4, r1
 8017a92:	bf16      	itet	ne
 8017a94:	6063      	strne	r3, [r4, #4]
 8017a96:	6013      	streq	r3, [r2, #0]
 8017a98:	460c      	movne	r4, r1
 8017a9a:	e7eb      	b.n	8017a74 <_malloc_r+0x64>
 8017a9c:	460c      	mov	r4, r1
 8017a9e:	6849      	ldr	r1, [r1, #4]
 8017aa0:	e7cc      	b.n	8017a3c <_malloc_r+0x2c>
 8017aa2:	1cc4      	adds	r4, r0, #3
 8017aa4:	f024 0403 	bic.w	r4, r4, #3
 8017aa8:	42a0      	cmp	r0, r4
 8017aaa:	d005      	beq.n	8017ab8 <_malloc_r+0xa8>
 8017aac:	1a21      	subs	r1, r4, r0
 8017aae:	4630      	mov	r0, r6
 8017ab0:	f000 f820 	bl	8017af4 <_sbrk_r>
 8017ab4:	3001      	adds	r0, #1
 8017ab6:	d0cf      	beq.n	8017a58 <_malloc_r+0x48>
 8017ab8:	6025      	str	r5, [r4, #0]
 8017aba:	e7db      	b.n	8017a74 <_malloc_r+0x64>
 8017abc:	20001508 	.word	0x20001508
 8017ac0:	2000150c 	.word	0x2000150c

08017ac4 <iprintf>:
 8017ac4:	b40f      	push	{r0, r1, r2, r3}
 8017ac6:	4b0a      	ldr	r3, [pc, #40]	; (8017af0 <iprintf+0x2c>)
 8017ac8:	b513      	push	{r0, r1, r4, lr}
 8017aca:	681c      	ldr	r4, [r3, #0]
 8017acc:	b124      	cbz	r4, 8017ad8 <iprintf+0x14>
 8017ace:	69a3      	ldr	r3, [r4, #24]
 8017ad0:	b913      	cbnz	r3, 8017ad8 <iprintf+0x14>
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f000 f96e 	bl	8017db4 <__sinit>
 8017ad8:	ab05      	add	r3, sp, #20
 8017ada:	9a04      	ldr	r2, [sp, #16]
 8017adc:	68a1      	ldr	r1, [r4, #8]
 8017ade:	4620      	mov	r0, r4
 8017ae0:	9301      	str	r3, [sp, #4]
 8017ae2:	f000 fb83 	bl	80181ec <_vfiprintf_r>
 8017ae6:	b002      	add	sp, #8
 8017ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017aec:	b004      	add	sp, #16
 8017aee:	4770      	bx	lr
 8017af0:	20000728 	.word	0x20000728

08017af4 <_sbrk_r>:
 8017af4:	b538      	push	{r3, r4, r5, lr}
 8017af6:	2300      	movs	r3, #0
 8017af8:	4c05      	ldr	r4, [pc, #20]	; (8017b10 <_sbrk_r+0x1c>)
 8017afa:	4605      	mov	r5, r0
 8017afc:	4608      	mov	r0, r1
 8017afe:	6023      	str	r3, [r4, #0]
 8017b00:	f7ea fa9a 	bl	8002038 <_sbrk>
 8017b04:	1c43      	adds	r3, r0, #1
 8017b06:	d102      	bne.n	8017b0e <_sbrk_r+0x1a>
 8017b08:	6823      	ldr	r3, [r4, #0]
 8017b0a:	b103      	cbz	r3, 8017b0e <_sbrk_r+0x1a>
 8017b0c:	602b      	str	r3, [r5, #0]
 8017b0e:	bd38      	pop	{r3, r4, r5, pc}
 8017b10:	200021a0 	.word	0x200021a0

08017b14 <_raise_r>:
 8017b14:	291f      	cmp	r1, #31
 8017b16:	b538      	push	{r3, r4, r5, lr}
 8017b18:	4604      	mov	r4, r0
 8017b1a:	460d      	mov	r5, r1
 8017b1c:	d904      	bls.n	8017b28 <_raise_r+0x14>
 8017b1e:	2316      	movs	r3, #22
 8017b20:	6003      	str	r3, [r0, #0]
 8017b22:	f04f 30ff 	mov.w	r0, #4294967295
 8017b26:	bd38      	pop	{r3, r4, r5, pc}
 8017b28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017b2a:	b112      	cbz	r2, 8017b32 <_raise_r+0x1e>
 8017b2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017b30:	b94b      	cbnz	r3, 8017b46 <_raise_r+0x32>
 8017b32:	4620      	mov	r0, r4
 8017b34:	f000 f830 	bl	8017b98 <_getpid_r>
 8017b38:	462a      	mov	r2, r5
 8017b3a:	4601      	mov	r1, r0
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b42:	f000 b817 	b.w	8017b74 <_kill_r>
 8017b46:	2b01      	cmp	r3, #1
 8017b48:	d00a      	beq.n	8017b60 <_raise_r+0x4c>
 8017b4a:	1c59      	adds	r1, r3, #1
 8017b4c:	d103      	bne.n	8017b56 <_raise_r+0x42>
 8017b4e:	2316      	movs	r3, #22
 8017b50:	6003      	str	r3, [r0, #0]
 8017b52:	2001      	movs	r0, #1
 8017b54:	e7e7      	b.n	8017b26 <_raise_r+0x12>
 8017b56:	2400      	movs	r4, #0
 8017b58:	4628      	mov	r0, r5
 8017b5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017b5e:	4798      	blx	r3
 8017b60:	2000      	movs	r0, #0
 8017b62:	e7e0      	b.n	8017b26 <_raise_r+0x12>

08017b64 <raise>:
 8017b64:	4b02      	ldr	r3, [pc, #8]	; (8017b70 <raise+0xc>)
 8017b66:	4601      	mov	r1, r0
 8017b68:	6818      	ldr	r0, [r3, #0]
 8017b6a:	f7ff bfd3 	b.w	8017b14 <_raise_r>
 8017b6e:	bf00      	nop
 8017b70:	20000728 	.word	0x20000728

08017b74 <_kill_r>:
 8017b74:	b538      	push	{r3, r4, r5, lr}
 8017b76:	2300      	movs	r3, #0
 8017b78:	4c06      	ldr	r4, [pc, #24]	; (8017b94 <_kill_r+0x20>)
 8017b7a:	4605      	mov	r5, r0
 8017b7c:	4608      	mov	r0, r1
 8017b7e:	4611      	mov	r1, r2
 8017b80:	6023      	str	r3, [r4, #0]
 8017b82:	f7ea f9d6 	bl	8001f32 <_kill>
 8017b86:	1c43      	adds	r3, r0, #1
 8017b88:	d102      	bne.n	8017b90 <_kill_r+0x1c>
 8017b8a:	6823      	ldr	r3, [r4, #0]
 8017b8c:	b103      	cbz	r3, 8017b90 <_kill_r+0x1c>
 8017b8e:	602b      	str	r3, [r5, #0]
 8017b90:	bd38      	pop	{r3, r4, r5, pc}
 8017b92:	bf00      	nop
 8017b94:	200021a0 	.word	0x200021a0

08017b98 <_getpid_r>:
 8017b98:	f7ea b9c4 	b.w	8001f24 <_getpid>

08017b9c <_strtol_l.isra.0>:
 8017b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ba0:	4680      	mov	r8, r0
 8017ba2:	4689      	mov	r9, r1
 8017ba4:	4692      	mov	sl, r2
 8017ba6:	461e      	mov	r6, r3
 8017ba8:	460f      	mov	r7, r1
 8017baa:	463d      	mov	r5, r7
 8017bac:	9808      	ldr	r0, [sp, #32]
 8017bae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017bb2:	f000 f989 	bl	8017ec8 <__locale_ctype_ptr_l>
 8017bb6:	4420      	add	r0, r4
 8017bb8:	7843      	ldrb	r3, [r0, #1]
 8017bba:	f013 0308 	ands.w	r3, r3, #8
 8017bbe:	d132      	bne.n	8017c26 <_strtol_l.isra.0+0x8a>
 8017bc0:	2c2d      	cmp	r4, #45	; 0x2d
 8017bc2:	d132      	bne.n	8017c2a <_strtol_l.isra.0+0x8e>
 8017bc4:	2201      	movs	r2, #1
 8017bc6:	787c      	ldrb	r4, [r7, #1]
 8017bc8:	1cbd      	adds	r5, r7, #2
 8017bca:	2e00      	cmp	r6, #0
 8017bcc:	d05d      	beq.n	8017c8a <_strtol_l.isra.0+0xee>
 8017bce:	2e10      	cmp	r6, #16
 8017bd0:	d109      	bne.n	8017be6 <_strtol_l.isra.0+0x4a>
 8017bd2:	2c30      	cmp	r4, #48	; 0x30
 8017bd4:	d107      	bne.n	8017be6 <_strtol_l.isra.0+0x4a>
 8017bd6:	782b      	ldrb	r3, [r5, #0]
 8017bd8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017bdc:	2b58      	cmp	r3, #88	; 0x58
 8017bde:	d14f      	bne.n	8017c80 <_strtol_l.isra.0+0xe4>
 8017be0:	2610      	movs	r6, #16
 8017be2:	786c      	ldrb	r4, [r5, #1]
 8017be4:	3502      	adds	r5, #2
 8017be6:	2a00      	cmp	r2, #0
 8017be8:	bf14      	ite	ne
 8017bea:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017bee:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017bf2:	2700      	movs	r7, #0
 8017bf4:	fbb1 fcf6 	udiv	ip, r1, r6
 8017bf8:	4638      	mov	r0, r7
 8017bfa:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017bfe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017c02:	2b09      	cmp	r3, #9
 8017c04:	d817      	bhi.n	8017c36 <_strtol_l.isra.0+0x9a>
 8017c06:	461c      	mov	r4, r3
 8017c08:	42a6      	cmp	r6, r4
 8017c0a:	dd23      	ble.n	8017c54 <_strtol_l.isra.0+0xb8>
 8017c0c:	1c7b      	adds	r3, r7, #1
 8017c0e:	d007      	beq.n	8017c20 <_strtol_l.isra.0+0x84>
 8017c10:	4584      	cmp	ip, r0
 8017c12:	d31c      	bcc.n	8017c4e <_strtol_l.isra.0+0xb2>
 8017c14:	d101      	bne.n	8017c1a <_strtol_l.isra.0+0x7e>
 8017c16:	45a6      	cmp	lr, r4
 8017c18:	db19      	blt.n	8017c4e <_strtol_l.isra.0+0xb2>
 8017c1a:	2701      	movs	r7, #1
 8017c1c:	fb00 4006 	mla	r0, r0, r6, r4
 8017c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c24:	e7eb      	b.n	8017bfe <_strtol_l.isra.0+0x62>
 8017c26:	462f      	mov	r7, r5
 8017c28:	e7bf      	b.n	8017baa <_strtol_l.isra.0+0xe>
 8017c2a:	2c2b      	cmp	r4, #43	; 0x2b
 8017c2c:	bf04      	itt	eq
 8017c2e:	1cbd      	addeq	r5, r7, #2
 8017c30:	787c      	ldrbeq	r4, [r7, #1]
 8017c32:	461a      	mov	r2, r3
 8017c34:	e7c9      	b.n	8017bca <_strtol_l.isra.0+0x2e>
 8017c36:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017c3a:	2b19      	cmp	r3, #25
 8017c3c:	d801      	bhi.n	8017c42 <_strtol_l.isra.0+0xa6>
 8017c3e:	3c37      	subs	r4, #55	; 0x37
 8017c40:	e7e2      	b.n	8017c08 <_strtol_l.isra.0+0x6c>
 8017c42:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017c46:	2b19      	cmp	r3, #25
 8017c48:	d804      	bhi.n	8017c54 <_strtol_l.isra.0+0xb8>
 8017c4a:	3c57      	subs	r4, #87	; 0x57
 8017c4c:	e7dc      	b.n	8017c08 <_strtol_l.isra.0+0x6c>
 8017c4e:	f04f 37ff 	mov.w	r7, #4294967295
 8017c52:	e7e5      	b.n	8017c20 <_strtol_l.isra.0+0x84>
 8017c54:	1c7b      	adds	r3, r7, #1
 8017c56:	d108      	bne.n	8017c6a <_strtol_l.isra.0+0xce>
 8017c58:	2322      	movs	r3, #34	; 0x22
 8017c5a:	4608      	mov	r0, r1
 8017c5c:	f8c8 3000 	str.w	r3, [r8]
 8017c60:	f1ba 0f00 	cmp.w	sl, #0
 8017c64:	d107      	bne.n	8017c76 <_strtol_l.isra.0+0xda>
 8017c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c6a:	b102      	cbz	r2, 8017c6e <_strtol_l.isra.0+0xd2>
 8017c6c:	4240      	negs	r0, r0
 8017c6e:	f1ba 0f00 	cmp.w	sl, #0
 8017c72:	d0f8      	beq.n	8017c66 <_strtol_l.isra.0+0xca>
 8017c74:	b10f      	cbz	r7, 8017c7a <_strtol_l.isra.0+0xde>
 8017c76:	f105 39ff 	add.w	r9, r5, #4294967295
 8017c7a:	f8ca 9000 	str.w	r9, [sl]
 8017c7e:	e7f2      	b.n	8017c66 <_strtol_l.isra.0+0xca>
 8017c80:	2430      	movs	r4, #48	; 0x30
 8017c82:	2e00      	cmp	r6, #0
 8017c84:	d1af      	bne.n	8017be6 <_strtol_l.isra.0+0x4a>
 8017c86:	2608      	movs	r6, #8
 8017c88:	e7ad      	b.n	8017be6 <_strtol_l.isra.0+0x4a>
 8017c8a:	2c30      	cmp	r4, #48	; 0x30
 8017c8c:	d0a3      	beq.n	8017bd6 <_strtol_l.isra.0+0x3a>
 8017c8e:	260a      	movs	r6, #10
 8017c90:	e7a9      	b.n	8017be6 <_strtol_l.isra.0+0x4a>
	...

08017c94 <strtol>:
 8017c94:	4b08      	ldr	r3, [pc, #32]	; (8017cb8 <strtol+0x24>)
 8017c96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c98:	681c      	ldr	r4, [r3, #0]
 8017c9a:	4d08      	ldr	r5, [pc, #32]	; (8017cbc <strtol+0x28>)
 8017c9c:	6a23      	ldr	r3, [r4, #32]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	bf08      	it	eq
 8017ca2:	462b      	moveq	r3, r5
 8017ca4:	9300      	str	r3, [sp, #0]
 8017ca6:	4613      	mov	r3, r2
 8017ca8:	460a      	mov	r2, r1
 8017caa:	4601      	mov	r1, r0
 8017cac:	4620      	mov	r0, r4
 8017cae:	f7ff ff75 	bl	8017b9c <_strtol_l.isra.0>
 8017cb2:	b003      	add	sp, #12
 8017cb4:	bd30      	pop	{r4, r5, pc}
 8017cb6:	bf00      	nop
 8017cb8:	20000728 	.word	0x20000728
 8017cbc:	2000078c 	.word	0x2000078c

08017cc0 <_vsniprintf_r>:
 8017cc0:	b530      	push	{r4, r5, lr}
 8017cc2:	1e14      	subs	r4, r2, #0
 8017cc4:	4605      	mov	r5, r0
 8017cc6:	b09b      	sub	sp, #108	; 0x6c
 8017cc8:	4618      	mov	r0, r3
 8017cca:	da05      	bge.n	8017cd8 <_vsniprintf_r+0x18>
 8017ccc:	238b      	movs	r3, #139	; 0x8b
 8017cce:	f04f 30ff 	mov.w	r0, #4294967295
 8017cd2:	602b      	str	r3, [r5, #0]
 8017cd4:	b01b      	add	sp, #108	; 0x6c
 8017cd6:	bd30      	pop	{r4, r5, pc}
 8017cd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017cdc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017ce0:	bf0c      	ite	eq
 8017ce2:	4623      	moveq	r3, r4
 8017ce4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017ce8:	9302      	str	r3, [sp, #8]
 8017cea:	9305      	str	r3, [sp, #20]
 8017cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cf0:	9100      	str	r1, [sp, #0]
 8017cf2:	9104      	str	r1, [sp, #16]
 8017cf4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017cf8:	4602      	mov	r2, r0
 8017cfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017cfc:	4669      	mov	r1, sp
 8017cfe:	4628      	mov	r0, r5
 8017d00:	f000 f954 	bl	8017fac <_svfiprintf_r>
 8017d04:	1c43      	adds	r3, r0, #1
 8017d06:	bfbc      	itt	lt
 8017d08:	238b      	movlt	r3, #139	; 0x8b
 8017d0a:	602b      	strlt	r3, [r5, #0]
 8017d0c:	2c00      	cmp	r4, #0
 8017d0e:	d0e1      	beq.n	8017cd4 <_vsniprintf_r+0x14>
 8017d10:	2200      	movs	r2, #0
 8017d12:	9b00      	ldr	r3, [sp, #0]
 8017d14:	701a      	strb	r2, [r3, #0]
 8017d16:	e7dd      	b.n	8017cd4 <_vsniprintf_r+0x14>

08017d18 <vsniprintf>:
 8017d18:	b507      	push	{r0, r1, r2, lr}
 8017d1a:	9300      	str	r3, [sp, #0]
 8017d1c:	4613      	mov	r3, r2
 8017d1e:	460a      	mov	r2, r1
 8017d20:	4601      	mov	r1, r0
 8017d22:	4803      	ldr	r0, [pc, #12]	; (8017d30 <vsniprintf+0x18>)
 8017d24:	6800      	ldr	r0, [r0, #0]
 8017d26:	f7ff ffcb 	bl	8017cc0 <_vsniprintf_r>
 8017d2a:	b003      	add	sp, #12
 8017d2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d30:	20000728 	.word	0x20000728

08017d34 <std>:
 8017d34:	2300      	movs	r3, #0
 8017d36:	b510      	push	{r4, lr}
 8017d38:	4604      	mov	r4, r0
 8017d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8017d3e:	6083      	str	r3, [r0, #8]
 8017d40:	8181      	strh	r1, [r0, #12]
 8017d42:	6643      	str	r3, [r0, #100]	; 0x64
 8017d44:	81c2      	strh	r2, [r0, #14]
 8017d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017d4a:	6183      	str	r3, [r0, #24]
 8017d4c:	4619      	mov	r1, r3
 8017d4e:	2208      	movs	r2, #8
 8017d50:	305c      	adds	r0, #92	; 0x5c
 8017d52:	f7ff fe08 	bl	8017966 <memset>
 8017d56:	4b05      	ldr	r3, [pc, #20]	; (8017d6c <std+0x38>)
 8017d58:	6224      	str	r4, [r4, #32]
 8017d5a:	6263      	str	r3, [r4, #36]	; 0x24
 8017d5c:	4b04      	ldr	r3, [pc, #16]	; (8017d70 <std+0x3c>)
 8017d5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8017d60:	4b04      	ldr	r3, [pc, #16]	; (8017d74 <std+0x40>)
 8017d62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017d64:	4b04      	ldr	r3, [pc, #16]	; (8017d78 <std+0x44>)
 8017d66:	6323      	str	r3, [r4, #48]	; 0x30
 8017d68:	bd10      	pop	{r4, pc}
 8017d6a:	bf00      	nop
 8017d6c:	08018729 	.word	0x08018729
 8017d70:	0801874b 	.word	0x0801874b
 8017d74:	08018783 	.word	0x08018783
 8017d78:	080187a7 	.word	0x080187a7

08017d7c <_cleanup_r>:
 8017d7c:	4901      	ldr	r1, [pc, #4]	; (8017d84 <_cleanup_r+0x8>)
 8017d7e:	f000 b885 	b.w	8017e8c <_fwalk_reent>
 8017d82:	bf00      	nop
 8017d84:	08018a9d 	.word	0x08018a9d

08017d88 <__sfmoreglue>:
 8017d88:	b570      	push	{r4, r5, r6, lr}
 8017d8a:	2568      	movs	r5, #104	; 0x68
 8017d8c:	1e4a      	subs	r2, r1, #1
 8017d8e:	4355      	muls	r5, r2
 8017d90:	460e      	mov	r6, r1
 8017d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017d96:	f7ff fe3b 	bl	8017a10 <_malloc_r>
 8017d9a:	4604      	mov	r4, r0
 8017d9c:	b140      	cbz	r0, 8017db0 <__sfmoreglue+0x28>
 8017d9e:	2100      	movs	r1, #0
 8017da0:	e9c0 1600 	strd	r1, r6, [r0]
 8017da4:	300c      	adds	r0, #12
 8017da6:	60a0      	str	r0, [r4, #8]
 8017da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017dac:	f7ff fddb 	bl	8017966 <memset>
 8017db0:	4620      	mov	r0, r4
 8017db2:	bd70      	pop	{r4, r5, r6, pc}

08017db4 <__sinit>:
 8017db4:	6983      	ldr	r3, [r0, #24]
 8017db6:	b510      	push	{r4, lr}
 8017db8:	4604      	mov	r4, r0
 8017dba:	bb33      	cbnz	r3, 8017e0a <__sinit+0x56>
 8017dbc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017dc0:	6503      	str	r3, [r0, #80]	; 0x50
 8017dc2:	4b12      	ldr	r3, [pc, #72]	; (8017e0c <__sinit+0x58>)
 8017dc4:	4a12      	ldr	r2, [pc, #72]	; (8017e10 <__sinit+0x5c>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	6282      	str	r2, [r0, #40]	; 0x28
 8017dca:	4298      	cmp	r0, r3
 8017dcc:	bf04      	itt	eq
 8017dce:	2301      	moveq	r3, #1
 8017dd0:	6183      	streq	r3, [r0, #24]
 8017dd2:	f000 f81f 	bl	8017e14 <__sfp>
 8017dd6:	6060      	str	r0, [r4, #4]
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f000 f81b 	bl	8017e14 <__sfp>
 8017dde:	60a0      	str	r0, [r4, #8]
 8017de0:	4620      	mov	r0, r4
 8017de2:	f000 f817 	bl	8017e14 <__sfp>
 8017de6:	2200      	movs	r2, #0
 8017de8:	60e0      	str	r0, [r4, #12]
 8017dea:	2104      	movs	r1, #4
 8017dec:	6860      	ldr	r0, [r4, #4]
 8017dee:	f7ff ffa1 	bl	8017d34 <std>
 8017df2:	2201      	movs	r2, #1
 8017df4:	2109      	movs	r1, #9
 8017df6:	68a0      	ldr	r0, [r4, #8]
 8017df8:	f7ff ff9c 	bl	8017d34 <std>
 8017dfc:	2202      	movs	r2, #2
 8017dfe:	2112      	movs	r1, #18
 8017e00:	68e0      	ldr	r0, [r4, #12]
 8017e02:	f7ff ff97 	bl	8017d34 <std>
 8017e06:	2301      	movs	r3, #1
 8017e08:	61a3      	str	r3, [r4, #24]
 8017e0a:	bd10      	pop	{r4, pc}
 8017e0c:	080199e8 	.word	0x080199e8
 8017e10:	08017d7d 	.word	0x08017d7d

08017e14 <__sfp>:
 8017e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e16:	4b1b      	ldr	r3, [pc, #108]	; (8017e84 <__sfp+0x70>)
 8017e18:	4607      	mov	r7, r0
 8017e1a:	681e      	ldr	r6, [r3, #0]
 8017e1c:	69b3      	ldr	r3, [r6, #24]
 8017e1e:	b913      	cbnz	r3, 8017e26 <__sfp+0x12>
 8017e20:	4630      	mov	r0, r6
 8017e22:	f7ff ffc7 	bl	8017db4 <__sinit>
 8017e26:	3648      	adds	r6, #72	; 0x48
 8017e28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017e2c:	3b01      	subs	r3, #1
 8017e2e:	d503      	bpl.n	8017e38 <__sfp+0x24>
 8017e30:	6833      	ldr	r3, [r6, #0]
 8017e32:	b133      	cbz	r3, 8017e42 <__sfp+0x2e>
 8017e34:	6836      	ldr	r6, [r6, #0]
 8017e36:	e7f7      	b.n	8017e28 <__sfp+0x14>
 8017e38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017e3c:	b16d      	cbz	r5, 8017e5a <__sfp+0x46>
 8017e3e:	3468      	adds	r4, #104	; 0x68
 8017e40:	e7f4      	b.n	8017e2c <__sfp+0x18>
 8017e42:	2104      	movs	r1, #4
 8017e44:	4638      	mov	r0, r7
 8017e46:	f7ff ff9f 	bl	8017d88 <__sfmoreglue>
 8017e4a:	6030      	str	r0, [r6, #0]
 8017e4c:	2800      	cmp	r0, #0
 8017e4e:	d1f1      	bne.n	8017e34 <__sfp+0x20>
 8017e50:	230c      	movs	r3, #12
 8017e52:	4604      	mov	r4, r0
 8017e54:	603b      	str	r3, [r7, #0]
 8017e56:	4620      	mov	r0, r4
 8017e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e5a:	4b0b      	ldr	r3, [pc, #44]	; (8017e88 <__sfp+0x74>)
 8017e5c:	6665      	str	r5, [r4, #100]	; 0x64
 8017e5e:	e9c4 5500 	strd	r5, r5, [r4]
 8017e62:	60a5      	str	r5, [r4, #8]
 8017e64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017e68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017e6c:	2208      	movs	r2, #8
 8017e6e:	4629      	mov	r1, r5
 8017e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017e74:	f7ff fd77 	bl	8017966 <memset>
 8017e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017e80:	e7e9      	b.n	8017e56 <__sfp+0x42>
 8017e82:	bf00      	nop
 8017e84:	080199e8 	.word	0x080199e8
 8017e88:	ffff0001 	.word	0xffff0001

08017e8c <_fwalk_reent>:
 8017e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e90:	4680      	mov	r8, r0
 8017e92:	4689      	mov	r9, r1
 8017e94:	2600      	movs	r6, #0
 8017e96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e9a:	b914      	cbnz	r4, 8017ea2 <_fwalk_reent+0x16>
 8017e9c:	4630      	mov	r0, r6
 8017e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ea2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017ea6:	3f01      	subs	r7, #1
 8017ea8:	d501      	bpl.n	8017eae <_fwalk_reent+0x22>
 8017eaa:	6824      	ldr	r4, [r4, #0]
 8017eac:	e7f5      	b.n	8017e9a <_fwalk_reent+0xe>
 8017eae:	89ab      	ldrh	r3, [r5, #12]
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	d907      	bls.n	8017ec4 <_fwalk_reent+0x38>
 8017eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017eb8:	3301      	adds	r3, #1
 8017eba:	d003      	beq.n	8017ec4 <_fwalk_reent+0x38>
 8017ebc:	4629      	mov	r1, r5
 8017ebe:	4640      	mov	r0, r8
 8017ec0:	47c8      	blx	r9
 8017ec2:	4306      	orrs	r6, r0
 8017ec4:	3568      	adds	r5, #104	; 0x68
 8017ec6:	e7ee      	b.n	8017ea6 <_fwalk_reent+0x1a>

08017ec8 <__locale_ctype_ptr_l>:
 8017ec8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017ecc:	4770      	bx	lr

08017ece <__ascii_mbtowc>:
 8017ece:	b082      	sub	sp, #8
 8017ed0:	b901      	cbnz	r1, 8017ed4 <__ascii_mbtowc+0x6>
 8017ed2:	a901      	add	r1, sp, #4
 8017ed4:	b142      	cbz	r2, 8017ee8 <__ascii_mbtowc+0x1a>
 8017ed6:	b14b      	cbz	r3, 8017eec <__ascii_mbtowc+0x1e>
 8017ed8:	7813      	ldrb	r3, [r2, #0]
 8017eda:	600b      	str	r3, [r1, #0]
 8017edc:	7812      	ldrb	r2, [r2, #0]
 8017ede:	1c10      	adds	r0, r2, #0
 8017ee0:	bf18      	it	ne
 8017ee2:	2001      	movne	r0, #1
 8017ee4:	b002      	add	sp, #8
 8017ee6:	4770      	bx	lr
 8017ee8:	4610      	mov	r0, r2
 8017eea:	e7fb      	b.n	8017ee4 <__ascii_mbtowc+0x16>
 8017eec:	f06f 0001 	mvn.w	r0, #1
 8017ef0:	e7f8      	b.n	8017ee4 <__ascii_mbtowc+0x16>

08017ef2 <__malloc_lock>:
 8017ef2:	4770      	bx	lr

08017ef4 <__malloc_unlock>:
 8017ef4:	4770      	bx	lr

08017ef6 <__ssputs_r>:
 8017ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017efa:	688e      	ldr	r6, [r1, #8]
 8017efc:	4682      	mov	sl, r0
 8017efe:	429e      	cmp	r6, r3
 8017f00:	460c      	mov	r4, r1
 8017f02:	4690      	mov	r8, r2
 8017f04:	4699      	mov	r9, r3
 8017f06:	d837      	bhi.n	8017f78 <__ssputs_r+0x82>
 8017f08:	898a      	ldrh	r2, [r1, #12]
 8017f0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017f0e:	d031      	beq.n	8017f74 <__ssputs_r+0x7e>
 8017f10:	2302      	movs	r3, #2
 8017f12:	6825      	ldr	r5, [r4, #0]
 8017f14:	6909      	ldr	r1, [r1, #16]
 8017f16:	1a6f      	subs	r7, r5, r1
 8017f18:	6965      	ldr	r5, [r4, #20]
 8017f1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f1e:	fb95 f5f3 	sdiv	r5, r5, r3
 8017f22:	f109 0301 	add.w	r3, r9, #1
 8017f26:	443b      	add	r3, r7
 8017f28:	429d      	cmp	r5, r3
 8017f2a:	bf38      	it	cc
 8017f2c:	461d      	movcc	r5, r3
 8017f2e:	0553      	lsls	r3, r2, #21
 8017f30:	d530      	bpl.n	8017f94 <__ssputs_r+0x9e>
 8017f32:	4629      	mov	r1, r5
 8017f34:	f7ff fd6c 	bl	8017a10 <_malloc_r>
 8017f38:	4606      	mov	r6, r0
 8017f3a:	b950      	cbnz	r0, 8017f52 <__ssputs_r+0x5c>
 8017f3c:	230c      	movs	r3, #12
 8017f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8017f42:	f8ca 3000 	str.w	r3, [sl]
 8017f46:	89a3      	ldrh	r3, [r4, #12]
 8017f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f4c:	81a3      	strh	r3, [r4, #12]
 8017f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f52:	463a      	mov	r2, r7
 8017f54:	6921      	ldr	r1, [r4, #16]
 8017f56:	f7ff fce2 	bl	801791e <memcpy>
 8017f5a:	89a3      	ldrh	r3, [r4, #12]
 8017f5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f64:	81a3      	strh	r3, [r4, #12]
 8017f66:	6126      	str	r6, [r4, #16]
 8017f68:	443e      	add	r6, r7
 8017f6a:	6026      	str	r6, [r4, #0]
 8017f6c:	464e      	mov	r6, r9
 8017f6e:	6165      	str	r5, [r4, #20]
 8017f70:	1bed      	subs	r5, r5, r7
 8017f72:	60a5      	str	r5, [r4, #8]
 8017f74:	454e      	cmp	r6, r9
 8017f76:	d900      	bls.n	8017f7a <__ssputs_r+0x84>
 8017f78:	464e      	mov	r6, r9
 8017f7a:	4632      	mov	r2, r6
 8017f7c:	4641      	mov	r1, r8
 8017f7e:	6820      	ldr	r0, [r4, #0]
 8017f80:	f7ff fcd8 	bl	8017934 <memmove>
 8017f84:	68a3      	ldr	r3, [r4, #8]
 8017f86:	2000      	movs	r0, #0
 8017f88:	1b9b      	subs	r3, r3, r6
 8017f8a:	60a3      	str	r3, [r4, #8]
 8017f8c:	6823      	ldr	r3, [r4, #0]
 8017f8e:	441e      	add	r6, r3
 8017f90:	6026      	str	r6, [r4, #0]
 8017f92:	e7dc      	b.n	8017f4e <__ssputs_r+0x58>
 8017f94:	462a      	mov	r2, r5
 8017f96:	f000 fe21 	bl	8018bdc <_realloc_r>
 8017f9a:	4606      	mov	r6, r0
 8017f9c:	2800      	cmp	r0, #0
 8017f9e:	d1e2      	bne.n	8017f66 <__ssputs_r+0x70>
 8017fa0:	6921      	ldr	r1, [r4, #16]
 8017fa2:	4650      	mov	r0, sl
 8017fa4:	f7ff fce8 	bl	8017978 <_free_r>
 8017fa8:	e7c8      	b.n	8017f3c <__ssputs_r+0x46>
	...

08017fac <_svfiprintf_r>:
 8017fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fb0:	461d      	mov	r5, r3
 8017fb2:	898b      	ldrh	r3, [r1, #12]
 8017fb4:	b09d      	sub	sp, #116	; 0x74
 8017fb6:	061f      	lsls	r7, r3, #24
 8017fb8:	4680      	mov	r8, r0
 8017fba:	460c      	mov	r4, r1
 8017fbc:	4616      	mov	r6, r2
 8017fbe:	d50f      	bpl.n	8017fe0 <_svfiprintf_r+0x34>
 8017fc0:	690b      	ldr	r3, [r1, #16]
 8017fc2:	b96b      	cbnz	r3, 8017fe0 <_svfiprintf_r+0x34>
 8017fc4:	2140      	movs	r1, #64	; 0x40
 8017fc6:	f7ff fd23 	bl	8017a10 <_malloc_r>
 8017fca:	6020      	str	r0, [r4, #0]
 8017fcc:	6120      	str	r0, [r4, #16]
 8017fce:	b928      	cbnz	r0, 8017fdc <_svfiprintf_r+0x30>
 8017fd0:	230c      	movs	r3, #12
 8017fd2:	f8c8 3000 	str.w	r3, [r8]
 8017fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8017fda:	e0c8      	b.n	801816e <_svfiprintf_r+0x1c2>
 8017fdc:	2340      	movs	r3, #64	; 0x40
 8017fde:	6163      	str	r3, [r4, #20]
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8017fe4:	2320      	movs	r3, #32
 8017fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017fea:	2330      	movs	r3, #48	; 0x30
 8017fec:	f04f 0b01 	mov.w	fp, #1
 8017ff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ff4:	9503      	str	r5, [sp, #12]
 8017ff6:	4637      	mov	r7, r6
 8017ff8:	463d      	mov	r5, r7
 8017ffa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017ffe:	b10b      	cbz	r3, 8018004 <_svfiprintf_r+0x58>
 8018000:	2b25      	cmp	r3, #37	; 0x25
 8018002:	d13e      	bne.n	8018082 <_svfiprintf_r+0xd6>
 8018004:	ebb7 0a06 	subs.w	sl, r7, r6
 8018008:	d00b      	beq.n	8018022 <_svfiprintf_r+0x76>
 801800a:	4653      	mov	r3, sl
 801800c:	4632      	mov	r2, r6
 801800e:	4621      	mov	r1, r4
 8018010:	4640      	mov	r0, r8
 8018012:	f7ff ff70 	bl	8017ef6 <__ssputs_r>
 8018016:	3001      	adds	r0, #1
 8018018:	f000 80a4 	beq.w	8018164 <_svfiprintf_r+0x1b8>
 801801c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801801e:	4453      	add	r3, sl
 8018020:	9309      	str	r3, [sp, #36]	; 0x24
 8018022:	783b      	ldrb	r3, [r7, #0]
 8018024:	2b00      	cmp	r3, #0
 8018026:	f000 809d 	beq.w	8018164 <_svfiprintf_r+0x1b8>
 801802a:	2300      	movs	r3, #0
 801802c:	f04f 32ff 	mov.w	r2, #4294967295
 8018030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018034:	9304      	str	r3, [sp, #16]
 8018036:	9307      	str	r3, [sp, #28]
 8018038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801803c:	931a      	str	r3, [sp, #104]	; 0x68
 801803e:	462f      	mov	r7, r5
 8018040:	2205      	movs	r2, #5
 8018042:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018046:	4850      	ldr	r0, [pc, #320]	; (8018188 <_svfiprintf_r+0x1dc>)
 8018048:	f7ff fc4c 	bl	80178e4 <memchr>
 801804c:	9b04      	ldr	r3, [sp, #16]
 801804e:	b9d0      	cbnz	r0, 8018086 <_svfiprintf_r+0xda>
 8018050:	06d9      	lsls	r1, r3, #27
 8018052:	bf44      	itt	mi
 8018054:	2220      	movmi	r2, #32
 8018056:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801805a:	071a      	lsls	r2, r3, #28
 801805c:	bf44      	itt	mi
 801805e:	222b      	movmi	r2, #43	; 0x2b
 8018060:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018064:	782a      	ldrb	r2, [r5, #0]
 8018066:	2a2a      	cmp	r2, #42	; 0x2a
 8018068:	d015      	beq.n	8018096 <_svfiprintf_r+0xea>
 801806a:	462f      	mov	r7, r5
 801806c:	2000      	movs	r0, #0
 801806e:	250a      	movs	r5, #10
 8018070:	9a07      	ldr	r2, [sp, #28]
 8018072:	4639      	mov	r1, r7
 8018074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018078:	3b30      	subs	r3, #48	; 0x30
 801807a:	2b09      	cmp	r3, #9
 801807c:	d94d      	bls.n	801811a <_svfiprintf_r+0x16e>
 801807e:	b1b8      	cbz	r0, 80180b0 <_svfiprintf_r+0x104>
 8018080:	e00f      	b.n	80180a2 <_svfiprintf_r+0xf6>
 8018082:	462f      	mov	r7, r5
 8018084:	e7b8      	b.n	8017ff8 <_svfiprintf_r+0x4c>
 8018086:	4a40      	ldr	r2, [pc, #256]	; (8018188 <_svfiprintf_r+0x1dc>)
 8018088:	463d      	mov	r5, r7
 801808a:	1a80      	subs	r0, r0, r2
 801808c:	fa0b f000 	lsl.w	r0, fp, r0
 8018090:	4318      	orrs	r0, r3
 8018092:	9004      	str	r0, [sp, #16]
 8018094:	e7d3      	b.n	801803e <_svfiprintf_r+0x92>
 8018096:	9a03      	ldr	r2, [sp, #12]
 8018098:	1d11      	adds	r1, r2, #4
 801809a:	6812      	ldr	r2, [r2, #0]
 801809c:	9103      	str	r1, [sp, #12]
 801809e:	2a00      	cmp	r2, #0
 80180a0:	db01      	blt.n	80180a6 <_svfiprintf_r+0xfa>
 80180a2:	9207      	str	r2, [sp, #28]
 80180a4:	e004      	b.n	80180b0 <_svfiprintf_r+0x104>
 80180a6:	4252      	negs	r2, r2
 80180a8:	f043 0302 	orr.w	r3, r3, #2
 80180ac:	9207      	str	r2, [sp, #28]
 80180ae:	9304      	str	r3, [sp, #16]
 80180b0:	783b      	ldrb	r3, [r7, #0]
 80180b2:	2b2e      	cmp	r3, #46	; 0x2e
 80180b4:	d10c      	bne.n	80180d0 <_svfiprintf_r+0x124>
 80180b6:	787b      	ldrb	r3, [r7, #1]
 80180b8:	2b2a      	cmp	r3, #42	; 0x2a
 80180ba:	d133      	bne.n	8018124 <_svfiprintf_r+0x178>
 80180bc:	9b03      	ldr	r3, [sp, #12]
 80180be:	3702      	adds	r7, #2
 80180c0:	1d1a      	adds	r2, r3, #4
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	9203      	str	r2, [sp, #12]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	bfb8      	it	lt
 80180ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80180ce:	9305      	str	r3, [sp, #20]
 80180d0:	4d2e      	ldr	r5, [pc, #184]	; (801818c <_svfiprintf_r+0x1e0>)
 80180d2:	2203      	movs	r2, #3
 80180d4:	7839      	ldrb	r1, [r7, #0]
 80180d6:	4628      	mov	r0, r5
 80180d8:	f7ff fc04 	bl	80178e4 <memchr>
 80180dc:	b138      	cbz	r0, 80180ee <_svfiprintf_r+0x142>
 80180de:	2340      	movs	r3, #64	; 0x40
 80180e0:	1b40      	subs	r0, r0, r5
 80180e2:	fa03 f000 	lsl.w	r0, r3, r0
 80180e6:	9b04      	ldr	r3, [sp, #16]
 80180e8:	3701      	adds	r7, #1
 80180ea:	4303      	orrs	r3, r0
 80180ec:	9304      	str	r3, [sp, #16]
 80180ee:	7839      	ldrb	r1, [r7, #0]
 80180f0:	2206      	movs	r2, #6
 80180f2:	4827      	ldr	r0, [pc, #156]	; (8018190 <_svfiprintf_r+0x1e4>)
 80180f4:	1c7e      	adds	r6, r7, #1
 80180f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80180fa:	f7ff fbf3 	bl	80178e4 <memchr>
 80180fe:	2800      	cmp	r0, #0
 8018100:	d038      	beq.n	8018174 <_svfiprintf_r+0x1c8>
 8018102:	4b24      	ldr	r3, [pc, #144]	; (8018194 <_svfiprintf_r+0x1e8>)
 8018104:	bb13      	cbnz	r3, 801814c <_svfiprintf_r+0x1a0>
 8018106:	9b03      	ldr	r3, [sp, #12]
 8018108:	3307      	adds	r3, #7
 801810a:	f023 0307 	bic.w	r3, r3, #7
 801810e:	3308      	adds	r3, #8
 8018110:	9303      	str	r3, [sp, #12]
 8018112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018114:	444b      	add	r3, r9
 8018116:	9309      	str	r3, [sp, #36]	; 0x24
 8018118:	e76d      	b.n	8017ff6 <_svfiprintf_r+0x4a>
 801811a:	fb05 3202 	mla	r2, r5, r2, r3
 801811e:	2001      	movs	r0, #1
 8018120:	460f      	mov	r7, r1
 8018122:	e7a6      	b.n	8018072 <_svfiprintf_r+0xc6>
 8018124:	2300      	movs	r3, #0
 8018126:	250a      	movs	r5, #10
 8018128:	4619      	mov	r1, r3
 801812a:	3701      	adds	r7, #1
 801812c:	9305      	str	r3, [sp, #20]
 801812e:	4638      	mov	r0, r7
 8018130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018134:	3a30      	subs	r2, #48	; 0x30
 8018136:	2a09      	cmp	r2, #9
 8018138:	d903      	bls.n	8018142 <_svfiprintf_r+0x196>
 801813a:	2b00      	cmp	r3, #0
 801813c:	d0c8      	beq.n	80180d0 <_svfiprintf_r+0x124>
 801813e:	9105      	str	r1, [sp, #20]
 8018140:	e7c6      	b.n	80180d0 <_svfiprintf_r+0x124>
 8018142:	fb05 2101 	mla	r1, r5, r1, r2
 8018146:	2301      	movs	r3, #1
 8018148:	4607      	mov	r7, r0
 801814a:	e7f0      	b.n	801812e <_svfiprintf_r+0x182>
 801814c:	ab03      	add	r3, sp, #12
 801814e:	9300      	str	r3, [sp, #0]
 8018150:	4622      	mov	r2, r4
 8018152:	4b11      	ldr	r3, [pc, #68]	; (8018198 <_svfiprintf_r+0x1ec>)
 8018154:	a904      	add	r1, sp, #16
 8018156:	4640      	mov	r0, r8
 8018158:	f3af 8000 	nop.w
 801815c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018160:	4681      	mov	r9, r0
 8018162:	d1d6      	bne.n	8018112 <_svfiprintf_r+0x166>
 8018164:	89a3      	ldrh	r3, [r4, #12]
 8018166:	065b      	lsls	r3, r3, #25
 8018168:	f53f af35 	bmi.w	8017fd6 <_svfiprintf_r+0x2a>
 801816c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801816e:	b01d      	add	sp, #116	; 0x74
 8018170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018174:	ab03      	add	r3, sp, #12
 8018176:	9300      	str	r3, [sp, #0]
 8018178:	4622      	mov	r2, r4
 801817a:	4b07      	ldr	r3, [pc, #28]	; (8018198 <_svfiprintf_r+0x1ec>)
 801817c:	a904      	add	r1, sp, #16
 801817e:	4640      	mov	r0, r8
 8018180:	f000 f9c0 	bl	8018504 <_printf_i>
 8018184:	e7ea      	b.n	801815c <_svfiprintf_r+0x1b0>
 8018186:	bf00      	nop
 8018188:	08019a56 	.word	0x08019a56
 801818c:	08019a5c 	.word	0x08019a5c
 8018190:	08019a60 	.word	0x08019a60
 8018194:	00000000 	.word	0x00000000
 8018198:	08017ef7 	.word	0x08017ef7

0801819c <__sfputc_r>:
 801819c:	6893      	ldr	r3, [r2, #8]
 801819e:	b410      	push	{r4}
 80181a0:	3b01      	subs	r3, #1
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	6093      	str	r3, [r2, #8]
 80181a6:	da07      	bge.n	80181b8 <__sfputc_r+0x1c>
 80181a8:	6994      	ldr	r4, [r2, #24]
 80181aa:	42a3      	cmp	r3, r4
 80181ac:	db01      	blt.n	80181b2 <__sfputc_r+0x16>
 80181ae:	290a      	cmp	r1, #10
 80181b0:	d102      	bne.n	80181b8 <__sfputc_r+0x1c>
 80181b2:	bc10      	pop	{r4}
 80181b4:	f000 bafc 	b.w	80187b0 <__swbuf_r>
 80181b8:	6813      	ldr	r3, [r2, #0]
 80181ba:	1c58      	adds	r0, r3, #1
 80181bc:	6010      	str	r0, [r2, #0]
 80181be:	7019      	strb	r1, [r3, #0]
 80181c0:	4608      	mov	r0, r1
 80181c2:	bc10      	pop	{r4}
 80181c4:	4770      	bx	lr

080181c6 <__sfputs_r>:
 80181c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181c8:	4606      	mov	r6, r0
 80181ca:	460f      	mov	r7, r1
 80181cc:	4614      	mov	r4, r2
 80181ce:	18d5      	adds	r5, r2, r3
 80181d0:	42ac      	cmp	r4, r5
 80181d2:	d101      	bne.n	80181d8 <__sfputs_r+0x12>
 80181d4:	2000      	movs	r0, #0
 80181d6:	e007      	b.n	80181e8 <__sfputs_r+0x22>
 80181d8:	463a      	mov	r2, r7
 80181da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181de:	4630      	mov	r0, r6
 80181e0:	f7ff ffdc 	bl	801819c <__sfputc_r>
 80181e4:	1c43      	adds	r3, r0, #1
 80181e6:	d1f3      	bne.n	80181d0 <__sfputs_r+0xa>
 80181e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080181ec <_vfiprintf_r>:
 80181ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181f0:	460c      	mov	r4, r1
 80181f2:	b09d      	sub	sp, #116	; 0x74
 80181f4:	4617      	mov	r7, r2
 80181f6:	461d      	mov	r5, r3
 80181f8:	4606      	mov	r6, r0
 80181fa:	b118      	cbz	r0, 8018204 <_vfiprintf_r+0x18>
 80181fc:	6983      	ldr	r3, [r0, #24]
 80181fe:	b90b      	cbnz	r3, 8018204 <_vfiprintf_r+0x18>
 8018200:	f7ff fdd8 	bl	8017db4 <__sinit>
 8018204:	4b7c      	ldr	r3, [pc, #496]	; (80183f8 <_vfiprintf_r+0x20c>)
 8018206:	429c      	cmp	r4, r3
 8018208:	d158      	bne.n	80182bc <_vfiprintf_r+0xd0>
 801820a:	6874      	ldr	r4, [r6, #4]
 801820c:	89a3      	ldrh	r3, [r4, #12]
 801820e:	0718      	lsls	r0, r3, #28
 8018210:	d55e      	bpl.n	80182d0 <_vfiprintf_r+0xe4>
 8018212:	6923      	ldr	r3, [r4, #16]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d05b      	beq.n	80182d0 <_vfiprintf_r+0xe4>
 8018218:	2300      	movs	r3, #0
 801821a:	9309      	str	r3, [sp, #36]	; 0x24
 801821c:	2320      	movs	r3, #32
 801821e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018222:	2330      	movs	r3, #48	; 0x30
 8018224:	f04f 0b01 	mov.w	fp, #1
 8018228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801822c:	9503      	str	r5, [sp, #12]
 801822e:	46b8      	mov	r8, r7
 8018230:	4645      	mov	r5, r8
 8018232:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018236:	b10b      	cbz	r3, 801823c <_vfiprintf_r+0x50>
 8018238:	2b25      	cmp	r3, #37	; 0x25
 801823a:	d154      	bne.n	80182e6 <_vfiprintf_r+0xfa>
 801823c:	ebb8 0a07 	subs.w	sl, r8, r7
 8018240:	d00b      	beq.n	801825a <_vfiprintf_r+0x6e>
 8018242:	4653      	mov	r3, sl
 8018244:	463a      	mov	r2, r7
 8018246:	4621      	mov	r1, r4
 8018248:	4630      	mov	r0, r6
 801824a:	f7ff ffbc 	bl	80181c6 <__sfputs_r>
 801824e:	3001      	adds	r0, #1
 8018250:	f000 80c2 	beq.w	80183d8 <_vfiprintf_r+0x1ec>
 8018254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018256:	4453      	add	r3, sl
 8018258:	9309      	str	r3, [sp, #36]	; 0x24
 801825a:	f898 3000 	ldrb.w	r3, [r8]
 801825e:	2b00      	cmp	r3, #0
 8018260:	f000 80ba 	beq.w	80183d8 <_vfiprintf_r+0x1ec>
 8018264:	2300      	movs	r3, #0
 8018266:	f04f 32ff 	mov.w	r2, #4294967295
 801826a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801826e:	9304      	str	r3, [sp, #16]
 8018270:	9307      	str	r3, [sp, #28]
 8018272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018276:	931a      	str	r3, [sp, #104]	; 0x68
 8018278:	46a8      	mov	r8, r5
 801827a:	2205      	movs	r2, #5
 801827c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018280:	485e      	ldr	r0, [pc, #376]	; (80183fc <_vfiprintf_r+0x210>)
 8018282:	f7ff fb2f 	bl	80178e4 <memchr>
 8018286:	9b04      	ldr	r3, [sp, #16]
 8018288:	bb78      	cbnz	r0, 80182ea <_vfiprintf_r+0xfe>
 801828a:	06d9      	lsls	r1, r3, #27
 801828c:	bf44      	itt	mi
 801828e:	2220      	movmi	r2, #32
 8018290:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018294:	071a      	lsls	r2, r3, #28
 8018296:	bf44      	itt	mi
 8018298:	222b      	movmi	r2, #43	; 0x2b
 801829a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801829e:	782a      	ldrb	r2, [r5, #0]
 80182a0:	2a2a      	cmp	r2, #42	; 0x2a
 80182a2:	d02a      	beq.n	80182fa <_vfiprintf_r+0x10e>
 80182a4:	46a8      	mov	r8, r5
 80182a6:	2000      	movs	r0, #0
 80182a8:	250a      	movs	r5, #10
 80182aa:	9a07      	ldr	r2, [sp, #28]
 80182ac:	4641      	mov	r1, r8
 80182ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182b2:	3b30      	subs	r3, #48	; 0x30
 80182b4:	2b09      	cmp	r3, #9
 80182b6:	d969      	bls.n	801838c <_vfiprintf_r+0x1a0>
 80182b8:	b360      	cbz	r0, 8018314 <_vfiprintf_r+0x128>
 80182ba:	e024      	b.n	8018306 <_vfiprintf_r+0x11a>
 80182bc:	4b50      	ldr	r3, [pc, #320]	; (8018400 <_vfiprintf_r+0x214>)
 80182be:	429c      	cmp	r4, r3
 80182c0:	d101      	bne.n	80182c6 <_vfiprintf_r+0xda>
 80182c2:	68b4      	ldr	r4, [r6, #8]
 80182c4:	e7a2      	b.n	801820c <_vfiprintf_r+0x20>
 80182c6:	4b4f      	ldr	r3, [pc, #316]	; (8018404 <_vfiprintf_r+0x218>)
 80182c8:	429c      	cmp	r4, r3
 80182ca:	bf08      	it	eq
 80182cc:	68f4      	ldreq	r4, [r6, #12]
 80182ce:	e79d      	b.n	801820c <_vfiprintf_r+0x20>
 80182d0:	4621      	mov	r1, r4
 80182d2:	4630      	mov	r0, r6
 80182d4:	f000 fade 	bl	8018894 <__swsetup_r>
 80182d8:	2800      	cmp	r0, #0
 80182da:	d09d      	beq.n	8018218 <_vfiprintf_r+0x2c>
 80182dc:	f04f 30ff 	mov.w	r0, #4294967295
 80182e0:	b01d      	add	sp, #116	; 0x74
 80182e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182e6:	46a8      	mov	r8, r5
 80182e8:	e7a2      	b.n	8018230 <_vfiprintf_r+0x44>
 80182ea:	4a44      	ldr	r2, [pc, #272]	; (80183fc <_vfiprintf_r+0x210>)
 80182ec:	4645      	mov	r5, r8
 80182ee:	1a80      	subs	r0, r0, r2
 80182f0:	fa0b f000 	lsl.w	r0, fp, r0
 80182f4:	4318      	orrs	r0, r3
 80182f6:	9004      	str	r0, [sp, #16]
 80182f8:	e7be      	b.n	8018278 <_vfiprintf_r+0x8c>
 80182fa:	9a03      	ldr	r2, [sp, #12]
 80182fc:	1d11      	adds	r1, r2, #4
 80182fe:	6812      	ldr	r2, [r2, #0]
 8018300:	9103      	str	r1, [sp, #12]
 8018302:	2a00      	cmp	r2, #0
 8018304:	db01      	blt.n	801830a <_vfiprintf_r+0x11e>
 8018306:	9207      	str	r2, [sp, #28]
 8018308:	e004      	b.n	8018314 <_vfiprintf_r+0x128>
 801830a:	4252      	negs	r2, r2
 801830c:	f043 0302 	orr.w	r3, r3, #2
 8018310:	9207      	str	r2, [sp, #28]
 8018312:	9304      	str	r3, [sp, #16]
 8018314:	f898 3000 	ldrb.w	r3, [r8]
 8018318:	2b2e      	cmp	r3, #46	; 0x2e
 801831a:	d10e      	bne.n	801833a <_vfiprintf_r+0x14e>
 801831c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018320:	2b2a      	cmp	r3, #42	; 0x2a
 8018322:	d138      	bne.n	8018396 <_vfiprintf_r+0x1aa>
 8018324:	9b03      	ldr	r3, [sp, #12]
 8018326:	f108 0802 	add.w	r8, r8, #2
 801832a:	1d1a      	adds	r2, r3, #4
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	9203      	str	r2, [sp, #12]
 8018330:	2b00      	cmp	r3, #0
 8018332:	bfb8      	it	lt
 8018334:	f04f 33ff 	movlt.w	r3, #4294967295
 8018338:	9305      	str	r3, [sp, #20]
 801833a:	4d33      	ldr	r5, [pc, #204]	; (8018408 <_vfiprintf_r+0x21c>)
 801833c:	2203      	movs	r2, #3
 801833e:	f898 1000 	ldrb.w	r1, [r8]
 8018342:	4628      	mov	r0, r5
 8018344:	f7ff face 	bl	80178e4 <memchr>
 8018348:	b140      	cbz	r0, 801835c <_vfiprintf_r+0x170>
 801834a:	2340      	movs	r3, #64	; 0x40
 801834c:	1b40      	subs	r0, r0, r5
 801834e:	fa03 f000 	lsl.w	r0, r3, r0
 8018352:	9b04      	ldr	r3, [sp, #16]
 8018354:	f108 0801 	add.w	r8, r8, #1
 8018358:	4303      	orrs	r3, r0
 801835a:	9304      	str	r3, [sp, #16]
 801835c:	f898 1000 	ldrb.w	r1, [r8]
 8018360:	2206      	movs	r2, #6
 8018362:	482a      	ldr	r0, [pc, #168]	; (801840c <_vfiprintf_r+0x220>)
 8018364:	f108 0701 	add.w	r7, r8, #1
 8018368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801836c:	f7ff faba 	bl	80178e4 <memchr>
 8018370:	2800      	cmp	r0, #0
 8018372:	d037      	beq.n	80183e4 <_vfiprintf_r+0x1f8>
 8018374:	4b26      	ldr	r3, [pc, #152]	; (8018410 <_vfiprintf_r+0x224>)
 8018376:	bb1b      	cbnz	r3, 80183c0 <_vfiprintf_r+0x1d4>
 8018378:	9b03      	ldr	r3, [sp, #12]
 801837a:	3307      	adds	r3, #7
 801837c:	f023 0307 	bic.w	r3, r3, #7
 8018380:	3308      	adds	r3, #8
 8018382:	9303      	str	r3, [sp, #12]
 8018384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018386:	444b      	add	r3, r9
 8018388:	9309      	str	r3, [sp, #36]	; 0x24
 801838a:	e750      	b.n	801822e <_vfiprintf_r+0x42>
 801838c:	fb05 3202 	mla	r2, r5, r2, r3
 8018390:	2001      	movs	r0, #1
 8018392:	4688      	mov	r8, r1
 8018394:	e78a      	b.n	80182ac <_vfiprintf_r+0xc0>
 8018396:	2300      	movs	r3, #0
 8018398:	250a      	movs	r5, #10
 801839a:	4619      	mov	r1, r3
 801839c:	f108 0801 	add.w	r8, r8, #1
 80183a0:	9305      	str	r3, [sp, #20]
 80183a2:	4640      	mov	r0, r8
 80183a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183a8:	3a30      	subs	r2, #48	; 0x30
 80183aa:	2a09      	cmp	r2, #9
 80183ac:	d903      	bls.n	80183b6 <_vfiprintf_r+0x1ca>
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d0c3      	beq.n	801833a <_vfiprintf_r+0x14e>
 80183b2:	9105      	str	r1, [sp, #20]
 80183b4:	e7c1      	b.n	801833a <_vfiprintf_r+0x14e>
 80183b6:	fb05 2101 	mla	r1, r5, r1, r2
 80183ba:	2301      	movs	r3, #1
 80183bc:	4680      	mov	r8, r0
 80183be:	e7f0      	b.n	80183a2 <_vfiprintf_r+0x1b6>
 80183c0:	ab03      	add	r3, sp, #12
 80183c2:	9300      	str	r3, [sp, #0]
 80183c4:	4622      	mov	r2, r4
 80183c6:	4b13      	ldr	r3, [pc, #76]	; (8018414 <_vfiprintf_r+0x228>)
 80183c8:	a904      	add	r1, sp, #16
 80183ca:	4630      	mov	r0, r6
 80183cc:	f3af 8000 	nop.w
 80183d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80183d4:	4681      	mov	r9, r0
 80183d6:	d1d5      	bne.n	8018384 <_vfiprintf_r+0x198>
 80183d8:	89a3      	ldrh	r3, [r4, #12]
 80183da:	065b      	lsls	r3, r3, #25
 80183dc:	f53f af7e 	bmi.w	80182dc <_vfiprintf_r+0xf0>
 80183e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183e2:	e77d      	b.n	80182e0 <_vfiprintf_r+0xf4>
 80183e4:	ab03      	add	r3, sp, #12
 80183e6:	9300      	str	r3, [sp, #0]
 80183e8:	4622      	mov	r2, r4
 80183ea:	4b0a      	ldr	r3, [pc, #40]	; (8018414 <_vfiprintf_r+0x228>)
 80183ec:	a904      	add	r1, sp, #16
 80183ee:	4630      	mov	r0, r6
 80183f0:	f000 f888 	bl	8018504 <_printf_i>
 80183f4:	e7ec      	b.n	80183d0 <_vfiprintf_r+0x1e4>
 80183f6:	bf00      	nop
 80183f8:	08019a0c 	.word	0x08019a0c
 80183fc:	08019a56 	.word	0x08019a56
 8018400:	08019a2c 	.word	0x08019a2c
 8018404:	080199ec 	.word	0x080199ec
 8018408:	08019a5c 	.word	0x08019a5c
 801840c:	08019a60 	.word	0x08019a60
 8018410:	00000000 	.word	0x00000000
 8018414:	080181c7 	.word	0x080181c7

08018418 <_printf_common>:
 8018418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801841c:	4691      	mov	r9, r2
 801841e:	461f      	mov	r7, r3
 8018420:	688a      	ldr	r2, [r1, #8]
 8018422:	690b      	ldr	r3, [r1, #16]
 8018424:	4606      	mov	r6, r0
 8018426:	4293      	cmp	r3, r2
 8018428:	bfb8      	it	lt
 801842a:	4613      	movlt	r3, r2
 801842c:	f8c9 3000 	str.w	r3, [r9]
 8018430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018434:	460c      	mov	r4, r1
 8018436:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801843a:	b112      	cbz	r2, 8018442 <_printf_common+0x2a>
 801843c:	3301      	adds	r3, #1
 801843e:	f8c9 3000 	str.w	r3, [r9]
 8018442:	6823      	ldr	r3, [r4, #0]
 8018444:	0699      	lsls	r1, r3, #26
 8018446:	bf42      	ittt	mi
 8018448:	f8d9 3000 	ldrmi.w	r3, [r9]
 801844c:	3302      	addmi	r3, #2
 801844e:	f8c9 3000 	strmi.w	r3, [r9]
 8018452:	6825      	ldr	r5, [r4, #0]
 8018454:	f015 0506 	ands.w	r5, r5, #6
 8018458:	d107      	bne.n	801846a <_printf_common+0x52>
 801845a:	f104 0a19 	add.w	sl, r4, #25
 801845e:	68e3      	ldr	r3, [r4, #12]
 8018460:	f8d9 2000 	ldr.w	r2, [r9]
 8018464:	1a9b      	subs	r3, r3, r2
 8018466:	42ab      	cmp	r3, r5
 8018468:	dc29      	bgt.n	80184be <_printf_common+0xa6>
 801846a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801846e:	6822      	ldr	r2, [r4, #0]
 8018470:	3300      	adds	r3, #0
 8018472:	bf18      	it	ne
 8018474:	2301      	movne	r3, #1
 8018476:	0692      	lsls	r2, r2, #26
 8018478:	d42e      	bmi.n	80184d8 <_printf_common+0xc0>
 801847a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801847e:	4639      	mov	r1, r7
 8018480:	4630      	mov	r0, r6
 8018482:	47c0      	blx	r8
 8018484:	3001      	adds	r0, #1
 8018486:	d021      	beq.n	80184cc <_printf_common+0xb4>
 8018488:	6823      	ldr	r3, [r4, #0]
 801848a:	68e5      	ldr	r5, [r4, #12]
 801848c:	f003 0306 	and.w	r3, r3, #6
 8018490:	2b04      	cmp	r3, #4
 8018492:	bf18      	it	ne
 8018494:	2500      	movne	r5, #0
 8018496:	f8d9 2000 	ldr.w	r2, [r9]
 801849a:	f04f 0900 	mov.w	r9, #0
 801849e:	bf08      	it	eq
 80184a0:	1aad      	subeq	r5, r5, r2
 80184a2:	68a3      	ldr	r3, [r4, #8]
 80184a4:	6922      	ldr	r2, [r4, #16]
 80184a6:	bf08      	it	eq
 80184a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80184ac:	4293      	cmp	r3, r2
 80184ae:	bfc4      	itt	gt
 80184b0:	1a9b      	subgt	r3, r3, r2
 80184b2:	18ed      	addgt	r5, r5, r3
 80184b4:	341a      	adds	r4, #26
 80184b6:	454d      	cmp	r5, r9
 80184b8:	d11a      	bne.n	80184f0 <_printf_common+0xd8>
 80184ba:	2000      	movs	r0, #0
 80184bc:	e008      	b.n	80184d0 <_printf_common+0xb8>
 80184be:	2301      	movs	r3, #1
 80184c0:	4652      	mov	r2, sl
 80184c2:	4639      	mov	r1, r7
 80184c4:	4630      	mov	r0, r6
 80184c6:	47c0      	blx	r8
 80184c8:	3001      	adds	r0, #1
 80184ca:	d103      	bne.n	80184d4 <_printf_common+0xbc>
 80184cc:	f04f 30ff 	mov.w	r0, #4294967295
 80184d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184d4:	3501      	adds	r5, #1
 80184d6:	e7c2      	b.n	801845e <_printf_common+0x46>
 80184d8:	2030      	movs	r0, #48	; 0x30
 80184da:	18e1      	adds	r1, r4, r3
 80184dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80184e0:	1c5a      	adds	r2, r3, #1
 80184e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80184e6:	4422      	add	r2, r4
 80184e8:	3302      	adds	r3, #2
 80184ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80184ee:	e7c4      	b.n	801847a <_printf_common+0x62>
 80184f0:	2301      	movs	r3, #1
 80184f2:	4622      	mov	r2, r4
 80184f4:	4639      	mov	r1, r7
 80184f6:	4630      	mov	r0, r6
 80184f8:	47c0      	blx	r8
 80184fa:	3001      	adds	r0, #1
 80184fc:	d0e6      	beq.n	80184cc <_printf_common+0xb4>
 80184fe:	f109 0901 	add.w	r9, r9, #1
 8018502:	e7d8      	b.n	80184b6 <_printf_common+0x9e>

08018504 <_printf_i>:
 8018504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018508:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801850c:	460c      	mov	r4, r1
 801850e:	7e09      	ldrb	r1, [r1, #24]
 8018510:	b085      	sub	sp, #20
 8018512:	296e      	cmp	r1, #110	; 0x6e
 8018514:	4617      	mov	r7, r2
 8018516:	4606      	mov	r6, r0
 8018518:	4698      	mov	r8, r3
 801851a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801851c:	f000 80b3 	beq.w	8018686 <_printf_i+0x182>
 8018520:	d822      	bhi.n	8018568 <_printf_i+0x64>
 8018522:	2963      	cmp	r1, #99	; 0x63
 8018524:	d036      	beq.n	8018594 <_printf_i+0x90>
 8018526:	d80a      	bhi.n	801853e <_printf_i+0x3a>
 8018528:	2900      	cmp	r1, #0
 801852a:	f000 80b9 	beq.w	80186a0 <_printf_i+0x19c>
 801852e:	2958      	cmp	r1, #88	; 0x58
 8018530:	f000 8083 	beq.w	801863a <_printf_i+0x136>
 8018534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018538:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801853c:	e032      	b.n	80185a4 <_printf_i+0xa0>
 801853e:	2964      	cmp	r1, #100	; 0x64
 8018540:	d001      	beq.n	8018546 <_printf_i+0x42>
 8018542:	2969      	cmp	r1, #105	; 0x69
 8018544:	d1f6      	bne.n	8018534 <_printf_i+0x30>
 8018546:	6820      	ldr	r0, [r4, #0]
 8018548:	6813      	ldr	r3, [r2, #0]
 801854a:	0605      	lsls	r5, r0, #24
 801854c:	f103 0104 	add.w	r1, r3, #4
 8018550:	d52a      	bpl.n	80185a8 <_printf_i+0xa4>
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	6011      	str	r1, [r2, #0]
 8018556:	2b00      	cmp	r3, #0
 8018558:	da03      	bge.n	8018562 <_printf_i+0x5e>
 801855a:	222d      	movs	r2, #45	; 0x2d
 801855c:	425b      	negs	r3, r3
 801855e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018562:	486f      	ldr	r0, [pc, #444]	; (8018720 <_printf_i+0x21c>)
 8018564:	220a      	movs	r2, #10
 8018566:	e039      	b.n	80185dc <_printf_i+0xd8>
 8018568:	2973      	cmp	r1, #115	; 0x73
 801856a:	f000 809d 	beq.w	80186a8 <_printf_i+0x1a4>
 801856e:	d808      	bhi.n	8018582 <_printf_i+0x7e>
 8018570:	296f      	cmp	r1, #111	; 0x6f
 8018572:	d020      	beq.n	80185b6 <_printf_i+0xb2>
 8018574:	2970      	cmp	r1, #112	; 0x70
 8018576:	d1dd      	bne.n	8018534 <_printf_i+0x30>
 8018578:	6823      	ldr	r3, [r4, #0]
 801857a:	f043 0320 	orr.w	r3, r3, #32
 801857e:	6023      	str	r3, [r4, #0]
 8018580:	e003      	b.n	801858a <_printf_i+0x86>
 8018582:	2975      	cmp	r1, #117	; 0x75
 8018584:	d017      	beq.n	80185b6 <_printf_i+0xb2>
 8018586:	2978      	cmp	r1, #120	; 0x78
 8018588:	d1d4      	bne.n	8018534 <_printf_i+0x30>
 801858a:	2378      	movs	r3, #120	; 0x78
 801858c:	4865      	ldr	r0, [pc, #404]	; (8018724 <_printf_i+0x220>)
 801858e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018592:	e055      	b.n	8018640 <_printf_i+0x13c>
 8018594:	6813      	ldr	r3, [r2, #0]
 8018596:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801859a:	1d19      	adds	r1, r3, #4
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	6011      	str	r1, [r2, #0]
 80185a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80185a4:	2301      	movs	r3, #1
 80185a6:	e08c      	b.n	80186c2 <_printf_i+0x1be>
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80185ae:	6011      	str	r1, [r2, #0]
 80185b0:	bf18      	it	ne
 80185b2:	b21b      	sxthne	r3, r3
 80185b4:	e7cf      	b.n	8018556 <_printf_i+0x52>
 80185b6:	6813      	ldr	r3, [r2, #0]
 80185b8:	6825      	ldr	r5, [r4, #0]
 80185ba:	1d18      	adds	r0, r3, #4
 80185bc:	6010      	str	r0, [r2, #0]
 80185be:	0628      	lsls	r0, r5, #24
 80185c0:	d501      	bpl.n	80185c6 <_printf_i+0xc2>
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	e002      	b.n	80185cc <_printf_i+0xc8>
 80185c6:	0668      	lsls	r0, r5, #25
 80185c8:	d5fb      	bpl.n	80185c2 <_printf_i+0xbe>
 80185ca:	881b      	ldrh	r3, [r3, #0]
 80185cc:	296f      	cmp	r1, #111	; 0x6f
 80185ce:	bf14      	ite	ne
 80185d0:	220a      	movne	r2, #10
 80185d2:	2208      	moveq	r2, #8
 80185d4:	4852      	ldr	r0, [pc, #328]	; (8018720 <_printf_i+0x21c>)
 80185d6:	2100      	movs	r1, #0
 80185d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80185dc:	6865      	ldr	r5, [r4, #4]
 80185de:	2d00      	cmp	r5, #0
 80185e0:	60a5      	str	r5, [r4, #8]
 80185e2:	f2c0 8095 	blt.w	8018710 <_printf_i+0x20c>
 80185e6:	6821      	ldr	r1, [r4, #0]
 80185e8:	f021 0104 	bic.w	r1, r1, #4
 80185ec:	6021      	str	r1, [r4, #0]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d13d      	bne.n	801866e <_printf_i+0x16a>
 80185f2:	2d00      	cmp	r5, #0
 80185f4:	f040 808e 	bne.w	8018714 <_printf_i+0x210>
 80185f8:	4665      	mov	r5, ip
 80185fa:	2a08      	cmp	r2, #8
 80185fc:	d10b      	bne.n	8018616 <_printf_i+0x112>
 80185fe:	6823      	ldr	r3, [r4, #0]
 8018600:	07db      	lsls	r3, r3, #31
 8018602:	d508      	bpl.n	8018616 <_printf_i+0x112>
 8018604:	6923      	ldr	r3, [r4, #16]
 8018606:	6862      	ldr	r2, [r4, #4]
 8018608:	429a      	cmp	r2, r3
 801860a:	bfde      	ittt	le
 801860c:	2330      	movle	r3, #48	; 0x30
 801860e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018612:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018616:	ebac 0305 	sub.w	r3, ip, r5
 801861a:	6123      	str	r3, [r4, #16]
 801861c:	f8cd 8000 	str.w	r8, [sp]
 8018620:	463b      	mov	r3, r7
 8018622:	aa03      	add	r2, sp, #12
 8018624:	4621      	mov	r1, r4
 8018626:	4630      	mov	r0, r6
 8018628:	f7ff fef6 	bl	8018418 <_printf_common>
 801862c:	3001      	adds	r0, #1
 801862e:	d14d      	bne.n	80186cc <_printf_i+0x1c8>
 8018630:	f04f 30ff 	mov.w	r0, #4294967295
 8018634:	b005      	add	sp, #20
 8018636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801863a:	4839      	ldr	r0, [pc, #228]	; (8018720 <_printf_i+0x21c>)
 801863c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018640:	6813      	ldr	r3, [r2, #0]
 8018642:	6821      	ldr	r1, [r4, #0]
 8018644:	1d1d      	adds	r5, r3, #4
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	6015      	str	r5, [r2, #0]
 801864a:	060a      	lsls	r2, r1, #24
 801864c:	d50b      	bpl.n	8018666 <_printf_i+0x162>
 801864e:	07ca      	lsls	r2, r1, #31
 8018650:	bf44      	itt	mi
 8018652:	f041 0120 	orrmi.w	r1, r1, #32
 8018656:	6021      	strmi	r1, [r4, #0]
 8018658:	b91b      	cbnz	r3, 8018662 <_printf_i+0x15e>
 801865a:	6822      	ldr	r2, [r4, #0]
 801865c:	f022 0220 	bic.w	r2, r2, #32
 8018660:	6022      	str	r2, [r4, #0]
 8018662:	2210      	movs	r2, #16
 8018664:	e7b7      	b.n	80185d6 <_printf_i+0xd2>
 8018666:	064d      	lsls	r5, r1, #25
 8018668:	bf48      	it	mi
 801866a:	b29b      	uxthmi	r3, r3
 801866c:	e7ef      	b.n	801864e <_printf_i+0x14a>
 801866e:	4665      	mov	r5, ip
 8018670:	fbb3 f1f2 	udiv	r1, r3, r2
 8018674:	fb02 3311 	mls	r3, r2, r1, r3
 8018678:	5cc3      	ldrb	r3, [r0, r3]
 801867a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801867e:	460b      	mov	r3, r1
 8018680:	2900      	cmp	r1, #0
 8018682:	d1f5      	bne.n	8018670 <_printf_i+0x16c>
 8018684:	e7b9      	b.n	80185fa <_printf_i+0xf6>
 8018686:	6813      	ldr	r3, [r2, #0]
 8018688:	6825      	ldr	r5, [r4, #0]
 801868a:	1d18      	adds	r0, r3, #4
 801868c:	6961      	ldr	r1, [r4, #20]
 801868e:	6010      	str	r0, [r2, #0]
 8018690:	0628      	lsls	r0, r5, #24
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	d501      	bpl.n	801869a <_printf_i+0x196>
 8018696:	6019      	str	r1, [r3, #0]
 8018698:	e002      	b.n	80186a0 <_printf_i+0x19c>
 801869a:	066a      	lsls	r2, r5, #25
 801869c:	d5fb      	bpl.n	8018696 <_printf_i+0x192>
 801869e:	8019      	strh	r1, [r3, #0]
 80186a0:	2300      	movs	r3, #0
 80186a2:	4665      	mov	r5, ip
 80186a4:	6123      	str	r3, [r4, #16]
 80186a6:	e7b9      	b.n	801861c <_printf_i+0x118>
 80186a8:	6813      	ldr	r3, [r2, #0]
 80186aa:	1d19      	adds	r1, r3, #4
 80186ac:	6011      	str	r1, [r2, #0]
 80186ae:	681d      	ldr	r5, [r3, #0]
 80186b0:	6862      	ldr	r2, [r4, #4]
 80186b2:	2100      	movs	r1, #0
 80186b4:	4628      	mov	r0, r5
 80186b6:	f7ff f915 	bl	80178e4 <memchr>
 80186ba:	b108      	cbz	r0, 80186c0 <_printf_i+0x1bc>
 80186bc:	1b40      	subs	r0, r0, r5
 80186be:	6060      	str	r0, [r4, #4]
 80186c0:	6863      	ldr	r3, [r4, #4]
 80186c2:	6123      	str	r3, [r4, #16]
 80186c4:	2300      	movs	r3, #0
 80186c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80186ca:	e7a7      	b.n	801861c <_printf_i+0x118>
 80186cc:	6923      	ldr	r3, [r4, #16]
 80186ce:	462a      	mov	r2, r5
 80186d0:	4639      	mov	r1, r7
 80186d2:	4630      	mov	r0, r6
 80186d4:	47c0      	blx	r8
 80186d6:	3001      	adds	r0, #1
 80186d8:	d0aa      	beq.n	8018630 <_printf_i+0x12c>
 80186da:	6823      	ldr	r3, [r4, #0]
 80186dc:	079b      	lsls	r3, r3, #30
 80186de:	d413      	bmi.n	8018708 <_printf_i+0x204>
 80186e0:	68e0      	ldr	r0, [r4, #12]
 80186e2:	9b03      	ldr	r3, [sp, #12]
 80186e4:	4298      	cmp	r0, r3
 80186e6:	bfb8      	it	lt
 80186e8:	4618      	movlt	r0, r3
 80186ea:	e7a3      	b.n	8018634 <_printf_i+0x130>
 80186ec:	2301      	movs	r3, #1
 80186ee:	464a      	mov	r2, r9
 80186f0:	4639      	mov	r1, r7
 80186f2:	4630      	mov	r0, r6
 80186f4:	47c0      	blx	r8
 80186f6:	3001      	adds	r0, #1
 80186f8:	d09a      	beq.n	8018630 <_printf_i+0x12c>
 80186fa:	3501      	adds	r5, #1
 80186fc:	68e3      	ldr	r3, [r4, #12]
 80186fe:	9a03      	ldr	r2, [sp, #12]
 8018700:	1a9b      	subs	r3, r3, r2
 8018702:	42ab      	cmp	r3, r5
 8018704:	dcf2      	bgt.n	80186ec <_printf_i+0x1e8>
 8018706:	e7eb      	b.n	80186e0 <_printf_i+0x1dc>
 8018708:	2500      	movs	r5, #0
 801870a:	f104 0919 	add.w	r9, r4, #25
 801870e:	e7f5      	b.n	80186fc <_printf_i+0x1f8>
 8018710:	2b00      	cmp	r3, #0
 8018712:	d1ac      	bne.n	801866e <_printf_i+0x16a>
 8018714:	7803      	ldrb	r3, [r0, #0]
 8018716:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801871a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801871e:	e76c      	b.n	80185fa <_printf_i+0xf6>
 8018720:	08019a67 	.word	0x08019a67
 8018724:	08019a78 	.word	0x08019a78

08018728 <__sread>:
 8018728:	b510      	push	{r4, lr}
 801872a:	460c      	mov	r4, r1
 801872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018730:	f000 fa7a 	bl	8018c28 <_read_r>
 8018734:	2800      	cmp	r0, #0
 8018736:	bfab      	itete	ge
 8018738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801873a:	89a3      	ldrhlt	r3, [r4, #12]
 801873c:	181b      	addge	r3, r3, r0
 801873e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018742:	bfac      	ite	ge
 8018744:	6563      	strge	r3, [r4, #84]	; 0x54
 8018746:	81a3      	strhlt	r3, [r4, #12]
 8018748:	bd10      	pop	{r4, pc}

0801874a <__swrite>:
 801874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801874e:	461f      	mov	r7, r3
 8018750:	898b      	ldrh	r3, [r1, #12]
 8018752:	4605      	mov	r5, r0
 8018754:	05db      	lsls	r3, r3, #23
 8018756:	460c      	mov	r4, r1
 8018758:	4616      	mov	r6, r2
 801875a:	d505      	bpl.n	8018768 <__swrite+0x1e>
 801875c:	2302      	movs	r3, #2
 801875e:	2200      	movs	r2, #0
 8018760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018764:	f000 f9c4 	bl	8018af0 <_lseek_r>
 8018768:	89a3      	ldrh	r3, [r4, #12]
 801876a:	4632      	mov	r2, r6
 801876c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018770:	81a3      	strh	r3, [r4, #12]
 8018772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018776:	463b      	mov	r3, r7
 8018778:	4628      	mov	r0, r5
 801877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801877e:	f000 b877 	b.w	8018870 <_write_r>

08018782 <__sseek>:
 8018782:	b510      	push	{r4, lr}
 8018784:	460c      	mov	r4, r1
 8018786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801878a:	f000 f9b1 	bl	8018af0 <_lseek_r>
 801878e:	1c43      	adds	r3, r0, #1
 8018790:	89a3      	ldrh	r3, [r4, #12]
 8018792:	bf15      	itete	ne
 8018794:	6560      	strne	r0, [r4, #84]	; 0x54
 8018796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801879a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801879e:	81a3      	strheq	r3, [r4, #12]
 80187a0:	bf18      	it	ne
 80187a2:	81a3      	strhne	r3, [r4, #12]
 80187a4:	bd10      	pop	{r4, pc}

080187a6 <__sclose>:
 80187a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187aa:	f000 b8e1 	b.w	8018970 <_close_r>
	...

080187b0 <__swbuf_r>:
 80187b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187b2:	460e      	mov	r6, r1
 80187b4:	4614      	mov	r4, r2
 80187b6:	4605      	mov	r5, r0
 80187b8:	b118      	cbz	r0, 80187c2 <__swbuf_r+0x12>
 80187ba:	6983      	ldr	r3, [r0, #24]
 80187bc:	b90b      	cbnz	r3, 80187c2 <__swbuf_r+0x12>
 80187be:	f7ff faf9 	bl	8017db4 <__sinit>
 80187c2:	4b21      	ldr	r3, [pc, #132]	; (8018848 <__swbuf_r+0x98>)
 80187c4:	429c      	cmp	r4, r3
 80187c6:	d12a      	bne.n	801881e <__swbuf_r+0x6e>
 80187c8:	686c      	ldr	r4, [r5, #4]
 80187ca:	69a3      	ldr	r3, [r4, #24]
 80187cc:	60a3      	str	r3, [r4, #8]
 80187ce:	89a3      	ldrh	r3, [r4, #12]
 80187d0:	071a      	lsls	r2, r3, #28
 80187d2:	d52e      	bpl.n	8018832 <__swbuf_r+0x82>
 80187d4:	6923      	ldr	r3, [r4, #16]
 80187d6:	b363      	cbz	r3, 8018832 <__swbuf_r+0x82>
 80187d8:	6923      	ldr	r3, [r4, #16]
 80187da:	6820      	ldr	r0, [r4, #0]
 80187dc:	b2f6      	uxtb	r6, r6
 80187de:	1ac0      	subs	r0, r0, r3
 80187e0:	6963      	ldr	r3, [r4, #20]
 80187e2:	4637      	mov	r7, r6
 80187e4:	4283      	cmp	r3, r0
 80187e6:	dc04      	bgt.n	80187f2 <__swbuf_r+0x42>
 80187e8:	4621      	mov	r1, r4
 80187ea:	4628      	mov	r0, r5
 80187ec:	f000 f956 	bl	8018a9c <_fflush_r>
 80187f0:	bb28      	cbnz	r0, 801883e <__swbuf_r+0x8e>
 80187f2:	68a3      	ldr	r3, [r4, #8]
 80187f4:	3001      	adds	r0, #1
 80187f6:	3b01      	subs	r3, #1
 80187f8:	60a3      	str	r3, [r4, #8]
 80187fa:	6823      	ldr	r3, [r4, #0]
 80187fc:	1c5a      	adds	r2, r3, #1
 80187fe:	6022      	str	r2, [r4, #0]
 8018800:	701e      	strb	r6, [r3, #0]
 8018802:	6963      	ldr	r3, [r4, #20]
 8018804:	4283      	cmp	r3, r0
 8018806:	d004      	beq.n	8018812 <__swbuf_r+0x62>
 8018808:	89a3      	ldrh	r3, [r4, #12]
 801880a:	07db      	lsls	r3, r3, #31
 801880c:	d519      	bpl.n	8018842 <__swbuf_r+0x92>
 801880e:	2e0a      	cmp	r6, #10
 8018810:	d117      	bne.n	8018842 <__swbuf_r+0x92>
 8018812:	4621      	mov	r1, r4
 8018814:	4628      	mov	r0, r5
 8018816:	f000 f941 	bl	8018a9c <_fflush_r>
 801881a:	b190      	cbz	r0, 8018842 <__swbuf_r+0x92>
 801881c:	e00f      	b.n	801883e <__swbuf_r+0x8e>
 801881e:	4b0b      	ldr	r3, [pc, #44]	; (801884c <__swbuf_r+0x9c>)
 8018820:	429c      	cmp	r4, r3
 8018822:	d101      	bne.n	8018828 <__swbuf_r+0x78>
 8018824:	68ac      	ldr	r4, [r5, #8]
 8018826:	e7d0      	b.n	80187ca <__swbuf_r+0x1a>
 8018828:	4b09      	ldr	r3, [pc, #36]	; (8018850 <__swbuf_r+0xa0>)
 801882a:	429c      	cmp	r4, r3
 801882c:	bf08      	it	eq
 801882e:	68ec      	ldreq	r4, [r5, #12]
 8018830:	e7cb      	b.n	80187ca <__swbuf_r+0x1a>
 8018832:	4621      	mov	r1, r4
 8018834:	4628      	mov	r0, r5
 8018836:	f000 f82d 	bl	8018894 <__swsetup_r>
 801883a:	2800      	cmp	r0, #0
 801883c:	d0cc      	beq.n	80187d8 <__swbuf_r+0x28>
 801883e:	f04f 37ff 	mov.w	r7, #4294967295
 8018842:	4638      	mov	r0, r7
 8018844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018846:	bf00      	nop
 8018848:	08019a0c 	.word	0x08019a0c
 801884c:	08019a2c 	.word	0x08019a2c
 8018850:	080199ec 	.word	0x080199ec

08018854 <__ascii_wctomb>:
 8018854:	b149      	cbz	r1, 801886a <__ascii_wctomb+0x16>
 8018856:	2aff      	cmp	r2, #255	; 0xff
 8018858:	bf8b      	itete	hi
 801885a:	238a      	movhi	r3, #138	; 0x8a
 801885c:	700a      	strbls	r2, [r1, #0]
 801885e:	6003      	strhi	r3, [r0, #0]
 8018860:	2001      	movls	r0, #1
 8018862:	bf88      	it	hi
 8018864:	f04f 30ff 	movhi.w	r0, #4294967295
 8018868:	4770      	bx	lr
 801886a:	4608      	mov	r0, r1
 801886c:	4770      	bx	lr
	...

08018870 <_write_r>:
 8018870:	b538      	push	{r3, r4, r5, lr}
 8018872:	4605      	mov	r5, r0
 8018874:	4608      	mov	r0, r1
 8018876:	4611      	mov	r1, r2
 8018878:	2200      	movs	r2, #0
 801887a:	4c05      	ldr	r4, [pc, #20]	; (8018890 <_write_r+0x20>)
 801887c:	6022      	str	r2, [r4, #0]
 801887e:	461a      	mov	r2, r3
 8018880:	f7e9 fb8e 	bl	8001fa0 <_write>
 8018884:	1c43      	adds	r3, r0, #1
 8018886:	d102      	bne.n	801888e <_write_r+0x1e>
 8018888:	6823      	ldr	r3, [r4, #0]
 801888a:	b103      	cbz	r3, 801888e <_write_r+0x1e>
 801888c:	602b      	str	r3, [r5, #0]
 801888e:	bd38      	pop	{r3, r4, r5, pc}
 8018890:	200021a0 	.word	0x200021a0

08018894 <__swsetup_r>:
 8018894:	4b32      	ldr	r3, [pc, #200]	; (8018960 <__swsetup_r+0xcc>)
 8018896:	b570      	push	{r4, r5, r6, lr}
 8018898:	681d      	ldr	r5, [r3, #0]
 801889a:	4606      	mov	r6, r0
 801889c:	460c      	mov	r4, r1
 801889e:	b125      	cbz	r5, 80188aa <__swsetup_r+0x16>
 80188a0:	69ab      	ldr	r3, [r5, #24]
 80188a2:	b913      	cbnz	r3, 80188aa <__swsetup_r+0x16>
 80188a4:	4628      	mov	r0, r5
 80188a6:	f7ff fa85 	bl	8017db4 <__sinit>
 80188aa:	4b2e      	ldr	r3, [pc, #184]	; (8018964 <__swsetup_r+0xd0>)
 80188ac:	429c      	cmp	r4, r3
 80188ae:	d10f      	bne.n	80188d0 <__swsetup_r+0x3c>
 80188b0:	686c      	ldr	r4, [r5, #4]
 80188b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188b6:	b29a      	uxth	r2, r3
 80188b8:	0715      	lsls	r5, r2, #28
 80188ba:	d42c      	bmi.n	8018916 <__swsetup_r+0x82>
 80188bc:	06d0      	lsls	r0, r2, #27
 80188be:	d411      	bmi.n	80188e4 <__swsetup_r+0x50>
 80188c0:	2209      	movs	r2, #9
 80188c2:	6032      	str	r2, [r6, #0]
 80188c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188c8:	81a3      	strh	r3, [r4, #12]
 80188ca:	f04f 30ff 	mov.w	r0, #4294967295
 80188ce:	e03e      	b.n	801894e <__swsetup_r+0xba>
 80188d0:	4b25      	ldr	r3, [pc, #148]	; (8018968 <__swsetup_r+0xd4>)
 80188d2:	429c      	cmp	r4, r3
 80188d4:	d101      	bne.n	80188da <__swsetup_r+0x46>
 80188d6:	68ac      	ldr	r4, [r5, #8]
 80188d8:	e7eb      	b.n	80188b2 <__swsetup_r+0x1e>
 80188da:	4b24      	ldr	r3, [pc, #144]	; (801896c <__swsetup_r+0xd8>)
 80188dc:	429c      	cmp	r4, r3
 80188de:	bf08      	it	eq
 80188e0:	68ec      	ldreq	r4, [r5, #12]
 80188e2:	e7e6      	b.n	80188b2 <__swsetup_r+0x1e>
 80188e4:	0751      	lsls	r1, r2, #29
 80188e6:	d512      	bpl.n	801890e <__swsetup_r+0x7a>
 80188e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80188ea:	b141      	cbz	r1, 80188fe <__swsetup_r+0x6a>
 80188ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80188f0:	4299      	cmp	r1, r3
 80188f2:	d002      	beq.n	80188fa <__swsetup_r+0x66>
 80188f4:	4630      	mov	r0, r6
 80188f6:	f7ff f83f 	bl	8017978 <_free_r>
 80188fa:	2300      	movs	r3, #0
 80188fc:	6363      	str	r3, [r4, #52]	; 0x34
 80188fe:	89a3      	ldrh	r3, [r4, #12]
 8018900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018904:	81a3      	strh	r3, [r4, #12]
 8018906:	2300      	movs	r3, #0
 8018908:	6063      	str	r3, [r4, #4]
 801890a:	6923      	ldr	r3, [r4, #16]
 801890c:	6023      	str	r3, [r4, #0]
 801890e:	89a3      	ldrh	r3, [r4, #12]
 8018910:	f043 0308 	orr.w	r3, r3, #8
 8018914:	81a3      	strh	r3, [r4, #12]
 8018916:	6923      	ldr	r3, [r4, #16]
 8018918:	b94b      	cbnz	r3, 801892e <__swsetup_r+0x9a>
 801891a:	89a3      	ldrh	r3, [r4, #12]
 801891c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018924:	d003      	beq.n	801892e <__swsetup_r+0x9a>
 8018926:	4621      	mov	r1, r4
 8018928:	4630      	mov	r0, r6
 801892a:	f000 f917 	bl	8018b5c <__smakebuf_r>
 801892e:	89a2      	ldrh	r2, [r4, #12]
 8018930:	f012 0301 	ands.w	r3, r2, #1
 8018934:	d00c      	beq.n	8018950 <__swsetup_r+0xbc>
 8018936:	2300      	movs	r3, #0
 8018938:	60a3      	str	r3, [r4, #8]
 801893a:	6963      	ldr	r3, [r4, #20]
 801893c:	425b      	negs	r3, r3
 801893e:	61a3      	str	r3, [r4, #24]
 8018940:	6923      	ldr	r3, [r4, #16]
 8018942:	b953      	cbnz	r3, 801895a <__swsetup_r+0xc6>
 8018944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018948:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801894c:	d1ba      	bne.n	80188c4 <__swsetup_r+0x30>
 801894e:	bd70      	pop	{r4, r5, r6, pc}
 8018950:	0792      	lsls	r2, r2, #30
 8018952:	bf58      	it	pl
 8018954:	6963      	ldrpl	r3, [r4, #20]
 8018956:	60a3      	str	r3, [r4, #8]
 8018958:	e7f2      	b.n	8018940 <__swsetup_r+0xac>
 801895a:	2000      	movs	r0, #0
 801895c:	e7f7      	b.n	801894e <__swsetup_r+0xba>
 801895e:	bf00      	nop
 8018960:	20000728 	.word	0x20000728
 8018964:	08019a0c 	.word	0x08019a0c
 8018968:	08019a2c 	.word	0x08019a2c
 801896c:	080199ec 	.word	0x080199ec

08018970 <_close_r>:
 8018970:	b538      	push	{r3, r4, r5, lr}
 8018972:	2300      	movs	r3, #0
 8018974:	4c05      	ldr	r4, [pc, #20]	; (801898c <_close_r+0x1c>)
 8018976:	4605      	mov	r5, r0
 8018978:	4608      	mov	r0, r1
 801897a:	6023      	str	r3, [r4, #0]
 801897c:	f7e9 fb2c 	bl	8001fd8 <_close>
 8018980:	1c43      	adds	r3, r0, #1
 8018982:	d102      	bne.n	801898a <_close_r+0x1a>
 8018984:	6823      	ldr	r3, [r4, #0]
 8018986:	b103      	cbz	r3, 801898a <_close_r+0x1a>
 8018988:	602b      	str	r3, [r5, #0]
 801898a:	bd38      	pop	{r3, r4, r5, pc}
 801898c:	200021a0 	.word	0x200021a0

08018990 <__sflush_r>:
 8018990:	898a      	ldrh	r2, [r1, #12]
 8018992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018996:	4605      	mov	r5, r0
 8018998:	0710      	lsls	r0, r2, #28
 801899a:	460c      	mov	r4, r1
 801899c:	d458      	bmi.n	8018a50 <__sflush_r+0xc0>
 801899e:	684b      	ldr	r3, [r1, #4]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	dc05      	bgt.n	80189b0 <__sflush_r+0x20>
 80189a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	dc02      	bgt.n	80189b0 <__sflush_r+0x20>
 80189aa:	2000      	movs	r0, #0
 80189ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80189b2:	2e00      	cmp	r6, #0
 80189b4:	d0f9      	beq.n	80189aa <__sflush_r+0x1a>
 80189b6:	2300      	movs	r3, #0
 80189b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80189bc:	682f      	ldr	r7, [r5, #0]
 80189be:	6a21      	ldr	r1, [r4, #32]
 80189c0:	602b      	str	r3, [r5, #0]
 80189c2:	d032      	beq.n	8018a2a <__sflush_r+0x9a>
 80189c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80189c6:	89a3      	ldrh	r3, [r4, #12]
 80189c8:	075a      	lsls	r2, r3, #29
 80189ca:	d505      	bpl.n	80189d8 <__sflush_r+0x48>
 80189cc:	6863      	ldr	r3, [r4, #4]
 80189ce:	1ac0      	subs	r0, r0, r3
 80189d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80189d2:	b10b      	cbz	r3, 80189d8 <__sflush_r+0x48>
 80189d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80189d6:	1ac0      	subs	r0, r0, r3
 80189d8:	2300      	movs	r3, #0
 80189da:	4602      	mov	r2, r0
 80189dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80189de:	6a21      	ldr	r1, [r4, #32]
 80189e0:	4628      	mov	r0, r5
 80189e2:	47b0      	blx	r6
 80189e4:	1c43      	adds	r3, r0, #1
 80189e6:	89a3      	ldrh	r3, [r4, #12]
 80189e8:	d106      	bne.n	80189f8 <__sflush_r+0x68>
 80189ea:	6829      	ldr	r1, [r5, #0]
 80189ec:	291d      	cmp	r1, #29
 80189ee:	d848      	bhi.n	8018a82 <__sflush_r+0xf2>
 80189f0:	4a29      	ldr	r2, [pc, #164]	; (8018a98 <__sflush_r+0x108>)
 80189f2:	40ca      	lsrs	r2, r1
 80189f4:	07d6      	lsls	r6, r2, #31
 80189f6:	d544      	bpl.n	8018a82 <__sflush_r+0xf2>
 80189f8:	2200      	movs	r2, #0
 80189fa:	6062      	str	r2, [r4, #4]
 80189fc:	6922      	ldr	r2, [r4, #16]
 80189fe:	04d9      	lsls	r1, r3, #19
 8018a00:	6022      	str	r2, [r4, #0]
 8018a02:	d504      	bpl.n	8018a0e <__sflush_r+0x7e>
 8018a04:	1c42      	adds	r2, r0, #1
 8018a06:	d101      	bne.n	8018a0c <__sflush_r+0x7c>
 8018a08:	682b      	ldr	r3, [r5, #0]
 8018a0a:	b903      	cbnz	r3, 8018a0e <__sflush_r+0x7e>
 8018a0c:	6560      	str	r0, [r4, #84]	; 0x54
 8018a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018a10:	602f      	str	r7, [r5, #0]
 8018a12:	2900      	cmp	r1, #0
 8018a14:	d0c9      	beq.n	80189aa <__sflush_r+0x1a>
 8018a16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018a1a:	4299      	cmp	r1, r3
 8018a1c:	d002      	beq.n	8018a24 <__sflush_r+0x94>
 8018a1e:	4628      	mov	r0, r5
 8018a20:	f7fe ffaa 	bl	8017978 <_free_r>
 8018a24:	2000      	movs	r0, #0
 8018a26:	6360      	str	r0, [r4, #52]	; 0x34
 8018a28:	e7c0      	b.n	80189ac <__sflush_r+0x1c>
 8018a2a:	2301      	movs	r3, #1
 8018a2c:	4628      	mov	r0, r5
 8018a2e:	47b0      	blx	r6
 8018a30:	1c41      	adds	r1, r0, #1
 8018a32:	d1c8      	bne.n	80189c6 <__sflush_r+0x36>
 8018a34:	682b      	ldr	r3, [r5, #0]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d0c5      	beq.n	80189c6 <__sflush_r+0x36>
 8018a3a:	2b1d      	cmp	r3, #29
 8018a3c:	d001      	beq.n	8018a42 <__sflush_r+0xb2>
 8018a3e:	2b16      	cmp	r3, #22
 8018a40:	d101      	bne.n	8018a46 <__sflush_r+0xb6>
 8018a42:	602f      	str	r7, [r5, #0]
 8018a44:	e7b1      	b.n	80189aa <__sflush_r+0x1a>
 8018a46:	89a3      	ldrh	r3, [r4, #12]
 8018a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a4c:	81a3      	strh	r3, [r4, #12]
 8018a4e:	e7ad      	b.n	80189ac <__sflush_r+0x1c>
 8018a50:	690f      	ldr	r7, [r1, #16]
 8018a52:	2f00      	cmp	r7, #0
 8018a54:	d0a9      	beq.n	80189aa <__sflush_r+0x1a>
 8018a56:	0793      	lsls	r3, r2, #30
 8018a58:	bf18      	it	ne
 8018a5a:	2300      	movne	r3, #0
 8018a5c:	680e      	ldr	r6, [r1, #0]
 8018a5e:	bf08      	it	eq
 8018a60:	694b      	ldreq	r3, [r1, #20]
 8018a62:	eba6 0807 	sub.w	r8, r6, r7
 8018a66:	600f      	str	r7, [r1, #0]
 8018a68:	608b      	str	r3, [r1, #8]
 8018a6a:	f1b8 0f00 	cmp.w	r8, #0
 8018a6e:	dd9c      	ble.n	80189aa <__sflush_r+0x1a>
 8018a70:	4643      	mov	r3, r8
 8018a72:	463a      	mov	r2, r7
 8018a74:	6a21      	ldr	r1, [r4, #32]
 8018a76:	4628      	mov	r0, r5
 8018a78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018a7a:	47b0      	blx	r6
 8018a7c:	2800      	cmp	r0, #0
 8018a7e:	dc06      	bgt.n	8018a8e <__sflush_r+0xfe>
 8018a80:	89a3      	ldrh	r3, [r4, #12]
 8018a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a86:	81a3      	strh	r3, [r4, #12]
 8018a88:	f04f 30ff 	mov.w	r0, #4294967295
 8018a8c:	e78e      	b.n	80189ac <__sflush_r+0x1c>
 8018a8e:	4407      	add	r7, r0
 8018a90:	eba8 0800 	sub.w	r8, r8, r0
 8018a94:	e7e9      	b.n	8018a6a <__sflush_r+0xda>
 8018a96:	bf00      	nop
 8018a98:	20400001 	.word	0x20400001

08018a9c <_fflush_r>:
 8018a9c:	b538      	push	{r3, r4, r5, lr}
 8018a9e:	690b      	ldr	r3, [r1, #16]
 8018aa0:	4605      	mov	r5, r0
 8018aa2:	460c      	mov	r4, r1
 8018aa4:	b1db      	cbz	r3, 8018ade <_fflush_r+0x42>
 8018aa6:	b118      	cbz	r0, 8018ab0 <_fflush_r+0x14>
 8018aa8:	6983      	ldr	r3, [r0, #24]
 8018aaa:	b90b      	cbnz	r3, 8018ab0 <_fflush_r+0x14>
 8018aac:	f7ff f982 	bl	8017db4 <__sinit>
 8018ab0:	4b0c      	ldr	r3, [pc, #48]	; (8018ae4 <_fflush_r+0x48>)
 8018ab2:	429c      	cmp	r4, r3
 8018ab4:	d109      	bne.n	8018aca <_fflush_r+0x2e>
 8018ab6:	686c      	ldr	r4, [r5, #4]
 8018ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018abc:	b17b      	cbz	r3, 8018ade <_fflush_r+0x42>
 8018abe:	4621      	mov	r1, r4
 8018ac0:	4628      	mov	r0, r5
 8018ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ac6:	f7ff bf63 	b.w	8018990 <__sflush_r>
 8018aca:	4b07      	ldr	r3, [pc, #28]	; (8018ae8 <_fflush_r+0x4c>)
 8018acc:	429c      	cmp	r4, r3
 8018ace:	d101      	bne.n	8018ad4 <_fflush_r+0x38>
 8018ad0:	68ac      	ldr	r4, [r5, #8]
 8018ad2:	e7f1      	b.n	8018ab8 <_fflush_r+0x1c>
 8018ad4:	4b05      	ldr	r3, [pc, #20]	; (8018aec <_fflush_r+0x50>)
 8018ad6:	429c      	cmp	r4, r3
 8018ad8:	bf08      	it	eq
 8018ada:	68ec      	ldreq	r4, [r5, #12]
 8018adc:	e7ec      	b.n	8018ab8 <_fflush_r+0x1c>
 8018ade:	2000      	movs	r0, #0
 8018ae0:	bd38      	pop	{r3, r4, r5, pc}
 8018ae2:	bf00      	nop
 8018ae4:	08019a0c 	.word	0x08019a0c
 8018ae8:	08019a2c 	.word	0x08019a2c
 8018aec:	080199ec 	.word	0x080199ec

08018af0 <_lseek_r>:
 8018af0:	b538      	push	{r3, r4, r5, lr}
 8018af2:	4605      	mov	r5, r0
 8018af4:	4608      	mov	r0, r1
 8018af6:	4611      	mov	r1, r2
 8018af8:	2200      	movs	r2, #0
 8018afa:	4c05      	ldr	r4, [pc, #20]	; (8018b10 <_lseek_r+0x20>)
 8018afc:	6022      	str	r2, [r4, #0]
 8018afe:	461a      	mov	r2, r3
 8018b00:	f7e9 fa8e 	bl	8002020 <_lseek>
 8018b04:	1c43      	adds	r3, r0, #1
 8018b06:	d102      	bne.n	8018b0e <_lseek_r+0x1e>
 8018b08:	6823      	ldr	r3, [r4, #0]
 8018b0a:	b103      	cbz	r3, 8018b0e <_lseek_r+0x1e>
 8018b0c:	602b      	str	r3, [r5, #0]
 8018b0e:	bd38      	pop	{r3, r4, r5, pc}
 8018b10:	200021a0 	.word	0x200021a0

08018b14 <__swhatbuf_r>:
 8018b14:	b570      	push	{r4, r5, r6, lr}
 8018b16:	460e      	mov	r6, r1
 8018b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b1c:	b096      	sub	sp, #88	; 0x58
 8018b1e:	2900      	cmp	r1, #0
 8018b20:	4614      	mov	r4, r2
 8018b22:	461d      	mov	r5, r3
 8018b24:	da07      	bge.n	8018b36 <__swhatbuf_r+0x22>
 8018b26:	2300      	movs	r3, #0
 8018b28:	602b      	str	r3, [r5, #0]
 8018b2a:	89b3      	ldrh	r3, [r6, #12]
 8018b2c:	061a      	lsls	r2, r3, #24
 8018b2e:	d410      	bmi.n	8018b52 <__swhatbuf_r+0x3e>
 8018b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b34:	e00e      	b.n	8018b54 <__swhatbuf_r+0x40>
 8018b36:	466a      	mov	r2, sp
 8018b38:	f000 f888 	bl	8018c4c <_fstat_r>
 8018b3c:	2800      	cmp	r0, #0
 8018b3e:	dbf2      	blt.n	8018b26 <__swhatbuf_r+0x12>
 8018b40:	9a01      	ldr	r2, [sp, #4]
 8018b42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018b46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018b4a:	425a      	negs	r2, r3
 8018b4c:	415a      	adcs	r2, r3
 8018b4e:	602a      	str	r2, [r5, #0]
 8018b50:	e7ee      	b.n	8018b30 <__swhatbuf_r+0x1c>
 8018b52:	2340      	movs	r3, #64	; 0x40
 8018b54:	2000      	movs	r0, #0
 8018b56:	6023      	str	r3, [r4, #0]
 8018b58:	b016      	add	sp, #88	; 0x58
 8018b5a:	bd70      	pop	{r4, r5, r6, pc}

08018b5c <__smakebuf_r>:
 8018b5c:	898b      	ldrh	r3, [r1, #12]
 8018b5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018b60:	079d      	lsls	r5, r3, #30
 8018b62:	4606      	mov	r6, r0
 8018b64:	460c      	mov	r4, r1
 8018b66:	d507      	bpl.n	8018b78 <__smakebuf_r+0x1c>
 8018b68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018b6c:	6023      	str	r3, [r4, #0]
 8018b6e:	6123      	str	r3, [r4, #16]
 8018b70:	2301      	movs	r3, #1
 8018b72:	6163      	str	r3, [r4, #20]
 8018b74:	b002      	add	sp, #8
 8018b76:	bd70      	pop	{r4, r5, r6, pc}
 8018b78:	ab01      	add	r3, sp, #4
 8018b7a:	466a      	mov	r2, sp
 8018b7c:	f7ff ffca 	bl	8018b14 <__swhatbuf_r>
 8018b80:	9900      	ldr	r1, [sp, #0]
 8018b82:	4605      	mov	r5, r0
 8018b84:	4630      	mov	r0, r6
 8018b86:	f7fe ff43 	bl	8017a10 <_malloc_r>
 8018b8a:	b948      	cbnz	r0, 8018ba0 <__smakebuf_r+0x44>
 8018b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b90:	059a      	lsls	r2, r3, #22
 8018b92:	d4ef      	bmi.n	8018b74 <__smakebuf_r+0x18>
 8018b94:	f023 0303 	bic.w	r3, r3, #3
 8018b98:	f043 0302 	orr.w	r3, r3, #2
 8018b9c:	81a3      	strh	r3, [r4, #12]
 8018b9e:	e7e3      	b.n	8018b68 <__smakebuf_r+0xc>
 8018ba0:	4b0d      	ldr	r3, [pc, #52]	; (8018bd8 <__smakebuf_r+0x7c>)
 8018ba2:	62b3      	str	r3, [r6, #40]	; 0x28
 8018ba4:	89a3      	ldrh	r3, [r4, #12]
 8018ba6:	6020      	str	r0, [r4, #0]
 8018ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bac:	81a3      	strh	r3, [r4, #12]
 8018bae:	9b00      	ldr	r3, [sp, #0]
 8018bb0:	6120      	str	r0, [r4, #16]
 8018bb2:	6163      	str	r3, [r4, #20]
 8018bb4:	9b01      	ldr	r3, [sp, #4]
 8018bb6:	b15b      	cbz	r3, 8018bd0 <__smakebuf_r+0x74>
 8018bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018bbc:	4630      	mov	r0, r6
 8018bbe:	f000 f857 	bl	8018c70 <_isatty_r>
 8018bc2:	b128      	cbz	r0, 8018bd0 <__smakebuf_r+0x74>
 8018bc4:	89a3      	ldrh	r3, [r4, #12]
 8018bc6:	f023 0303 	bic.w	r3, r3, #3
 8018bca:	f043 0301 	orr.w	r3, r3, #1
 8018bce:	81a3      	strh	r3, [r4, #12]
 8018bd0:	89a3      	ldrh	r3, [r4, #12]
 8018bd2:	431d      	orrs	r5, r3
 8018bd4:	81a5      	strh	r5, [r4, #12]
 8018bd6:	e7cd      	b.n	8018b74 <__smakebuf_r+0x18>
 8018bd8:	08017d7d 	.word	0x08017d7d

08018bdc <_realloc_r>:
 8018bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bde:	4607      	mov	r7, r0
 8018be0:	4614      	mov	r4, r2
 8018be2:	460e      	mov	r6, r1
 8018be4:	b921      	cbnz	r1, 8018bf0 <_realloc_r+0x14>
 8018be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018bea:	4611      	mov	r1, r2
 8018bec:	f7fe bf10 	b.w	8017a10 <_malloc_r>
 8018bf0:	b922      	cbnz	r2, 8018bfc <_realloc_r+0x20>
 8018bf2:	f7fe fec1 	bl	8017978 <_free_r>
 8018bf6:	4625      	mov	r5, r4
 8018bf8:	4628      	mov	r0, r5
 8018bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bfc:	f000 f848 	bl	8018c90 <_malloc_usable_size_r>
 8018c00:	42a0      	cmp	r0, r4
 8018c02:	d20f      	bcs.n	8018c24 <_realloc_r+0x48>
 8018c04:	4621      	mov	r1, r4
 8018c06:	4638      	mov	r0, r7
 8018c08:	f7fe ff02 	bl	8017a10 <_malloc_r>
 8018c0c:	4605      	mov	r5, r0
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	d0f2      	beq.n	8018bf8 <_realloc_r+0x1c>
 8018c12:	4631      	mov	r1, r6
 8018c14:	4622      	mov	r2, r4
 8018c16:	f7fe fe82 	bl	801791e <memcpy>
 8018c1a:	4631      	mov	r1, r6
 8018c1c:	4638      	mov	r0, r7
 8018c1e:	f7fe feab 	bl	8017978 <_free_r>
 8018c22:	e7e9      	b.n	8018bf8 <_realloc_r+0x1c>
 8018c24:	4635      	mov	r5, r6
 8018c26:	e7e7      	b.n	8018bf8 <_realloc_r+0x1c>

08018c28 <_read_r>:
 8018c28:	b538      	push	{r3, r4, r5, lr}
 8018c2a:	4605      	mov	r5, r0
 8018c2c:	4608      	mov	r0, r1
 8018c2e:	4611      	mov	r1, r2
 8018c30:	2200      	movs	r2, #0
 8018c32:	4c05      	ldr	r4, [pc, #20]	; (8018c48 <_read_r+0x20>)
 8018c34:	6022      	str	r2, [r4, #0]
 8018c36:	461a      	mov	r2, r3
 8018c38:	f7e9 f995 	bl	8001f66 <_read>
 8018c3c:	1c43      	adds	r3, r0, #1
 8018c3e:	d102      	bne.n	8018c46 <_read_r+0x1e>
 8018c40:	6823      	ldr	r3, [r4, #0]
 8018c42:	b103      	cbz	r3, 8018c46 <_read_r+0x1e>
 8018c44:	602b      	str	r3, [r5, #0]
 8018c46:	bd38      	pop	{r3, r4, r5, pc}
 8018c48:	200021a0 	.word	0x200021a0

08018c4c <_fstat_r>:
 8018c4c:	b538      	push	{r3, r4, r5, lr}
 8018c4e:	2300      	movs	r3, #0
 8018c50:	4c06      	ldr	r4, [pc, #24]	; (8018c6c <_fstat_r+0x20>)
 8018c52:	4605      	mov	r5, r0
 8018c54:	4608      	mov	r0, r1
 8018c56:	4611      	mov	r1, r2
 8018c58:	6023      	str	r3, [r4, #0]
 8018c5a:	f7e9 f9c8 	bl	8001fee <_fstat>
 8018c5e:	1c43      	adds	r3, r0, #1
 8018c60:	d102      	bne.n	8018c68 <_fstat_r+0x1c>
 8018c62:	6823      	ldr	r3, [r4, #0]
 8018c64:	b103      	cbz	r3, 8018c68 <_fstat_r+0x1c>
 8018c66:	602b      	str	r3, [r5, #0]
 8018c68:	bd38      	pop	{r3, r4, r5, pc}
 8018c6a:	bf00      	nop
 8018c6c:	200021a0 	.word	0x200021a0

08018c70 <_isatty_r>:
 8018c70:	b538      	push	{r3, r4, r5, lr}
 8018c72:	2300      	movs	r3, #0
 8018c74:	4c05      	ldr	r4, [pc, #20]	; (8018c8c <_isatty_r+0x1c>)
 8018c76:	4605      	mov	r5, r0
 8018c78:	4608      	mov	r0, r1
 8018c7a:	6023      	str	r3, [r4, #0]
 8018c7c:	f7e9 f9c6 	bl	800200c <_isatty>
 8018c80:	1c43      	adds	r3, r0, #1
 8018c82:	d102      	bne.n	8018c8a <_isatty_r+0x1a>
 8018c84:	6823      	ldr	r3, [r4, #0]
 8018c86:	b103      	cbz	r3, 8018c8a <_isatty_r+0x1a>
 8018c88:	602b      	str	r3, [r5, #0]
 8018c8a:	bd38      	pop	{r3, r4, r5, pc}
 8018c8c:	200021a0 	.word	0x200021a0

08018c90 <_malloc_usable_size_r>:
 8018c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c94:	1f18      	subs	r0, r3, #4
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	bfbc      	itt	lt
 8018c9a:	580b      	ldrlt	r3, [r1, r0]
 8018c9c:	18c0      	addlt	r0, r0, r3
 8018c9e:	4770      	bx	lr

08018ca0 <_init>:
 8018ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ca2:	bf00      	nop
 8018ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ca6:	bc08      	pop	{r3}
 8018ca8:	469e      	mov	lr, r3
 8018caa:	4770      	bx	lr

08018cac <_fini>:
 8018cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cae:	bf00      	nop
 8018cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018cb2:	bc08      	pop	{r3}
 8018cb4:	469e      	mov	lr, r3
 8018cb6:	4770      	bx	lr
