
USBWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d400  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  0800d510  0800d510  0001d510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e304  0800e304  000208f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e304  0800e304  000208f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e304  0800e304  000208f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800e304  0800e304  0001e304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e310  0800e310  0001e310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008f8  20000000  0800e318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a4  200008f8  0800ec10  000208f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000219c  0800ec10  0002219c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000208f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007be87  00000000  00000000  00020921  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000d111  00000000  00000000  0009c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a0  00000000  00000000  000a98c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ea8  00000000  00000000  000ab160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024182  00000000  00000000  000ae008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028a27  00000000  00000000  000d218a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7179  00000000  00000000  000fabb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a1d2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb4  00000000  00000000  001a1da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000137c4  00000000  00000000  001a8a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200008f8 	.word	0x200008f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d4f8 	.word	0x0800d4f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200008fc 	.word	0x200008fc
 800014c:	0800d4f8 	.word	0x0800d4f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <cppmain>:
extern uint16_t BUF_DMA [ARRAY_LEN];
extern TIM_HandleTypeDef htim2;

USBD_HandleTypeDef hUsbDeviceFS;

void cppmain() {
 8001148:	b538      	push	{r3, r4, r5, lr}

	ws2812_init();
 800114a:	f006 fc9d 	bl	8007a88 <_Z11ws2812_initv>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 800114e:	f44f 735e 	mov.w	r3, #888	; 0x378
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <cppmain+0x48>)
 8001154:	2100      	movs	r1, #0
 8001156:	480f      	ldr	r0, [pc, #60]	; (8001194 <cppmain+0x4c>)
 8001158:	f003 f98e 	bl	8004478 <HAL_TIM_PWM_Start_DMA>
	HAL_ADC_Start_DMA(&HADC, ADC_BUF, ADC_CHANNELS);
 800115c:	2202      	movs	r2, #2
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <cppmain+0x50>)
 8001160:	480e      	ldr	r0, [pc, #56]	; (800119c <cppmain+0x54>)
 8001162:	f000 fe0b 	bl	8001d7c <HAL_ADC_Start_DMA>

	mainclass = new FFBWheel();
 8001166:	20bc      	movs	r0, #188	; 0xbc
 8001168:	f007 fe80 	bl	8008e6c <_Znwj>
 800116c:	4605      	mov	r5, r0
 800116e:	4c0c      	ldr	r4, [pc, #48]	; (80011a0 <cppmain+0x58>)
 8001170:	f004 fd92 	bl	8005c98 <_ZN8FFBWheelC1Ev>
	mainclass->usbInit();
 8001174:	4628      	mov	r0, r5
	mainclass = new FFBWheel();
 8001176:	6025      	str	r5, [r4, #0]
	mainclass->usbInit();
 8001178:	f004 fcce 	bl	8005b18 <_ZN8FFBWheel7usbInitEv>

	while(running){
 800117c:	4d09      	ldr	r5, [pc, #36]	; (80011a4 <cppmain+0x5c>)
 800117e:	782b      	ldrb	r3, [r5, #0]
 8001180:	b12b      	cbz	r3, 800118e <cppmain+0x46>
		mainclass->update();
 8001182:	6820      	ldr	r0, [r4, #0]
 8001184:	f004 fc22 	bl	80059cc <_ZN8FFBWheel6updateEv>
		updateLeds();
 8001188:	f006 fc66 	bl	8007a58 <_Z10updateLedsv>
	while(running){
 800118c:	e7f7      	b.n	800117e <cppmain+0x36>
	}

}
 800118e:	bd38      	pop	{r3, r4, r5, pc}
 8001190:	20000b8c 	.word	0x20000b8c
 8001194:	200016d8 	.word	0x200016d8
 8001198:	20000b4c 	.word	0x20000b4c
 800119c:	20001624 	.word	0x20001624
 80011a0:	20000b38 	.word	0x20000b38
 80011a4:	20000000 	.word	0x20000000

080011a8 <EE_Format>:

//##########################################################################################################
//##########################################################################################################
//##########################################################################################################
bool	EE_Format(void)
{
 80011a8:	b510      	push	{r4, lr}
 80011aa:	b086      	sub	sp, #24
	uint32_t	error;
	HAL_FLASH_Unlock();
 80011ac:	f001 f8aa 	bl	8002304 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80011b0:	2301      	movs	r3, #1
	#if ( _EEPROM_F1_LOW_DESTINY==1 || _EEPROM_F1_MEDIUM_DESTINY==1 || _EEPROM_F1_HIGH_DESTINY==1 )
	flashErase.Banks = FLASH_BANK_1;
	#endif
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80011b2:	2400      	movs	r4, #0
	flashErase.NbPages=1;
 80011b4:	9305      	str	r3, [sp, #20]
	flashErase.Banks = FLASH_BANK_1;
 80011b6:	9303      	str	r3, [sp, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <EE_Format+0x38>)
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80011ba:	a901      	add	r1, sp, #4
 80011bc:	a802      	add	r0, sp, #8
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80011be:	9304      	str	r3, [sp, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80011c0:	9402      	str	r4, [sp, #8]
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80011c2:	f001 f959 	bl	8002478 <HAL_FLASHEx_Erase>
 80011c6:	b938      	cbnz	r0, 80011d8 <EE_Format+0x30>
	{
		HAL_FLASH_Lock();
 80011c8:	f001 f8ae 	bl	8002328 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 80011cc:	9801      	ldr	r0, [sp, #4]
 80011ce:	1c43      	adds	r3, r0, #1
 80011d0:	4258      	negs	r0, r3
 80011d2:	4158      	adcs	r0, r3
		else
			return true;	
	}
	HAL_FLASH_Lock();
	return false;	
}
 80011d4:	b006      	add	sp, #24
 80011d6:	bd10      	pop	{r4, pc}
	HAL_FLASH_Lock();
 80011d8:	f001 f8a6 	bl	8002328 <HAL_FLASH_Lock>
	return false;	
 80011dc:	4620      	mov	r0, r4
 80011de:	e7f9      	b.n	80011d4 <EE_Format+0x2c>
 80011e0:	0801fc00 	.word	0x0801fc00

080011e4 <EE_Reads>:
	return true;
}
//##########################################################################################################
bool EE_Reads(uint16_t StartVirtualAddress,uint16_t HowManyToRead,uint32_t* Data)
{
	if((StartVirtualAddress+HowManyToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 80011e4:	4401      	add	r1, r0
 80011e6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80011ea:	dd0b      	ble.n	8001204 <EE_Reads+0x20>
		return false;
 80011ec:	2000      	movs	r0, #0
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 80011ee:	4770      	bx	lr
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 80011f0:	0083      	lsls	r3, r0, #2
 80011f2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011f6:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80011fa:	681b      	ldr	r3, [r3, #0]
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 80011fc:	3001      	adds	r0, #1
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 80011fe:	f842 3b04 	str.w	r3, [r2], #4
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 8001202:	b280      	uxth	r0, r0
 8001204:	4281      	cmp	r1, r0
 8001206:	dcf3      	bgt.n	80011f0 <EE_Reads+0xc>
	return true;
 8001208:	2001      	movs	r0, #1
 800120a:	4770      	bx	lr

0800120c <EE_Writes>:
//##########################################################################################################
bool 	EE_Writes(uint16_t StartVirtualAddress,uint16_t HowManyToWrite,uint32_t* Data)
{
 800120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if((StartVirtualAddress+HowManyToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 800120e:	1843      	adds	r3, r0, r1
 8001210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 8001214:	4607      	mov	r7, r0
 8001216:	460d      	mov	r5, r1
 8001218:	4616      	mov	r6, r2
	if((StartVirtualAddress+HowManyToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 800121a:	dc1b      	bgt.n	8001254 <EE_Writes+0x48>
		Data++;
	}	
	if(EE_Format()==false)
		return false;
	#endif
	HAL_FLASH_Unlock();
 800121c:	f001 f872 	bl	8002304 <HAL_FLASH_Unlock>
			HAL_FLASH_Lock();
			return false;
		}
	}
	#else
	HAL_FLASH_Unlock();
 8001220:	f001 f870 	bl	8002304 <HAL_FLASH_Unlock>
 8001224:	1f34      	subs	r4, r6, #4
 8001226:	ebc6 0687 	rsb	r6, r6, r7, lsl #2
 800122a:	4f0b      	ldr	r7, [pc, #44]	; (8001258 <EE_Writes+0x4c>)
 800122c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8001230:	4437      	add	r7, r6
	for(uint16_t i=0; i<HowManyToWrite ; i++)
 8001232:	42ac      	cmp	r4, r5
 8001234:	d103      	bne.n	800123e <EE_Writes+0x32>
			HAL_FLASH_Lock();
			return false;
		}
	}	
	#endif
	HAL_FLASH_Lock();
 8001236:	f001 f877 	bl	8002328 <HAL_FLASH_Lock>
	return true;
 800123a:	2001      	movs	r0, #1
}
 800123c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800123e:	1939      	adds	r1, r7, r4
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,((i+StartVirtualAddress)*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)Data[i])!=HAL_OK)
 8001240:	2300      	movs	r3, #0
 8001242:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8001246:	2002      	movs	r0, #2
 8001248:	f001 f8a2 	bl	8002390 <HAL_FLASH_Program>
 800124c:	2800      	cmp	r0, #0
 800124e:	d0f0      	beq.n	8001232 <EE_Writes+0x26>
			HAL_FLASH_Lock();
 8001250:	f001 f86a 	bl	8002328 <HAL_FLASH_Lock>
		return false;
 8001254:	2000      	movs	r0, #0
 8001256:	e7f1      	b.n	800123c <EE_Writes+0x30>
 8001258:	0801fc04 	.word	0x0801fc04

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	2414      	movs	r4, #20
{
 8001260:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	4622      	mov	r2, r4
 8001264:	2100      	movs	r1, #0
 8001266:	a80c      	add	r0, sp, #48	; 0x30
 8001268:	f00a ffa9 	bl	800c1be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	4622      	mov	r2, r4
 800126e:	eb0d 0004 	add.w	r0, sp, r4
 8001272:	2100      	movs	r1, #0
 8001274:	f00a ffa3 	bl	800c1be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001278:	2100      	movs	r1, #0
 800127a:	2210      	movs	r2, #16
 800127c:	a801      	add	r0, sp, #4
 800127e:	f00a ff9e 	bl	800c1be <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128e:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001292:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800129a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f002 f9ea 	bl	8003674 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a2:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ac:	4629      	mov	r1, r5
 80012ae:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b0:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b6:	f002 fbb5 	bl	8003a24 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80012ba:	2312      	movs	r3, #18
 80012bc:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c2:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80012c4:	e9cd 3403 	strd	r3, r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c8:	f002 fc58 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80012cc:	b015      	add	sp, #84	; 0x54
 80012ce:	bd30      	pop	{r4, r5, pc}

080012d0 <main>:
{
 80012d0:	b580      	push	{r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4db6      	ldr	r5, [pc, #728]	; (80015ac <main+0x2dc>)
{
 80012d4:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 80012d6:	f000 fc3b 	bl	8001b50 <HAL_Init>
  SystemClock_Config();
 80012da:	f7ff ffbf 	bl	800125c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	2210      	movs	r2, #16
 80012e0:	2100      	movs	r1, #0
 80012e2:	a813      	add	r0, sp, #76	; 0x4c
 80012e4:	f00a ff6b 	bl	800c1be <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e8:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	61ab      	str	r3, [r5, #24]
 80012fc:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001308:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800130a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	f043 0320 	orr.w	r3, r3, #32
 8001312:	61ab      	str	r3, [r5, #24]
 8001314:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001316:	48a6      	ldr	r0, [pc, #664]	; (80015b0 <main+0x2e0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	9303      	str	r3, [sp, #12]
 800131e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(DIN1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = ENCODER_Z_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001322:	2720      	movs	r7, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	61ab      	str	r3, [r5, #24]
 800132a:	69ab      	ldr	r3, [r5, #24]
  htim3.Init.Period = 0xFFFF;
 800132c:	f64f 7aff 	movw	sl, #65535	; 0xffff
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	9304      	str	r3, [sp, #16]
 8001336:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	69ab      	ldr	r3, [r5, #24]
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	61ab      	str	r3, [r5, #24]
 8001340:	69ab      	ldr	r3, [r5, #24]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	9305      	str	r3, [sp, #20]
 8001348:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800134a:	f001 f9c7 	bl	80026dc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800134e:	a913      	add	r1, sp, #76	; 0x4c
 8001350:	4897      	ldr	r0, [pc, #604]	; (80015b0 <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	e9cd 8613 	strd	r8, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	e9cd 4915 	strd	r4, r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800135a:	f001 f8d9 	bl	8002510 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIN1_Pin;
 800135e:	2308      	movs	r3, #8
  HAL_GPIO_Init(DIN1_GPIO_Port, &GPIO_InitStruct);
 8001360:	a913      	add	r1, sp, #76	; 0x4c
 8001362:	4894      	ldr	r0, [pc, #592]	; (80015b4 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001368:	9615      	str	r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(DIN1_GPIO_Port, &GPIO_InitStruct);
 800136a:	f001 f8d1 	bl	8002510 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800136e:	4b92      	ldr	r3, [pc, #584]	; (80015b8 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8001370:	a913      	add	r1, sp, #76	; 0x4c
 8001372:	4890      	ldr	r0, [pc, #576]	; (80015b4 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001374:	e9cd 7313 	strd	r7, r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001378:	9615      	str	r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 800137a:	f001 f8c9 	bl	8002510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800137e:	4622      	mov	r2, r4
 8001380:	4621      	mov	r1, r4
 8001382:	2017      	movs	r0, #23
 8001384:	f000 fe3c 	bl	8002000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001388:	2017      	movs	r0, #23
 800138a:	f000 fe6d 	bl	8002068 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001390:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001392:	4333      	orrs	r3, r6
 8001394:	616b      	str	r3, [r5, #20]
 8001396:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001398:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139a:	4033      	ands	r3, r6
 800139c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800139e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a2:	f000 fe2d 	bl	8002000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013a6:	200b      	movs	r0, #11
 80013a8:	f000 fe5e 	bl	8002068 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013ac:	4622      	mov	r2, r4
 80013ae:	4621      	mov	r1, r4
 80013b0:	200f      	movs	r0, #15
 80013b2:	f000 fe25 	bl	8002000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 fe56 	bl	8002068 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 80013bc:	4d7f      	ldr	r5, [pc, #508]	; (80015bc <main+0x2ec>)
 80013be:	4b80      	ldr	r3, [pc, #512]	; (80015c0 <main+0x2f0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c0:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80013c2:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ca:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013ce:	732e      	strb	r6, [r5, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d0:	61eb      	str	r3, [r5, #28]
  hadc1.Init.NbrOfConversion = 2;
 80013d2:	f8c5 9010 	str.w	r9, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d8:	606c      	str	r4, [r5, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 80013de:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e0:	f000 fd7c 	bl	8001edc <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013e4:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e6:	a913      	add	r1, sp, #76	; 0x4c
 80013e8:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013ea:	9315      	str	r3, [sp, #84]	; 0x54
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ec:	e9cd 4613 	strd	r4, r6, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	f000 fc0e 	bl	8001c10 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f4:	a913      	add	r1, sp, #76	; 0x4c
 80013f6:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013f8:	e9cd 6913 	strd	r6, r9, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fc:	f000 fc08 	bl	8001c10 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001400:	2210      	movs	r2, #16
 8001402:	4621      	mov	r1, r4
 8001404:	a813      	add	r0, sp, #76	; 0x4c
 8001406:	f00a feda 	bl	800c1be <memset>
  htim3.Init.Prescaler = 72-1;
 800140a:	2347      	movs	r3, #71	; 0x47
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140c:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  htim3.Instance = TIM3;
 8001410:	4d6c      	ldr	r5, [pc, #432]	; (80015c4 <main+0x2f4>)
  htim3.Init.Prescaler = 72-1;
 8001412:	496d      	ldr	r1, [pc, #436]	; (80015c8 <main+0x2f8>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001414:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 72-1;
 8001416:	e9c5 1300 	strd	r1, r3, [r5]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	e9c5 a403 	strd	sl, r4, [r5, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001426:	f002 fdcb 	bl	8003fc0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800142a:	a913      	add	r1, sp, #76	; 0x4c
 800142c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001432:	f002 fedd 	bl	80041f0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001436:	a90c      	add	r1, sp, #48	; 0x30
 8001438:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800143e:	f003 f84b 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001442:	463a      	mov	r2, r7
 8001444:	4621      	mov	r1, r4
 8001446:	a814      	add	r0, sp, #80	; 0x50
 8001448:	f00a feb9 	bl	800c1be <memset>
  htim4.Instance = TIM4;
 800144c:	4d5f      	ldr	r5, [pc, #380]	; (80015cc <main+0x2fc>)
 800144e:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <main+0x300>)
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001450:	a913      	add	r1, sp, #76	; 0x4c
  htim4.Init.Prescaler = 0;
 8001452:	e9c5 3400 	strd	r3, r4, [r5]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001456:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001458:	4628      	mov	r0, r5
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800145a:	9313      	str	r3, [sp, #76]	; 0x4c
  htim4.Init.Period = 0xffff;
 800145c:	e9c5 7a02 	strd	r7, sl, [r5, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	61ac      	str	r4, [r5, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001464:	9615      	str	r6, [sp, #84]	; 0x54
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001466:	9619      	str	r6, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800146c:	f002 fddc 	bl	8004028 <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001470:	a90c      	add	r1, sp, #48	; 0x30
 8001472:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  hi2c1.Init.ClockSpeed = 100000;
 8001478:	4d56      	ldr	r5, [pc, #344]	; (80015d4 <main+0x304>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800147a:	f003 f82d 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
  hi2c1.Instance = I2C1;
 800147e:	4856      	ldr	r0, [pc, #344]	; (80015d8 <main+0x308>)
  hi2c1.Init.ClockSpeed = 100000;
 8001480:	4b56      	ldr	r3, [pc, #344]	; (80015dc <main+0x30c>)
  hi2c1.Init.OwnAddress1 = 0;
 8001482:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001486:	e9c0 5300 	strd	r5, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148e:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001492:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001496:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001498:	f001 fa38 	bl	800290c <HAL_I2C_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149c:	2210      	movs	r2, #16
 800149e:	4621      	mov	r1, r4
 80014a0:	eb0d 0007 	add.w	r0, sp, r7
 80014a4:	f00a fe8b 	bl	800c1be <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a8:	221c      	movs	r2, #28
 80014aa:	4621      	mov	r1, r4
 80014ac:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ae:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	f00a fe84 	bl	800c1be <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b6:	463a      	mov	r2, r7
 80014b8:	4621      	mov	r1, r4
 80014ba:	a813      	add	r0, sp, #76	; 0x4c
 80014bc:	f00a fe7f 	bl	800c1be <memset>
  htim1.Instance = TIM1;
 80014c0:	4d47      	ldr	r5, [pc, #284]	; (80015e0 <main+0x310>)
 80014c2:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <main+0x314>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c4:	2660      	movs	r6, #96	; 0x60
  htim1.Init.Prescaler = 0;
 80014c6:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.Period = 3599;
 80014ca:	f640 630f 	movw	r3, #3599	; 0xe0f
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ce:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d6:	e9c5 4405 	strd	r4, r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014da:	f002 fd71 	bl	8003fc0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014de:	eb0d 0107 	add.w	r1, sp, r7
 80014e2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e4:	f8cd 9020 	str.w	r9, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e8:	f002 fe82 	bl	80041f0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ec:	4628      	mov	r0, r5
 80014ee:	f002 fd81 	bl	8003ff4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f2:	a906      	add	r1, sp, #24
 80014f4:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014fa:	f002 ffed 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	4622      	mov	r2, r4
 8001500:	a90c      	add	r1, sp, #48	; 0x30
 8001502:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 8001504:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001508:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800150c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001510:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001512:	f002 fe01 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001516:	2204      	movs	r2, #4
 8001518:	a90c      	add	r1, sp, #48	; 0x30
 800151a:	4628      	mov	r0, r5
 800151c:	f002 fdfc 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001520:	a913      	add	r1, sp, #76	; 0x4c
 8001522:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001524:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001528:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800152c:	e9cd 4817 	strd	r4, r8, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001530:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001532:	f002 ffef 	bl	8004514 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8001536:	4628      	mov	r0, r5
 8001538:	f000 f9ae 	bl	8001898 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153c:	2210      	movs	r2, #16
 800153e:	4621      	mov	r1, r4
 8001540:	a80c      	add	r0, sp, #48	; 0x30
 8001542:	f00a fe3c 	bl	800c1be <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	221c      	movs	r2, #28
 8001548:	4621      	mov	r1, r4
 800154a:	a813      	add	r0, sp, #76	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001550:	f00a fe35 	bl	800c1be <memset>
  htim2.Instance = TIM2;
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	4d23      	ldr	r5, [pc, #140]	; (80015e8 <main+0x318>)
  htim2.Init.Prescaler = 0;
 800155a:	e9c5 3400 	strd	r3, r4, [r5]
  htim2.Init.Period = 89;
 800155e:	2359      	movs	r3, #89	; 0x59
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001560:	4628      	mov	r0, r5
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800156a:	f002 fd29 	bl	8003fc0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800156e:	a90c      	add	r1, sp, #48	; 0x30
 8001570:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001572:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001576:	f002 fe3b 	bl	80041f0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800157a:	4628      	mov	r0, r5
 800157c:	f002 fd3a 	bl	8003ff4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001580:	eb0d 0107 	add.w	r1, sp, r7
 8001584:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158a:	f002 ffa5 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158e:	4622      	mov	r2, r4
 8001590:	a913      	add	r1, sp, #76	; 0x4c
 8001592:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 8001594:	e9cd 6413 	strd	r6, r4, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001598:	9415      	str	r4, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159a:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159c:	f002 fdbc 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80015a0:	4628      	mov	r0, r5
 80015a2:	f000 f979 	bl	8001898 <HAL_TIM_MspPostInit>
	  cppmain();
 80015a6:	f7ff fdcf 	bl	8001148 <cppmain>
 80015aa:	e7fc      	b.n	80015a6 <main+0x2d6>
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	10110000 	.word	0x10110000
 80015bc:	20001624 	.word	0x20001624
 80015c0:	40012400 	.word	0x40012400
 80015c4:	200015e4 	.word	0x200015e4
 80015c8:	40000400 	.word	0x40000400
 80015cc:	20001550 	.word	0x20001550
 80015d0:	40000800 	.word	0x40000800
 80015d4:	40005400 	.word	0x40005400
 80015d8:	20001590 	.word	0x20001590
 80015dc:	000186a0 	.word	0x000186a0
 80015e0:	20001698 	.word	0x20001698
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	200016d8 	.word	0x200016d8

080015ec <RebootDFU>:

}

/* USER CODE BEGIN 4 */
void RebootDFU(void) {
	*((unsigned long *)0x2001FFF0) = 0xDEADBEEF; // End of RAM
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <RebootDFU+0x20>)
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <RebootDFU+0x24>)
 80015f0:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015f2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80015f6:	4907      	ldr	r1, [pc, #28]	; (8001614 <RebootDFU+0x28>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <RebootDFU+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80015fa:	68ca      	ldr	r2, [r1, #12]
 80015fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
 8001604:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <RebootDFU+0x1c>
 800160c:	2001fff0 	.word	0x2001fff0
 8001610:	deadbeef 	.word	0xdeadbeef
 8001614:	e000ed00 	.word	0xe000ed00
 8001618:	05fa0004 	.word	0x05fa0004

0800161c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800161c:	4770      	bx	lr
	...

08001620 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_MspInit+0x3c>)
{
 8001622:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	619a      	str	r2, [r3, #24]
 800162c:	699a      	ldr	r2, [r3, #24]
 800162e:	f002 0201 	and.w	r2, r2, #1
 8001632:	9200      	str	r2, [sp, #0]
 8001634:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800163c:	61da      	str	r2, [r3, #28]
 800163e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800164a:	6853      	ldr	r3, [r2, #4]
 800164c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001654:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	b002      	add	sp, #8
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000

08001664 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001664:	b530      	push	{r4, r5, lr}
 8001666:	4605      	mov	r5, r0
 8001668:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	2210      	movs	r2, #16
 800166c:	2100      	movs	r1, #0
 800166e:	a802      	add	r0, sp, #8
 8001670:	f00a fda5 	bl	800c1be <memset>
  if(hadc->Instance==ADC1)
 8001674:	682a      	ldr	r2, [r5, #0]
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_ADC_MspInit+0x88>)
 8001678:	429a      	cmp	r2, r3
 800167a:	d135      	bne.n	80016e8 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800167c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001680:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001688:	619a      	str	r2, [r3, #24]
 800168a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	4818      	ldr	r0, [pc, #96]	; (80016f0 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800168e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001698:	4c16      	ldr	r4, [pc, #88]	; (80016f4 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	f042 0204 	orr.w	r2, r2, #4
 800169e:	619a      	str	r2, [r3, #24]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 80016aa:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f000 ff2e 	bl	8002510 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b4:	2300      	movs	r3, #0
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ba:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	f44f 7300 	mov.w	r3, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016c8:	e9c4 1303 	strd	r1, r3, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016cc:	2320      	movs	r3, #32
 80016ce:	e9c4 0305 	strd	r0, r3, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016d6:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016d8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016da:	f000 fce9 	bl	80020b0 <HAL_DMA_Init>
 80016de:	b108      	cbz	r0, 80016e4 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80016e0:	f7ff ff9c 	bl	800161c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016e4:	622c      	str	r4, [r5, #32]
 80016e6:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016e8:	b007      	add	sp, #28
 80016ea:	bd30      	pop	{r4, r5, pc}
 80016ec:	40012400 	.word	0x40012400
 80016f0:	40010800 	.word	0x40010800
 80016f4:	20001654 	.word	0x20001654
 80016f8:	40020008 	.word	0x40020008

080016fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016fc:	b510      	push	{r4, lr}
 80016fe:	4604      	mov	r4, r0
 8001700:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	2210      	movs	r2, #16
 8001704:	2100      	movs	r1, #0
 8001706:	a802      	add	r0, sp, #8
 8001708:	f00a fd59 	bl	800c1be <memset>
  if(hi2c->Instance==I2C1)
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_I2C_MspInit+0x68>)
 8001710:	429a      	cmp	r2, r3
 8001712:	d124      	bne.n	800175e <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4c14      	ldr	r4, [pc, #80]	; (8001768 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001716:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	61a3      	str	r3, [r4, #24]
 8001724:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	4811      	ldr	r0, [pc, #68]	; (800176c <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001730:	2312      	movs	r3, #18
 8001732:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f000 fee9 	bl	8002510 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800173e:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_I2C_MspInit+0x74>)
 8001740:	6853      	ldr	r3, [r2, #4]
 8001742:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174c:	69e3      	ldr	r3, [r4, #28]
 800174e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001752:	61e3      	str	r3, [r4, #28]
 8001754:	69e3      	ldr	r3, [r4, #28]
 8001756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800175e:	b006      	add	sp, #24
 8001760:	bd10      	pop	{r4, pc}
 8001762:	bf00      	nop
 8001764:	40005400 	.word	0x40005400
 8001768:	40021000 	.word	0x40021000
 800176c:	40010c00 	.word	0x40010c00
 8001770:	40010000 	.word	0x40010000

08001774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001774:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM1)
 8001776:	6803      	ldr	r3, [r0, #0]
 8001778:	4a27      	ldr	r2, [pc, #156]	; (8001818 <HAL_TIM_Base_MspInit+0xa4>)
{
 800177a:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 800177c:	4293      	cmp	r3, r2
{
 800177e:	4605      	mov	r5, r0
  if(htim_base->Instance==TIM1)
 8001780:	d10b      	bne.n	800179a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_TIM_Base_MspInit+0xa8>)
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800178a:	619a      	str	r2, [r3, #24]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001796:	b005      	add	sp, #20
 8001798:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM2)
 800179a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800179e:	d123      	bne.n	80017e8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80017a4:	69da      	ldr	r2, [r3, #28]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80017a6:	4c1e      	ldr	r4, [pc, #120]	; (8001820 <HAL_TIM_Base_MspInit+0xac>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	61da      	str	r2, [r3, #28]
 80017ae:	69db      	ldr	r3, [r3, #28]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_TIM_Base_MspInit+0xb0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	9b02      	ldr	r3, [sp, #8]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ba:	2310      	movs	r3, #16
 80017bc:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017c8:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017cc:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80017d0:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80017d2:	4620      	mov	r0, r4
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80017d8:	f000 fc6a 	bl	80020b0 <HAL_DMA_Init>
 80017dc:	b108      	cbz	r0, 80017e2 <HAL_TIM_Base_MspInit+0x6e>
      Error_Handler();
 80017de:	f7ff ff1d 	bl	800161c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80017e2:	626c      	str	r4, [r5, #36]	; 0x24
 80017e4:	6265      	str	r5, [r4, #36]	; 0x24
 80017e6:	e7d6      	b.n	8001796 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM3)
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_TIM_Base_MspInit+0xb4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d1d3      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_TIM_Base_MspInit+0xa8>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017f0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017f2:	69da      	ldr	r2, [r3, #28]
 80017f4:	f042 0202 	orr.w	r2, r2, #2
 80017f8:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fc:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017fe:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	9303      	str	r3, [sp, #12]
 8001806:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001808:	f000 fbfa 	bl	8002000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800180c:	201d      	movs	r0, #29
}
 800180e:	b005      	add	sp, #20
 8001810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001814:	f000 bc28 	b.w	8002068 <HAL_NVIC_EnableIRQ>
 8001818:	40012c00 	.word	0x40012c00
 800181c:	40021000 	.word	0x40021000
 8001820:	2000150c 	.word	0x2000150c
 8001824:	40020058 	.word	0x40020058
 8001828:	40000400 	.word	0x40000400

0800182c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	2210      	movs	r2, #16
 8001834:	2100      	movs	r1, #0
 8001836:	a802      	add	r0, sp, #8
 8001838:	f00a fcc1 	bl	800c1be <memset>
  if(htim_encoder->Instance==TIM4)
 800183c:	6822      	ldr	r2, [r4, #0]
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_TIM_Encoder_MspInit+0x64>)
 8001840:	429a      	cmp	r2, r3
 8001842:	d123      	bne.n	800188c <HAL_TIM_Encoder_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001844:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001848:	69da      	ldr	r2, [r3, #28]
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 800184c:	f042 0204 	orr.w	r2, r2, #4
 8001850:	61da      	str	r2, [r3, #28]
 8001852:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	480f      	ldr	r0, [pc, #60]	; (8001894 <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001856:	f002 0204 	and.w	r2, r2, #4
 800185a:	9200      	str	r2, [sp, #0]
 800185c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	f042 0208 	orr.w	r2, r2, #8
 8001864:	619a      	str	r2, [r3, #24]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001870:	23c0      	movs	r3, #192	; 0xc0
 8001872:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001874:	2301      	movs	r3, #1
 8001876:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f000 fe4a 	bl	8002510 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	201e      	movs	r0, #30
 8001880:	4611      	mov	r1, r2
 8001882:	f000 fbbd 	bl	8002000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001886:	201e      	movs	r0, #30
 8001888:	f000 fbee 	bl	8002068 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800188c:	b006      	add	sp, #24
 800188e:	bd10      	pop	{r4, pc}
 8001890:	40000800 	.word	0x40000800
 8001894:	40010c00 	.word	0x40010c00

08001898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001898:	b510      	push	{r4, lr}
 800189a:	4604      	mov	r4, r0
 800189c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	2210      	movs	r2, #16
 80018a0:	2100      	movs	r1, #0
 80018a2:	a802      	add	r0, sp, #8
 80018a4:	f00a fc8b 	bl	800c1be <memset>
  if(htim->Instance==TIM1)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_TIM_MspPostInit+0x8c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d116      	bne.n	80018de <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_TIM_MspPostInit+0x90>)
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = MOTOR_B_Pin|MOTOR_A_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	f44f 7140 	mov.w	r1, #768	; 0x300
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	481c      	ldr	r0, [pc, #112]	; (800192c <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	f042 0204 	orr.w	r2, r2, #4
 80018be:	619a      	str	r2, [r3, #24]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	e9cd 1302 	strd	r1, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f000 fe1b 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018da:	b006      	add	sp, #24
 80018dc:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 80018de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e2:	d1fa      	bne.n	80018da <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80018e8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	f042 0204 	orr.w	r2, r2, #4
 80018f0:	619a      	str	r2, [r3, #24]
 80018f2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001906:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	4808      	ldr	r0, [pc, #32]	; (800192c <HAL_TIM_MspPostInit+0x94>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f000 fe00 	bl	8002510 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_TIM_MspPostInit+0x98>)
 8001912:	6853      	ldr	r3, [r2, #4]
 8001914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001918:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800191c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001920:	6053      	str	r3, [r2, #4]
}
 8001922:	e7da      	b.n	80018da <HAL_TIM_MspPostInit+0x42>
 8001924:	40012c00 	.word	0x40012c00
 8001928:	40021000 	.word	0x40021000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010000 	.word	0x40010000

08001934 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001934:	b507      	push	{r0, r1, r2, lr}
  if(hpcd->Instance==USB)
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_PCD_MspInit+0x3c>)
 8001938:	6802      	ldr	r2, [r0, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d115      	bne.n	800196a <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800193e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8001942:	69da      	ldr	r2, [r3, #28]
  /* USER CODE BEGIN USB_MspInit 1 */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001944:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8001946:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800194a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800194e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001950:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8001952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800195a:	f000 fb51 	bl	8002000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800195e:	2014      	movs	r0, #20
  /* USER CODE END USB_MspInit 1 */
  }

}
 8001960:	b003      	add	sp, #12
 8001962:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001966:	f000 bb7f 	b.w	8002068 <HAL_NVIC_EnableIRQ>
}
 800196a:	b003      	add	sp, #12
 800196c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001970:	40005c00 	.word	0x40005c00

08001974 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001974:	4770      	bx	lr

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	e7fe      	b.n	800197a <BusFault_Handler>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler>

0800197e <SVC_Handler>:
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 b8f6 	b.w	8001b74 <HAL_IncTick>

08001988 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001988:	4801      	ldr	r0, [pc, #4]	; (8001990 <DMA1_Channel1_IRQHandler+0x8>)
 800198a:	f000 bbff 	b.w	800218c <HAL_DMA_IRQHandler>
 800198e:	bf00      	nop
 8001990:	20001654 	.word	0x20001654

08001994 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
  //HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_1);
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001994:	4801      	ldr	r0, [pc, #4]	; (800199c <DMA1_Channel5_IRQHandler+0x8>)
 8001996:	f000 bbf9 	b.w	800218c <HAL_DMA_IRQHandler>
 800199a:	bf00      	nop
 800199c:	2000150c 	.word	0x2000150c

080019a0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80019a0:	2020      	movs	r0, #32
 80019a2:	f000 bea7 	b.w	80026f4 <HAL_GPIO_EXTI_IRQHandler>
	...

080019a8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019a8:	4801      	ldr	r0, [pc, #4]	; (80019b0 <TIM3_IRQHandler+0x8>)
 80019aa:	f002 ba25 	b.w	8003df8 <HAL_TIM_IRQHandler>
 80019ae:	bf00      	nop
 80019b0:	200015e4 	.word	0x200015e4

080019b4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019b4:	4801      	ldr	r0, [pc, #4]	; (80019bc <TIM4_IRQHandler+0x8>)
 80019b6:	f002 ba1f 	b.w	8003df8 <HAL_TIM_IRQHandler>
 80019ba:	bf00      	nop
 80019bc:	20001550 	.word	0x20001550

080019c0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019c0:	4801      	ldr	r0, [pc, #4]	; (80019c8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80019c2:	f001 bbc1 	b.w	8003148 <HAL_PCD_IRQHandler>
 80019c6:	bf00      	nop
 80019c8:	20001718 	.word	0x20001718

080019cc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80019cc:	2001      	movs	r0, #1
 80019ce:	4770      	bx	lr

080019d0 <_kill>:

int _kill(int pid, int sig)
{
 80019d0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80019d2:	f00a fb79 	bl	800c0c8 <__errno>
 80019d6:	2316      	movs	r3, #22
 80019d8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80019da:	f04f 30ff 	mov.w	r0, #4294967295
 80019de:	bd08      	pop	{r3, pc}

080019e0 <_exit>:

void _exit (int status)
{
 80019e0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80019e2:	f00a fb71 	bl	800c0c8 <__errno>
 80019e6:	2316      	movs	r3, #22
 80019e8:	6003      	str	r3, [r0, #0]
 80019ea:	e7fe      	b.n	80019ea <_exit+0xa>

080019ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	460e      	mov	r6, r1
 80019f0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	460c      	mov	r4, r1
 80019f4:	1ba3      	subs	r3, r4, r6
 80019f6:	429d      	cmp	r5, r3
 80019f8:	dc01      	bgt.n	80019fe <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80019fa:	4628      	mov	r0, r5
 80019fc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80019fe:	f3af 8000 	nop.w
 8001a02:	f804 0b01 	strb.w	r0, [r4], #1
 8001a06:	e7f5      	b.n	80019f4 <_read+0x8>

08001a08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a08:	b570      	push	{r4, r5, r6, lr}
 8001a0a:	460e      	mov	r6, r1
 8001a0c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	460c      	mov	r4, r1
 8001a10:	1ba3      	subs	r3, r4, r6
 8001a12:	429d      	cmp	r5, r3
 8001a14:	dc01      	bgt.n	8001a1a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001a16:	4628      	mov	r0, r5
 8001a18:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001a1a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a1e:	f3af 8000 	nop.w
 8001a22:	e7f5      	b.n	8001a10 <_write+0x8>

08001a24 <_close>:

int _close(int file)
{
	return -1;
}
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	4770      	bx	lr

08001a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001a2e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001a30:	604b      	str	r3, [r1, #4]
}
 8001a32:	4770      	bx	lr

08001a34 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001a34:	2001      	movs	r0, #1
 8001a36:	4770      	bx	lr

08001a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001a38:	2000      	movs	r0, #0
 8001a3a:	4770      	bx	lr

08001a3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a3c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <_sbrk+0x2c>)
{
 8001a40:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	b909      	cbnz	r1, 8001a4a <_sbrk+0xe>
		heap_end = &end;
 8001a46:	4909      	ldr	r1, [pc, #36]	; (8001a6c <_sbrk+0x30>)
 8001a48:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001a4a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001a4c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001a4e:	4402      	add	r2, r0
 8001a50:	428a      	cmp	r2, r1
 8001a52:	d906      	bls.n	8001a62 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001a54:	f00a fb38 	bl	800c0c8 <__errno>
 8001a58:	230c      	movs	r3, #12
 8001a5a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001a60:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001a62:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001a64:	e7fc      	b.n	8001a60 <_sbrk+0x24>
 8001a66:	bf00      	nop
 8001a68:	20000b3c 	.word	0x20000b3c
 8001a6c:	200021a0 	.word	0x200021a0

08001a70 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <SystemInit+0x40>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <SystemInit+0x44>)
 8001a7e:	400a      	ands	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a8c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a94:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001a9c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a9e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001aa2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001aa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <SystemInit+0x48>)
 8001aaa:	609a      	str	r2, [r3, #8]
#endif 
}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	f8ff0000 	.word	0xf8ff0000
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001abc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001abe:	e003      	b.n	8001ac8 <LoopCopyDataInit>

08001ac0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ac2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ac4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ac6:	3104      	adds	r1, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ac8:	480a      	ldr	r0, [pc, #40]	; (8001af4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001acc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ace:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ad0:	d3f6      	bcc.n	8001ac0 <CopyDataInit>
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ad4:	e002      	b.n	8001adc <LoopFillZerobss>

08001ad6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ad8:	f842 3b04 	str.w	r3, [r2], #4

08001adc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ade:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ae0:	d3f9      	bcc.n	8001ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ae2:	f7ff ffc5 	bl	8001a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f00a faf5 	bl	800c0d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aea:	f7ff fbf1 	bl	80012d0 <main>
  bx lr
 8001aee:	4770      	bx	lr
  ldr r3, =_sidata
 8001af0:	0800e318 	.word	0x0800e318
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001af8:	200008f8 	.word	0x200008f8
  ldr r2, =_sbss
 8001afc:	200008f8 	.word	0x200008f8
  ldr r3, = _ebss
 8001b00:	2000219c 	.word	0x2000219c

08001b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC1_2_IRQHandler>
	...

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_InitTick+0x3c>)
{
 8001b0c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b0e:	7818      	ldrb	r0, [r3, #0]
 8001b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b14:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_InitTick+0x40>)
 8001b1a:	6810      	ldr	r0, [r2, #0]
 8001b1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b20:	f000 fab0 	bl	8002084 <HAL_SYSTICK_Config>
 8001b24:	4604      	mov	r4, r0
 8001b26:	b958      	cbnz	r0, 8001b40 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b28:	2d0f      	cmp	r5, #15
 8001b2a:	d809      	bhi.n	8001b40 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 fa64 	bl	8002000 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_InitTick+0x44>)
 8001b3c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001b3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001b40:	2001      	movs	r0, #1
 8001b42:	e7fc      	b.n	8001b3e <HAL_InitTick+0x36>
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	2000000c 	.word	0x2000000c

08001b50 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_Init+0x20>)
{
 8001b52:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b56:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5e:	f000 fa3d 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff ffd0 	bl	8001b08 <HAL_InitTick>
  HAL_MspInit();
 8001b68:	f7ff fd5a 	bl	8001620 <HAL_MspInit>
}
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	bd08      	pop	{r3, pc}
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b74:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <HAL_IncTick+0x10>)
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_IncTick+0x14>)
 8001b78:	6811      	ldr	r1, [r2, #0]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	440b      	add	r3, r1
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20001984 	.word	0x20001984
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b8c:	4b01      	ldr	r3, [pc, #4]	; (8001b94 <HAL_GetTick+0x8>)
 8001b8e:	6818      	ldr	r0, [r3, #0]
}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20001984 	.word	0x20001984

08001b98 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b98:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001b9a:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b9e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001ba2:	d11b      	bne.n	8001bdc <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	6892      	ldr	r2, [r2, #8]
 8001bb0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001bb4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001bb8:	d10c      	bne.n	8001bd4 <ADC_DMAConvCplt+0x3c>
 8001bba:	7b1a      	ldrb	r2, [r3, #12]
 8001bbc:	b952      	cbnz	r2, 8001bd4 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc8:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bca:	bf5e      	ittt	pl
 8001bcc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001bce:	f042 0201 	orrpl.w	r2, r2, #1
 8001bd2:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f005 fe81 	bl	80078dc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001bda:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
}
 8001bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	4718      	bx	r3

08001be6 <HAL_ADC_ConvHalfCpltCallback>:
 8001be6:	4770      	bx	lr

08001be8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001be8:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001bec:	f7ff fffb 	bl	8001be6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bf0:	bd08      	pop	{r3, pc}

08001bf2 <HAL_ADC_ErrorCallback>:
 8001bf2:	4770      	bx	lr

08001bf4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bf4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001bf6:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bf8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bfe:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c08:	f7ff fff3 	bl	8001bf2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c0c:	bd08      	pop	{r3, pc}
	...

08001c10 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001c10:	2300      	movs	r3, #0
{ 
 8001c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001c14:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001c16:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d06d      	beq.n	8001cfa <HAL_ADC_ConfigChannel+0xea>
 8001c1e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001c20:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001c22:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001c26:	2d06      	cmp	r5, #6
 8001c28:	6802      	ldr	r2, [r0, #0]
 8001c2a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001c2e:	680c      	ldr	r4, [r1, #0]
 8001c30:	d823      	bhi.n	8001c7a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c32:	261f      	movs	r6, #31
 8001c34:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001c36:	3b05      	subs	r3, #5
 8001c38:	409e      	lsls	r6, r3
 8001c3a:	ea25 0506 	bic.w	r5, r5, r6
 8001c3e:	fa04 f303 	lsl.w	r3, r4, r3
 8001c42:	432b      	orrs	r3, r5
 8001c44:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c46:	2c09      	cmp	r4, #9
 8001c48:	688b      	ldr	r3, [r1, #8]
 8001c4a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001c4e:	f04f 0107 	mov.w	r1, #7
 8001c52:	d92a      	bls.n	8001caa <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c54:	68d6      	ldr	r6, [r2, #12]
 8001c56:	3d1e      	subs	r5, #30
 8001c58:	40a9      	lsls	r1, r5
 8001c5a:	ea26 0101 	bic.w	r1, r6, r1
 8001c5e:	40ab      	lsls	r3, r5
 8001c60:	430b      	orrs	r3, r1
 8001c62:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c64:	f1a4 0310 	sub.w	r3, r4, #16
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d926      	bls.n	8001cba <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	b002      	add	sp, #8
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001c7a:	2d0c      	cmp	r5, #12
 8001c7c:	f04f 051f 	mov.w	r5, #31
 8001c80:	d809      	bhi.n	8001c96 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c82:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001c84:	3b23      	subs	r3, #35	; 0x23
 8001c86:	409d      	lsls	r5, r3
 8001c88:	ea26 0505 	bic.w	r5, r6, r5
 8001c8c:	fa04 f303 	lsl.w	r3, r4, r3
 8001c90:	432b      	orrs	r3, r5
 8001c92:	6313      	str	r3, [r2, #48]	; 0x30
 8001c94:	e7d7      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c96:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001c98:	3b41      	subs	r3, #65	; 0x41
 8001c9a:	409d      	lsls	r5, r3
 8001c9c:	ea26 0505 	bic.w	r5, r6, r5
 8001ca0:	fa04 f303 	lsl.w	r3, r4, r3
 8001ca4:	432b      	orrs	r3, r5
 8001ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ca8:	e7cd      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001caa:	6916      	ldr	r6, [r2, #16]
 8001cac:	40a9      	lsls	r1, r5
 8001cae:	ea26 0101 	bic.w	r1, r6, r1
 8001cb2:	40ab      	lsls	r3, r5
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6113      	str	r3, [r2, #16]
 8001cb8:	e7d4      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_ADC_ConfigChannel+0xf0>)
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d116      	bne.n	8001cee <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cc0:	6893      	ldr	r3, [r2, #8]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	d4d2      	bmi.n	8001c6c <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cc6:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cc8:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cce:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cd0:	d1cc      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_ADC_ConfigChannel+0xf4>)
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_ADC_ConfigChannel+0xf8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8001cdc:	230a      	movs	r3, #10
 8001cde:	4353      	muls	r3, r2
            wait_loop_index--;
 8001ce0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001ce2:	9b01      	ldr	r3, [sp, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0c1      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8001ce8:	9b01      	ldr	r3, [sp, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	e7f8      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e7b9      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e7ba      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x64>
 8001cfe:	bf00      	nop
 8001d00:	40012400 	.word	0x40012400
 8001d04:	20000004 	.word	0x20000004
 8001d08:	000f4240 	.word	0x000f4240

08001d0c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001d0c:	2300      	movs	r3, #0
{
 8001d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001d10:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d12:	6803      	ldr	r3, [r0, #0]
{
 8001d14:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	07d2      	lsls	r2, r2, #31
 8001d1a:	d502      	bpl.n	8001d22 <ADC_Enable+0x16>
  return HAL_OK;
 8001d1c:	2000      	movs	r0, #0
}
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <ADC_Enable+0x68>)
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <ADC_Enable+0x6c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001d34:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001d36:	9b01      	ldr	r3, [sp, #4]
 8001d38:	b9c3      	cbnz	r3, 8001d6c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001d3a:	f7ff ff27 	bl	8001b8c <HAL_GetTick>
 8001d3e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	689d      	ldr	r5, [r3, #8]
 8001d44:	f015 0501 	ands.w	r5, r5, #1
 8001d48:	d1e8      	bne.n	8001d1c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d4a:	f7ff ff1f 	bl	8001b8c <HAL_GetTick>
 8001d4e:	1b80      	subs	r0, r0, r6
 8001d50:	2802      	cmp	r0, #2
 8001d52:	d9f5      	bls.n	8001d40 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001d56:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001d62:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d6a:	e7d8      	b.n	8001d1e <ADC_Enable+0x12>
      wait_loop_index--;
 8001d6c:	9b01      	ldr	r3, [sp, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	e7e0      	b.n	8001d34 <ADC_Enable+0x28>
 8001d72:	bf00      	nop
 8001d74:	20000004 	.word	0x20000004
 8001d78:	000f4240 	.word	0x000f4240

08001d7c <HAL_ADC_Start_DMA>:
{
 8001d7c:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8001d80:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d82:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <HAL_ADC_Start_DMA+0x108>)
 8001d84:	6802      	ldr	r2, [r0, #0]
{
 8001d86:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d88:	429a      	cmp	r2, r3
{
 8001d8a:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d8c:	d002      	beq.n	8001d94 <HAL_ADC_Start_DMA+0x18>
 8001d8e:	493e      	ldr	r1, [pc, #248]	; (8001e88 <HAL_ADC_Start_DMA+0x10c>)
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d103      	bne.n	8001d9c <HAL_ADC_Start_DMA+0x20>
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001d9a:	d16e      	bne.n	8001e7a <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001d9c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d06c      	beq.n	8001e7e <HAL_ADC_Start_DMA+0x102>
 8001da4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001da6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001da8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001dac:	f7ff ffae 	bl	8001d0c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001db0:	4606      	mov	r6, r0
 8001db2:	2800      	cmp	r0, #0
 8001db4:	d15d      	bne.n	8001e72 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001db6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001db8:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8001dba:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	f020 0001 	bic.w	r0, r0, #1
 8001dc4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dc8:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001dca:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001dcc:	d104      	bne.n	8001dd8 <HAL_ADC_Start_DMA+0x5c>
 8001dce:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_ADC_Start_DMA+0x108>)
 8001dd0:	6853      	ldr	r3, [r2, #4]
 8001dd2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001dd6:	d13e      	bne.n	8001e56 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001dde:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001de0:	684b      	ldr	r3, [r1, #4]
 8001de2:	055a      	lsls	r2, r3, #21
 8001de4:	d505      	bpl.n	8001df2 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001de8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001df4:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dfa:	bf18      	it	ne
 8001dfc:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dfe:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e00:	bf18      	it	ne
 8001e02:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001e06:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e10:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e12:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_ADC_Start_DMA+0x114>)
 8001e16:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_ADC_Start_DMA+0x118>)
 8001e1a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e1c:	f06f 0302 	mvn.w	r3, #2
 8001e20:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e24:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e30:	4643      	mov	r3, r8
 8001e32:	f000 f96d 	bl	8002110 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001e3e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	bf0c      	ite	eq
 8001e46:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e4a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001e4e:	609a      	str	r2, [r3, #8]
}
 8001e50:	4630      	mov	r0, r6
 8001e52:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e5c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e5e:	6853      	ldr	r3, [r2, #4]
 8001e60:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e62:	bf41      	itttt	mi
 8001e64:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001e66:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001e6a:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001e6e:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001e70:	e7bf      	b.n	8001df2 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001e72:	2300      	movs	r3, #0
 8001e74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001e78:	e7ea      	b.n	8001e50 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8001e7a:	2601      	movs	r6, #1
 8001e7c:	e7e8      	b.n	8001e50 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001e7e:	2602      	movs	r6, #2
 8001e80:	e7e6      	b.n	8001e50 <HAL_ADC_Start_DMA+0xd4>
 8001e82:	bf00      	nop
 8001e84:	40012400 	.word	0x40012400
 8001e88:	40012800 	.word	0x40012800
 8001e8c:	08001b99 	.word	0x08001b99
 8001e90:	08001be9 	.word	0x08001be9
 8001e94:	08001bf5 	.word	0x08001bf5

08001e98 <ADC_ConversionStop_Disable>:
{
 8001e98:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e9a:	6803      	ldr	r3, [r0, #0]
{
 8001e9c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	07d2      	lsls	r2, r2, #31
 8001ea2:	d401      	bmi.n	8001ea8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001ea4:	2000      	movs	r0, #0
}
 8001ea6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001eb0:	f7ff fe6c 	bl	8001b8c <HAL_GetTick>
 8001eb4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	07db      	lsls	r3, r3, #31
 8001ebc:	d5f2      	bpl.n	8001ea4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ebe:	f7ff fe65 	bl	8001b8c <HAL_GetTick>
 8001ec2:	1b40      	subs	r0, r0, r5
 8001ec4:	2802      	cmp	r0, #2
 8001ec6:	d9f6      	bls.n	8001eb6 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eca:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eda:	e7e4      	b.n	8001ea6 <ADC_ConversionStop_Disable+0xe>

08001edc <HAL_ADC_Init>:
{
 8001edc:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001ede:	4604      	mov	r4, r0
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d070      	beq.n	8001fc6 <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ee6:	b923      	cbnz	r3, 8001ef2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001eea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001eee:	f7ff fbb9 	bl	8001664 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7ff ffd0 	bl	8001e98 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001efa:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f00:	d163      	bne.n	8001fca <HAL_ADC_Init+0xee>
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d161      	bne.n	8001fca <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f06:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001f08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f0c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	f023 0302 	bic.w	r3, r3, #2
 8001f12:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f16:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f18:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f1c:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f1e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f22:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f26:	d037      	beq.n	8001f98 <HAL_ADC_Init+0xbc>
 8001f28:	2901      	cmp	r1, #1
 8001f2a:	bf14      	ite	ne
 8001f2c:	4606      	movne	r6, r0
 8001f2e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f32:	7d25      	ldrb	r5, [r4, #20]
 8001f34:	2d01      	cmp	r5, #1
 8001f36:	d106      	bne.n	8001f46 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f38:	bb83      	cbnz	r3, 8001f9c <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f3a:	69a3      	ldr	r3, [r4, #24]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001f42:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001f46:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f48:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001f4c:	685d      	ldr	r5, [r3, #4]
 8001f4e:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001f52:	ea45 0506 	orr.w	r5, r5, r6
 8001f56:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001f58:	689e      	ldr	r6, [r3, #8]
 8001f5a:	4d1e      	ldr	r5, [pc, #120]	; (8001fd4 <HAL_ADC_Init+0xf8>)
 8001f5c:	ea05 0506 	and.w	r5, r5, r6
 8001f60:	ea45 0502 	orr.w	r5, r5, r2
 8001f64:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f66:	d001      	beq.n	8001f6c <HAL_ADC_Init+0x90>
 8001f68:	2901      	cmp	r1, #1
 8001f6a:	d120      	bne.n	8001fae <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f6c:	6921      	ldr	r1, [r4, #16]
 8001f6e:	3901      	subs	r1, #1
 8001f70:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001f72:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001f74:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001f78:	4329      	orrs	r1, r5
 8001f7a:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_ADC_Init+0xfc>)
 8001f80:	400b      	ands	r3, r1
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d115      	bne.n	8001fb2 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 8001f86:	2300      	movs	r3, #0
 8001f88:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f8c:	f023 0303 	bic.w	r3, r3, #3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001f96:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f98:	460e      	mov	r6, r1
 8001f9a:	e7ca      	b.n	8001f32 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f9e:	f043 0320 	orr.w	r3, r3, #32
 8001fa2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fac:	e7cb      	b.n	8001f46 <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8001fae:	2100      	movs	r1, #0
 8001fb0:	e7df      	b.n	8001f72 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fb4:	f023 0312 	bic.w	r3, r3, #18
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	e7e5      	b.n	8001f96 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fd0:	e7f9      	b.n	8001fc6 <HAL_ADC_Init+0xea>
 8001fd2:	bf00      	nop
 8001fd4:	ffe1f7fd 	.word	0xffe1f7fd
 8001fd8:	ff1f0efe 	.word	0xff1f0efe

08001fdc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fde:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fea:	041b      	lsls	r3, r3, #16
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001ff6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001ff8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002002:	b570      	push	{r4, r5, r6, lr}
 8002004:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002006:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200e:	f1c4 0507 	rsb	r5, r4, #7
 8002012:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002014:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	bf28      	it	cs
 800201a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201c:	2b06      	cmp	r3, #6
 800201e:	bf98      	it	ls
 8002020:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002022:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	bf88      	it	hi
 8002028:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202a:	ea21 0303 	bic.w	r3, r1, r3
 800202e:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	fa06 f404 	lsl.w	r4, r6, r4
 8002034:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002038:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203a:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	bfa8      	it	ge
 8002040:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8002044:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	bfb8      	it	lt
 800204a:	4a06      	ldrlt	r2, [pc, #24]	; (8002064 <HAL_NVIC_SetPriority+0x64>)
 800204c:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	bfab      	itete	ge
 8002050:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	e000ed14 	.word	0xe000ed14

08002068 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002068:	2800      	cmp	r0, #0
 800206a:	db08      	blt.n	800207e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206c:	2301      	movs	r3, #1
 800206e:	0942      	lsrs	r2, r0, #5
 8002070:	f000 001f 	and.w	r0, r0, #31
 8002074:	fa03 f000 	lsl.w	r0, r3, r0
 8002078:	4b01      	ldr	r3, [pc, #4]	; (8002080 <HAL_NVIC_EnableIRQ+0x18>)
 800207a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100

08002084 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	3801      	subs	r0, #1
 8002086:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800208a:	d20a      	bcs.n	80020a2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020b0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020b2:	b330      	cbz	r0, 8002102 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020b4:	2214      	movs	r2, #20
 80020b6:	6801      	ldr	r1, [r0, #0]
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_DMA_Init+0x58>)
 80020ba:	440b      	add	r3, r1
 80020bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020c6:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80020c8:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020ca:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80020ce:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d0:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020d2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d6:	4323      	orrs	r3, r4
 80020d8:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020da:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020de:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e0:	6944      	ldr	r4, [r0, #20]
 80020e2:	4323      	orrs	r3, r4
 80020e4:	6984      	ldr	r4, [r0, #24]
 80020e6:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e8:	69c4      	ldr	r4, [r0, #28]
 80020ea:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80020ec:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020ee:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020f0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f2:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80020f4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020fa:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80020fe:	4618      	mov	r0, r3
}
 8002100:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002102:	2001      	movs	r0, #1
 8002104:	e7fc      	b.n	8002100 <HAL_DMA_Init+0x50>
 8002106:	bf00      	nop
 8002108:	bffdfff8 	.word	0xbffdfff8
 800210c:	40020000 	.word	0x40020000

08002110 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002112:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002116:	2c01      	cmp	r4, #1
 8002118:	d035      	beq.n	8002186 <HAL_DMA_Start_IT+0x76>
 800211a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800211c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002120:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002124:	42a5      	cmp	r5, r4
 8002126:	f04f 0600 	mov.w	r6, #0
 800212a:	f04f 0402 	mov.w	r4, #2
 800212e:	d128      	bne.n	8002182 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002130:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002134:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002138:	6826      	ldr	r6, [r4, #0]
 800213a:	f026 0601 	bic.w	r6, r6, #1
 800213e:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002140:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8002144:	40bd      	lsls	r5, r7
 8002146:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002148:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800214a:	6843      	ldr	r3, [r0, #4]
 800214c:	6805      	ldr	r5, [r0, #0]
 800214e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002150:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002152:	bf0b      	itete	eq
 8002154:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002156:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002158:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800215a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800215c:	b14b      	cbz	r3, 8002172 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002166:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002168:	682b      	ldr	r3, [r5, #0]
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	602b      	str	r3, [r5, #0]
}
 8002170:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	f043 030a 	orr.w	r3, r3, #10
 8002180:	e7f0      	b.n	8002164 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8002182:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8002186:	2002      	movs	r0, #2
 8002188:	e7f2      	b.n	8002170 <HAL_DMA_Start_IT+0x60>
	...

0800218c <HAL_DMA_IRQHandler>:
{
 800218c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800218e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002190:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002192:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002194:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002196:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002198:	4095      	lsls	r5, r2
 800219a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800219c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800219e:	d032      	beq.n	8002206 <HAL_DMA_IRQHandler+0x7a>
 80021a0:	074d      	lsls	r5, r1, #29
 80021a2:	d530      	bpl.n	8002206 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021a8:	bf5e      	ittt	pl
 80021aa:	681a      	ldrpl	r2, [r3, #0]
 80021ac:	f022 0204 	bicpl.w	r2, r2, #4
 80021b0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021b2:	4a3e      	ldr	r2, [pc, #248]	; (80022ac <HAL_DMA_IRQHandler+0x120>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d019      	beq.n	80021ec <HAL_DMA_IRQHandler+0x60>
 80021b8:	3214      	adds	r2, #20
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d018      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x64>
 80021be:	3214      	adds	r2, #20
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d017      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x68>
 80021c4:	3214      	adds	r2, #20
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <HAL_DMA_IRQHandler+0x6e>
 80021ca:	3214      	adds	r2, #20
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d017      	beq.n	8002200 <HAL_DMA_IRQHandler+0x74>
 80021d0:	3214      	adds	r2, #20
 80021d2:	4293      	cmp	r3, r2
 80021d4:	bf0c      	ite	eq
 80021d6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80021da:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80021de:	4a34      	ldr	r2, [pc, #208]	; (80022b0 <HAL_DMA_IRQHandler+0x124>)
 80021e0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80021e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d05e      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x11a>
}
 80021e8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80021ea:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021ec:	2304      	movs	r3, #4
 80021ee:	e7f6      	b.n	80021de <HAL_DMA_IRQHandler+0x52>
 80021f0:	2340      	movs	r3, #64	; 0x40
 80021f2:	e7f4      	b.n	80021de <HAL_DMA_IRQHandler+0x52>
 80021f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f8:	e7f1      	b.n	80021de <HAL_DMA_IRQHandler+0x52>
 80021fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021fe:	e7ee      	b.n	80021de <HAL_DMA_IRQHandler+0x52>
 8002200:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002204:	e7eb      	b.n	80021de <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002206:	2502      	movs	r5, #2
 8002208:	4095      	lsls	r5, r2
 800220a:	4225      	tst	r5, r4
 800220c:	d035      	beq.n	800227a <HAL_DMA_IRQHandler+0xee>
 800220e:	078d      	lsls	r5, r1, #30
 8002210:	d533      	bpl.n	800227a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	0694      	lsls	r4, r2, #26
 8002216:	d406      	bmi.n	8002226 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	f022 020a 	bic.w	r2, r2, #10
 800221e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002220:	2201      	movs	r2, #1
 8002222:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002226:	4a21      	ldr	r2, [pc, #132]	; (80022ac <HAL_DMA_IRQHandler+0x120>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d019      	beq.n	8002260 <HAL_DMA_IRQHandler+0xd4>
 800222c:	3214      	adds	r2, #20
 800222e:	4293      	cmp	r3, r2
 8002230:	d018      	beq.n	8002264 <HAL_DMA_IRQHandler+0xd8>
 8002232:	3214      	adds	r2, #20
 8002234:	4293      	cmp	r3, r2
 8002236:	d017      	beq.n	8002268 <HAL_DMA_IRQHandler+0xdc>
 8002238:	3214      	adds	r2, #20
 800223a:	4293      	cmp	r3, r2
 800223c:	d017      	beq.n	800226e <HAL_DMA_IRQHandler+0xe2>
 800223e:	3214      	adds	r2, #20
 8002240:	4293      	cmp	r3, r2
 8002242:	d017      	beq.n	8002274 <HAL_DMA_IRQHandler+0xe8>
 8002244:	3214      	adds	r2, #20
 8002246:	4293      	cmp	r3, r2
 8002248:	bf0c      	ite	eq
 800224a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800224e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_DMA_IRQHandler+0x124>)
 8002254:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002256:	2300      	movs	r3, #0
 8002258:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800225c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800225e:	e7c1      	b.n	80021e4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002260:	2302      	movs	r3, #2
 8002262:	e7f6      	b.n	8002252 <HAL_DMA_IRQHandler+0xc6>
 8002264:	2320      	movs	r3, #32
 8002266:	e7f4      	b.n	8002252 <HAL_DMA_IRQHandler+0xc6>
 8002268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800226c:	e7f1      	b.n	8002252 <HAL_DMA_IRQHandler+0xc6>
 800226e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002272:	e7ee      	b.n	8002252 <HAL_DMA_IRQHandler+0xc6>
 8002274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002278:	e7eb      	b.n	8002252 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800227a:	2508      	movs	r5, #8
 800227c:	4095      	lsls	r5, r2
 800227e:	4225      	tst	r5, r4
 8002280:	d011      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x11a>
 8002282:	0709      	lsls	r1, r1, #28
 8002284:	d50f      	bpl.n	80022a6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	f021 010e 	bic.w	r1, r1, #14
 800228c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800228e:	2301      	movs	r3, #1
 8002290:	fa03 f202 	lsl.w	r2, r3, r2
 8002294:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002296:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002298:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800229c:	2300      	movs	r3, #0
 800229e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80022a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80022a4:	e79e      	b.n	80021e4 <HAL_DMA_IRQHandler+0x58>
}
 80022a6:	bc70      	pop	{r4, r5, r6}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40020008 	.word	0x40020008
 80022b0:	40020000 	.word	0x40020000

080022b4 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <FLASH_SetErrorCode+0x48>)
 80022b6:	68d3      	ldr	r3, [r2, #12]
 80022b8:	f013 0310 	ands.w	r3, r3, #16
 80022bc:	d005      	beq.n	80022ca <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80022be:	4910      	ldr	r1, [pc, #64]	; (8002300 <FLASH_SetErrorCode+0x4c>)
 80022c0:	69cb      	ldr	r3, [r1, #28]
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80022c8:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80022ca:	68d2      	ldr	r2, [r2, #12]
 80022cc:	0750      	lsls	r0, r2, #29
 80022ce:	d506      	bpl.n	80022de <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80022d0:	490b      	ldr	r1, [pc, #44]	; (8002300 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80022d2:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80022d6:	69ca      	ldr	r2, [r1, #28]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <FLASH_SetErrorCode+0x48>)
 80022e0:	69d1      	ldr	r1, [r2, #28]
 80022e2:	07c9      	lsls	r1, r1, #31
 80022e4:	d508      	bpl.n	80022f8 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <FLASH_SetErrorCode+0x4c>)
 80022e8:	69c1      	ldr	r1, [r0, #28]
 80022ea:	f041 0104 	orr.w	r1, r1, #4
 80022ee:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80022f0:	69d1      	ldr	r1, [r2, #28]
 80022f2:	f021 0101 	bic.w	r1, r1, #1
 80022f6:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80022f8:	60d3      	str	r3, [r2, #12]
}  
 80022fa:	4770      	bx	lr
 80022fc:	40022000 	.word	0x40022000
 8002300:	20001988 	.word	0x20001988

08002304 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_FLASH_Unlock+0x1c>)
 8002306:	6918      	ldr	r0, [r3, #16]
 8002308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800230c:	d007      	beq.n	800231e <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <HAL_FLASH_Unlock+0x20>)
 8002310:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002312:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002316:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002318:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800231e:	4770      	bx	lr
 8002320:	40022000 	.word	0x40022000
 8002324:	45670123 	.word	0x45670123

08002328 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002328:	4a03      	ldr	r2, [pc, #12]	; (8002338 <HAL_FLASH_Lock+0x10>)
}
 800232a:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800232c:	6913      	ldr	r3, [r2, #16]
 800232e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002332:	6113      	str	r3, [r2, #16]
}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000

0800233c <FLASH_WaitForLastOperation>:
{
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233e:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff fc24 	bl	8001b8c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002344:	4c11      	ldr	r4, [pc, #68]	; (800238c <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8002346:	4607      	mov	r7, r0
 8002348:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800234a:	68e3      	ldr	r3, [r4, #12]
 800234c:	07d8      	lsls	r0, r3, #31
 800234e:	d412      	bmi.n	8002376 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002350:	68e3      	ldr	r3, [r4, #12]
 8002352:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002354:	bf44      	itt	mi
 8002356:	2320      	movmi	r3, #32
 8002358:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800235a:	68eb      	ldr	r3, [r5, #12]
 800235c:	06da      	lsls	r2, r3, #27
 800235e:	d406      	bmi.n	800236e <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002360:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002362:	07db      	lsls	r3, r3, #31
 8002364:	d403      	bmi.n	800236e <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002366:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002368:	f010 0004 	ands.w	r0, r0, #4
 800236c:	d007      	beq.n	800237e <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 800236e:	f7ff ffa1 	bl	80022b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002372:	2001      	movs	r0, #1
 8002374:	e003      	b.n	800237e <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8002376:	1c73      	adds	r3, r6, #1
 8002378:	d0e7      	beq.n	800234a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800237a:	b90e      	cbnz	r6, 8002380 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 800237c:	2003      	movs	r0, #3
}
 800237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002380:	f7ff fc04 	bl	8001b8c <HAL_GetTick>
 8002384:	1bc0      	subs	r0, r0, r7
 8002386:	42b0      	cmp	r0, r6
 8002388:	d9df      	bls.n	800234a <FLASH_WaitForLastOperation+0xe>
 800238a:	e7f7      	b.n	800237c <FLASH_WaitForLastOperation+0x40>
 800238c:	40022000 	.word	0x40022000

08002390 <HAL_FLASH_Program>:
{
 8002390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8002394:	4c24      	ldr	r4, [pc, #144]	; (8002428 <HAL_FLASH_Program+0x98>)
{
 8002396:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8002398:	7e23      	ldrb	r3, [r4, #24]
{
 800239a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800239c:	2b01      	cmp	r3, #1
{
 800239e:	460f      	mov	r7, r1
 80023a0:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80023a2:	d03f      	beq.n	8002424 <HAL_FLASH_Program+0x94>
 80023a4:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023a6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80023aa:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023ac:	f7ff ffc6 	bl	800233c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80023b0:	bba0      	cbnz	r0, 800241c <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023b2:	2d01      	cmp	r5, #1
 80023b4:	d003      	beq.n	80023be <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80023b6:	2d02      	cmp	r5, #2
 80023b8:	bf0c      	ite	eq
 80023ba:	2502      	moveq	r5, #2
 80023bc:	2504      	movne	r5, #4
 80023be:	f04f 0900 	mov.w	r9, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023c2:	46cb      	mov	fp, r9
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80023c4:	f8df a064 	ldr.w	sl, [pc, #100]	; 800242c <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023c8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80023cc:	f1c3 0120 	rsb	r1, r3, #32
 80023d0:	f1a3 0220 	sub.w	r2, r3, #32
 80023d4:	fa06 f101 	lsl.w	r1, r6, r1
 80023d8:	fa28 f303 	lsr.w	r3, r8, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023dc:	f8c4 b01c 	str.w	fp, [r4, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023e0:	430b      	orrs	r3, r1
 80023e2:	fa26 f202 	lsr.w	r2, r6, r2
 80023e6:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80023e8:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023ec:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023f6:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 80023fa:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023fe:	f7ff ff9d 	bl	800233c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002402:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 800240e:	b928      	cbnz	r0, 800241c <HAL_FLASH_Program+0x8c>
 8002410:	f109 0901 	add.w	r9, r9, #1
    for (index = 0U; index < nbiterations; index++)
 8002414:	fa5f f389 	uxtb.w	r3, r9
 8002418:	429d      	cmp	r5, r3
 800241a:	d8d5      	bhi.n	80023c8 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 800241c:	2300      	movs	r3, #0
 800241e:	7623      	strb	r3, [r4, #24]
}
 8002420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8002424:	2002      	movs	r0, #2
 8002426:	e7fb      	b.n	8002420 <HAL_FLASH_Program+0x90>
 8002428:	20001988 	.word	0x20001988
 800242c:	40022000 	.word	0x40022000

08002430 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002430:	2200      	movs	r2, #0
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <FLASH_MassErase.isra.0+0x1c>)
 8002434:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <FLASH_MassErase.isra.0+0x20>)
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	f042 0204 	orr.w	r2, r2, #4
 800243e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002446:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20001988 	.word	0x20001988
 8002450:	40022000 	.word	0x40022000

08002454 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002454:	2200      	movs	r2, #0
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <FLASH_PageErase+0x1c>)
 8002458:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <FLASH_PageErase+0x20>)
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	f042 0202 	orr.w	r2, r2, #2
 8002462:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002464:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800246c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800246e:	4770      	bx	lr
 8002470:	20001988 	.word	0x20001988
 8002474:	40022000 	.word	0x40022000

08002478 <HAL_FLASHEx_Erase>:
{
 8002478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800247c:	4d22      	ldr	r5, [pc, #136]	; (8002508 <HAL_FLASHEx_Erase+0x90>)
{
 800247e:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8002480:	7e2b      	ldrb	r3, [r5, #24]
{
 8002482:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002484:	2b01      	cmp	r3, #1
 8002486:	d03d      	beq.n	8002504 <HAL_FLASHEx_Erase+0x8c>
 8002488:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800248a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 800248c:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800248e:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002490:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002494:	d113      	bne.n	80024be <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002496:	f7ff ff51 	bl	800233c <FLASH_WaitForLastOperation>
 800249a:	b120      	cbz	r0, 80024a6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800249c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800249e:	2300      	movs	r3, #0
 80024a0:	762b      	strb	r3, [r5, #24]
}
 80024a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80024a6:	f7ff ffc3 	bl	8002430 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024ae:	f7ff ff45 	bl	800233c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <HAL_FLASHEx_Erase+0x94>)
 80024b4:	6913      	ldr	r3, [r2, #16]
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	6113      	str	r3, [r2, #16]
 80024bc:	e7ef      	b.n	800249e <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80024be:	f7ff ff3d 	bl	800233c <FLASH_WaitForLastOperation>
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d1ea      	bne.n	800249c <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024ce:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80024d0:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80024d2:	4c0e      	ldr	r4, [pc, #56]	; (800250c <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80024d4:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
 80024d8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80024dc:	42b3      	cmp	r3, r6
 80024de:	d9de      	bls.n	800249e <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80024e0:	4630      	mov	r0, r6
 80024e2:	f7ff ffb7 	bl	8002454 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024ea:	f7ff ff27 	bl	800233c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80024ee:	6923      	ldr	r3, [r4, #16]
 80024f0:	f023 0302 	bic.w	r3, r3, #2
 80024f4:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80024f6:	b110      	cbz	r0, 80024fe <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 80024f8:	f8c8 6000 	str.w	r6, [r8]
            break;
 80024fc:	e7cf      	b.n	800249e <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80024fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002502:	e7e7      	b.n	80024d4 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8002504:	2002      	movs	r0, #2
 8002506:	e7cc      	b.n	80024a2 <HAL_FLASHEx_Erase+0x2a>
 8002508:	20001988 	.word	0x20001988
 800250c:	40022000 	.word	0x40022000

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002514:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002516:	4626      	mov	r6, r4
 8002518:	4b65      	ldr	r3, [pc, #404]	; (80026b0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800251a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80026c0 <HAL_GPIO_Init+0x1b0>
 800251e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80026c4 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002522:	680a      	ldr	r2, [r1, #0]
 8002524:	fa32 f506 	lsrs.w	r5, r2, r6
 8002528:	d102      	bne.n	8002530 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800252a:	b003      	add	sp, #12
 800252c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002530:	f04f 0801 	mov.w	r8, #1
 8002534:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002538:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800253c:	4590      	cmp	r8, r2
 800253e:	d17e      	bne.n	800263e <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8002540:	684d      	ldr	r5, [r1, #4]
 8002542:	2d12      	cmp	r5, #18
 8002544:	f000 80a9 	beq.w	800269a <HAL_GPIO_Init+0x18a>
 8002548:	f200 8082 	bhi.w	8002650 <HAL_GPIO_Init+0x140>
 800254c:	2d02      	cmp	r5, #2
 800254e:	f000 80a1 	beq.w	8002694 <HAL_GPIO_Init+0x184>
 8002552:	d876      	bhi.n	8002642 <HAL_GPIO_Init+0x132>
 8002554:	2d00      	cmp	r5, #0
 8002556:	f000 8088 	beq.w	800266a <HAL_GPIO_Init+0x15a>
 800255a:	2d01      	cmp	r5, #1
 800255c:	f000 8098 	beq.w	8002690 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002560:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002564:	2aff      	cmp	r2, #255	; 0xff
 8002566:	bf93      	iteet	ls
 8002568:	4682      	movls	sl, r0
 800256a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800256e:	3d08      	subhi	r5, #8
 8002570:	f8d0 b000 	ldrls.w	fp, [r0]
 8002574:	bf92      	itee	ls
 8002576:	00b5      	lslls	r5, r6, #2
 8002578:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800257c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800257e:	fa09 f805 	lsl.w	r8, r9, r5
 8002582:	ea2b 0808 	bic.w	r8, fp, r8
 8002586:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800258a:	bf88      	it	hi
 800258c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002590:	ea48 0505 	orr.w	r5, r8, r5
 8002594:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002598:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800259c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80025a0:	d04d      	beq.n	800263e <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025a2:	4f44      	ldr	r7, [pc, #272]	; (80026b4 <HAL_GPIO_Init+0x1a4>)
 80025a4:	f026 0803 	bic.w	r8, r6, #3
 80025a8:	69bd      	ldr	r5, [r7, #24]
 80025aa:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80025ae:	f045 0501 	orr.w	r5, r5, #1
 80025b2:	61bd      	str	r5, [r7, #24]
 80025b4:	69bd      	ldr	r5, [r7, #24]
 80025b6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80025ba:	f005 0501 	and.w	r5, r5, #1
 80025be:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025c0:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025c4:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025c6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80025ca:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ce:	fa09 f90b 	lsl.w	r9, r9, fp
 80025d2:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025d6:	4d38      	ldr	r5, [pc, #224]	; (80026b8 <HAL_GPIO_Init+0x1a8>)
 80025d8:	42a8      	cmp	r0, r5
 80025da:	d063      	beq.n	80026a4 <HAL_GPIO_Init+0x194>
 80025dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025e0:	42a8      	cmp	r0, r5
 80025e2:	d061      	beq.n	80026a8 <HAL_GPIO_Init+0x198>
 80025e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025e8:	42a8      	cmp	r0, r5
 80025ea:	d05f      	beq.n	80026ac <HAL_GPIO_Init+0x19c>
 80025ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025f0:	42a8      	cmp	r0, r5
 80025f2:	bf0c      	ite	eq
 80025f4:	2503      	moveq	r5, #3
 80025f6:	2504      	movne	r5, #4
 80025f8:	fa05 f50b 	lsl.w	r5, r5, fp
 80025fc:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002600:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002604:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002606:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800260a:	bf14      	ite	ne
 800260c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800260e:	4395      	biceq	r5, r2
 8002610:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002612:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002614:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002618:	bf14      	ite	ne
 800261a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800261c:	4395      	biceq	r5, r2
 800261e:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002620:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002622:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002626:	bf14      	ite	ne
 8002628:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800262a:	4395      	biceq	r5, r2
 800262c:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800262e:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002630:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002634:	bf14      	ite	ne
 8002636:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002638:	ea25 0202 	biceq.w	r2, r5, r2
 800263c:	60da      	str	r2, [r3, #12]
	position++;
 800263e:	3601      	adds	r6, #1
 8002640:	e76f      	b.n	8002522 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002642:	2d03      	cmp	r5, #3
 8002644:	d022      	beq.n	800268c <HAL_GPIO_Init+0x17c>
 8002646:	2d11      	cmp	r5, #17
 8002648:	d18a      	bne.n	8002560 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800264a:	68cc      	ldr	r4, [r1, #12]
 800264c:	3404      	adds	r4, #4
          break;
 800264e:	e787      	b.n	8002560 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002650:	4f1a      	ldr	r7, [pc, #104]	; (80026bc <HAL_GPIO_Init+0x1ac>)
 8002652:	42bd      	cmp	r5, r7
 8002654:	d009      	beq.n	800266a <HAL_GPIO_Init+0x15a>
 8002656:	d812      	bhi.n	800267e <HAL_GPIO_Init+0x16e>
 8002658:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80026c8 <HAL_GPIO_Init+0x1b8>
 800265c:	454d      	cmp	r5, r9
 800265e:	d004      	beq.n	800266a <HAL_GPIO_Init+0x15a>
 8002660:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002664:	454d      	cmp	r5, r9
 8002666:	f47f af7b 	bne.w	8002560 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800266a:	688c      	ldr	r4, [r1, #8]
 800266c:	b1c4      	cbz	r4, 80026a0 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800266e:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002670:	bf0c      	ite	eq
 8002672:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002676:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800267a:	2408      	movs	r4, #8
 800267c:	e770      	b.n	8002560 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800267e:	4565      	cmp	r5, ip
 8002680:	d0f3      	beq.n	800266a <HAL_GPIO_Init+0x15a>
 8002682:	4575      	cmp	r5, lr
 8002684:	d0f1      	beq.n	800266a <HAL_GPIO_Init+0x15a>
 8002686:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80026cc <HAL_GPIO_Init+0x1bc>
 800268a:	e7eb      	b.n	8002664 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800268c:	2400      	movs	r4, #0
 800268e:	e767      	b.n	8002560 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002690:	68cc      	ldr	r4, [r1, #12]
          break;
 8002692:	e765      	b.n	8002560 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002694:	68cc      	ldr	r4, [r1, #12]
 8002696:	3408      	adds	r4, #8
          break;
 8002698:	e762      	b.n	8002560 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800269a:	68cc      	ldr	r4, [r1, #12]
 800269c:	340c      	adds	r4, #12
          break;
 800269e:	e75f      	b.n	8002560 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026a0:	2404      	movs	r4, #4
 80026a2:	e75d      	b.n	8002560 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a4:	2500      	movs	r5, #0
 80026a6:	e7a7      	b.n	80025f8 <HAL_GPIO_Init+0xe8>
 80026a8:	2501      	movs	r5, #1
 80026aa:	e7a5      	b.n	80025f8 <HAL_GPIO_Init+0xe8>
 80026ac:	2502      	movs	r5, #2
 80026ae:	e7a3      	b.n	80025f8 <HAL_GPIO_Init+0xe8>
 80026b0:	40010400 	.word	0x40010400
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010800 	.word	0x40010800
 80026bc:	10210000 	.word	0x10210000
 80026c0:	10310000 	.word	0x10310000
 80026c4:	10320000 	.word	0x10320000
 80026c8:	10110000 	.word	0x10110000
 80026cc:	10220000 	.word	0x10220000

080026d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026d0:	6883      	ldr	r3, [r0, #8]
 80026d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80026d4:	bf14      	ite	ne
 80026d6:	2001      	movne	r0, #1
 80026d8:	2000      	moveq	r0, #0
 80026da:	4770      	bx	lr

080026dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026dc:	b10a      	cbz	r2, 80026e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026de:	6101      	str	r1, [r0, #16]
  }
}
 80026e0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026e2:	0409      	lsls	r1, r1, #16
 80026e4:	e7fb      	b.n	80026de <HAL_GPIO_WritePin+0x2>

080026e6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80026e6:	68c3      	ldr	r3, [r0, #12]
 80026e8:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ea:	bf14      	ite	ne
 80026ec:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ee:	6101      	streq	r1, [r0, #16]
  }
}
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026f4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80026f8:	6959      	ldr	r1, [r3, #20]
 80026fa:	4201      	tst	r1, r0
 80026fc:	d002      	beq.n	8002704 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026fe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002700:	f005 f912 	bl	8007928 <HAL_GPIO_EXTI_Callback>
  }
}
 8002704:	bd08      	pop	{r3, pc}
 8002706:	bf00      	nop
 8002708:	40010400 	.word	0x40010400

0800270c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270c:	6801      	ldr	r1, [r0, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	694b      	ldr	r3, [r1, #20]
 8002712:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002716:	d010      	beq.n	800273a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002718:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800271c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800271e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002720:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002722:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002726:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800272a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
 8002738:	4770      	bx	lr
  }
  return HAL_OK;
 800273a:	4618      	mov	r0, r3
}
 800273c:	4770      	bx	lr

0800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800273e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002742:	4604      	mov	r4, r0
 8002744:	4616      	mov	r6, r2
 8002746:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002748:	b28f      	uxth	r7, r1
 800274a:	6825      	ldr	r5, [r4, #0]
 800274c:	6968      	ldr	r0, [r5, #20]
 800274e:	ea37 0000 	bics.w	r0, r7, r0
 8002752:	d017      	beq.n	8002784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002754:	696b      	ldr	r3, [r5, #20]
 8002756:	055a      	lsls	r2, r3, #21
 8002758:	d516      	bpl.n	8002788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275a:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800275c:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002762:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002764:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002768:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800276a:	2300      	movs	r3, #0
 800276c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800276e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002772:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002776:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002778:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800277c:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800277e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002780:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002788:	1c73      	adds	r3, r6, #1
 800278a:	d0df      	beq.n	800274c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278c:	f7ff f9fe 	bl	8001b8c <HAL_GetTick>
 8002790:	eba0 0008 	sub.w	r0, r0, r8
 8002794:	42b0      	cmp	r0, r6
 8002796:	d801      	bhi.n	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8002798:	2e00      	cmp	r6, #0
 800279a:	d1d6      	bne.n	800274a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800279c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800279e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027a0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027ac:	f042 0220 	orr.w	r2, r2, #32
 80027b0:	e7e4      	b.n	800277c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080027b2 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80027b2:	b570      	push	{r4, r5, r6, lr}
 80027b4:	4604      	mov	r4, r0
 80027b6:	460d      	mov	r5, r1
 80027b8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	075b      	lsls	r3, r3, #29
 80027c0:	d501      	bpl.n	80027c6 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80027c2:	2000      	movs	r0, #0
}
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff ffa0 	bl	800270c <I2C_IsAcknowledgeFailed>
 80027cc:	b9a8      	cbnz	r0, 80027fa <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80027ce:	1c6a      	adds	r2, r5, #1
 80027d0:	d0f3      	beq.n	80027ba <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7ff f9db 	bl	8001b8c <HAL_GetTick>
 80027d6:	1b80      	subs	r0, r0, r6
 80027d8:	42a8      	cmp	r0, r5
 80027da:	d801      	bhi.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80027dc:	2d00      	cmp	r5, #0
 80027de:	d1ec      	bne.n	80027ba <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027e0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80027e2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027e4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80027f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
 80027fc:	e7e2      	b.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080027fe <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80027fe:	b570      	push	{r4, r5, r6, lr}
 8002800:	4604      	mov	r4, r0
 8002802:	460d      	mov	r5, r1
 8002804:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002806:	6820      	ldr	r0, [r4, #0]
 8002808:	6943      	ldr	r3, [r0, #20]
 800280a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800280e:	d001      	beq.n	8002814 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002810:	2000      	movs	r0, #0
 8002812:	e010      	b.n	8002836 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002814:	6942      	ldr	r2, [r0, #20]
 8002816:	06d2      	lsls	r2, r2, #27
 8002818:	d50e      	bpl.n	8002838 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800281a:	f06f 0210 	mvn.w	r2, #16
 800281e:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002820:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002822:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002824:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002828:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800282c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800282e:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002830:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002832:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002836:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002838:	f7ff f9a8 	bl	8001b8c <HAL_GetTick>
 800283c:	1b80      	subs	r0, r0, r6
 800283e:	42a8      	cmp	r0, r5
 8002840:	d801      	bhi.n	8002846 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8002842:	2d00      	cmp	r5, #0
 8002844:	d1df      	bne.n	8002806 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002846:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002848:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800284a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800284c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002850:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002854:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	e7e8      	b.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800285c <I2C_WaitOnFlagUntilTimeout>:
{
 800285c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002860:	4604      	mov	r4, r0
 8002862:	4690      	mov	r8, r2
 8002864:	461f      	mov	r7, r3
 8002866:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002868:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800286c:	b28d      	uxth	r5, r1
 800286e:	6821      	ldr	r1, [r4, #0]
 8002870:	f1b9 0f01 	cmp.w	r9, #1
 8002874:	bf0c      	ite	eq
 8002876:	694b      	ldreq	r3, [r1, #20]
 8002878:	698b      	ldrne	r3, [r1, #24]
 800287a:	ea35 0303 	bics.w	r3, r5, r3
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	4598      	cmp	r8, r3
 8002886:	d001      	beq.n	800288c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002888:	2000      	movs	r0, #0
 800288a:	e016      	b.n	80028ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800288c:	1c7b      	adds	r3, r7, #1
 800288e:	d0ef      	beq.n	8002870 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002890:	f7ff f97c 	bl	8001b8c <HAL_GetTick>
 8002894:	1b80      	subs	r0, r0, r6
 8002896:	42b8      	cmp	r0, r7
 8002898:	d801      	bhi.n	800289e <I2C_WaitOnFlagUntilTimeout+0x42>
 800289a:	2f00      	cmp	r7, #0
 800289c:	d1e7      	bne.n	800286e <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800289e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80028a0:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 80028a2:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028a4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80028b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028b4:	f042 0220 	orr.w	r2, r2, #32
 80028b8:	6422      	str	r2, [r4, #64]	; 0x40
}
 80028ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080028be <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80028be:	b570      	push	{r4, r5, r6, lr}
 80028c0:	4604      	mov	r4, r0
 80028c2:	460d      	mov	r5, r1
 80028c4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	061b      	lsls	r3, r3, #24
 80028cc:	d501      	bpl.n	80028d2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80028ce:	2000      	movs	r0, #0
}
 80028d0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7ff ff1a 	bl	800270c <I2C_IsAcknowledgeFailed>
 80028d8:	b9a8      	cbnz	r0, 8002906 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80028da:	1c6a      	adds	r2, r5, #1
 80028dc:	d0f3      	beq.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028de:	f7ff f955 	bl	8001b8c <HAL_GetTick>
 80028e2:	1b80      	subs	r0, r0, r6
 80028e4:	42a8      	cmp	r0, r5
 80028e6:	d801      	bhi.n	80028ec <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80028e8:	2d00      	cmp	r5, #0
 80028ea:	d1ec      	bne.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028ec:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ee:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028f0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80028fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	f042 0220 	orr.w	r2, r2, #32
 8002904:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002906:	2001      	movs	r0, #1
 8002908:	e7e2      	b.n	80028d0 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

0800290c <HAL_I2C_Init>:
{
 800290c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800290e:	4604      	mov	r4, r0
 8002910:	b908      	cbnz	r0, 8002916 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002912:	2001      	movs	r0, #1
}
 8002914:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002916:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800291a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800291e:	b91b      	cbnz	r3, 8002928 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002920:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002924:	f7fe feea 	bl	80016fc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002928:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800292a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002930:	6813      	ldr	r3, [r2, #0]
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002938:	f001 f910 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	4a41      	ldr	r2, [pc, #260]	; (8002a44 <HAL_I2C_Init+0x138>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d84d      	bhi.n	80029e0 <HAL_I2C_Init+0xd4>
 8002944:	4a40      	ldr	r2, [pc, #256]	; (8002a48 <HAL_I2C_Init+0x13c>)
 8002946:	4290      	cmp	r0, r2
 8002948:	d9e3      	bls.n	8002912 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800294a:	4940      	ldr	r1, [pc, #256]	; (8002a4c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800294c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800294e:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002952:	6855      	ldr	r5, [r2, #4]
 8002954:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002958:	430d      	orrs	r5, r1
 800295a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295c:	6a15      	ldr	r5, [r2, #32]
 800295e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002962:	3101      	adds	r1, #1
 8002964:	4329      	orrs	r1, r5
 8002966:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002968:	69d1      	ldr	r1, [r2, #28]
 800296a:	4d36      	ldr	r5, [pc, #216]	; (8002a44 <HAL_I2C_Init+0x138>)
 800296c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002970:	42ab      	cmp	r3, r5
 8002972:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002976:	f100 30ff 	add.w	r0, r0, #4294967295
 800297a:	d848      	bhi.n	8002a0e <HAL_I2C_Init+0x102>
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002982:	1c43      	adds	r3, r0, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	2b04      	cmp	r3, #4
 800298a:	bf38      	it	cc
 800298c:	2304      	movcc	r3, #4
 800298e:	430b      	orrs	r3, r1
 8002990:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002992:	6811      	ldr	r1, [r2, #0]
 8002994:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002998:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800299c:	4303      	orrs	r3, r0
 800299e:	430b      	orrs	r3, r1
 80029a0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a2:	6891      	ldr	r1, [r2, #8]
 80029a4:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80029a8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80029ac:	4303      	orrs	r3, r0
 80029ae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80029b2:	430b      	orrs	r3, r1
 80029b4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029b6:	68d1      	ldr	r1, [r2, #12]
 80029b8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80029bc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80029c0:	4303      	orrs	r3, r0
 80029c2:	430b      	orrs	r3, r1
 80029c4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80029c6:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c8:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029d8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029da:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80029de:	e799      	b.n	8002914 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_I2C_Init+0x144>)
 80029e2:	4290      	cmp	r0, r2
 80029e4:	d995      	bls.n	8002912 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80029e6:	4e19      	ldr	r6, [pc, #100]	; (8002a4c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029e8:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80029ec:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029f0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029f2:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029f4:	6855      	ldr	r5, [r2, #4]
 80029f6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80029fa:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029fc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a00:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a02:	6a15      	ldr	r5, [r2, #32]
 8002a04:	fbb1 f1f6 	udiv	r1, r1, r6
 8002a08:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002a0c:	e7a9      	b.n	8002962 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a0e:	68a5      	ldr	r5, [r4, #8]
 8002a10:	b955      	cbnz	r5, 8002a28 <HAL_I2C_Init+0x11c>
 8002a12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a16:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a1a:	1c43      	adds	r3, r0, #1
 8002a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a20:	b16b      	cbz	r3, 8002a3e <HAL_I2C_Init+0x132>
 8002a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a26:	e7b2      	b.n	800298e <HAL_I2C_Init+0x82>
 8002a28:	2519      	movs	r5, #25
 8002a2a:	436b      	muls	r3, r5
 8002a2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a30:	1c43      	adds	r3, r0, #1
 8002a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a36:	b113      	cbz	r3, 8002a3e <HAL_I2C_Init+0x132>
 8002a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a3c:	e7a7      	b.n	800298e <HAL_I2C_Init+0x82>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e7a5      	b.n	800298e <HAL_I2C_Init+0x82>
 8002a42:	bf00      	nop
 8002a44:	000186a0 	.word	0x000186a0
 8002a48:	001e847f 	.word	0x001e847f
 8002a4c:	000f4240 	.word	0x000f4240
 8002a50:	003d08ff 	.word	0x003d08ff

08002a54 <HAL_I2C_Master_Transmit>:
{
 8002a54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002a58:	4604      	mov	r4, r0
 8002a5a:	461f      	mov	r7, r3
 8002a5c:	460d      	mov	r5, r1
 8002a5e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff f894 	bl	8001b8c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a64:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002a68:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d004      	beq.n	8002a78 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002a6e:	2502      	movs	r5, #2
}
 8002a70:	4628      	mov	r0, r5
 8002a72:	b004      	add	sp, #16
 8002a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a78:	9000      	str	r0, [sp, #0]
 8002a7a:	2319      	movs	r3, #25
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4958      	ldr	r1, [pc, #352]	; (8002be0 <HAL_I2C_Master_Transmit+0x18c>)
 8002a80:	4620      	mov	r0, r4
 8002a82:	f7ff feeb 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d1f1      	bne.n	8002a6e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8002a8a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d0ed      	beq.n	8002a6e <HAL_I2C_Master_Transmit+0x1a>
 8002a92:	2301      	movs	r3, #1
 8002a94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002a9e:	bf5e      	ittt	pl
 8002aa0:	681a      	ldrpl	r2, [r3, #0]
 8002aa2:	f042 0201 	orrpl.w	r2, r2, #1
 8002aa6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002abc:	2200      	movs	r2, #0
 8002abe:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002ac0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ac2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002ac4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002ac8:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aca:	4a46      	ldr	r2, [pc, #280]	; (8002be4 <HAL_I2C_Master_Transmit+0x190>)
 8002acc:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ace:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ad0:	2a08      	cmp	r2, #8
 8002ad2:	d004      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x8a>
 8002ad4:	2a01      	cmp	r2, #1
 8002ad6:	d002      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x8a>
 8002ad8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002adc:	d104      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e002      	b.n	8002aee <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ae8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002aea:	2a12      	cmp	r2, #18
 8002aec:	d0f7      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aee:	9600      	str	r6, [sp, #0]
 8002af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002af2:	2200      	movs	r2, #0
 8002af4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af8:	4620      	mov	r0, r4
 8002afa:	f7ff feaf 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002afe:	b108      	cbz	r0, 8002b04 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8002b00:	2501      	movs	r5, #1
 8002b02:	e7b5      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b04:	6923      	ldr	r3, [r4, #16]
 8002b06:	6822      	ldr	r2, [r4, #0]
 8002b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b0c:	d121      	bne.n	8002b52 <HAL_I2C_Master_Transmit+0xfe>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b0e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002b12:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b14:	4633      	mov	r3, r6
 8002b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b18:	4933      	ldr	r1, [pc, #204]	; (8002be8 <HAL_I2C_Master_Transmit+0x194>)
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7ff fe0f 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b20:	4605      	mov	r5, r0
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d1ec      	bne.n	8002b00 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	9003      	str	r0, [sp, #12]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	9203      	str	r2, [sp, #12]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	9303      	str	r3, [sp, #12]
 8002b32:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002b34:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b36:	b9f3      	cbnz	r3, 8002b76 <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b38:	6821      	ldr	r1, [r4, #0]
 8002b3a:	680a      	ldr	r2, [r1, #0]
 8002b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b40:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002b44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002b50:	e78e      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b52:	11eb      	asrs	r3, r5, #7
 8002b54:	f003 0306 	and.w	r3, r3, #6
 8002b58:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002b5c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b5e:	4923      	ldr	r1, [pc, #140]	; (8002bec <HAL_I2C_Master_Transmit+0x198>)
 8002b60:	4633      	mov	r3, r6
 8002b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b64:	4620      	mov	r0, r4
 8002b66:	f7ff fdea 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d1c8      	bne.n	8002b00 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	b2ed      	uxtb	r5, r5
 8002b72:	611d      	str	r5, [r3, #16]
 8002b74:	e7ce      	b.n	8002b14 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b76:	4632      	mov	r2, r6
 8002b78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7ff fe9f 	bl	80028be <I2C_WaitOnTXEFlagUntilTimeout>
 8002b80:	b140      	cbz	r0, 8002b94 <HAL_I2C_Master_Transmit+0x140>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b84:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b86:	bf01      	itttt	eq
 8002b88:	6822      	ldreq	r2, [r4, #0]
 8002b8a:	6813      	ldreq	r3, [r2, #0]
 8002b8c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002b90:	6013      	streq	r3, [r2, #0]
 8002b92:	e7b5      	b.n	8002b00 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b96:	6820      	ldr	r0, [r4, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002b9e:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8002ba0:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002ba2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ba4:	3a01      	subs	r2, #1
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002baa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bac:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8002bae:	1e51      	subs	r1, r2, #1
 8002bb0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bb2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8002bb4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bb6:	d50a      	bpl.n	8002bce <HAL_I2C_Master_Transmit+0x17a>
 8002bb8:	b149      	cbz	r1, 8002bce <HAL_I2C_Master_Transmit+0x17a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bba:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8002bbc:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbe:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8002bc0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002bc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002bc4:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002bcc:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bce:	4632      	mov	r2, r6
 8002bd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7ff fded 	bl	80027b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d0ab      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0xe0>
 8002bdc:	e7d1      	b.n	8002b82 <HAL_I2C_Master_Transmit+0x12e>
 8002bde:	bf00      	nop
 8002be0:	00100002 	.word	0x00100002
 8002be4:	ffff0000 	.word	0xffff0000
 8002be8:	00010002 	.word	0x00010002
 8002bec:	00010008 	.word	0x00010008

08002bf0 <HAL_I2C_Master_Receive>:
{
 8002bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	4698      	mov	r8, r3
 8002bfa:	460f      	mov	r7, r1
 8002bfc:	4691      	mov	r9, r2
 8002bfe:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7fe ffc4 	bl	8001b8c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c04:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002c08:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d004      	beq.n	8002c18 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8002c0e:	2702      	movs	r7, #2
}
 8002c10:	4638      	mov	r0, r7
 8002c12:	b009      	add	sp, #36	; 0x24
 8002c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c18:	9000      	str	r0, [sp, #0]
 8002c1a:	2319      	movs	r3, #25
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	499d      	ldr	r1, [pc, #628]	; (8002e94 <HAL_I2C_Master_Receive+0x2a4>)
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7ff fe1b 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d1f1      	bne.n	8002c0e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8002c2a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d0ed      	beq.n	8002c0e <HAL_I2C_Master_Receive+0x1e>
 8002c32:	2301      	movs	r3, #1
 8002c34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002c3e:	bf5e      	ittt	pl
 8002c40:	681a      	ldrpl	r2, [r3, #0]
 8002c42:	f042 0201 	orrpl.w	r2, r2, #1
 8002c46:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4e:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c50:	2222      	movs	r2, #34	; 0x22
 8002c52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c56:	2210      	movs	r2, #16
 8002c58:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002c60:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c64:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002c66:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002c6a:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6c:	4a8a      	ldr	r2, [pc, #552]	; (8002e98 <HAL_I2C_Master_Receive+0x2a8>)
 8002c6e:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c72:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c74:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c76:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002c7a:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c7c:	d004      	beq.n	8002c88 <HAL_I2C_Master_Receive+0x98>
 8002c7e:	2a01      	cmp	r2, #1
 8002c80:	d002      	beq.n	8002c88 <HAL_I2C_Master_Receive+0x98>
 8002c82:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002c86:	d104      	bne.n	8002c92 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e002      	b.n	8002c98 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c92:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002c94:	2a11      	cmp	r2, #17
 8002c96:	d0f7      	beq.n	8002c88 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	9500      	str	r5, [sp, #0]
 8002c9a:	4633      	mov	r3, r6
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff fdda 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	b108      	cbz	r0, 8002cae <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8002caa:	2701      	movs	r7, #1
 8002cac:	e7b0      	b.n	8002c10 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cae:	6922      	ldr	r2, [r4, #16]
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002cb6:	d123      	bne.n	8002d00 <HAL_I2C_Master_Receive+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cb8:	f047 0701 	orr.w	r7, r7, #1
 8002cbc:	b2ff      	uxtb	r7, r7
 8002cbe:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	4632      	mov	r2, r6
 8002cc4:	4975      	ldr	r1, [pc, #468]	; (8002e9c <HAL_I2C_Master_Receive+0x2ac>)
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7ff fd39 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ccc:	4607      	mov	r7, r0
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d1eb      	bne.n	8002caa <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8002cd2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	2a00      	cmp	r2, #0
 8002cd8:	d146      	bne.n	8002d68 <HAL_I2C_Master_Receive+0x178>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	9003      	str	r0, [sp, #12]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	9203      	str	r2, [sp, #12]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	9203      	str	r2, [sp, #12]
 8002ce4:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cec:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002cfa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002cfe:	e787      	b.n	8002c10 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d00:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8002d04:	f008 0806 	and.w	r8, r8, #6
 8002d08:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002d0c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d0e:	4964      	ldr	r1, [pc, #400]	; (8002ea0 <HAL_I2C_Master_Receive+0x2b0>)
 8002d10:	462b      	mov	r3, r5
 8002d12:	4632      	mov	r2, r6
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7ff fd12 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d1c5      	bne.n	8002caa <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	b2ff      	uxtb	r7, r7
 8002d22:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d24:	4632      	mov	r2, r6
 8002d26:	462b      	mov	r3, r5
 8002d28:	495c      	ldr	r1, [pc, #368]	; (8002e9c <HAL_I2C_Master_Receive+0x2ac>)
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7ff fd07 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d30:	4602      	mov	r2, r0
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d1b9      	bne.n	8002caa <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	9007      	str	r0, [sp, #28]
 8002d3a:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3c:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	9107      	str	r1, [sp, #28]
 8002d40:	6999      	ldr	r1, [r3, #24]
 8002d42:	9107      	str	r1, [sp, #28]
 8002d44:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002d4c:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4e:	9500      	str	r5, [sp, #0]
 8002d50:	4633      	mov	r3, r6
 8002d52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d56:	f7ff fd81 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d1a5      	bne.n	8002caa <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d5e:	6822      	ldr	r2, [r4, #0]
 8002d60:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002d64:	6113      	str	r3, [r2, #16]
 8002d66:	e7ab      	b.n	8002cc0 <HAL_I2C_Master_Receive+0xd0>
    else if (hi2c->XferSize == 1U)
 8002d68:	2a01      	cmp	r2, #1
 8002d6a:	d131      	bne.n	8002dd0 <HAL_I2C_Master_Receive+0x1e0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d74:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	9004      	str	r0, [sp, #16]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	9204      	str	r2, [sp, #16]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	9204      	str	r2, [sp, #16]
 8002d82:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d8c:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d8e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8002ea4 <HAL_I2C_Master_Receive+0x2b4>
    while (hi2c->XferSize > 0U)
 8002d92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0aa      	beq.n	8002cee <HAL_I2C_Master_Receive+0xfe>
      if (hi2c->XferSize <= 3U)
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	f200 8085 	bhi.w	8002ea8 <HAL_I2C_Master_Receive+0x2b8>
        if (hi2c->XferSize == 1U)
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d132      	bne.n	8002e08 <HAL_I2C_Master_Receive+0x218>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da2:	462a      	mov	r2, r5
 8002da4:	4631      	mov	r1, r6
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7ff fd29 	bl	80027fe <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	f47f af7c 	bne.w	8002caa <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002db8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002dc0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002dc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002dce:	e7e0      	b.n	8002d92 <HAL_I2C_Master_Receive+0x1a2>
    else if (hi2c->XferSize == 2U)
 8002dd0:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd2:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Master_Receive+0x204>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ddc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	9005      	str	r0, [sp, #20]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	9205      	str	r2, [sp, #20]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	9205      	str	r2, [sp, #20]
 8002dea:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df2:	e7ca      	b.n	8002d8a <HAL_I2C_Master_Receive+0x19a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002df8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfa:	9006      	str	r0, [sp, #24]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	9206      	str	r2, [sp, #24]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	9306      	str	r3, [sp, #24]
 8002e04:	9b06      	ldr	r3, [sp, #24]
 8002e06:	e7c2      	b.n	8002d8e <HAL_I2C_Master_Receive+0x19e>
        else if (hi2c->XferSize == 2U)
 8002e08:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e0a:	9500      	str	r5, [sp, #0]
 8002e0c:	4633      	mov	r3, r6
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	4641      	mov	r1, r8
 8002e14:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8002e16:	d119      	bne.n	8002e4c <HAL_I2C_Master_Receive+0x25c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e18:	f7ff fd20 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	f47f af44 	bne.w	8002caa <HAL_I2C_Master_Receive+0xba>
 8002e22:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e32:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e36:	3301      	adds	r3, #1
 8002e38:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002e3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002e40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e48:	b662      	cpsie	i
 8002e4a:	e7b2      	b.n	8002db2 <HAL_I2C_Master_Receive+0x1c2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e4c:	f7ff fd06 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002e50:	4602      	mov	r2, r0
 8002e52:	2800      	cmp	r0, #0
 8002e54:	f47f af29 	bne.w	8002caa <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	680b      	ldr	r3, [r1, #0]
 8002e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e60:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e62:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e64:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e66:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e68:	6919      	ldr	r1, [r3, #16]
 8002e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e6c:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8002e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e70:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8002e72:	3301      	adds	r3, #1
 8002e74:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002e76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e78:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002e7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e86:	4633      	mov	r3, r6
 8002e88:	f7ff fce8 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	d0c9      	beq.n	8002e24 <HAL_I2C_Master_Receive+0x234>
 8002e90:	e70b      	b.n	8002caa <HAL_I2C_Master_Receive+0xba>
 8002e92:	bf00      	nop
 8002e94:	00100002 	.word	0x00100002
 8002e98:	ffff0000 	.word	0xffff0000
 8002e9c:	00010002 	.word	0x00010002
 8002ea0:	00010008 	.word	0x00010008
 8002ea4:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea8:	462a      	mov	r2, r5
 8002eaa:	4631      	mov	r1, r6
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7ff fca6 	bl	80027fe <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	f47f aef9 	bne.w	8002caa <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ebe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ec0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ec2:	1c53      	adds	r3, r2, #1
 8002ec4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002ec6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002ecc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	6959      	ldr	r1, [r3, #20]
 8002ed8:	0749      	lsls	r1, r1, #29
 8002eda:	f57f af5a 	bpl.w	8002d92 <HAL_I2C_Master_Receive+0x1a2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	7053      	strb	r3, [r2, #1]
 8002ee2:	e76a      	b.n	8002dba <HAL_I2C_Master_Receive+0x1ca>

08002ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ee6:	4604      	mov	r4, r0
{
 8002ee8:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8002eea:	b310      	cbz	r0, 8002f32 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eec:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8002ef0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ef4:	b91b      	cbnz	r3, 8002efe <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ef6:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002efa:	f7fe fd1b 	bl	8001934 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002efe:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f00:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f02:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8002f04:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f08:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8002f0c:	f001 fb39 	bl	8004582 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	4625      	mov	r5, r4
 8002f18:	6033      	str	r3, [r6, #0]
 8002f1a:	1d27      	adds	r7, r4, #4
 8002f1c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002f20:	f855 0b10 	ldr.w	r0, [r5], #16
 8002f24:	f001 fb1e 	bl	8004564 <USB_CoreInit>
 8002f28:	4606      	mov	r6, r0
 8002f2a:	b120      	cbz	r0, 8002f36 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8002f32:	2501      	movs	r5, #1
 8002f34:	e048      	b.n	8002fc8 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f36:	4601      	mov	r1, r0
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	f001 fb2c 	bl	8004596 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3e:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f40:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f44:	6861      	ldr	r1, [r4, #4]
 8002f46:	b2c3      	uxtb	r3, r0
 8002f48:	4299      	cmp	r1, r3
 8002f4a:	f100 0001 	add.w	r0, r0, #1
 8002f4e:	d817      	bhi.n	8002f80 <HAL_PCD_Init+0x9c>
 8002f50:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f52:	4610      	mov	r0, r2
 8002f54:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	4299      	cmp	r1, r3
 8002f58:	f102 0201 	add.w	r2, r2, #1
 8002f5c:	d81d      	bhi.n	8002f9a <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f60:	466e      	mov	r6, sp
 8002f62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	6033      	str	r3, [r6, #0]
 8002f68:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	f001 fb14 	bl	800459a <USB_DevInit>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4605      	mov	r5, r0
 8002f76:	b300      	cbz	r0, 8002fba <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 8002f7e:	e7d8      	b.n	8002f32 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8002f80:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002f84:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8002f88:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f8c:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f8e:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f92:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f96:	6416      	str	r6, [r2, #64]	; 0x40
 8002f98:	e7d5      	b.n	8002f46 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8002f9a:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8002f9e:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fa2:	330a      	adds	r3, #10
 8002fa4:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8002fa6:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002faa:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fae:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fb2:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fb6:	50e0      	str	r0, [r4, r3]
 8002fb8:	e7cc      	b.n	8002f54 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8002fba:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002fbe:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fc2:	6820      	ldr	r0, [r4, #0]
 8002fc4:	f001 fd8b 	bl	8004ade <USB_DevDisconnect>

  return HAL_OK;
}
 8002fc8:	4628      	mov	r0, r5
 8002fca:	b007      	add	sp, #28
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fce <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8002fce:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 8002fd2:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002fd4:	2b01      	cmp	r3, #1
{
 8002fd6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_PCD_Start+0x2a>
 8002fda:	2101      	movs	r1, #1
 8002fdc:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002fe0:	f005 fa22 	bl	8008428 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002fe4:	6820      	ldr	r0, [r4, #0]
 8002fe6:	f001 fd78 	bl	8004ada <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002fea:	6820      	ldr	r0, [r4, #0]
 8002fec:	f001 fac1 	bl	8004572 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8002ff6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	e7fc      	b.n	8002ff6 <HAL_PCD_Start+0x28>

08002ffc <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002ffc:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8003000:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003002:	2a01      	cmp	r2, #1
{
 8003004:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003006:	d00b      	beq.n	8003020 <HAL_PCD_SetAddress+0x24>
 8003008:	2201      	movs	r2, #1
 800300a:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 800300e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003012:	6800      	ldr	r0, [r0, #0]
 8003014:	f001 fd5b 	bl	8004ace <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003018:	2000      	movs	r0, #0
 800301a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800301e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003020:	2002      	movs	r0, #2
 8003022:	e7fc      	b.n	800301e <HAL_PCD_SetAddress+0x22>

08003024 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	4604      	mov	r4, r0
 8003028:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800302c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003030:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003034:	bf14      	ite	ne
 8003036:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303a:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 800303e:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 8003042:	bf17      	itett	ne
 8003044:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003046:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003048:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 800304a:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800304e:	bf04      	itt	eq
 8003050:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 8003052:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8003056:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8003058:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800305a:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800305c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800305e:	b102      	cbz	r2, 8003062 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003060:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003062:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8003064:	bf04      	itt	eq
 8003066:	2300      	moveq	r3, #0
 8003068:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 800306a:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800306e:	2b01      	cmp	r3, #1
 8003070:	d009      	beq.n	8003086 <HAL_PCD_EP_Open+0x62>
 8003072:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003074:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003076:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800307a:	f001 faa9 	bl	80045d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800307e:	2000      	movs	r0, #0
 8003080:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8003084:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8003086:	2002      	movs	r0, #2
 8003088:	e7fc      	b.n	8003084 <HAL_PCD_EP_Open+0x60>

0800308a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308a:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800308e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003092:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 8003096:	b510      	push	{r4, lr}
 8003098:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800309a:	bf18      	it	ne
 800309c:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 80030a0:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a2:	bf0b      	itete	eq
 80030a4:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 80030a8:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80030aa:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ac:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	bf0a      	itet	eq
 80030b0:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80030b2:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 80030b6:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030ba:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 80030bc:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d009      	beq.n	80030d8 <HAL_PCD_EP_Close+0x4e>
 80030c4:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030c6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80030c8:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030cc:	f001 fbda 	bl	8004884 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 80030d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80030d8:	2002      	movs	r0, #2
 80030da:	e7fc      	b.n	80030d6 <HAL_PCD_EP_Close+0x4c>

080030dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030dc:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80030de:	2600      	movs	r6, #0
 80030e0:	f001 0107 	and.w	r1, r1, #7
 80030e4:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80030e6:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e8:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ec:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030f0:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80030f2:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80030f6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 80030fa:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80030fe:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003102:	6800      	ldr	r0, [r0, #0]
 8003104:	f001 fd02 	bl	8004b0c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8003108:	4630      	mov	r0, r6
 800310a:	bd70      	pop	{r4, r5, r6, pc}

0800310c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800310c:	f001 0107 	and.w	r1, r1, #7
 8003110:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8003114:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8003118:	4770      	bx	lr

0800311a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800311a:	f001 0107 	and.w	r1, r1, #7
 800311e:	b570      	push	{r4, r5, r6, lr}
 8003120:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003122:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8003124:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8003128:	2600      	movs	r6, #0
  ep->is_in = 1U;
 800312a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800312c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003130:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003134:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 8003136:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8003138:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800313c:	6800      	ldr	r0, [r0, #0]
 800313e:	f001 fce5 	bl	8004b0c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8003142:	4630      	mov	r0, r6
 8003144:	bd70      	pop	{r4, r5, r6, pc}
	...

08003148 <HAL_PCD_IRQHandler>:
{
 8003148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800314c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800314e:	6800      	ldr	r0, [r0, #0]
 8003150:	f001 fcc7 	bl	8004ae2 <USB_ReadInterrupts>
 8003154:	0402      	lsls	r2, r0, #16
 8003156:	d50b      	bpl.n	8003170 <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003158:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 8003568 <HAL_PCD_IRQHandler+0x420>
 800315c:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 800356c <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003160:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 8003570 <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003164:	6820      	ldr	r0, [r4, #0]
 8003166:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	f100 809e 	bmi.w	80032ac <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003170:	6820      	ldr	r0, [r4, #0]
 8003172:	f001 fcb6 	bl	8004ae2 <USB_ReadInterrupts>
 8003176:	0543      	lsls	r3, r0, #21
 8003178:	d50f      	bpl.n	800319a <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800317a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800317c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800317e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800318e:	f005 f84c 	bl	800822a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003192:	2100      	movs	r1, #0
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff ff31 	bl	8002ffc <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800319a:	6820      	ldr	r0, [r4, #0]
 800319c:	f001 fca1 	bl	8004ae2 <USB_ReadInterrupts>
 80031a0:	0447      	lsls	r7, r0, #17
 80031a2:	d508      	bpl.n	80031b6 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031a4:	6822      	ldr	r2, [r4, #0]
 80031a6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80031aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f001 fc93 	bl	8004ae2 <USB_ReadInterrupts>
 80031bc:	0486      	lsls	r6, r0, #18
 80031be:	d508      	bpl.n	80031d2 <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80031c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	f001 fc85 	bl	8004ae2 <USB_ReadInterrupts>
 80031d8:	04c5      	lsls	r5, r0, #19
 80031da:	d51c      	bpl.n	8003216 <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80031dc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80031de:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80031e0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80031f0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80031f4:	f023 0308 	bic.w	r3, r3, #8
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	0c1b      	lsrs	r3, r3, #16
 80031fc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003200:	f005 f836 	bl	8008270 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003204:	6822      	ldr	r2, [r4, #0]
 8003206:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800320a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003216:	6820      	ldr	r0, [r4, #0]
 8003218:	f001 fc63 	bl	8004ae2 <USB_ReadInterrupts>
 800321c:	0500      	lsls	r0, r0, #20
 800321e:	d524      	bpl.n	800326a <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003226:	f043 0308 	orr.w	r3, r3, #8
 800322a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800322e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800323e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800324a:	f001 fc4a 	bl	8004ae2 <USB_ReadInterrupts>
 800324e:	04c1      	lsls	r1, r0, #19
 8003250:	d508      	bpl.n	8003264 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003252:	6822      	ldr	r2, [r4, #0]
 8003254:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800325c:	041b      	lsls	r3, r3, #16
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8003264:	4620      	mov	r0, r4
 8003266:	f004 fff3 	bl	8008250 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	f001 fc39 	bl	8004ae2 <USB_ReadInterrupts>
 8003270:	0582      	lsls	r2, r0, #22
 8003272:	d50b      	bpl.n	800328c <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003274:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8003276:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003278:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800327c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003288:	f004 ffcb 	bl	8008222 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800328c:	6820      	ldr	r0, [r4, #0]
 800328e:	f001 fc28 	bl	8004ae2 <USB_ReadInterrupts>
 8003292:	05c3      	lsls	r3, r0, #23
 8003294:	d508      	bpl.n	80032a8 <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800329c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	0c1b      	lsrs	r3, r3, #16
 80032a4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80032a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80032ac:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 80032b0:	b289      	uxth	r1, r1
    if (epindex == 0U)
 80032b2:	f011 060f 	ands.w	r6, r1, #15
 80032b6:	f040 80b1 	bne.w	800341c <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032ba:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032be:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032c0:	d12a      	bne.n	8003318 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032c2:	ea09 0303 	and.w	r3, r9, r3
 80032c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ca:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80032d0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80032d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80032dc:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80032e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80032e8:	4413      	add	r3, r2
 80032ea:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032ec:	4620      	mov	r0, r4
 80032ee:	f004 ff91 	bl	8008214 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032f2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f43f af34 	beq.w	8003164 <HAL_PCD_IRQHandler+0x1c>
 80032fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032fe:	2a00      	cmp	r2, #0
 8003300:	f47f af30 	bne.w	8003164 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003304:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003308:	6821      	ldr	r1, [r4, #0]
 800330a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003312:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8003316:	e725      	b.n	8003164 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003318:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800331a:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 800331e:	d020      	beq.n	8003362 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003320:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003324:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003328:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800332c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003330:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003334:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003338:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800333c:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003340:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003344:	f001 fcb6 	bl	8004cb4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003348:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800334a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800334c:	8813      	ldrh	r3, [r2, #0]
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	051b      	lsls	r3, r3, #20
 8003354:	0d1b      	lsrs	r3, r3, #20
 8003356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800335c:	f004 ff4c 	bl	80081f8 <HAL_PCD_SetupStageCallback>
 8003360:	e700      	b.n	8003164 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003362:	041f      	lsls	r7, r3, #16
 8003364:	f57f aefe 	bpl.w	8003164 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003368:	8803      	ldrh	r3, [r0, #0]
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	051b      	lsls	r3, r3, #20
 8003370:	0d1b      	lsrs	r3, r3, #20
 8003372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003376:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003378:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800337c:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8003380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003384:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003388:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800338c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003390:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003394:	b18b      	cbz	r3, 80033ba <HAL_PCD_IRQHandler+0x272>
 8003396:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800339a:	b171      	cbz	r1, 80033ba <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800339c:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80033a0:	f001 fc88 	bl	8004cb4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80033a4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80033a8:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033ac:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80033ae:	4413      	add	r3, r2
 80033b0:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033b4:	4620      	mov	r0, r4
 80033b6:	f004 ff25 	bl	8008204 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033ba:	6821      	ldr	r1, [r4, #0]
 80033bc:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 80033c0:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80033c4:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b9bd      	cbnz	r5, 80033fc <HAL_PCD_IRQHandler+0x2b4>
 80033cc:	5ac2      	ldrh	r2, [r0, r3]
 80033ce:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80033d2:	0412      	lsls	r2, r2, #16
 80033d4:	0c12      	lsrs	r2, r2, #16
 80033d6:	52c2      	strh	r2, [r0, r3]
 80033d8:	5ac2      	ldrh	r2, [r0, r3]
 80033da:	ea4a 0202 	orr.w	r2, sl, r2
 80033de:	b292      	uxth	r2, r2
 80033e0:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033e2:	880b      	ldrh	r3, [r1, #0]
 80033e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80033f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f8:	800b      	strh	r3, [r1, #0]
 80033fa:	e6b3      	b.n	8003164 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033fc:	2d3e      	cmp	r5, #62	; 0x3e
 80033fe:	d805      	bhi.n	800340c <HAL_PCD_IRQHandler+0x2c4>
 8003400:	086a      	lsrs	r2, r5, #1
 8003402:	07ee      	lsls	r6, r5, #31
 8003404:	bf48      	it	mi
 8003406:	3201      	addmi	r2, #1
 8003408:	0292      	lsls	r2, r2, #10
 800340a:	e7e8      	b.n	80033de <HAL_PCD_IRQHandler+0x296>
 800340c:	096a      	lsrs	r2, r5, #5
 800340e:	06ed      	lsls	r5, r5, #27
 8003410:	bf08      	it	eq
 8003412:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003416:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 800341a:	e7e0      	b.n	80033de <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800341c:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 8003420:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003424:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8003428:	d03c      	beq.n	80034a4 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800342a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800342e:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003434:	051b      	lsls	r3, r3, #20
 8003436:	0d1b      	lsrs	r3, r3, #20
 8003438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343c:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8003440:	19e1      	adds	r1, r4, r7
 8003442:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8003446:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800344a:	2b00      	cmp	r3, #0
 800344c:	d150      	bne.n	80034f0 <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800344e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003452:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 8003456:	3306      	adds	r3, #6
 8003458:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800345c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8003460:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8003464:	b135      	cbz	r5, 8003474 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003466:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 800346a:	462b      	mov	r3, r5
 800346c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8003470:	f001 fc20 	bl	8004cb4 <USB_ReadPMA>
 8003474:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 8003476:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 800347a:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 800347e:	442b      	add	r3, r5
 8003480:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003484:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8003488:	442a      	add	r2, r5
 800348a:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800348e:	b11b      	cbz	r3, 8003498 <HAL_PCD_IRQHandler+0x350>
 8003490:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8003494:	4285      	cmp	r5, r0
 8003496:	d25d      	bcs.n	8003554 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003498:	4427      	add	r7, r4
 800349a:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 800349e:	4620      	mov	r0, r4
 80034a0:	f004 feb0 	bl	8008204 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034a4:	f018 0f80 	tst.w	r8, #128	; 0x80
 80034a8:	f43f ae5c 	beq.w	8003164 <HAL_PCD_IRQHandler+0x1c>
 80034ac:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ae:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034b0:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80034b4:	ea09 0202 	and.w	r2, r9, r2
 80034b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034bc:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034c0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80034c4:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80034c8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80034cc:	3202      	adds	r2, #2
 80034ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80034d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80034d6:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 80034da:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80034e0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80034e2:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 80034e4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 80034e6:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 80034e8:	bbd3      	cbnz	r3, 8003560 <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ea:	f004 fe93 	bl	8008214 <HAL_PCD_DataInStageCallback>
 80034ee:	e639      	b.n	8003164 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034f0:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 80034f4:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034fe:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8003502:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003504:	d01b      	beq.n	800353e <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003506:	3302      	adds	r3, #2
 8003508:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800350c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8003510:	b135      	cbz	r5, 8003520 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003512:	462b      	mov	r3, r5
 8003514:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003518:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800351c:	f001 fbca 	bl	8004cb4 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003520:	19e3      	adds	r3, r4, r7
 8003522:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8003526:	6822      	ldr	r2, [r4, #0]
 8003528:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800352c:	ea0b 0303 	and.w	r3, fp, r3
 8003530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003538:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800353c:	e79a      	b.n	8003474 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800353e:	3306      	adds	r3, #6
 8003540:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8003544:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8003548:	2d00      	cmp	r5, #0
 800354a:	d0e9      	beq.n	8003520 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800354c:	462b      	mov	r3, r5
 800354e:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8003552:	e7e1      	b.n	8003518 <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003554:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8003558:	4620      	mov	r0, r4
 800355a:	f7ff fdbf 	bl	80030dc <HAL_PCD_EP_Receive>
 800355e:	e7a1      	b.n	80034a4 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003560:	f7ff fddb 	bl	800311a <HAL_PCD_EP_Transmit>
 8003564:	e5fe      	b.n	8003164 <HAL_PCD_IRQHandler+0x1c>
 8003566:	bf00      	nop
 8003568:	ffff8f0f 	.word	0xffff8f0f
 800356c:	ffff8000 	.word	0xffff8000
 8003570:	ffff8f8f 	.word	0xffff8f8f

08003574 <HAL_PCD_EP_SetStall>:
{
 8003574:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003576:	6843      	ldr	r3, [r0, #4]
 8003578:	f001 0507 	and.w	r5, r1, #7
 800357c:	429d      	cmp	r5, r3
{
 800357e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003580:	d828      	bhi.n	80035d4 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8003582:	060b      	lsls	r3, r1, #24
 8003584:	d51d      	bpl.n	80035c2 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8003586:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003588:	016b      	lsls	r3, r5, #5
 800358a:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 800358e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003590:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003592:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8003596:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003598:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800359a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800359c:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d019      	beq.n	80035d8 <HAL_PCD_EP_SetStall+0x64>
 80035a4:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035a8:	6820      	ldr	r0, [r4, #0]
 80035aa:	f001 fa31 	bl	8004a10 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ae:	b925      	cbnz	r5, 80035ba <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80035b0:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	f001 fa97 	bl	8004ae8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80035ba:	2000      	movs	r0, #0
 80035bc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80035c0:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80035c2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80035c4:	014b      	lsls	r3, r1, #5
 80035c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 80035ca:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80035cc:	4401      	add	r1, r0
    ep->is_in = 0U;
 80035ce:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80035d2:	e7e0      	b.n	8003596 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80035d4:	2001      	movs	r0, #1
 80035d6:	e7f3      	b.n	80035c0 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80035d8:	2002      	movs	r0, #2
 80035da:	e7f1      	b.n	80035c0 <HAL_PCD_EP_SetStall+0x4c>

080035dc <HAL_PCD_EP_ClrStall>:
{
 80035dc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035de:	6843      	ldr	r3, [r0, #4]
 80035e0:	f001 020f 	and.w	r2, r1, #15
 80035e4:	429a      	cmp	r2, r3
{
 80035e6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035e8:	d827      	bhi.n	800363a <HAL_PCD_EP_ClrStall+0x5e>
 80035ea:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 80035ee:	f011 0f80 	tst.w	r1, #128	; 0x80
 80035f2:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f6:	bf14      	ite	ne
 80035f8:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035fc:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 8003600:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8003602:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003606:	bf15      	itete	ne
 8003608:	2301      	movne	r3, #1
    ep->is_in = 0U;
 800360a:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360c:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360e:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8003610:	bf14      	ite	ne
 8003612:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8003616:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 800361a:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800361e:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8003622:	2b01      	cmp	r3, #1
 8003624:	d00b      	beq.n	800363e <HAL_PCD_EP_ClrStall+0x62>
 8003626:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003628:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800362a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800362e:	f001 fa0b 	bl	8004a48 <USB_EPClearStall>
  return HAL_OK;
 8003632:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8003634:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 8003638:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800363a:	2001      	movs	r0, #1
 800363c:	e7fc      	b.n	8003638 <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 800363e:	2002      	movs	r0, #2
 8003640:	e7fa      	b.n	8003638 <HAL_PCD_EP_ClrStall+0x5c>

08003642 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003642:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003646:	bf1b      	ittet	ne
 8003648:	f001 0107 	andne.w	r1, r1, #7
 800364c:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003650:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003654:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8003656:	bf08      	it	eq
 8003658:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 800365c:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800365e:	b91a      	cbnz	r2, 8003668 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003660:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003662:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8003664:	2000      	movs	r0, #0
 8003666:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8003668:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800366a:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800366c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800366e:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003670:	8143      	strh	r3, [r0, #10]
 8003672:	e7f7      	b.n	8003664 <HAL_PCDEx_PMAConfig+0x22>

08003674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003674:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003678:	4605      	mov	r5, r0
 800367a:	b908      	cbnz	r0, 8003680 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e03c      	b.n	80036fa <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003680:	6803      	ldr	r3, [r0, #0]
 8003682:	07db      	lsls	r3, r3, #31
 8003684:	d410      	bmi.n	80036a8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	682b      	ldr	r3, [r5, #0]
 8003688:	079f      	lsls	r7, r3, #30
 800368a:	d45d      	bmi.n	8003748 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	0719      	lsls	r1, r3, #28
 8003690:	f100 8094 	bmi.w	80037bc <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	075a      	lsls	r2, r3, #29
 8003698:	f100 80be 	bmi.w	8003818 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	69e8      	ldr	r0, [r5, #28]
 800369e:	2800      	cmp	r0, #0
 80036a0:	f040 812c 	bne.w	80038fc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80036a4:	2000      	movs	r0, #0
 80036a6:	e028      	b.n	80036fa <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a8:	4c8f      	ldr	r4, [pc, #572]	; (80038e8 <HAL_RCC_OscConfig+0x274>)
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d007      	beq.n	80036c4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_OscConfig+0x5e>
 80036be:	6863      	ldr	r3, [r4, #4]
 80036c0:	03de      	lsls	r6, r3, #15
 80036c2:	d506      	bpl.n	80036d2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	039c      	lsls	r4, r3, #14
 80036c8:	d5dd      	bpl.n	8003686 <HAL_RCC_OscConfig+0x12>
 80036ca:	686b      	ldr	r3, [r5, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1da      	bne.n	8003686 <HAL_RCC_OscConfig+0x12>
 80036d0:	e7d4      	b.n	800367c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d2:	686b      	ldr	r3, [r5, #4]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d112      	bne.n	8003700 <HAL_RCC_OscConfig+0x8c>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80036e2:	f7fe fa53 	bl	8001b8c <HAL_GetTick>
 80036e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	0398      	lsls	r0, r3, #14
 80036ec:	d4cb      	bmi.n	8003686 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ee:	f7fe fa4d 	bl	8001b8c <HAL_GetTick>
 80036f2:	1b80      	subs	r0, r0, r6
 80036f4:	2864      	cmp	r0, #100	; 0x64
 80036f6:	d9f7      	bls.n	80036e8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80036f8:	2003      	movs	r0, #3
}
 80036fa:	b002      	add	sp, #8
 80036fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003700:	b99b      	cbnz	r3, 800372a <HAL_RCC_OscConfig+0xb6>
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003710:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003712:	f7fe fa3b 	bl	8001b8c <HAL_GetTick>
 8003716:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	0399      	lsls	r1, r3, #14
 800371c:	d5b3      	bpl.n	8003686 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371e:	f7fe fa35 	bl	8001b8c <HAL_GetTick>
 8003722:	1b80      	subs	r0, r0, r6
 8003724:	2864      	cmp	r0, #100	; 0x64
 8003726:	d9f7      	bls.n	8003718 <HAL_RCC_OscConfig+0xa4>
 8003728:	e7e6      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	d103      	bne.n	800373a <HAL_RCC_OscConfig+0xc6>
 8003732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003736:	6023      	str	r3, [r4, #0]
 8003738:	e7cf      	b.n	80036da <HAL_RCC_OscConfig+0x66>
 800373a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373e:	6023      	str	r3, [r4, #0]
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003746:	e7cb      	b.n	80036e0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003748:	4c67      	ldr	r4, [pc, #412]	; (80038e8 <HAL_RCC_OscConfig+0x274>)
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	f013 0f0c 	tst.w	r3, #12
 8003750:	d007      	beq.n	8003762 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003752:	6863      	ldr	r3, [r4, #4]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d110      	bne.n	800377e <HAL_RCC_OscConfig+0x10a>
 800375c:	6863      	ldr	r3, [r4, #4]
 800375e:	03da      	lsls	r2, r3, #15
 8003760:	d40d      	bmi.n	800377e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	079b      	lsls	r3, r3, #30
 8003766:	d502      	bpl.n	800376e <HAL_RCC_OscConfig+0xfa>
 8003768:	692b      	ldr	r3, [r5, #16]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d186      	bne.n	800367c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	696a      	ldr	r2, [r5, #20]
 8003772:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003776:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800377a:	6023      	str	r3, [r4, #0]
 800377c:	e786      	b.n	800368c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800377e:	692a      	ldr	r2, [r5, #16]
 8003780:	4b5a      	ldr	r3, [pc, #360]	; (80038ec <HAL_RCC_OscConfig+0x278>)
 8003782:	b16a      	cbz	r2, 80037a0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003788:	f7fe fa00 	bl	8001b8c <HAL_GetTick>
 800378c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	079f      	lsls	r7, r3, #30
 8003792:	d4ec      	bmi.n	800376e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7fe f9fa 	bl	8001b8c <HAL_GetTick>
 8003798:	1b80      	subs	r0, r0, r6
 800379a:	2802      	cmp	r0, #2
 800379c:	d9f7      	bls.n	800378e <HAL_RCC_OscConfig+0x11a>
 800379e:	e7ab      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80037a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037a2:	f7fe f9f3 	bl	8001b8c <HAL_GetTick>
 80037a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	0798      	lsls	r0, r3, #30
 80037ac:	f57f af6e 	bpl.w	800368c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b0:	f7fe f9ec 	bl	8001b8c <HAL_GetTick>
 80037b4:	1b80      	subs	r0, r0, r6
 80037b6:	2802      	cmp	r0, #2
 80037b8:	d9f6      	bls.n	80037a8 <HAL_RCC_OscConfig+0x134>
 80037ba:	e79d      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037bc:	69aa      	ldr	r2, [r5, #24]
 80037be:	4c4a      	ldr	r4, [pc, #296]	; (80038e8 <HAL_RCC_OscConfig+0x274>)
 80037c0:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	b1da      	cbz	r2, 80037fc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80037c8:	f7fe f9e0 	bl	8001b8c <HAL_GetTick>
 80037cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037d0:	079b      	lsls	r3, r3, #30
 80037d2:	d50d      	bpl.n	80037f0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80037d8:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <HAL_RCC_OscConfig+0x280>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80037e0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80037e2:	bf00      	nop
  }
  while (Delay --);
 80037e4:	9b01      	ldr	r3, [sp, #4]
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	9201      	str	r2, [sp, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f9      	bne.n	80037e2 <HAL_RCC_OscConfig+0x16e>
 80037ee:	e751      	b.n	8003694 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f0:	f7fe f9cc 	bl	8001b8c <HAL_GetTick>
 80037f4:	1b80      	subs	r0, r0, r6
 80037f6:	2802      	cmp	r0, #2
 80037f8:	d9e9      	bls.n	80037ce <HAL_RCC_OscConfig+0x15a>
 80037fa:	e77d      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80037fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80037fe:	f7fe f9c5 	bl	8001b8c <HAL_GetTick>
 8003802:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003806:	079f      	lsls	r7, r3, #30
 8003808:	f57f af44 	bpl.w	8003694 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380c:	f7fe f9be 	bl	8001b8c <HAL_GetTick>
 8003810:	1b80      	subs	r0, r0, r6
 8003812:	2802      	cmp	r0, #2
 8003814:	d9f6      	bls.n	8003804 <HAL_RCC_OscConfig+0x190>
 8003816:	e76f      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003818:	4c33      	ldr	r4, [pc, #204]	; (80038e8 <HAL_RCC_OscConfig+0x274>)
 800381a:	69e3      	ldr	r3, [r4, #28]
 800381c:	00d8      	lsls	r0, r3, #3
 800381e:	d424      	bmi.n	800386a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8003820:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	69e3      	ldr	r3, [r4, #28]
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003828:	61e3      	str	r3, [r4, #28]
 800382a:	69e3      	ldr	r3, [r4, #28]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	4e30      	ldr	r6, [pc, #192]	; (80038f8 <HAL_RCC_OscConfig+0x284>)
 8003836:	6833      	ldr	r3, [r6, #0]
 8003838:	05d9      	lsls	r1, r3, #23
 800383a:	d518      	bpl.n	800386e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383c:	68eb      	ldr	r3, [r5, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d126      	bne.n	8003890 <HAL_RCC_OscConfig+0x21c>
 8003842:	6a23      	ldr	r3, [r4, #32]
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800384a:	f7fe f99f 	bl	8001b8c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003852:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	6a23      	ldr	r3, [r4, #32]
 8003856:	079b      	lsls	r3, r3, #30
 8003858:	d53f      	bpl.n	80038da <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800385a:	2f00      	cmp	r7, #0
 800385c:	f43f af1e 	beq.w	800369c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003860:	69e3      	ldr	r3, [r4, #28]
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003866:	61e3      	str	r3, [r4, #28]
 8003868:	e718      	b.n	800369c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800386a:	2700      	movs	r7, #0
 800386c:	e7e2      	b.n	8003834 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386e:	6833      	ldr	r3, [r6, #0]
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003876:	f7fe f989 	bl	8001b8c <HAL_GetTick>
 800387a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387c:	6833      	ldr	r3, [r6, #0]
 800387e:	05da      	lsls	r2, r3, #23
 8003880:	d4dc      	bmi.n	800383c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe f983 	bl	8001b8c <HAL_GetTick>
 8003886:	eba0 0008 	sub.w	r0, r0, r8
 800388a:	2864      	cmp	r0, #100	; 0x64
 800388c:	d9f6      	bls.n	800387c <HAL_RCC_OscConfig+0x208>
 800388e:	e733      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	b9ab      	cbnz	r3, 80038be <HAL_RCC_OscConfig+0x24a>
 8003892:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6223      	str	r3, [r4, #32]
 800389e:	6a23      	ldr	r3, [r4, #32]
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80038a6:	f7fe f971 	bl	8001b8c <HAL_GetTick>
 80038aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ac:	6a23      	ldr	r3, [r4, #32]
 80038ae:	0798      	lsls	r0, r3, #30
 80038b0:	d5d3      	bpl.n	800385a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe f96b 	bl	8001b8c <HAL_GetTick>
 80038b6:	1b80      	subs	r0, r0, r6
 80038b8:	4540      	cmp	r0, r8
 80038ba:	d9f7      	bls.n	80038ac <HAL_RCC_OscConfig+0x238>
 80038bc:	e71c      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038be:	2b05      	cmp	r3, #5
 80038c0:	6a23      	ldr	r3, [r4, #32]
 80038c2:	d103      	bne.n	80038cc <HAL_RCC_OscConfig+0x258>
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6223      	str	r3, [r4, #32]
 80038ca:	e7ba      	b.n	8003842 <HAL_RCC_OscConfig+0x1ce>
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6223      	str	r3, [r4, #32]
 80038d2:	6a23      	ldr	r3, [r4, #32]
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	e7b6      	b.n	8003848 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fe f957 	bl	8001b8c <HAL_GetTick>
 80038de:	eba0 0008 	sub.w	r0, r0, r8
 80038e2:	42b0      	cmp	r0, r6
 80038e4:	d9b6      	bls.n	8003854 <HAL_RCC_OscConfig+0x1e0>
 80038e6:	e707      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
 80038e8:	40021000 	.word	0x40021000
 80038ec:	42420000 	.word	0x42420000
 80038f0:	42420480 	.word	0x42420480
 80038f4:	20000004 	.word	0x20000004
 80038f8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_RCC_OscConfig+0x334>)
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	461c      	mov	r4, r3
 8003902:	f002 020c 	and.w	r2, r2, #12
 8003906:	2a08      	cmp	r2, #8
 8003908:	d03d      	beq.n	8003986 <HAL_RCC_OscConfig+0x312>
 800390a:	2300      	movs	r3, #0
 800390c:	4e27      	ldr	r6, [pc, #156]	; (80039ac <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003910:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003912:	d12b      	bne.n	800396c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8003914:	f7fe f93a 	bl	8001b8c <HAL_GetTick>
 8003918:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	0199      	lsls	r1, r3, #6
 800391e:	d41f      	bmi.n	8003960 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003920:	6a2b      	ldr	r3, [r5, #32]
 8003922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003928:	6862      	ldr	r2, [r4, #4]
 800392a:	68a9      	ldr	r1, [r5, #8]
 800392c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003930:	430a      	orrs	r2, r1
 8003932:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003934:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003936:	6862      	ldr	r2, [r4, #4]
 8003938:	430b      	orrs	r3, r1
 800393a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800393e:	4313      	orrs	r3, r2
 8003940:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003942:	2301      	movs	r3, #1
 8003944:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003946:	f7fe f921 	bl	8001b8c <HAL_GetTick>
 800394a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	019a      	lsls	r2, r3, #6
 8003950:	f53f aea8 	bmi.w	80036a4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fe f91a 	bl	8001b8c <HAL_GetTick>
 8003958:	1b40      	subs	r0, r0, r5
 800395a:	2802      	cmp	r0, #2
 800395c:	d9f6      	bls.n	800394c <HAL_RCC_OscConfig+0x2d8>
 800395e:	e6cb      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fe f914 	bl	8001b8c <HAL_GetTick>
 8003964:	1bc0      	subs	r0, r0, r7
 8003966:	2802      	cmp	r0, #2
 8003968:	d9d7      	bls.n	800391a <HAL_RCC_OscConfig+0x2a6>
 800396a:	e6c5      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800396c:	f7fe f90e 	bl	8001b8c <HAL_GetTick>
 8003970:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	f57f ae95 	bpl.w	80036a4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397a:	f7fe f907 	bl	8001b8c <HAL_GetTick>
 800397e:	1b40      	subs	r0, r0, r5
 8003980:	2802      	cmp	r0, #2
 8003982:	d9f6      	bls.n	8003972 <HAL_RCC_OscConfig+0x2fe>
 8003984:	e6b8      	b.n	80036f8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003986:	2801      	cmp	r0, #1
 8003988:	f43f aeb7 	beq.w	80036fa <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 800398c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	6a2b      	ldr	r3, [r5, #32]
 8003990:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8003994:	429a      	cmp	r2, r3
 8003996:	f47f ae71 	bne.w	800367c <HAL_RCC_OscConfig+0x8>
 800399a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800399c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80039a0:	1ac0      	subs	r0, r0, r3
 80039a2:	bf18      	it	ne
 80039a4:	2001      	movne	r0, #1
 80039a6:	e6a8      	b.n	80036fa <HAL_RCC_OscConfig+0x86>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	42420060 	.word	0x42420060

080039b0 <HAL_RCC_GetSysClockFreq>:
{
 80039b0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80039b4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039b6:	ac02      	add	r4, sp, #8
 80039b8:	f103 0510 	add.w	r5, r3, #16
 80039bc:	4622      	mov	r2, r4
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	3308      	adds	r3, #8
 80039c4:	c203      	stmia	r2!, {r0, r1}
 80039c6:	42ab      	cmp	r3, r5
 80039c8:	4614      	mov	r4, r2
 80039ca:	d1f7      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039cc:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80039d0:	4911      	ldr	r1, [pc, #68]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039d2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80039d6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80039d8:	f003 020c 	and.w	r2, r3, #12
 80039dc:	2a08      	cmp	r2, #8
 80039de:	d117      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039e0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80039e4:	a806      	add	r0, sp, #24
 80039e6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039e8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ea:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ee:	d50c      	bpl.n	8003a0a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039f0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039f2:	480a      	ldr	r0, [pc, #40]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039f4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039f8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039fa:	aa06      	add	r2, sp, #24
 80039fc:	4413      	add	r3, r2
 80039fe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a02:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003a06:	b007      	add	sp, #28
 8003a08:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a0a:	4805      	ldr	r0, [pc, #20]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x70>)
 8003a0c:	4350      	muls	r0, r2
 8003a0e:	e7fa      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003a10:	4802      	ldr	r0, [pc, #8]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003a12:	e7f8      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x56>
 8003a14:	0800d510 	.word	0x0800d510
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	007a1200 	.word	0x007a1200
 8003a20:	003d0900 	.word	0x003d0900

08003a24 <HAL_RCC_ClockConfig>:
{
 8003a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a28:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	b910      	cbnz	r0, 8003a34 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003a2e:	2001      	movs	r0, #1
}
 8003a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4a44      	ldr	r2, [pc, #272]	; (8003b48 <HAL_RCC_ClockConfig+0x124>)
 8003a36:	6813      	ldr	r3, [r2, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	d328      	bcc.n	8003a92 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	6821      	ldr	r1, [r4, #0]
 8003a42:	078e      	lsls	r6, r1, #30
 8003a44:	d430      	bmi.n	8003aa8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	07ca      	lsls	r2, r1, #31
 8003a48:	d443      	bmi.n	8003ad2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4a:	4a3f      	ldr	r2, [pc, #252]	; (8003b48 <HAL_RCC_ClockConfig+0x124>)
 8003a4c:	6813      	ldr	r3, [r2, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	42ab      	cmp	r3, r5
 8003a54:	d865      	bhi.n	8003b22 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	4d3c      	ldr	r5, [pc, #240]	; (8003b4c <HAL_RCC_ClockConfig+0x128>)
 8003a5a:	f012 0f04 	tst.w	r2, #4
 8003a5e:	d16c      	bne.n	8003b3a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a60:	0713      	lsls	r3, r2, #28
 8003a62:	d506      	bpl.n	8003a72 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a64:	686b      	ldr	r3, [r5, #4]
 8003a66:	6922      	ldr	r2, [r4, #16]
 8003a68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003a6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a70:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a72:	f7ff ff9d 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003a76:	686b      	ldr	r3, [r5, #4]
 8003a78:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <HAL_RCC_ClockConfig+0x12c>)
 8003a7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	40d8      	lsrs	r0, r3
 8003a82:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <HAL_RCC_ClockConfig+0x130>)
 8003a84:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003a86:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <HAL_RCC_ClockConfig+0x134>)
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	f7fe f83d 	bl	8001b08 <HAL_InitTick>
  return HAL_OK;
 8003a8e:	2000      	movs	r0, #0
 8003a90:	e7ce      	b.n	8003a30 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	6813      	ldr	r3, [r2, #0]
 8003a94:	f023 0307 	bic.w	r3, r3, #7
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9c:	6813      	ldr	r3, [r2, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	428b      	cmp	r3, r1
 8003aa4:	d1c3      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xa>
 8003aa6:	e7cb      	b.n	8003a40 <HAL_RCC_ClockConfig+0x1c>
 8003aa8:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aaa:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aae:	bf1e      	ittt	ne
 8003ab0:	685a      	ldrne	r2, [r3, #4]
 8003ab2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003ab6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aba:	bf42      	ittt	mi
 8003abc:	685a      	ldrmi	r2, [r3, #4]
 8003abe:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003ac2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	68a0      	ldr	r0, [r4, #8]
 8003ac8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003acc:	4302      	orrs	r2, r0
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	e7b9      	b.n	8003a46 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	6862      	ldr	r2, [r4, #4]
 8003ad4:	4e1d      	ldr	r6, [pc, #116]	; (8003b4c <HAL_RCC_ClockConfig+0x128>)
 8003ad6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ada:	d11a      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003adc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	d0a5      	beq.n	8003a2e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae8:	f023 0303 	bic.w	r3, r3, #3
 8003aec:	4313      	orrs	r3, r2
 8003aee:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003af0:	f7fe f84c 	bl	8001b8c <HAL_GetTick>
 8003af4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	6873      	ldr	r3, [r6, #4]
 8003af8:	6862      	ldr	r2, [r4, #4]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b02:	d0a2      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b04:	f7fe f842 	bl	8001b8c <HAL_GetTick>
 8003b08:	1bc0      	subs	r0, r0, r7
 8003b0a:	4540      	cmp	r0, r8
 8003b0c:	d9f3      	bls.n	8003af6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003b0e:	2003      	movs	r0, #3
 8003b10:	e78e      	b.n	8003a30 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b12:	2a02      	cmp	r2, #2
 8003b14:	d102      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b1a:	e7e1      	b.n	8003ae0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	f013 0f02 	tst.w	r3, #2
 8003b20:	e7de      	b.n	8003ae0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	f023 0307 	bic.w	r3, r3, #7
 8003b28:	432b      	orrs	r3, r5
 8003b2a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2c:	6813      	ldr	r3, [r2, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	42ab      	cmp	r3, r5
 8003b34:	f47f af7b 	bne.w	8003a2e <HAL_RCC_ClockConfig+0xa>
 8003b38:	e78d      	b.n	8003a56 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3a:	686b      	ldr	r3, [r5, #4]
 8003b3c:	68e1      	ldr	r1, [r4, #12]
 8003b3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b42:	430b      	orrs	r3, r1
 8003b44:	606b      	str	r3, [r5, #4]
 8003b46:	e78b      	b.n	8003a60 <HAL_RCC_ClockConfig+0x3c>
 8003b48:	40022000 	.word	0x40022000
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	0800d543 	.word	0x0800d543
 8003b54:	20000004 	.word	0x20000004
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003b5e:	4a05      	ldr	r2, [pc, #20]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b66:	5cd3      	ldrb	r3, [r2, r3]
 8003b68:	4a03      	ldr	r2, [pc, #12]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b6a:	6810      	ldr	r0, [r2, #0]
}
 8003b6c:	40d8      	lsrs	r0, r3
 8003b6e:	4770      	bx	lr
 8003b70:	40021000 	.word	0x40021000
 8003b74:	0800d553 	.word	0x0800d553
 8003b78:	20000004 	.word	0x20000004

08003b7c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b7c:	6803      	ldr	r3, [r0, #0]
{
 8003b7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b82:	07d9      	lsls	r1, r3, #31
{
 8003b84:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b86:	d520      	bpl.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b88:	4c35      	ldr	r4, [pc, #212]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003b8a:	69e3      	ldr	r3, [r4, #28]
 8003b8c:	00da      	lsls	r2, r3, #3
 8003b8e:	d432      	bmi.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003b90:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	69e3      	ldr	r3, [r4, #28]
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b98:	61e3      	str	r3, [r4, #28]
 8003b9a:	69e3      	ldr	r3, [r4, #28]
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	4e2f      	ldr	r6, [pc, #188]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ba6:	6833      	ldr	r3, [r6, #0]
 8003ba8:	05db      	lsls	r3, r3, #23
 8003baa:	d526      	bpl.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bac:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003bb2:	d136      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb4:	6a23      	ldr	r3, [r4, #32]
 8003bb6:	686a      	ldr	r2, [r5, #4]
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bc0:	b11f      	cbz	r7, 8003bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc2:	69e3      	ldr	r3, [r4, #28]
 8003bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bca:	6828      	ldr	r0, [r5, #0]
 8003bcc:	0783      	lsls	r3, r0, #30
 8003bce:	d506      	bpl.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd0:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003bd2:	68a9      	ldr	r1, [r5, #8]
 8003bd4:	6853      	ldr	r3, [r2, #4]
 8003bd6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bde:	f010 0010 	ands.w	r0, r0, #16
 8003be2:	d01b      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003be4:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003be6:	68e9      	ldr	r1, [r5, #12]
 8003be8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bea:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6053      	str	r3, [r2, #4]
 8003bf4:	e012      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2700      	movs	r7, #0
 8003bf8:	e7d4      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfa:	6833      	ldr	r3, [r6, #0]
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003c02:	f7fd ffc3 	bl	8001b8c <HAL_GetTick>
 8003c06:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	6833      	ldr	r3, [r6, #0]
 8003c0a:	05d8      	lsls	r0, r3, #23
 8003c0c:	d4ce      	bmi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0e:	f7fd ffbd 	bl	8001b8c <HAL_GetTick>
 8003c12:	eba0 0008 	sub.w	r0, r0, r8
 8003c16:	2864      	cmp	r0, #100	; 0x64
 8003c18:	d9f6      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8003c1a:	2003      	movs	r0, #3
}
 8003c1c:	b002      	add	sp, #8
 8003c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c22:	686a      	ldr	r2, [r5, #4]
 8003c24:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d0c3      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c30:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c32:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c34:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003c3c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c3e:	07d9      	lsls	r1, r3, #31
 8003c40:	d5b8      	bpl.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003c42:	f7fd ffa3 	bl	8001b8c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003c4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	6a23      	ldr	r3, [r4, #32]
 8003c4e:	079a      	lsls	r2, r3, #30
 8003c50:	d4b0      	bmi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fd ff9b 	bl	8001b8c <HAL_GetTick>
 8003c56:	1b80      	subs	r0, r0, r6
 8003c58:	4540      	cmp	r0, r8
 8003c5a:	d9f7      	bls.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003c5c:	e7dd      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
 8003c68:	42420440 	.word	0x42420440

08003c6c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6c:	6a03      	ldr	r3, [r0, #32]
{
 8003c6e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c7a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c7e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003c82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c84:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003c86:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003c8a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c8c:	4d0a      	ldr	r5, [pc, #40]	; (8003cb8 <TIM_OC1_SetConfig+0x4c>)
 8003c8e:	42a8      	cmp	r0, r5
 8003c90:	d10b      	bne.n	8003caa <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c92:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c94:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003c98:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c9a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c9e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003ca2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ca4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ca8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003caa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cac:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cae:	684a      	ldr	r2, [r1, #4]
 8003cb0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	6203      	str	r3, [r0, #32]
}
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40012c00 	.word	0x40012c00

08003cbc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cbc:	6a03      	ldr	r3, [r0, #32]
{
 8003cbe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ccc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003cd2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cd4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003cd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cda:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cde:	4d0b      	ldr	r5, [pc, #44]	; (8003d0c <TIM_OC3_SetConfig+0x50>)
 8003ce0:	42a8      	cmp	r0, r5
 8003ce2:	d10d      	bne.n	8003d00 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ce4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cee:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cf2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003cf6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfc:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d02:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d04:	684a      	ldr	r2, [r1, #4]
 8003d06:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d08:	6203      	str	r3, [r0, #32]
}
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	40012c00 	.word	0x40012c00

08003d10 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d10:	6a03      	ldr	r3, [r0, #32]
{
 8003d12:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d1e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d22:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d2a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d30:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d34:	4d06      	ldr	r5, [pc, #24]	; (8003d50 <TIM_OC4_SetConfig+0x40>)
 8003d36:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d38:	bf02      	ittt	eq
 8003d3a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d3c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d40:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d46:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d48:	684a      	ldr	r2, [r1, #4]
 8003d4a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4c:	6203      	str	r3, [r0, #32]
}
 8003d4e:	bd30      	pop	{r4, r5, pc}
 8003d50:	40012c00 	.word	0x40012c00

08003d54 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d54:	6803      	ldr	r3, [r0, #0]
}
 8003d56:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d66:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8003d68:	bf1e      	ittt	ne
 8003d6a:	681a      	ldrne	r2, [r3, #0]
 8003d6c:	f042 0201 	orrne.w	r2, r2, #1
 8003d70:	601a      	strne	r2, [r3, #0]
}
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIM_PWM_MspInit>:
 8003d74:	4770      	bx	lr

08003d76 <HAL_TIM_OC_DelayElapsedCallback>:
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIM_IC_CaptureCallback>:
 8003d78:	4770      	bx	lr

08003d7a <HAL_TIM_PWM_PulseFinishedCallback>:
 8003d7a:	4770      	bx	lr

08003d7c <TIM_DMADelayPulseCplt>:
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	2301      	movs	r3, #1
{
 8003d7e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d80:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d82:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d88:	4282      	cmp	r2, r0
 8003d8a:	d106      	bne.n	8003d9a <TIM_DMADelayPulseCplt+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d8c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f7ff fff3 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d94:	2300      	movs	r3, #0
 8003d96:	7723      	strb	r3, [r4, #28]
}
 8003d98:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d9c:	4283      	cmp	r3, r0
 8003d9e:	d101      	bne.n	8003da4 <TIM_DMADelayPulseCplt+0x28>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003da0:	2302      	movs	r3, #2
 8003da2:	e7f3      	b.n	8003d8c <TIM_DMADelayPulseCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003da4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003da6:	4283      	cmp	r3, r0
 8003da8:	d101      	bne.n	8003dae <TIM_DMADelayPulseCplt+0x32>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003daa:	2304      	movs	r3, #4
 8003dac:	e7ee      	b.n	8003d8c <TIM_DMADelayPulseCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003db0:	4283      	cmp	r3, r0
 8003db2:	d1ec      	bne.n	8003d8e <TIM_DMADelayPulseCplt+0x12>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003db4:	2308      	movs	r3, #8
 8003db6:	e7e9      	b.n	8003d8c <TIM_DMADelayPulseCplt+0x10>

08003db8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8003db8:	4770      	bx	lr

08003dba <TIM_DMADelayPulseHalfCplt>:
  htim->State = HAL_TIM_STATE_READY;
 8003dba:	2301      	movs	r3, #1
{
 8003dbc:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dbe:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dc6:	4282      	cmp	r2, r0
 8003dc8:	d106      	bne.n	8003dd8 <TIM_DMADelayPulseHalfCplt+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dca:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7ff fff3 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	7723      	strb	r3, [r4, #28]
}
 8003dd6:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003dd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dda:	4283      	cmp	r3, r0
 8003ddc:	d101      	bne.n	8003de2 <TIM_DMADelayPulseHalfCplt+0x28>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dde:	2302      	movs	r3, #2
 8003de0:	e7f3      	b.n	8003dca <TIM_DMADelayPulseHalfCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003de2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003de4:	4283      	cmp	r3, r0
 8003de6:	d101      	bne.n	8003dec <TIM_DMADelayPulseHalfCplt+0x32>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003de8:	2304      	movs	r3, #4
 8003dea:	e7ee      	b.n	8003dca <TIM_DMADelayPulseHalfCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003dec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dee:	4283      	cmp	r3, r0
 8003df0:	d1ec      	bne.n	8003dcc <TIM_DMADelayPulseHalfCplt+0x12>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df2:	2308      	movs	r3, #8
 8003df4:	e7e9      	b.n	8003dca <TIM_DMADelayPulseHalfCplt+0x10>

08003df6 <HAL_TIM_TriggerCallback>:
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df8:	6803      	ldr	r3, [r0, #0]
{
 8003dfa:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dfc:	691a      	ldr	r2, [r3, #16]
{
 8003dfe:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e00:	0791      	lsls	r1, r2, #30
 8003e02:	d50e      	bpl.n	8003e22 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	0792      	lsls	r2, r2, #30
 8003e08:	d50b      	bpl.n	8003e22 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e0a:	f06f 0202 	mvn.w	r2, #2
 8003e0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e10:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e12:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e14:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e16:	079b      	lsls	r3, r3, #30
 8003e18:	d077      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	f7ff ffad 	bl	8003d78 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	0750      	lsls	r0, r2, #29
 8003e28:	d510      	bpl.n	8003e4c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	0751      	lsls	r1, r2, #29
 8003e2e:	d50d      	bpl.n	8003e4c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e30:	f06f 0204 	mvn.w	r2, #4
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e36:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e38:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e3c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003e40:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e42:	d068      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e44:	f7ff ff98 	bl	8003d78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	0712      	lsls	r2, r2, #28
 8003e52:	d50f      	bpl.n	8003e74 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	0710      	lsls	r0, r2, #28
 8003e58:	d50c      	bpl.n	8003e74 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5a:	f06f 0208 	mvn.w	r2, #8
 8003e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e60:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e62:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e64:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e66:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003e68:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6a:	d05a      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6c:	f7ff ff84 	bl	8003d78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e70:	2300      	movs	r3, #0
 8003e72:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	06d2      	lsls	r2, r2, #27
 8003e7a:	d510      	bpl.n	8003e9e <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	06d0      	lsls	r0, r2, #27
 8003e80:	d50d      	bpl.n	8003e9e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e82:	f06f 0210 	mvn.w	r2, #16
 8003e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e88:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e8a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e8e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e94:	d04b      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	f7ff ff6f 	bl	8003d78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	07d1      	lsls	r1, r2, #31
 8003ea4:	d508      	bpl.n	8003eb8 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	07d2      	lsls	r2, r2, #31
 8003eaa:	d505      	bpl.n	8003eb8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eac:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb4:	f003 fd26 	bl	8007904 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	0610      	lsls	r0, r2, #24
 8003ebe:	d508      	bpl.n	8003ed2 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	0611      	lsls	r1, r2, #24
 8003ec4:	d505      	bpl.n	8003ed2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ec6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003eca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ecc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003ece:	f000 fb48 	bl	8004562 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	0652      	lsls	r2, r2, #25
 8003ed8:	d508      	bpl.n	8003eec <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	0650      	lsls	r0, r2, #25
 8003ede:	d505      	bpl.n	8003eec <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003ee4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003ee8:	f7ff ff85 	bl	8003df6 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	0691      	lsls	r1, r2, #26
 8003ef2:	d522      	bpl.n	8003f3a <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	0692      	lsls	r2, r2, #26
 8003ef8:	d51f      	bpl.n	8003f3a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003efa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003efe:	4620      	mov	r0, r4
}
 8003f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f04:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003f06:	f000 bb2b 	b.w	8004560 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	f7ff ff34 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f7ff ff33 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
 8003f14:	e783      	b.n	8003e1e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	f7ff ff2e 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff ff2d 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
 8003f20:	e792      	b.n	8003e48 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	f7ff ff28 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f26:	4620      	mov	r0, r4
 8003f28:	f7ff ff27 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
 8003f2c:	e7a0      	b.n	8003e70 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	f7ff ff22 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f32:	4620      	mov	r0, r4
 8003f34:	f7ff ff21 	bl	8003d7a <HAL_TIM_PWM_PulseFinishedCallback>
 8003f38:	e7af      	b.n	8003e9a <HAL_TIM_IRQHandler+0xa2>
}
 8003f3a:	bd10      	pop	{r4, pc}

08003f3c <HAL_TIM_ErrorCallback>:
 8003f3c:	4770      	bx	lr

08003f3e <TIM_DMAError>:
{
 8003f3e:	b508      	push	{r3, lr}
  htim->State = HAL_TIM_STATE_READY;
 8003f40:	2301      	movs	r3, #1
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f42:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8003f48:	f7ff fff8 	bl	8003f3c <HAL_TIM_ErrorCallback>
}
 8003f4c:	bd08      	pop	{r3, pc}
	...

08003f50 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003f52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f54:	4290      	cmp	r0, r2
 8003f56:	d00a      	beq.n	8003f6e <TIM_Base_SetConfig+0x1e>
 8003f58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f5c:	d007      	beq.n	8003f6e <TIM_Base_SetConfig+0x1e>
 8003f5e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f62:	4290      	cmp	r0, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_Base_SetConfig+0x1e>
 8003f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f6a:	4290      	cmp	r0, r2
 8003f6c:	d115      	bne.n	8003f9a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003f6e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f74:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <TIM_Base_SetConfig+0x6c>)
 8003f78:	4290      	cmp	r0, r2
 8003f7a:	d00a      	beq.n	8003f92 <TIM_Base_SetConfig+0x42>
 8003f7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f80:	d007      	beq.n	8003f92 <TIM_Base_SetConfig+0x42>
 8003f82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f86:	4290      	cmp	r0, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_Base_SetConfig+0x42>
 8003f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f8e:	4290      	cmp	r0, r2
 8003f90:	d103      	bne.n	8003f9a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9a:	694a      	ldr	r2, [r1, #20]
 8003f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003fa2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa4:	688b      	ldr	r3, [r1, #8]
 8003fa6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fa8:	680b      	ldr	r3, [r1, #0]
 8003faa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <TIM_Base_SetConfig+0x6c>)
 8003fae:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb0:	bf04      	itt	eq
 8003fb2:	690b      	ldreq	r3, [r1, #16]
 8003fb4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	6143      	str	r3, [r0, #20]
}
 8003fba:	4770      	bx	lr
 8003fbc:	40012c00 	.word	0x40012c00

08003fc0 <HAL_TIM_Base_Init>:
{
 8003fc0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	b1a0      	cbz	r0, 8003ff0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fce:	b91b      	cbnz	r3, 8003fd8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003fd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fd4:	f7fd fbce 	bl	8001774 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fda:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	1d21      	adds	r1, r4, #4
 8003fe2:	f7ff ffb5 	bl	8003f50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003fe6:	2301      	movs	r3, #1
  return HAL_OK;
 8003fe8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003fee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	e7fc      	b.n	8003fee <HAL_TIM_Base_Init+0x2e>

08003ff4 <HAL_TIM_PWM_Init>:
{
 8003ff4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	b1a0      	cbz	r0, 8004024 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ffe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004002:	b91b      	cbnz	r3, 800400c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004004:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004008:	f7ff feb4 	bl	8003d74 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004014:	1d21      	adds	r1, r4, #4
 8004016:	f7ff ff9b 	bl	8003f50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800401a:	2301      	movs	r3, #1
  return HAL_OK;
 800401c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800401e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004022:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004024:	2001      	movs	r0, #1
 8004026:	e7fc      	b.n	8004022 <HAL_TIM_PWM_Init+0x2e>

08004028 <HAL_TIM_Encoder_Init>:
{
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	460c      	mov	r4, r1
  if (htim == NULL)
 800402c:	4605      	mov	r5, r0
 800402e:	2800      	cmp	r0, #0
 8004030:	d043      	beq.n	80040ba <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004036:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800403a:	b91b      	cbnz	r3, 8004044 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800403c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8004040:	f7fd fbf4 	bl	800182c <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004044:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8004046:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004048:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004050:	6883      	ldr	r3, [r0, #8]
 8004052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	f7ff ff78 	bl	8003f50 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004060:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8004062:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004064:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8004066:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004068:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800406a:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800406c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800406e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004072:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004076:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800407a:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800407c:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004080:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004082:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800408a:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 800408c:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800408e:	430b      	orrs	r3, r1
 8004090:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004092:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004096:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800409a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800409c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800409e:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040a2:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80040a4:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040a6:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80040aa:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040ac:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 80040ae:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80040b0:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 80040b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
}
 80040b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80040ba:	2001      	movs	r0, #1
 80040bc:	e7fc      	b.n	80040b8 <HAL_TIM_Encoder_Init+0x90>
	...

080040c0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c0:	6a03      	ldr	r3, [r0, #32]
{
 80040c2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c4:	f023 0310 	bic.w	r3, r3, #16
 80040c8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80040ca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80040cc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80040ce:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040d2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80040dc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040e4:	4d0b      	ldr	r5, [pc, #44]	; (8004114 <TIM_OC2_SetConfig+0x54>)
 80040e6:	42a8      	cmp	r0, r5
 80040e8:	d10d      	bne.n	8004106 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040ea:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040f4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040f8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80040fc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80040fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004102:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004106:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004108:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800410a:	684a      	ldr	r2, [r1, #4]
 800410c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800410e:	6203      	str	r3, [r0, #32]
}
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00

08004118 <HAL_TIM_PWM_ConfigChannel>:
{
 8004118:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800411a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800411e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004120:	2b01      	cmp	r3, #1
 8004122:	f04f 0002 	mov.w	r0, #2
 8004126:	d025      	beq.n	8004174 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8004128:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800412a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800412e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004132:	2a0c      	cmp	r2, #12
 8004134:	d818      	bhi.n	8004168 <HAL_TIM_PWM_ConfigChannel+0x50>
 8004136:	e8df f002 	tbb	[pc, r2]
 800413a:	1707      	.short	0x1707
 800413c:	171e1717 	.word	0x171e1717
 8004140:	172f1717 	.word	0x172f1717
 8004144:	1717      	.short	0x1717
 8004146:	40          	.byte	0x40
 8004147:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004148:	6820      	ldr	r0, [r4, #0]
 800414a:	f7ff fd8f 	bl	8003c6c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800414e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004150:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004152:	699a      	ldr	r2, [r3, #24]
 8004154:	f042 0208 	orr.w	r2, r2, #8
 8004158:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	f022 0204 	bic.w	r2, r2, #4
 8004160:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004166:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8004168:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800416a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800416c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004170:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004174:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	f7ff ffa2 	bl	80040c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800417c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800417e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004196:	e7e6      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	f7ff fd8f 	bl	8003cbc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800419e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	f042 0208 	orr.w	r2, r2, #8
 80041a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	f022 0204 	bic.w	r2, r2, #4
 80041b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041b6:	61da      	str	r2, [r3, #28]
      break;
 80041b8:	e7d6      	b.n	8004168 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ba:	6820      	ldr	r0, [r4, #0]
 80041bc:	f7ff fda8 	bl	8003d10 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80041da:	e7ec      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080041dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041dc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041e0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80041ea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ec:	6083      	str	r3, [r0, #8]
}
 80041ee:	bd10      	pop	{r4, pc}

080041f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80041f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80041f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80041f6:	2b01      	cmp	r3, #1
{
 80041f8:	4604      	mov	r4, r0
 80041fa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80041fe:	d019      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0x44>
 8004200:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004202:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004206:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004208:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800420c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004216:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004218:	680b      	ldr	r3, [r1, #0]
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d065      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0xfa>
 800421e:	d815      	bhi.n	800424c <HAL_TIM_ConfigClockSource+0x5c>
 8004220:	2b10      	cmp	r3, #16
 8004222:	d00c      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x4e>
 8004224:	d807      	bhi.n	8004236 <HAL_TIM_ConfigClockSource+0x46>
 8004226:	b153      	cbz	r3, 800423e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8004228:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800422a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800422c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004230:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004234:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004236:	2b20      	cmp	r3, #32
 8004238:	d001      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x4e>
 800423a:	2b30      	cmp	r3, #48	; 0x30
 800423c:	d1f4      	bne.n	8004228 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800423e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004240:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004244:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004248:	4313      	orrs	r3, r2
 800424a:	e01a      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800424c:	2b60      	cmp	r3, #96	; 0x60
 800424e:	d034      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0xca>
 8004250:	d819      	bhi.n	8004286 <HAL_TIM_ConfigClockSource+0x96>
 8004252:	2b50      	cmp	r3, #80	; 0x50
 8004254:	d1e8      	bne.n	8004228 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004256:	684a      	ldr	r2, [r1, #4]
 8004258:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800425a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004262:	f025 0501 	bic.w	r5, r5, #1
 8004266:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004268:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800426a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800426c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004270:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004274:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004276:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004278:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800427e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004282:	6083      	str	r3, [r0, #8]
 8004284:	e7d0      	b.n	8004228 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8004286:	2b70      	cmp	r3, #112	; 0x70
 8004288:	d00c      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0xb4>
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428e:	d1cb      	bne.n	8004228 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	68cb      	ldr	r3, [r1, #12]
 8004292:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004296:	f7ff ffa1 	bl	80041dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800429a:	6822      	ldr	r2, [r4, #0]
 800429c:	6893      	ldr	r3, [r2, #8]
 800429e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042a2:	e008      	b.n	80042b6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80042a4:	68cb      	ldr	r3, [r1, #12]
 80042a6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80042aa:	f7ff ff97 	bl	80041dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b6:	6093      	str	r3, [r2, #8]
      break;
 80042b8:	e7b6      	b.n	8004228 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ba:	684d      	ldr	r5, [r1, #4]
 80042bc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042be:	6a01      	ldr	r1, [r0, #32]
 80042c0:	f021 0110 	bic.w	r1, r1, #16
 80042c4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80042c8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ca:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80042d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80042da:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80042dc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80042de:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80042e8:	e7cb      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ea:	684a      	ldr	r2, [r1, #4]
 80042ec:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80042ee:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f6:	f025 0501 	bic.w	r5, r5, #1
 80042fa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042fc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80042fe:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004304:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004308:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800430a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800430c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004312:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8004316:	e7b4      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x92>

08004318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004318:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800431a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800431c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800431e:	f001 011f 	and.w	r1, r1, #31
 8004322:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004324:	ea23 0304 	bic.w	r3, r3, r4
 8004328:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800432a:	6a03      	ldr	r3, [r0, #32]
 800432c:	408a      	lsls	r2, r1
 800432e:	431a      	orrs	r2, r3
 8004330:	6202      	str	r2, [r0, #32]
}
 8004332:	bd10      	pop	{r4, pc}

08004334 <HAL_TIM_OC_Start>:
{
 8004334:	b510      	push	{r4, lr}
 8004336:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004338:	2201      	movs	r2, #1
 800433a:	6800      	ldr	r0, [r0, #0]
 800433c:	f7ff ffec 	bl	8004318 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_TIM_OC_Start+0x34>)
}
 8004344:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004346:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8004348:	bf02      	ittt	eq
 800434a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800434c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8004350:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004358:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800435a:	bf1e      	ittt	ne
 800435c:	681a      	ldrne	r2, [r3, #0]
 800435e:	f042 0201 	orrne.w	r2, r2, #1
 8004362:	601a      	strne	r2, [r3, #0]
}
 8004364:	bd10      	pop	{r4, pc}
 8004366:	bf00      	nop
 8004368:	40012c00 	.word	0x40012c00

0800436c <HAL_TIM_PWM_Start>:
 800436c:	f7ff bfe2 	b.w	8004334 <HAL_TIM_OC_Start>

08004370 <HAL_TIM_OC_Start_DMA>:
{
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_BUSY)
 8004374:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
 8004378:	460d      	mov	r5, r1
  if (htim->State == HAL_TIM_STATE_BUSY)
 800437a:	b2c0      	uxtb	r0, r0
 800437c:	2802      	cmp	r0, #2
{
 800437e:	4611      	mov	r1, r2
  if (htim->State == HAL_TIM_STATE_BUSY)
 8004380:	d006      	beq.n	8004390 <HAL_TIM_OC_Start_DMA+0x20>
  else if (htim->State == HAL_TIM_STATE_READY)
 8004382:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004386:	2a01      	cmp	r2, #1
 8004388:	d106      	bne.n	8004398 <HAL_TIM_OC_Start_DMA+0x28>
    if ((pData == NULL) && (Length > 0U))
 800438a:	b911      	cbnz	r1, 8004392 <HAL_TIM_OC_Start_DMA+0x22>
 800438c:	b10b      	cbz	r3, 8004392 <HAL_TIM_OC_Start_DMA+0x22>
      return HAL_ERROR;
 800438e:	2001      	movs	r0, #1
}
 8004390:	bd70      	pop	{r4, r5, r6, pc}
      htim->State = HAL_TIM_STATE_BUSY;
 8004392:	2202      	movs	r2, #2
 8004394:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8004398:	6822      	ldr	r2, [r4, #0]
  switch (Channel)
 800439a:	2d0c      	cmp	r5, #12
 800439c:	d819      	bhi.n	80043d2 <HAL_TIM_OC_Start_DMA+0x62>
 800439e:	e8df f005 	tbb	[pc, r5]
 80043a2:	1807      	.short	0x1807
 80043a4:	18301818 	.word	0x18301818
 80043a8:	18411818 	.word	0x18411818
 80043ac:	1818      	.short	0x1818
 80043ae:	52          	.byte	0x52
 80043af:	00          	.byte	0x00
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043b2:	4e2d      	ldr	r6, [pc, #180]	; (8004468 <HAL_TIM_OC_Start_DMA+0xf8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80043b4:	3234      	adds	r2, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043b6:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043b8:	4e2c      	ldr	r6, [pc, #176]	; (800446c <HAL_TIM_OC_Start_DMA+0xfc>)
 80043ba:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80043bc:	4e2c      	ldr	r6, [pc, #176]	; (8004470 <HAL_TIM_OC_Start_DMA+0x100>)
 80043be:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80043c0:	f7fd fea6 	bl	8002110 <HAL_DMA_Start_IT>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d1e2      	bne.n	800438e <HAL_TIM_OC_Start_DMA+0x1e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80043c8:	6822      	ldr	r2, [r4, #0]
 80043ca:	68d3      	ldr	r3, [r2, #12]
 80043cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80043d0:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043d2:	2201      	movs	r2, #1
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	4629      	mov	r1, r5
 80043d8:	f7ff ff9e 	bl	8004318 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	4a25      	ldr	r2, [pc, #148]	; (8004474 <HAL_TIM_OC_Start_DMA+0x104>)
  return HAL_OK;
 80043e0:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043e2:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80043e4:	bf02      	ittt	eq
 80043e6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80043e8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80043ec:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80043f6:	bf1e      	ittt	ne
 80043f8:	681a      	ldrne	r2, [r3, #0]
 80043fa:	f042 0201 	orrne.w	r2, r2, #1
 80043fe:	601a      	strne	r2, [r3, #0]
 8004400:	e7c6      	b.n	8004390 <HAL_TIM_OC_Start_DMA+0x20>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004402:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004404:	4e18      	ldr	r6, [pc, #96]	; (8004468 <HAL_TIM_OC_Start_DMA+0xf8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004406:	3238      	adds	r2, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004408:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800440a:	4e18      	ldr	r6, [pc, #96]	; (800446c <HAL_TIM_OC_Start_DMA+0xfc>)
 800440c:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800440e:	4e18      	ldr	r6, [pc, #96]	; (8004470 <HAL_TIM_OC_Start_DMA+0x100>)
 8004410:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004412:	f7fd fe7d 	bl	8002110 <HAL_DMA_Start_IT>
 8004416:	2800      	cmp	r0, #0
 8004418:	d1b9      	bne.n	800438e <HAL_TIM_OC_Start_DMA+0x1e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800441a:	6822      	ldr	r2, [r4, #0]
 800441c:	68d3      	ldr	r3, [r2, #12]
 800441e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004422:	e7d5      	b.n	80043d0 <HAL_TIM_OC_Start_DMA+0x60>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004424:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004426:	4e10      	ldr	r6, [pc, #64]	; (8004468 <HAL_TIM_OC_Start_DMA+0xf8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004428:	323c      	adds	r2, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800442a:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800442c:	4e0f      	ldr	r6, [pc, #60]	; (800446c <HAL_TIM_OC_Start_DMA+0xfc>)
 800442e:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004430:	4e0f      	ldr	r6, [pc, #60]	; (8004470 <HAL_TIM_OC_Start_DMA+0x100>)
 8004432:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004434:	f7fd fe6c 	bl	8002110 <HAL_DMA_Start_IT>
 8004438:	2800      	cmp	r0, #0
 800443a:	d1a8      	bne.n	800438e <HAL_TIM_OC_Start_DMA+0x1e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	68d3      	ldr	r3, [r2, #12]
 8004440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004444:	e7c4      	b.n	80043d0 <HAL_TIM_OC_Start_DMA+0x60>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004446:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004448:	4e07      	ldr	r6, [pc, #28]	; (8004468 <HAL_TIM_OC_Start_DMA+0xf8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800444a:	3240      	adds	r2, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800444c:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800444e:	4e07      	ldr	r6, [pc, #28]	; (800446c <HAL_TIM_OC_Start_DMA+0xfc>)
 8004450:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004452:	4e07      	ldr	r6, [pc, #28]	; (8004470 <HAL_TIM_OC_Start_DMA+0x100>)
 8004454:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004456:	f7fd fe5b 	bl	8002110 <HAL_DMA_Start_IT>
 800445a:	2800      	cmp	r0, #0
 800445c:	d197      	bne.n	800438e <HAL_TIM_OC_Start_DMA+0x1e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800445e:	6822      	ldr	r2, [r4, #0]
 8004460:	68d3      	ldr	r3, [r2, #12]
 8004462:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004466:	e7b3      	b.n	80043d0 <HAL_TIM_OC_Start_DMA+0x60>
 8004468:	08003d7d 	.word	0x08003d7d
 800446c:	08003dbb 	.word	0x08003dbb
 8004470:	08003f3f 	.word	0x08003f3f
 8004474:	40012c00 	.word	0x40012c00

08004478 <HAL_TIM_PWM_Start_DMA>:
 8004478:	f7ff bf7a 	b.w	8004370 <HAL_TIM_OC_Start_DMA>

0800447c <HAL_TIM_PWM_Stop>:
{
 800447c:	b510      	push	{r4, lr}
 800447e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004480:	2200      	movs	r2, #0
 8004482:	6800      	ldr	r0, [r0, #0]
 8004484:	f7ff ff48 	bl	8004318 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HAL_TIM_PWM_Stop+0x58>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10d      	bne.n	80044ac <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 8004490:	f241 1211 	movw	r2, #4369	; 0x1111
 8004494:	6a19      	ldr	r1, [r3, #32]
 8004496:	4211      	tst	r1, r2
 8004498:	d108      	bne.n	80044ac <HAL_TIM_PWM_Stop+0x30>
 800449a:	f240 4244 	movw	r2, #1092	; 0x444
 800449e:	6a19      	ldr	r1, [r3, #32]
 80044a0:	4211      	tst	r1, r2
 80044a2:	bf02      	ittt	eq
 80044a4:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80044a6:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80044aa:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80044ac:	f241 1211 	movw	r2, #4369	; 0x1111
 80044b0:	6a19      	ldr	r1, [r3, #32]
 80044b2:	4211      	tst	r1, r2
 80044b4:	d108      	bne.n	80044c8 <HAL_TIM_PWM_Stop+0x4c>
 80044b6:	f240 4244 	movw	r2, #1092	; 0x444
 80044ba:	6a19      	ldr	r1, [r3, #32]
 80044bc:	4211      	tst	r1, r2
 80044be:	bf02      	ittt	eq
 80044c0:	681a      	ldreq	r2, [r3, #0]
 80044c2:	f022 0201 	biceq.w	r2, r2, #1
 80044c6:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	2301      	movs	r3, #1
}
 80044ca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80044d0:	bd10      	pop	{r4, pc}
 80044d2:	bf00      	nop
 80044d4:	40012c00 	.word	0x40012c00

080044d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80044dc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80044de:	2b01      	cmp	r3, #1
 80044e0:	f04f 0302 	mov.w	r3, #2
 80044e4:	d014      	beq.n	8004510 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80044ec:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ee:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f0:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f2:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80044f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fc:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044fe:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004500:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004502:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004504:	2301      	movs	r3, #1
 8004506:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800450a:	2300      	movs	r3, #0
 800450c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004510:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004512:	bd30      	pop	{r4, r5, pc}

08004514 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004514:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d01f      	beq.n	800455c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800451c:	68cb      	ldr	r3, [r1, #12]
 800451e:	688a      	ldr	r2, [r1, #8]
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004526:	684a      	ldr	r2, [r1, #4]
 8004528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800452c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800452e:	680a      	ldr	r2, [r1, #0]
 8004530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004534:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004536:	690a      	ldr	r2, [r1, #16]
 8004538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800453e:	694a      	ldr	r2, [r1, #20]
 8004540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004544:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004546:	69ca      	ldr	r2, [r1, #28]
 8004548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800454c:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800454e:	6802      	ldr	r2, [r0, #0]
 8004550:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004552:	2300      	movs	r3, #0
 8004554:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004558:	4618      	mov	r0, r3
 800455a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800455c:	2002      	movs	r0, #2
}
 800455e:	4770      	bx	lr

08004560 <HAL_TIMEx_CommutCallback>:
 8004560:	4770      	bx	lr

08004562 <HAL_TIMEx_BreakCallback>:
 8004562:	4770      	bx	lr

08004564 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004564:	b084      	sub	sp, #16
 8004566:	a801      	add	r0, sp, #4
 8004568:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800456c:	b004      	add	sp, #16
 800456e:	2000      	movs	r0, #0
 8004570:	4770      	bx	lr

08004572 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004572:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004576:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800457a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800457e:	2000      	movs	r0, #0
 8004580:	4770      	bx	lr

08004582 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004582:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004586:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800458a:	045b      	lsls	r3, r3, #17
 800458c:	0c5b      	lsrs	r3, r3, #17
 800458e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004592:	2000      	movs	r0, #0
 8004594:	4770      	bx	lr

08004596 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004596:	2000      	movs	r0, #0
 8004598:	4770      	bx	lr

0800459a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800459a:	b084      	sub	sp, #16
 800459c:	b510      	push	{r4, lr}
 800459e:	ac03      	add	r4, sp, #12
 80045a0:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80045a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80045b4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80045b8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80045bc:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 80045c0:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80045c2:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 80045c6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	4770      	bx	lr
	...

080045d0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045d2:	780c      	ldrb	r4, [r1, #0]
{
 80045d4:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045d6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80045da:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045dc:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80045e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 80045e4:	2803      	cmp	r0, #3
 80045e6:	d803      	bhi.n	80045f0 <USB_ActivateEndpoint+0x20>
 80045e8:	e8df f000 	tbb	[pc, r0]
 80045ec:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 80045f0:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80045f2:	f248 0580 	movw	r5, #32896	; 0x8080
 80045f6:	432a      	orrs	r2, r5
 80045f8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045fc:	780e      	ldrb	r6, [r1, #0]
 80045fe:	4a9e      	ldr	r2, [pc, #632]	; (8004878 <USB_ActivateEndpoint+0x2a8>)
 8004600:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8004604:	4335      	orrs	r5, r6
 8004606:	4014      	ands	r4, r2
 8004608:	432c      	orrs	r4, r5
 800460a:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800460e:	7b0d      	ldrb	r5, [r1, #12]
 8004610:	780c      	ldrb	r4, [r1, #0]
 8004612:	2d00      	cmp	r5, #0
 8004614:	f040 8082 	bne.w	800471c <USB_ActivateEndpoint+0x14c>
 8004618:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 800461a:	784e      	ldrb	r6, [r1, #1]
 800461c:	086d      	lsrs	r5, r5, #1
 800461e:	006d      	lsls	r5, r5, #1
 8004620:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8004624:	b376      	cbz	r6, 8004684 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004626:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800462a:	4434      	add	r4, r6
 800462c:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004630:	780d      	ldrb	r5, [r1, #0]
 8004632:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8004636:	0667      	lsls	r7, r4, #25
 8004638:	d508      	bpl.n	800464c <USB_ActivateEndpoint+0x7c>
 800463a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800463e:	4022      	ands	r2, r4
 8004640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004644:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004648:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800464c:	78ca      	ldrb	r2, [r1, #3]
 800464e:	780c      	ldrb	r4, [r1, #0]
 8004650:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004652:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004656:	4a89      	ldr	r2, [pc, #548]	; (800487c <USB_ActivateEndpoint+0x2ac>)
 8004658:	ea02 0201 	and.w	r2, r2, r1
 800465c:	bf18      	it	ne
 800465e:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800466a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800466e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8004670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8004674:	2000      	movs	r0, #0
 8004676:	e7bc      	b.n	80045f2 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004678:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800467c:	e7fa      	b.n	8004674 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800467e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004682:	e7f7      	b.n	8004674 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004684:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004688:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800468a:	4414      	add	r4, r2
 800468c:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004690:	780a      	ldrb	r2, [r1, #0]
 8004692:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004696:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800469a:	b2a4      	uxth	r4, r4
 800469c:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80046a0:	bb56      	cbnz	r6, 80046f8 <USB_ActivateEndpoint+0x128>
 80046a2:	5b15      	ldrh	r5, [r2, r4]
 80046a4:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80046a8:	042d      	lsls	r5, r5, #16
 80046aa:	0c2d      	lsrs	r5, r5, #16
 80046ac:	5315      	strh	r5, [r2, r4]
 80046ae:	5b15      	ldrh	r5, [r2, r4]
 80046b0:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80046b4:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046b6:	780c      	ldrb	r4, [r1, #0]
 80046b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80046bc:	0457      	lsls	r7, r2, #17
 80046be:	d50b      	bpl.n	80046d8 <USB_ActivateEndpoint+0x108>
 80046c0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80046c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80046c8:	0512      	lsls	r2, r2, #20
 80046ca:	0d12      	lsrs	r2, r2, #20
 80046cc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80046d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046d4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046d8:	7809      	ldrb	r1, [r1, #0]
 80046da:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80046de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80046e6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046f2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80046f6:	e7ba      	b.n	800466e <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80046f8:	2e3e      	cmp	r6, #62	; 0x3e
 80046fa:	d806      	bhi.n	800470a <USB_ActivateEndpoint+0x13a>
 80046fc:	0875      	lsrs	r5, r6, #1
 80046fe:	07f6      	lsls	r6, r6, #31
 8004700:	bf48      	it	mi
 8004702:	3501      	addmi	r5, #1
 8004704:	02ad      	lsls	r5, r5, #10
 8004706:	b2ad      	uxth	r5, r5
 8004708:	e7d4      	b.n	80046b4 <USB_ActivateEndpoint+0xe4>
 800470a:	0977      	lsrs	r7, r6, #5
 800470c:	06f5      	lsls	r5, r6, #27
 800470e:	4d5c      	ldr	r5, [pc, #368]	; (8004880 <USB_ActivateEndpoint+0x2b0>)
 8004710:	bf08      	it	eq
 8004712:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004716:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800471a:	e7f4      	b.n	8004706 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800471c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8004720:	4015      	ands	r5, r2
 8004722:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8004726:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800472a:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800472e:	780c      	ldrb	r4, [r1, #0]
 8004730:	890d      	ldrh	r5, [r1, #8]
 8004732:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8004736:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800473a:	086d      	lsrs	r5, r5, #1
 800473c:	b2b6      	uxth	r6, r6
 800473e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004742:	006d      	lsls	r5, r5, #1
 8004744:	53a5      	strh	r5, [r4, r6]
 8004746:	780c      	ldrb	r4, [r1, #0]
 8004748:	894d      	ldrh	r5, [r1, #10]
 800474a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800474e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8004752:	086d      	lsrs	r5, r5, #1
 8004754:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8004758:	006d      	lsls	r5, r5, #1
 800475a:	b2b6      	uxth	r6, r6
 800475c:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 800475e:	784c      	ldrb	r4, [r1, #1]
 8004760:	780d      	ldrb	r5, [r1, #0]
 8004762:	2c00      	cmp	r4, #0
 8004764:	d143      	bne.n	80047ee <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004766:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800476a:	0466      	lsls	r6, r4, #17
 800476c:	d508      	bpl.n	8004780 <USB_ActivateEndpoint+0x1b0>
 800476e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8004772:	4022      	ands	r2, r4
 8004774:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800477c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004780:	780c      	ldrb	r4, [r1, #0]
 8004782:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004786:	0655      	lsls	r5, r2, #25
 8004788:	d50b      	bpl.n	80047a2 <USB_ActivateEndpoint+0x1d2>
 800478a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800478e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004792:	0512      	lsls	r2, r2, #20
 8004794:	0d12      	lsrs	r2, r2, #20
 8004796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800479a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800479e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80047a2:	780c      	ldrb	r4, [r1, #0]
 80047a4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80047a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80047ac:	0512      	lsls	r2, r2, #20
 80047ae:	0d12      	lsrs	r2, r2, #20
 80047b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047b4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80047b8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047bc:	f248 0480 	movw	r4, #32896	; 0x8080
 80047c0:	780d      	ldrb	r5, [r1, #0]
 80047c2:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80047c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047ce:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80047d2:	4322      	orrs	r2, r4
 80047d4:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047d8:	7809      	ldrb	r1, [r1, #0]
 80047da:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80047de:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80047e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e6:	4314      	orrs	r4, r2
 80047e8:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 80047ec:	e73f      	b.n	800466e <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ee:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80047f2:	0464      	lsls	r4, r4, #17
 80047f4:	d508      	bpl.n	8004808 <USB_ActivateEndpoint+0x238>
 80047f6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80047fa:	4022      	ands	r2, r4
 80047fc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004804:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004808:	780c      	ldrb	r4, [r1, #0]
 800480a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800480e:	0652      	lsls	r2, r2, #25
 8004810:	d50b      	bpl.n	800482a <USB_ActivateEndpoint+0x25a>
 8004812:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004816:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800481a:	0512      	lsls	r2, r2, #20
 800481c:	0d12      	lsrs	r2, r2, #20
 800481e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004822:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004826:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800482a:	780c      	ldrb	r4, [r1, #0]
 800482c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004830:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004834:	0512      	lsls	r2, r2, #20
 8004836:	0d12      	lsrs	r2, r2, #20
 8004838:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800483c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004840:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004844:	78ca      	ldrb	r2, [r1, #3]
 8004846:	780c      	ldrb	r4, [r1, #0]
 8004848:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800484a:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800484e:	4a0b      	ldr	r2, [pc, #44]	; (800487c <USB_ActivateEndpoint+0x2ac>)
 8004850:	ea02 0205 	and.w	r2, r2, r5
 8004854:	bf18      	it	ne
 8004856:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800485a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800485e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004862:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004866:	7809      	ldrb	r1, [r1, #0]
 8004868:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800486c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004870:	0492      	lsls	r2, r2, #18
 8004872:	0c92      	lsrs	r2, r2, #18
 8004874:	e739      	b.n	80046ea <USB_ActivateEndpoint+0x11a>
 8004876:	bf00      	nop
 8004878:	ffff8f8f 	.word	0xffff8f8f
 800487c:	ffff8fbf 	.word	0xffff8fbf
 8004880:	ffff8000 	.word	0xffff8000

08004884 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004884:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8004886:	7b0c      	ldrb	r4, [r1, #12]
 8004888:	784a      	ldrb	r2, [r1, #1]
 800488a:	780b      	ldrb	r3, [r1, #0]
 800488c:	bbbc      	cbnz	r4, 80048fe <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 800488e:	b1f2      	cbz	r2, 80048ce <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004890:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004894:	0652      	lsls	r2, r2, #25
 8004896:	d50b      	bpl.n	80048b0 <USB_DeactivateEndpoint+0x2c>
 8004898:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800489c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048a0:	0512      	lsls	r2, r2, #20
 80048a2:	0d12      	lsrs	r2, r2, #20
 80048a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80048ac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048b0:	780a      	ldrb	r2, [r1, #0]
 80048b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80048b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048ba:	051b      	lsls	r3, r3, #20
 80048bc:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80048ca:	2000      	movs	r0, #0
 80048cc:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80048d2:	0454      	lsls	r4, r2, #17
 80048d4:	d50b      	bpl.n	80048ee <USB_DeactivateEndpoint+0x6a>
 80048d6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80048da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048de:	0512      	lsls	r2, r2, #20
 80048e0:	0d12      	lsrs	r2, r2, #20
 80048e2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80048e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048ea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048ee:	780a      	ldrb	r2, [r1, #0]
 80048f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80048f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048f8:	049b      	lsls	r3, r3, #18
 80048fa:	0c9b      	lsrs	r3, r3, #18
 80048fc:	e7df      	b.n	80048be <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d144      	bne.n	800498c <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004902:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004906:	0452      	lsls	r2, r2, #17
 8004908:	d50b      	bpl.n	8004922 <USB_DeactivateEndpoint+0x9e>
 800490a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800490e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004912:	0512      	lsls	r2, r2, #20
 8004914:	0d12      	lsrs	r2, r2, #20
 8004916:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800491a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800491e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004922:	780a      	ldrb	r2, [r1, #0]
 8004924:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004928:	065c      	lsls	r4, r3, #25
 800492a:	d50b      	bpl.n	8004944 <USB_DeactivateEndpoint+0xc0>
 800492c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004934:	051b      	lsls	r3, r3, #20
 8004936:	0d1b      	lsrs	r3, r3, #20
 8004938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004940:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8004944:	780a      	ldrb	r2, [r1, #0]
 8004946:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800494a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800494e:	051b      	lsls	r3, r3, #20
 8004950:	0d1b      	lsrs	r3, r3, #20
 8004952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800495a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800495e:	f248 0280 	movw	r2, #32896	; 0x8080
 8004962:	780c      	ldrb	r4, [r1, #0]
 8004964:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004970:	4313      	orrs	r3, r2
 8004972:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004976:	7809      	ldrb	r1, [r1, #0]
 8004978:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800497c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004984:	431a      	orrs	r2, r3
 8004986:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 800498a:	e79e      	b.n	80048ca <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800498c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004990:	0452      	lsls	r2, r2, #17
 8004992:	d50b      	bpl.n	80049ac <USB_DeactivateEndpoint+0x128>
 8004994:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004998:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800499c:	0512      	lsls	r2, r2, #20
 800499e:	0d12      	lsrs	r2, r2, #20
 80049a0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80049a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049a8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ac:	780a      	ldrb	r2, [r1, #0]
 80049ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049b2:	065b      	lsls	r3, r3, #25
 80049b4:	d50b      	bpl.n	80049ce <USB_DeactivateEndpoint+0x14a>
 80049b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049be:	051b      	lsls	r3, r3, #20
 80049c0:	0d1b      	lsrs	r3, r3, #20
 80049c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80049ce:	780a      	ldrb	r2, [r1, #0]
 80049d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d8:	051b      	lsls	r3, r3, #20
 80049da:	0d1b      	lsrs	r3, r3, #20
 80049dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049e8:	f248 0280 	movw	r2, #32896	; 0x8080
 80049ec:	780c      	ldrb	r4, [r1, #0]
 80049ee:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80049f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a00:	7809      	ldrb	r1, [r1, #0]
 8004a02:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	e7b9      	b.n	8004984 <USB_DeactivateEndpoint+0x100>

08004a10 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004a10:	784b      	ldrb	r3, [r1, #1]
 8004a12:	780a      	ldrb	r2, [r1, #0]
 8004a14:	b17b      	cbz	r3, 8004a36 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a22:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004a32:	2000      	movs	r0, #0
 8004a34:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a46:	e7ee      	b.n	8004a26 <USB_EPSetStall+0x16>

08004a48 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004a48:	7b0b      	ldrb	r3, [r1, #12]
 8004a4a:	bb23      	cbnz	r3, 8004a96 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8004a4c:	784b      	ldrb	r3, [r1, #1]
 8004a4e:	780a      	ldrb	r2, [r1, #0]
 8004a50:	b31b      	cbz	r3, 8004a9a <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a56:	065b      	lsls	r3, r3, #25
 8004a58:	d50b      	bpl.n	8004a72 <USB_EPClearStall+0x2a>
 8004a5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a62:	051b      	lsls	r3, r3, #20
 8004a64:	0d1b      	lsrs	r3, r3, #20
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004a72:	78cb      	ldrb	r3, [r1, #3]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d00e      	beq.n	8004a96 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a78:	780a      	ldrb	r2, [r1, #0]
 8004a7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a86:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004a96:	2000      	movs	r0, #0
 8004a98:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a9e:	045b      	lsls	r3, r3, #17
 8004aa0:	d50b      	bpl.n	8004aba <USB_EPClearStall+0x72>
 8004aa2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aaa:	051b      	lsls	r3, r3, #20
 8004aac:	0d1b      	lsrs	r3, r3, #20
 8004aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aba:	780a      	ldrb	r2, [r1, #0]
 8004abc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004acc:	e7dd      	b.n	8004a8a <USB_EPClearStall+0x42>

08004ace <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004ace:	b911      	cbnz	r1, 8004ad6 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	4770      	bx	lr

08004ada <USB_DevConnect>:
 8004ada:	2000      	movs	r0, #0
 8004adc:	4770      	bx	lr

08004ade <USB_DevDisconnect>:
 8004ade:	2000      	movs	r0, #0
 8004ae0:	4770      	bx	lr

08004ae2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ae2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004ae6:	4770      	bx	lr

08004ae8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004ae8:	2000      	movs	r0, #0
 8004aea:	4770      	bx	lr

08004aec <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004aec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004af0:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004af2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d100      	bne.n	8004b02 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8004b00:	4770      	bx	lr
 8004b02:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8004b06:	f822 0b04 	strh.w	r0, [r2], #4
 8004b0a:	e7f7      	b.n	8004afc <USB_WritePMA+0x10>

08004b0c <USB_EPStartXfer>:
{
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8004b10:	7849      	ldrb	r1, [r1, #1]
{
 8004b12:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8004b14:	2901      	cmp	r1, #1
 8004b16:	69aa      	ldr	r2, [r5, #24]
 8004b18:	692b      	ldr	r3, [r5, #16]
 8004b1a:	7b28      	ldrb	r0, [r5, #12]
 8004b1c:	d15d      	bne.n	8004bda <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 8004b1e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8004b20:	bf9d      	ittte	ls
 8004b22:	2300      	movls	r3, #0
 8004b24:	61ab      	strls	r3, [r5, #24]
 8004b26:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8004b28:	1ad2      	subhi	r2, r2, r3
 8004b2a:	bf88      	it	hi
 8004b2c:	61aa      	strhi	r2, [r5, #24]
 8004b2e:	6969      	ldr	r1, [r5, #20]
 8004b30:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8004b32:	b9e8      	cbnz	r0, 8004b70 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004b34:	4633      	mov	r3, r6
 8004b36:	88ea      	ldrh	r2, [r5, #6]
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f7ff ffd7 	bl	8004aec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b3e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8004b42:	782a      	ldrb	r2, [r5, #0]
 8004b44:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8004b48:	0112      	lsls	r2, r2, #4
 8004b4a:	440b      	add	r3, r1
 8004b4c:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004b4e:	782a      	ldrb	r2, [r5, #0]
 8004b50:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b68:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b70:	782b      	ldrb	r3, [r5, #0]
 8004b72:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b76:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b7a:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b7c:	bf4b      	itete	mi
 8004b7e:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b82:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b86:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b88:	1812      	addpl	r2, r2, r0
 8004b8a:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b8e:	bf4b      	itete	mi
 8004b90:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b92:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8004b94:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8004b96:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b98:	4633      	mov	r3, r6
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7ff ffa6 	bl	8004aec <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004ba0:	786b      	ldrb	r3, [r5, #1]
 8004ba2:	782a      	ldrb	r2, [r5, #0]
 8004ba4:	b963      	cbnz	r3, 8004bc0 <USB_EPStartXfer+0xb4>
 8004ba6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bae:	051b      	lsls	r3, r3, #20
 8004bb0:	0d1b      	lsrs	r3, r3, #20
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bba:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8004bbe:	e7c6      	b.n	8004b4e <USB_EPStartXfer+0x42>
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d1c4      	bne.n	8004b4e <USB_EPStartXfer+0x42>
 8004bc4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004bc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bcc:	051b      	lsls	r3, r3, #20
 8004bce:	0d1b      	lsrs	r3, r3, #20
 8004bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd8:	e7ef      	b.n	8004bba <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 8004bda:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8004bdc:	bf93      	iteet	ls
 8004bde:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8004be0:	1ad2      	subhi	r2, r2, r3
 8004be2:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8004be4:	61ab      	strls	r3, [r5, #24]
 8004be6:	bf98      	it	ls
 8004be8:	4613      	movls	r3, r2
 8004bea:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8004bec:	b990      	cbnz	r0, 8004c14 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004bee:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8004bf2:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8004bf6:	4401      	add	r1, r0
 8004bf8:	0112      	lsls	r2, r2, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d13b      	bne.n	8004c76 <USB_EPStartXfer+0x16a>
 8004bfe:	5a8b      	ldrh	r3, [r1, r2]
 8004c00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	528b      	strh	r3, [r1, r2]
 8004c0a:	5a8b      	ldrh	r3, [r1, r2]
 8004c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c10:	528b      	strh	r3, [r1, r2]
 8004c12:	e039      	b.n	8004c88 <USB_EPStartXfer+0x17c>
 8004c14:	b981      	cbnz	r1, 8004c38 <USB_EPStartXfer+0x12c>
 8004c16:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8004c1a:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8004c1e:	4401      	add	r1, r0
 8004c20:	0112      	lsls	r2, r2, #4
 8004c22:	b9b3      	cbnz	r3, 8004c52 <USB_EPStartXfer+0x146>
 8004c24:	5a88      	ldrh	r0, [r1, r2]
 8004c26:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8004c2a:	0400      	lsls	r0, r0, #16
 8004c2c:	0c00      	lsrs	r0, r0, #16
 8004c2e:	5288      	strh	r0, [r1, r2]
 8004c30:	5a88      	ldrh	r0, [r1, r2]
 8004c32:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004c36:	5288      	strh	r0, [r1, r2]
 8004c38:	7869      	ldrb	r1, [r5, #1]
 8004c3a:	782a      	ldrb	r2, [r5, #0]
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	d0d6      	beq.n	8004bee <USB_EPStartXfer+0xe2>
 8004c40:	2901      	cmp	r1, #1
 8004c42:	d121      	bne.n	8004c88 <USB_EPStartXfer+0x17c>
 8004c44:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8004c48:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8004c4c:	4401      	add	r1, r0
 8004c4e:	0112      	lsls	r2, r2, #4
 8004c50:	e02c      	b.n	8004cac <USB_EPStartXfer+0x1a0>
 8004c52:	2b3e      	cmp	r3, #62	; 0x3e
 8004c54:	d806      	bhi.n	8004c64 <USB_EPStartXfer+0x158>
 8004c56:	0858      	lsrs	r0, r3, #1
 8004c58:	07de      	lsls	r6, r3, #31
 8004c5a:	bf48      	it	mi
 8004c5c:	3001      	addmi	r0, #1
 8004c5e:	0280      	lsls	r0, r0, #10
 8004c60:	b280      	uxth	r0, r0
 8004c62:	e7e8      	b.n	8004c36 <USB_EPStartXfer+0x12a>
 8004c64:	095e      	lsrs	r6, r3, #5
 8004c66:	06d8      	lsls	r0, r3, #27
 8004c68:	4811      	ldr	r0, [pc, #68]	; (8004cb0 <USB_EPStartXfer+0x1a4>)
 8004c6a:	bf08      	it	eq
 8004c6c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004c70:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004c74:	e7f4      	b.n	8004c60 <USB_EPStartXfer+0x154>
 8004c76:	2b3e      	cmp	r3, #62	; 0x3e
 8004c78:	d810      	bhi.n	8004c9c <USB_EPStartXfer+0x190>
 8004c7a:	0858      	lsrs	r0, r3, #1
 8004c7c:	07de      	lsls	r6, r3, #31
 8004c7e:	bf48      	it	mi
 8004c80:	3001      	addmi	r0, #1
 8004c82:	0280      	lsls	r0, r0, #10
 8004c84:	b280      	uxth	r0, r0
 8004c86:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c88:	782a      	ldrb	r2, [r5, #0]
 8004c8a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004c9a:	e761      	b.n	8004b60 <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c9c:	0958      	lsrs	r0, r3, #5
 8004c9e:	06db      	lsls	r3, r3, #27
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <USB_EPStartXfer+0x1a4>)
 8004ca2:	bf08      	it	eq
 8004ca4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004ca8:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	e7af      	b.n	8004c10 <USB_EPStartXfer+0x104>
 8004cb0:	ffff8000 	.word	0xffff8000

08004cb4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cb4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8004cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004cbe:	085d      	lsrs	r5, r3, #1
 8004cc0:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cc2:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8004cc4:	462e      	mov	r6, r5
 8004cc6:	3002      	adds	r0, #2
 8004cc8:	b936      	cbnz	r6, 8004cd8 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004cca:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8004ccc:	bf44      	itt	mi
 8004cce:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004cd2:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8004cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8004cd8:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8004cdc:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8004cde:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ce0:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004ce4:	0a24      	lsrs	r4, r4, #8
 8004ce6:	f800 4c01 	strb.w	r4, [r0, #-1]
 8004cea:	e7ec      	b.n	8004cc6 <USB_ReadPMA+0x12>

08004cec <_ZN10AdcHandler6adcUpdEPVm>:
	}
}

void AdcHandler::adcUpd(volatile uint32_t* ADC_BUF){

}
 8004cec:	4770      	bx	lr
	...

08004cf0 <_ZN10AdcHandlerD1Ev>:
AdcHandler::~AdcHandler() {
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	4605      	mov	r5, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004cf4:	2600      	movs	r6, #0
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <_ZN10AdcHandlerD1Ev+0x40>)
 8004cf8:	4c0e      	ldr	r4, [pc, #56]	; (8004d34 <_ZN10AdcHandlerD1Ev+0x44>)
 8004cfa:	6003      	str	r3, [r0, #0]
 8004cfc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004d00:	1ad7      	subs	r7, r2, r3
 8004d02:	10bf      	asrs	r7, r7, #2
 8004d04:	b2f1      	uxtb	r1, r6
	for (uint8_t i = 0; i < adcHandlers.size(); i++){
 8004d06:	42b9      	cmp	r1, r7
 8004d08:	d20f      	bcs.n	8004d2a <_ZN10AdcHandlerD1Ev+0x3a>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8004d0a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
		if(adcHandlers[i] == this){
 8004d0e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004d12:	3601      	adds	r6, #1
 8004d14:	42a9      	cmp	r1, r5
 8004d16:	d1f5      	bne.n	8004d04 <_ZN10AdcHandlerD1Ev+0x14>
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
 8004d18:	1d01      	adds	r1, r0, #4
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 8004d1a:	428a      	cmp	r2, r1
 8004d1c:	d002      	beq.n	8004d24 <_ZN10AdcHandlerD1Ev+0x34>
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004d1e:	1a52      	subs	r2, r2, r1
 8004d20:	f007 fa34 	bl	800c18c <memmove>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
 8004d24:	6863      	ldr	r3, [r4, #4]
 8004d26:	3b04      	subs	r3, #4
 8004d28:	6063      	str	r3, [r4, #4]
}
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	0800d564 	.word	0x0800d564
 8004d34:	20000b54 	.word	0x20000b54

08004d38 <_ZN10AdcHandlerD0Ev>:
AdcHandler::~AdcHandler() {
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	4604      	mov	r4, r0
}
 8004d3c:	f7ff ffd8 	bl	8004cf0 <_ZN10AdcHandlerD1Ev>
 8004d40:	4620      	mov	r0, r4
 8004d42:	2104      	movs	r1, #4
 8004d44:	f004 f890 	bl	8008e68 <_ZdlPvj>
 8004d48:	4620      	mov	r0, r4
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004d50:	e9d0 3400 	ldrd	r3, r4, [r0]
 8004d54:	1ae4      	subs	r4, r4, r3
      if (__a < __b)
 8004d56:	10a4      	asrs	r4, r4, #2
 8004d58:	4691      	mov	r9, r2
 8004d5a:	bf14      	ite	ne
 8004d5c:	4622      	movne	r2, r4
 8004d5e:	2201      	moveq	r2, #1
 8004d60:	18a4      	adds	r4, r4, r2
 8004d62:	4606      	mov	r6, r0
 8004d64:	460f      	mov	r7, r1
 8004d66:	eba1 0803 	sub.w	r8, r1, r3
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004d6a:	d234      	bcs.n	8004dd6 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
 8004d6c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8004d70:	d231      	bcs.n	8004dd6 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004d72:	bb94      	cbnz	r4, 8004dda <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8e>
 8004d74:	4625      	mov	r5, r4

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004d76:	eb15 0f08 	cmn.w	r5, r8
 8004d7a:	bf18      	it	ne
 8004d7c:	f8d9 3000 	ldrne.w	r3, [r9]
#endif
	  __new_finish = pointer();

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8004d80:	f8d6 9000 	ldr.w	r9, [r6]
 8004d84:	bf18      	it	ne
 8004d86:	f845 3008 	strne.w	r3, [r5, r8]
	  if (_Num)
 8004d8a:	45b9      	cmp	r9, r7
	  const ptrdiff_t _Num = __last - __first;
 8004d8c:	eba7 0809 	sub.w	r8, r7, r9
	  if (_Num)
 8004d90:	d004      	beq.n	8004d9c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004d92:	4642      	mov	r2, r8
 8004d94:	4649      	mov	r1, r9
 8004d96:	4628      	mov	r0, r5
 8004d98:	f007 f9f8 	bl	800c18c <memmove>
	  const ptrdiff_t _Num = __last - __first;
 8004d9c:	6872      	ldr	r2, [r6, #4]
	     __new_start, _M_get_Tp_allocator());

	  ++__new_finish;
 8004d9e:	f108 0304 	add.w	r3, r8, #4
	  if (_Num)
 8004da2:	42ba      	cmp	r2, r7
 8004da4:	442b      	add	r3, r5
	  const ptrdiff_t _Num = __last - __first;
 8004da6:	eba2 0807 	sub.w	r8, r2, r7
	  if (_Num)
 8004daa:	d005      	beq.n	8004db8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004dac:	4618      	mov	r0, r3
 8004dae:	4642      	mov	r2, r8
 8004db0:	4639      	mov	r1, r7
 8004db2:	f007 f9e0 	bl	800c176 <memcpy>
 8004db6:	4603      	mov	r3, r0
	  return __result + _Num;
 8004db8:	eb03 0708 	add.w	r7, r3, r8
	if (__p)
 8004dbc:	f1b9 0f00 	cmp.w	r9, #0
 8004dc0:	d002      	beq.n	8004dc8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7c>
	::operator delete(__p);
 8004dc2:	4648      	mov	r0, r9
 8004dc4:	f004 f86c 	bl	8008ea0 <_ZdlPv>
      _M_deallocate(this->_M_impl._M_start,
		    this->_M_impl._M_end_of_storage
		    - this->_M_impl._M_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004dc8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 8004dcc:	e9c6 5700 	strd	r5, r7, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004dd0:	60b4      	str	r4, [r6, #8]
    }
 8004dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004dd6:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004dda:	00a0      	lsls	r0, r4, #2
 8004ddc:	f004 f846 	bl	8008e6c <_Znwj>
 8004de0:	4605      	mov	r5, r0
 8004de2:	e7c8      	b.n	8004d76 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>

08004de4 <_ZN10AdcHandlerC1Ev>:
AdcHandler::AdcHandler() {
 8004de4:	b513      	push	{r0, r1, r4, lr}
 8004de6:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <_ZN10AdcHandlerC1Ev+0x2c>)
 8004de8:	4604      	mov	r4, r0
 8004dea:	6003      	str	r3, [r0, #0]
	adcHandlers.push_back(this);
 8004dec:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004dee:	4809      	ldr	r0, [pc, #36]	; (8004e14 <_ZN10AdcHandlerC1Ev+0x30>)
 8004df0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8004df4:	4299      	cmp	r1, r3
 8004df6:	4603      	mov	r3, r0
 8004df8:	d006      	beq.n	8004e08 <_ZN10AdcHandlerC1Ev+0x24>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004dfa:	b101      	cbz	r1, 8004dfe <_ZN10AdcHandlerC1Ev+0x1a>
 8004dfc:	600c      	str	r4, [r1, #0]
	    ++this->_M_impl._M_finish;
 8004dfe:	3104      	adds	r1, #4
 8004e00:	6059      	str	r1, [r3, #4]
}
 8004e02:	4620      	mov	r0, r4
 8004e04:	b002      	add	sp, #8
 8004e06:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8004e08:	aa01      	add	r2, sp, #4
 8004e0a:	f7ff ff9f 	bl	8004d4c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8004e0e:	e7f8      	b.n	8004e02 <_ZN10AdcHandlerC1Ev+0x1e>
 8004e10:	0800d564 	.word	0x0800d564
 8004e14:	20000b54 	.word	0x20000b54

08004e18 <_ZN9CmdParserD1Ev>:
CmdParser::CmdParser() {
	// TODO Auto-generated constructor stub

}

CmdParser::~CmdParser() {
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <_ZN9CmdParserD1Ev+0x18>)
 8004e1e:	f840 3b1c 	str.w	r3, [r0], #28

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 8004e22:	f004 f891 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004e26:	1d20      	adds	r0, r4, #4
 8004e28:	f004 f88e 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	// TODO Auto-generated destructor stub
}
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	bd10      	pop	{r4, pc}
 8004e30:	0800d5ec 	.word	0x0800d5ec

08004e34 <_ZN9CmdParserD0Ev>:
CmdParser::~CmdParser() {
 8004e34:	b510      	push	{r4, lr}
 8004e36:	4604      	mov	r4, r0
}
 8004e38:	f7ff ffee 	bl	8004e18 <_ZN9CmdParserD1Ev>
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	2134      	movs	r1, #52	; 0x34
 8004e40:	f004 f812 	bl	8008e68 <_ZdlPvj>
 8004e44:	4620      	mov	r0, r4
 8004e46:	bd10      	pop	{r4, pc}

08004e48 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_.isra.54>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8004e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4c:	4680      	mov	r8, r0
 8004e4e:	460e      	mov	r6, r1
 8004e50:	4617      	mov	r7, r2
 8004e52:	4605      	mov	r5, r0
	  _ForwardIterator __cur = __result;
 8004e54:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
 8004e56:	42ae      	cmp	r6, r5
 8004e58:	d00d      	beq.n	8004e76 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_.isra.54+0x2e>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8004e5a:	b14c      	cbz	r4, 8004e70 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_.isra.54+0x28>


enum class CMDtype{
	set,setat,get,getat,none,help,err, dash
};
struct ParsedCommand
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f004 f90e 	bl	8009080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004e64:	8b2b      	ldrh	r3, [r5, #24]
 8004e66:	8323      	strh	r3, [r4, #24]
 8004e68:	69eb      	ldr	r3, [r5, #28]
 8004e6a:	61e3      	str	r3, [r4, #28]
 8004e6c:	6a2b      	ldr	r3, [r5, #32]
 8004e6e:	6223      	str	r3, [r4, #32]
      { return _M_current; }

      _GLIBCXX17_CONSTEXPR move_iterator&
      operator++()
      {
	++_M_current;
 8004e70:	3524      	adds	r5, #36	; 0x24
 8004e72:	3424      	adds	r4, #36	; 0x24
 8004e74:	e7ef      	b.n	8004e56 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_.isra.54+0xe>
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8004e76:	eba6 0608 	sub.w	r6, r6, r8
 8004e7a:	4805      	ldr	r0, [pc, #20]	; (8004e90 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_.isra.54+0x48>)
 8004e7c:	08b6      	lsrs	r6, r6, #2
 8004e7e:	4346      	muls	r6, r0
    }
 8004e80:	2024      	movs	r0, #36	; 0x24
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8004e82:	f026 4640 	bic.w	r6, r6, #3221225472	; 0xc0000000
    }
 8004e86:	fb00 7006 	mla	r0, r0, r6, r7
 8004e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e8e:	bf00      	nop
 8004e90:	38e38e39 	.word	0x38e38e39

08004e94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
					__idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
 8004e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e96:	4616      	mov	r6, r2
 8004e98:	460d      	mov	r5, r1
      { return _M_data(); }
 8004e9a:	6804      	ldr	r4, [r0, #0]
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8004e9c:	f007 f914 	bl	800c0c8 <__errno>
 8004ea0:	6807      	ldr	r7, [r0, #0]
 8004ea2:	f007 f911 	bl	800c0c8 <__errno>
 8004ea6:	2300      	movs	r3, #0
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8004ea8:	4632      	mov	r2, r6
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8004eaa:	6003      	str	r3, [r0, #0]
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8004eac:	a901      	add	r1, sp, #4
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f007 fb1c 	bl	800c4ec <strtol>

      if (__endptr == __str)
 8004eb4:	9b01      	ldr	r3, [sp, #4]
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8004eb6:	4606      	mov	r6, r0
      if (__endptr == __str)
 8004eb8:	429c      	cmp	r4, r3
 8004eba:	d102      	bne.n	8004ec2 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2e>
	std::__throw_invalid_argument(__name);
 8004ebc:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x5c>)
 8004ebe:	f003 fff4 	bl	8008eaa <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8004ec2:	f007 f901 	bl	800c0c8 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8004ec6:	6803      	ldr	r3, [r0, #0]
 8004ec8:	2b22      	cmp	r3, #34	; 0x22
 8004eca:	d102      	bne.n	8004ed2 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x3e>
	std::__throw_out_of_range(__name);
 8004ecc:	4808      	ldr	r0, [pc, #32]	; (8004ef0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x5c>)
 8004ece:	f003 fff2 	bl	8008eb6 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;

      if (__idx)
 8004ed2:	b115      	cbz	r5, 8004eda <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x46>
	*__idx = __endptr - __str;
 8004ed4:	9801      	ldr	r0, [sp, #4]
 8004ed6:	1b00      	subs	r0, r0, r4
 8004ed8:	6028      	str	r0, [r5, #0]
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8004eda:	f007 f8f5 	bl	800c0c8 <__errno>
 8004ede:	6803      	ldr	r3, [r0, #0]
 8004ee0:	b913      	cbnz	r3, 8004ee8 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x54>
 8004ee2:	f007 f8f1 	bl	800c0c8 <__errno>
 8004ee6:	6007      	str	r7, [r0, #0]
			     __idx, __base); }
 8004ee8:	4630      	mov	r0, r6
 8004eea:	b003      	add	sp, #12
 8004eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	0800d5df 	.word	0x0800d5df

08004ef4 <_ZN9CmdParserC1Ev>:
CmdParser::CmdParser() {
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ef8:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <_ZN9CmdParserC1Ev+0x48>)
      { _M_string_length = __length; }
 8004efa:	2500      	movs	r5, #0
 8004efc:	f843 2b0c 	str.w	r2, [r3], #12
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8004f00:	6043      	str	r3, [r0, #4]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8004f02:	f100 0324 	add.w	r3, r0, #36	; 0x24
	: allocator_type(__a), _M_p(__dat) { }
 8004f06:	61c3      	str	r3, [r0, #28]
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004f08:	236e      	movs	r3, #110	; 0x6e
 8004f0a:	a902      	add	r1, sp, #8
 8004f0c:	4604      	mov	r4, r0
      { _M_string_length = __length; }
 8004f0e:	6085      	str	r5, [r0, #8]
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
 8004f10:	7305      	strb	r5, [r0, #12]
 8004f12:	f841 3d04 	str.w	r3, [r1, #-4]!

	if (__dnew > size_type(_S_local_capacity))
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8004f16:	462a      	mov	r2, r5
 8004f18:	301c      	adds	r0, #28
 8004f1a:	f003 fffb 	bl	8008f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8004f1e:	9b01      	ldr	r3, [sp, #4]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8004f20:	4a07      	ldr	r2, [pc, #28]	; (8004f40 <_ZN9CmdParserC1Ev+0x4c>)
      { _M_dataplus._M_p = __p; }
 8004f22:	61e0      	str	r0, [r4, #28]
      { _M_allocated_capacity = __capacity; }
 8004f24:	6263      	str	r3, [r4, #36]	; 0x24
 8004f26:	f1a2 016e 	sub.w	r1, r2, #110	; 0x6e
 8004f2a:	f004 f83d 	bl	8008fa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
}
 8004f2e:	4620      	mov	r0, r4
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8004f30:	9b01      	ldr	r3, [sp, #4]
 8004f32:	69e2      	ldr	r2, [r4, #28]
      { _M_string_length = __length; }
 8004f34:	6223      	str	r3, [r4, #32]
 8004f36:	54d5      	strb	r5, [r2, r3]
 8004f38:	b003      	add	sp, #12
 8004f3a:	bd30      	pop	{r4, r5, pc}
 8004f3c:	0800d5ec 	.word	0x0800d5ec
 8004f40:	0800d5de 	.word	0x0800d5de

08004f44 <_ZN9CmdParser3addEPcPm>:
void CmdParser::clear(){
	buffer.clear();
}


bool CmdParser::add(char* Buf, uint32_t *Len){
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	460c      	mov	r4, r1
	bool flag = false;
 8004f48:	2500      	movs	r5, #0
	for(uint32_t i=0;i<*Len;i++){
		// Replace end markers
		if(*(Buf+i) == '\n' || *(Buf+i) == '\r' || *(Buf+i) == ';'|| *(Buf+i) == ' '){
			*(Buf+i) = (uint8_t)';';
 8004f4a:	273b      	movs	r7, #59	; 0x3b
		if(*(Buf+i) == '\n' || *(Buf+i) == '\r' || *(Buf+i) == ';'|| *(Buf+i) == ' '){
 8004f4c:	f8df c038 	ldr.w	ip, [pc, #56]	; 8004f88 <_ZN9CmdParser3addEPcPm+0x44>
	for(uint32_t i=0;i<*Len;i++){
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	1a66      	subs	r6, r4, r1
 8004f54:	42b3      	cmp	r3, r6
 8004f56:	d910      	bls.n	8004f7a <_ZN9CmdParser3addEPcPm+0x36>
		if(*(Buf+i) == '\n' || *(Buf+i) == '\r' || *(Buf+i) == ';'|| *(Buf+i) == ' '){
 8004f58:	7826      	ldrb	r6, [r4, #0]
 8004f5a:	f1a6 030a 	sub.w	r3, r6, #10
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b16      	cmp	r3, #22
 8004f62:	d805      	bhi.n	8004f70 <_ZN9CmdParser3addEPcPm+0x2c>
 8004f64:	fa2c f303 	lsr.w	r3, ip, r3
 8004f68:	07db      	lsls	r3, r3, #31
 8004f6a:	d403      	bmi.n	8004f74 <_ZN9CmdParser3addEPcPm+0x30>
 8004f6c:	3401      	adds	r4, #1
	for(uint32_t i=0;i<*Len;i++){
 8004f6e:	e7ef      	b.n	8004f50 <_ZN9CmdParser3addEPcPm+0xc>
		if(*(Buf+i) == '\n' || *(Buf+i) == '\r' || *(Buf+i) == ';'|| *(Buf+i) == ' '){
 8004f70:	2e3b      	cmp	r6, #59	; 0x3b
 8004f72:	d1fb      	bne.n	8004f6c <_ZN9CmdParser3addEPcPm+0x28>
			*(Buf+i) = (uint8_t)';';
 8004f74:	7027      	strb	r7, [r4, #0]
			flag = true;
 8004f76:	2501      	movs	r5, #1
 8004f78:	e7f8      	b.n	8004f6c <_ZN9CmdParser3addEPcPm+0x28>
		}
	}

	this->buffer.append((char*)Buf,*Len);
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	3004      	adds	r0, #4
 8004f7e:	f004 f907 	bl	8009190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>

	return flag;
}
 8004f82:	4628      	mov	r0, r5
 8004f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f86:	bf00      	nop
 8004f88:	00400009 	.word	0x00400009

08004f8c <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8004f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004f90:	e9d0 5400 	ldrd	r5, r4, [r0]
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a3      	asrs	r3, r4, #2
 8004f98:	4c24      	ldr	r4, [pc, #144]	; (800502c <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>)
 8004f9a:	4607      	mov	r7, r0
      if (__a < __b)
 8004f9c:	435c      	muls	r4, r3
 8004f9e:	bf14      	ite	ne
 8004fa0:	4623      	movne	r3, r4
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	18e4      	adds	r4, r4, r3
 8004fa6:	460e      	mov	r6, r1
 8004fa8:	4690      	mov	r8, r2
 8004faa:	eba1 0505 	sub.w	r5, r1, r5
 8004fae:	4b20      	ldr	r3, [pc, #128]	; (8005030 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004fb0:	d234      	bcs.n	800501c <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
 8004fb2:	429c      	cmp	r4, r3
 8004fb4:	d832      	bhi.n	800501c <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004fb6:	bb94      	cbnz	r4, 800501e <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x92>
 8004fb8:	46a1      	mov	r9, r4
 8004fba:	eb19 0505 	adds.w	r5, r9, r5
 8004fbe:	d00c      	beq.n	8004fda <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f004 f95a 	bl	800927c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004fc8:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 8004fcc:	832b      	strh	r3, [r5, #24]
 8004fce:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8004fd2:	61eb      	str	r3, [r5, #28]
 8004fd4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8004fd8:	622b      	str	r3, [r5, #32]
	  __new_finish
 8004fda:	4631      	mov	r1, r6
 8004fdc:	464a      	mov	r2, r9
 8004fde:	6838      	ldr	r0, [r7, #0]
 8004fe0:	f7ff ff32 	bl	8004e48 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_.isra.54>
	  __new_finish
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7ff ff2c 	bl	8004e48 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_.isra.54>
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004ff0:	e9d7 5800 	ldrd	r5, r8, [r7]
	  __new_finish
 8004ff4:	4606      	mov	r6, r0
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8004ff6:	45a8      	cmp	r8, r5
 8004ff8:	d004      	beq.n	8005004 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
      { _M_dispose(); }
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f003 ffa4 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005000:	3524      	adds	r5, #36	; 0x24
 8005002:	e7f8      	b.n	8004ff6 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
      _M_deallocate(this->_M_impl._M_start,
 8005004:	6838      	ldr	r0, [r7, #0]
	if (__p)
 8005006:	b108      	cbz	r0, 800500c <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x80>
	::operator delete(__p);
 8005008:	f003 ff4a 	bl	8008ea0 <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800500c:	2324      	movs	r3, #36	; 0x24
 800500e:	fb03 9404 	mla	r4, r3, r4, r9
      this->_M_impl._M_finish = __new_finish;
 8005012:	e9c7 9600 	strd	r9, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005016:	60bc      	str	r4, [r7, #8]
    }
 8005018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800501c:	461c      	mov	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800501e:	2024      	movs	r0, #36	; 0x24
 8005020:	4360      	muls	r0, r4
 8005022:	f003 ff23 	bl	8008e6c <_Znwj>
 8005026:	4681      	mov	r9, r0
 8005028:	e7c7      	b.n	8004fba <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x2e>
 800502a:	bf00      	nop
 800502c:	38e38e39 	.word	0x38e38e39
 8005030:	071c71c7 	.word	0x071c71c7

08005034 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8005034:	b570      	push	{r4, r5, r6, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005036:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 800503a:	429c      	cmp	r4, r3
      push_back(const value_type& __x)
 800503c:	4606      	mov	r6, r0
 800503e:	460d      	mov	r5, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005040:	d00d      	beq.n	800505e <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x2a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005042:	b144      	cbz	r4, 8005056 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x22>
 8005044:	4620      	mov	r0, r4
 8005046:	f004 f919 	bl	800927c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800504a:	8b2b      	ldrh	r3, [r5, #24]
 800504c:	8323      	strh	r3, [r4, #24]
 800504e:	69eb      	ldr	r3, [r5, #28]
 8005050:	61e3      	str	r3, [r4, #28]
 8005052:	6a2b      	ldr	r3, [r5, #32]
 8005054:	6223      	str	r3, [r4, #32]
	    ++this->_M_impl._M_finish;
 8005056:	6873      	ldr	r3, [r6, #4]
 8005058:	3324      	adds	r3, #36	; 0x24
 800505a:	6073      	str	r3, [r6, #4]
      }
 800505c:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
 800505e:	460a      	mov	r2, r1
 8005060:	4621      	mov	r1, r4
 8005062:	f7ff ff93 	bl	8004f8c <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8005066:	e7f9      	b.n	800505c <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x28>

08005068 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800506c:	e9d0 7400 	ldrd	r7, r4, [r0]
 8005070:	1be4      	subs	r4, r4, r7
 8005072:	10e3      	asrs	r3, r4, #3
 8005074:	4c38      	ldr	r4, [pc, #224]	; (8005158 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xf0>)
 8005076:	4606      	mov	r6, r0
 8005078:	435c      	muls	r4, r3
 800507a:	bf14      	ite	ne
 800507c:	4623      	movne	r3, r4
 800507e:	2301      	moveq	r3, #1
 8005080:	18e4      	adds	r4, r4, r3
 8005082:	460d      	mov	r5, r1
 8005084:	4691      	mov	r9, r2
 8005086:	eba1 0707 	sub.w	r7, r1, r7
 800508a:	4b34      	ldr	r3, [pc, #208]	; (800515c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xf4>)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800508c:	d25c      	bcs.n	8005148 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xe0>
 800508e:	429c      	cmp	r4, r3
 8005090:	d85a      	bhi.n	8005148 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xe0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005092:	2c00      	cmp	r4, #0
 8005094:	d159      	bne.n	800514a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xe2>
 8005096:	46a0      	mov	r8, r4
 8005098:	eb18 0007 	adds.w	r0, r8, r7
 800509c:	d002      	beq.n	80050a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3c>
 800509e:	4649      	mov	r1, r9
 80050a0:	f004 f8ec 	bl	800927c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	    (this->_M_impl._M_start, __position.base(),
 80050a4:	6837      	ldr	r7, [r6, #0]
	  _ForwardIterator __cur = __result;
 80050a6:	46c1      	mov	r9, r8
 80050a8:	46ba      	mov	sl, r7
	      for (; __first != __last; ++__first, (void)++__cur)
 80050aa:	4555      	cmp	r5, sl
 80050ac:	d00b      	beq.n	80050c6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x5e>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80050ae:	f1b9 0f00 	cmp.w	r9, #0
 80050b2:	d003      	beq.n	80050bc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x54>
 80050b4:	4651      	mov	r1, sl
 80050b6:	4648      	mov	r0, r9
 80050b8:	f003 ffe2 	bl	8009080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80050bc:	f10a 0a18 	add.w	sl, sl, #24
 80050c0:	f109 0918 	add.w	r9, r9, #24
 80050c4:	e7f1      	b.n	80050aa <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x42>
 80050c6:	f04f 0918 	mov.w	r9, #24
 80050ca:	1bea      	subs	r2, r5, r7
 80050cc:	4b24      	ldr	r3, [pc, #144]	; (8005160 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xf8>)
 80050ce:	08d2      	lsrs	r2, r2, #3
 80050d0:	435a      	muls	r2, r3
 80050d2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80050d6:	fb09 f202 	mul.w	r2, r9, r2
 80050da:	eb07 0a02 	add.w	sl, r7, r2
	  ++__new_finish;
 80050de:	444a      	add	r2, r9
 80050e0:	eb08 0902 	add.w	r9, r8, r2
	  _ForwardIterator __cur = __result;
 80050e4:	46cb      	mov	fp, r9
	    (__position.base(), this->_M_impl._M_finish,
 80050e6:	4652      	mov	r2, sl
 80050e8:	461f      	mov	r7, r3
 80050ea:	6875      	ldr	r5, [r6, #4]
	      for (; __first != __last; ++__first, (void)++__cur)
 80050ec:	4295      	cmp	r5, r2
 80050ee:	d00c      	beq.n	800510a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xa2>
 80050f0:	f1bb 0f00 	cmp.w	fp, #0
 80050f4:	d005      	beq.n	8005102 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x9a>
 80050f6:	4611      	mov	r1, r2
 80050f8:	4658      	mov	r0, fp
 80050fa:	9201      	str	r2, [sp, #4]
 80050fc:	f003 ffc0 	bl	8009080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8005100:	9a01      	ldr	r2, [sp, #4]
 8005102:	3218      	adds	r2, #24
 8005104:	f10b 0b18 	add.w	fp, fp, #24
 8005108:	e7f0      	b.n	80050ec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x84>
 800510a:	2318      	movs	r3, #24
 800510c:	eba5 050a 	sub.w	r5, r5, sl
 8005110:	08ed      	lsrs	r5, r5, #3
 8005112:	437d      	muls	r5, r7
 8005114:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 8005118:	fb03 9505 	mla	r5, r3, r5, r9
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800511c:	e9d6 7900 	ldrd	r7, r9, [r6]
	  for (; __first != __last; ++__first)
 8005120:	45b9      	cmp	r9, r7
 8005122:	d004      	beq.n	800512e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xc6>
 8005124:	4638      	mov	r0, r7
 8005126:	f003 ff0f 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800512a:	3718      	adds	r7, #24
 800512c:	e7f8      	b.n	8005120 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xb8>
      _M_deallocate(this->_M_impl._M_start,
 800512e:	6830      	ldr	r0, [r6, #0]
	if (__p)
 8005130:	b108      	cbz	r0, 8005136 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xce>
	::operator delete(__p);
 8005132:	f003 feb5 	bl	8008ea0 <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005136:	2318      	movs	r3, #24
 8005138:	fb03 8404 	mla	r4, r3, r4, r8
      this->_M_impl._M_finish = __new_finish;
 800513c:	e9c6 8500 	strd	r8, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005140:	60b4      	str	r4, [r6, #8]
    }
 8005142:	b003      	add	sp, #12
 8005144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005148:	461c      	mov	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800514a:	2018      	movs	r0, #24
 800514c:	4360      	muls	r0, r4
 800514e:	f003 fe8d 	bl	8008e6c <_Znwj>
 8005152:	4680      	mov	r8, r0
 8005154:	e7a0      	b.n	8005098 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x30>
 8005156:	bf00      	nop
 8005158:	aaaaaaab 	.word	0xaaaaaaab
 800515c:	0aaaaaaa 	.word	0x0aaaaaaa
 8005160:	0aaaaaab 	.word	0x0aaaaaab

08005164 <_ZN9CmdParser5parseEv>:



std::vector<ParsedCommand> CmdParser::parse(){
 8005164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8005168:	2400      	movs	r4, #0
 800516a:	e9c0 4400 	strd	r4, r4, [r0]
 800516e:	b099      	sub	sp, #100	; 0x64
 8005170:	6084      	str	r4, [r0, #8]
 8005172:	e9cd 4400 	strd	r4, r4, [sp]

	std::vector<ParsedCommand> commands;
	std::vector<std::string> tokens;

	const char* test = buffer.c_str();
	if((uint8_t)test[0] == 0x86)
 8005176:	684b      	ldr	r3, [r1, #4]
 8005178:	9402      	str	r4, [sp, #8]
 800517a:	781b      	ldrb	r3, [r3, #0]
std::vector<ParsedCommand> CmdParser::parse(){
 800517c:	4607      	mov	r7, r0
	if((uint8_t)test[0] == 0x86)
 800517e:	2b86      	cmp	r3, #134	; 0x86
std::vector<ParsedCommand> CmdParser::parse(){
 8005180:	460e      	mov	r6, r1
	if((uint8_t)test[0] == 0x86)
 8005182:	d121      	bne.n	80051c8 <_ZN9CmdParser5parseEv+0x64>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8005184:	ab11      	add	r3, sp, #68	; 0x44
      { _M_string_length = __length; }
 8005186:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
	{
		ParsedCommand cmd;
		cmd.type = CMDtype::dash;
 800518a:	2307      	movs	r3, #7
	this->_M_assign(__str);
 800518c:	3104      	adds	r1, #4
 800518e:	a80f      	add	r0, sp, #60	; 0x3c
 8005190:	9317      	str	r3, [sp, #92]	; 0x5c
 8005192:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
 8005196:	f8ad 4054 	strh.w	r4, [sp, #84]	; 0x54
 800519a:	9416      	str	r4, [sp, #88]	; 0x58
 800519c:	f003 ff09 	bl	8008fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	traits_type::assign(_M_data()[__n], _CharT());
 80051a0:	6873      	ldr	r3, [r6, #4]
      { _M_string_length = __length; }
 80051a2:	60b4      	str	r4, [r6, #8]
		cmd.cmd = buffer;
		buffer.clear();
		commands.push_back(cmd);
 80051a4:	4638      	mov	r0, r7
 80051a6:	701c      	strb	r4, [r3, #0]
 80051a8:	a90f      	add	r1, sp, #60	; 0x3c
 80051aa:	f7ff ff43 	bl	8005034 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
      { _M_dispose(); }
 80051ae:	a80f      	add	r0, sp, #60	; 0x3c
 80051b0:	f003 feca 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80051b4:	e9dd 4500 	ldrd	r4, r5, [sp]
 80051b8:	42a5      	cmp	r5, r4
 80051ba:	f000 812b 	beq.w	8005414 <_ZN9CmdParser5parseEv+0x2b0>
 80051be:	4620      	mov	r0, r4
 80051c0:	f003 fec2 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80051c4:	3418      	adds	r4, #24
 80051c6:	e7f7      	b.n	80051b8 <_ZN9CmdParser5parseEv+0x54>
		return commands;
	}

    uint16_t pos = 0;
 80051c8:	4625      	mov	r5, r4
    uint16_t lpos = 0;
	while(pos < buffer.length()-1){
		pos = buffer.find(';',lpos);
 80051ca:	f101 0804 	add.w	r8, r1, #4
	while(pos < buffer.length()-1){
 80051ce:	68b3      	ldr	r3, [r6, #8]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	429d      	cmp	r5, r3
 80051d4:	d222      	bcs.n	800521c <_ZN9CmdParser5parseEv+0xb8>
		pos = buffer.find(';',lpos);
 80051d6:	4622      	mov	r2, r4
 80051d8:	213b      	movs	r1, #59	; 0x3b
 80051da:	4640      	mov	r0, r8
 80051dc:	f004 f802 	bl	80091e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80051e0:	b285      	uxth	r5, r0
		std::string token = buffer.substr(lpos,pos-lpos);
 80051e2:	1b2b      	subs	r3, r5, r4
 80051e4:	4622      	mov	r2, r4
 80051e6:	a80f      	add	r0, sp, #60	; 0x3c
 80051e8:	4641      	mov	r1, r8
 80051ea:	f004 f897 	bl	800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80051ee:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
		lpos = pos+1;
 80051f2:	1c6c      	adds	r4, r5, #1
 80051f4:	4298      	cmp	r0, r3
 80051f6:	b2a4      	uxth	r4, r4
 80051f8:	d00a      	beq.n	8005210 <_ZN9CmdParser5parseEv+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80051fa:	b110      	cbz	r0, 8005202 <_ZN9CmdParser5parseEv+0x9e>
 80051fc:	a90f      	add	r1, sp, #60	; 0x3c
 80051fe:	f004 f83d 	bl	800927c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
 8005202:	9b01      	ldr	r3, [sp, #4]
 8005204:	3318      	adds	r3, #24
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	a80f      	add	r0, sp, #60	; 0x3c
 800520a:	f003 fe9d 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	while(pos < buffer.length()-1){
 800520e:	e7de      	b.n	80051ce <_ZN9CmdParser5parseEv+0x6a>
	  _M_realloc_insert(end(), __x);
 8005210:	4601      	mov	r1, r0
 8005212:	aa0f      	add	r2, sp, #60	; 0x3c
 8005214:	4668      	mov	r0, sp
 8005216:	f7ff ff27 	bl	8005068 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
 800521a:	e7f5      	b.n	8005208 <_ZN9CmdParser5parseEv+0xa4>
 800521c:	e9dd 8900 	ldrd	r8, r9, [sp]
		tokens.push_back(token);
	}

	for(std::string word : tokens){
 8005220:	45c8      	cmp	r8, r9
 8005222:	f000 80f2 	beq.w	800540a <_ZN9CmdParser5parseEv+0x2a6>
 8005226:	4641      	mov	r1, r8
 8005228:	a803      	add	r0, sp, #12
 800522a:	f004 f827 	bl	800927c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 800522e:	ab11      	add	r3, sp, #68	; 0x44
 8005230:	930f      	str	r3, [sp, #60]	; 0x3c
 8005232:	2304      	movs	r3, #4
      { _M_string_length = __length; }
 8005234:	2400      	movs	r4, #0
 8005236:	9317      	str	r3, [sp, #92]	; 0x5c
	return operator[](this->size() - 1);
 8005238:	9b04      	ldr	r3, [sp, #16]

		ParsedCommand cmd;

		if(word.back() == '?'){ // <cmd>?
 800523a:	9a03      	ldr	r2, [sp, #12]
      { _M_string_length = __length; }
 800523c:	9410      	str	r4, [sp, #64]	; 0x40
 800523e:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
 8005242:	f8ad 4054 	strh.w	r4, [sp, #84]	; 0x54
 8005246:	9416      	str	r4, [sp, #88]	; 0x58
	return operator[](this->size() - 1);
 8005248:	3b01      	subs	r3, #1
 800524a:	5cd2      	ldrb	r2, [r2, r3]
 800524c:	2a3f      	cmp	r2, #63	; 0x3f
 800524e:	d10e      	bne.n	800526e <_ZN9CmdParser5parseEv+0x10a>
			cmd.type = CMDtype::get;
 8005250:	2202      	movs	r2, #2
 8005252:	9217      	str	r2, [sp, #92]	; 0x5c
			cmd.cmd = word.substr(0, word.length()-1);
 8005254:	4622      	mov	r2, r4
				cmd.adr = val;
			}else if(peq != std::string::npos && (std::isdigit(word[peq+1]) || (std::isdigit(word[peq+2]) && (word[peq+1] == '-' || word[peq+1] == '+')))){ // <cmd>=<int>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
				cmd.val = val;
				cmd.type = CMDtype::set;
				cmd.cmd = word.substr(0, peq);
 8005256:	a903      	add	r1, sp, #12
 8005258:	a809      	add	r0, sp, #36	; 0x24
 800525a:	f004 f85f 	bl	800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800525e:	a909      	add	r1, sp, #36	; 0x24
 8005260:	a80f      	add	r0, sp, #60	; 0x3c
 8005262:	f003 ff27 	bl	80090b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
      { _M_dispose(); }
 8005266:	a809      	add	r0, sp, #36	; 0x24
 8005268:	f003 fe6e 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800526c:	e05d      	b.n	800532a <_ZN9CmdParser5parseEv+0x1c6>
		}else if(word.back() == '!'){
 800526e:	2a21      	cmp	r2, #33	; 0x21
 8005270:	d10e      	bne.n	8005290 <_ZN9CmdParser5parseEv+0x12c>
			cmd.cmd = word.substr(0, word.length()-1);
 8005272:	4622      	mov	r2, r4
 8005274:	a903      	add	r1, sp, #12
 8005276:	a809      	add	r0, sp, #36	; 0x24
 8005278:	f004 f850 	bl	800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800527c:	a909      	add	r1, sp, #36	; 0x24
 800527e:	a80f      	add	r0, sp, #60	; 0x3c
 8005280:	f003 ff18 	bl	80090b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005284:	a809      	add	r0, sp, #36	; 0x24
 8005286:	f003 fe5f 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
			cmd.type = CMDtype::help;
 800528a:	2305      	movs	r3, #5
				cmd.val = val;
				cmd.type = CMDtype::set;
				cmd.cmd = word.substr(0, peq);
			}else{
				cmd.cmd = word;
				cmd.type = CMDtype::get;
 800528c:	9317      	str	r3, [sp, #92]	; 0x5c
 800528e:	e04c      	b.n	800532a <_ZN9CmdParser5parseEv+0x1c6>
		}else if(word.back() == '='){
 8005290:	2a3d      	cmp	r2, #61	; 0x3d
 8005292:	d105      	bne.n	80052a0 <_ZN9CmdParser5parseEv+0x13c>
	this->_M_assign(__str);
 8005294:	a903      	add	r1, sp, #12
 8005296:	a80f      	add	r0, sp, #60	; 0x3c
 8005298:	f003 fe8b 	bl	8008fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
			cmd.type = CMDtype::err;
 800529c:	2306      	movs	r3, #6
 800529e:	e7f5      	b.n	800528c <_ZN9CmdParser5parseEv+0x128>
			uint32_t peq = word.find('=', 0); // set
 80052a0:	4622      	mov	r2, r4
 80052a2:	213d      	movs	r1, #61	; 0x3d
 80052a4:	a803      	add	r0, sp, #12
 80052a6:	f003 ff9d 	bl	80091e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
			uint32_t pqm = word.find('?', 0); // read with var
 80052aa:	4622      	mov	r2, r4
			uint32_t peq = word.find('=', 0); // set
 80052ac:	4605      	mov	r5, r0
			uint32_t pqm = word.find('?', 0); // read with var
 80052ae:	213f      	movs	r1, #63	; 0x3f
 80052b0:	a803      	add	r0, sp, #12
 80052b2:	f003 ff97 	bl	80091e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
			if(pqm!=std::string::npos && pqm < peq && peq != std::string::npos){ // <cmd>?<int>=<int>
 80052b6:	f1b0 3fff 	cmp.w	r0, #4294967295
			uint32_t pqm = word.find('?', 0); // read with var
 80052ba:	4682      	mov	sl, r0
			if(pqm!=std::string::npos && pqm < peq && peq != std::string::npos){ // <cmd>?<int>=<int>
 80052bc:	d073      	beq.n	80053a6 <_ZN9CmdParser5parseEv+0x242>
 80052be:	4285      	cmp	r5, r0
 80052c0:	f100 0201 	add.w	r2, r0, #1
 80052c4:	d93e      	bls.n	8005344 <_ZN9CmdParser5parseEv+0x1e0>
 80052c6:	1c69      	adds	r1, r5, #1
 80052c8:	d03c      	beq.n	8005344 <_ZN9CmdParser5parseEv+0x1e0>
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, peq-pqm));
 80052ca:	1a2b      	subs	r3, r5, r0
 80052cc:	a903      	add	r1, sp, #12
 80052ce:	a809      	add	r0, sp, #36	; 0x24
 80052d0:	f004 f824 	bl	800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80052d4:	220a      	movs	r2, #10
 80052d6:	4621      	mov	r1, r4
 80052d8:	a809      	add	r0, sp, #36	; 0x24
 80052da:	f7ff fddb 	bl	8004e94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80052de:	4683      	mov	fp, r0
      { _M_dispose(); }
 80052e0:	a809      	add	r0, sp, #36	; 0x24
 80052e2:	f003 fe31 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
				int32_t val2 = (int32_t)std::stol(word.substr(peq+1, word.npos));
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	1c6a      	adds	r2, r5, #1
 80052ec:	a903      	add	r1, sp, #12
 80052ee:	a809      	add	r0, sp, #36	; 0x24
 80052f0:	f004 f814 	bl	800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80052f4:	220a      	movs	r2, #10
 80052f6:	4621      	mov	r1, r4
 80052f8:	a809      	add	r0, sp, #36	; 0x24
 80052fa:	f7ff fdcb 	bl	8004e94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80052fe:	4605      	mov	r5, r0
 8005300:	a809      	add	r0, sp, #36	; 0x24
 8005302:	f003 fe21 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
				cmd.cmd = word.substr(0, pqm);
 8005306:	4653      	mov	r3, sl
 8005308:	4622      	mov	r2, r4
 800530a:	a903      	add	r1, sp, #12
 800530c:	a809      	add	r0, sp, #36	; 0x24
 800530e:	f004 f805 	bl	800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8005312:	a909      	add	r1, sp, #36	; 0x24
 8005314:	a80f      	add	r0, sp, #60	; 0x3c
 8005316:	f003 fecd 	bl	80090b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800531a:	a809      	add	r0, sp, #36	; 0x24
 800531c:	f003 fe14 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
				cmd.type = CMDtype::setat;
 8005320:	2301      	movs	r3, #1
				cmd.val = val2;
 8005322:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
				cmd.adr = val;
 8005326:	f8ad b054 	strh.w	fp, [sp, #84]	; 0x54
			}

		}

		commands.push_back(cmd);
 800532a:	a90f      	add	r1, sp, #60	; 0x3c
 800532c:	4638      	mov	r0, r7
 800532e:	f7ff fe81 	bl	8005034 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
 8005332:	a80f      	add	r0, sp, #60	; 0x3c
 8005334:	f003 fe08 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005338:	a803      	add	r0, sp, #12
 800533a:	f003 fe05 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800533e:	f108 0818 	add.w	r8, r8, #24
 8005342:	e76d      	b.n	8005220 <_ZN9CmdParser5parseEv+0xbc>
	return _M_data()[__pos];
 8005344:	9b03      	ldr	r3, [sp, #12]
			}else if(pqm != std::string::npos && (std::isdigit(word[pqm+1]) || (std::isdigit(word[pqm+2]) && (word[pqm+1] == '-' || word[pqm+1] == '+')))){ // <cmd>?<int>
 8005346:	5c99      	ldrb	r1, [r3, r2]
 8005348:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800534c:	2809      	cmp	r0, #9
 800534e:	d908      	bls.n	8005362 <_ZN9CmdParser5parseEv+0x1fe>
 8005350:	4453      	add	r3, sl
 8005352:	789b      	ldrb	r3, [r3, #2]
 8005354:	3b30      	subs	r3, #48	; 0x30
 8005356:	2b09      	cmp	r3, #9
 8005358:	d825      	bhi.n	80053a6 <_ZN9CmdParser5parseEv+0x242>
 800535a:	292d      	cmp	r1, #45	; 0x2d
 800535c:	d001      	beq.n	8005362 <_ZN9CmdParser5parseEv+0x1fe>
 800535e:	292b      	cmp	r1, #43	; 0x2b
 8005360:	d121      	bne.n	80053a6 <_ZN9CmdParser5parseEv+0x242>
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, word.npos));
 8005362:	f04f 33ff 	mov.w	r3, #4294967295
 8005366:	a903      	add	r1, sp, #12
 8005368:	a809      	add	r0, sp, #36	; 0x24
 800536a:	f003 ffd7 	bl	800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800536e:	220a      	movs	r2, #10
 8005370:	2100      	movs	r1, #0
 8005372:	a809      	add	r0, sp, #36	; 0x24
 8005374:	f7ff fd8e 	bl	8004e94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8005378:	4604      	mov	r4, r0
      { _M_dispose(); }
 800537a:	a809      	add	r0, sp, #36	; 0x24
 800537c:	f003 fde4 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
				cmd.type = CMDtype::getat;
 8005380:	2303      	movs	r3, #3
				cmd.cmd = word.substr(0, pqm);
 8005382:	2200      	movs	r2, #0
				cmd.type = CMDtype::getat;
 8005384:	9317      	str	r3, [sp, #92]	; 0x5c
				cmd.cmd = word.substr(0, pqm);
 8005386:	a903      	add	r1, sp, #12
 8005388:	4653      	mov	r3, sl
 800538a:	a809      	add	r0, sp, #36	; 0x24
				cmd.val = val;
 800538c:	9416      	str	r4, [sp, #88]	; 0x58
				cmd.cmd = word.substr(0, pqm);
 800538e:	f003 ffc5 	bl	800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8005392:	a909      	add	r1, sp, #36	; 0x24
 8005394:	a80f      	add	r0, sp, #60	; 0x3c
 8005396:	f003 fe8d 	bl	80090b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800539a:	a809      	add	r0, sp, #36	; 0x24
 800539c:	f003 fdd4 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
				cmd.adr = val;
 80053a0:	f8ad 4054 	strh.w	r4, [sp, #84]	; 0x54
 80053a4:	e7c1      	b.n	800532a <_ZN9CmdParser5parseEv+0x1c6>
			}else if(peq != std::string::npos && (std::isdigit(word[peq+1]) || (std::isdigit(word[peq+2]) && (word[peq+1] == '-' || word[peq+1] == '+')))){ // <cmd>=<int>
 80053a6:	1c6b      	adds	r3, r5, #1
 80053a8:	d029      	beq.n	80053fe <_ZN9CmdParser5parseEv+0x29a>
	return _M_data()[__pos];
 80053aa:	9903      	ldr	r1, [sp, #12]
 80053ac:	1c6a      	adds	r2, r5, #1
 80053ae:	5c8b      	ldrb	r3, [r1, r2]
 80053b0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80053b4:	2809      	cmp	r0, #9
 80053b6:	d908      	bls.n	80053ca <_ZN9CmdParser5parseEv+0x266>
 80053b8:	4429      	add	r1, r5
 80053ba:	7889      	ldrb	r1, [r1, #2]
 80053bc:	3930      	subs	r1, #48	; 0x30
 80053be:	2909      	cmp	r1, #9
 80053c0:	d817      	bhi.n	80053f2 <_ZN9CmdParser5parseEv+0x28e>
 80053c2:	2b2d      	cmp	r3, #45	; 0x2d
 80053c4:	d001      	beq.n	80053ca <_ZN9CmdParser5parseEv+0x266>
 80053c6:	2b2b      	cmp	r3, #43	; 0x2b
 80053c8:	d113      	bne.n	80053f2 <_ZN9CmdParser5parseEv+0x28e>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	a903      	add	r1, sp, #12
 80053d0:	a809      	add	r0, sp, #36	; 0x24
 80053d2:	f003 ffa3 	bl	800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80053d6:	220a      	movs	r2, #10
 80053d8:	2100      	movs	r1, #0
 80053da:	a809      	add	r0, sp, #36	; 0x24
 80053dc:	f7ff fd5a 	bl	8004e94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80053e0:	4604      	mov	r4, r0
      { _M_dispose(); }
 80053e2:	a809      	add	r0, sp, #36	; 0x24
 80053e4:	f003 fdb0 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
				cmd.type = CMDtype::set;
 80053e8:	2200      	movs	r2, #0
				cmd.val = val;
 80053ea:	9416      	str	r4, [sp, #88]	; 0x58
				cmd.type = CMDtype::set;
 80053ec:	9217      	str	r2, [sp, #92]	; 0x5c
				cmd.cmd = word.substr(0, peq);
 80053ee:	462b      	mov	r3, r5
 80053f0:	e731      	b.n	8005256 <_ZN9CmdParser5parseEv+0xf2>
			}else if(peq != std::string::npos && (word[peq+1] == 'R' || word[peq+1] == 'G' || word[peq+1] == 'B')){ // <cmd>=RGB
 80053f2:	2b47      	cmp	r3, #71	; 0x47
 80053f4:	d0e9      	beq.n	80053ca <_ZN9CmdParser5parseEv+0x266>
 80053f6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80053fa:	2b42      	cmp	r3, #66	; 0x42
 80053fc:	d0e5      	beq.n	80053ca <_ZN9CmdParser5parseEv+0x266>
	this->_M_assign(__str);
 80053fe:	a903      	add	r1, sp, #12
 8005400:	a80f      	add	r0, sp, #60	; 0x3c
 8005402:	f003 fdd6 	bl	8008fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
				cmd.type = CMDtype::get;
 8005406:	2302      	movs	r3, #2
 8005408:	e740      	b.n	800528c <_ZN9CmdParser5parseEv+0x128>
      { _M_string_length = __length; }
 800540a:	2300      	movs	r3, #0
	traits_type::assign(_M_data()[__n], _CharT());
 800540c:	6872      	ldr	r2, [r6, #4]
      { _M_string_length = __length; }
 800540e:	60b3      	str	r3, [r6, #8]
 8005410:	7013      	strb	r3, [r2, #0]
 8005412:	e6cf      	b.n	80051b4 <_ZN9CmdParser5parseEv+0x50>
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005414:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8005416:	b108      	cbz	r0, 800541c <_ZN9CmdParser5parseEv+0x2b8>
	::operator delete(__p);
 8005418:	f003 fd42 	bl	8008ea0 <_ZdlPv>
	}
	buffer.clear();
	return commands;
}
 800541c:	4638      	mov	r0, r7
 800541e:	b019      	add	sp, #100	; 0x64
 8005420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005424 <_ZN14CommandHandler11hasCommandsEv>:
	removeCommandHandler();
}

bool CommandHandler::hasCommands(){
	return this->commandsEnabled;
}
 8005424:	7900      	ldrb	r0, [r0, #4]
 8005426:	4770      	bx	lr

08005428 <_ZN14CommandHandler18setCommandsEnabledEb>:
void CommandHandler::setCommandsEnabled(bool enable){
	this->commandsEnabled = enable;
 8005428:	7101      	strb	r1, [r0, #4]
}
 800542a:	4770      	bx	lr

0800542c <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
bool CommandHandler::command(ParsedCommand* cmd,std::string* reply){
	if(!this->commandsEnabled){
		return false;
	}
	return false;
}
 800542c:	2000      	movs	r0, #0
 800542e:	4770      	bx	lr

08005430 <_ZN14CommandHandler20removeCommandHandlerEv>:
			return;
	}
	cmdHandlers.push_back(this);
}

void CommandHandler::removeCommandHandler(){
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005434:	2400      	movs	r4, #0
 8005436:	4e0c      	ldr	r6, [pc, #48]	; (8005468 <_ZN14CommandHandler20removeCommandHandlerEv+0x38>)
 8005438:	e9d6 3200 	ldrd	r3, r2, [r6]
 800543c:	1ad5      	subs	r5, r2, r3
 800543e:	10ad      	asrs	r5, r5, #2
 8005440:	b2e1      	uxtb	r1, r4
	extern std::vector<CommandHandler*> cmdHandlers;
	for (uint8_t i = 0; i < cmdHandlers.size(); i++){
 8005442:	42a9      	cmp	r1, r5
 8005444:	d20f      	bcs.n	8005466 <_ZN14CommandHandler20removeCommandHandlerEv+0x36>
	return *(this->_M_impl._M_start + __n);
 8005446:	eb03 0081 	add.w	r0, r3, r1, lsl #2
		if(cmdHandlers[i] == this){
 800544a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800544e:	3401      	adds	r4, #1
 8005450:	42b9      	cmp	r1, r7
 8005452:	d1f5      	bne.n	8005440 <_ZN14CommandHandler20removeCommandHandlerEv+0x10>
      { return __normal_iterator(_M_current + __n); }
 8005454:	1d01      	adds	r1, r0, #4
      if (__position + 1 != end())
 8005456:	428a      	cmp	r2, r1
 8005458:	d002      	beq.n	8005460 <_ZN14CommandHandler20removeCommandHandlerEv+0x30>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800545a:	1a52      	subs	r2, r2, r1
 800545c:	f006 fe96 	bl	800c18c <memmove>
      --this->_M_impl._M_finish;
 8005460:	6873      	ldr	r3, [r6, #4]
 8005462:	3b04      	subs	r3, #4
 8005464:	6073      	str	r3, [r6, #4]
			cmdHandlers.erase(cmdHandlers.begin()+i);
			break;
		}
	}
}
 8005466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005468:	20000b60 	.word	0x20000b60

0800546c <_ZN14CommandHandlerD1Ev>:
CommandHandler::~CommandHandler() {
 800546c:	b510      	push	{r4, lr}
 800546e:	4604      	mov	r4, r0
 8005470:	4b02      	ldr	r3, [pc, #8]	; (800547c <_ZN14CommandHandlerD1Ev+0x10>)
 8005472:	6003      	str	r3, [r0, #0]
	removeCommandHandler();
 8005474:	f7ff ffdc 	bl	8005430 <_ZN14CommandHandler20removeCommandHandlerEv>
}
 8005478:	4620      	mov	r0, r4
 800547a:	bd10      	pop	{r4, pc}
 800547c:	0800d5fc 	.word	0x0800d5fc

08005480 <_ZN14CommandHandlerD0Ev>:
CommandHandler::~CommandHandler() {
 8005480:	b510      	push	{r4, lr}
 8005482:	4604      	mov	r4, r0
}
 8005484:	f7ff fff2 	bl	800546c <_ZN14CommandHandlerD1Ev>
 8005488:	4620      	mov	r0, r4
 800548a:	2108      	movs	r1, #8
 800548c:	f003 fcec 	bl	8008e68 <_ZdlPvj>
 8005490:	4620      	mov	r0, r4
 8005492:	bd10      	pop	{r4, pc}

08005494 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005498:	e9d0 3400 	ldrd	r3, r4, [r0]
 800549c:	1ae4      	subs	r4, r4, r3
      if (__a < __b)
 800549e:	10a4      	asrs	r4, r4, #2
 80054a0:	4691      	mov	r9, r2
 80054a2:	bf14      	ite	ne
 80054a4:	4622      	movne	r2, r4
 80054a6:	2201      	moveq	r2, #1
 80054a8:	18a4      	adds	r4, r4, r2
 80054aa:	4606      	mov	r6, r0
 80054ac:	460f      	mov	r7, r1
 80054ae:	eba1 0803 	sub.w	r8, r1, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80054b2:	d234      	bcs.n	800551e <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
 80054b4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80054b8:	d231      	bcs.n	800551e <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80054ba:	bb94      	cbnz	r4, 8005522 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8e>
 80054bc:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80054be:	eb15 0f08 	cmn.w	r5, r8
 80054c2:	bf18      	it	ne
 80054c4:	f8d9 3000 	ldrne.w	r3, [r9]
	    (this->_M_impl._M_start, __position.base(),
 80054c8:	f8d6 9000 	ldr.w	r9, [r6]
 80054cc:	bf18      	it	ne
 80054ce:	f845 3008 	strne.w	r3, [r5, r8]
	  if (_Num)
 80054d2:	45b9      	cmp	r9, r7
	  const ptrdiff_t _Num = __last - __first;
 80054d4:	eba7 0809 	sub.w	r8, r7, r9
	  if (_Num)
 80054d8:	d004      	beq.n	80054e4 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80054da:	4642      	mov	r2, r8
 80054dc:	4649      	mov	r1, r9
 80054de:	4628      	mov	r0, r5
 80054e0:	f006 fe54 	bl	800c18c <memmove>
	  const ptrdiff_t _Num = __last - __first;
 80054e4:	6872      	ldr	r2, [r6, #4]
	  ++__new_finish;
 80054e6:	f108 0304 	add.w	r3, r8, #4
	  if (_Num)
 80054ea:	42ba      	cmp	r2, r7
 80054ec:	442b      	add	r3, r5
	  const ptrdiff_t _Num = __last - __first;
 80054ee:	eba2 0807 	sub.w	r8, r2, r7
	  if (_Num)
 80054f2:	d005      	beq.n	8005500 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80054f4:	4618      	mov	r0, r3
 80054f6:	4642      	mov	r2, r8
 80054f8:	4639      	mov	r1, r7
 80054fa:	f006 fe3c 	bl	800c176 <memcpy>
 80054fe:	4603      	mov	r3, r0
	  return __result + _Num;
 8005500:	eb03 0708 	add.w	r7, r3, r8
	if (__p)
 8005504:	f1b9 0f00 	cmp.w	r9, #0
 8005508:	d002      	beq.n	8005510 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7c>
	::operator delete(__p);
 800550a:	4648      	mov	r0, r9
 800550c:	f003 fcc8 	bl	8008ea0 <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005510:	eb05 0484 	add.w	r4, r5, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 8005514:	e9c6 5700 	strd	r5, r7, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005518:	60b4      	str	r4, [r6, #8]
    }
 800551a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800551e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005522:	00a0      	lsls	r0, r4, #2
 8005524:	f003 fca2 	bl	8008e6c <_Znwj>
 8005528:	4605      	mov	r5, r0
 800552a:	e7c8      	b.n	80054be <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>

0800552c <_ZN14CommandHandler17addCommandHandlerEv>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800552c:	2200      	movs	r2, #0
 800552e:	4b0f      	ldr	r3, [pc, #60]	; (800556c <_ZN14CommandHandler17addCommandHandlerEv+0x40>)
void CommandHandler::addCommandHandler(){
 8005530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005532:	e9d3 5100 	ldrd	r5, r1, [r3]
 8005536:	1b4c      	subs	r4, r1, r5
 8005538:	10a4      	asrs	r4, r4, #2
 800553a:	b2d6      	uxtb	r6, r2
	for(uint8_t i = 0; i < cmdHandlers.size(); i++){
 800553c:	42a6      	cmp	r6, r4
 800553e:	d206      	bcs.n	800554e <_ZN14CommandHandler17addCommandHandlerEv+0x22>
		if(cmdHandlers[i] == this)
 8005540:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8005544:	3201      	adds	r2, #1
 8005546:	4286      	cmp	r6, r0
 8005548:	d1f7      	bne.n	800553a <_ZN14CommandHandler17addCommandHandlerEv+0xe>
}
 800554a:	b002      	add	sp, #8
 800554c:	bd70      	pop	{r4, r5, r6, pc}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800554e:	689a      	ldr	r2, [r3, #8]
	cmdHandlers.push_back(this);
 8005550:	9001      	str	r0, [sp, #4]
 8005552:	4291      	cmp	r1, r2
 8005554:	d004      	beq.n	8005560 <_ZN14CommandHandler17addCommandHandlerEv+0x34>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005556:	b101      	cbz	r1, 800555a <_ZN14CommandHandler17addCommandHandlerEv+0x2e>
 8005558:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
 800555a:	3104      	adds	r1, #4
 800555c:	6059      	str	r1, [r3, #4]
 800555e:	e7f4      	b.n	800554a <_ZN14CommandHandler17addCommandHandlerEv+0x1e>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005560:	aa01      	add	r2, sp, #4
 8005562:	4802      	ldr	r0, [pc, #8]	; (800556c <_ZN14CommandHandler17addCommandHandlerEv+0x40>)
 8005564:	f7ff ff96 	bl	8005494 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8005568:	e7ef      	b.n	800554a <_ZN14CommandHandler17addCommandHandlerEv+0x1e>
 800556a:	bf00      	nop
 800556c:	20000b60 	.word	0x20000b60

08005570 <_ZN14CommandHandlerC1Ev>:
CommandHandler::CommandHandler() {
 8005570:	4b04      	ldr	r3, [pc, #16]	; (8005584 <_ZN14CommandHandlerC1Ev+0x14>)
 8005572:	b510      	push	{r4, lr}
 8005574:	6003      	str	r3, [r0, #0]
 8005576:	2301      	movs	r3, #1
 8005578:	4604      	mov	r4, r0
 800557a:	7103      	strb	r3, [r0, #4]
	addCommandHandler();
 800557c:	f7ff ffd6 	bl	800552c <_ZN14CommandHandler17addCommandHandlerEv>
}
 8005580:	4620      	mov	r0, r4
 8005582:	bd10      	pop	{r4, pc}
 8005584:	0800d5fc 	.word	0x0800d5fc

08005588 <_ZN12EncoderLocal4extiEt>:
		// Encoder Z pin activated
	}
}

void EncoderLocal::timerElapsed(TIM_HandleTypeDef* htim){
	if(htim == this->htim){
 8005588:	4770      	bx	lr
	...

0800558c <_ZN12EncoderLocalD1Ev>:
EncoderLocal::~EncoderLocal() {
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <_ZN12EncoderLocalD1Ev+0x28>)
 800558e:	b510      	push	{r4, lr}
 8005590:	f103 0208 	add.w	r2, r3, #8
 8005594:	6002      	str	r2, [r0, #0]
	this->htim->Instance->CR1 = 0;
 8005596:	2200      	movs	r2, #0
EncoderLocal::~EncoderLocal() {
 8005598:	4604      	mov	r4, r0
 800559a:	3320      	adds	r3, #32
 800559c:	6043      	str	r3, [r0, #4]
	this->htim->Instance->CR1 = 0;
 800559e:	6883      	ldr	r3, [r0, #8]
EncoderLocal::~EncoderLocal() {
 80055a0:	3004      	adds	r0, #4
	this->htim->Instance->CR1 = 0;
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	601a      	str	r2, [r3, #0]
EncoderLocal::~EncoderLocal() {
 80055a6:	f002 f8ef 	bl	8007788 <_ZN12TimerHandlerD1Ev>
 80055aa:	4620      	mov	r0, r4
 80055ac:	f000 f874 	bl	8005698 <_ZN11ExtiHandlerD1Ev>
}
 80055b0:	4620      	mov	r0, r4
 80055b2:	bd10      	pop	{r4, pc}
 80055b4:	0800d618 	.word	0x0800d618

080055b8 <_ZThn4_N12EncoderLocalD1Ev>:

class EncoderLocal: public ExtiHandler, TimerHandler {
public:

	EncoderLocal();
	virtual ~EncoderLocal();
 80055b8:	f1a0 0004 	sub.w	r0, r0, #4
 80055bc:	f7ff bfe6 	b.w	800558c <_ZN12EncoderLocalD1Ev>

080055c0 <_ZN12EncoderLocalD0Ev>:
EncoderLocal::~EncoderLocal() {
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4604      	mov	r4, r0
}
 80055c4:	f7ff ffe2 	bl	800558c <_ZN12EncoderLocalD1Ev>
 80055c8:	4620      	mov	r0, r4
 80055ca:	211c      	movs	r1, #28
 80055cc:	f003 fc4c 	bl	8008e68 <_ZdlPvj>
 80055d0:	4620      	mov	r0, r4
 80055d2:	bd10      	pop	{r4, pc}

080055d4 <_ZThn4_N12EncoderLocalD0Ev>:
 80055d4:	f1a0 0004 	sub.w	r0, r0, #4
 80055d8:	f7ff bff2 	b.w	80055c0 <_ZN12EncoderLocalD0Ev>

080055dc <_ZN12EncoderLocalC1Ev>:
EncoderLocal::EncoderLocal() {
 80055dc:	b510      	push	{r4, lr}
 80055de:	4604      	mov	r4, r0
 80055e0:	f000 f8d4 	bl	800578c <_ZN11ExtiHandlerC1Ev>
 80055e4:	1d20      	adds	r0, r4, #4
 80055e6:	f002 f949 	bl	800787c <_ZN12TimerHandlerC1Ev>
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <_ZN12EncoderLocalC1Ev+0x40>)
	htim->Instance->CNT = pos+0x7fff;
 80055ec:	f647 71ff 	movw	r1, #32767	; 0x7fff
EncoderLocal::EncoderLocal() {
 80055f0:	f103 0208 	add.w	r2, r3, #8
 80055f4:	3320      	adds	r3, #32
 80055f6:	6063      	str	r3, [r4, #4]
 80055f8:	2300      	movs	r3, #0
 80055fa:	60e3      	str	r3, [r4, #12]
 80055fc:	6163      	str	r3, [r4, #20]
 80055fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005602:	6022      	str	r2, [r4, #0]
 8005604:	2201      	movs	r2, #1
	this->htim = &TIM_ENC;
 8005606:	4806      	ldr	r0, [pc, #24]	; (8005620 <_ZN12EncoderLocalC1Ev+0x44>)
EncoderLocal::EncoderLocal() {
 8005608:	61a3      	str	r3, [r4, #24]
	htim->Instance->CNT = pos+0x7fff;
 800560a:	6803      	ldr	r3, [r0, #0]
EncoderLocal::EncoderLocal() {
 800560c:	7422      	strb	r2, [r4, #16]
	this->htim = &TIM_ENC;
 800560e:	60a0      	str	r0, [r4, #8]
	htim->Instance->CNT = pos+0x7fff;
 8005610:	6259      	str	r1, [r3, #36]	; 0x24
	this->htim->Instance->CR1 = 1;
 8005612:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 8005614:	f7fe fb9e 	bl	8003d54 <HAL_TIM_Base_Start_IT>
}
 8005618:	4620      	mov	r0, r4
 800561a:	bd10      	pop	{r4, pc}
 800561c:	0800d618 	.word	0x0800d618
 8005620:	20001550 	.word	0x20001550

08005624 <_ZN12EncoderLocal6getPosEv>:
	int32_t timpos = htim->Instance->CNT - 0x7fff;
 8005624:	6883      	ldr	r3, [r0, #8]
	return timpos + offset;
 8005626:	6942      	ldr	r2, [r0, #20]
	int32_t timpos = htim->Instance->CNT - 0x7fff;
 8005628:	681b      	ldr	r3, [r3, #0]
	return timpos + offset;
 800562a:	68c0      	ldr	r0, [r0, #12]
	int32_t timpos = htim->Instance->CNT - 0x7fff;
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8005632:	3b7f      	subs	r3, #127	; 0x7f
	return timpos + offset;
 8005634:	4413      	add	r3, r2
}
 8005636:	4418      	add	r0, r3
 8005638:	4770      	bx	lr

0800563a <_ZN12EncoderLocal6setPosEl>:
	htim->Instance->CNT = pos+0x7fff;
 800563a:	6883      	ldr	r3, [r0, #8]
	this->offset = pos;
 800563c:	6141      	str	r1, [r0, #20]
	htim->Instance->CNT = pos+0x7fff;
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f501 41ff 	add.w	r1, r1, #32640	; 0x7f80
 8005644:	317f      	adds	r1, #127	; 0x7f
 8005646:	6259      	str	r1, [r3, #36]	; 0x24
}
 8005648:	4770      	bx	lr

0800564a <_ZN12EncoderLocal16overflowCallbackEv>:

void EncoderLocal::overflowCallback(){
	if(first)					//TODO: figure it out
	{
		first = false;
		return;
 800564a:	7c03      	ldrb	r3, [r0, #16]
		first = false;
 800564c:	b510      	push	{r4, lr}
		return;
 800564e:	b113      	cbz	r3, 8005656 <_ZN12EncoderLocal16overflowCallbackEv+0xc>
	}
	if(htim->Instance->CNT > this->htim->Instance->ARR/2){
 8005650:	2300      	movs	r3, #0
 8005652:	7403      	strb	r3, [r0, #16]
		offset += htim->Instance->ARR+1;
	}
}

uint32_t EncoderLocal::getPpr(){
	return this->ppr;
 8005654:	bd10      	pop	{r4, pc}
		offset += htim->Instance->ARR+1;
 8005656:	6883      	ldr	r3, [r0, #8]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	6943      	ldr	r3, [r0, #20]
 800565c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800565e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	}
 8005660:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		offset += htim->Instance->ARR+1;
 8005662:	ebb1 0f54 	cmp.w	r1, r4, lsr #1
	}
 8005666:	bf8b      	itete	hi
 8005668:	f103 33ff 	addhi.w	r3, r3, #4294967295

 800566c:	3301      	addls	r3, #1
	}
 800566e:	1a9b      	subhi	r3, r3, r2

 8005670:	189b      	addls	r3, r3, r2
 8005672:	6143      	str	r3, [r0, #20]
 8005674:	e7ee      	b.n	8005654 <_ZN12EncoderLocal16overflowCallbackEv+0xa>

08005676 <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:
}
 8005676:	6883      	ldr	r3, [r0, #8]
 8005678:	428b      	cmp	r3, r1
 800567a:	d101      	bne.n	8005680 <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef+0xa>

 800567c:	f7ff bfe5 	b.w	800564a <_ZN12EncoderLocal16overflowCallbackEv>
	if(first)					//TODO: figure it out
 8005680:	4770      	bx	lr

08005682 <_ZThn4_N12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:
	void setPos(int32_t pos);
	void setPeriod(uint32_t period);
	void overflowCallback();
	void exti(uint16_t GPIO_Pin);
	void timerElapsed(TIM_HandleTypeDef* htim);

 8005682:	f1a0 0004 	sub.w	r0, r0, #4
 8005686:	f7ff bff6 	b.w	8005676 <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>

0800568a <_ZN12EncoderLocal6getPprEv>:
 800568a:	6980      	ldr	r0, [r0, #24]
 800568c:	4770      	bx	lr

0800568e <_ZN12EncoderLocal9getPosCprEv>:
uint32_t EncoderLocal::getPosCpr(){
	return this->ppr;
}

void EncoderLocal::setPpr(uint32_t ppr){
	this->ppr = ppr;
 800568e:	6980      	ldr	r0, [r0, #24]
 8005690:	4770      	bx	lr

08005692 <_ZN12EncoderLocal6setPprEm>:
}
 8005692:	6181      	str	r1, [r0, #24]
 8005694:	4770      	bx	lr

08005696 <_ZN11ExtiHandler4extiEt>:
	}
}

void ExtiHandler::exti(uint16_t GPIO_Pin){

}
 8005696:	4770      	bx	lr

08005698 <_ZN11ExtiHandlerD1Ev>:
ExtiHandler::~ExtiHandler() {
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	4605      	mov	r5, r0
 800569c:	2600      	movs	r6, #0
 800569e:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <_ZN11ExtiHandlerD1Ev+0x40>)
 80056a0:	4c0e      	ldr	r4, [pc, #56]	; (80056dc <_ZN11ExtiHandlerD1Ev+0x44>)
 80056a2:	6003      	str	r3, [r0, #0]
 80056a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80056a8:	1ad7      	subs	r7, r2, r3
 80056aa:	10bf      	asrs	r7, r7, #2
 80056ac:	b2f1      	uxtb	r1, r6
	for (uint8_t i = 0; i < extiHandlers.size(); i++){
 80056ae:	42b9      	cmp	r1, r7
 80056b0:	d20f      	bcs.n	80056d2 <_ZN11ExtiHandlerD1Ev+0x3a>
	return *(this->_M_impl._M_start + __n);
 80056b2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
		if(extiHandlers[i] == this){
 80056b6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80056ba:	3601      	adds	r6, #1
 80056bc:	42a9      	cmp	r1, r5
 80056be:	d1f5      	bne.n	80056ac <_ZN11ExtiHandlerD1Ev+0x14>
 80056c0:	1d01      	adds	r1, r0, #4
      if (__position + 1 != end())
 80056c2:	428a      	cmp	r2, r1
 80056c4:	d002      	beq.n	80056cc <_ZN11ExtiHandlerD1Ev+0x34>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80056c6:	1a52      	subs	r2, r2, r1
 80056c8:	f006 fd60 	bl	800c18c <memmove>
      --this->_M_impl._M_finish;
 80056cc:	6863      	ldr	r3, [r4, #4]
 80056ce:	3b04      	subs	r3, #4
 80056d0:	6063      	str	r3, [r4, #4]
}
 80056d2:	4628      	mov	r0, r5
 80056d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d6:	bf00      	nop
 80056d8:	0800d64c 	.word	0x0800d64c
 80056dc:	20000b6c 	.word	0x20000b6c

080056e0 <_ZN11ExtiHandlerD0Ev>:
ExtiHandler::~ExtiHandler() {
 80056e0:	b510      	push	{r4, lr}
 80056e2:	4604      	mov	r4, r0
}
 80056e4:	f7ff ffd8 	bl	8005698 <_ZN11ExtiHandlerD1Ev>
 80056e8:	4620      	mov	r0, r4
 80056ea:	2104      	movs	r1, #4
 80056ec:	f003 fbbc 	bl	8008e68 <_ZdlPvj>
 80056f0:	4620      	mov	r0, r4
 80056f2:	bd10      	pop	{r4, pc}

080056f4 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80056f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80056f8:	e9d0 3400 	ldrd	r3, r4, [r0]
 80056fc:	1ae4      	subs	r4, r4, r3
      if (__a < __b)
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	4691      	mov	r9, r2
 8005702:	bf14      	ite	ne
 8005704:	4622      	movne	r2, r4
 8005706:	2201      	moveq	r2, #1
 8005708:	18a4      	adds	r4, r4, r2
 800570a:	4606      	mov	r6, r0
 800570c:	460f      	mov	r7, r1
 800570e:	eba1 0803 	sub.w	r8, r1, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005712:	d234      	bcs.n	800577e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
 8005714:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8005718:	d231      	bcs.n	800577e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800571a:	bb94      	cbnz	r4, 8005782 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8e>
 800571c:	4625      	mov	r5, r4
 800571e:	eb15 0f08 	cmn.w	r5, r8
 8005722:	bf18      	it	ne
 8005724:	f8d9 3000 	ldrne.w	r3, [r9]
	    (this->_M_impl._M_start, __position.base(),
 8005728:	f8d6 9000 	ldr.w	r9, [r6]
 800572c:	bf18      	it	ne
 800572e:	f845 3008 	strne.w	r3, [r5, r8]
	  if (_Num)
 8005732:	45b9      	cmp	r9, r7
	  const ptrdiff_t _Num = __last - __first;
 8005734:	eba7 0809 	sub.w	r8, r7, r9
	  if (_Num)
 8005738:	d004      	beq.n	8005744 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800573a:	4642      	mov	r2, r8
 800573c:	4649      	mov	r1, r9
 800573e:	4628      	mov	r0, r5
 8005740:	f006 fd24 	bl	800c18c <memmove>
	  const ptrdiff_t _Num = __last - __first;
 8005744:	6872      	ldr	r2, [r6, #4]
	  ++__new_finish;
 8005746:	f108 0304 	add.w	r3, r8, #4
	  if (_Num)
 800574a:	42ba      	cmp	r2, r7
 800574c:	442b      	add	r3, r5
	  const ptrdiff_t _Num = __last - __first;
 800574e:	eba2 0807 	sub.w	r8, r2, r7
	  if (_Num)
 8005752:	d005      	beq.n	8005760 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005754:	4618      	mov	r0, r3
 8005756:	4642      	mov	r2, r8
 8005758:	4639      	mov	r1, r7
 800575a:	f006 fd0c 	bl	800c176 <memcpy>
 800575e:	4603      	mov	r3, r0
	  return __result + _Num;
 8005760:	eb03 0708 	add.w	r7, r3, r8
	if (__p)
 8005764:	f1b9 0f00 	cmp.w	r9, #0
 8005768:	d002      	beq.n	8005770 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7c>
	::operator delete(__p);
 800576a:	4648      	mov	r0, r9
 800576c:	f003 fb98 	bl	8008ea0 <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005770:	eb05 0484 	add.w	r4, r5, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 8005774:	e9c6 5700 	strd	r5, r7, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005778:	60b4      	str	r4, [r6, #8]
    }
 800577a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800577e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005782:	00a0      	lsls	r0, r4, #2
 8005784:	f003 fb72 	bl	8008e6c <_Znwj>
 8005788:	4605      	mov	r5, r0
 800578a:	e7c8      	b.n	800571e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>

0800578c <_ZN11ExtiHandlerC1Ev>:
ExtiHandler::ExtiHandler() {
 800578c:	b513      	push	{r0, r1, r4, lr}
 800578e:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <_ZN11ExtiHandlerC1Ev+0x2c>)
 8005790:	4604      	mov	r4, r0
 8005792:	6003      	str	r3, [r0, #0]
	extiHandlers.push_back(this);
 8005794:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005796:	4809      	ldr	r0, [pc, #36]	; (80057bc <_ZN11ExtiHandlerC1Ev+0x30>)
 8005798:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 800579c:	4299      	cmp	r1, r3
 800579e:	4603      	mov	r3, r0
 80057a0:	d006      	beq.n	80057b0 <_ZN11ExtiHandlerC1Ev+0x24>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80057a2:	b101      	cbz	r1, 80057a6 <_ZN11ExtiHandlerC1Ev+0x1a>
 80057a4:	600c      	str	r4, [r1, #0]
	    ++this->_M_impl._M_finish;
 80057a6:	3104      	adds	r1, #4
 80057a8:	6059      	str	r1, [r3, #4]
}
 80057aa:	4620      	mov	r0, r4
 80057ac:	b002      	add	sp, #8
 80057ae:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80057b0:	aa01      	add	r2, sp, #4
 80057b2:	f7ff ff9f 	bl	80056f4 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 80057b6:	e7f8      	b.n	80057aa <_ZN11ExtiHandlerC1Ev+0x1e>
 80057b8:	0800d64c 	.word	0x0800d64c
 80057bc:	20000b6c 	.word	0x20000b6c

080057c0 <_ZN8FFBWheel6adcUpdEPVm>:
}

void FFBWheel::adcUpd(volatile uint32_t* ADC_BUF){
	for(uint8_t i = 0;i<ADC_PINS;i++)
	{
		this->adc_buf2[i] += ADC_BUF[i+ADC_CHAN_FPIN];
 80057c0:	680b      	ldr	r3, [r1, #0]
 80057c2:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80057c6:	4413      	add	r3, r2
 80057c8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 80057cc:	684b      	ldr	r3, [r1, #4]
 80057ce:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
	}
	adcCount++;
	if(adcCount >= conf.maxAdcCount)
 80057d2:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
		this->adc_buf2[i] += ADC_BUF[i+ADC_CHAN_FPIN];
 80057d6:	4413      	add	r3, r2
 80057d8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	adcCount++;
 80057dc:	7bc3      	ldrb	r3, [r0, #15]
 80057de:	3301      	adds	r3, #1
 80057e0:	b2db      	uxtb	r3, r3
	if(adcCount >= conf.maxAdcCount)
 80057e2:	428b      	cmp	r3, r1
	adcCount++;
 80057e4:	73c3      	strb	r3, [r0, #15]
	if(adcCount >= conf.maxAdcCount)
 80057e6:	d313      	bcc.n	8005810 <_ZN8FFBWheel6adcUpdEPVm+0x50>
	{
		for(uint8_t i = 0;i<ADC_PINS;i++)
		{
			this->adc_buf[i] = this->adc_buf2[i]/conf.maxAdcCount;
 80057e8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80057ec:	fbb2 f2f1 	udiv	r2, r2, r1
 80057f0:	b292      	uxth	r2, r2
 80057f2:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
			this->adc_buf2[i]= 0;
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
			this->adc_buf[i] = this->adc_buf2[i]/conf.maxAdcCount;
 80057fc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
		}
		adcCount = 0;
 8005800:	73c2      	strb	r2, [r0, #15]
			this->adc_buf[i] = this->adc_buf2[i]/conf.maxAdcCount;
 8005802:	fbb3 f3f1 	udiv	r3, r3, r1
 8005806:	b29b      	uxth	r3, r3
 8005808:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
			this->adc_buf2[i]= 0;
 800580c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	}

}
 8005810:	4770      	bx	lr

08005812 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reinterpret_cast<uint8_t*>(&reportHID), sizeof(reportHID_t));

}

void FFBWheel::timerElapsed(TIM_HandleTypeDef* htim){
	if(htim == this->timer_update){
 8005812:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005814:	428b      	cmp	r3, r1
		update_flag = true;
 8005816:	bf04      	itt	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	7383      	strbeq	r3, [r0, #14]
	}
}
 800581c:	4770      	bx	lr

0800581e <_ZThn4_N8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:
	static FFBWheelConfig decodeConf();
	static void encodeConf(FFBWheelConfig conf);


	void adcUpd(volatile uint32_t* ADC_BUF);
	void timerElapsed(TIM_HandleTypeDef* htim);
 800581e:	f1a0 0004 	sub.w	r0, r0, #4
 8005822:	f7ff bff6 	b.w	8005812 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>
	...

08005828 <_ZN8FFBWheel13updateEndstopEv>:
	int8_t clipdir = cliptest<int32_t,int32_t>(lastScaledEnc, -0x7fff, 0x7fff);
 8005828:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
}

template<class T,class C>
int8_t cliptest(T v, C l, C h)
{
	if(v > h){
 800582c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005830:	da1d      	bge.n	800586e <_ZN8FFBWheel13updateEndstopEv+0x46>
		return 1;
	}else if(v < l){
 8005832:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8005836:	dc1c      	bgt.n	8005872 <_ZN8FFBWheel13updateEndstopEv+0x4a>
		return -1;
 8005838:	f04f 32ff 	mov.w	r2, #4294967295
	addtorque *= conf.endstop_gain;
 800583c:	f647 71ff 	movw	r1, #32767	; 0x7fff

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8005840:	2b00      	cmp	r3, #0
 8005842:	bfb8      	it	lt
 8005844:	425b      	neglt	r3, r3
	addtorque += clip<int32_t,int32_t>(abs(lastScaledEnc)-0x7fff,-0x7fff,0x7fff);
 8005846:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800584a:	3b7f      	subs	r3, #127	; 0x7f
	addtorque *= conf.endstop_gain;
 800584c:	428b      	cmp	r3, r1
 800584e:	bfa8      	it	ge
 8005850:	460b      	movge	r3, r1
 8005852:	f8b0 0060 	ldrh.w	r0, [r0, #96]	; 0x60
	addtorque *= -clipdir;
 8005856:	4252      	negs	r2, r2
	addtorque *= conf.endstop_gain;
 8005858:	4358      	muls	r0, r3
	addtorque *= -clipdir;
 800585a:	4350      	muls	r0, r2
	return clip<int32_t,int32_t>(addtorque,-0x7fff,0x7fff);
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <_ZN8FFBWheel13updateEndstopEv+0x50>)
 800585e:	4298      	cmp	r0, r3
 8005860:	bfb8      	it	lt
 8005862:	4618      	movlt	r0, r3
 8005864:	4288      	cmp	r0, r1
 8005866:	bfa8      	it	ge
 8005868:	4608      	movge	r0, r1
 800586a:	b200      	sxth	r0, r0
 800586c:	4770      	bx	lr
		return 1;
 800586e:	2201      	movs	r2, #1
 8005870:	e7e4      	b.n	800583c <_ZN8FFBWheel13updateEndstopEv+0x14>
		return 0;
 8005872:	2000      	movs	r0, #0
}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	ffff8001 	.word	0xffff8001

0800587c <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>:
int32_t FFBWheel::getEncValue(EncoderLocal* enc,uint16_t degrees){
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	4615      	mov	r5, r2
	if(enc == nullptr){
 8005880:	460c      	mov	r4, r1
 8005882:	b321      	cbz	r1, 80058ce <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x52>
	float angle = 360.0*((float)enc->getPos()/(float)enc->getPosCpr());
 8005884:	4608      	mov	r0, r1
 8005886:	f7ff fecd 	bl	8005624 <_ZN12EncoderLocal6getPosEv>
 800588a:	4607      	mov	r7, r0
 800588c:	4620      	mov	r0, r4
 800588e:	f7ff fefe 	bl	800568e <_ZN12EncoderLocal9getPosCprEv>
 8005892:	4606      	mov	r6, r0
 8005894:	4638      	mov	r0, r7
 8005896:	f7fb fa01 	bl	8000c9c <__aeabi_i2f>
 800589a:	4604      	mov	r4, r0
 800589c:	4630      	mov	r0, r6
 800589e:	f7fb f9f9 	bl	8000c94 <__aeabi_ui2f>
 80058a2:	4601      	mov	r1, r0
 80058a4:	4620      	mov	r0, r4
 80058a6:	f7fb fb01 	bl	8000eac <__aeabi_fdiv>
 80058aa:	490a      	ldr	r1, [pc, #40]	; (80058d4 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x58>)
 80058ac:	f7fb fa4a 	bl	8000d44 <__aeabi_fmul>
 80058b0:	4604      	mov	r4, r0
	int32_t val = (0xffff / (float)degrees) * angle;
 80058b2:	4628      	mov	r0, r5
 80058b4:	f7fb f9ee 	bl	8000c94 <__aeabi_ui2f>
 80058b8:	4601      	mov	r1, r0
 80058ba:	4807      	ldr	r0, [pc, #28]	; (80058d8 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x5c>)
 80058bc:	f7fb faf6 	bl	8000eac <__aeabi_fdiv>
 80058c0:	4601      	mov	r1, r0
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7fb fa3e 	bl	8000d44 <__aeabi_fmul>
 80058c8:	f7fb fc18 	bl	80010fc <__aeabi_f2iz>
}
 80058cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0x7fff; // Return center if no encoder present
 80058ce:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80058d2:	e7fb      	b.n	80058cc <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x50>
 80058d4:	43b40000 	.word	0x43b40000
 80058d8:	477fff00 	.word	0x477fff00

080058dc <_ZN8FFBWheel11send_reportEv>:
	reportHID.buttons = 0;
 80058dc:	2300      	movs	r3, #0
void FFBWheel::send_report(){
 80058de:	b513      	push	{r0, r1, r4, lr}
 80058e0:	4604      	mov	r4, r0
	uint32_t buf = 0;
 80058e2:	a902      	add	r1, sp, #8
	reportHID.buttons = 0;
 80058e4:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
 80058e8:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
 80058ec:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
 80058f0:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
	uint32_t buf = 0;
 80058f4:	f841 3d04 	str.w	r3, [r1, #-4]!
	btns->readButtons(&buf);
 80058f8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80058fa:	f001 feab 	bl	8007654 <_ZN12LocalButtons11readButtonsEPm>
	reportHID.buttons = buf;
 80058fe:	9b01      	ldr	r3, [sp, #4]
	reportHID.X = clip(lastScaledEnc,-0x7fff,0x7fff);
 8005900:	4a30      	ldr	r2, [pc, #192]	; (80059c4 <_ZN8FFBWheel11send_reportEv+0xe8>)
	reportHID.buttons = buf;
 8005902:	f8c4 3089 	str.w	r3, [r4, #137]	; 0x89
	reportHID.X = clip(lastScaledEnc,-0x7fff,0x7fff);
 8005906:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800590a:	4293      	cmp	r3, r2
 800590c:	bfb8      	it	lt
 800590e:	4613      	movlt	r3, r2
 8005910:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005914:	4293      	cmp	r3, r2
 8005916:	bfa8      	it	ge
 8005918:	4613      	movge	r3, r2
 800591a:	f8a4 308d 	strh.w	r3, [r4, #141]	; 0x8d
	uint16_t axes = this->conf.axes;
 800591e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
	reportHID.Y 	=  	(axes & 0x01 << 1) ? ((adc_buf[0] & 0xFFF) << 4)	-0x7fff : 0;
 8005922:	f013 0202 	ands.w	r2, r3, #2
 8005926:	d006      	beq.n	8005936 <_ZN8FFBWheel11send_reportEv+0x5a>
 8005928:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
 800592c:	0112      	lsls	r2, r2, #4
 800592e:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 8005932:	3a7f      	subs	r2, #127	; 0x7f
 8005934:	b212      	sxth	r2, r2
 8005936:	f8a4 208f 	strh.w	r2, [r4, #143]	; 0x8f
	reportHID.Z		=  	(axes & 0x01 << 2) ? ((adc_buf[1] & 0xFFF) << 4)	-0x7fff : 0;
 800593a:	f013 0204 	ands.w	r2, r3, #4
 800593e:	d006      	beq.n	800594e <_ZN8FFBWheel11send_reportEv+0x72>
 8005940:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
 8005944:	0112      	lsls	r2, r2, #4
 8005946:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 800594a:	3a7f      	subs	r2, #127	; 0x7f
 800594c:	b212      	sxth	r2, r2
 800594e:	f8a4 2091 	strh.w	r2, [r4, #145]	; 0x91
	reportHID.RX	=  	(axes & 0x01 << 3) ? ((adc_buf[2] & 0xFFF) << 4)	-0x7fff : 0;
 8005952:	f013 0208 	ands.w	r2, r3, #8
 8005956:	d006      	beq.n	8005966 <_ZN8FFBWheel11send_reportEv+0x8a>
 8005958:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800595c:	0112      	lsls	r2, r2, #4
 800595e:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 8005962:	3a7f      	subs	r2, #127	; 0x7f
 8005964:	b212      	sxth	r2, r2
 8005966:	f8a4 2093 	strh.w	r2, [r4, #147]	; 0x93
	reportHID.RY	=	(axes & 0x01 << 4) ? ((adc_buf[3] & 0xFFF) << 4)	-0x7fff : 0;
 800596a:	f013 0210 	ands.w	r2, r3, #16
 800596e:	d006      	beq.n	800597e <_ZN8FFBWheel11send_reportEv+0xa2>
 8005970:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 8005974:	0112      	lsls	r2, r2, #4
 8005976:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 800597a:	3a7f      	subs	r2, #127	; 0x7f
 800597c:	b212      	sxth	r2, r2
 800597e:	f8a4 2095 	strh.w	r2, [r4, #149]	; 0x95
	reportHID.RZ	= 	(axes & 0x01 << 5) ? ((adc_buf[4] & 0xFFF) << 4)	-0x7fff : 0;
 8005982:	f013 0220 	ands.w	r2, r3, #32
 8005986:	d006      	beq.n	8005996 <_ZN8FFBWheel11send_reportEv+0xba>
 8005988:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 800598c:	0112      	lsls	r2, r2, #4
 800598e:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 8005992:	3a7f      	subs	r2, #127	; 0x7f
 8005994:	b212      	sxth	r2, r2
	reportHID.Slider= 	(axes & 0x01 << 6) ? ((adc_buf[5] & 0xFFF) << 4)	-0x7fff : 0;
 8005996:	f013 0340 	ands.w	r3, r3, #64	; 0x40
	reportHID.RZ	= 	(axes & 0x01 << 5) ? ((adc_buf[4] & 0xFFF) << 4)	-0x7fff : 0;
 800599a:	f8a4 2097 	strh.w	r2, [r4, #151]	; 0x97
	reportHID.Slider= 	(axes & 0x01 << 6) ? ((adc_buf[5] & 0xFFF) << 4)	-0x7fff : 0;
 800599e:	d006      	beq.n	80059ae <_ZN8FFBWheel11send_reportEv+0xd2>
 80059a0:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80059aa:	3b7f      	subs	r3, #127	; 0x7f
 80059ac:	b21b      	sxth	r3, r3
 80059ae:	f8a4 3099 	strh.w	r3, [r4, #153]	; 0x99
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reinterpret_cast<uint8_t*>(&reportHID), sizeof(reportHID_t));
 80059b2:	2213      	movs	r2, #19
 80059b4:	f104 0188 	add.w	r1, r4, #136	; 0x88
 80059b8:	4803      	ldr	r0, [pc, #12]	; (80059c8 <_ZN8FFBWheel11send_reportEv+0xec>)
 80059ba:	f003 f9a3 	bl	8008d04 <USBD_CUSTOM_HID_SendReport>
}
 80059be:	b002      	add	sp, #8
 80059c0:	bd10      	pop	{r4, pc}
 80059c2:	bf00      	nop
 80059c4:	ffff8001 	.word	0xffff8001
 80059c8:	20000914 	.word	0x20000914

080059cc <_ZN8FFBWheel6updateEv>:
void FFBWheel::update(){
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(drv == nullptr || enc == nullptr){
 80059ce:	6f03      	ldr	r3, [r0, #112]	; 0x70
void FFBWheel::update(){
 80059d0:	4604      	mov	r4, r0
	if(drv == nullptr || enc == nullptr){
 80059d2:	b10b      	cbz	r3, 80059d8 <_ZN8FFBWheel6updateEv+0xc>
 80059d4:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80059d6:	b919      	cbnz	r1, 80059e0 <_ZN8FFBWheel6updateEv+0x14>
}
 80059d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		pulseSysLed();
 80059dc:	f002 b82a 	b.w	8007a34 <_Z11pulseSysLedv>
	if(usb_update_flag || update_flag){
 80059e0:	7b43      	ldrb	r3, [r0, #13]
	int16_t lasttorque = endstopTorque;
 80059e2:	6d06      	ldr	r6, [r0, #80]	; 0x50
	if(usb_update_flag || update_flag){
 80059e4:	b90b      	cbnz	r3, 80059ea <_ZN8FFBWheel6updateEv+0x1e>
 80059e6:	7b83      	ldrb	r3, [r0, #14]
 80059e8:	b1c3      	cbz	r3, 8005a1c <_ZN8FFBWheel6updateEv+0x50>
		torque = 0;
 80059ea:	2500      	movs	r5, #0
		scaledEnc = getEncValue(enc, conf.degreesOfRotation);
 80059ec:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
		torque = 0;
 80059f0:	64e5      	str	r5, [r4, #76]	; 0x4c
		scaledEnc = getEncValue(enc, conf.degreesOfRotation);
 80059f2:	4620      	mov	r0, r4
 80059f4:	f7ff ff42 	bl	800587c <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 80059fe:	bfb8      	it	lt
 8005a00:	4240      	neglt	r0, r0
		if(abs(scaledEnc) > 0xffff){
 8005a02:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		update_flag = false;
 8005a06:	73a5      	strb	r5, [r4, #14]
		if(abs(scaledEnc) > 0xffff){
 8005a08:	db04      	blt.n	8005a14 <_ZN8FFBWheel6updateEv+0x48>
			drv->stop();
 8005a0a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005a0c:	f001 feb3 	bl	8007776 <_ZN12MotorBTS79604stopEv>
			pulseSysLed();
 8005a10:	f002 f810 	bl	8007a34 <_Z11pulseSysLedv>
		endstopTorque = updateEndstop();
 8005a14:	4620      	mov	r0, r4
 8005a16:	f7ff ff07 	bl	8005828 <_ZN8FFBWheel13updateEndstopEv>
 8005a1a:	6520      	str	r0, [r4, #80]	; 0x50
	if(usb_update_flag){
 8005a1c:	7b65      	ldrb	r5, [r4, #13]
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	d036      	beq.n	8005a90 <_ZN8FFBWheel6updateEv+0xc4>
		speed = scaledEnc - lastScaledEnc;
 8005a22:	e9d4 3127 	ldrd	r3, r1, [r4, #156]	; 0x9c
 8005a26:	1acb      	subs	r3, r1, r3
 8005a28:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		usb_update_flag = false;
 8005a2c:	2300      	movs	r3, #0
		lastScaledEnc = scaledEnc;
 8005a2e:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
		usb_update_flag = false;
 8005a32:	7363      	strb	r3, [r4, #13]
		torque = ffb->calculateEffects(scaledEnc,1);
 8005a34:	2201      	movs	r2, #1
 8005a36:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005a38:	f001 fcf6 	bl	8007428 <_ZN6HidFFB16calculateEffectsElh>
		if(abs(torque) >= 0x7fff){
 8005a3c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8005a40:	2800      	cmp	r0, #0
		torque = ffb->calculateEffects(scaledEnc,1);
 8005a42:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005a44:	bfb8      	it	lt
 8005a46:	4240      	neglt	r0, r0
		if(abs(torque) >= 0x7fff){
 8005a48:	4298      	cmp	r0, r3
 8005a4a:	dd01      	ble.n	8005a50 <_ZN8FFBWheel6updateEv+0x84>
			pulseSysLed();
 8005a4c:	f001 fff2 	bl	8007a34 <_Z11pulseSysLedv>
		if(endstopTorque == 0 || (endstopTorque > 0 && torque > 0) || (endstopTorque < 0 && torque < 0))
 8005a50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <_ZN8FFBWheel6updateEv+0x9a>
 8005a56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005a58:	dd03      	ble.n	8005a62 <_ZN8FFBWheel6updateEv+0x96>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	dc03      	bgt.n	8005a66 <_ZN8FFBWheel6updateEv+0x9a>
	bool updateTorque = false;
 8005a5e:	2500      	movs	r5, #0
 8005a60:	e013      	b.n	8005a8a <_ZN8FFBWheel6updateEv+0xbe>
		if(endstopTorque == 0 || (endstopTorque > 0 && torque > 0) || (endstopTorque < 0 && torque < 0))
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	dafb      	bge.n	8005a5e <_ZN8FFBWheel6updateEv+0x92>
			torque *= /*0.8**/((float)this->conf.power / (float)0x7fff); // Scale for power
 8005a66:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8005a6a:	f7fb f913 	bl	8000c94 <__aeabi_ui2f>
 8005a6e:	4919      	ldr	r1, [pc, #100]	; (8005ad4 <_ZN8FFBWheel6updateEv+0x108>)
 8005a70:	f7fb fa1c 	bl	8000eac <__aeabi_fdiv>
 8005a74:	4607      	mov	r7, r0
 8005a76:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005a78:	f7fb f910 	bl	8000c9c <__aeabi_i2f>
 8005a7c:	4601      	mov	r1, r0
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f7fb f960 	bl	8000d44 <__aeabi_fmul>
 8005a84:	f7fb fb3a 	bl	80010fc <__aeabi_f2iz>
 8005a88:	64e0      	str	r0, [r4, #76]	; 0x4c
		this->send_report();
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f7ff ff26 	bl	80058dc <_ZN8FFBWheel11send_reportEv>
	if(endstopTorque!=lasttorque || updateTorque){
 8005a90:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005a92:	b236      	sxth	r6, r6
 8005a94:	42b2      	cmp	r2, r6
 8005a96:	d100      	bne.n	8005a9a <_ZN8FFBWheel6updateEv+0xce>
 8005a98:	b1d5      	cbz	r5, 8005ad0 <_ZN8FFBWheel6updateEv+0x104>
		torque = torque+endstopTorque;
 8005a9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		torque = clip<int32_t,int16_t>(torque, -this->conf.power, this->conf.power);
 8005a9c:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
		torque = torque+endstopTorque;
 8005aa0:	441a      	add	r2, r3
}

template<class T,class C>
T clip(T v, C l, C h)
{
  return { v > h ? h : v < l ? l : v };
 8005aa2:	b20b      	sxth	r3, r1
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	dc04      	bgt.n	8005ab2 <_ZN8FFBWheel6updateEv+0xe6>
		torque = clip<int32_t,int16_t>(torque, -this->conf.power, this->conf.power);
 8005aa8:	424b      	negs	r3, r1
 8005aaa:	b21b      	sxth	r3, r3
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bfb8      	it	lt
 8005ab0:	4613      	movlt	r3, r2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005ab6:	bfb8      	it	lt
 8005ab8:	425b      	neglt	r3, r3
		if(abs(torque) == conf.power){
 8005aba:	4299      	cmp	r1, r3
 8005abc:	d101      	bne.n	8005ac2 <_ZN8FFBWheel6updateEv+0xf6>
			pulseSysLed();
 8005abe:	f001 ffb9 	bl	8007a34 <_Z11pulseSysLedv>
		drv->turn(torque);
 8005ac2:	f9b4 104c 	ldrsh.w	r1, [r4, #76]	; 0x4c
 8005ac6:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8005ac8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		drv->turn(torque);
 8005acc:	f001 be1a 	b.w	8007704 <_ZN12MotorBTS79604turnEs>
}
 8005ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	46fffe00 	.word	0x46fffe00

08005ad8 <_ZN8FFBWheel6cdcRcvEPcPm>:

void FFBWheel::cdcRcv(char* Buf, uint32_t *Len){
 8005ad8:	b530      	push	{r4, r5, lr}
	if(this->parser.add(Buf, Len)){
 8005ada:	f100 0510 	add.w	r5, r0, #16
void FFBWheel::cdcRcv(char* Buf, uint32_t *Len){
 8005ade:	b085      	sub	sp, #20
 8005ae0:	4604      	mov	r4, r0
	if(this->parser.add(Buf, Len)){
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f7ff fa2e 	bl	8004f44 <_ZN9CmdParser3addEPcPm>
 8005ae8:	b1a0      	cbz	r0, 8005b14 <_ZN8FFBWheel6cdcRcvEPcPm+0x3c>
		executeCommands(this->parser.parse());
 8005aea:	4629      	mov	r1, r5
 8005aec:	a801      	add	r0, sp, #4
 8005aee:	f7ff fb39 	bl	8005164 <_ZN9CmdParser5parseEv>
 8005af2:	4620      	mov	r0, r4
 8005af4:	a901      	add	r1, sp, #4
 8005af6:	f000 fad1 	bl	800609c <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005afa:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 8005afe:	42a5      	cmp	r5, r4
 8005b00:	d004      	beq.n	8005b0c <_ZN8FFBWheel6cdcRcvEPcPm+0x34>
      { _M_dispose(); }
 8005b02:	4620      	mov	r0, r4
 8005b04:	f003 fa20 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005b08:	3424      	adds	r4, #36	; 0x24
 8005b0a:	e7f8      	b.n	8005afe <_ZN8FFBWheel6cdcRcvEPcPm+0x26>
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005b0c:	9801      	ldr	r0, [sp, #4]
	if (__p)
 8005b0e:	b108      	cbz	r0, 8005b14 <_ZN8FFBWheel6cdcRcvEPcPm+0x3c>
	::operator delete(__p);
 8005b10:	f003 f9c6 	bl	8008ea0 <_ZdlPv>
	}
}
 8005b14:	b005      	add	sp, #20
 8005b16:	bd30      	pop	{r4, r5, pc}

08005b18 <_ZN8FFBWheel7usbInitEv>:

void FFBWheel::usbInit(){
	usbInit_HID_Wheel();
 8005b18:	f000 bdb0 	b.w	800667c <_Z17usbInit_HID_Wheelv>

08005b1c <_ZN8FFBWheel3SOFEv>:
}
void FFBWheel::SOF(){
	usb_update_flag = true;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	7343      	strb	r3, [r0, #13]
	// USB clocked update callback
}
 8005b20:	4770      	bx	lr
	...

08005b24 <_ZN8FFBWheel10decodeConfEv>:

FFBWheelConfig FFBWheel::decodeConf(){
	uint32_t buf[7] = {0};
 8005b24:	221c      	movs	r2, #28
FFBWheelConfig FFBWheel::decodeConf(){
 8005b26:	b570      	push	{r4, r5, r6, lr}
 8005b28:	4604      	mov	r4, r0
 8005b2a:	b08e      	sub	sp, #56	; 0x38
	uint32_t buf[7] = {0};
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	eb0d 0002 	add.w	r0, sp, r2
 8005b32:	f006 fb44 	bl	800c1be <memset>
	FFBWheelConfig conf;
 8005b36:	4622      	mov	r2, r4
 8005b38:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <_ZN8FFBWheel10decodeConfEv+0xf8>)
 8005b3a:	f103 0118 	add.w	r1, r3, #24
 8005b3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005b42:	428b      	cmp	r3, r1
 8005b44:	f842 0b04 	str.w	r0, [r2], #4
 8005b48:	d1f9      	bne.n	8005b3e <_ZN8FFBWheel10decodeConfEv+0x1a>
 8005b4a:	881b      	ldrh	r3, [r3, #0]

	EE_Reads(0x00, 7, buf);
 8005b4c:	2107      	movs	r1, #7
	FFBWheelConfig conf;
 8005b4e:	8013      	strh	r3, [r2, #0]
	EE_Reads(0x00, 7, buf);
 8005b50:	2000      	movs	r0, #0
 8005b52:	aa07      	add	r2, sp, #28
 8005b54:	f7fb fb46 	bl	80011e4 <EE_Reads>
	conf.check = buf[0] & 0xff;
 8005b58:	9b07      	ldr	r3, [sp, #28]
 8005b5a:	b2da      	uxtb	r2, r3
	if(conf.check != 0x57)
 8005b5c:	2a57      	cmp	r2, #87	; 0x57
	conf.check = buf[0] & 0xff;
 8005b5e:	7022      	strb	r2, [r4, #0]
	if(conf.check != 0x57)
 8005b60:	d031      	beq.n	8005bc6 <_ZN8FFBWheel10decodeConfEv+0xa2>
	{
		conf = FFBWheelConfig();
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8cd 3002 	str.w	r3, [sp, #2]
 8005b68:	f8ad 300a 	strh.w	r3, [sp, #10]
 8005b6c:	f240 7357 	movw	r3, #1879	; 0x757
 8005b70:	f8ad 3000 	strh.w	r3, [sp]
 8005b74:	2301      	movs	r3, #1
 8005b76:	f88d 3002 	strb.w	r3, [sp, #2]
 8005b7a:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <_ZN8FFBWheel10decodeConfEv+0xfc>)
 8005b7c:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <_ZN8FFBWheel10decodeConfEv+0x100>)
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b84:	f8ad 3008 	strh.w	r3, [sp, #8]
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f88d 300a 	strb.w	r3, [sp, #10]
 8005b8e:	f04f 3364 	mov.w	r3, #1684300900	; 0x64646464
 8005b92:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8005b96:	9305      	str	r3, [sp, #20]
 8005b98:	f246 4364 	movw	r3, #25700	; 0x6464
 8005b9c:	466d      	mov	r5, sp
 8005b9e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005ba2:	4623      	mov	r3, r4
 8005ba4:	ae06      	add	r6, sp, #24
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	ca03      	ldmia	r2!, {r0, r1}
 8005baa:	42b2      	cmp	r2, r6
 8005bac:	6018      	str	r0, [r3, #0]
 8005bae:	6059      	str	r1, [r3, #4]
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	f103 0308 	add.w	r3, r3, #8
 8005bb6:	d1f6      	bne.n	8005ba6 <_ZN8FFBWheel10decodeConfEv+0x82>
 8005bb8:	8812      	ldrh	r2, [r2, #0]
 8005bba:	801a      	strh	r2, [r3, #0]
		conf.check = 0x00;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	7023      	strb	r3, [r4, #0]

	conf.frictionGain = buf[6] & 0xff;
	conf.totalGain = (buf[6] >> 8) & 0xff;

	return conf;
}
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	b00e      	add	sp, #56	; 0x38
 8005bc4:	bd70      	pop	{r4, r5, r6, pc}
	conf.axes = (buf[0] >> 8)& 0xff;
 8005bc6:	0a1a      	lsrs	r2, r3, #8
 8005bc8:	7062      	strb	r2, [r4, #1]
	conf.I2CButtons = (buf[0] >> 16) & 0xff;
 8005bca:	0c1a      	lsrs	r2, r3, #16
	conf.nLocalButtons= (buf[0] >> 24) & 0xff;
 8005bcc:	0e1b      	lsrs	r3, r3, #24
 8005bce:	70e3      	strb	r3, [r4, #3]
	conf.degreesOfRotation= buf[1] & 0xffff;
 8005bd0:	9b08      	ldr	r3, [sp, #32]
	conf.I2CButtons = (buf[0] >> 16) & 0xff;
 8005bd2:	70a2      	strb	r2, [r4, #2]
	conf.degreesOfRotation= buf[1] & 0xffff;
 8005bd4:	80a3      	strh	r3, [r4, #4]
	conf.power= (buf[1] >> 16) & 0xffff;
 8005bd6:	0c1b      	lsrs	r3, r3, #16
 8005bd8:	80e3      	strh	r3, [r4, #6]
	conf.endstop_gain= buf[2] & 0xffff;
 8005bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bdc:	81a3      	strh	r3, [r4, #12]
	conf.encoderPPR= (buf[2] >> 16) & 0xffff;
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	8123      	strh	r3, [r4, #8]
	conf.maxAdcCount = buf[3] & 0xff;
 8005be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	conf.inverted = (buf[3] >> 8) & 0xff;
 8005be4:	0a1a      	lsrs	r2, r3, #8
	conf.maxAdcCount = buf[3] & 0xff;
 8005be6:	72a3      	strb	r3, [r4, #10]
	conf.inverted = (buf[3] >> 8) & 0xff;
 8005be8:	72e2      	strb	r2, [r4, #11]
	conf.constantGain = (buf[3] >> 16) & 0xff;
 8005bea:	0c1a      	lsrs	r2, r3, #16
	conf.rampGain = (buf[3] >> 24) & 0xff;
 8005bec:	0e1b      	lsrs	r3, r3, #24
 8005bee:	73e3      	strb	r3, [r4, #15]
	conf.squareGain = buf[4] & 0xff;
 8005bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	conf.constantGain = (buf[3] >> 16) & 0xff;
 8005bf2:	73a2      	strb	r2, [r4, #14]
	conf.sinGain = (buf[4] >> 8) & 0xff;
 8005bf4:	0a1a      	lsrs	r2, r3, #8
	conf.squareGain = buf[4] & 0xff;
 8005bf6:	7423      	strb	r3, [r4, #16]
	conf.sinGain = (buf[4] >> 8) & 0xff;
 8005bf8:	7462      	strb	r2, [r4, #17]
	conf.triangleGain = (buf[4] >> 16) & 0xff;
 8005bfa:	0c1a      	lsrs	r2, r3, #16
	conf.sawToothDownGain = (buf[4] >> 24) & 0xff;
 8005bfc:	0e1b      	lsrs	r3, r3, #24
 8005bfe:	74e3      	strb	r3, [r4, #19]
	conf.sawToothUpGain = buf[5] & 0xff;
 8005c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	conf.triangleGain = (buf[4] >> 16) & 0xff;
 8005c02:	74a2      	strb	r2, [r4, #18]
	conf.springGain = (buf[5] >> 8) & 0xff;
 8005c04:	0a1a      	lsrs	r2, r3, #8
	conf.sawToothUpGain = buf[5] & 0xff;
 8005c06:	7523      	strb	r3, [r4, #20]
	conf.springGain = (buf[5] >> 8) & 0xff;
 8005c08:	7562      	strb	r2, [r4, #21]
	conf.damperGain = (buf[5] >> 16) & 0xff;
 8005c0a:	0c1a      	lsrs	r2, r3, #16
	conf.inertiaGain = (buf[5] >> 24) & 0xff;
 8005c0c:	0e1b      	lsrs	r3, r3, #24
 8005c0e:	75e3      	strb	r3, [r4, #23]
	conf.frictionGain = buf[6] & 0xff;
 8005c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	conf.damperGain = (buf[5] >> 16) & 0xff;
 8005c12:	75a2      	strb	r2, [r4, #22]
	conf.frictionGain = buf[6] & 0xff;
 8005c14:	7623      	strb	r3, [r4, #24]
	conf.totalGain = (buf[6] >> 8) & 0xff;
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	7663      	strb	r3, [r4, #25]
	return conf;
 8005c1a:	e7d1      	b.n	8005bc0 <_ZN8FFBWheel10decodeConfEv+0x9c>
 8005c1c:	0800d520 	.word	0x0800d520
 8005c20:	07d00384 	.word	0x07d00384
 8005c24:	64640014 	.word	0x64640014

08005c28 <_ZN8FFBWheel12restoreFlashEv>:
void FFBWheel::restoreFlash(){
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	4604      	mov	r4, r0
	conf = decodeConf();
 8005c2e:	4668      	mov	r0, sp
 8005c30:	f7ff ff78 	bl	8005b24 <_ZN8FFBWheel10decodeConfEv>
 8005c34:	466b      	mov	r3, sp
 8005c36:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8005c3a:	ae06      	add	r6, sp, #24
 8005c3c:	4615      	mov	r5, r2
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	3308      	adds	r3, #8
 8005c44:	c503      	stmia	r5!, {r0, r1}
 8005c46:	42b3      	cmp	r3, r6
 8005c48:	462a      	mov	r2, r5
 8005c4a:	d1f7      	bne.n	8005c3c <_ZN8FFBWheel12restoreFlashEv+0x14>
 8005c4c:	881b      	ldrh	r3, [r3, #0]
	drv = new MotorBTS7960();
 8005c4e:	2018      	movs	r0, #24
	conf = decodeConf();
 8005c50:	802b      	strh	r3, [r5, #0]
	conf.check= 0x57;
 8005c52:	2357      	movs	r3, #87	; 0x57
 8005c54:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	drv = new MotorBTS7960();
 8005c58:	f003 f908 	bl	8008e6c <_Znwj>
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	f001 fd69 	bl	8007734 <_ZN12MotorBTS7960C1Ev>
 8005c62:	6725      	str	r5, [r4, #112]	; 0x70
	enc = new EncoderLocal();
 8005c64:	201c      	movs	r0, #28
 8005c66:	f003 f901 	bl	8008e6c <_Znwj>
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	f7ff fcb6 	bl	80055dc <_ZN12EncoderLocalC1Ev>
 8005c70:	6765      	str	r5, [r4, #116]	; 0x74
	btns = new LocalButtons();
 8005c72:	2018      	movs	r0, #24
 8005c74:	f003 f8fa 	bl	8008e6c <_Znwj>
 8005c78:	4605      	mov	r5, r0
 8005c7a:	f001 fcc5 	bl	8007608 <_ZN12LocalButtonsC1Ev>
	drv->start();
 8005c7e:	6f20      	ldr	r0, [r4, #112]	; 0x70
	btns = new LocalButtons();
 8005c80:	67a5      	str	r5, [r4, #120]	; 0x78
	drv->start();
 8005c82:	f001 fd75 	bl	8007770 <_ZN12MotorBTS79605startEv>
	enc->setPpr(conf.encoderPPR);
 8005c86:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005c8a:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8005c8c:	b008      	add	sp, #32
 8005c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	enc->setPpr(conf.encoderPPR);
 8005c92:	f7ff bcfe 	b.w	8005692 <_ZN12EncoderLocal6setPprEm>
	...

08005c98 <_ZN8FFBWheelC1Ev>:
FFBWheel::FFBWheel() {
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	2500      	movs	r5, #0
 8005c9e:	f7ff f8a1 	bl	8004de4 <_ZN10AdcHandlerC1Ev>
 8005ca2:	1d20      	adds	r0, r4, #4
 8005ca4:	f001 fdea 	bl	800787c <_ZN12TimerHandlerC1Ev>
 8005ca8:	f104 0008 	add.w	r0, r4, #8
 8005cac:	f7ff fc60 	bl	8005570 <_ZN14CommandHandlerC1Ev>
 8005cb0:	4b37      	ldr	r3, [pc, #220]	; (8005d90 <_ZN8FFBWheelC1Ev+0xf8>)
 8005cb2:	7365      	strb	r5, [r4, #13]
 8005cb4:	f103 0208 	add.w	r2, r3, #8
 8005cb8:	6022      	str	r2, [r4, #0]
 8005cba:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8005cbe:	3338      	adds	r3, #56	; 0x38
 8005cc0:	6062      	str	r2, [r4, #4]
 8005cc2:	60a3      	str	r3, [r4, #8]
 8005cc4:	73a5      	strb	r5, [r4, #14]
 8005cc6:	73e5      	strb	r5, [r4, #15]
 8005cc8:	f104 0010 	add.w	r0, r4, #16
 8005ccc:	f7ff f912 	bl	8004ef4 <_ZN9CmdParserC1Ev>
struct FFBWheelConfig{
 8005cd0:	4a30      	ldr	r2, [pc, #192]	; (8005d94 <_ZN8FFBWheelC1Ev+0xfc>)
 8005cd2:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <_ZN8FFBWheelC1Ev+0x100>)
 8005cd4:	4931      	ldr	r1, [pc, #196]	; (8005d9c <_ZN8FFBWheelC1Ev+0x104>)
 8005cd6:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
 8005cda:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <_ZN8FFBWheelC1Ev+0x108>)
#define HID_ENABLE_ACTUATORS_MASK 0xFD
#define HID_EFFECT_PLAYING 0x10

// Only include these for cpp
#ifdef __cplusplus
struct  __attribute__((__packed__)) reportHID_t {
 8005cdc:	2601      	movs	r6, #1
 8005cde:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
 8005ce2:	f04f 3364 	mov.w	r3, #1684300900	; 0x64646464
 8005ce6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8005cea:	f246 4364 	movw	r3, #25700	; 0x6464
 8005cee:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8005cf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005cf6:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
 8005cfa:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 8005cfe:	67a5      	str	r5, [r4, #120]	; 0x78
 8005d00:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 8005d04:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
 8005d08:	f884 508b 	strb.w	r5, [r4, #139]	; 0x8b
 8005d0c:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c
 8005d10:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
 8005d14:	f884 508e 	strb.w	r5, [r4, #142]	; 0x8e
 8005d18:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
 8005d1c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
 8005d20:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
 8005d24:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
 8005d28:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
 8005d2c:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
 8005d30:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
 8005d34:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
 8005d38:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
 8005d3c:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8005d40:	f884 5099 	strb.w	r5, [r4, #153]	; 0x99
 8005d44:	f884 509a 	strb.w	r5, [r4, #154]	; 0x9a
 8005d48:	f884 6088 	strb.w	r6, [r4, #136]	; 0x88
 8005d4c:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8005d50:	e9c4 352b 	strd	r3, r5, [r4, #172]	; 0xac
 8005d54:	f247 5330 	movw	r3, #30000	; 0x7530
 8005d58:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 8005d5c:	e9c4 352d 	strd	r3, r5, [r4, #180]	; 0xb4
 8005d60:	f884 60a8 	strb.w	r6, [r4, #168]	; 0xa8
	this->ffb = new HidFFB();
 8005d64:	f44f 60e4 	mov.w	r0, #1824	; 0x720
 8005d68:	f003 f880 	bl	8008e6c <_Znwj>
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	f001 f8b9 	bl	8006ee4 <_ZN6HidFFBC1Ev>
	this->timer_update->Instance->ARR = 250;
 8005d72:	22fa      	movs	r2, #250	; 0xfa
	this->timer_update = &htim3; // Timer setup with prescaler of sysclock
 8005d74:	480b      	ldr	r0, [pc, #44]	; (8005da4 <_ZN8FFBWheelC1Ev+0x10c>)
	this->ffb = new HidFFB();
 8005d76:	6465      	str	r5, [r4, #68]	; 0x44
	this->timer_update->Instance->ARR = 250;
 8005d78:	6803      	ldr	r3, [r0, #0]
	this->timer_update = &htim3; // Timer setup with prescaler of sysclock
 8005d7a:	64a0      	str	r0, [r4, #72]	; 0x48
	this->timer_update->Instance->ARR = 250;
 8005d7c:	62da      	str	r2, [r3, #44]	; 0x2c
	this->timer_update->Instance->CR1 = 1;
 8005d7e:	601e      	str	r6, [r3, #0]
	HAL_TIM_Base_Start_IT(this->timer_update);
 8005d80:	f7fd ffe8 	bl	8003d54 <HAL_TIM_Base_Start_IT>
	restoreFlash(); // Load parameters
 8005d84:	4620      	mov	r0, r4
 8005d86:	f7ff ff4f 	bl	8005c28 <_ZN8FFBWheel12restoreFlashEv>
}
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	bf00      	nop
 8005d90:	0800d658 	.word	0x0800d658
 8005d94:	00010757 	.word	0x00010757
 8005d98:	07d00384 	.word	0x07d00384
 8005d9c:	000807d0 	.word	0x000807d0
 8005da0:	64640014 	.word	0x64640014
 8005da4:	200015e4 	.word	0x200015e4

08005da8 <_ZN8FFBWheel9saveFlashEv>:
void FFBWheel::saveFlash(){
 8005da8:	b510      	push	{r4, lr}
 8005daa:	4604      	mov	r4, r0
 8005dac:	b08e      	sub	sp, #56	; 0x38
	FFBWheelConfig savedconf = decodeConf();
 8005dae:	4668      	mov	r0, sp
 8005db0:	f7ff feb8 	bl	8005b24 <_ZN8FFBWheel10decodeConfEv>
		if(	check == conf.check &&
 8005db4:	f8bd 2000 	ldrh.w	r2, [sp]
 8005db8:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d147      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			I2CButtons == conf.I2CButtons &&
 8005dc0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005dc4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d141      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			nLocalButtons == conf.nLocalButtons &&
 8005dcc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005dd0:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d13b      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			degreesOfRotation == conf.degreesOfRotation &&
 8005dd8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005ddc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d135      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			power == conf.power &&
 8005de4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005de8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d12f      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			endstop_gain == conf.endstop_gain &&
 8005df0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005df4:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d129      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			maxAdcCount == conf.maxAdcCount &&
 8005dfc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8005e00:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d123      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			constantGain == conf.constantGain &&
 8005e08:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8005e0c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d11d      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			squareGain == conf.squareGain &&
 8005e14:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8005e18:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d117      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			triangleGain == conf.triangleGain &&
 8005e20:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8005e24:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d111      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			sawToothUpGain == conf.sawToothUpGain &&
 8005e2c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005e30:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d10b      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			damperGain == conf.damperGain &&
 8005e38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005e3c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d105      	bne.n	8005e50 <_ZN8FFBWheel9saveFlashEv+0xa8>
			frictionGain == conf.frictionGain &&
 8005e44:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8005e48:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d027      	beq.n	8005ea0 <_ZN8FFBWheel9saveFlashEv+0xf8>
	buf[0] |= ((uint8_t)conf.nLocalButtons & 0xff) << 24;
 8005e50:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf[2] |= ((uint16_t)conf.encoderPPR & 0xffff) << 16;
 8005e52:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	buf[0] |= ((uint8_t)conf.nLocalButtons & 0xff) << 24;
 8005e56:	9307      	str	r3, [sp, #28]
	buf[1] |= ((uint16_t)conf.power & 0xffff) << 16;
 8005e58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e5a:	9308      	str	r3, [sp, #32]
	buf[2] = (uint16_t)conf.endstop_gain & 0xffff;
 8005e5c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	buf[2] |= ((uint16_t)conf.encoderPPR & 0xffff) << 16;
 8005e60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e64:	9309      	str	r3, [sp, #36]	; 0x24
	buf[3] |= ((uint8_t)conf.constantGain & 0xff) << 16;
 8005e66:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	buf[3] |= ((uint8_t)conf.inverted & 0xff) << 8;
 8005e6a:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
	buf[3] |= ((uint8_t)conf.constantGain & 0xff) << 16;
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf[3] = (uint8_t)conf.maxAdcCount & 0xff;
 8005e74:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	buf[3] |= ((uint8_t)conf.constantGain & 0xff) << 16;
 8005e78:	4313      	orrs	r3, r2
	buf[3] |= ((uint8_t)conf.rampGain & 0xff) << 24;
 8005e7a:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 8005e7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e82:	930a      	str	r3, [sp, #40]	; 0x28
	buf[4] |= ((uint8_t)conf.sawToothDownGain & 0xff) << 24;
 8005e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e86:	930b      	str	r3, [sp, #44]	; 0x2c
	buf[5] |= ((uint8_t)conf.inertiaGain & 0xff) << 24;
 8005e88:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005e8a:	930c      	str	r3, [sp, #48]	; 0x30
	buf[6] |= ((uint8_t)conf.totalGain & 0xff) << 8;
 8005e8c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 8005e90:	930d      	str	r3, [sp, #52]	; 0x34
	EE_Format();
 8005e92:	f7fb f989 	bl	80011a8 <EE_Format>
	EE_Writes(0x00, 7, buf);
 8005e96:	aa07      	add	r2, sp, #28
 8005e98:	2107      	movs	r1, #7
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	f7fb f9b6 	bl	800120c <EE_Writes>
}
 8005ea0:	b00e      	add	sp, #56	; 0x38
 8005ea2:	bd10      	pop	{r4, pc}

08005ea4 <_ZN8FFBWheelD1Ev>:
FFBWheel::~FFBWheel() {
 8005ea4:	4b11      	ldr	r3, [pc, #68]	; (8005eec <_ZN8FFBWheelD1Ev+0x48>)
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	f103 021c 	add.w	r2, r3, #28
 8005eac:	6003      	str	r3, [r0, #0]
 8005eae:	3330      	adds	r3, #48	; 0x30
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	6042      	str	r2, [r0, #4]
 8005eb4:	6083      	str	r3, [r0, #8]
	delete drv;
 8005eb6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8005eb8:	b110      	cbz	r0, 8005ec0 <_ZN8FFBWheelD1Ev+0x1c>
 8005eba:	6803      	ldr	r3, [r0, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	4798      	blx	r3
	delete enc;
 8005ec0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005ec2:	b110      	cbz	r0, 8005eca <_ZN8FFBWheelD1Ev+0x26>
 8005ec4:	6803      	ldr	r3, [r0, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4798      	blx	r3
FFBWheel::~FFBWheel() {
 8005eca:	f104 0010 	add.w	r0, r4, #16
 8005ece:	f7fe ffa3 	bl	8004e18 <_ZN9CmdParserD1Ev>
 8005ed2:	f104 0008 	add.w	r0, r4, #8
 8005ed6:	f7ff fac9 	bl	800546c <_ZN14CommandHandlerD1Ev>
 8005eda:	1d20      	adds	r0, r4, #4
 8005edc:	f001 fc54 	bl	8007788 <_ZN12TimerHandlerD1Ev>
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7fe ff05 	bl	8004cf0 <_ZN10AdcHandlerD1Ev>
}
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	bf00      	nop
 8005eec:	0800d660 	.word	0x0800d660

08005ef0 <_ZThn4_N8FFBWheelD1Ev>:
	virtual ~FFBWheel();
 8005ef0:	f1a0 0004 	sub.w	r0, r0, #4
 8005ef4:	f7ff bfd6 	b.w	8005ea4 <_ZN8FFBWheelD1Ev>

08005ef8 <_ZThn8_N8FFBWheelD1Ev>:
 8005ef8:	f1a0 0008 	sub.w	r0, r0, #8
 8005efc:	f7ff bfd2 	b.w	8005ea4 <_ZN8FFBWheelD1Ev>

08005f00 <_ZN8FFBWheelD0Ev>:
FFBWheel::~FFBWheel() {
 8005f00:	b510      	push	{r4, lr}
 8005f02:	4604      	mov	r4, r0
}
 8005f04:	f7ff ffce 	bl	8005ea4 <_ZN8FFBWheelD1Ev>
 8005f08:	4620      	mov	r0, r4
 8005f0a:	21bc      	movs	r1, #188	; 0xbc
 8005f0c:	f002 ffac 	bl	8008e68 <_ZdlPvj>
 8005f10:	4620      	mov	r0, r4
 8005f12:	bd10      	pop	{r4, pc}

08005f14 <_ZThn8_N8FFBWheelD0Ev>:
 8005f14:	f1a0 0008 	sub.w	r0, r0, #8
 8005f18:	f7ff bff2 	b.w	8005f00 <_ZN8FFBWheelD0Ev>

08005f1c <_ZThn4_N8FFBWheelD0Ev>:
 8005f1c:	f1a0 0004 	sub.w	r0, r0, #4
 8005f20:	f7ff bfee 	b.w	8005f00 <_ZN8FFBWheelD0Ev>

08005f24 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8005f24:	b408      	push	{r3}
 8005f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f28:	460e      	mov	r6, r1
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	4604      	mov	r4, r0
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8005f2e:	f101 000e 	add.w	r0, r1, #14
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8005f32:	b082      	sub	sp, #8
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8005f34:	f020 0007 	bic.w	r0, r0, #7
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8005f38:	af00      	add	r7, sp, #0
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8005f3a:	ebad 0d00 	sub.w	sp, sp, r0
 8005f3e:	466d      	mov	r5, sp
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8005f40:	f107 031c 	add.w	r3, r7, #28
 8005f44:	f853 2b04 	ldr.w	r2, [r3], #4
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);
 8005f48:	4628      	mov	r0, r5
      __builtin_va_start(__args, __fmt);
 8005f4a:	603b      	str	r3, [r7, #0]
      const int __len = __convf(__s, __n, __fmt, __args);
 8005f4c:	47b0      	blx	r6
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8005f4e:	f104 0308 	add.w	r3, r4, #8
	if (__dnew > size_type(_S_local_capacity))
 8005f52:	280f      	cmp	r0, #15

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8005f54:	eb05 0600 	add.w	r6, r5, r0
	: allocator_type(__a), _M_p(__dat) { }
 8005f58:	6023      	str	r3, [r4, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8005f5a:	6078      	str	r0, [r7, #4]
	if (__dnew > size_type(_S_local_capacity))
 8005f5c:	d907      	bls.n	8005f6e <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z+0x4a>
	    _M_data(_M_create(__dnew, size_type(0)));
 8005f5e:	2200      	movs	r2, #0
 8005f60:	1d39      	adds	r1, r7, #4
 8005f62:	4620      	mov	r0, r4
 8005f64:	f002 ffd6 	bl	8008f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8005f68:	687b      	ldr	r3, [r7, #4]
      { _M_dataplus._M_p = __p; }
 8005f6a:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 8005f6c:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8005f6e:	4632      	mov	r2, r6
 8005f70:	4629      	mov	r1, r5
 8005f72:	6820      	ldr	r0, [r4, #0]
 8005f74:	f003 f813 	bl	8008f9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8005f78:	2100      	movs	r1, #0
    }
 8005f7a:	4620      	mov	r0, r4
	_M_set_length(__dnew);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	3708      	adds	r7, #8
      { _M_string_length = __length; }
 8005f82:	6063      	str	r3, [r4, #4]
 8005f84:	54d1      	strb	r1, [r2, r3]
 8005f86:	46bd      	mov	sp, r7
 8005f88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005f8c:	b001      	add	sp, #4
 8005f8e:	4770      	bx	lr

08005f90 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8005f90:	b513      	push	{r0, r1, r4, lr}
 8005f92:	4604      	mov	r4, r0
					   "%d", __val); }
 8005f94:	9100      	str	r1, [sp, #0]
 8005f96:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <_ZNSt7__cxx119to_stringEi+0x18>)
 8005f98:	2210      	movs	r2, #16
 8005f9a:	4904      	ldr	r1, [pc, #16]	; (8005fac <_ZNSt7__cxx119to_stringEi+0x1c>)
 8005f9c:	f7ff ffc2 	bl	8005f24 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	b002      	add	sp, #8
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	bf00      	nop
 8005fa8:	0800d982 	.word	0x0800d982
 8005fac:	0800c571 	.word	0x0800c571

08005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005fb0:	b508      	push	{r3, lr}
    { return __lhs.compare(__rhs) == 0; }
 8005fb2:	f003 f92c 	bl	800920e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8005fb6:	fab0 f080 	clz	r0, r0
 8005fba:	0940      	lsrs	r0, r0, #5
 8005fbc:	bd08      	pop	{r3, pc}
	...

08005fc0 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	if(reply.length()>0){
		CDC_Transmit_FS(reply.c_str(), reply.length());
	}
}

bool FFBWheel::executeSysCommand(ParsedCommand* cmd,std::string* reply){
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	4604      	mov	r4, r0
	bool flag = true;
	if(cmd->cmd == "help"){
 8005fc8:	492b      	ldr	r1, [pc, #172]	; (8006078 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb8>)
 8005fca:	4628      	mov	r0, r5
bool FFBWheel::executeSysCommand(ParsedCommand* cmd,std::string* reply){
 8005fcc:	4616      	mov	r6, r2
	if(cmd->cmd == "help"){
 8005fce:	f7ff ffef 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005fd2:	b160      	cbz	r0, 8005fee <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e>
		*reply += parser.helpstring;
 8005fd4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f003 f8d4 	bl	8009186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
		*reply += "\nSystem Commands: reboot,help,dfu,swver (Version),lsmain (List configs),id,main (Set main config),vint,vext,format (Erase flash)\n";
 8005fde:	4927      	ldr	r1, [pc, #156]	; (800607c <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>)
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f003 f8fb 	bl	80091dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		flag = false; // Continue to user commands
 8005fe6:	2400      	movs	r4, #0
		flag = false;
	}
	// Append newline if reply is not empty

	return flag;
}
 8005fe8:	4620      	mov	r0, r4
 8005fea:	b006      	add	sp, #24
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
	}else if(cmd->cmd == "reboot"){
 8005fee:	4924      	ldr	r1, [pc, #144]	; (8006080 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc0>)
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f7ff ffdd 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005ff6:	b160      	cbz	r0, 8006012 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005ff8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005ffc:	4921      	ldr	r1, [pc, #132]	; (8006084 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 8005ffe:	4b22      	ldr	r3, [pc, #136]	; (8006088 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8006000:	68ca      	ldr	r2, [r1, #12]
 8006002:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006006:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006008:	60cb      	str	r3, [r1, #12]
 800600a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
	}else if(cmd->cmd == "dfu"){
 8006012:	491e      	ldr	r1, [pc, #120]	; (800608c <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc>)
 8006014:	4628      	mov	r0, r5
 8006016:	f7ff ffcb 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800601a:	4604      	mov	r4, r0
 800601c:	b110      	cbz	r0, 8006024 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>
		RebootDFU();
 800601e:	f7fb fae5 	bl	80015ec <RebootDFU>
 8006022:	e7e1      	b.n	8005fe8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	}else if(cmd->cmd == "swver"){
 8006024:	491a      	ldr	r1, [pc, #104]	; (8006090 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 8006026:	4628      	mov	r0, r5
 8006028:	f7ff ffc2 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800602c:	4604      	mov	r4, r0
 800602e:	b158      	cbz	r0, 8006048 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>
		*reply += std::to_string(SW_VERSION);
 8006030:	4668      	mov	r0, sp
 8006032:	2102      	movs	r1, #2
 8006034:	f7ff ffac 	bl	8005f90 <_ZNSt7__cxx119to_stringEi>
 8006038:	4669      	mov	r1, sp
 800603a:	4630      	mov	r0, r6
 800603c:	f003 f8a3 	bl	8009186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
      { _M_dispose(); }
 8006040:	4668      	mov	r0, sp
 8006042:	f002 ff81 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006046:	e7cf      	b.n	8005fe8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	}else if(cmd->cmd == "format"){
 8006048:	4912      	ldr	r1, [pc, #72]	; (8006094 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>)
 800604a:	4628      	mov	r0, r5
 800604c:	f7ff ffb0 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006050:	4604      	mov	r4, r0
 8006052:	2800      	cmp	r0, #0
 8006054:	d0c8      	beq.n	8005fe8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
		if(cmd->type == CMDtype::set && cmd->val==1){
 8006056:	6a2b      	ldr	r3, [r5, #32]
 8006058:	b94b      	cbnz	r3, 800606e <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
 800605a:	69eb      	ldr	r3, [r5, #28]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d106      	bne.n	800606e <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
			HAL_FLASH_Unlock();
 8006060:	f7fc f950 	bl	8002304 <HAL_FLASH_Unlock>
			EE_Format();
 8006064:	f7fb f8a0 	bl	80011a8 <EE_Format>
			HAL_FLASH_Lock();
 8006068:	f7fc f95e 	bl	8002328 <HAL_FLASH_Lock>
 800606c:	e7bc      	b.n	8005fe8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
			*reply += "format=1 will ERASE ALL stored variables. Be careful!";
 800606e:	490a      	ldr	r1, [pc, #40]	; (8006098 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd8>)
 8006070:	4630      	mov	r0, r6
 8006072:	f003 f8b3 	bl	80091dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 8006076:	e7b7      	b.n	8005fe8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
 8006078:	0800d6ac 	.word	0x0800d6ac
 800607c:	0800d6b1 	.word	0x0800d6b1
 8006080:	0800d733 	.word	0x0800d733
 8006084:	e000ed00 	.word	0xe000ed00
 8006088:	05fa0004 	.word	0x05fa0004
 800608c:	0800d73a 	.word	0x0800d73a
 8006090:	0800d73e 	.word	0x0800d73e
 8006094:	0800d744 	.word	0x0800d744
 8006098:	0800d74b 	.word	0x0800d74b

0800609c <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>:
void FFBWheel::executeCommands(std::vector<ParsedCommand> commands){
 800609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	e9d1 4800 	ldrd	r4, r8, [r1]
 80060a4:	b090      	sub	sp, #64	; 0x40
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80060a6:	ab03      	add	r3, sp, #12
 80060a8:	9301      	str	r3, [sp, #4]
      { _M_string_length = __length; }
 80060aa:	2300      	movs	r3, #0
 80060ac:	4681      	mov	r9, r0
      : _M_current(__i) { }
 80060ae:	4f24      	ldr	r7, [pc, #144]	; (8006140 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xa4>)
 80060b0:	9302      	str	r3, [sp, #8]
 80060b2:	f88d 300c 	strb.w	r3, [sp, #12]
	for(ParsedCommand cmd : commands){
 80060b6:	45a0      	cmp	r8, r4
 80060b8:	d036      	beq.n	8006128 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x8c>


enum class CMDtype{
	set,setat,get,getat,none,help,err, dash
};
struct ParsedCommand
 80060ba:	4621      	mov	r1, r4
 80060bc:	a807      	add	r0, sp, #28
 80060be:	f003 f8dd 	bl	800927c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80060c2:	8b23      	ldrh	r3, [r4, #24]
		if(!executeSysCommand(&cmd,&reply)){
 80060c4:	aa01      	add	r2, sp, #4
 80060c6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80060ca:	69e3      	ldr	r3, [r4, #28]
 80060cc:	a907      	add	r1, sp, #28
 80060ce:	930e      	str	r3, [sp, #56]	; 0x38
 80060d0:	6a23      	ldr	r3, [r4, #32]
 80060d2:	4648      	mov	r0, r9
 80060d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80060d6:	f7ff ff73 	bl	8005fc0 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80060da:	b9a0      	cbnz	r0, 8006106 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x6a>
 80060dc:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80060e0:	683e      	ldr	r6, [r7, #0]
			for(CommandHandler* handler : cmdHandlers){
 80060e2:	45b2      	cmp	sl, r6
 80060e4:	d00f      	beq.n	8006106 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x6a>
 80060e6:	f856 5b04 	ldr.w	r5, [r6], #4
				if(handler->hasCommands())
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	4628      	mov	r0, r5
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4798      	blx	r3
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d0f5      	beq.n	80060e2 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x46>
					if(handler->command(&cmd,&reply))
 80060f6:	682b      	ldr	r3, [r5, #0]
 80060f8:	aa01      	add	r2, sp, #4
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	a907      	add	r1, sp, #28
 80060fe:	4628      	mov	r0, r5
 8006100:	4798      	blx	r3
 8006102:	2800      	cmp	r0, #0
 8006104:	d0ed      	beq.n	80060e2 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x46>
      { return this->size() == 0; }
 8006106:	9a02      	ldr	r2, [sp, #8]
		if(!reply.empty() && reply.back()!='\n'){
 8006108:	b14a      	cbz	r2, 800611e <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x82>
 800610a:	9b01      	ldr	r3, [sp, #4]
 800610c:	4413      	add	r3, r2
 800610e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006112:	2b0a      	cmp	r3, #10
 8006114:	d003      	beq.n	800611e <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x82>
	this->push_back(__c);
 8006116:	210a      	movs	r1, #10
 8006118:	a801      	add	r0, sp, #4
 800611a:	f002 fff0 	bl	80090fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
      { _M_dispose(); }
 800611e:	a807      	add	r0, sp, #28
 8006120:	f002 ff12 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006124:	3424      	adds	r4, #36	; 0x24
 8006126:	e7c6      	b.n	80060b6 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x1a>
	if(reply.length()>0){
 8006128:	9902      	ldr	r1, [sp, #8]
 800612a:	b119      	cbz	r1, 8006134 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x98>
		CDC_Transmit_FS(reply.c_str(), reply.length());
 800612c:	b289      	uxth	r1, r1
 800612e:	9801      	ldr	r0, [sp, #4]
 8006130:	f001 fed8 	bl	8007ee4 <CDC_Transmit_FS>
 8006134:	a801      	add	r0, sp, #4
 8006136:	f002 ff07 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
 800613a:	b010      	add	sp, #64	; 0x40
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	20000b60 	.word	0x20000b60

08006144 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
volatile const SimDisplayPacket* telemetry;
bool FFBWheel::command(ParsedCommand* cmd,std::string* reply){
 8006144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006148:	460c      	mov	r4, r1
 800614a:	b08e      	sub	sp, #56	; 0x38
 800614c:	4606      	mov	r6, r0
	bool flag = true;
	// ------------ General commands ----------------
	if(cmd->cmd == "save"){
 800614e:	499f      	ldr	r1, [pc, #636]	; (80063cc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x288>)
 8006150:	4620      	mov	r0, r4
bool FFBWheel::command(ParsedCommand* cmd,std::string* reply){
 8006152:	4617      	mov	r7, r2
	if(cmd->cmd == "save"){
 8006154:	f7ff ff2c 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006158:	4605      	mov	r5, r0
 800615a:	4680      	mov	r8, r0
 800615c:	b138      	cbz	r0, 800616e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
		this->saveFlash();
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff fe22 	bl	8005da8 <_ZN8FFBWheel9saveFlashEv>
		*reply+=">saved";
 8006164:	499a      	ldr	r1, [pc, #616]	; (80063d0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28c>)
				rgb_array = 12 + (telemetry->rpm - telemetry->shftrpm)*4/((telemetry->shftrpm*100/95) - telemetry->shftrpm);
			setup_rpm_ws2812(rgb_array);
		}
	}else if(cmd->cmd == "help"){
		flag = false;
		*reply += "FFBWheel commands:\n"
 8006166:	4638      	mov	r0, r7
 8006168:	f003 f838 	bl	80091dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800616c:	e02b      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "zeroenc"){
 800616e:	4999      	ldr	r1, [pc, #612]	; (80063d4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x290>)
 8006170:	4620      	mov	r0, r4
 8006172:	f7ff ff1d 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006176:	4605      	mov	r5, r0
 8006178:	b150      	cbz	r0, 8006190 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>
		if(cmd->type == CMDtype::get){
 800617a:	6a23      	ldr	r3, [r4, #32]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d001      	beq.n	8006184 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>
		flag = true;
 8006180:	2501      	movs	r5, #1
 8006182:	e020      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
			this->enc->setPos(0);
 8006184:	4641      	mov	r1, r8
 8006186:	6f70      	ldr	r0, [r6, #116]	; 0x74
 8006188:	f7ff fa57 	bl	800563a <_ZN12EncoderLocal6setPosEl>
			*reply += "Zeroed";
 800618c:	4992      	ldr	r1, [pc, #584]	; (80063d8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x294>)
 800618e:	e7ea      	b.n	8006166 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
	}else if(cmd->cmd == "power"){
 8006190:	4992      	ldr	r1, [pc, #584]	; (80063dc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x298>)
 8006192:	4620      	mov	r0, r4
 8006194:	f7ff ff0c 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006198:	4605      	mov	r5, r0
 800619a:	b1c0      	cbz	r0, 80061ce <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
		if(cmd->type == CMDtype::get){
 800619c:	6a23      	ldr	r3, [r4, #32]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d10c      	bne.n	80061bc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
			*reply+=std::to_string(conf.power);
 80061a2:	f8b6 105a 	ldrh.w	r1, [r6, #90]	; 0x5a
					*reply+=std::to_string(this->conf.sawToothUpGain);
 80061a6:	a802      	add	r0, sp, #8
 80061a8:	f7ff fef2 	bl	8005f90 <_ZNSt7__cxx119to_stringEi>
 80061ac:	a902      	add	r1, sp, #8
 80061ae:	4638      	mov	r0, r7
 80061b0:	f002 ffe9 	bl	8009186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 80061b4:	a802      	add	r0, sp, #8
 80061b6:	f002 fec7 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80061ba:	e004      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
		}else if(cmd->type == CMDtype::set){
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1df      	bne.n	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
			this->conf.power = cmd->val;
 80061c0:	69e3      	ldr	r3, [r4, #28]
 80061c2:	f8a6 305a 	strh.w	r3, [r6, #90]	; 0x5a
		flag = false;
	}


	return flag;
}
 80061c6:	4628      	mov	r0, r5
 80061c8:	b00e      	add	sp, #56	; 0x38
 80061ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else if(cmd->cmd == "degrees"){
 80061ce:	4984      	ldr	r1, [pc, #528]	; (80063e0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x29c>)
 80061d0:	4620      	mov	r0, r4
 80061d2:	f7ff feed 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80061d6:	4605      	mov	r5, r0
 80061d8:	b158      	cbz	r0, 80061f2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae>
		if(cmd->type == CMDtype::get){
 80061da:	6a23      	ldr	r3, [r4, #32]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d102      	bne.n	80061e6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa2>
			*reply+=std::to_string(this->conf.degreesOfRotation);
 80061e0:	f8b6 1058 	ldrh.w	r1, [r6, #88]	; 0x58
 80061e4:	e7df      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
		}else if(cmd->type == CMDtype::set){
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1ca      	bne.n	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
			this->conf.degreesOfRotation = cmd->val;
 80061ea:	69e3      	ldr	r3, [r4, #28]
 80061ec:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 80061f0:	e7e9      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "axismask"){
 80061f2:	497c      	ldr	r1, [pc, #496]	; (80063e4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a0>)
 80061f4:	4620      	mov	r0, r4
 80061f6:	f7ff fedb 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80061fa:	4605      	mov	r5, r0
 80061fc:	b158      	cbz	r0, 8006216 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd2>
		if(cmd->type == CMDtype::get){
 80061fe:	6a23      	ldr	r3, [r4, #32]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d102      	bne.n	800620a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc6>
			*reply+=std::to_string(this->conf.axes);
 8006204:	f896 1055 	ldrb.w	r1, [r6, #85]	; 0x55
 8006208:	e7cd      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
		}else if(cmd->type == CMDtype::set){
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1b8      	bne.n	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
			this->conf.axes = cmd->val;
 800620e:	69e3      	ldr	r3, [r4, #28]
 8006210:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
 8006214:	e7d7      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "ppr"){
 8006216:	4974      	ldr	r1, [pc, #464]	; (80063e8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a4>)
 8006218:	4620      	mov	r0, r4
 800621a:	f7ff fec9 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800621e:	4605      	mov	r5, r0
 8006220:	b1b0      	cbz	r0, 8006250 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10c>
		if(cmd->type == CMDtype::get){
 8006222:	6a23      	ldr	r3, [r4, #32]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d105      	bne.n	8006234 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>
			*reply+=std::to_string(this->enc->getPpr());
 8006228:	6f70      	ldr	r0, [r6, #116]	; 0x74
 800622a:	f7ff fa2e 	bl	800568a <_ZN12EncoderLocal6getPprEv>

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 800622e:	9000      	str	r0, [sp, #0]
 8006230:	4b6e      	ldr	r3, [pc, #440]	; (80063ec <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a8>)
 8006232:	e160      	b.n	80064f6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3b2>
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 8006234:	b93b      	cbnz	r3, 8006246 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x102>
 8006236:	6f70      	ldr	r0, [r6, #116]	; 0x74
 8006238:	b128      	cbz	r0, 8006246 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x102>
			this->conf.encoderPPR = cmd->val;
 800623a:	69e1      	ldr	r1, [r4, #28]
 800623c:	f8a6 105c 	strh.w	r1, [r6, #92]	; 0x5c
			this->enc->setPpr(cmd->val);
 8006240:	f7ff fa27 	bl	8005692 <_ZN12EncoderLocal6setPprEm>
 8006244:	e7bf      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
			*reply += "Err. Setup enctype first";
 8006246:	496a      	ldr	r1, [pc, #424]	; (80063f0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2ac>)
 8006248:	4638      	mov	r0, r7
 800624a:	f002 ffc7 	bl	80091dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800624e:	e797      	b.n	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
	}else if(cmd->cmd == "adcmax"){
 8006250:	4968      	ldr	r1, [pc, #416]	; (80063f4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2b0>)
 8006252:	4620      	mov	r0, r4
 8006254:	f7ff feac 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006258:	4605      	mov	r5, r0
 800625a:	b158      	cbz	r0, 8006274 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x130>
			if(cmd->type == CMDtype::get){
 800625c:	6a23      	ldr	r3, [r4, #32]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d102      	bne.n	8006268 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x124>
				*reply+=std::to_string(this->conf.maxAdcCount);
 8006262:	f896 105e 	ldrb.w	r1, [r6, #94]	; 0x5e
 8006266:	e79e      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
			}else if(cmd->type == CMDtype::set){
 8006268:	2b00      	cmp	r3, #0
 800626a:	d189      	bne.n	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
				this->conf.maxAdcCount = cmd->val;
 800626c:	69e3      	ldr	r3, [r4, #28]
 800626e:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
 8006272:	e7a8      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "inverted"){
 8006274:	4960      	ldr	r1, [pc, #384]	; (80063f8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2b4>)
 8006276:	4620      	mov	r0, r4
 8006278:	f7ff fe9a 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800627c:	4605      	mov	r5, r0
 800627e:	b160      	cbz	r0, 800629a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x156>
				if(cmd->type == CMDtype::get){
 8006280:	6a23      	ldr	r3, [r4, #32]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d102      	bne.n	800628c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x148>
					*reply+=std::to_string(this->conf.inverted);
 8006286:	f896 105f 	ldrb.w	r1, [r6, #95]	; 0x5f
 800628a:	e78c      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 800628c:	2b00      	cmp	r3, #0
 800628e:	f47f af77 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.inverted = cmd->val;
 8006292:	69e3      	ldr	r3, [r4, #28]
 8006294:	f886 305f 	strb.w	r3, [r6, #95]	; 0x5f
 8006298:	e795      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "constantGain"){
 800629a:	4958      	ldr	r1, [pc, #352]	; (80063fc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2b8>)
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff fe87 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80062a2:	4605      	mov	r5, r0
 80062a4:	b160      	cbz	r0, 80062c0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>
				if(cmd->type == CMDtype::get){
 80062a6:	6a23      	ldr	r3, [r4, #32]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d102      	bne.n	80062b2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e>
					*reply+=std::to_string(this->conf.constantGain);
 80062ac:	f896 1062 	ldrb.w	r1, [r6, #98]	; 0x62
 80062b0:	e779      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f47f af64 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.constantGain = cmd->val;
 80062b8:	69e3      	ldr	r3, [r4, #28]
 80062ba:	f886 3062 	strb.w	r3, [r6, #98]	; 0x62
 80062be:	e782      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "rampGain"){
 80062c0:	494f      	ldr	r1, [pc, #316]	; (8006400 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2bc>)
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7ff fe74 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80062c8:	4605      	mov	r5, r0
 80062ca:	b160      	cbz	r0, 80062e6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a2>
				if(cmd->type == CMDtype::get){
 80062cc:	6a23      	ldr	r3, [r4, #32]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d102      	bne.n	80062d8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x194>
					*reply+=std::to_string(this->conf.rampGain);
 80062d2:	f896 1063 	ldrb.w	r1, [r6, #99]	; 0x63
 80062d6:	e766      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f47f af51 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.rampGain = cmd->val;
 80062de:	69e3      	ldr	r3, [r4, #28]
 80062e0:	f886 3063 	strb.w	r3, [r6, #99]	; 0x63
 80062e4:	e76f      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "squareGain"){
 80062e6:	4947      	ldr	r1, [pc, #284]	; (8006404 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c0>)
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7ff fe61 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80062ee:	4605      	mov	r5, r0
 80062f0:	b160      	cbz	r0, 800630c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c8>
				if(cmd->type == CMDtype::get){
 80062f2:	6a23      	ldr	r3, [r4, #32]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d102      	bne.n	80062fe <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ba>
					*reply+=std::to_string(this->conf.squareGain);
 80062f8:	f896 1064 	ldrb.w	r1, [r6, #100]	; 0x64
 80062fc:	e753      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f47f af3e 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.squareGain = cmd->val;
 8006304:	69e3      	ldr	r3, [r4, #28]
 8006306:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
 800630a:	e75c      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "sinGain"){
 800630c:	493e      	ldr	r1, [pc, #248]	; (8006408 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c4>)
 800630e:	4620      	mov	r0, r4
 8006310:	f7ff fe4e 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006314:	4605      	mov	r5, r0
 8006316:	b160      	cbz	r0, 8006332 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ee>
				if(cmd->type == CMDtype::get){
 8006318:	6a23      	ldr	r3, [r4, #32]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d102      	bne.n	8006324 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e0>
					*reply+=std::to_string(this->conf.sinGain);
 800631e:	f896 1065 	ldrb.w	r1, [r6, #101]	; 0x65
 8006322:	e740      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 8006324:	2b00      	cmp	r3, #0
 8006326:	f47f af2b 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.sinGain = cmd->val;
 800632a:	69e3      	ldr	r3, [r4, #28]
 800632c:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
 8006330:	e749      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "triangleGain"){
 8006332:	4936      	ldr	r1, [pc, #216]	; (800640c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c8>)
 8006334:	4620      	mov	r0, r4
 8006336:	f7ff fe3b 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800633a:	4605      	mov	r5, r0
 800633c:	b160      	cbz	r0, 8006358 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x214>
				if(cmd->type == CMDtype::get){
 800633e:	6a23      	ldr	r3, [r4, #32]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d102      	bne.n	800634a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x206>
					*reply+=std::to_string(this->conf.triangleGain);
 8006344:	f896 1066 	ldrb.w	r1, [r6, #102]	; 0x66
 8006348:	e72d      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 800634a:	2b00      	cmp	r3, #0
 800634c:	f47f af18 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.triangleGain = cmd->val;
 8006350:	69e3      	ldr	r3, [r4, #28]
 8006352:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
 8006356:	e736      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "sawToothDownGain"){
 8006358:	492d      	ldr	r1, [pc, #180]	; (8006410 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2cc>)
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff fe28 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006360:	4605      	mov	r5, r0
 8006362:	b160      	cbz	r0, 800637e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x23a>
				if(cmd->type == CMDtype::get){
 8006364:	6a23      	ldr	r3, [r4, #32]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d102      	bne.n	8006370 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22c>
					*reply+=std::to_string(this->conf.sawToothDownGain);
 800636a:	f896 1067 	ldrb.w	r1, [r6, #103]	; 0x67
 800636e:	e71a      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 8006370:	2b00      	cmp	r3, #0
 8006372:	f47f af05 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.sawToothDownGain = cmd->val;
 8006376:	69e3      	ldr	r3, [r4, #28]
 8006378:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
 800637c:	e723      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "sawToothUpGain"){
 800637e:	4925      	ldr	r1, [pc, #148]	; (8006414 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d0>)
 8006380:	4620      	mov	r0, r4
 8006382:	f7ff fe15 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006386:	4605      	mov	r5, r0
 8006388:	b160      	cbz	r0, 80063a4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x260>
				if(cmd->type == CMDtype::get){
 800638a:	6a23      	ldr	r3, [r4, #32]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d102      	bne.n	8006396 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x252>
					*reply+=std::to_string(this->conf.sawToothUpGain);
 8006390:	f896 1068 	ldrb.w	r1, [r6, #104]	; 0x68
 8006394:	e707      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 8006396:	2b00      	cmp	r3, #0
 8006398:	f47f aef2 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.sawToothUpGain = cmd->val;
 800639c:	69e3      	ldr	r3, [r4, #28]
 800639e:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
 80063a2:	e710      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "springGain"){
 80063a4:	491c      	ldr	r1, [pc, #112]	; (8006418 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d4>)
 80063a6:	4620      	mov	r0, r4
 80063a8:	f7ff fe02 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80063ac:	4605      	mov	r5, r0
 80063ae:	b3a8      	cbz	r0, 800641c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d8>
				if(cmd->type == CMDtype::get){
 80063b0:	6a23      	ldr	r3, [r4, #32]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d102      	bne.n	80063bc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x278>
					*reply+=std::to_string(this->conf.springGain);
 80063b6:	f896 1069 	ldrb.w	r1, [r6, #105]	; 0x69
 80063ba:	e6f4      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f47f aedf 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.springGain = cmd->val;
 80063c2:	69e3      	ldr	r3, [r4, #28]
 80063c4:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
 80063c8:	e6fd      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
 80063ca:	bf00      	nop
 80063cc:	0800d781 	.word	0x0800d781
 80063d0:	0800d786 	.word	0x0800d786
 80063d4:	0800d78d 	.word	0x0800d78d
 80063d8:	0800d795 	.word	0x0800d795
 80063dc:	0800d79c 	.word	0x0800d79c
 80063e0:	0800d7a2 	.word	0x0800d7a2
 80063e4:	0800d7aa 	.word	0x0800d7aa
 80063e8:	0800d7b3 	.word	0x0800d7b3
 80063ec:	0800d7b7 	.word	0x0800d7b7
 80063f0:	0800d7bb 	.word	0x0800d7bb
 80063f4:	0800d7d4 	.word	0x0800d7d4
 80063f8:	0800d7db 	.word	0x0800d7db
 80063fc:	0800d7e4 	.word	0x0800d7e4
 8006400:	0800d7f1 	.word	0x0800d7f1
 8006404:	0800d7fa 	.word	0x0800d7fa
 8006408:	0800d805 	.word	0x0800d805
 800640c:	0800d80d 	.word	0x0800d80d
 8006410:	0800d81a 	.word	0x0800d81a
 8006414:	0800d82b 	.word	0x0800d82b
 8006418:	0800d83a 	.word	0x0800d83a
	}else if(cmd->cmd == "damperGain"){
 800641c:	4985      	ldr	r1, [pc, #532]	; (8006634 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 800641e:	4620      	mov	r0, r4
 8006420:	f7ff fdc6 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006424:	4605      	mov	r5, r0
 8006426:	b160      	cbz	r0, 8006442 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2fe>
				if(cmd->type == CMDtype::get){
 8006428:	6a23      	ldr	r3, [r4, #32]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d102      	bne.n	8006434 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>
					*reply+=std::to_string(this->conf.damperGain);
 800642e:	f896 106a 	ldrb.w	r1, [r6, #106]	; 0x6a
 8006432:	e6b8      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 8006434:	2b00      	cmp	r3, #0
 8006436:	f47f aea3 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.damperGain = cmd->val;
 800643a:	69e3      	ldr	r3, [r4, #28]
 800643c:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
 8006440:	e6c1      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "inertiaGain"){
 8006442:	497d      	ldr	r1, [pc, #500]	; (8006638 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f4>)
 8006444:	4620      	mov	r0, r4
 8006446:	f7ff fdb3 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800644a:	4605      	mov	r5, r0
 800644c:	b160      	cbz	r0, 8006468 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x324>
				if(cmd->type == CMDtype::get){
 800644e:	6a23      	ldr	r3, [r4, #32]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d102      	bne.n	800645a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x316>
					*reply+=std::to_string(this->conf.inertiaGain);
 8006454:	f896 106b 	ldrb.w	r1, [r6, #107]	; 0x6b
 8006458:	e6a5      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 800645a:	2b00      	cmp	r3, #0
 800645c:	f47f ae90 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.inertiaGain = cmd->val;
 8006460:	69e3      	ldr	r3, [r4, #28]
 8006462:	f886 306b 	strb.w	r3, [r6, #107]	; 0x6b
 8006466:	e6ae      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "frictionGain"){
 8006468:	4974      	ldr	r1, [pc, #464]	; (800663c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 800646a:	4620      	mov	r0, r4
 800646c:	f7ff fda0 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006470:	4605      	mov	r5, r0
 8006472:	b160      	cbz	r0, 800648e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34a>
				if(cmd->type == CMDtype::get){
 8006474:	6a23      	ldr	r3, [r4, #32]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d102      	bne.n	8006480 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x33c>
					*reply+=std::to_string(this->conf.frictionGain);
 800647a:	f896 106c 	ldrb.w	r1, [r6, #108]	; 0x6c
 800647e:	e692      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 8006480:	2b00      	cmp	r3, #0
 8006482:	f47f ae7d 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.frictionGain = cmd->val;
 8006486:	69e3      	ldr	r3, [r4, #28]
 8006488:	f886 306c 	strb.w	r3, [r6, #108]	; 0x6c
 800648c:	e69b      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "endstopGain"){
 800648e:	496c      	ldr	r1, [pc, #432]	; (8006640 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4fc>)
 8006490:	4620      	mov	r0, r4
 8006492:	f7ff fd8d 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006496:	4605      	mov	r5, r0
 8006498:	b160      	cbz	r0, 80064b4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x370>
				if(cmd->type == CMDtype::get){
 800649a:	6a23      	ldr	r3, [r4, #32]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d102      	bne.n	80064a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x362>
					*reply+=std::to_string(this->conf.endstop_gain);
 80064a0:	f8b6 1060 	ldrh.w	r1, [r6, #96]	; 0x60
 80064a4:	e67f      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f47f ae6a 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.endstop_gain = cmd->val;
 80064ac:	69e3      	ldr	r3, [r4, #28]
 80064ae:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
 80064b2:	e688      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "totalGain"){
 80064b4:	4963      	ldr	r1, [pc, #396]	; (8006644 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x500>)
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7ff fd7a 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80064bc:	4605      	mov	r5, r0
 80064be:	b160      	cbz	r0, 80064da <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x396>
				if(cmd->type == CMDtype::get){
 80064c0:	6a23      	ldr	r3, [r4, #32]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d102      	bne.n	80064cc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x388>
					*reply+=std::to_string(this->conf.totalGain);
 80064c6:	f896 106d 	ldrb.w	r1, [r6, #109]	; 0x6d
 80064ca:	e66c      	b.n	80061a6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
				}else if(cmd->type == CMDtype::set){
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f47f ae57 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
					this->conf.totalGain = cmd->val;
 80064d2:	69e3      	ldr	r3, [r4, #28]
 80064d4:	f886 306d 	strb.w	r3, [r6, #109]	; 0x6d
 80064d8:	e675      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "pos"){
 80064da:	495b      	ldr	r1, [pc, #364]	; (8006648 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x504>)
 80064dc:	4620      	mov	r0, r4
 80064de:	f7ff fd67 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80064e2:	4605      	mov	r5, r0
 80064e4:	b1c0      	cbz	r0, 8006518 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d4>
		if(cmd->type == CMDtype::get){
 80064e6:	6a23      	ldr	r3, [r4, #32]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d10a      	bne.n	8006502 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3be>
			*reply+=std::to_string(this->enc->getPos());
 80064ec:	6f70      	ldr	r0, [r6, #116]	; 0x74
 80064ee:	f7ff f899 	bl	8005624 <_ZN12EncoderLocal6getPosEv>
					   "%ld", __val); }
 80064f2:	4b56      	ldr	r3, [pc, #344]	; (800664c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x508>)
 80064f4:	9000      	str	r0, [sp, #0]
 80064f6:	2210      	movs	r2, #16
 80064f8:	4955      	ldr	r1, [pc, #340]	; (8006650 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50c>)
 80064fa:	a802      	add	r0, sp, #8
 80064fc:	f7ff fd12 	bl	8005f24 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8006500:	e654      	b.n	80061ac <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 8006502:	2b00      	cmp	r3, #0
 8006504:	f47f ae9f 	bne.w	8006246 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x102>
 8006508:	6f70      	ldr	r0, [r6, #116]	; 0x74
 800650a:	2800      	cmp	r0, #0
 800650c:	f43f ae9b 	beq.w	8006246 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x102>
			this->enc->setPos(cmd->val);
 8006510:	69e1      	ldr	r1, [r4, #28]
 8006512:	f7ff f892 	bl	800563a <_ZN12EncoderLocal6setPosEl>
 8006516:	e656      	b.n	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else if(cmd->cmd == "hidrate" && cmd->type == CMDtype::get){
 8006518:	494e      	ldr	r1, [pc, #312]	; (8006654 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x510>)
 800651a:	4620      	mov	r0, r4
 800651c:	f7ff fd48 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006520:	4605      	mov	r5, r0
 8006522:	b138      	cbz	r0, 8006534 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f0>
 8006524:	6a23      	ldr	r3, [r4, #32]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d104      	bne.n	8006534 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f0>
		if(ffb->hid_out_period != 0){
 800652a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800652c:	6a1a      	ldr	r2, [r3, #32]
 800652e:	b992      	cbnz	r2, 8006556 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x412>
			*reply+="0";
 8006530:	4949      	ldr	r1, [pc, #292]	; (8006658 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x514>)
 8006532:	e618      	b.n	8006166 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
	}else if(cmd->cmd == "led"){
 8006534:	4949      	ldr	r1, [pc, #292]	; (800665c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x518>)
 8006536:	4620      	mov	r0, r4
 8006538:	f7ff fd3a 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800653c:	6a26      	ldr	r6, [r4, #32]
 800653e:	4605      	mov	r5, r0
 8006540:	b978      	cbnz	r0, 8006562 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x41e>
	}else if(cmd->type == CMDtype::dash){
 8006542:	2e07      	cmp	r6, #7
 8006544:	d16d      	bne.n	8006622 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4de>
      { return _M_data(); }
 8006546:	6823      	ldr	r3, [r4, #0]
		telemetry = (SimDisplayPacket*)(cmd->cmd.c_str());
 8006548:	4a45      	ldr	r2, [pc, #276]	; (8006660 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x51c>)
 800654a:	6013      	str	r3, [r2, #0]
		if (telemetry->status == SDP_STATUS_OFF)
 800654c:	785a      	ldrb	r2, [r3, #1]
 800654e:	bb6a      	cbnz	r2, 80065ac <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x468>
			setup_rpm_ws2812(rgb_array);
 8006550:	f001 face 	bl	8007af0 <_Z16setup_rpm_ws2812h>
 8006554:	e614      	b.n	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
			*reply+=std::to_string(1000/ffb->hid_out_period);
 8006556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800655a:	fbb3 f3f2 	udiv	r3, r3, r2
					   "%lu", __val); }
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	e666      	b.n	8006230 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xec>
		if(cmd->type == CMDtype::set){
 8006562:	2e00      	cmp	r6, #0
 8006564:	f47f ae0c 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
			RGB rgb_array[16] = {0};
 8006568:	f10d 0808 	add.w	r8, sp, #8
 800656c:	4631      	mov	r1, r6
 800656e:	2230      	movs	r2, #48	; 0x30
 8006570:	4640      	mov	r0, r8
 8006572:	f005 fe24 	bl	800c1be <memset>
 8006576:	4631      	mov	r1, r6
					rgb_array[i] = defaultRGB[tmp];
 8006578:	4e3a      	ldr	r6, [pc, #232]	; (8006664 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x520>)
				uint8_t tmp = (cmd->val >> (2*i)) & 0b11;
 800657a:	69e3      	ldr	r3, [r4, #28]
					rgb_array[i] = defaultRGB[tmp];
 800657c:	0048      	lsls	r0, r1, #1
				uint8_t tmp = (cmd->val >> (2*i)) & 0b11;
 800657e:	4103      	asrs	r3, r0
					rgb_array[i] = defaultRGB[tmp];
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006588:	4433      	add	r3, r6
 800658a:	1842      	adds	r2, r0, r1
 800658c:	f8b3 c000 	ldrh.w	ip, [r3]
 8006590:	3101      	adds	r1, #1
 8006592:	789b      	ldrb	r3, [r3, #2]
 8006594:	eb08 0002 	add.w	r0, r8, r2
			for(uint8_t i = 0;i<LED_COUNT;i++)
 8006598:	2910      	cmp	r1, #16
					rgb_array[i] = defaultRGB[tmp];
 800659a:	f828 c002 	strh.w	ip, [r8, r2]
 800659e:	7083      	strb	r3, [r0, #2]
			for(uint8_t i = 0;i<LED_COUNT;i++)
 80065a0:	d1eb      	bne.n	800657a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x436>
			setup_ws2812(rgb_array, LED_COUNT);
 80065a2:	4640      	mov	r0, r8
 80065a4:	f001 fabe 	bl	8007b24 <_Z12setup_ws2812P3RGBh>
			*reply+="OK";
 80065a8:	492f      	ldr	r1, [pc, #188]	; (8006668 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x524>)
 80065aa:	e5dc      	b.n	8006166 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
		else if (telemetry->status == SDP_STATUS_LIVE && telemetry->rpm <= (telemetry->shftrpm*100/95))
 80065ac:	785a      	ldrb	r2, [r3, #1]
 80065ae:	2a02      	cmp	r2, #2
 80065b0:	f47f ade6 	bne.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
 80065b4:	2264      	movs	r2, #100	; 0x64
 80065b6:	245f      	movs	r4, #95	; 0x5f
 80065b8:	8858      	ldrh	r0, [r3, #2]
 80065ba:	88d9      	ldrh	r1, [r3, #6]
 80065bc:	4351      	muls	r1, r2
 80065be:	fb91 f1f4 	sdiv	r1, r1, r4
 80065c2:	4281      	cmp	r1, r0
 80065c4:	f6ff addc 	blt.w	8006180 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
			if(telemetry->rpm < telemetry->optrpm)
 80065c8:	8859      	ldrh	r1, [r3, #2]
 80065ca:	8898      	ldrh	r0, [r3, #4]
 80065cc:	4288      	cmp	r0, r1
 80065ce:	d90c      	bls.n	80065ea <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a6>
				rgb_array = std::max(0, telemetry->rpm - 1500) * 8 / (telemetry->optrpm - 1500);
 80065d0:	8858      	ldrh	r0, [r3, #2]
 80065d2:	889b      	ldrh	r3, [r3, #4]
 80065d4:	f2a0 50dc 	subw	r0, r0, #1500	; 0x5dc
 80065d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80065dc:	00c0      	lsls	r0, r0, #3
 80065de:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80065e2:	fb90 f0f3 	sdiv	r0, r0, r3
				rgb_array = 12 + (telemetry->rpm - telemetry->shftrpm)*4/((telemetry->shftrpm*100/95) - telemetry->shftrpm);
 80065e6:	b2c0      	uxtb	r0, r0
 80065e8:	e7b2      	b.n	8006550 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40c>
			else if(telemetry->rpm < telemetry->shftrpm)
 80065ea:	8859      	ldrh	r1, [r3, #2]
 80065ec:	88d8      	ldrh	r0, [r3, #6]
 80065ee:	4288      	cmp	r0, r1
				rgb_array = 8 + (telemetry->rpm - telemetry->optrpm)*4/(telemetry->shftrpm - telemetry->optrpm);
 80065f0:	8858      	ldrh	r0, [r3, #2]
			else if(telemetry->rpm < telemetry->shftrpm)
 80065f2:	d909      	bls.n	8006608 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c4>
				rgb_array = 8 + (telemetry->rpm - telemetry->optrpm)*4/(telemetry->shftrpm - telemetry->optrpm);
 80065f4:	8899      	ldrh	r1, [r3, #4]
 80065f6:	88da      	ldrh	r2, [r3, #6]
 80065f8:	889b      	ldrh	r3, [r3, #4]
 80065fa:	1a40      	subs	r0, r0, r1
 80065fc:	0080      	lsls	r0, r0, #2
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	fb90 f0f3 	sdiv	r0, r0, r3
 8006604:	3008      	adds	r0, #8
 8006606:	e7ee      	b.n	80065e6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a2>
				rgb_array = 12 + (telemetry->rpm - telemetry->shftrpm)*4/((telemetry->shftrpm*100/95) - telemetry->shftrpm);
 8006608:	88dd      	ldrh	r5, [r3, #6]
 800660a:	88d9      	ldrh	r1, [r3, #6]
 800660c:	88db      	ldrh	r3, [r3, #6]
 800660e:	434a      	muls	r2, r1
 8006610:	fb92 f2f4 	sdiv	r2, r2, r4
 8006614:	1b40      	subs	r0, r0, r5
 8006616:	0080      	lsls	r0, r0, #2
 8006618:	1ad2      	subs	r2, r2, r3
 800661a:	fb90 f0f2 	sdiv	r0, r0, r2
 800661e:	300c      	adds	r0, #12
 8006620:	e7e1      	b.n	80065e6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a2>
	}else if(cmd->cmd == "help"){
 8006622:	4912      	ldr	r1, [pc, #72]	; (800666c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x528>)
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff fcc3 	bl	8005fb0 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800662a:	2800      	cmp	r0, #0
 800662c:	f43f adcb 	beq.w	80061c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
		*reply += "FFBWheel commands:\n"
 8006630:	490f      	ldr	r1, [pc, #60]	; (8006670 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52c>)
 8006632:	e598      	b.n	8006166 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
 8006634:	0800d845 	.word	0x0800d845
 8006638:	0800d850 	.word	0x0800d850
 800663c:	0800d85c 	.word	0x0800d85c
 8006640:	0800d869 	.word	0x0800d869
 8006644:	0800d875 	.word	0x0800d875
 8006648:	0800d87f 	.word	0x0800d87f
 800664c:	0800d883 	.word	0x0800d883
 8006650:	0800c571 	.word	0x0800c571
 8006654:	0800d887 	.word	0x0800d887
 8006658:	0800d893 	.word	0x0800d893
 800665c:	0800d88f 	.word	0x0800d88f
 8006660:	20000b40 	.word	0x20000b40
 8006664:	20000010 	.word	0x20000010
 8006668:	0800d895 	.word	0x0800d895
 800666c:	0800d6ac 	.word	0x0800d6ac
 8006670:	0800d898 	.word	0x0800d898

08006674 <_ZThn8_N8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	bool command(ParsedCommand* cmd,std::string* reply);
 8006674:	f1a0 0008 	sub.w	r0, r0, #8
 8006678:	f7ff bd64 	b.w	8006144 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

0800667c <_Z17usbInit_HID_Wheelv>:
#include "usbd_desc.h"

extern USBD_HandleTypeDef hUsbDeviceFS;
USBD_ClassTypeDef* handles[2];

void usbInit_HID_Wheel(){
 800667c:	b530      	push	{r4, r5, lr}
	handles[CDC_IDX] = &USBD_CDC;
 800667e:	4b24      	ldr	r3, [pc, #144]	; (8006710 <_Z17usbInit_HID_Wheelv+0x94>)
 8006680:	4d24      	ldr	r5, [pc, #144]	; (8006714 <_Z17usbInit_HID_Wheelv+0x98>)
	handles[HID_IDX] = &USBD_CUSTOM_HID;

	// Base Descriptor
	USB_ConfigDescType base_desc = {
 8006682:	4a25      	ldr	r2, [pc, #148]	; (8006718 <_Z17usbInit_HID_Wheelv+0x9c>)
	handles[CDC_IDX] = &USBD_CDC;
 8006684:	602b      	str	r3, [r5, #0]
	handles[HID_IDX] = &USBD_CUSTOM_HID;
 8006686:	4b25      	ldr	r3, [pc, #148]	; (800671c <_Z17usbInit_HID_Wheelv+0xa0>)
void usbInit_HID_Wheel(){
 8006688:	b085      	sub	sp, #20
	USB_ConfigDescType base_desc = {
 800668a:	6810      	ldr	r0, [r2, #0]
 800668c:	6851      	ldr	r1, [r2, #4]
	handles[HID_IDX] = &USBD_CUSTOM_HID;
 800668e:	606b      	str	r3, [r5, #4]
	USB_ConfigDescType base_desc = {
 8006690:	ab01      	add	r3, sp, #4
 8006692:	c303      	stmia	r3!, {r0, r1}
		0xC0,   /* bmAttributes: self powered */
		0x32,   /* MaxPower 100 mA */

	};

	USBD_Init(&hUsbDeviceFS, &FS_Desc_Composite, DEVICE_FS);
 8006694:	4c22      	ldr	r4, [pc, #136]	; (8006720 <_Z17usbInit_HID_Wheelv+0xa4>)
	USB_ConfigDescType base_desc = {
 8006696:	7a12      	ldrb	r2, [r2, #8]
	USBD_Init(&hUsbDeviceFS, &FS_Desc_Composite, DEVICE_FS);
 8006698:	4922      	ldr	r1, [pc, #136]	; (8006724 <_Z17usbInit_HID_Wheelv+0xa8>)
	USB_ConfigDescType base_desc = {
 800669a:	701a      	strb	r2, [r3, #0]
	USBD_Init(&hUsbDeviceFS, &FS_Desc_Composite, DEVICE_FS);
 800669c:	4620      	mov	r0, r4
 800669e:	2200      	movs	r2, #0
 80066a0:	f001 fec3 	bl	800842a <USBD_Init>

	// Add descriptors and class functions to composite device
	USBD_Composite_Set_Classes(handles,2,&base_desc);
 80066a4:	aa01      	add	r2, sp, #4
 80066a6:	4628      	mov	r0, r5
 80066a8:	2102      	movs	r1, #2
 80066aa:	f001 fd5f 	bl	800816c <USBD_Composite_Set_Classes>

	// Define endpoints

	//HID
	USBD_Composite_EPIN_To_Class(CUSTOM_HID_EPIN_ADDR, HID_IDX);
 80066ae:	2101      	movs	r1, #1
 80066b0:	2083      	movs	r0, #131	; 0x83
 80066b2:	f001 fd1d 	bl	80080f0 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPOUT_To_Class(CUSTOM_HID_EPOUT_ADDR, HID_IDX);
 80066b6:	2101      	movs	r1, #1
 80066b8:	2002      	movs	r0, #2
 80066ba:	f001 fd21 	bl	8008100 <USBD_Composite_EPOUT_To_Class>
	USBD_Composite_InterfaceToClass(HID_INTERFACE,HID_IDX);
 80066be:	2101      	movs	r1, #1
 80066c0:	2002      	movs	r0, #2
 80066c2:	f001 fd93 	bl	80081ec <USBD_Composite_InterfaceToClass>

	// CDC
	USBD_Composite_EPIN_To_Class(CDC_CMD_EP, CDC_IDX);
 80066c6:	2100      	movs	r1, #0
 80066c8:	2082      	movs	r0, #130	; 0x82
 80066ca:	f001 fd11 	bl	80080f0 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_IN_EP, CDC_IDX);
 80066ce:	2100      	movs	r1, #0
 80066d0:	2081      	movs	r0, #129	; 0x81
 80066d2:	f001 fd0d 	bl	80080f0 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_OUT_EP, CDC_IDX);
 80066d6:	2100      	movs	r1, #0
 80066d8:	2001      	movs	r0, #1
 80066da:	f001 fd09 	bl	80080f0 <USBD_Composite_EPIN_To_Class>

	USBD_Composite_InterfaceToClass(CDC_INTERFACE,CDC_IDX);
 80066de:	2100      	movs	r1, #0
 80066e0:	4608      	mov	r0, r1
 80066e2:	f001 fd83 	bl	80081ec <USBD_Composite_InterfaceToClass>
	USBD_Composite_InterfaceToClass(CDC_INTERFACE_DATA,CDC_IDX);
 80066e6:	2100      	movs	r1, #0
 80066e8:	2001      	movs	r0, #1
 80066ea:	f001 fd7f 	bl	80081ec <USBD_Composite_InterfaceToClass>


	USBD_RegisterClass(&hUsbDeviceFS, &USBD_Composite);
 80066ee:	490e      	ldr	r1, [pc, #56]	; (8006728 <_Z17usbInit_HID_Wheelv+0xac>)
 80066f0:	4620      	mov	r0, r4
 80066f2:	f001 feaf 	bl	8008454 <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80066f6:	490d      	ldr	r1, [pc, #52]	; (800672c <_Z17usbInit_HID_Wheelv+0xb0>)
 80066f8:	4620      	mov	r0, r4
 80066fa:	f001 fb53 	bl	8007da4 <USBD_CDC_RegisterInterface>
	USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 80066fe:	490c      	ldr	r1, [pc, #48]	; (8006730 <_Z17usbInit_HID_Wheelv+0xb4>)
 8006700:	4620      	mov	r0, r4
 8006702:	f002 fb15 	bl	8008d30 <USBD_CUSTOM_HID_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 8006706:	4620      	mov	r0, r4
 8006708:	f001 feab 	bl	8008462 <USBD_Start>
}
 800670c:	b005      	add	sp, #20
 800670e:	bd30      	pop	{r4, r5, pc}
 8006710:	20000020 	.word	0x20000020
 8006714:	20000b44 	.word	0x20000b44
 8006718:	0800d53a 	.word	0x0800d53a
 800671c:	2000061c 	.word	0x2000061c
 8006720:	20000914 	.word	0x20000914
 8006724:	200006f0 	.word	0x200006f0
 8006728:	200000c0 	.word	0x200000c0
 800672c:	200000af 	.word	0x200000af
 8006730:	20000608 	.word	0x20000608

08006734 <_ZN6BiquadD1Ev>:
Filters::Filters(float hz_, float ts_, ORDER od_, TYPE ty_) :
  ts( ts_ ),
  hz( hz_ ),
  od( od_ ),
  ty( ty_ )
{
 8006734:	4770      	bx	lr

08006736 <_ZN6Biquad7processEf>:
}

Filters::~Filters()
{
	// TODO Auto-generated destructor stub
}
 8006736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006738:	460e      	mov	r6, r1
 800673a:	4604      	mov	r4, r0

 800673c:	6841      	ldr	r1, [r0, #4]
 800673e:	4630      	mov	r0, r6
 8006740:	f7fa fb00 	bl	8000d44 <__aeabi_fmul>
 8006744:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006746:	f7fa f9f5 	bl	8000b34 <__addsf3>
void Filters::init(uint8_t doFlush) {
 800674a:	68a1      	ldr	r1, [r4, #8]

 800674c:	4605      	mov	r5, r0
void Filters::init(uint8_t doFlush) {
 800674e:	4630      	mov	r0, r6
 8006750:	f7fa faf8 	bl	8000d44 <__aeabi_fmul>
 8006754:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006756:	f7fa f9ed 	bl	8000b34 <__addsf3>
 800675a:	6921      	ldr	r1, [r4, #16]
 800675c:	4607      	mov	r7, r0
 800675e:	4628      	mov	r0, r5
 8006760:	f7fa faf0 	bl	8000d44 <__aeabi_fmul>
 8006764:	4601      	mov	r1, r0
 8006766:	4638      	mov	r0, r7
 8006768:	f7fa f9e2 	bl	8000b30 <__aeabi_fsub>
  if(doFlush) flush();
 800676c:	68e1      	ldr	r1, [r4, #12]
void Filters::init(uint8_t doFlush) {
 800676e:	6260      	str	r0, [r4, #36]	; 0x24
  if(doFlush) flush();
 8006770:	4630      	mov	r0, r6
 8006772:	f7fa fae7 	bl	8000d44 <__aeabi_fmul>
 8006776:	6961      	ldr	r1, [r4, #20]
 8006778:	4606      	mov	r6, r0
 800677a:	4628      	mov	r0, r5
 800677c:	f7fa fae2 	bl	8000d44 <__aeabi_fmul>
 8006780:	4601      	mov	r1, r0
 8006782:	4630      	mov	r0, r6
 8006784:	f7fa f9d4 	bl	8000b30 <__aeabi_fsub>
 8006788:	62a0      	str	r0, [r4, #40]	; 0x28
  f_err  = false;
  f_warn = false;
 800678a:	4628      	mov	r0, r5
 800678c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006790 <_ZN6Biquad10calcBiquadEv>:
      break;
    case (uint8_t)TYPE::HIGHPASS :
      initHighPass();
      break;
  }
}
 8006790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

 8006794:	2700      	movs	r7, #0
}
 8006796:	4604      	mov	r4, r0

 8006798:	6247      	str	r7, [r0, #36]	; 0x24
float Filters::filterIn(float input) {
 800679a:	6287      	str	r7, [r0, #40]	; 0x28
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800679c:	6a00      	ldr	r0, [r0, #32]
}
 800679e:	b085      	sub	sp, #20
 80067a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  if(f_err) return 0.0;

 80067a4:	f7f9 fe40 	bl	8000428 <__aeabi_f2d>
 80067a8:	2200      	movs	r2, #0
 80067aa:	4bad      	ldr	r3, [pc, #692]	; (8006a60 <_ZN6Biquad10calcBiquadEv+0x2d0>)
 80067ac:	f7f9 ffbe 	bl	800072c <__aeabi_ddiv>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	2000      	movs	r0, #0
 80067b6:	49ab      	ldr	r1, [pc, #684]	; (8006a64 <_ZN6Biquad10calcBiquadEv+0x2d4>)
 80067b8:	f002 feb4 	bl	8009524 <pow>
 80067bc:	f7fa f964 	bl	8000a88 <__aeabi_d2f>
 80067c0:	4606      	mov	r6, r0
  switch ((uint8_t)ty) {
 80067c2:	69a0      	ldr	r0, [r4, #24]
 80067c4:	f7f9 fe30 	bl	8000428 <__aeabi_f2d>
 80067c8:	a3a3      	add	r3, pc, #652	; (adr r3, 8006a58 <_ZN6Biquad10calcBiquadEv+0x2c8>)
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f7f9 fe83 	bl	80004d8 <__aeabi_dmul>
 80067d2:	f002 fe47 	bl	8009464 <tan>
 80067d6:	f7fa f957 	bl	8000a88 <__aeabi_d2f>
    case (uint8_t)TYPE::LOWPASS :
 80067da:	7823      	ldrb	r3, [r4, #0]
  switch ((uint8_t)ty) {
 80067dc:	4605      	mov	r5, r0
    case (uint8_t)TYPE::LOWPASS :
 80067de:	2b06      	cmp	r3, #6
 80067e0:	f200 81eb 	bhi.w	8006bba <_ZN6Biquad10calcBiquadEv+0x42a>
 80067e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80067e8:	003f0007 	.word	0x003f0007
 80067ec:	00a30075 	.word	0x00a30075
 80067f0:	015800d5 	.word	0x015800d5
 80067f4:	026c      	.short	0x026c
      return computeLowPass(input);
      break;
 80067f6:	69e1      	ldr	r1, [r4, #28]
 80067f8:	f7fa fb58 	bl	8000eac <__aeabi_fdiv>
 80067fc:	4629      	mov	r1, r5
 80067fe:	4680      	mov	r8, r0
 8006800:	4628      	mov	r0, r5
 8006802:	f7fa fa9f 	bl	8000d44 <__aeabi_fmul>
 8006806:	4605      	mov	r5, r0
 8006808:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800680c:	4640      	mov	r0, r8
 800680e:	f7fa f991 	bl	8000b34 <__addsf3>
 8006812:	4629      	mov	r1, r5
 8006814:	f7fa f98e 	bl	8000b34 <__addsf3>
 8006818:	4601      	mov	r1, r0
 800681a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800681e:	f7fa fb45 	bl	8000eac <__aeabi_fdiv>
    case (uint8_t)TYPE::HIGHPASS :
 8006822:	4601      	mov	r1, r0
      break;
 8006824:	4606      	mov	r6, r0
    case (uint8_t)TYPE::HIGHPASS :
 8006826:	4628      	mov	r0, r5
 8006828:	f7fa fa8c 	bl	8000d44 <__aeabi_fmul>
      return computeHighPass(input);
 800682c:	4601      	mov	r1, r0
    case (uint8_t)TYPE::HIGHPASS :
 800682e:	6060      	str	r0, [r4, #4]
 8006830:	4607      	mov	r7, r0
      return computeHighPass(input);
 8006832:	f7fa f97f 	bl	8000b34 <__addsf3>
      break;
    default:
 8006836:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
      return computeHighPass(input);
 800683a:	60a0      	str	r0, [r4, #8]
      break;
 800683c:	60e7      	str	r7, [r4, #12]
    default:
 800683e:	4628      	mov	r0, r5
 8006840:	f7fa f976 	bl	8000b30 <__aeabi_fsub>
 8006844:	4601      	mov	r1, r0
 8006846:	f7fa f975 	bl	8000b34 <__addsf3>
 800684a:	4631      	mov	r1, r6
 800684c:	f7fa fa7a 	bl	8000d44 <__aeabi_fmul>
      return input;
 8006850:	4641      	mov	r1, r8
    default:
 8006852:	6120      	str	r0, [r4, #16]
      break;
    case (uint8_t)ORDER::OD2:
        y[0] = k1*y[1] - k2*y[2] + (k0*input)/KM;
      break;
    case (uint8_t)ORDER::OD3:
        y[0] = k1*y[1] - k2*y[2] + k3*y[3] + (k0*input)/KM;
 8006854:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006858:	f7fa f96a 	bl	8000b30 <__aeabi_fsub>
 800685c:	4629      	mov	r1, r5
 800685e:	f7fa f969 	bl	8000b34 <__addsf3>
 8006862:	4631      	mov	r1, r6
 8006864:	e032      	b.n	80068cc <_ZN6Biquad10calcBiquadEv+0x13c>
void Filters::flush() {
 8006866:	69e1      	ldr	r1, [r4, #28]
 8006868:	f7fa fb20 	bl	8000eac <__aeabi_fdiv>
 800686c:	4629      	mov	r1, r5
 800686e:	4607      	mov	r7, r0
 8006870:	4628      	mov	r0, r5
 8006872:	f7fa fa67 	bl	8000d44 <__aeabi_fmul>
 8006876:	4606      	mov	r6, r0
 8006878:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800687c:	4638      	mov	r0, r7
 800687e:	f7fa f959 	bl	8000b34 <__addsf3>
 8006882:	4631      	mov	r1, r6
 8006884:	f7fa f956 	bl	8000b34 <__addsf3>
 8006888:	4601      	mov	r1, r0
 800688a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800688e:	f7fa fb0d 	bl	8000eac <__aeabi_fdiv>
    u[i] = 0.0;
 8006892:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  for(uint8_t i=0; i<MAX_ORDER; i++) {
 8006896:	6060      	str	r0, [r4, #4]
void Filters::flush() {
 8006898:	4605      	mov	r5, r0
    u[i] = 0.0;
 800689a:	f7fa fa53 	bl	8000d44 <__aeabi_fmul>
  }
 800689e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    u[i] = 0.0;
 80068a2:	60a0      	str	r0, [r4, #8]
    y[i] = 0.0;
 80068a4:	60e5      	str	r5, [r4, #12]
  }
 80068a6:	4630      	mov	r0, r6
 80068a8:	f7fa f942 	bl	8000b30 <__aeabi_fsub>
 80068ac:	4601      	mov	r1, r0
 80068ae:	f7fa f941 	bl	8000b34 <__addsf3>
 80068b2:	4629      	mov	r1, r5
 80068b4:	f7fa fa46 	bl	8000d44 <__aeabi_fmul>
}
 80068b8:	4639      	mov	r1, r7
  }
 80068ba:	6120      	str	r0, [r4, #16]

 80068bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80068c0:	f7fa f936 	bl	8000b30 <__aeabi_fsub>
 80068c4:	4631      	mov	r1, r6
 80068c6:	f7fa f935 	bl	8000b34 <__addsf3>
 80068ca:	4629      	mov	r1, r5
      break;
    case (uint8_t)ORDER::OD3:
        a  = -PI*hz;
        b  =  PI*hz*SQRT3;
        c  =  2.0*PI*hz;
        b3 = exp(-c*ts);
 80068cc:	f7fa fa3a 	bl	8000d44 <__aeabi_fmul>
 80068d0:	e172      	b.n	8006bb8 <_ZN6Biquad10calcBiquadEv+0x428>
inline float Filters::computeLowPass(float input) {
 80068d2:	69e1      	ldr	r1, [r4, #28]
 80068d4:	f7fa faea 	bl	8000eac <__aeabi_fdiv>
 80068d8:	4629      	mov	r1, r5
 80068da:	4680      	mov	r8, r0
 80068dc:	4628      	mov	r0, r5
 80068de:	f7fa fa31 	bl	8000d44 <__aeabi_fmul>
 80068e2:	4606      	mov	r6, r0
 80068e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80068e8:	4640      	mov	r0, r8
 80068ea:	f7fa f923 	bl	8000b34 <__addsf3>
 80068ee:	4631      	mov	r1, r6
 80068f0:	f7fa f920 	bl	8000b34 <__addsf3>
 80068f4:	4601      	mov	r1, r0
 80068f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80068fa:	f7fa fad7 	bl	8000eac <__aeabi_fdiv>
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 80068fe:	4601      	mov	r1, r0
inline float Filters::computeLowPass(float input) {
 8006900:	4605      	mov	r5, r0
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 8006902:	4640      	mov	r0, r8
 8006904:	f7fa fa1e 	bl	8000d44 <__aeabi_fmul>
 8006908:	6060      	str	r0, [r4, #4]
    u[i] = u[i-1];
 800690a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800690e:	60e0      	str	r0, [r4, #12]
  }
 8006910:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    y[i] = y[i-1];
 8006914:	60a7      	str	r7, [r4, #8]
  }
 8006916:	4630      	mov	r0, r6
 8006918:	f7fa f90a 	bl	8000b30 <__aeabi_fsub>
 800691c:	4601      	mov	r1, r0
 800691e:	f7fa f909 	bl	8000b34 <__addsf3>
 8006922:	4629      	mov	r1, r5
 8006924:	f7fa fa0e 	bl	8000d44 <__aeabi_fmul>

 8006928:	4641      	mov	r1, r8
  }
 800692a:	6120      	str	r0, [r4, #16]
 800692c:	e7c6      	b.n	80068bc <_ZN6Biquad10calcBiquadEv+0x12c>
      break;
 800692e:	69e1      	ldr	r1, [r4, #28]
 8006930:	f7fa fabc 	bl	8000eac <__aeabi_fdiv>
 8006934:	4629      	mov	r1, r5
 8006936:	4607      	mov	r7, r0
 8006938:	4628      	mov	r0, r5
 800693a:	f7fa fa03 	bl	8000d44 <__aeabi_fmul>
 800693e:	4605      	mov	r5, r0
 8006940:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006944:	4638      	mov	r0, r7
 8006946:	f7fa f8f5 	bl	8000b34 <__addsf3>
 800694a:	4629      	mov	r1, r5
 800694c:	f7fa f8f2 	bl	8000b34 <__addsf3>
 8006950:	4601      	mov	r1, r0
 8006952:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006956:	f7fa faa9 	bl	8000eac <__aeabi_fdiv>
 800695a:	4606      	mov	r6, r0
    case (uint8_t)ORDER::OD2:
 800695c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006960:	4628      	mov	r0, r5
 8006962:	f7fa f8e7 	bl	8000b34 <__addsf3>
 8006966:	4631      	mov	r1, r6
 8006968:	f7fa f9ec 	bl	8000d44 <__aeabi_fmul>
        y[0] = k1*y[1] - k2*y[2] + (k0*input)/KM;
 800696c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    case (uint8_t)ORDER::OD2:
 8006970:	4680      	mov	r8, r0
 8006972:	6060      	str	r0, [r4, #4]
        y[0] = k1*y[1] - k2*y[2] + (k0*input)/KM;
 8006974:	4628      	mov	r0, r5
 8006976:	f7fa f8db 	bl	8000b30 <__aeabi_fsub>
 800697a:	4601      	mov	r1, r0
 800697c:	f7fa f8da 	bl	8000b34 <__addsf3>
 8006980:	4631      	mov	r1, r6
 8006982:	f7fa f9df 	bl	8000d44 <__aeabi_fmul>
      break;
 8006986:	f8c4 800c 	str.w	r8, [r4, #12]
        y[0] = k1*y[1] - k2*y[2] + (k0*input)/KM;
 800698a:	60a0      	str	r0, [r4, #8]
    case (uint8_t)ORDER::OD3:
 800698c:	6120      	str	r0, [r4, #16]
        y[0] = k1*y[1] - k2*y[2] + k3*y[3] + (k0*input)/KM;
 800698e:	4639      	mov	r1, r7
 8006990:	e760      	b.n	8006854 <_ZN6Biquad10calcBiquadEv+0xc4>
 8006992:	f8d4 801c 	ldr.w	r8, [r4, #28]
 8006996:	4630      	mov	r0, r6
 8006998:	4641      	mov	r1, r8
 800699a:	f7fa fa87 	bl	8000eac <__aeabi_fdiv>
 800699e:	4629      	mov	r1, r5
 80069a0:	f7fa f9d0 	bl	8000d44 <__aeabi_fmul>
 80069a4:	4629      	mov	r1, r5
 80069a6:	4607      	mov	r7, r0
 80069a8:	4628      	mov	r0, r5
 80069aa:	f7fa f9cb 	bl	8000d44 <__aeabi_fmul>
 80069ae:	4606      	mov	r6, r0
 80069b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80069b4:	4638      	mov	r0, r7
 80069b6:	f7fa f8bd 	bl	8000b34 <__addsf3>
 80069ba:	4631      	mov	r1, r6
 80069bc:	f7fa f8ba 	bl	8000b34 <__addsf3>
 80069c0:	4641      	mov	r1, r8
 80069c2:	4681      	mov	r9, r0
 80069c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80069c8:	f7fa fa70 	bl	8000eac <__aeabi_fdiv>
 80069cc:	4629      	mov	r1, r5
 80069ce:	f7fa f9b9 	bl	8000d44 <__aeabi_fmul>
 80069d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80069d6:	4605      	mov	r5, r0
 80069d8:	f7fa f8ac 	bl	8000b34 <__addsf3>
 80069dc:	4631      	mov	r1, r6
 80069de:	f7fa f8a9 	bl	8000b34 <__addsf3>
 80069e2:	4629      	mov	r1, r5
 80069e4:	4682      	mov	sl, r0
 80069e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80069ea:	f7fa f8a1 	bl	8000b30 <__aeabi_fsub>
 80069ee:	4631      	mov	r1, r6
 80069f0:	f7fa f8a0 	bl	8000b34 <__addsf3>
 80069f4:	4639      	mov	r1, r7
 80069f6:	4680      	mov	r8, r0
 80069f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80069fc:	f7fa f898 	bl	8000b30 <__aeabi_fsub>
 8006a00:	4631      	mov	r1, r6
 8006a02:	f7fa f897 	bl	8000b34 <__addsf3>
 8006a06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f7fa f88f 	bl	8000b30 <__aeabi_fsub>
 8006a12:	4601      	mov	r1, r0
 8006a14:	f7fa f88e 	bl	8000b34 <__addsf3>
      break;
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	6a20      	ldr	r0, [r4, #32]
 8006a1e:	f7fa fb43 	bl	80010a8 <__aeabi_fcmpge>
 8006a22:	b308      	cbz	r0, 8006a68 <_ZN6Biquad10calcBiquadEv+0x2d8>
    default:
 8006a24:	4651      	mov	r1, sl
 8006a26:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a2a:	f7fa fa3f 	bl	8000eac <__aeabi_fdiv>
 8006a2e:	4605      	mov	r5, r0
        y[0] = input;
 8006a30:	4601      	mov	r1, r0
 8006a32:	4648      	mov	r0, r9
 8006a34:	f7fa f986 	bl	8000d44 <__aeabi_fmul>
      break;
 8006a38:	4631      	mov	r1, r6
        y[0] = input;
 8006a3a:	6060      	str	r0, [r4, #4]
      break;
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f7fa f981 	bl	8000d44 <__aeabi_fmul>
  }
 8006a42:	4639      	mov	r1, r7
      break;
 8006a44:	4606      	mov	r6, r0
 8006a46:	60a0      	str	r0, [r4, #8]
  }
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f7fa f97b 	bl	8000d44 <__aeabi_fmul>
}
 8006a4e:	4641      	mov	r1, r8
  }
 8006a50:	60e0      	str	r0, [r4, #12]
  return y[0];
 8006a52:	6126      	str	r6, [r4, #16]

 8006a54:	4628      	mov	r0, r5
 8006a56:	e739      	b.n	80068cc <_ZN6Biquad10calcBiquadEv+0x13c>
 8006a58:	54442d18 	.word	0x54442d18
 8006a5c:	400921fb 	.word	0x400921fb
 8006a60:	40340000 	.word	0x40340000
 8006a64:	40240000 	.word	0x40240000
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 8006a68:	4649      	mov	r1, r9
 8006a6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a6e:	f7fa fa1d 	bl	8000eac <__aeabi_fdiv>
    y[i] = y[i-1];
 8006a72:	4651      	mov	r1, sl
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 8006a74:	4605      	mov	r5, r0
    y[i] = y[i-1];
 8006a76:	f7fa f965 	bl	8000d44 <__aeabi_fmul>
    u[i] = u[i-1];
 8006a7a:	4631      	mov	r1, r6
    y[i] = y[i-1];
 8006a7c:	6060      	str	r0, [r4, #4]
    u[i] = u[i-1];
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f7fa f960 	bl	8000d44 <__aeabi_fmul>
  }
 8006a84:	4641      	mov	r1, r8
    u[i] = u[i-1];
 8006a86:	4606      	mov	r6, r0
 8006a88:	60a0      	str	r0, [r4, #8]
  }
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f7fa f95a 	bl	8000d44 <__aeabi_fmul>
  u[0] = input;
 8006a90:	6126      	str	r6, [r4, #16]
  }
 8006a92:	60e0      	str	r0, [r4, #12]

 8006a94:	4639      	mov	r1, r7
 8006a96:	e7dd      	b.n	8006a54 <_ZN6Biquad10calcBiquadEv+0x2c4>
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7fa f84a 	bl	8000b34 <__addsf3>
      break;
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4682      	mov	sl, r0
 8006aa4:	6a20      	ldr	r0, [r4, #32]
 8006aa6:	f7fa faff 	bl	80010a8 <__aeabi_fcmpge>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	f000 8088 	beq.w	8006bc0 <_ZN6Biquad10calcBiquadEv+0x430>
    case (uint8_t)ORDER::OD2:
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f7f9 fcb9 	bl	8000428 <__aeabi_f2d>
 8006ab6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006d78 <_ZN6Biquad10calcBiquadEv+0x5e8>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fd0c 	bl	80004d8 <__aeabi_dmul>
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	4689      	mov	r9, r1
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7fa f93c 	bl	8000d44 <__aeabi_fmul>
 8006acc:	4683      	mov	fp, r0
 8006ace:	f7f9 fcab 	bl	8000428 <__aeabi_f2d>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	e9cd 0100 	strd	r0, r1, [sp]
 8006ad8:	4ba9      	ldr	r3, [pc, #676]	; (8006d80 <_ZN6Biquad10calcBiquadEv+0x5f0>)
 8006ada:	4640      	mov	r0, r8
 8006adc:	4649      	mov	r1, r9
 8006ade:	f7f9 fb45 	bl	800016c <__adddf3>
 8006ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ae6:	f7f9 fb41 	bl	800016c <__adddf3>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	2000      	movs	r0, #0
 8006af0:	49a3      	ldr	r1, [pc, #652]	; (8006d80 <_ZN6Biquad10calcBiquadEv+0x5f0>)
 8006af2:	f7f9 fe1b 	bl	800072c <__aeabi_ddiv>
 8006af6:	f7f9 ffc7 	bl	8000a88 <__aeabi_d2f>
 8006afa:	4607      	mov	r7, r0
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8006afc:	4650      	mov	r0, sl
 8006afe:	f002 fe6d 	bl	80097dc <sqrtf>
    case (uint8_t)ORDER::OD3:
 8006b02:	4629      	mov	r1, r5
 8006b04:	9002      	str	r0, [sp, #8]
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7fa f91c 	bl	8000d44 <__aeabi_fmul>
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f7fa f919 	bl	8000d44 <__aeabi_fmul>
 8006b12:	4606      	mov	r6, r0
 8006b14:	9b02      	ldr	r3, [sp, #8]
 8006b16:	4628      	mov	r0, r5
 8006b18:	4619      	mov	r1, r3
 8006b1a:	f7fa f913 	bl	8000d44 <__aeabi_fmul>
 8006b1e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006b22:	f7fa f807 	bl	8000b34 <__addsf3>
 8006b26:	4631      	mov	r1, r6
 8006b28:	f7fa f804 	bl	8000b34 <__addsf3>
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	f7fa f909 	bl	8000d44 <__aeabi_fmul>
    case (uint8_t)ORDER::OD4:
 8006b32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    case (uint8_t)ORDER::OD3:
 8006b36:	6060      	str	r0, [r4, #4]
    case (uint8_t)ORDER::OD4:
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f7f9 fff9 	bl	8000b30 <__aeabi_fsub>
 8006b3e:	4601      	mov	r1, r0
 8006b40:	f7f9 fff8 	bl	8000b34 <__addsf3>
 8006b44:	4639      	mov	r1, r7
 8006b46:	f7fa f8fd 	bl	8000d44 <__aeabi_fmul>
 8006b4a:	60a0      	str	r0, [r4, #8]
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	f002 fe45 	bl	80097dc <sqrtf>
        y[0] = k1*y[1] + k2*y[2] + j0*u[0] + j1*u[1] + j2*u[2];
 8006b52:	4601      	mov	r1, r0
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7fa f8f5 	bl	8000d44 <__aeabi_fmul>
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006b60:	f7f9 ffe6 	bl	8000b30 <__aeabi_fsub>
 8006b64:	4631      	mov	r1, r6
        a  = -PI*hz*SQRT2;
 8006b66:	f7f9 ffe5 	bl	8000b34 <__addsf3>
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	f7fa f8ea 	bl	8000d44 <__aeabi_fmul>
        b  =  PI*hz*SQRT2;
 8006b70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        a  = -PI*hz*SQRT2;
 8006b74:	60e0      	str	r0, [r4, #12]
        b  =  PI*hz*SQRT2;
 8006b76:	4658      	mov	r0, fp
 8006b78:	f7f9 ffda 	bl	8000b30 <__aeabi_fsub>
 8006b7c:	4601      	mov	r1, r0
 8006b7e:	f7f9 ffd9 	bl	8000b34 <__addsf3>
 8006b82:	4639      	mov	r1, r7
 8006b84:	f7fa f8de 	bl	8000d44 <__aeabi_fmul>
        k2 = ap(exp(2.0*ts*a));
 8006b88:	4642      	mov	r2, r8
 8006b8a:	464b      	mov	r3, r9
        b  =  PI*hz*SQRT2;
 8006b8c:	6120      	str	r0, [r4, #16]
        k2 = ap(exp(2.0*ts*a));
 8006b8e:	497c      	ldr	r1, [pc, #496]	; (8006d80 <_ZN6Biquad10calcBiquadEv+0x5f0>)
 8006b90:	2000      	movs	r0, #0
 8006b92:	f7f9 fae9 	bl	8000168 <__aeabi_dsub>
 8006b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b9a:	f7f9 fae7 	bl	800016c <__adddf3>
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	4689      	mov	r9, r1
 8006ba4:	f7f9 fc40 	bl	8000428 <__aeabi_f2d>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 fc92 	bl	80004d8 <__aeabi_dmul>
 8006bb4:	f7f9 ff68 	bl	8000a88 <__aeabi_d2f>
        b3 = exp(-c*ts);
 8006bb8:	6160      	str	r0, [r4, #20]
        b2 = exp(2.0*ts*a);
        b1 = 2.0*exp(a*ts)*cos(b*ts);
        k3 = ap(b2*b3);
        k2 = ap(b2 + b1*b3);
        k1 = ap(b1 + b3);
        k0 = ap(1.0*KM - b1*KM + b2*KM -b3*KM + b1*KM*b3 - b2*KM*b3);
 8006bba:	b005      	add	sp, #20
 8006bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	f002 fe0b 	bl	80097dc <sqrtf>
  }
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4607      	mov	r7, r0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7fa f8ba 	bl	8000d44 <__aeabi_fmul>
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7fa f8b7 	bl	8000d44 <__aeabi_fmul>
 8006bd6:	4681      	mov	r9, r0
 8006bd8:	4639      	mov	r1, r7
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f7fa f8b2 	bl	8000d44 <__aeabi_fmul>
 8006be0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006be4:	f7f9 ffa6 	bl	8000b34 <__addsf3>
 8006be8:	4649      	mov	r1, r9
 8006bea:	f7f9 ffa3 	bl	8000b34 <__addsf3>
 8006bee:	4601      	mov	r1, r0
 8006bf0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006bf4:	f7fa f95a 	bl	8000eac <__aeabi_fdiv>
 8006bf8:	4680      	mov	r8, r0
  return y[0];
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f7f9 fc14 	bl	8000428 <__aeabi_f2d>
 8006c00:	a35d      	add	r3, pc, #372	; (adr r3, 8006d78 <_ZN6Biquad10calcBiquadEv+0x5e8>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f7f9 fc67 	bl	80004d8 <__aeabi_dmul>
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	4628      	mov	r0, r5
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7fa f897 	bl	8000d44 <__aeabi_fmul>
 8006c16:	4683      	mov	fp, r0
 8006c18:	f7f9 fc06 	bl	8000428 <__aeabi_f2d>
 8006c1c:	e9cd 0100 	strd	r0, r1, [sp]
 8006c20:	4640      	mov	r0, r8
 8006c22:	f7f9 fc01 	bl	8000428 <__aeabi_f2d>
 8006c26:	2200      	movs	r2, #0
 8006c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c2c:	4b54      	ldr	r3, [pc, #336]	; (8006d80 <_ZN6Biquad10calcBiquadEv+0x5f0>)
 8006c2e:	4630      	mov	r0, r6
 8006c30:	4639      	mov	r1, r7
 8006c32:	f7f9 fa9b 	bl	800016c <__adddf3>
 8006c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c3a:	f7f9 fa97 	bl	800016c <__adddf3>
 8006c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c42:	f7f9 fc49 	bl	80004d8 <__aeabi_dmul>
 8006c46:	f7f9 ff1f 	bl	8000a88 <__aeabi_d2f>
}
 8006c4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  return y[0];
 8006c4e:	6060      	str	r0, [r4, #4]
}
 8006c50:	4658      	mov	r0, fp
 8006c52:	f7f9 ff6d 	bl	8000b30 <__aeabi_fsub>
 8006c56:	4601      	mov	r1, r0
 8006c58:	f7f9 ff6c 	bl	8000b34 <__addsf3>
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	f7fa f871 	bl	8000d44 <__aeabi_fmul>

 8006c62:	4632      	mov	r2, r6
}
 8006c64:	60a0      	str	r0, [r4, #8]

 8006c66:	463b      	mov	r3, r7
 8006c68:	2000      	movs	r0, #0
 8006c6a:	4945      	ldr	r1, [pc, #276]	; (8006d80 <_ZN6Biquad10calcBiquadEv+0x5f0>)
 8006c6c:	f7f9 fa7c 	bl	8000168 <__aeabi_dsub>
 8006c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c74:	f7f9 fa7a 	bl	800016c <__adddf3>
 8006c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c7c:	f7f9 fc2c 	bl	80004d8 <__aeabi_dmul>
 8006c80:	f7f9 ff02 	bl	8000a88 <__aeabi_d2f>

 8006c84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000

 8006c88:	60e0      	str	r0, [r4, #12]

 8006c8a:	4648      	mov	r0, r9
 8006c8c:	f7f9 ff50 	bl	8000b30 <__aeabi_fsub>
 8006c90:	4601      	mov	r1, r0
 8006c92:	f7f9 ff4f 	bl	8000b34 <__addsf3>
 8006c96:	4641      	mov	r1, r8
 8006c98:	f7fa f854 	bl	8000d44 <__aeabi_fmul>
 8006c9c:	6120      	str	r0, [r4, #16]
 8006c9e:	4650      	mov	r0, sl
 8006ca0:	f002 fd9c 	bl	80097dc <sqrtf>
inline void  Filters::initLowPass() {
 8006ca4:	4601      	mov	r1, r0
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f7fa f84c 	bl	8000d44 <__aeabi_fmul>
 8006cac:	4601      	mov	r1, r0
 8006cae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006cb2:	f7f9 ff3d 	bl	8000b30 <__aeabi_fsub>
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	f7f9 ff3c 	bl	8000b34 <__addsf3>
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	e605      	b.n	80068cc <_ZN6Biquad10calcBiquadEv+0x13c>
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7f9 ff36 	bl	8000b34 <__addsf3>
        k1 = exp(-a*ts);
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4682      	mov	sl, r0
 8006ccc:	6a20      	ldr	r0, [r4, #32]
 8006cce:	f7fa f9eb 	bl	80010a8 <__aeabi_fcmpge>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d056      	beq.n	8006d84 <_ZN6Biquad10calcBiquadEv+0x5f4>
        k0 = 1.0 - k1;
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f7f9 fba6 	bl	8000428 <__aeabi_f2d>
 8006cdc:	a326      	add	r3, pc, #152	; (adr r3, 8006d78 <_ZN6Biquad10calcBiquadEv+0x5e8>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fbf9 	bl	80004d8 <__aeabi_dmul>
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	4689      	mov	r9, r1
 8006cea:	4628      	mov	r0, r5
 8006cec:	4629      	mov	r1, r5
 8006cee:	f7fa f829 	bl	8000d44 <__aeabi_fmul>
 8006cf2:	4683      	mov	fp, r0
 8006cf4:	f7f9 fb98 	bl	8000428 <__aeabi_f2d>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <_ZN6Biquad10calcBiquadEv+0x5f0>)
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 fa32 	bl	800016c <__adddf3>
 8006d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d0c:	f7f9 fa2e 	bl	800016c <__adddf3>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	2000      	movs	r0, #0
 8006d16:	491a      	ldr	r1, [pc, #104]	; (8006d80 <_ZN6Biquad10calcBiquadEv+0x5f0>)
 8006d18:	f7f9 fd08 	bl	800072c <__aeabi_ddiv>
 8006d1c:	f7f9 feb4 	bl	8000a88 <__aeabi_d2f>
 8006d20:	4607      	mov	r7, r0
 8006d22:	4650      	mov	r0, sl
 8006d24:	f002 fd5a 	bl	80097dc <sqrtf>
      break;
 8006d28:	4601      	mov	r1, r0
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f7fa f80a 	bl	8000d44 <__aeabi_fmul>
 8006d30:	4631      	mov	r1, r6
 8006d32:	f7f9 feff 	bl	8000b34 <__addsf3>
 8006d36:	4659      	mov	r1, fp
 8006d38:	f7f9 fefc 	bl	8000b34 <__addsf3>
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	f7fa f801 	bl	8000d44 <__aeabi_fmul>
    case (uint8_t)ORDER::OD2:
 8006d42:	4631      	mov	r1, r6
      break;
 8006d44:	6060      	str	r0, [r4, #4]
    case (uint8_t)ORDER::OD2:
 8006d46:	4658      	mov	r0, fp
 8006d48:	f7f9 fef2 	bl	8000b30 <__aeabi_fsub>
 8006d4c:	4601      	mov	r1, r0
 8006d4e:	f7f9 fef1 	bl	8000b34 <__addsf3>
 8006d52:	4639      	mov	r1, r7
 8006d54:	f7f9 fff6 	bl	8000d44 <__aeabi_fmul>
 8006d58:	60a0      	str	r0, [r4, #8]
 8006d5a:	4650      	mov	r0, sl
 8006d5c:	f002 fd3e 	bl	80097dc <sqrtf>
        a  = -PI*hz*SQRT2;
 8006d60:	4601      	mov	r1, r0
 8006d62:	4628      	mov	r0, r5
 8006d64:	f7f9 ffee 	bl	8000d44 <__aeabi_fmul>
 8006d68:	4601      	mov	r1, r0
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f7f9 fee0 	bl	8000b30 <__aeabi_fsub>
 8006d70:	4659      	mov	r1, fp
 8006d72:	e6f8      	b.n	8006b66 <_ZN6Biquad10calcBiquadEv+0x3d6>
 8006d74:	f3af 8000 	nop.w
 8006d78:	667f3bcd 	.word	0x667f3bcd
 8006d7c:	3ff6a09e 	.word	0x3ff6a09e
 8006d80:	3ff00000 	.word	0x3ff00000
 8006d84:	4650      	mov	r0, sl
 8006d86:	f002 fd29 	bl	80097dc <sqrtf>
      break;
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f7f9 ffd8 	bl	8000d44 <__aeabi_fmul>
 8006d94:	4607      	mov	r7, r0
 8006d96:	4641      	mov	r1, r8
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f7f9 ffd3 	bl	8000d44 <__aeabi_fmul>
 8006d9e:	4631      	mov	r1, r6
 8006da0:	f7f9 fec8 	bl	8000b34 <__addsf3>
 8006da4:	4639      	mov	r1, r7
 8006da6:	f7f9 fec5 	bl	8000b34 <__addsf3>
 8006daa:	4601      	mov	r1, r0
 8006dac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006db0:	f7fa f87c 	bl	8000eac <__aeabi_fdiv>
 8006db4:	4683      	mov	fp, r0
    case (uint8_t)ORDER::OD3:
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7f9 fb36 	bl	8000428 <__aeabi_f2d>
 8006dbc:	a32c      	add	r3, pc, #176	; (adr r3, 8006e70 <_ZN6Biquad10calcBiquadEv+0x6e0>)
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f7f9 fb89 	bl	80004d8 <__aeabi_dmul>
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	4638      	mov	r0, r7
 8006dca:	4689      	mov	r9, r1
 8006dcc:	f7f9 fb2c 	bl	8000428 <__aeabi_f2d>
 8006dd0:	e9cd 0100 	strd	r0, r1, [sp]
 8006dd4:	4658      	mov	r0, fp
 8006dd6:	f7f9 fb27 	bl	8000428 <__aeabi_f2d>
 8006dda:	2200      	movs	r2, #0
 8006ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de0:	4b25      	ldr	r3, [pc, #148]	; (8006e78 <_ZN6Biquad10calcBiquadEv+0x6e8>)
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7f9 f9c1 	bl	800016c <__adddf3>
 8006dea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dee:	f7f9 f9bd 	bl	800016c <__adddf3>
 8006df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006df6:	f7f9 fb6f 	bl	80004d8 <__aeabi_dmul>
 8006dfa:	f7f9 fe45 	bl	8000a88 <__aeabi_d2f>
        a  = -PI*hz;
 8006dfe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    case (uint8_t)ORDER::OD3:
 8006e02:	6060      	str	r0, [r4, #4]
        a  = -PI*hz;
 8006e04:	4638      	mov	r0, r7
 8006e06:	f7f9 fe93 	bl	8000b30 <__aeabi_fsub>
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	f7f9 fe92 	bl	8000b34 <__addsf3>
 8006e10:	4659      	mov	r1, fp
 8006e12:	f7f9 ff97 	bl	8000d44 <__aeabi_fmul>
        b  =  PI*hz*SQRT3;
 8006e16:	4642      	mov	r2, r8
        a  = -PI*hz;
 8006e18:	60a0      	str	r0, [r4, #8]
        b  =  PI*hz*SQRT3;
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	4916      	ldr	r1, [pc, #88]	; (8006e78 <_ZN6Biquad10calcBiquadEv+0x6e8>)
 8006e20:	f7f9 f9a2 	bl	8000168 <__aeabi_dsub>
 8006e24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e28:	f7f9 f9a0 	bl	800016c <__adddf3>
 8006e2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e30:	f7f9 fb52 	bl	80004d8 <__aeabi_dmul>
 8006e34:	f7f9 fe28 	bl	8000a88 <__aeabi_d2f>
        c  =  2.0*PI*hz;
 8006e38:	4631      	mov	r1, r6
        b  =  PI*hz*SQRT3;
 8006e3a:	60e0      	str	r0, [r4, #12]
        c  =  2.0*PI*hz;
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	f7f9 fe77 	bl	8000b30 <__aeabi_fsub>
 8006e42:	4601      	mov	r1, r0
 8006e44:	f7f9 fe76 	bl	8000b34 <__addsf3>
 8006e48:	4659      	mov	r1, fp
 8006e4a:	f7f9 ff7b 	bl	8000d44 <__aeabi_fmul>
 8006e4e:	6120      	str	r0, [r4, #16]
 8006e50:	4650      	mov	r0, sl
 8006e52:	f002 fcc3 	bl	80097dc <sqrtf>
        b3 = exp(-c*ts);
 8006e56:	4601      	mov	r1, r0
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f7f9 ff73 	bl	8000d44 <__aeabi_fmul>
 8006e5e:	4601      	mov	r1, r0
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7f9 fe65 	bl	8000b30 <__aeabi_fsub>
 8006e66:	4639      	mov	r1, r7
 8006e68:	f7f9 fe64 	bl	8000b34 <__addsf3>
 8006e6c:	4659      	mov	r1, fp
 8006e6e:	e52d      	b.n	80068cc <_ZN6Biquad10calcBiquadEv+0x13c>
 8006e70:	667f3bcd 	.word	0x667f3bcd
 8006e74:	3ff6a09e 	.word	0x3ff6a09e
 8006e78:	3ff00000 	.word	0x3ff00000

08006e7c <_ZN6Biquad9setBiquadE10BiquadTypefff>:
  switch ((uint8_t)ty) {
 8006e7c:	b410      	push	{r4}
      initLowPass();
 8006e7e:	61c3      	str	r3, [r0, #28]
    case (uint8_t)TYPE::HIGHPASS :
 8006e80:	9b01      	ldr	r3, [sp, #4]
    case (uint8_t)TYPE::LOWPASS :
 8006e82:	7001      	strb	r1, [r0, #0]
      break;
 8006e84:	6182      	str	r2, [r0, #24]
    case (uint8_t)TYPE::HIGHPASS :
 8006e86:	6203      	str	r3, [r0, #32]
      break;
 8006e88:	bc10      	pop	{r4}
      initHighPass();
 8006e8a:	f7ff bc81 	b.w	8006790 <_ZN6Biquad10calcBiquadEv>

08006e8e <_ZN6BiquadC1E10BiquadTypefff>:
Filters::Filters(float hz_, float ts_, ORDER od_, TYPE ty_) :
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	4604      	mov	r4, r0
      initLowPass();
 8006e92:	61c3      	str	r3, [r0, #28]
    case (uint8_t)TYPE::HIGHPASS :
 8006e94:	9b02      	ldr	r3, [sp, #8]
    case (uint8_t)TYPE::LOWPASS :
 8006e96:	7001      	strb	r1, [r0, #0]
      break;
 8006e98:	6182      	str	r2, [r0, #24]
    case (uint8_t)TYPE::HIGHPASS :
 8006e9a:	6203      	str	r3, [r0, #32]
      initHighPass();
 8006e9c:	f7ff fc78 	bl	8006790 <_ZN6Biquad10calcBiquadEv>
  hz( hz_ ),
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	bd10      	pop	{r4, pc}

08006ea4 <_ZN6HidFFB6hidGetEhtPPh>:
void HidFFB::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){
	// Feature gets go here

	id = id - FFB_ID_OFFSET;

	switch(id){
 8006ea4:	2912      	cmp	r1, #18
 8006ea6:	d002      	beq.n	8006eae <_ZN6HidFFB6hidGetEhtPPh+0xa>
 8006ea8:	2913      	cmp	r1, #19
 8006eaa:	d003      	beq.n	8006eb4 <_ZN6HidFFB6hidGetEhtPPh+0x10>
 8006eac:	4770      	bx	lr
	case HID_ID_BLKLDREP:
		//printf("Get Block Report\n");
		*return_buf = (uint8_t*)(&this->blockLoad_report);
 8006eae:	302e      	adds	r0, #46	; 0x2e
		break;
	case HID_ID_POOLREP:
		//printf("Get Pool Report\n");
		*return_buf = (uint8_t*)(&this->pool_report);
 8006eb0:	6018      	str	r0, [r3, #0]
		break;
	}
}
 8006eb2:	4770      	bx	lr
		*return_buf = (uint8_t*)(&this->pool_report);
 8006eb4:	3033      	adds	r0, #51	; 0x33
 8006eb6:	e7fb      	b.n	8006eb0 <_ZN6HidFFB6hidGetEhtPPh+0xc>

08006eb8 <_ZN6HidFFBD1Ev>:
HidFFB::~HidFFB() {
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4b02      	ldr	r3, [pc, #8]	; (8006ec8 <_ZN6HidFFBD1Ev+0x10>)
 8006ebe:	6003      	str	r3, [r0, #0]
 8006ec0:	f000 fcf6 	bl	80078b0 <_ZN13UsbHidHandlerD1Ev>
}
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	bd10      	pop	{r4, pc}
 8006ec8:	0800d990 	.word	0x0800d990

08006ecc <_ZN6HidFFBD0Ev>:
HidFFB::~HidFFB() {
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	4604      	mov	r4, r0
}
 8006ed0:	f7ff fff2 	bl	8006eb8 <_ZN6HidFFBD1Ev>
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8006eda:	f001 ffc5 	bl	8008e68 <_ZdlPvj>
 8006ede:	4620      	mov	r0, r4
 8006ee0:	bd10      	pop	{r4, pc}
	...

08006ee4 <_ZN6HidFFBC1Ev>:
HidFFB::HidFFB() {
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	f000 fcec 	bl	80078c4 <_ZN13UsbHidHandlerC1Ev>
 8006eec:	4a48      	ldr	r2, [pc, #288]	; (8007010 <_ZN6HidFFBC1Ev+0x12c>)
 8006eee:	4b49      	ldr	r3, [pc, #292]	; (8007014 <_ZN6HidFFBC1Ev+0x130>)
 8006ef0:	60e2      	str	r2, [r4, #12]
 8006ef2:	61a2      	str	r2, [r4, #24]
 8006ef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ef8:	83e2      	strh	r2, [r4, #30]
	{ // FFB: PID Block Load Feature Report
	uint8_t	reportId = HID_ID_BLKLDREP;	// =2
	uint8_t effectBlockIndex;	// 1..40
	uint8_t	loadStatus;	// 1=Success,2=Full,3=Error
	uint16_t	ramPoolAvailable;	// =0 or 0xFFFF?
} __attribute__((packed)) FFB_BlockLoad_Feature_Data_t;
 8006efa:	2212      	movs	r2, #18
 8006efc:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	{ // FFB: PID Pool Feature Report
	uint8_t	reportId = HID_ID_POOLREP;
	uint16_t	ramPoolSize = MAX_EFFECTS;
	uint8_t		maxSimultaneousEffects = MAX_EFFECTS;
	uint8_t		memoryManagement = 3;	// Bits: 0=DeviceManagedPool, 1=SharedParameterBlocks
} __attribute__((packed)) FFB_PIDPool_Feature_Data_t;
 8006f00:	2213      	movs	r2, #19
 8006f02:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 8006f06:	2228      	movs	r2, #40	; 0x28
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
 8006f14:	2203      	movs	r2, #3
 8006f16:	25ff      	movs	r5, #255	; 0xff
 8006f18:	2600      	movs	r6, #0
 8006f1a:	7123      	strb	r3, [r4, #4]
 8006f1c:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
} __attribute__((packed)) reportFFB_status_t;
 8006f20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8006f24:	2202      	movs	r2, #2
 8006f26:	230a      	movs	r3, #10
 8006f28:	493b      	ldr	r1, [pc, #236]	; (8007018 <_ZN6HidFFBC1Ev+0x134>)
 8006f2a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8006f2e:	60a1      	str	r1, [r4, #8]
 8006f30:	6161      	str	r1, [r4, #20]
 8006f32:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8006f36:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	7426      	strb	r6, [r4, #16]
 8006f3e:	7726      	strb	r6, [r4, #28]
 8006f40:	6226      	str	r6, [r4, #32]
 8006f42:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8006f46:	84e6      	strh	r6, [r4, #38]	; 0x26
 8006f48:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
 8006f4c:	8566      	strh	r6, [r4, #42]	; 0x2a
 8006f4e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8006f52:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
} __attribute__((packed)) FFB_PIDPool_Feature_Data_t;
 8006f56:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
 8006f5a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8006f5e:	f005 f92e 	bl	800c1be <memset>
	this->registerHidCallback();
 8006f62:	4620      	mov	r0, r4
HidFFB::HidFFB() {
 8006f64:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
 8006f68:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
 8006f6c:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
 8006f70:	f884 50c2 	strb.w	r5, [r4, #194]	; 0xc2
 8006f74:	f884 50ee 	strb.w	r5, [r4, #238]	; 0xee
 8006f78:	f884 511a 	strb.w	r5, [r4, #282]	; 0x11a
 8006f7c:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
 8006f80:	f884 5172 	strb.w	r5, [r4, #370]	; 0x172
 8006f84:	f884 519e 	strb.w	r5, [r4, #414]	; 0x19e
 8006f88:	f884 51ca 	strb.w	r5, [r4, #458]	; 0x1ca
 8006f8c:	f884 51f6 	strb.w	r5, [r4, #502]	; 0x1f6
 8006f90:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
 8006f94:	f884 524e 	strb.w	r5, [r4, #590]	; 0x24e
 8006f98:	f884 527a 	strb.w	r5, [r4, #634]	; 0x27a
 8006f9c:	f884 52a6 	strb.w	r5, [r4, #678]	; 0x2a6
 8006fa0:	f884 52d2 	strb.w	r5, [r4, #722]	; 0x2d2
 8006fa4:	f884 52fe 	strb.w	r5, [r4, #766]	; 0x2fe
 8006fa8:	f884 532a 	strb.w	r5, [r4, #810]	; 0x32a
 8006fac:	f884 5356 	strb.w	r5, [r4, #854]	; 0x356
 8006fb0:	f884 5382 	strb.w	r5, [r4, #898]	; 0x382
 8006fb4:	f884 53ae 	strb.w	r5, [r4, #942]	; 0x3ae
 8006fb8:	f884 53da 	strb.w	r5, [r4, #986]	; 0x3da
 8006fbc:	f884 5406 	strb.w	r5, [r4, #1030]	; 0x406
 8006fc0:	f884 5432 	strb.w	r5, [r4, #1074]	; 0x432
 8006fc4:	f884 545e 	strb.w	r5, [r4, #1118]	; 0x45e
 8006fc8:	f884 548a 	strb.w	r5, [r4, #1162]	; 0x48a
 8006fcc:	f884 54b6 	strb.w	r5, [r4, #1206]	; 0x4b6
 8006fd0:	f884 54e2 	strb.w	r5, [r4, #1250]	; 0x4e2
 8006fd4:	f884 550e 	strb.w	r5, [r4, #1294]	; 0x50e
 8006fd8:	f884 553a 	strb.w	r5, [r4, #1338]	; 0x53a
 8006fdc:	f884 5566 	strb.w	r5, [r4, #1382]	; 0x566
 8006fe0:	f884 5592 	strb.w	r5, [r4, #1426]	; 0x592
 8006fe4:	f884 55be 	strb.w	r5, [r4, #1470]	; 0x5be
 8006fe8:	f884 55ea 	strb.w	r5, [r4, #1514]	; 0x5ea
 8006fec:	f884 5616 	strb.w	r5, [r4, #1558]	; 0x616
 8006ff0:	f884 5642 	strb.w	r5, [r4, #1602]	; 0x642
 8006ff4:	f884 566e 	strb.w	r5, [r4, #1646]	; 0x66e
 8006ff8:	f884 569a 	strb.w	r5, [r4, #1690]	; 0x69a
 8006ffc:	f884 56c6 	strb.w	r5, [r4, #1734]	; 0x6c6
 8007000:	f884 56f2 	strb.w	r5, [r4, #1778]	; 0x6f2
 8007004:	f8c4 671c 	str.w	r6, [r4, #1820]	; 0x71c
	this->registerHidCallback();
 8007008:	f000 fc62 	bl	80078d0 <_ZN13UsbHidHandler19registerHidCallbackEv>
}
 800700c:	4620      	mov	r0, r4
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	3e4ccccd 	.word	0x3e4ccccd
 8007014:	0800d990 	.word	0x0800d990
 8007018:	42480000 	.word	0x42480000

0800701c <_ZN6HidFFB11free_effectEt>:
	if(idx < MAX_EFFECTS){
 800701c:	2927      	cmp	r1, #39	; 0x27
void HidFFB::free_effect(uint16_t idx){
 800701e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(idx < MAX_EFFECTS){
 8007020:	d80f      	bhi.n	8007042 <_ZN6HidFFB11free_effectEt+0x26>
		effects[idx].type=FFB_EFFECT_NONE;
 8007022:	272c      	movs	r7, #44	; 0x2c
 8007024:	2600      	movs	r6, #0
 8007026:	fb07 0401 	mla	r4, r7, r1, r0
		if(effects[idx].filter != nullptr){
 800702a:	6d65      	ldr	r5, [r4, #84]	; 0x54
		effects[idx].type=FFB_EFFECT_NONE;
 800702c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
		if(effects[idx].filter != nullptr){
 8007030:	b13d      	cbz	r5, 8007042 <_ZN6HidFFB11free_effectEt+0x26>
			delete effects[idx].filter;
 8007032:	4628      	mov	r0, r5
 8007034:	f7ff fb7e 	bl	8006734 <_ZN6BiquadD1Ev>
 8007038:	4639      	mov	r1, r7
 800703a:	4628      	mov	r0, r5
 800703c:	f001 ff14 	bl	8008e68 <_ZdlPvj>
			effects[idx].filter = nullptr;
 8007040:	6566      	str	r6, [r4, #84]	; 0x54
}
 8007042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007044 <_ZN6HidFFB11set_filtersEP10FFB_Effect>:
	//printf("SetEffect: %d, Axis: %d,Type: %d\n",effect->effectType,effect->enableAxis,effect->effectType);
	if(!ffb_active)
		start_FFB();
}

void HidFFB::set_filters(FFB_Effect* effect){
 8007044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(effect->type){
 8007046:	784b      	ldrb	r3, [r1, #1]
void HidFFB::set_filters(FFB_Effect* effect){
 8007048:	4604      	mov	r4, r0
	switch(effect->type){
 800704a:	2b09      	cmp	r3, #9
void HidFFB::set_filters(FFB_Effect* effect){
 800704c:	460d      	mov	r5, r1
	switch(effect->type){
 800704e:	d003      	beq.n	8007058 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x14>
 8007050:	2b0b      	cmp	r3, #11
 8007052:	d027      	beq.n	80070a4 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x60>
				effect->filter->setBiquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
			else
				effect->filter = new Biquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
			break;
	}
}
 8007054:	b003      	add	sp, #12
 8007056:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(effect->filter != nullptr)
 8007058:	698e      	ldr	r6, [r1, #24]
 800705a:	2700      	movs	r7, #0
 800705c:	b176      	cbz	r6, 800707c <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x38>
				effect->filter->setBiquad(damper_type,(float)damper_f/calcfrequency, damper_q, (float)0.0);
 800705e:	8bc0      	ldrh	r0, [r0, #30]
 8007060:	f7f9 fe1c 	bl	8000c9c <__aeabi_i2f>
 8007064:	4601      	mov	r1, r0
 8007066:	68a0      	ldr	r0, [r4, #8]
 8007068:	f7f9 ff20 	bl	8000eac <__aeabi_fdiv>
 800706c:	7c21      	ldrb	r1, [r4, #16]
 800706e:	68e3      	ldr	r3, [r4, #12]
 8007070:	9700      	str	r7, [sp, #0]
				effect->filter->setBiquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
 8007072:	4602      	mov	r2, r0
 8007074:	4630      	mov	r0, r6
 8007076:	f7ff ff01 	bl	8006e7c <_ZN6Biquad9setBiquadE10BiquadTypefff>
 800707a:	e7eb      	b.n	8007054 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x10>
				effect->filter = new Biquad(damper_type,(float)damper_f/calcfrequency, damper_q, (float)0.0);
 800707c:	202c      	movs	r0, #44	; 0x2c
 800707e:	f001 fef5 	bl	8008e6c <_Znwj>
 8007082:	4606      	mov	r6, r0
 8007084:	8be0      	ldrh	r0, [r4, #30]
 8007086:	f7f9 fe09 	bl	8000c9c <__aeabi_i2f>
 800708a:	4601      	mov	r1, r0
 800708c:	68a0      	ldr	r0, [r4, #8]
 800708e:	f7f9 ff0d 	bl	8000eac <__aeabi_fdiv>
 8007092:	7c21      	ldrb	r1, [r4, #16]
 8007094:	68e3      	ldr	r3, [r4, #12]
 8007096:	9700      	str	r7, [sp, #0]
				effect->filter = new Biquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
 8007098:	4602      	mov	r2, r0
 800709a:	4630      	mov	r0, r6
 800709c:	f7ff fef7 	bl	8006e8e <_ZN6BiquadC1E10BiquadTypefff>
 80070a0:	61ae      	str	r6, [r5, #24]
}
 80070a2:	e7d7      	b.n	8007054 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x10>
			if(effect->filter != nullptr)
 80070a4:	698e      	ldr	r6, [r1, #24]
 80070a6:	2700      	movs	r7, #0
 80070a8:	b156      	cbz	r6, 80070c0 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x7c>
				effect->filter->setBiquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
 80070aa:	8bc0      	ldrh	r0, [r0, #30]
 80070ac:	f7f9 fdf6 	bl	8000c9c <__aeabi_i2f>
 80070b0:	4601      	mov	r1, r0
 80070b2:	6960      	ldr	r0, [r4, #20]
 80070b4:	f7f9 fefa 	bl	8000eac <__aeabi_fdiv>
 80070b8:	7f21      	ldrb	r1, [r4, #28]
 80070ba:	9700      	str	r7, [sp, #0]
 80070bc:	69a3      	ldr	r3, [r4, #24]
 80070be:	e7d8      	b.n	8007072 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x2e>
				effect->filter = new Biquad(friction_type,(float)friction_f/calcfrequency, friction_q, (float)0.0);
 80070c0:	202c      	movs	r0, #44	; 0x2c
 80070c2:	f001 fed3 	bl	8008e6c <_Znwj>
 80070c6:	4606      	mov	r6, r0
 80070c8:	8be0      	ldrh	r0, [r4, #30]
 80070ca:	f7f9 fde7 	bl	8000c9c <__aeabi_i2f>
 80070ce:	4601      	mov	r1, r0
 80070d0:	6960      	ldr	r0, [r4, #20]
 80070d2:	f7f9 feeb 	bl	8000eac <__aeabi_fdiv>
 80070d6:	7f21      	ldrb	r1, [r4, #28]
 80070d8:	9700      	str	r7, [sp, #0]
 80070da:	69a3      	ldr	r3, [r4, #24]
 80070dc:	e7dc      	b.n	8007098 <_ZN6HidFFB11set_filtersEP10FFB_Effect+0x54>

080070de <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>:
void HidFFB::set_effect(FFB_SetEffect_t* effect){
 80070de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t index = effect->effectBlockIndex;
 80070e0:	784c      	ldrb	r4, [r1, #1]
void HidFFB::set_effect(FFB_SetEffect_t* effect){
 80070e2:	4606      	mov	r6, r0
	if(index > MAX_EFFECTS || index == 0)
 80070e4:	3c01      	subs	r4, #1
 80070e6:	b2e3      	uxtb	r3, r4
 80070e8:	2b27      	cmp	r3, #39	; 0x27
void HidFFB::set_effect(FFB_SetEffect_t* effect){
 80070ea:	460d      	mov	r5, r1
	if(index > MAX_EFFECTS || index == 0)
 80070ec:	d832      	bhi.n	8007154 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x76>
	effect_p->gain = effect->gain;
 80070ee:	212c      	movs	r1, #44	; 0x2c
 80070f0:	fb01 0304 	mla	r3, r1, r4, r0
 80070f4:	7a6a      	ldrb	r2, [r5, #9]
	if(effect_p->type != effect->effectType){
 80070f6:	4361      	muls	r1, r4
	effect_p->gain = effect->gain;
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	effect_p->type = effect->effectType;
 80070fc:	78a8      	ldrb	r0, [r5, #2]
 80070fe:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
	effect_p->samplePeriod = effect->samplePeriod;
 8007102:	7a2f      	ldrb	r7, [r5, #8]
 8007104:	79ea      	ldrb	r2, [r5, #7]
 8007106:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800710a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	if(effect->enableAxis & 0x4){
 800710e:	7aea      	ldrb	r2, [r5, #11]
 8007110:	0757      	lsls	r7, r2, #29
		effect_p->axis = 0x7;
 8007112:	bf48      	it	mi
 8007114:	2207      	movmi	r2, #7
		effect_p->axis = effect->enableAxis;
 8007116:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	if(effect_p->type != effect->effectType){
 800711a:	1873      	adds	r3, r6, r1
 800711c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8007120:	4282      	cmp	r2, r0
 8007122:	d008      	beq.n	8007136 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x58>
		effect_p->counter = 0;
 8007124:	2200      	movs	r2, #0
	FFB_Effect* effect_p = &effects[index-1];
 8007126:	313c      	adds	r1, #60	; 0x3c
		effect_p->counter = 0;
 8007128:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		effect_p->last_value = 0;
 800712c:	651a      	str	r2, [r3, #80]	; 0x50
		set_filters(effect_p);
 800712e:	4431      	add	r1, r6
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff ff87 	bl	8007044 <_ZN6HidFFB11set_filtersEP10FFB_Effect>
	effect_p->duration = effect->duration;
 8007136:	232c      	movs	r3, #44	; 0x2c
 8007138:	fb03 6404 	mla	r4, r3, r4, r6
 800713c:	792a      	ldrb	r2, [r5, #4]
 800713e:	78eb      	ldrb	r3, [r5, #3]
 8007140:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007144:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	if(!ffb_active)
 8007148:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 800714c:	b913      	cbnz	r3, 8007154 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x76>
	ffb_active = true;
 800714e:	2301      	movs	r3, #1
 8007150:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
}
 8007154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007156 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>:

void HidFFB::set_condition(FFB_SetCondition_Data_t* cond){
	if(cond->parameterBlockOffset != 0) //TODO if more axes are needed. Only X Axis is implemented now for the wheel.
 8007156:	788b      	ldrb	r3, [r1, #2]
 8007158:	bb43      	cbnz	r3, 80071ac <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x56>
		return;

	FFB_Effect* effect = &effects[cond->effectBlockIndex-1];

	effect->offset = cond->cpOffset;
 800715a:	222c      	movs	r2, #44	; 0x2c
	FFB_Effect* effect = &effects[cond->effectBlockIndex-1];
 800715c:	784b      	ldrb	r3, [r1, #1]
 800715e:	3b01      	subs	r3, #1
	effect->offset = cond->cpOffset;
 8007160:	fb02 0003 	mla	r0, r2, r3, r0
 8007164:	790a      	ldrb	r2, [r1, #4]
 8007166:	78cb      	ldrb	r3, [r1, #3]
 8007168:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800716c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	effect->negativeCoefficient  = cond->negativeCoefficient;
 8007170:	7a0a      	ldrb	r2, [r1, #8]
 8007172:	79cb      	ldrb	r3, [r1, #7]
 8007174:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007178:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	effect->positiveCoefficient = cond->positiveCoefficient;
 800717c:	798a      	ldrb	r2, [r1, #6]
 800717e:	794b      	ldrb	r3, [r1, #5]
 8007180:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007184:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	effect->negativeSaturation = cond->negativeSaturation;
 8007188:	7b0a      	ldrb	r2, [r1, #12]
 800718a:	7acb      	ldrb	r3, [r1, #11]
 800718c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007190:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	effect->positiveSaturation = cond->positiveSaturation;
 8007194:	7a8a      	ldrb	r2, [r1, #10]
 8007196:	7a4b      	ldrb	r3, [r1, #9]
 8007198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800719c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	effect->deadBand = cond->deadBand;
 80071a0:	7b4b      	ldrb	r3, [r1, #13]
 80071a2:	7b8a      	ldrb	r2, [r1, #14]
 80071a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80071a8:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
}
 80071ac:	4770      	bx	lr

080071ae <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>:

void HidFFB::set_periodic(FFB_SetPeriodic_Data_t* report){
	FFB_Effect* effect = &effects[report->effectBlockIndex-1];

	effect->period = report->period;
 80071ae:	222c      	movs	r2, #44	; 0x2c
	FFB_Effect* effect = &effects[report->effectBlockIndex-1];
 80071b0:	784b      	ldrb	r3, [r1, #1]
 80071b2:	3b01      	subs	r3, #1
	effect->period = report->period;
 80071b4:	fb02 0003 	mla	r0, r2, r3, r0
 80071b8:	7a4a      	ldrb	r2, [r1, #9]
 80071ba:	7a0b      	ldrb	r3, [r1, #8]
 80071bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80071c0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	effect->magnitude = report->magnitude;
 80071c4:	78ca      	ldrb	r2, [r1, #3]
 80071c6:	788b      	ldrb	r3, [r1, #2]
 80071c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80071cc:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
	effect->offset = report->offset;
 80071d0:	794a      	ldrb	r2, [r1, #5]
 80071d2:	790b      	ldrb	r3, [r1, #4]
 80071d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80071d8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	effect->phase = report->phase;
 80071dc:	798b      	ldrb	r3, [r1, #6]
 80071de:	79ca      	ldrb	r2, [r1, #7]
 80071e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80071e4:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
	//effect->counter = 0;
}
 80071e8:	4770      	bx	lr

080071ea <_ZN6HidFFB16find_free_effectEh>:

uint8_t HidFFB::find_free_effect(uint8_t type){ //Will return the first effect index which is empty or the same type
 80071ea:	2301      	movs	r3, #1
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
		if(effects[i].type == FFB_EFFECT_NONE){
 80071ec:	212c      	movs	r1, #44	; 0x2c
uint8_t HidFFB::find_free_effect(uint8_t type){ //Will return the first effect index which is empty or the same type
 80071ee:	b510      	push	{r4, lr}
		if(effects[i].type == FFB_EFFECT_NONE){
 80071f0:	fb01 0403 	mla	r4, r1, r3, r0
 80071f4:	7c64      	ldrb	r4, [r4, #17]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	b11c      	cbz	r4, 8007202 <_ZN6HidFFB16find_free_effectEh+0x18>
 80071fa:	3301      	adds	r3, #1
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 80071fc:	2b29      	cmp	r3, #41	; 0x29
 80071fe:	d1f7      	bne.n	80071f0 <_ZN6HidFFB16find_free_effectEh+0x6>
			return(i+1);
		}
	}
	return 0;
 8007200:	2200      	movs	r2, #0
}
 8007202:	4610      	mov	r0, r2
 8007204:	bd10      	pop	{r4, pc}
	...

08007208 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>:
void HidFFB::new_effect(FFB_CreateNewEffect_Feature_Data_t* effect){
 8007208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t index = find_free_effect(effect->effectType); // next effect
 800720c:	784c      	ldrb	r4, [r1, #1]
void HidFFB::new_effect(FFB_CreateNewEffect_Feature_Data_t* effect){
 800720e:	b08c      	sub	sp, #48	; 0x30
 8007210:	460d      	mov	r5, r1
	uint8_t index = find_free_effect(effect->effectType); // next effect
 8007212:	4621      	mov	r1, r4
void HidFFB::new_effect(FFB_CreateNewEffect_Feature_Data_t* effect){
 8007214:	4606      	mov	r6, r0
	uint8_t index = find_free_effect(effect->effectType); // next effect
 8007216:	f7ff ffe8 	bl	80071ea <_ZN6HidFFB16find_free_effectEh>
	if(index == 0){
 800721a:	4607      	mov	r7, r0
 800721c:	b928      	cbnz	r0, 800722a <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0x22>
		blockLoad_report.loadStatus = 2;
 800721e:	2302      	movs	r3, #2
	blockLoad_report.loadStatus = 1;
 8007220:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
 8007224:	b00c      	add	sp, #48	; 0x30
 8007226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FFB_Effect new_effect;
 800722a:	f04f 082c 	mov.w	r8, #44	; 0x2c
	printf("Creating Effect: %d with size %d at %d\n",effect->effectType,effect->byteCount,index);
 800722e:	4603      	mov	r3, r0
 8007230:	886a      	ldrh	r2, [r5, #2]
 8007232:	4621      	mov	r1, r4
 8007234:	4816      	ldr	r0, [pc, #88]	; (8007290 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0x88>)
 8007236:	f005 f871 	bl	800c31c <iprintf>
	FFB_Effect new_effect;
 800723a:	4642      	mov	r2, r8
 800723c:	2100      	movs	r1, #0
 800723e:	a801      	add	r0, sp, #4
 8007240:	f004 ffbd 	bl	800c1be <memset>
 8007244:	23ff      	movs	r3, #255	; 0xff
	effects[index-1] = new_effect;
 8007246:	1e7c      	subs	r4, r7, #1
 8007248:	fb08 6404 	mla	r4, r8, r4, r6
	FFB_Effect new_effect;
 800724c:	f88d 3006 	strb.w	r3, [sp, #6]
	new_effect.type = effect->effectType;
 8007250:	786b      	ldrb	r3, [r5, #1]
	set_filters(&new_effect);
 8007252:	a901      	add	r1, sp, #4
 8007254:	4630      	mov	r0, r6
	effects[index-1] = new_effect;
 8007256:	343c      	adds	r4, #60	; 0x3c
 8007258:	ad01      	add	r5, sp, #4
	new_effect.type = effect->effectType;
 800725a:	f88d 3005 	strb.w	r3, [sp, #5]
	set_filters(&new_effect);
 800725e:	f7ff fef1 	bl	8007044 <_ZN6HidFFB11set_filtersEP10FFB_Effect>
	effects[index-1] = new_effect;
 8007262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800726a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	used_effects++;
 800726e:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	effects[index-1] = new_effect;
 8007270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	used_effects++;
 8007274:	3301      	adds	r3, #1
 8007276:	b29b      	uxth	r3, r3
 8007278:	8573      	strh	r3, [r6, #42]	; 0x2a
	blockLoad_report.ramPoolAvailable = MAX_EFFECTS-used_effects;
 800727a:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800727e:	f8a6 3031 	strh.w	r3, [r6, #49]	; 0x31
	reportFFBStatus.effectBlockIndex = index;
 8007282:	f886 7039 	strb.w	r7, [r6, #57]	; 0x39
	blockLoad_report.effectBlockIndex = index;
 8007286:	f886 702f 	strb.w	r7, [r6, #47]	; 0x2f
	blockLoad_report.loadStatus = 1;
 800728a:	2301      	movs	r3, #1
 800728c:	e7c8      	b.n	8007220 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0x18>
 800728e:	bf00      	nop
 8007290:	0800d90b 	.word	0x0800d90b

08007294 <_ZN6HidFFB9reset_ffbEv>:



void HidFFB::reset_ffb(){
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4604      	mov	r4, r0
 8007298:	2500      	movs	r5, #0
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
		free_effect(i);
 800729a:	b2a9      	uxth	r1, r5
 800729c:	4620      	mov	r0, r4
 800729e:	3501      	adds	r5, #1
 80072a0:	f7ff febc 	bl	800701c <_ZN6HidFFB11free_effectEt>
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 80072a4:	2d28      	cmp	r5, #40	; 0x28
 80072a6:	d1f8      	bne.n	800729a <_ZN6HidFFB9reset_ffbEv+0x6>
	}
	this->reportFFBStatus.effectBlockIndex = 1;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	this->reportFFBStatus.status = (HID_ACTUATOR_POWER) | (HID_ENABLE_ACTUATORS);
 80072ae:	230a      	movs	r3, #10
 80072b0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	used_effects = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 80072b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080072bc <_ZN6HidFFB11ffb_controlEh>:
void HidFFB::ffb_control(uint8_t cmd){
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	460d      	mov	r5, r1
 80072c0:	4604      	mov	r4, r0
	printf("Got Control signal: %d\n",cmd);
 80072c2:	4812      	ldr	r0, [pc, #72]	; (800730c <_ZN6HidFFB11ffb_controlEh+0x50>)
 80072c4:	f005 f82a 	bl	800c31c <iprintf>
	if(cmd & 0x01){ //enable
 80072c8:	07ea      	lsls	r2, r5, #31
	ffb_active = true;
 80072ca:	bf44      	itt	mi
 80072cc:	2301      	movmi	r3, #1
 80072ce:	f884 302d 	strbmi.w	r3, [r4, #45]	; 0x2d
	}if(cmd & 0x02){ //disable
 80072d2:	07ab      	lsls	r3, r5, #30
		ffb_active = false;
 80072d4:	bf44      	itt	mi
 80072d6:	2300      	movmi	r3, #0
 80072d8:	f884 302d 	strbmi.w	r3, [r4, #45]	; 0x2d
	}if(cmd & 0x04){ //stop TODO Some games send wrong commands?
 80072dc:	0768      	lsls	r0, r5, #29
	ffb_active = false;
 80072de:	bf44      	itt	mi
 80072e0:	2300      	movmi	r3, #0
 80072e2:	f884 302d 	strbmi.w	r3, [r4, #45]	; 0x2d
	}if(cmd & 0x08){ //reset
 80072e6:	0729      	lsls	r1, r5, #28
 80072e8:	d505      	bpl.n	80072f6 <_ZN6HidFFB11ffb_controlEh+0x3a>
	ffb_active = false;
 80072ea:	2300      	movs	r3, #0
		reset_ffb();
 80072ec:	4620      	mov	r0, r4
	ffb_active = false;
 80072ee:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		reset_ffb();
 80072f2:	f7ff ffcf 	bl	8007294 <_ZN6HidFFB9reset_ffbEv>
	}if(cmd & 0x10){ //pause
 80072f6:	06ea      	lsls	r2, r5, #27
		ffb_active = false;
 80072f8:	bf44      	itt	mi
 80072fa:	2300      	movmi	r3, #0
 80072fc:	f884 302d 	strbmi.w	r3, [r4, #45]	; 0x2d
	}if(cmd & 0x20){ //continue
 8007300:	06ab      	lsls	r3, r5, #26
		ffb_active = true;
 8007302:	bf44      	itt	mi
 8007304:	2301      	movmi	r3, #1
 8007306:	f884 302d 	strbmi.w	r3, [r4, #45]	; 0x2d
}
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	0800d933 	.word	0x0800d933

08007310 <_ZN6HidFFB6hidOutEPh>:
void HidFFB::hidOut(uint8_t* report){
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4604      	mov	r4, r0
 8007314:	460d      	mov	r5, r1
	hid_out_period = HAL_GetTick() - lastOut; // For measuring update rate
 8007316:	f7fa fc39 	bl	8001b8c <HAL_GetTick>
 800731a:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
 800731e:	1ac0      	subs	r0, r0, r3
 8007320:	6220      	str	r0, [r4, #32]
	lastOut = HAL_GetTick();
 8007322:	f7fa fc33 	bl	8001b8c <HAL_GetTick>
 8007326:	f8c4 071c 	str.w	r0, [r4, #1820]	; 0x71c
	report[0] -= FFB_ID_OFFSET;// if offset id was set correct this
 800732a:	7829      	ldrb	r1, [r5, #0]
	switch(event_idx){
 800732c:	1e4b      	subs	r3, r1, #1
 800732e:	2b10      	cmp	r3, #16
 8007330:	d869      	bhi.n	8007406 <_ZN6HidFFB6hidOutEPh+0xf6>
 8007332:	e8df f003 	tbb	[pc, r3]
 8007336:	1f0f      	.short	0x1f0f
 8007338:	3c302a24 	.word	0x3c302a24
 800733c:	4268403e 	.word	0x4268403e
 8007340:	681b1560 	.word	0x681b1560
 8007344:	6868      	.short	0x6868
 8007346:	09          	.byte	0x09
 8007347:	00          	.byte	0x00
		new_effect((FFB_CreateNewEffect_Feature_Data_t*)(report));
 8007348:	4629      	mov	r1, r5
 800734a:	4620      	mov	r0, r4
}
 800734c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		new_effect((FFB_CreateNewEffect_Feature_Data_t*)(report));
 8007350:	f7ff bf5a 	b.w	8007208 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>
		set_effect((FFB_SetEffect_t*)(report));
 8007354:	4629      	mov	r1, r5
 8007356:	4620      	mov	r0, r4
}
 8007358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_effect((FFB_SetEffect_t*)(report));
 800735c:	f7ff bebf 	b.w	80070de <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>
		ffb_control(report[1]);
 8007360:	7869      	ldrb	r1, [r5, #1]
 8007362:	4620      	mov	r0, r4
}
 8007364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ffb_control(report[1]);
 8007368:	f7ff bfa8 	b.w	80072bc <_ZN6HidFFB11ffb_controlEh>
		gain = report[1];
 800736c:	786b      	ldrb	r3, [r5, #1]
 800736e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007372:	bd38      	pop	{r3, r4, r5, pc}
		printf("Envrep");
 8007374:	4826      	ldr	r0, [pc, #152]	; (8007410 <_ZN6HidFFB6hidOutEPh+0x100>)
}
 8007376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("Ramprep");
 800737a:	f004 bfcf 	b.w	800c31c <iprintf>
		set_condition((FFB_SetCondition_Data_t*)report);
 800737e:	4629      	mov	r1, r5
 8007380:	4620      	mov	r0, r4
}
 8007382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_condition((FFB_SetCondition_Data_t*)report);
 8007386:	f7ff bee6 	b.w	8007156 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>
		set_periodic((FFB_SetPeriodic_Data_t*)report);
 800738a:	4629      	mov	r1, r5
 800738c:	4620      	mov	r0, r4
}
 800738e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_periodic((FFB_SetPeriodic_Data_t*)report);
 8007392:	f7ff bf0c 	b.w	80071ae <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>
	effects[effect->effectBlockIndex-1].magnitude = effect->magnitude;
 8007396:	222c      	movs	r2, #44	; 0x2c
 8007398:	786b      	ldrb	r3, [r5, #1]
 800739a:	3b01      	subs	r3, #1
 800739c:	fb02 4403 	mla	r4, r2, r3, r4
 80073a0:	78ab      	ldrb	r3, [r5, #2]
 80073a2:	78ea      	ldrb	r2, [r5, #3]
 80073a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80073a8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80073ac:	e7e1      	b.n	8007372 <_ZN6HidFFB6hidOutEPh+0x62>
		printf("Ramprep");
 80073ae:	4819      	ldr	r0, [pc, #100]	; (8007414 <_ZN6HidFFB6hidOutEPh+0x104>)
 80073b0:	e7e1      	b.n	8007376 <_ZN6HidFFB6hidOutEPh+0x66>
		printf("Customrep");
 80073b2:	4819      	ldr	r0, [pc, #100]	; (8007418 <_ZN6HidFFB6hidOutEPh+0x108>)
 80073b4:	e7df      	b.n	8007376 <_ZN6HidFFB6hidOutEPh+0x66>
		printf("Sampledl");
 80073b6:	4819      	ldr	r0, [pc, #100]	; (800741c <_ZN6HidFFB6hidOutEPh+0x10c>)
 80073b8:	e7dd      	b.n	8007376 <_ZN6HidFFB6hidOutEPh+0x66>
		if(report[2] == 3){
 80073ba:	78ab      	ldrb	r3, [r5, #2]
		uint8_t id = report[1]-1;
 80073bc:	7869      	ldrb	r1, [r5, #1]
		if(report[2] == 3){
 80073be:	2b03      	cmp	r3, #3
		uint8_t id = report[1]-1;
 80073c0:	f101 31ff 	add.w	r1, r1, #4294967295
 80073c4:	b2c9      	uxtb	r1, r1
 80073c6:	f04f 032c 	mov.w	r3, #44	; 0x2c
		if(report[2] == 3){
 80073ca:	d105      	bne.n	80073d8 <_ZN6HidFFB6hidOutEPh+0xc8>
			effects[id].state = 0; //Stop
 80073cc:	fb03 4401 	mla	r4, r3, r1, r4
 80073d0:	2300      	movs	r3, #0
 80073d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80073d6:	e7cc      	b.n	8007372 <_ZN6HidFFB6hidOutEPh+0x62>
			effects[id].state = 1; //Start
 80073d8:	2201      	movs	r2, #1
 80073da:	4359      	muls	r1, r3
 80073dc:	1863      	adds	r3, r4, r1
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			effects[id].counter = 0; // When an effect was stopped reset all parameters that could cause jerking
 80073e2:	2200      	movs	r2, #0
			set_filters(&effects[id]);
 80073e4:	313c      	adds	r1, #60	; 0x3c
			effects[id].counter = 0; // When an effect was stopped reset all parameters that could cause jerking
 80073e6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			set_filters(&effects[id]);
 80073ea:	4421      	add	r1, r4
 80073ec:	4620      	mov	r0, r4
}
 80073ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			set_filters(&effects[id]);
 80073f2:	f7ff be27 	b.w	8007044 <_ZN6HidFFB11set_filtersEP10FFB_Effect>
		free_effect(report[1]-1);
 80073f6:	7869      	ldrb	r1, [r5, #1]
 80073f8:	4620      	mov	r0, r4
}
 80073fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_effect(report[1]-1);
 80073fe:	3901      	subs	r1, #1
 8007400:	b289      	uxth	r1, r1
 8007402:	f7ff be0b 	b.w	800701c <_ZN6HidFFB11free_effectEt>
		printf("Got unknown command: %d",event_idx);
 8007406:	4806      	ldr	r0, [pc, #24]	; (8007420 <_ZN6HidFFB6hidOutEPh+0x110>)
}
 8007408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("Got unknown command: %d",event_idx);
 800740c:	f004 bf86 	b.w	800c31c <iprintf>
 8007410:	0800d94b 	.word	0x0800d94b
 8007414:	0800d952 	.word	0x0800d952
 8007418:	0800d95a 	.word	0x0800d95a
 800741c:	0800d964 	.word	0x0800d964
 8007420:	0800d96d 	.word	0x0800d96d
 8007424:	00000000 	.word	0x00000000

08007428 <_ZN6HidFFB16calculateEffectsElh>:

int32_t HidFFB::calculateEffects(int32_t pos,uint8_t axis=1){
	if(!ffb_active){
 8007428:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
int32_t HidFFB::calculateEffects(int32_t pos,uint8_t axis=1){
 800742c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	4607      	mov	r7, r0
 8007432:	460e      	mov	r6, r1
 8007434:	4691      	mov	r9, r2
	if(!ffb_active){
 8007436:	b96b      	cbnz	r3, 8007454 <_ZN6HidFFB16calculateEffectsElh+0x2c>
		if(idlecenter){
 8007438:	7900      	ldrb	r0, [r0, #4]
 800743a:	b140      	cbz	r0, 800744e <_ZN6HidFFB16calculateEffectsElh+0x26>
 800743c:	486c      	ldr	r0, [pc, #432]	; (80075f0 <_ZN6HidFFB16calculateEffectsElh+0x1c8>)
 800743e:	f241 3588 	movw	r5, #5000	; 0x1388
 8007442:	4281      	cmp	r1, r0
 8007444:	f2c0 80ce 	blt.w	80075e4 <_ZN6HidFFB16calculateEffectsElh+0x1bc>
 8007448:	42a9      	cmp	r1, r5
 800744a:	dc00      	bgt.n	800744e <_ZN6HidFFB16calculateEffectsElh+0x26>
			return clip<int32_t,int32_t>(-pos,-5000,5000);
 800744c:	4248      	negs	r0, r1

	}
	result_torque = (result_torque * (gain+1)) >> 8; // Apply global gain

	return result_torque; //clip(result_torque,-0x7fff,0x7fff);
}
 800744e:	b003      	add	sp, #12
 8007450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!ffb_active){
 8007454:	f04f 0800 	mov.w	r8, #0
 8007458:	4604      	mov	r4, r0
	int32_t result_torque = 0;
 800745a:	4645      	mov	r5, r8
			float freq = 1.0f/(float)(std::max<uint16_t>(effect->period,2));
 800745c:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
			float phase = (float)effect->phase/(float)35999; //degrees
 8007460:	f8df b190 	ldr.w	fp, [pc, #400]	; 80075f4 <_ZN6HidFFB16calculateEffectsElh+0x1cc>
		if(effect->state == 0 || !(axis & effect->axis))
 8007464:	232c      	movs	r3, #44	; 0x2c
 8007466:	fb03 7308 	mla	r3, r3, r8, r7
 800746a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746e:	b353      	cbz	r3, 80074c6 <_ZN6HidFFB16calculateEffectsElh+0x9e>
 8007470:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8007474:	ea19 0f03 	tst.w	r9, r3
 8007478:	d025      	beq.n	80074c6 <_ZN6HidFFB16calculateEffectsElh+0x9e>
		switch(effect->type){
 800747a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800747e:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8007482:	3b01      	subs	r3, #1
 8007484:	2b0a      	cmp	r3, #10
 8007486:	d80f      	bhi.n	80074a8 <_ZN6HidFFB16calculateEffectsElh+0x80>
 8007488:	e8df f003 	tbb	[pc, r3]
 800748c:	450e0e06 	.word	0x450e0e06
 8007490:	2a0e0e0e 	.word	0x2a0e0e0e
 8007494:	0e89      	.short	0x0e89
 8007496:	89          	.byte	0x89
 8007497:	00          	.byte	0x00
			result_torque -= (effect->magnitude * (1+effect->gain)) >> 8;
 8007498:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800749c:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
 80074a0:	fb02 3303 	mla	r3, r2, r3, r3
 80074a4:	eba5 2523 	sub.w	r5, r5, r3, asr #8
		if(effect->counter++ > effect->duration){
 80074a8:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
 80074b2:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80074b6:	429a      	cmp	r2, r3
			effect->state = 0;
 80074b8:	bf3f      	itttt	cc
 80074ba:	232c      	movcc	r3, #44	; 0x2c
 80074bc:	2200      	movcc	r2, #0
 80074be:	fb03 7308 	mlacc	r3, r3, r8, r7
 80074c2:	f883 203c 	strbcc.w	r2, [r3, #60]	; 0x3c
 80074c6:	f108 0801 	add.w	r8, r8, #1
	for(uint8_t i = 0;i<MAX_EFFECTS;i++){
 80074ca:	f1b8 0f28 	cmp.w	r8, #40	; 0x28
 80074ce:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 80074d2:	d1c7      	bne.n	8007464 <_ZN6HidFFB16calculateEffectsElh+0x3c>
	result_torque = (result_torque * (gain+1)) >> 8; // Apply global gain
 80074d4:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 80074d8:	fb00 5505 	mla	r5, r0, r5, r5
 80074dc:	1228      	asrs	r0, r5, #8
	return result_torque; //clip(result_torque,-0x7fff,0x7fff);
 80074de:	e7b6      	b.n	800744e <_ZN6HidFFB16calculateEffectsElh+0x26>
			if(pos<effect->offset){
 80074e0:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 80074e4:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 80074e8:	42b3      	cmp	r3, r6
 80074ea:	eba6 0003 	sub.w	r0, r6, r3
				force = clip<int32_t,int32_t>(((int32_t)(effect->negativeCoefficient>>3) * (pos - (effect->offset))) >> 6,-effect->negativeSaturation,effect->positiveSaturation);
 80074ee:	bfcc      	ite	gt
 80074f0:	f9b4 3042 	ldrshgt.w	r3, [r4, #66]	; 0x42
				force = clip<int32_t,int32_t>(((int32_t)(effect->positiveCoefficient>>3) * (pos - (effect->offset))) >> 6,-effect->negativeSaturation,effect->positiveSaturation);
 80074f4:	f9b4 3040 	ldrshle.w	r3, [r4, #64]	; 0x40
 80074f8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80074fc:	10db      	asrs	r3, r3, #3
 80074fe:	4343      	muls	r3, r0
 8007500:	119b      	asrs	r3, r3, #6
 8007502:	4293      	cmp	r3, r2
 8007504:	f1c1 0100 	rsb	r1, r1, #0
 8007508:	dc03      	bgt.n	8007512 <_ZN6HidFFB16calculateEffectsElh+0xea>
 800750a:	428b      	cmp	r3, r1
 800750c:	bfb8      	it	lt
 800750e:	460b      	movlt	r3, r1
 8007510:	461a      	mov	r2, r3
			result_torque -= force;
 8007512:	1aad      	subs	r5, r5, r2
			break;
 8007514:	e7c8      	b.n	80074a8 <_ZN6HidFFB16calculateEffectsElh+0x80>
			float freq = 1.0f/(float)(std::max<uint16_t>(effect->period,2));
 8007516:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800751a:	9201      	str	r2, [sp, #4]
 800751c:	2802      	cmp	r0, #2
 800751e:	bf38      	it	cc
 8007520:	2002      	movcc	r0, #2
 8007522:	f7f9 fbb7 	bl	8000c94 <__aeabi_ui2f>
 8007526:	4601      	mov	r1, r0
 8007528:	4650      	mov	r0, sl
 800752a:	f7f9 fcbf 	bl	8000eac <__aeabi_fdiv>
			float sine =  sinf(2.0*(float)M_PI*(t*freq+phase)) * effect->magnitude;
 800752e:	9a01      	ldr	r2, [sp, #4]
			float freq = 1.0f/(float)(std::max<uint16_t>(effect->period,2));
 8007530:	9000      	str	r0, [sp, #0]
			float sine =  sinf(2.0*(float)M_PI*(t*freq+phase)) * effect->magnitude;
 8007532:	4610      	mov	r0, r2
 8007534:	f7f9 fbb2 	bl	8000c9c <__aeabi_i2f>
 8007538:	9b00      	ldr	r3, [sp, #0]
 800753a:	4601      	mov	r1, r0
 800753c:	4618      	mov	r0, r3
 800753e:	f7f9 fc01 	bl	8000d44 <__aeabi_fmul>
 8007542:	9000      	str	r0, [sp, #0]
			float phase = (float)effect->phase/(float)35999; //degrees
 8007544:	f9b4 004a 	ldrsh.w	r0, [r4, #74]	; 0x4a
 8007548:	f7f9 fba8 	bl	8000c9c <__aeabi_i2f>
 800754c:	4659      	mov	r1, fp
 800754e:	f7f9 fcad 	bl	8000eac <__aeabi_fdiv>
			float sine =  sinf(2.0*(float)M_PI*(t*freq+phase)) * effect->magnitude;
 8007552:	9b00      	ldr	r3, [sp, #0]
 8007554:	4601      	mov	r1, r0
 8007556:	4618      	mov	r0, r3
 8007558:	f7f9 faec 	bl	8000b34 <__addsf3>
 800755c:	f7f8 ff64 	bl	8000428 <__aeabi_f2d>
 8007560:	a321      	add	r3, pc, #132	; (adr r3, 80075e8 <_ZN6HidFFB16calculateEffectsElh+0x1c0>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f7f8 ffb7 	bl	80004d8 <__aeabi_dmul>
 800756a:	f7f9 fa8d 	bl	8000a88 <__aeabi_d2f>
 800756e:	f001 ffa3 	bl	80094b8 <sinf>
 8007572:	9000      	str	r0, [sp, #0]
 8007574:	f9b4 0048 	ldrsh.w	r0, [r4, #72]	; 0x48
 8007578:	f7f9 fb90 	bl	8000c9c <__aeabi_i2f>
 800757c:	9900      	ldr	r1, [sp, #0]
 800757e:	f7f9 fbe1 	bl	8000d44 <__aeabi_fmul>
 8007582:	9000      	str	r0, [sp, #0]
			int32_t force = (int32_t)(effect->offset + sine);
 8007584:	f9b4 004c 	ldrsh.w	r0, [r4, #76]	; 0x4c
 8007588:	f7f9 fb88 	bl	8000c9c <__aeabi_i2f>
 800758c:	9b00      	ldr	r3, [sp, #0]
 800758e:	4601      	mov	r1, r0
 8007590:	4618      	mov	r0, r3
 8007592:	f7f9 facf 	bl	8000b34 <__addsf3>
 8007596:	f7f9 fdb1 	bl	80010fc <__aeabi_f2iz>
			result_torque -= force;
 800759a:	1a2d      	subs	r5, r5, r0
			break;
 800759c:	e784      	b.n	80074a8 <_ZN6HidFFB16calculateEffectsElh+0x80>
			if(effect->counter == 0){
 800759e:	b90a      	cbnz	r2, 80075a4 <_ZN6HidFFB16calculateEffectsElh+0x17c>
				effect->last_value = pos;
 80075a0:	6526      	str	r6, [r4, #80]	; 0x50
				break;
 80075a2:	e781      	b.n	80074a8 <_ZN6HidFFB16calculateEffectsElh+0x80>
			int32_t speed = pos - effect->last_value;
 80075a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
			effect->last_value = pos;
 80075a6:	6526      	str	r6, [r4, #80]	; 0x50
			float val = effect->filter->process(speed);
 80075a8:	1a30      	subs	r0, r6, r0
 80075aa:	f7f9 fb77 	bl	8000c9c <__aeabi_i2f>
 80075ae:	4601      	mov	r1, r0
 80075b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075b2:	f7ff f8c0 	bl	8006736 <_ZN6Biquad7processEf>
 80075b6:	9000      	str	r0, [sp, #0]
			force = clip<int32_t,int32_t>((int32_t)((effect->positiveCoefficient) * val) >> 4,-effect->negativeSaturation,effect->positiveSaturation);
 80075b8:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 80075bc:	f7f9 fb6e 	bl	8000c9c <__aeabi_i2f>
 80075c0:	9900      	ldr	r1, [sp, #0]
 80075c2:	f7f9 fbbf 	bl	8000d44 <__aeabi_fmul>
 80075c6:	f7f9 fd99 	bl	80010fc <__aeabi_f2iz>
 80075ca:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80075ce:	1100      	asrs	r0, r0, #4
 80075d0:	4298      	cmp	r0, r3
 80075d2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80075d6:	dc03      	bgt.n	80075e0 <_ZN6HidFFB16calculateEffectsElh+0x1b8>
 80075d8:	4253      	negs	r3, r2
 80075da:	4283      	cmp	r3, r0
 80075dc:	bfb8      	it	lt
 80075de:	4603      	movlt	r3, r0
			result_torque -= force;
 80075e0:	1aed      	subs	r5, r5, r3
			break;
 80075e2:	e761      	b.n	80074a8 <_ZN6HidFFB16calculateEffectsElh+0x80>
 80075e4:	4628      	mov	r0, r5
 80075e6:	e732      	b.n	800744e <_ZN6HidFFB16calculateEffectsElh+0x26>
 80075e8:	60000000 	.word	0x60000000
 80075ec:	401921fb 	.word	0x401921fb
 80075f0:	ffffec78 	.word	0xffffec78
 80075f4:	470c9f00 	.word	0x470c9f00

080075f8 <_ZN12LocalButtonsD1Ev>:

}

LocalButtons::~LocalButtons() {
	// TODO Auto-generated destructor stub
}
 80075f8:	4770      	bx	lr

080075fa <_ZN12LocalButtonsD0Ev>:
LocalButtons::~LocalButtons() {
 80075fa:	b510      	push	{r4, lr}
 80075fc:	4604      	mov	r4, r0
}
 80075fe:	2118      	movs	r1, #24
 8007600:	f001 fc32 	bl	8008e68 <_ZdlPvj>
 8007604:	4620      	mov	r0, r4
 8007606:	bd10      	pop	{r4, pc}

08007608 <_ZN12LocalButtonsC1Ev>:
LocalButtons::LocalButtons() {
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <_ZN12LocalButtonsC1Ev+0x40>)
 800760a:	b513      	push	{r0, r1, r4, lr}
 800760c:	6003      	str	r3, [r0, #0]
 800760e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8007612:	6043      	str	r3, [r0, #4]
 8007614:	2308      	movs	r3, #8
 8007616:	8103      	strh	r3, [r0, #8]
 8007618:	2327      	movs	r3, #39	; 0x27
 800761a:	74c3      	strb	r3, [r0, #19]
 800761c:	4b0b      	ldr	r3, [pc, #44]	; (800764c <_ZN12LocalButtonsC1Ev+0x44>)
 800761e:	4602      	mov	r2, r0
 8007620:	60c3      	str	r3, [r0, #12]
 8007622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007626:	f822 3f10 	strh.w	r3, [r2, #16]!
	I2C_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 800762a:	230a      	movs	r3, #10
LocalButtons::LocalButtons() {
 800762c:	4604      	mov	r4, r0
	I2C_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	214e      	movs	r1, #78	; 0x4e
 8007632:	2302      	movs	r3, #2
 8007634:	4806      	ldr	r0, [pc, #24]	; (8007650 <_ZN12LocalButtonsC1Ev+0x48>)
 8007636:	f7fb fa0d 	bl	8002a54 <HAL_I2C_Master_Transmit>
 800763a:	7520      	strb	r0, [r4, #20]
	if ( I2C_status != HAL_OK ) {
 800763c:	b108      	cbz	r0, 8007642 <_ZN12LocalButtonsC1Ev+0x3a>
		pulseSysLed();
 800763e:	f000 f9f9 	bl	8007a34 <_Z11pulseSysLedv>
}
 8007642:	4620      	mov	r0, r4
 8007644:	b002      	add	sp, #8
 8007646:	bd10      	pop	{r4, pc}
 8007648:	0800d9a8 	.word	0x0800d9a8
 800764c:	40010c00 	.word	0x40010c00
 8007650:	20001590 	.word	0x20001590

08007654 <_ZN12LocalButtons11readButtonsEPm>:


void LocalButtons::readButtons(uint32_t* buf){
	I2C_status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 8007654:	230a      	movs	r3, #10
void LocalButtons::readButtons(uint32_t* buf){
 8007656:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 800765a:	f100 0210 	add.w	r2, r0, #16
void LocalButtons::readButtons(uint32_t* buf){
 800765e:	4604      	mov	r4, r0
	I2C_status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 8007660:	9300      	str	r3, [sp, #0]
void LocalButtons::readButtons(uint32_t* buf){
 8007662:	460e      	mov	r6, r1
	I2C_status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 8007664:	2302      	movs	r3, #2
 8007666:	214e      	movs	r1, #78	; 0x4e
 8007668:	4818      	ldr	r0, [pc, #96]	; (80076cc <_ZN12LocalButtons11readButtonsEPm+0x78>)
 800766a:	f7fb fac1 	bl	8002bf0 <HAL_I2C_Master_Receive>
 800766e:	7520      	strb	r0, [r4, #20]
	if(I2C_status == HAL_OK)
 8007670:	b968      	cbnz	r0, 800768e <_ZN12LocalButtons11readButtonsEPm+0x3a>
	{
		button_buf[0]=~button_buf[0];
 8007672:	7c23      	ldrb	r3, [r4, #16]
		button_buf[1]=~button_buf[1];
 8007674:	7c62      	ldrb	r2, [r4, #17]
		button_buf[0]=~button_buf[0];
 8007676:	43db      	mvns	r3, r3
		button_buf[1]=~button_buf[1];
 8007678:	43d2      	mvns	r2, r2
		button_buf[0]=~button_buf[0];
 800767a:	b2db      	uxtb	r3, r3
 800767c:	7423      	strb	r3, [r4, #16]
		button_buf[1]=~button_buf[1];
 800767e:	7462      	strb	r2, [r4, #17]
		*buf |= button_buf[0];
 8007680:	6832      	ldr	r2, [r6, #0]
 8007682:	4313      	orrs	r3, r2
		*buf <<= 8;
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	6033      	str	r3, [r6, #0]
		*buf |= button_buf[1];
 8007688:	7c62      	ldrb	r2, [r4, #17]
 800768a:	4313      	orrs	r3, r2
 800768c:	6033      	str	r3, [r6, #0]
	}
	uint8_t buttons = this->nButtons;
 800768e:	2500      	movs	r5, #0
	for(uint8_t i = 0;i<buttons;i++){
		*buf |= !HAL_GPIO_ReadPin(button_ports[i],button_pins[i]) << (i + 16);
 8007690:	f06f 0701 	mvn.w	r7, #1
	uint8_t buttons = this->nButtons;
 8007694:	f894 8006 	ldrb.w	r8, [r4, #6]
	for(uint8_t i = 0;i<buttons;i++){
 8007698:	b2eb      	uxtb	r3, r5
 800769a:	4598      	cmp	r8, r3
 800769c:	d912      	bls.n	80076c4 <_ZN12LocalButtons11readButtonsEPm+0x70>
 800769e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
		*buf |= !HAL_GPIO_ReadPin(button_ports[i],button_pins[i]) << (i + 16);
 80076a2:	fb07 3205 	mla	r2, r7, r5, r3
 80076a6:	68d8      	ldr	r0, [r3, #12]
 80076a8:	8911      	ldrh	r1, [r2, #8]
 80076aa:	f7fb f811 	bl	80026d0 <HAL_GPIO_ReadPin>
 80076ae:	fab0 f080 	clz	r0, r0
 80076b2:	f105 0310 	add.w	r3, r5, #16
 80076b6:	0940      	lsrs	r0, r0, #5
 80076b8:	4098      	lsls	r0, r3
 80076ba:	6833      	ldr	r3, [r6, #0]
 80076bc:	3501      	adds	r5, #1
 80076be:	4318      	orrs	r0, r3
 80076c0:	6030      	str	r0, [r6, #0]
	for(uint8_t i = 0;i<buttons;i++){
 80076c2:	e7e9      	b.n	8007698 <_ZN12LocalButtons11readButtonsEPm+0x44>
	}
}
 80076c4:	b002      	add	sp, #8
 80076c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ca:	bf00      	nop
 80076cc:	20001590 	.word	0x20001590

080076d0 <_ZN12MotorBTS7960D1Ev>:
	timer->Instance->CCR2 = 0;
	HAL_TIM_PWM_Start(timer, channel1);
	HAL_TIM_PWM_Start(timer, channel2);
}

MotorBTS7960::~MotorBTS7960() {
 80076d0:	b510      	push	{r4, lr}
 80076d2:	4604      	mov	r4, r0
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <_ZN12MotorBTS7960D1Ev+0x1c>)
	HAL_TIM_PWM_Stop(timer, channel1);
 80076d6:	68c1      	ldr	r1, [r0, #12]
MotorBTS7960::~MotorBTS7960() {
 80076d8:	6003      	str	r3, [r0, #0]
	HAL_TIM_PWM_Stop(timer, channel1);
 80076da:	6940      	ldr	r0, [r0, #20]
 80076dc:	f7fc fece 	bl	800447c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer, channel2);
 80076e0:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80076e4:	f7fc feca 	bl	800447c <HAL_TIM_PWM_Stop>
}
 80076e8:	4620      	mov	r0, r4
 80076ea:	bd10      	pop	{r4, pc}
 80076ec:	0800d9b8 	.word	0x0800d9b8

080076f0 <_ZN12MotorBTS7960D0Ev>:
MotorBTS7960::~MotorBTS7960() {
 80076f0:	b510      	push	{r4, lr}
 80076f2:	4604      	mov	r4, r0
}
 80076f4:	f7ff ffec 	bl	80076d0 <_ZN12MotorBTS7960D1Ev>
 80076f8:	4620      	mov	r0, r4
 80076fa:	2118      	movs	r1, #24
 80076fc:	f001 fbb4 	bl	8008e68 <_ZdlPvj>
 8007700:	4620      	mov	r0, r4
 8007702:	bd10      	pop	{r4, pc}

08007704 <_ZN12MotorBTS79604turnEs>:
	if(!active)
 8007704:	7a03      	ldrb	r3, [r0, #8]
 8007706:	b1a3      	cbz	r3, 8007732 <_ZN12MotorBTS79604turnEs+0x2e>
	int32_t val = (uint32_t)((abs(power) * period)/0x7fff);
 8007708:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 800770c:	6843      	ldr	r3, [r0, #4]
 800770e:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8007712:	4353      	muls	r3, r2
 8007714:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007718:	fbb3 f3f2 	udiv	r3, r3, r2
 800771c:	6942      	ldr	r2, [r0, #20]
	if(power < 0){
 800771e:	2900      	cmp	r1, #0
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	da02      	bge.n	800772e <_ZN12MotorBTS79604turnEs+0x2a>
		timer->Instance->CCR1 = 0;
 8007728:	6351      	str	r1, [r2, #52]	; 0x34
		timer->Instance->CCR2 = val;
 800772a:	6393      	str	r3, [r2, #56]	; 0x38
 800772c:	4770      	bx	lr
		timer->Instance->CCR1 = val;
 800772e:	6353      	str	r3, [r2, #52]	; 0x34
		timer->Instance->CCR2 = 0;
 8007730:	6391      	str	r1, [r2, #56]	; 0x38
}
 8007732:	4770      	bx	lr

08007734 <_ZN12MotorBTS7960C1Ev>:
MotorBTS7960::MotorBTS7960() {
 8007734:	4b0c      	ldr	r3, [pc, #48]	; (8007768 <_ZN12MotorBTS7960C1Ev+0x34>)
 8007736:	b510      	push	{r4, lr}
 8007738:	6003      	str	r3, [r0, #0]
 800773a:	f640 630f 	movw	r3, #3599	; 0xe0f
 800773e:	2100      	movs	r1, #0
 8007740:	6043      	str	r3, [r0, #4]
 8007742:	2304      	movs	r3, #4
 8007744:	4604      	mov	r4, r0
 8007746:	7201      	strb	r1, [r0, #8]
 8007748:	60c1      	str	r1, [r0, #12]
 800774a:	6103      	str	r3, [r0, #16]
 800774c:	4807      	ldr	r0, [pc, #28]	; (800776c <_ZN12MotorBTS7960C1Ev+0x38>)
	timer->Instance->CCR1 = 0;
 800774e:	6803      	ldr	r3, [r0, #0]
MotorBTS7960::MotorBTS7960() {
 8007750:	6160      	str	r0, [r4, #20]
	timer->Instance->CCR1 = 0;
 8007752:	6359      	str	r1, [r3, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 8007754:	6399      	str	r1, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(timer, channel1);
 8007756:	f7fc fe09 	bl	800436c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, channel2);
 800775a:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800775e:	f7fc fe05 	bl	800436c <HAL_TIM_PWM_Start>
}
 8007762:	4620      	mov	r0, r4
 8007764:	bd10      	pop	{r4, pc}
 8007766:	bf00      	nop
 8007768:	0800d9b8 	.word	0x0800d9b8
 800776c:	20001698 	.word	0x20001698

08007770 <_ZN12MotorBTS79605startEv>:


void MotorBTS7960::start(){
	active = true;
 8007770:	2301      	movs	r3, #1
 8007772:	7203      	strb	r3, [r0, #8]
}
 8007774:	4770      	bx	lr

08007776 <_ZN12MotorBTS79604stopEv>:

void MotorBTS7960::stop(){
	active = false;
 8007776:	2300      	movs	r3, #0
	timer->Instance->CCR1 = 0;
 8007778:	6942      	ldr	r2, [r0, #20]
	active = false;
 800777a:	7203      	strb	r3, [r0, #8]
	timer->Instance->CCR1 = 0;
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	6353      	str	r3, [r2, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 8007780:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007782:	4770      	bx	lr

08007784 <_ZN12TimerHandler12timerElapsedEP17TIM_HandleTypeDef>:
	}
}

void TimerHandler::timerElapsed(TIM_HandleTypeDef* htim){

}
 8007784:	4770      	bx	lr
	...

08007788 <_ZN12TimerHandlerD1Ev>:
TimerHandler::~TimerHandler() {
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800778c:	2600      	movs	r6, #0
 800778e:	4b0e      	ldr	r3, [pc, #56]	; (80077c8 <_ZN12TimerHandlerD1Ev+0x40>)
 8007790:	4c0e      	ldr	r4, [pc, #56]	; (80077cc <_ZN12TimerHandlerD1Ev+0x44>)
 8007792:	6003      	str	r3, [r0, #0]
 8007794:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007798:	1ad7      	subs	r7, r2, r3
 800779a:	10bf      	asrs	r7, r7, #2
 800779c:	b2f1      	uxtb	r1, r6
	for (uint8_t i = 0; i < timerHandlers.size(); i++){
 800779e:	42b9      	cmp	r1, r7
 80077a0:	d20f      	bcs.n	80077c2 <_ZN12TimerHandlerD1Ev+0x3a>
	return *(this->_M_impl._M_start + __n);
 80077a2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
		if(timerHandlers[i] == this){
 80077a6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80077aa:	3601      	adds	r6, #1
 80077ac:	42a9      	cmp	r1, r5
 80077ae:	d1f5      	bne.n	800779c <_ZN12TimerHandlerD1Ev+0x14>
      { return __normal_iterator(_M_current + __n); }
 80077b0:	1d01      	adds	r1, r0, #4
      if (__position + 1 != end())
 80077b2:	428a      	cmp	r2, r1
 80077b4:	d002      	beq.n	80077bc <_ZN12TimerHandlerD1Ev+0x34>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80077b6:	1a52      	subs	r2, r2, r1
 80077b8:	f004 fce8 	bl	800c18c <memmove>
      --this->_M_impl._M_finish;
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	3b04      	subs	r3, #4
 80077c0:	6063      	str	r3, [r4, #4]
}
 80077c2:	4628      	mov	r0, r5
 80077c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c6:	bf00      	nop
 80077c8:	0800d9c8 	.word	0x0800d9c8
 80077cc:	20000b7c 	.word	0x20000b7c

080077d0 <_ZN12TimerHandlerD0Ev>:
TimerHandler::~TimerHandler() {
 80077d0:	b510      	push	{r4, lr}
 80077d2:	4604      	mov	r4, r0
}
 80077d4:	f7ff ffd8 	bl	8007788 <_ZN12TimerHandlerD1Ev>
 80077d8:	4620      	mov	r0, r4
 80077da:	2104      	movs	r1, #4
 80077dc:	f001 fb44 	bl	8008e68 <_ZdlPvj>
 80077e0:	4620      	mov	r0, r4
 80077e2:	bd10      	pop	{r4, pc}

080077e4 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80077e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80077e8:	e9d0 3400 	ldrd	r3, r4, [r0]
 80077ec:	1ae4      	subs	r4, r4, r3
      if (__a < __b)
 80077ee:	10a4      	asrs	r4, r4, #2
 80077f0:	4691      	mov	r9, r2
 80077f2:	bf14      	ite	ne
 80077f4:	4622      	movne	r2, r4
 80077f6:	2201      	moveq	r2, #1
 80077f8:	18a4      	adds	r4, r4, r2
 80077fa:	4606      	mov	r6, r0
 80077fc:	460f      	mov	r7, r1
 80077fe:	eba1 0803 	sub.w	r8, r1, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007802:	d234      	bcs.n	800786e <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
 8007804:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8007808:	d231      	bcs.n	800786e <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800780a:	bb94      	cbnz	r4, 8007872 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8e>
 800780c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800780e:	eb15 0f08 	cmn.w	r5, r8
 8007812:	bf18      	it	ne
 8007814:	f8d9 3000 	ldrne.w	r3, [r9]
	    (this->_M_impl._M_start, __position.base(),
 8007818:	f8d6 9000 	ldr.w	r9, [r6]
 800781c:	bf18      	it	ne
 800781e:	f845 3008 	strne.w	r3, [r5, r8]
	  if (_Num)
 8007822:	45b9      	cmp	r9, r7
	  const ptrdiff_t _Num = __last - __first;
 8007824:	eba7 0809 	sub.w	r8, r7, r9
	  if (_Num)
 8007828:	d004      	beq.n	8007834 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800782a:	4642      	mov	r2, r8
 800782c:	4649      	mov	r1, r9
 800782e:	4628      	mov	r0, r5
 8007830:	f004 fcac 	bl	800c18c <memmove>
	  const ptrdiff_t _Num = __last - __first;
 8007834:	6872      	ldr	r2, [r6, #4]
	  ++__new_finish;
 8007836:	f108 0304 	add.w	r3, r8, #4
	  if (_Num)
 800783a:	42ba      	cmp	r2, r7
 800783c:	442b      	add	r3, r5
	  const ptrdiff_t _Num = __last - __first;
 800783e:	eba2 0807 	sub.w	r8, r2, r7
	  if (_Num)
 8007842:	d005      	beq.n	8007850 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007844:	4618      	mov	r0, r3
 8007846:	4642      	mov	r2, r8
 8007848:	4639      	mov	r1, r7
 800784a:	f004 fc94 	bl	800c176 <memcpy>
 800784e:	4603      	mov	r3, r0
	  return __result + _Num;
 8007850:	eb03 0708 	add.w	r7, r3, r8
	if (__p)
 8007854:	f1b9 0f00 	cmp.w	r9, #0
 8007858:	d002      	beq.n	8007860 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7c>
	::operator delete(__p);
 800785a:	4648      	mov	r0, r9
 800785c:	f001 fb20 	bl	8008ea0 <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007860:	eb05 0484 	add.w	r4, r5, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 8007864:	e9c6 5700 	strd	r5, r7, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007868:	60b4      	str	r4, [r6, #8]
    }
 800786a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800786e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007872:	00a0      	lsls	r0, r4, #2
 8007874:	f001 fafa 	bl	8008e6c <_Znwj>
 8007878:	4605      	mov	r5, r0
 800787a:	e7c8      	b.n	800780e <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>

0800787c <_ZN12TimerHandlerC1Ev>:
TimerHandler::TimerHandler() {
 800787c:	b513      	push	{r0, r1, r4, lr}
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <_ZN12TimerHandlerC1Ev+0x2c>)
 8007880:	4604      	mov	r4, r0
 8007882:	6003      	str	r3, [r0, #0]
	timerHandlers.push_back(this);
 8007884:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007886:	4809      	ldr	r0, [pc, #36]	; (80078ac <_ZN12TimerHandlerC1Ev+0x30>)
 8007888:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 800788c:	4299      	cmp	r1, r3
 800788e:	4603      	mov	r3, r0
 8007890:	d006      	beq.n	80078a0 <_ZN12TimerHandlerC1Ev+0x24>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007892:	b101      	cbz	r1, 8007896 <_ZN12TimerHandlerC1Ev+0x1a>
 8007894:	600c      	str	r4, [r1, #0]
	    ++this->_M_impl._M_finish;
 8007896:	3104      	adds	r1, #4
 8007898:	6059      	str	r1, [r3, #4]
}
 800789a:	4620      	mov	r0, r4
 800789c:	b002      	add	sp, #8
 800789e:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80078a0:	aa01      	add	r2, sp, #4
 80078a2:	f7ff ff9f 	bl	80077e4 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 80078a6:	e7f8      	b.n	800789a <_ZN12TimerHandlerC1Ev+0x1e>
 80078a8:	0800d9c8 	.word	0x0800d9c8
 80078ac:	20000b7c 	.word	0x20000b7c

080078b0 <_ZN13UsbHidHandlerD1Ev>:
	// There should only be one hid handler for now
}

UsbHidHandler::~UsbHidHandler() {
	// TODO Auto-generated destructor stub
}
 80078b0:	4770      	bx	lr

080078b2 <_ZN13UsbHidHandler6hidGetEhtPPh>:



void UsbHidHandler::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){

}
 80078b2:	4770      	bx	lr

080078b4 <_ZN13UsbHidHandler6hidOutEPh>:

void UsbHidHandler::hidOut(uint8_t* report){

}
 80078b4:	4770      	bx	lr

080078b6 <_ZN13UsbHidHandlerD0Ev>:
UsbHidHandler::~UsbHidHandler() {
 80078b6:	b510      	push	{r4, lr}
 80078b8:	4604      	mov	r4, r0
}
 80078ba:	2104      	movs	r1, #4
 80078bc:	f001 fad4 	bl	8008e68 <_ZdlPvj>
 80078c0:	4620      	mov	r0, r4
 80078c2:	bd10      	pop	{r4, pc}

080078c4 <_ZN13UsbHidHandlerC1Ev>:
UsbHidHandler::UsbHidHandler() {
 80078c4:	4b01      	ldr	r3, [pc, #4]	; (80078cc <_ZN13UsbHidHandlerC1Ev+0x8>)
 80078c6:	6003      	str	r3, [r0, #0]
}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	0800d9dc 	.word	0x0800d9dc

080078d0 <_ZN13UsbHidHandler19registerHidCallbackEv>:

void UsbHidHandler::registerHidCallback(){
	extern UsbHidHandler* globalHidHandler;
	globalHidHandler = this;
 80078d0:	4b01      	ldr	r3, [pc, #4]	; (80078d8 <_ZN13UsbHidHandler19registerHidCallbackEv+0x8>)
 80078d2:	6018      	str	r0, [r3, #0]
}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	20000b78 	.word	0x20000b78

080078dc <HAL_ADC_ConvCpltCallback>:
std::vector<CommandHandler*> cmdHandlers;

volatile uint32_t ADC_BUF[ADC_CHANNELS] = {0};


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80078dc:	b570      	push	{r4, r5, r6, lr}
      : _M_current(__i) { }
 80078de:	4b07      	ldr	r3, [pc, #28]	; (80078fc <HAL_ADC_ConvCpltCallback+0x20>)
		for(AdcHandler* c : adcHandlers){
			c->adcUpd(ADC_BUF);
 80078e0:	4d07      	ldr	r5, [pc, #28]	; (8007900 <HAL_ADC_ConvCpltCallback+0x24>)
 80078e2:	e9d3 4600 	ldrd	r4, r6, [r3]
		for(AdcHandler* c : adcHandlers){
 80078e6:	42b4      	cmp	r4, r6
 80078e8:	d006      	beq.n	80078f8 <HAL_ADC_ConvCpltCallback+0x1c>
 80078ea:	f854 0b04 	ldr.w	r0, [r4], #4
			c->adcUpd(ADC_BUF);
 80078ee:	4629      	mov	r1, r5
 80078f0:	6803      	ldr	r3, [r0, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	4798      	blx	r3
 80078f6:	e7f6      	b.n	80078e6 <HAL_ADC_ConvCpltCallback+0xa>
		}
}
 80078f8:	bd70      	pop	{r4, r5, r6, pc}
 80078fa:	bf00      	nop
 80078fc:	20000b54 	.word	0x20000b54
 8007900:	20000b4c 	.word	0x20000b4c

08007904 <HAL_TIM_PeriodElapsedCallback>:

std::vector<TimerHandler*> timerHandlers;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	4605      	mov	r5, r0
 8007908:	4b06      	ldr	r3, [pc, #24]	; (8007924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800790a:	e9d3 4600 	ldrd	r4, r6, [r3]
	for(TimerHandler* c : timerHandlers){
 800790e:	42b4      	cmp	r4, r6
 8007910:	d006      	beq.n	8007920 <HAL_TIM_PeriodElapsedCallback+0x1c>
 8007912:	f854 0b04 	ldr.w	r0, [r4], #4
			c->timerElapsed(htim);
 8007916:	4629      	mov	r1, r5
 8007918:	6803      	ldr	r3, [r0, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	4798      	blx	r3
 800791e:	e7f6      	b.n	800790e <HAL_TIM_PeriodElapsedCallback+0xa>
		}
}
 8007920:	bd70      	pop	{r4, r5, r6, pc}
 8007922:	bf00      	nop
 8007924:	20000b7c 	.word	0x20000b7c

08007928 <HAL_GPIO_EXTI_Callback>:

std::vector<ExtiHandler*> extiHandlers;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	4605      	mov	r5, r0
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <HAL_GPIO_EXTI_Callback+0x20>)
 800792e:	e9d3 4600 	ldrd	r4, r6, [r3]
	for(ExtiHandler* c : extiHandlers){
 8007932:	42b4      	cmp	r4, r6
 8007934:	d006      	beq.n	8007944 <HAL_GPIO_EXTI_Callback+0x1c>
 8007936:	f854 0b04 	ldr.w	r0, [r4], #4
		c->exti(GPIO_Pin);
 800793a:	4629      	mov	r1, r5
 800793c:	6803      	ldr	r3, [r0, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	4798      	blx	r3
 8007942:	e7f6      	b.n	8007932 <HAL_GPIO_EXTI_Callback+0xa>
	}
}
 8007944:	bd70      	pop	{r4, r5, r6, pc}
 8007946:	bf00      	nop
 8007948:	20000b6c 	.word	0x20000b6c

0800794c <CDC_Callback>:

void CDC_Callback(uint8_t* Buf, uint32_t *Len){
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4604      	mov	r4, r0
 8007950:	460d      	mov	r5, r1
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //DEBUG
 8007952:	4807      	ldr	r0, [pc, #28]	; (8007970 <CDC_Callback+0x24>)
 8007954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007958:	f7fa fec5 	bl	80026e6 <HAL_GPIO_TogglePin>
	if(mainclass!=nullptr)
 800795c:	4b05      	ldr	r3, [pc, #20]	; (8007974 <CDC_Callback+0x28>)
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	b128      	cbz	r0, 800796e <CDC_Callback+0x22>
		mainclass->cdcRcv((char*)Buf,Len);
 8007962:	462a      	mov	r2, r5
 8007964:	4621      	mov	r1, r4
}
 8007966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mainclass->cdcRcv((char*)Buf,Len);
 800796a:	f7fe b8b5 	b.w	8005ad8 <_ZN8FFBWheel6cdcRcvEPcPm>
}
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	40011000 	.word	0x40011000
 8007974:	20000b38 	.word	0x20000b38

08007978 <USBD_OutEvent_HID>:

UsbHidHandler* globalHidHandler = nullptr;
void USBD_OutEvent_HID(uint8_t* report){
	if(globalHidHandler!=nullptr)
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <USBD_OutEvent_HID+0x10>)
void USBD_OutEvent_HID(uint8_t* report){
 800797a:	4601      	mov	r1, r0
	if(globalHidHandler!=nullptr)
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	b110      	cbz	r0, 8007986 <USBD_OutEvent_HID+0xe>
			globalHidHandler->hidOut(report);
 8007980:	6802      	ldr	r2, [r0, #0]
 8007982:	6892      	ldr	r2, [r2, #8]
 8007984:	4710      	bx	r2
}
 8007986:	4770      	bx	lr
 8007988:	20000b78 	.word	0x20000b78

0800798c <USBD_GetEvent_HID>:
void USBD_GetEvent_HID(uint8_t id,uint16_t len,uint8_t** return_buf){
 800798c:	4613      	mov	r3, r2
	if(globalHidHandler!=nullptr)
 800798e:	4a07      	ldr	r2, [pc, #28]	; (80079ac <USBD_GetEvent_HID+0x20>)
void USBD_GetEvent_HID(uint8_t id,uint16_t len,uint8_t** return_buf){
 8007990:	b430      	push	{r4, r5}
 8007992:	4605      	mov	r5, r0
	if(globalHidHandler!=nullptr)
 8007994:	6810      	ldr	r0, [r2, #0]
 8007996:	b130      	cbz	r0, 80079a6 <USBD_GetEvent_HID+0x1a>
		globalHidHandler->hidGet(id, len, return_buf);
 8007998:	6802      	ldr	r2, [r0, #0]
 800799a:	68d4      	ldr	r4, [r2, #12]
 800799c:	460a      	mov	r2, r1
 800799e:	46a4      	mov	ip, r4
 80079a0:	4629      	mov	r1, r5
}
 80079a2:	bc30      	pop	{r4, r5}
		globalHidHandler->hidGet(id, len, return_buf);
 80079a4:	4760      	bx	ip
}
 80079a6:	bc30      	pop	{r4, r5}
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	20000b78 	.word	0x20000b78

080079b0 <USB_SOF>:

void USB_SOF(){
	if(mainclass!=nullptr)
 80079b0:	4b02      	ldr	r3, [pc, #8]	; (80079bc <USB_SOF+0xc>)
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	b108      	cbz	r0, 80079ba <USB_SOF+0xa>
		mainclass->SOF();
 80079b6:	f7fe b8b1 	b.w	8005b1c <_ZN8FFBWheel3SOFEv>
}
 80079ba:	4770      	bx	lr
 80079bc:	20000b38 	.word	0x20000b38

080079c0 <_GLOBAL__sub_I_adcHandlers>:
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80079c0:	2300      	movs	r3, #0
 80079c2:	4a08      	ldr	r2, [pc, #32]	; (80079e4 <_GLOBAL__sub_I_adcHandlers+0x24>)
 80079c4:	e9c2 3300 	strd	r3, r3, [r2]
 80079c8:	6093      	str	r3, [r2, #8]
 80079ca:	4a07      	ldr	r2, [pc, #28]	; (80079e8 <_GLOBAL__sub_I_adcHandlers+0x28>)
 80079cc:	e9c2 3300 	strd	r3, r3, [r2]
 80079d0:	6093      	str	r3, [r2, #8]
 80079d2:	4a06      	ldr	r2, [pc, #24]	; (80079ec <_GLOBAL__sub_I_adcHandlers+0x2c>)
 80079d4:	e9c2 3300 	strd	r3, r3, [r2]
 80079d8:	6093      	str	r3, [r2, #8]
 80079da:	4a05      	ldr	r2, [pc, #20]	; (80079f0 <_GLOBAL__sub_I_adcHandlers+0x30>)
 80079dc:	e9c2 3300 	strd	r3, r3, [r2]
 80079e0:	6093      	str	r3, [r2, #8]
 80079e2:	4770      	bx	lr
 80079e4:	20000b54 	.word	0x20000b54
 80079e8:	20000b60 	.word	0x20000b60
 80079ec:	20000b7c 	.word	0x20000b7c
 80079f0:	20000b6c 	.word	0x20000b6c

080079f4 <_GLOBAL__sub_D_adcHandlers>:
 80079f4:	b508      	push	{r3, lr}
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80079f6:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <_GLOBAL__sub_D_adcHandlers+0x30>)
 80079f8:	6818      	ldr	r0, [r3, #0]
	if (__p)
 80079fa:	b108      	cbz	r0, 8007a00 <_GLOBAL__sub_D_adcHandlers+0xc>
	::operator delete(__p);
 80079fc:	f001 fa50 	bl	8008ea0 <_ZdlPv>
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8007a00:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <_GLOBAL__sub_D_adcHandlers+0x34>)
 8007a02:	6818      	ldr	r0, [r3, #0]
	if (__p)
 8007a04:	b108      	cbz	r0, 8007a0a <_GLOBAL__sub_D_adcHandlers+0x16>
 8007a06:	f001 fa4b 	bl	8008ea0 <_ZdlPv>
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8007a0a:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <_GLOBAL__sub_D_adcHandlers+0x38>)
 8007a0c:	6818      	ldr	r0, [r3, #0]
	if (__p)
 8007a0e:	b108      	cbz	r0, 8007a14 <_GLOBAL__sub_D_adcHandlers+0x20>
 8007a10:	f001 fa46 	bl	8008ea0 <_ZdlPv>
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8007a14:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <_GLOBAL__sub_D_adcHandlers+0x3c>)
 8007a16:	6818      	ldr	r0, [r3, #0]
	if (__p)
 8007a18:	b118      	cbz	r0, 8007a22 <_GLOBAL__sub_D_adcHandlers+0x2e>
 8007a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a1e:	f001 ba3f 	b.w	8008ea0 <_ZdlPv>
 8007a22:	bd08      	pop	{r3, pc}
 8007a24:	20000b6c 	.word	0x20000b6c
 8007a28:	20000b7c 	.word	0x20000b7c
 8007a2c:	20000b60 	.word	0x20000b60
 8007a30:	20000b54 	.word	0x20000b54

08007a34 <_Z11pulseSysLedv>:
#include "ledEffects.h"
#include "main.h"

uint32_t sysledtick=0;

void pulseSysLed(){
 8007a34:	b508      	push	{r3, lr}
	sysledtick = HAL_GetTick();
 8007a36:	f7fa f8a9 	bl	8001b8c <HAL_GetTick>
 8007a3a:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <_Z11pulseSysLedv+0x1c>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8007a3c:	2201      	movs	r2, #1
	sysledtick = HAL_GetTick();
 8007a3e:	6018      	str	r0, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8007a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
 8007a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8007a48:	4802      	ldr	r0, [pc, #8]	; (8007a54 <_Z11pulseSysLedv+0x20>)
 8007a4a:	f7fa be47 	b.w	80026dc <HAL_GPIO_WritePin>
 8007a4e:	bf00      	nop
 8007a50:	20000b88 	.word	0x20000b88
 8007a54:	40011000 	.word	0x40011000

08007a58 <_Z10updateLedsv>:

void updateLeds(){
 8007a58:	b510      	push	{r4, lr}
	if(sysledtick!=0 && HAL_GetTick() > sysledtick+35){
 8007a5a:	4c09      	ldr	r4, [pc, #36]	; (8007a80 <_Z10updateLedsv+0x28>)
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	b16b      	cbz	r3, 8007a7c <_Z10updateLedsv+0x24>
 8007a60:	f7fa f894 	bl	8001b8c <HAL_GetTick>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	3323      	adds	r3, #35	; 0x23
 8007a68:	4298      	cmp	r0, r3
 8007a6a:	d907      	bls.n	8007a7c <_Z10updateLedsv+0x24>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a72:	4804      	ldr	r0, [pc, #16]	; (8007a84 <_Z10updateLedsv+0x2c>)
 8007a74:	f7fa fe32 	bl	80026dc <HAL_GPIO_WritePin>
		sysledtick = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	6023      	str	r3, [r4, #0]
	}
}
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	bf00      	nop
 8007a80:	20000b88 	.word	0x20000b88
 8007a84:	40011000 	.word	0x40011000

08007a88 <_Z11ws2812_initv>:
};

void ws2812_init(void)
{
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 8007a88:	2330      	movs	r3, #48	; 0x30
	  BUF_DMA[i] = LOW;
 8007a8a:	211a      	movs	r1, #26
 8007a8c:	4a03      	ldr	r2, [pc, #12]	; (8007a9c <_Z11ws2812_initv+0x14>)
 8007a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 8007a92:	3301      	adds	r3, #1
 8007a94:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8007a98:	d1f9      	bne.n	8007a8e <_Z11ws2812_initv+0x6>
}
 8007a9a:	4770      	bx	lr
 8007a9c:	20000b8c 	.word	0x20000b8c

08007aa0 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>:

void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8007aa0:	b530      	push	{r4, r5, lr}
  for(uint16_t i = 0; i < 8; i++)
  {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = BitIsSet(Rpixel,(7-i)) ? HIGH : LOW;
 8007aa2:	2418      	movs	r4, #24
 8007aa4:	435c      	muls	r4, r3
 8007aa6:	4b11      	ldr	r3, [pc, #68]	; (8007aec <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x4c>)
 8007aa8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8007aac:	2407      	movs	r4, #7
 8007aae:	335e      	adds	r3, #94	; 0x5e
 8007ab0:	fa40 f504 	asr.w	r5, r0, r4
 8007ab4:	f015 0f01 	tst.w	r5, #1
 8007ab8:	bf14      	ite	ne
 8007aba:	2541      	movne	r5, #65	; 0x41
 8007abc:	251a      	moveq	r5, #26
 8007abe:	f823 5f02 	strh.w	r5, [r3, #2]!
      BUF_DMA[DELAY_LEN+posX*24+i+8] = BitIsSet(Gpixel,(7-i)) ? HIGH : LOW;
 8007ac2:	fa41 f504 	asr.w	r5, r1, r4
 8007ac6:	f015 0f01 	tst.w	r5, #1
 8007aca:	bf14      	ite	ne
 8007acc:	2541      	movne	r5, #65	; 0x41
 8007ace:	251a      	moveq	r5, #26
 8007ad0:	821d      	strh	r5, [r3, #16]
      BUF_DMA[DELAY_LEN+posX*24+i+16] = BitIsSet(Bpixel,(7-i)) ? HIGH : LOW;
 8007ad2:	fa42 f504 	asr.w	r5, r2, r4
 8007ad6:	f015 0f01 	tst.w	r5, #1
 8007ada:	bf14      	ite	ne
 8007adc:	2541      	movne	r5, #65	; 0x41
 8007ade:	251a      	moveq	r5, #26
  for(uint16_t i = 0; i < 8; i++)
 8007ae0:	f114 34ff 	adds.w	r4, r4, #4294967295
      BUF_DMA[DELAY_LEN+posX*24+i+16] = BitIsSet(Bpixel,(7-i)) ? HIGH : LOW;
 8007ae4:	841d      	strh	r5, [r3, #32]
  for(uint16_t i = 0; i < 8; i++)
 8007ae6:	d2e3      	bcs.n	8007ab0 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x10>
  }
}
 8007ae8:	bd30      	pop	{r4, r5, pc}
 8007aea:	bf00      	nop
 8007aec:	20000b8c 	.word	0x20000b8c

08007af0 <_Z16setup_rpm_ws2812h>:

void setup_rpm_ws2812(uint8_t rgb_array)
{
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	2400      	movs	r4, #0
	for(uint16_t i = 0; i < LED_COUNT; i++)
	{
		if(i < rgb_array)
 8007af4:	4606      	mov	r6, r0
 8007af6:	4d0a      	ldr	r5, [pc, #40]	; (8007b20 <_Z16setup_rpm_ws2812h+0x30>)
 8007af8:	b2a3      	uxth	r3, r4
 8007afa:	429e      	cmp	r6, r3
			ws2812_pixel_rgb_to_buf_dma(LED_RPM[i].R, LED_RPM[i].G, LED_RPM[i].B, i);
		else
			ws2812_pixel_rgb_to_buf_dma(0, 0, 0, i);
 8007afc:	bf91      	iteee	ls
 8007afe:	2200      	movls	r2, #0
 8007b00:	eb04 0044 	addhi.w	r0, r4, r4, lsl #1
 8007b04:	1829      	addhi	r1, r5, r0
			ws2812_pixel_rgb_to_buf_dma(LED_RPM[i].R, LED_RPM[i].G, LED_RPM[i].B, i);
 8007b06:	788a      	ldrbhi	r2, [r1, #2]
 8007b08:	bf87      	ittee	hi
 8007b0a:	5c28      	ldrbhi	r0, [r5, r0]
 8007b0c:	7849      	ldrbhi	r1, [r1, #1]
			ws2812_pixel_rgb_to_buf_dma(0, 0, 0, i);
 8007b0e:	4611      	movls	r1, r2
 8007b10:	4610      	movls	r0, r2
 8007b12:	3401      	adds	r4, #1
 8007b14:	f7ff ffc4 	bl	8007aa0 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
	for(uint16_t i = 0; i < LED_COUNT; i++)
 8007b18:	2c10      	cmp	r4, #16
 8007b1a:	d1ed      	bne.n	8007af8 <_Z16setup_rpm_ws2812h+0x8>
	}
}
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	bf00      	nop
 8007b20:	2000127c 	.word	0x2000127c

08007b24 <_Z12setup_ws2812P3RGBh>:

void setup_ws2812(RGB* rgb_array, uint8_t size)
{
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4604      	mov	r4, r0
 8007b28:	2500      	movs	r5, #0
	for(uint16_t i = 0; i < size; i++)
 8007b2a:	460e      	mov	r6, r1
 8007b2c:	b2ab      	uxth	r3, r5
 8007b2e:	429e      	cmp	r6, r3
 8007b30:	f104 0403 	add.w	r4, r4, #3
 8007b34:	d909      	bls.n	8007b4a <_Z12setup_ws2812P3RGBh+0x26>
	{
		ws2812_pixel_rgb_to_buf_dma(rgb_array[i].R, rgb_array[i].G, rgb_array[i].B, i);
 8007b36:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8007b3a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8007b3e:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 8007b42:	f7ff ffad 	bl	8007aa0 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
 8007b46:	3501      	adds	r5, #1
	for(uint16_t i = 0; i < size; i++)
 8007b48:	e7f0      	b.n	8007b2c <_Z12setup_ws2812P3RGBh+0x8>
	}
}
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}

08007b4c <_GLOBAL__sub_I_BUF_DMA>:
};
 8007b4c:	4b0e      	ldr	r3, [pc, #56]	; (8007b88 <_GLOBAL__sub_I_BUF_DMA+0x3c>)
 8007b4e:	781a      	ldrb	r2, [r3, #0]
 8007b50:	4b0e      	ldr	r3, [pc, #56]	; (8007b8c <_GLOBAL__sub_I_BUF_DMA+0x40>)
 8007b52:	705a      	strb	r2, [r3, #1]
 8007b54:	711a      	strb	r2, [r3, #4]
 8007b56:	71da      	strb	r2, [r3, #7]
 8007b58:	729a      	strb	r2, [r3, #10]
 8007b5a:	731a      	strb	r2, [r3, #12]
 8007b5c:	735a      	strb	r2, [r3, #13]
 8007b5e:	73da      	strb	r2, [r3, #15]
 8007b60:	741a      	strb	r2, [r3, #16]
 8007b62:	749a      	strb	r2, [r3, #18]
 8007b64:	74da      	strb	r2, [r3, #19]
 8007b66:	755a      	strb	r2, [r3, #21]
 8007b68:	759a      	strb	r2, [r3, #22]
 8007b6a:	761a      	strb	r2, [r3, #24]
 8007b6c:	76da      	strb	r2, [r3, #27]
 8007b6e:	779a      	strb	r2, [r3, #30]
 8007b70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8007b74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8007b78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8007b7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007b80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	2000001c 	.word	0x2000001c
 8007b8c:	2000127c 	.word	0x2000127c

08007b90 <USBD_CDC_DataIn>:
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{

  
  if(hcdc != NULL)
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <USBD_CDC_DataIn+0x30>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	b18b      	cbz	r3, 8007bba <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8007b96:	2000      	movs	r0, #0
 8007b98:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8007b9c:	f883 0052 	strb.w	r0, [r3, #82]	; 0x52
 8007ba0:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8007ba4:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
 8007ba8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007bac:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
 8007bb0:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8007bb4:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55

    return USBD_OK;
 8007bb8:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8007bba:	2002      	movs	r0, #2
  }
}
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	200019a8 	.word	0x200019a8

08007bc4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 

  
  if((fops_cdc_p != NULL) && (hcdc->CmdOpCode != 0xFF))
 8007bc4:	4b09      	ldr	r3, [pc, #36]	; (8007bec <USBD_CDC_EP0_RxReady+0x28>)
{ 
 8007bc6:	b510      	push	{r4, lr}
  if((fops_cdc_p != NULL) && (hcdc->CmdOpCode != 0xFF))
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	b16b      	cbz	r3, 8007be8 <USBD_CDC_EP0_RxReady+0x24>
 8007bcc:	4c08      	ldr	r4, [pc, #32]	; (8007bf0 <USBD_CDC_EP0_RxReady+0x2c>)
 8007bce:	6821      	ldr	r1, [r4, #0]
 8007bd0:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
 8007bd4:	28ff      	cmp	r0, #255	; 0xff
 8007bd6:	d007      	beq.n	8007be8 <USBD_CDC_EP0_RxReady+0x24>
  {
    fops_cdc_p->Control(hcdc->CmdOpCode,
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
 8007bde:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8007be0:	22ff      	movs	r2, #255	; 0xff
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
  }
  return USBD_OK;
}
 8007be8:	2000      	movs	r0, #0
 8007bea:	bd10      	pop	{r4, pc}
 8007bec:	200019ac 	.word	0x200019ac
 8007bf0:	200019a8 	.word	0x200019a8

08007bf4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007bf4:	234b      	movs	r3, #75	; 0x4b
 8007bf6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8007bf8:	4800      	ldr	r0, [pc, #0]	; (8007bfc <USBD_CDC_GetFSCfgDesc+0x8>)
 8007bfa:	4770      	bx	lr
 8007bfc:	20000064 	.word	0x20000064

08007c00 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007c00:	230a      	movs	r3, #10
 8007c02:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8007c04:	4800      	ldr	r0, [pc, #0]	; (8007c08 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007c06:	4770      	bx	lr
 8007c08:	20000058 	.word	0x20000058

08007c0c <USBD_CDC_DataOut>:
{      
 8007c0c:	b538      	push	{r3, r4, r5, lr}
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007c0e:	4c0a      	ldr	r4, [pc, #40]	; (8007c38 <USBD_CDC_DataOut+0x2c>)
 8007c10:	6825      	ldr	r5, [r4, #0]
 8007c12:	f000 fc05 	bl	8008420 <USBD_LL_GetRxDataSize>
  if(hcdc != NULL)
 8007c16:	6823      	ldr	r3, [r4, #0]
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007c18:	f8c5 004a 	str.w	r0, [r5, #74]	; 0x4a
  if(hcdc != NULL)
 8007c1c:	b14b      	cbz	r3, 8007c32 <USBD_CDC_DataOut+0x26>
    fops_cdc_p->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c1e:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <USBD_CDC_DataOut+0x30>)
 8007c20:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 8007c24:	6812      	ldr	r2, [r2, #0]
 8007c26:	f8d3 0042 	ldr.w	r0, [r3, #66]	; 0x42
 8007c2a:	68d2      	ldr	r2, [r2, #12]
 8007c2c:	4790      	blx	r2
    return USBD_OK;
 8007c2e:	2000      	movs	r0, #0
}
 8007c30:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8007c32:	2002      	movs	r0, #2
 8007c34:	e7fc      	b.n	8007c30 <USBD_CDC_DataOut+0x24>
 8007c36:	bf00      	nop
 8007c38:	200019a8 	.word	0x200019a8
 8007c3c:	200019ac 	.word	0x200019ac

08007c40 <USBD_CDC_Setup>:
{
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c42:	780d      	ldrb	r5, [r1, #0]
{
 8007c44:	4607      	mov	r7, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c46:	f015 0360 	ands.w	r3, r5, #96	; 0x60
{
 8007c4a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c4c:	d021      	beq.n	8007c92 <USBD_CDC_Setup+0x52>
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d117      	bne.n	8007c82 <USBD_CDC_Setup+0x42>
    if (req->wLength)
 8007c52:	88ca      	ldrh	r2, [r1, #6]
 8007c54:	784b      	ldrb	r3, [r1, #1]
 8007c56:	b1b2      	cbz	r2, 8007c86 <USBD_CDC_Setup+0x46>
 8007c58:	4e11      	ldr	r6, [pc, #68]	; (8007ca0 <USBD_CDC_Setup+0x60>)
      if (req->bmRequest & 0x80)
 8007c5a:	062d      	lsls	r5, r5, #24
 8007c5c:	6831      	ldr	r1, [r6, #0]
 8007c5e:	d50a      	bpl.n	8007c76 <USBD_CDC_Setup+0x36>
        fops_cdc_p->Control(req->bRequest, (uint8_t *)hcdc->data,req->wLength);
 8007c60:	4810      	ldr	r0, [pc, #64]	; (8007ca4 <USBD_CDC_Setup+0x64>)
 8007c62:	6800      	ldr	r0, [r0, #0]
 8007c64:	6885      	ldr	r5, [r0, #8]
 8007c66:	4618      	mov	r0, r3
 8007c68:	47a8      	blx	r5
          USBD_CtlSendData (pdev, 
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	88e2      	ldrh	r2, [r4, #6]
 8007c6e:	6831      	ldr	r1, [r6, #0]
      USBD_CtlSendData (pdev,
 8007c70:	f001 f8b8 	bl	8008de4 <USBD_CtlSendData>
      break;
 8007c74:	e005      	b.n	8007c82 <USBD_CDC_Setup+0x42>
        hcdc->CmdOpCode = req->bRequest;
 8007c76:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        hcdc->CmdLength = req->wLength;
 8007c7a:	f881 2041 	strb.w	r2, [r1, #65]	; 0x41
        USBD_CtlPrepareRx (pdev, 
 8007c7e:	f001 f8c6 	bl	8008e0e <USBD_CtlPrepareRx>
}
 8007c82:	2000      	movs	r0, #0
 8007c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      fops_cdc_p->Control(req->bRequest, (uint8_t*)req,0);
 8007c86:	4807      	ldr	r0, [pc, #28]	; (8007ca4 <USBD_CDC_Setup+0x64>)
 8007c88:	6800      	ldr	r0, [r0, #0]
 8007c8a:	6884      	ldr	r4, [r0, #8]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	47a0      	blx	r4
 8007c90:	e7f7      	b.n	8007c82 <USBD_CDC_Setup+0x42>
    switch (req->bRequest)
 8007c92:	784b      	ldrb	r3, [r1, #1]
 8007c94:	2b0a      	cmp	r3, #10
 8007c96:	d1f4      	bne.n	8007c82 <USBD_CDC_Setup+0x42>
      USBD_CtlSendData (pdev,
 8007c98:	2201      	movs	r2, #1
 8007c9a:	4903      	ldr	r1, [pc, #12]	; (8007ca8 <USBD_CDC_Setup+0x68>)
 8007c9c:	e7e8      	b.n	8007c70 <USBD_CDC_Setup+0x30>
 8007c9e:	bf00      	nop
 8007ca0:	200019a8 	.word	0x200019a8
 8007ca4:	200019ac 	.word	0x200019ac
 8007ca8:	200012ac 	.word	0x200012ac

08007cac <USBD_CDC_DeInit>:
{
 8007cac:	b510      	push	{r4, lr}
 8007cae:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8007cb0:	2181      	movs	r1, #129	; 0x81
 8007cb2:	f000 fb51 	bl	8008358 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fb4d 	bl	8008358 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8007cbe:	4620      	mov	r0, r4
  if(hcdc != NULL)
 8007cc0:	4c08      	ldr	r4, [pc, #32]	; (8007ce4 <USBD_CDC_DeInit+0x38>)
  USBD_LL_CloseEP(pdev,
 8007cc2:	2182      	movs	r1, #130	; 0x82
 8007cc4:	f000 fb48 	bl	8008358 <USBD_LL_CloseEP>
  if(hcdc != NULL)
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	b143      	cbz	r3, 8007cde <USBD_CDC_DeInit+0x32>
    fops_cdc_p->DeInit();
 8007ccc:	4b06      	ldr	r3, [pc, #24]	; (8007ce8 <USBD_CDC_DeInit+0x3c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	4798      	blx	r3
    USBD_free(hcdc);
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	f004 fa29 	bl	800c12c <free>
    hcdc = NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6023      	str	r3, [r4, #0]
}
 8007cde:	2000      	movs	r0, #0
 8007ce0:	bd10      	pop	{r4, pc}
 8007ce2:	bf00      	nop
 8007ce4:	200019a8 	.word	0x200019a8
 8007ce8:	200019ac 	.word	0x200019ac

08007cec <USBD_CDC_Init>:
{
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	4605      	mov	r5, r0
    USBD_LL_OpenEP(pdev,
 8007cf0:	2340      	movs	r3, #64	; 0x40
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	2181      	movs	r1, #129	; 0x81
 8007cf6:	f000 fb1f 	bl	8008338 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8007cfa:	2340      	movs	r3, #64	; 0x40
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 fb19 	bl	8008338 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8007d06:	2308      	movs	r3, #8
 8007d08:	2203      	movs	r2, #3
 8007d0a:	2182      	movs	r1, #130	; 0x82
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f000 fb13 	bl	8008338 <USBD_LL_OpenEP>
  hcdc = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007d12:	205a      	movs	r0, #90	; 0x5a
 8007d14:	f004 fa02 	bl	800c11c <malloc>
 8007d18:	4c1a      	ldr	r4, [pc, #104]	; (8007d84 <USBD_CDC_Init+0x98>)
  pdev->pClassData = hcdc;
 8007d1a:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
  hcdc = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007d1e:	6020      	str	r0, [r4, #0]
  if(hcdc == NULL)
 8007d20:	b370      	cbz	r0, 8007d80 <USBD_CDC_Init+0x94>
    fops_cdc_p->Init();
 8007d22:	4b19      	ldr	r3, [pc, #100]	; (8007d88 <USBD_CDC_Init+0x9c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4798      	blx	r3
    hcdc->TxState =0;
 8007d2a:	6822      	ldr	r2, [r4, #0]
 8007d2c:	2400      	movs	r4, #0
 8007d2e:	f892 3052 	ldrb.w	r3, [r2, #82]	; 0x52
 8007d32:	f882 4052 	strb.w	r4, [r2, #82]	; 0x52
 8007d36:	f892 3053 	ldrb.w	r3, [r2, #83]	; 0x53
 8007d3a:	f882 4053 	strb.w	r4, [r2, #83]	; 0x53
 8007d3e:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8007d42:	f882 4054 	strb.w	r4, [r2, #84]	; 0x54
 8007d46:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8007d4a:	f882 4055 	strb.w	r4, [r2, #85]	; 0x55
    hcdc->RxState =0;
 8007d4e:	f892 3056 	ldrb.w	r3, [r2, #86]	; 0x56
 8007d52:	f882 4056 	strb.w	r4, [r2, #86]	; 0x56
 8007d56:	f892 3057 	ldrb.w	r3, [r2, #87]	; 0x57
 8007d5a:	f882 4057 	strb.w	r4, [r2, #87]	; 0x57
 8007d5e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8007d62:	f882 4058 	strb.w	r4, [r2, #88]	; 0x58
 8007d66:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
      USBD_LL_PrepareReceive(pdev,
 8007d6a:	2101      	movs	r1, #1
    hcdc->RxState =0;
 8007d6c:	f882 4059 	strb.w	r4, [r2, #89]	; 0x59
      USBD_LL_PrepareReceive(pdev,
 8007d70:	2340      	movs	r3, #64	; 0x40
 8007d72:	f8d2 2042 	ldr.w	r2, [r2, #66]	; 0x42
 8007d76:	4628      	mov	r0, r5
 8007d78:	f000 fb44 	bl	8008404 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8007d7c:	4620      	mov	r0, r4
}
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
    ret = 1; 
 8007d80:	2001      	movs	r0, #1
 8007d82:	e7fc      	b.n	8007d7e <USBD_CDC_Init+0x92>
 8007d84:	200019a8 	.word	0x200019a8
 8007d88:	200019ac 	.word	0x200019ac

08007d8c <USBD_CDC_GetOtherSpeedCfgDesc>:
 8007d8c:	234b      	movs	r3, #75	; 0x4b
 8007d8e:	8003      	strh	r3, [r0, #0]
 8007d90:	4800      	ldr	r0, [pc, #0]	; (8007d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8007d92:	4770      	bx	lr
 8007d94:	20000064 	.word	0x20000064

08007d98 <USBD_CDC_GetHSCfgDesc>:
 8007d98:	234b      	movs	r3, #75	; 0x4b
 8007d9a:	8003      	strh	r3, [r0, #0]
 8007d9c:	4800      	ldr	r0, [pc, #0]	; (8007da0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8007d9e:	4770      	bx	lr
 8007da0:	20000064 	.word	0x20000064

08007da4 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8007da4:	b129      	cbz	r1, 8007db2 <USBD_CDC_RegisterInterface+0xe>
  {
    fops_cdc_p= fops;
 8007da6:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <USBD_CDC_RegisterInterface+0x14>)
    pdev->pUserData = fops;
 8007da8:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    fops_cdc_p= fops;
 8007dac:	6019      	str	r1, [r3, #0]
    ret = USBD_OK;    
 8007dae:	2000      	movs	r0, #0
 8007db0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8007db2:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	200019ac 	.word	0x200019ac

08007dbc <USBD_CDC_SetTxBuffer>:
                                uint8_t  *pbuff,
                                uint16_t length)
{

  
  hcdc->TxBuffer = pbuff;
 8007dbc:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <USBD_CDC_SetTxBuffer+0x10>)
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8007dbe:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8c3 1046 	str.w	r1, [r3, #70]	; 0x46
  hcdc->TxLength = length;  
 8007dc6:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
}
 8007dca:	4770      	bx	lr
 8007dcc:	200019a8 	.word	0x200019a8

08007dd0 <USBD_CDC_SetRxBuffer>:
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  
  hcdc->RxBuffer = pbuff;
 8007dd0:	4b02      	ldr	r3, [pc, #8]	; (8007ddc <USBD_CDC_SetRxBuffer+0xc>)
  
  return USBD_OK;
}
 8007dd2:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f8c3 1042 	str.w	r1, [r3, #66]	; 0x42
}
 8007dda:	4770      	bx	lr
 8007ddc:	200019a8 	.word	0x200019a8

08007de0 <USBD_CDC_TransmitPacket>:
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      

  if(hcdc != NULL)
 8007de0:	4b12      	ldr	r3, [pc, #72]	; (8007e2c <USBD_CDC_TransmitPacket+0x4c>)
{      
 8007de2:	b510      	push	{r4, lr}
  if(hcdc != NULL)
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	b1ea      	cbz	r2, 8007e24 <USBD_CDC_TransmitPacket+0x44>
  {
    if(hcdc->TxState == 0)
 8007de8:	f8d2 4052 	ldr.w	r4, [r2, #82]	; 0x52
 8007dec:	2301      	movs	r3, #1
 8007dee:	b9dc      	cbnz	r4, 8007e28 <USBD_CDC_TransmitPacket+0x48>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8007df0:	f892 1052 	ldrb.w	r1, [r2, #82]	; 0x52
 8007df4:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
 8007df8:	f892 3053 	ldrb.w	r3, [r2, #83]	; 0x53
 8007dfc:	f882 4053 	strb.w	r4, [r2, #83]	; 0x53
 8007e00:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8007e04:	f882 4054 	strb.w	r4, [r2, #84]	; 0x54
 8007e08:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8007e0c:	f8d2 304e 	ldr.w	r3, [r2, #78]	; 0x4e
      hcdc->TxState = 1;
 8007e10:	f882 4055 	strb.w	r4, [r2, #85]	; 0x55
      USBD_LL_Transmit(pdev,
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	f8d2 2046 	ldr.w	r2, [r2, #70]	; 0x46
 8007e1a:	2181      	movs	r1, #129	; 0x81
 8007e1c:	f000 fae4 	bl	80083e8 <USBD_LL_Transmit>
      
      return USBD_OK;
 8007e20:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8007e22:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007e24:	2002      	movs	r0, #2
 8007e26:	e7fc      	b.n	8007e22 <USBD_CDC_TransmitPacket+0x42>
      return USBD_BUSY;
 8007e28:	4618      	mov	r0, r3
 8007e2a:	e7fa      	b.n	8007e22 <USBD_CDC_TransmitPacket+0x42>
 8007e2c:	200019a8 	.word	0x200019a8

08007e30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8007e30:	b508      	push	{r3, lr}

  
  /* Suspend or Resume USB Out process */
  if(hcdc != NULL)
 8007e32:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <USBD_CDC_ReceivePacket+0x1c>)
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	b13a      	cbz	r2, 8007e48 <USBD_CDC_ReceivePacket+0x18>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e38:	2340      	movs	r3, #64	; 0x40
 8007e3a:	f8d2 2042 	ldr.w	r2, [r2, #66]	; 0x42
 8007e3e:	2101      	movs	r1, #1
 8007e40:	f000 fae0 	bl	8008404 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007e44:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8007e46:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007e48:	2002      	movs	r0, #2
 8007e4a:	e7fc      	b.n	8007e46 <USBD_CDC_ReceivePacket+0x16>
 8007e4c:	200019a8 	.word	0x200019a8

08007e50 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007e50:	2000      	movs	r0, #0
 8007e52:	4770      	bx	lr

08007e54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e54:	b510      	push	{r4, lr}
	//_write(0,(char*)UserRxBufferFS,*Len);
  CDC_Callback(Buf, Len);
  //CDC_Transmit_FS(UserRxBufferFS, *Len); //ECHO

	// Prepare next receive
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS); //next buffer
 8007e56:	4c06      	ldr	r4, [pc, #24]	; (8007e70 <CDC_Receive_FS+0x1c>)
  CDC_Callback(Buf, Len);
 8007e58:	f7ff fd78 	bl	800794c <CDC_Callback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS); //next buffer
 8007e5c:	4905      	ldr	r1, [pc, #20]	; (8007e74 <CDC_Receive_FS+0x20>)
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f7ff ffb6 	bl	8007dd0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7ff ffe3 	bl	8007e30 <USBD_CDC_ReceivePacket>


  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000914 	.word	0x20000914
 8007e74:	200012ad 	.word	0x200012ad

08007e78 <CDC_Init_FS>:
{
 8007e78:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e7a:	4c06      	ldr	r4, [pc, #24]	; (8007e94 <CDC_Init_FS+0x1c>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4906      	ldr	r1, [pc, #24]	; (8007e98 <CDC_Init_FS+0x20>)
 8007e80:	4620      	mov	r0, r4
 8007e82:	f7ff ff9b 	bl	8007dbc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e86:	4905      	ldr	r1, [pc, #20]	; (8007e9c <CDC_Init_FS+0x24>)
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7ff ffa1 	bl	8007dd0 <USBD_CDC_SetRxBuffer>
}
 8007e8e:	2000      	movs	r0, #0
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	bf00      	nop
 8007e94:	20000914 	.word	0x20000914
 8007e98:	200012ed 	.word	0x200012ed
 8007e9c:	200012ad 	.word	0x200012ad

08007ea0 <CDC_Control_FS>:
  switch(cmd)
 8007ea0:	2821      	cmp	r0, #33	; 0x21
 8007ea2:	d00c      	beq.n	8007ebe <CDC_Control_FS+0x1e>
 8007ea4:	2822      	cmp	r0, #34	; 0x22
 8007ea6:	d012      	beq.n	8007ece <CDC_Control_FS+0x2e>
 8007ea8:	2820      	cmp	r0, #32
 8007eaa:	d106      	bne.n	8007eba <CDC_Control_FS+0x1a>
    	memcpy(&line_coding,pbuf,sizeof(USBD_CDC_LineCodingTypeDef));
 8007eac:	680a      	ldr	r2, [r1, #0]
 8007eae:	4b0b      	ldr	r3, [pc, #44]	; (8007edc <CDC_Control_FS+0x3c>)
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	888a      	ldrh	r2, [r1, #4]
 8007eb4:	809a      	strh	r2, [r3, #4]
 8007eb6:	798a      	ldrb	r2, [r1, #6]
 8007eb8:	719a      	strb	r2, [r3, #6]
}
 8007eba:	2000      	movs	r0, #0
 8007ebc:	4770      	bx	lr
	    memcpy(pbuf,&line_coding,sizeof(USBD_CDC_LineCodingTypeDef));
 8007ebe:	4b07      	ldr	r3, [pc, #28]	; (8007edc <CDC_Control_FS+0x3c>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	600a      	str	r2, [r1, #0]
 8007ec4:	889a      	ldrh	r2, [r3, #4]
 8007ec6:	808a      	strh	r2, [r1, #4]
 8007ec8:	799b      	ldrb	r3, [r3, #6]
 8007eca:	718b      	strb	r3, [r1, #6]
 8007ecc:	e7f5      	b.n	8007eba <CDC_Control_FS+0x1a>
    	cdc_dtr = (req->wValue & 0x0001);
 8007ece:	788b      	ldrb	r3, [r1, #2]
 8007ed0:	4a03      	ldr	r2, [pc, #12]	; (8007ee0 <CDC_Control_FS+0x40>)
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	7013      	strb	r3, [r2, #0]
    break;
 8007ed8:	e7ef      	b.n	8007eba <CDC_Control_FS+0x1a>
 8007eda:	bf00      	nop
 8007edc:	200019b0 	.word	0x200019b0
 8007ee0:	200014ed 	.word	0x200014ed

08007ee4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(const char* Buf, uint16_t Len)
{
 8007ee4:	b538      	push	{r3, r4, r5, lr}

  /* USER CODE BEGIN 7 */
  if(hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8007ee6:	4d0e      	ldr	r5, [pc, #56]	; (8007f20 <CDC_Transmit_FS+0x3c>)
 8007ee8:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d114      	bne.n	8007f1a <CDC_Transmit_FS+0x36>
//  uint32_t additional_length = 0;

//  if(hcdc->TxState != 0)
//	  additional_length = hcdc->TxLength;

  size = size < APP_TX_DATA_SIZE ? size : APP_TX_DATA_SIZE;
 8007ef0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007ef4:	bf28      	it	cs
 8007ef6:	f44f 7100 	movcs.w	r1, #512	; 0x200
 8007efa:	460c      	mov	r4, r1

  memcpy(UserTxBufferFS, Buf, size);
 8007efc:	460a      	mov	r2, r1
 8007efe:	4601      	mov	r1, r0
 8007f00:	4808      	ldr	r0, [pc, #32]	; (8007f24 <CDC_Transmit_FS+0x40>)
 8007f02:	f004 f938 	bl	800c176 <memcpy>


  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, size);
 8007f06:	4622      	mov	r2, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	4906      	ldr	r1, [pc, #24]	; (8007f24 <CDC_Transmit_FS+0x40>)
 8007f0c:	f7ff ff56 	bl	8007dbc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f10:	4628      	mov	r0, r5
  /* USER CODE END 7 */
  return result;
}
 8007f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f16:	f7ff bf63 	b.w	8007de0 <USBD_CDC_TransmitPacket>
}
 8007f1a:	2002      	movs	r0, #2
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000914 	.word	0x20000914
 8007f24:	200012ed 	.word	0x200012ed

08007f28 <USBD_Composite_IsoINIncomplete>:
uint16_t descriptor_size;


static uint8_t USBD_Composite_IsoINIncomplete  (USBD_HandleTypeDef *pdev , uint8_t epnum){
	return USBD_OK;
}
 8007f28:	2000      	movs	r0, #0
 8007f2a:	4770      	bx	lr

08007f2c <USBD_Composite_Init>:
	}

	classes = num;
}

static uint8_t USBD_Composite_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	4606      	mov	r6, r0
 8007f32:	460f      	mov	r7, r1
  for(int cls = 0; cls < classes; cls++) {
 8007f34:	2400      	movs	r4, #0
 8007f36:	4d0a      	ldr	r5, [pc, #40]	; (8007f60 <USBD_Composite_Init+0x34>)
	  uint8_t ret = USBD_Classes[cls]->Init(pdev, cfgidx);
 8007f38:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8007f64 <USBD_Composite_Init+0x38>
  for(int cls = 0; cls < classes; cls++) {
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	dc02      	bgt.n	8007f48 <USBD_Composite_Init+0x1c>
          return USBD_FAIL;
      }

  }

  return USBD_OK;
 8007f42:	2000      	movs	r0, #0
}
 8007f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  uint8_t ret = USBD_Classes[cls]->Init(pdev, cfgidx);
 8007f48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4630      	mov	r0, r6
 8007f52:	4798      	blx	r3
      if (ret != USBD_OK) {
 8007f54:	b908      	cbnz	r0, 8007f5a <USBD_Composite_Init+0x2e>
  for(int cls = 0; cls < classes; cls++) {
 8007f56:	3401      	adds	r4, #1
 8007f58:	e7f0      	b.n	8007f3c <USBD_Composite_Init+0x10>
          return USBD_FAIL;
 8007f5a:	2002      	movs	r0, #2
 8007f5c:	e7f2      	b.n	8007f44 <USBD_Composite_Init+0x18>
 8007f5e:	bf00      	nop
 8007f60:	200014f8 	.word	0x200014f8
 8007f64:	200014f0 	.word	0x200014f0

08007f68 <USBD_Composite_DeInit>:

static uint8_t  USBD_Composite_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8007f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	460f      	mov	r7, r1
  for(int cls = 0; cls < classes; cls++) {
 8007f70:	2400      	movs	r4, #0
 8007f72:	4d0a      	ldr	r5, [pc, #40]	; (8007f9c <USBD_Composite_DeInit+0x34>)
	  uint8_t ret = USBD_Classes[cls]->DeInit(pdev, cfgidx);
 8007f74:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8007fa0 <USBD_Composite_DeInit+0x38>
  for(int cls = 0; cls < classes; cls++) {
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	42a3      	cmp	r3, r4
 8007f7c:	dc02      	bgt.n	8007f84 <USBD_Composite_DeInit+0x1c>
      if (ret != USBD_OK) {
          return USBD_FAIL;
      }
  }

  return USBD_OK;
 8007f7e:	2000      	movs	r0, #0
}
 8007f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  uint8_t ret = USBD_Classes[cls]->DeInit(pdev, cfgidx);
 8007f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f88:	4639      	mov	r1, r7
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	4798      	blx	r3
      if (ret != USBD_OK) {
 8007f90:	b908      	cbnz	r0, 8007f96 <USBD_Composite_DeInit+0x2e>
  for(int cls = 0; cls < classes; cls++) {
 8007f92:	3401      	adds	r4, #1
 8007f94:	e7f0      	b.n	8007f78 <USBD_Composite_DeInit+0x10>
          return USBD_FAIL;
 8007f96:	2002      	movs	r0, #2
 8007f98:	e7f2      	b.n	8007f80 <USBD_Composite_DeInit+0x18>
 8007f9a:	bf00      	nop
 8007f9c:	200014f8 	.word	0x200014f8
 8007fa0:	200014f0 	.word	0x200014f0

08007fa4 <USBD_Composite_DataIn>:
}

static uint8_t USBD_Composite_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum) {
  int class_index;

  class_index = in_endpoint_to_class[epnum];
 8007fa4:	4b03      	ldr	r3, [pc, #12]	; (8007fb4 <USBD_Composite_DataIn+0x10>)
  uint8_t ret = USBD_Classes[class_index]->DataIn(pdev, epnum);
 8007fa6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <USBD_Composite_DataIn+0x14>)
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	4718      	bx	r3
 8007fb4:	20001f58 	.word	0x20001f58
 8007fb8:	200014f0 	.word	0x200014f0

08007fbc <USBD_Composite_DataOut>:
}

static uint8_t USBD_Composite_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum) {
  int class_index;

  class_index = out_endpoint_to_class[epnum];
 8007fbc:	4b03      	ldr	r3, [pc, #12]	; (8007fcc <USBD_Composite_DataOut+0x10>)

  uint8_t ret = USBD_Classes[class_index]->DataOut(pdev, epnum);
 8007fbe:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8007fc2:	4b03      	ldr	r3, [pc, #12]	; (8007fd0 <USBD_Composite_DataOut+0x14>)
 8007fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	4718      	bx	r3
 8007fcc:	20001f18 	.word	0x20001f18
 8007fd0:	200014f0 	.word	0x200014f0

08007fd4 <USBD_Composite_EP0_RxReady>:
  return ret;

}

static uint8_t USBD_Composite_EP0_RxReady (USBD_HandleTypeDef *pdev) {
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	4606      	mov	r6, r0
  for(int cls = 0; cls < classes; cls++) {
 8007fd8:	2400      	movs	r4, #0
 8007fda:	4d09      	ldr	r5, [pc, #36]	; (8008000 <USBD_Composite_EP0_RxReady+0x2c>)
    if (USBD_Classes[cls]->EP0_RxReady != NULL) {
 8007fdc:	4f09      	ldr	r7, [pc, #36]	; (8008004 <USBD_Composite_EP0_RxReady+0x30>)
  for(int cls = 0; cls < classes; cls++) {
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	42a3      	cmp	r3, r4
 8007fe2:	dc01      	bgt.n	8007fe8 <USBD_Composite_EP0_RxReady+0x14>
        if (ret != USBD_OK) {
        	return USBD_FAIL;
      }
    }
  }
  return USBD_OK;
 8007fe4:	2000      	movs	r0, #0
}
 8007fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (USBD_Classes[cls]->EP0_RxReady != NULL) {
 8007fe8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	b90b      	cbnz	r3, 8007ff4 <USBD_Composite_EP0_RxReady+0x20>
  for(int cls = 0; cls < classes; cls++) {
 8007ff0:	3401      	adds	r4, #1
 8007ff2:	e7f4      	b.n	8007fde <USBD_Composite_EP0_RxReady+0xa>
    	uint8_t ret = USBD_Classes[cls]->EP0_RxReady(pdev);
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	4798      	blx	r3
        if (ret != USBD_OK) {
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d0f9      	beq.n	8007ff0 <USBD_Composite_EP0_RxReady+0x1c>
        	return USBD_FAIL;
 8007ffc:	2002      	movs	r0, #2
 8007ffe:	e7f2      	b.n	8007fe6 <USBD_Composite_EP0_RxReady+0x12>
 8008000:	200014f8 	.word	0x200014f8
 8008004:	200014f0 	.word	0x200014f0

08008008 <USBD_Composite_EP0_TxSent>:

static uint8_t USBD_Composite_EP0_TxSent (USBD_HandleTypeDef *pdev){
	return USBD_OK;
}
 8008008:	2000      	movs	r0, #0
 800800a:	4770      	bx	lr

0800800c <USBD_Composite_GetFSCfgDesc>:

static uint8_t  *USBD_Composite_GetFSCfgDesc (uint16_t *length) {
  *length = descriptor_size;
 800800c:	4b02      	ldr	r3, [pc, #8]	; (8008018 <USBD_Composite_GetFSCfgDesc+0xc>)
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	8003      	strh	r3, [r0, #0]
  return config_descriptor;
}
 8008012:	4b02      	ldr	r3, [pc, #8]	; (800801c <USBD_Composite_GetFSCfgDesc+0x10>)
 8008014:	6818      	ldr	r0, [r3, #0]
 8008016:	4770      	bx	lr
 8008018:	200019b8 	.word	0x200019b8
 800801c:	200019bc 	.word	0x200019bc

08008020 <USBD_Composite_GetDeviceQualifierDescriptor>:
  0x01,
  0x00,
};

uint8_t  *USBD_Composite_GetDeviceQualifierDescriptor (uint16_t *length) {
  *length = sizeof (USBD_Composite_DeviceQualifierDesc);
 8008020:	230a      	movs	r3, #10
 8008022:	8003      	strh	r3, [r0, #0]
  return USBD_Composite_DeviceQualifierDesc;
}
 8008024:	4800      	ldr	r0, [pc, #0]	; (8008028 <USBD_Composite_GetDeviceQualifierDescriptor+0x8>)
 8008026:	4770      	bx	lr
 8008028:	200000f8 	.word	0x200000f8

0800802c <USBD_Composite_SOF>:
static uint8_t  USBD_Composite_SOF (USBD_HandleTypeDef *pdev){
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	4606      	mov	r6, r0
	for(int cls = 0; cls < classes; cls++) {
 8008030:	2400      	movs	r4, #0
 8008032:	4d08      	ldr	r5, [pc, #32]	; (8008054 <USBD_Composite_SOF+0x28>)
		if(USBD_Classes[cls]->SOF){
 8008034:	4f08      	ldr	r7, [pc, #32]	; (8008058 <USBD_Composite_SOF+0x2c>)
	for(int cls = 0; cls < classes; cls++) {
 8008036:	682b      	ldr	r3, [r5, #0]
 8008038:	42a3      	cmp	r3, r4
 800803a:	dc03      	bgt.n	8008044 <USBD_Composite_SOF+0x18>
	USB_SOF();
 800803c:	f7ff fcb8 	bl	80079b0 <USB_SOF>
}
 8008040:	2000      	movs	r0, #0
 8008042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(USBD_Classes[cls]->SOF){
 8008044:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	b10b      	cbz	r3, 8008050 <USBD_Composite_SOF+0x24>
			USBD_Classes[cls]->SOF(pdev);
 800804c:	4630      	mov	r0, r6
 800804e:	4798      	blx	r3
	for(int cls = 0; cls < classes; cls++) {
 8008050:	3401      	adds	r4, #1
 8008052:	e7f0      	b.n	8008036 <USBD_Composite_SOF+0xa>
 8008054:	200014f8 	.word	0x200014f8
 8008058:	200014f0 	.word	0x200014f0

0800805c <USBD_Composite_Setup>:
static uint8_t USBD_Composite_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800805c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t idx = interface_to_class[req->wIndex & 0x7F];
 8008060:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8008062:	780c      	ldrb	r4, [r1, #0]
  uint8_t idx = interface_to_class[req->wIndex & 0x7F];
 8008064:	4a14      	ldr	r2, [pc, #80]	; (80080b8 <USBD_Composite_Setup+0x5c>)
 8008066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800806a:	f014 0460 	ands.w	r4, r4, #96	; 0x60
static uint8_t USBD_Composite_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 800806e:	4607      	mov	r7, r0
 8008070:	460d      	mov	r5, r1
  uint8_t idx = interface_to_class[req->wIndex & 0x7F];
 8008072:	5cd3      	ldrb	r3, [r2, r3]
  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8008074:	d008      	beq.n	8008088 <USBD_Composite_Setup+0x2c>
 8008076:	2c20      	cmp	r4, #32
 8008078:	d118      	bne.n	80080ac <USBD_Composite_Setup+0x50>
}
 800807a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return USBD_Classes[idx]->Setup(pdev, req);
 800807e:	4a0f      	ldr	r2, [pc, #60]	; (80080bc <USBD_Composite_Setup+0x60>)
 8008080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	4718      	bx	r3
      switch (req->bRequest) {
 8008088:	784a      	ldrb	r2, [r1, #1]
 800808a:	2a06      	cmp	r2, #6
 800808c:	d1f5      	bne.n	800807a <USBD_Composite_Setup+0x1e>
          for(int cls = 0; cls < classes; cls++) {
 800808e:	4e0c      	ldr	r6, [pc, #48]	; (80080c0 <USBD_Composite_Setup+0x64>)
        	  uint8_t ret = USBD_Classes[cls]->Setup(pdev, req);
 8008090:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80080bc <USBD_Composite_Setup+0x60>
 8008094:	e007      	b.n	80080a6 <USBD_Composite_Setup+0x4a>
 8008096:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800809a:	4629      	mov	r1, r5
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	4638      	mov	r0, r7
 80080a0:	4798      	blx	r3
            if (ret != USBD_OK) {
 80080a2:	b930      	cbnz	r0, 80080b2 <USBD_Composite_Setup+0x56>
          for(int cls = 0; cls < classes; cls++) {
 80080a4:	3401      	adds	r4, #1
 80080a6:	6833      	ldr	r3, [r6, #0]
 80080a8:	429c      	cmp	r4, r3
 80080aa:	dbf4      	blt.n	8008096 <USBD_Composite_Setup+0x3a>
  return USBD_OK;
 80080ac:	2000      	movs	r0, #0
}
 80080ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              return USBD_FAIL;
 80080b2:	2002      	movs	r0, #2
 80080b4:	e7fb      	b.n	80080ae <USBD_Composite_Setup+0x52>
 80080b6:	bf00      	nop
 80080b8:	20000102 	.word	0x20000102
 80080bc:	200014f0 	.word	0x200014f0
 80080c0:	200014f8 	.word	0x200014f8

080080c4 <USBD_Composite_IsoOUTIncomplete>:
 80080c4:	2000      	movs	r0, #0
 80080c6:	4770      	bx	lr

080080c8 <USBD_Composite_GetHSCfgDesc>:
 80080c8:	4b02      	ldr	r3, [pc, #8]	; (80080d4 <USBD_Composite_GetHSCfgDesc+0xc>)
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	8003      	strh	r3, [r0, #0]
 80080ce:	4b02      	ldr	r3, [pc, #8]	; (80080d8 <USBD_Composite_GetHSCfgDesc+0x10>)
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	4770      	bx	lr
 80080d4:	200019b8 	.word	0x200019b8
 80080d8:	200019bc 	.word	0x200019bc

080080dc <USBD_Composite_GetOtherSpeedCfgDesc>:
 80080dc:	4b02      	ldr	r3, [pc, #8]	; (80080e8 <USBD_Composite_GetOtherSpeedCfgDesc+0xc>)
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	8003      	strh	r3, [r0, #0]
 80080e2:	4b02      	ldr	r3, [pc, #8]	; (80080ec <USBD_Composite_GetOtherSpeedCfgDesc+0x10>)
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	4770      	bx	lr
 80080e8:	200019b8 	.word	0x200019b8
 80080ec:	200019bc 	.word	0x200019bc

080080f0 <USBD_Composite_EPIN_To_Class>:
	in_endpoint_to_class[ep & 0x7F] = classid;
 80080f0:	4b02      	ldr	r3, [pc, #8]	; (80080fc <USBD_Composite_EPIN_To_Class+0xc>)
 80080f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80080f6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 80080fa:	4770      	bx	lr
 80080fc:	20001f58 	.word	0x20001f58

08008100 <USBD_Composite_EPOUT_To_Class>:
	out_endpoint_to_class[ep & 0x7F] = classid;
 8008100:	4b02      	ldr	r3, [pc, #8]	; (800810c <USBD_Composite_EPOUT_To_Class+0xc>)
 8008102:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008106:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 800810a:	4770      	bx	lr
 800810c:	20001f18 	.word	0x20001f18

08008110 <USBD_InitCompositeDescriptor>:
void USBD_InitCompositeDescriptor(USB_ConfigDescType* base_desc){
 8008110:	2200      	movs	r2, #0
		config_descriptor_buf[i] = 0;
 8008112:	4611      	mov	r1, r2
 8008114:	4b08      	ldr	r3, [pc, #32]	; (8008138 <USBD_InitCompositeDescriptor+0x28>)
 8008116:	54d1      	strb	r1, [r2, r3]
 8008118:	3201      	adds	r2, #1
	for(uint16_t i = 0;i<CONFIG_DESC_BUF_SIZE;i++){
 800811a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800811e:	d1fa      	bne.n	8008116 <USBD_InitCompositeDescriptor+0x6>
	descriptor_size = sizeof(USB_ConfigDescType);
 8008120:	2109      	movs	r1, #9
	memcpy(config_descriptor_buf,base_desc,sizeof(USB_ConfigDescType));
 8008122:	6802      	ldr	r2, [r0, #0]
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	6842      	ldr	r2, [r0, #4]
 8008128:	605a      	str	r2, [r3, #4]
 800812a:	7a02      	ldrb	r2, [r0, #8]
 800812c:	721a      	strb	r2, [r3, #8]
	descriptor_size = sizeof(USB_ConfigDescType);
 800812e:	4a03      	ldr	r2, [pc, #12]	; (800813c <USBD_InitCompositeDescriptor+0x2c>)
 8008130:	8011      	strh	r1, [r2, #0]
	config_descriptor = (uint8_t*)&config_descriptor_buf;
 8008132:	4a03      	ldr	r2, [pc, #12]	; (8008140 <USBD_InitCompositeDescriptor+0x30>)
 8008134:	6013      	str	r3, [r2, #0]
}
 8008136:	4770      	bx	lr
 8008138:	20001e18 	.word	0x20001e18
 800813c:	200019b8 	.word	0x200019b8
 8008140:	200019bc 	.word	0x200019bc

08008144 <USBD_AddToCompositeDescriptor>:
void USBD_AddToCompositeDescriptor(uint8_t* dev, uint16_t len){
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	460f      	mov	r7, r1
	uint16_t len_base = *dev; // first element contains size of header
 8008148:	7805      	ldrb	r5, [r0, #0]
	memcpy(&config_descriptor_buf[descriptor_size],dev+len_base,len-len_base);
 800814a:	4e06      	ldr	r6, [pc, #24]	; (8008164 <USBD_AddToCompositeDescriptor+0x20>)
 800814c:	1b4a      	subs	r2, r1, r5
 800814e:	8834      	ldrh	r4, [r6, #0]
 8008150:	1941      	adds	r1, r0, r5
 8008152:	4805      	ldr	r0, [pc, #20]	; (8008168 <USBD_AddToCompositeDescriptor+0x24>)
 8008154:	4420      	add	r0, r4
	descriptor_size+=len-len_base;
 8008156:	443c      	add	r4, r7
 8008158:	1b64      	subs	r4, r4, r5
	memcpy(&config_descriptor_buf[descriptor_size],dev+len_base,len-len_base);
 800815a:	f004 f80c 	bl	800c176 <memcpy>
	descriptor_size+=len-len_base;
 800815e:	8034      	strh	r4, [r6, #0]
}
 8008160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008162:	bf00      	nop
 8008164:	200019b8 	.word	0x200019b8
 8008168:	20001e18 	.word	0x20001e18

0800816c <USBD_Composite_Set_Classes>:
void USBD_Composite_Set_Classes(USBD_ClassTypeDef* class[],uint8_t num,USB_ConfigDescType* base_desc) {
 800816c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t size = 0;
 8008170:	2400      	movs	r4, #0
void USBD_Composite_Set_Classes(USBD_ClassTypeDef* class[],uint8_t num,USB_ConfigDescType* base_desc) {
 8008172:	4606      	mov	r6, r0
 8008174:	460d      	mov	r5, r1
 8008176:	4690      	mov	r8, r2
		uint16_t ts = 0;
 8008178:	46a2      	mov	sl, r4
 800817a:	1f07      	subs	r7, r0, #4
 800817c:	eb07 0981 	add.w	r9, r7, r1, lsl #2
	for(uint8_t i = 0;i<num;i++){
 8008180:	454f      	cmp	r7, r9
 8008182:	d110      	bne.n	80081a6 <USBD_Composite_Set_Classes+0x3a>
	base_desc->wTotalLength = size+sizeof(USB_ConfigDescType);
 8008184:	3409      	adds	r4, #9
 8008186:	f8a8 4002 	strh.w	r4, [r8, #2]
	for(uint8_t i = 0;i<num;i++){
 800818a:	2400      	movs	r4, #0
	USBD_InitCompositeDescriptor(base_desc);
 800818c:	4640      	mov	r0, r8
 800818e:	f7ff ffbf 	bl	8008110 <USBD_InitCompositeDescriptor>
		uint16_t size = 0;
 8008192:	4627      	mov	r7, r4
		USBD_Classes[i] = class[i];
 8008194:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80081e8 <USBD_Composite_Set_Classes+0x7c>
	for(uint8_t i = 0;i<num;i++){
 8008198:	42ac      	cmp	r4, r5
 800819a:	d113      	bne.n	80081c4 <USBD_Composite_Set_Classes+0x58>
	classes = num;
 800819c:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <USBD_Composite_Set_Classes+0x78>)
 800819e:	601c      	str	r4, [r3, #0]
}
 80081a0:	b002      	add	sp, #8
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t* d = class[i]->GetFSConfigDescriptor(&ts);
 80081a6:	f857 3f04 	ldr.w	r3, [r7, #4]!
		uint16_t ts = 0;
 80081aa:	f8ad a006 	strh.w	sl, [sp, #6]
		uint8_t* d = class[i]->GetFSConfigDescriptor(&ts);
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	f10d 0006 	add.w	r0, sp, #6
 80081b4:	4798      	blx	r3
		size += (ts - *d);
 80081b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80081ba:	7802      	ldrb	r2, [r0, #0]
 80081bc:	1a9b      	subs	r3, r3, r2
 80081be:	441c      	add	r4, r3
 80081c0:	b2a4      	uxth	r4, r4
 80081c2:	e7dd      	b.n	8008180 <USBD_Composite_Set_Classes+0x14>
		USBD_Classes[i] = class[i];
 80081c4:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
		uint16_t size = 0;
 80081c8:	f8ad 7006 	strh.w	r7, [sp, #6]
		USBD_Classes[i] = class[i];
 80081cc:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		uint8_t* desc = USBD_Classes[i]->GetFSConfigDescriptor(&size);
 80081d0:	f10d 0006 	add.w	r0, sp, #6
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	4798      	blx	r3
		USBD_AddToCompositeDescriptor(desc, size);
 80081d8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80081dc:	f7ff ffb2 	bl	8008144 <USBD_AddToCompositeDescriptor>
 80081e0:	3401      	adds	r4, #1
 80081e2:	e7d9      	b.n	8008198 <USBD_Composite_Set_Classes+0x2c>
 80081e4:	200014f8 	.word	0x200014f8
 80081e8:	200014f0 	.word	0x200014f0

080081ec <USBD_Composite_InterfaceToClass>:


void USBD_Composite_InterfaceToClass(uint8_t ifid, uint8_t clsid){
	interface_to_class[ifid] = clsid;
 80081ec:	4b01      	ldr	r3, [pc, #4]	; (80081f4 <USBD_Composite_InterfaceToClass+0x8>)
 80081ee:	5419      	strb	r1, [r3, r0]
}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000102 	.word	0x20000102

080081f8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081f8:	f500 710c 	add.w	r1, r0, #560	; 0x230
 80081fc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8008200:	f000 b946 	b.w	8008490 <USBD_LL_SetupStage>

08008204 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008204:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8008208:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800820c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8008210:	f000 b96b 	b.w	80084ea <USBD_LL_DataOutStage>

08008214 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008214:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8008218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800821a:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800821e:	f000 b99e 	b.w	800855e <USBD_LL_DataInStage>

08008222 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008222:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8008226:	f000 ba2f 	b.w	8008688 <USBD_LL_SOF>

0800822a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800822a:	6883      	ldr	r3, [r0, #8]
{ 
 800822c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800822e:	2b02      	cmp	r3, #2
{ 
 8008230:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008232:	d001      	beq.n	8008238 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8008234:	f7f9 f9f2 	bl	800161c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008238:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 800823c:	2101      	movs	r1, #1
 800823e:	f000 fa0d 	bl	800865c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008242:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8008246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800824a:	f000 b9e3 	b.w	8008614 <USBD_LL_Reset>
	...

08008250 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008250:	b510      	push	{r4, lr}
 8008252:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008254:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8008258:	f000 fa03 	bl	8008662 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800825c:	69a3      	ldr	r3, [r4, #24]
 800825e:	b123      	cbz	r3, 800826a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008260:	4a02      	ldr	r2, [pc, #8]	; (800826c <HAL_PCD_SuspendCallback+0x1c>)
 8008262:	6913      	ldr	r3, [r2, #16]
 8008264:	f043 0306 	orr.w	r3, r3, #6
 8008268:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800826a:	bd10      	pop	{r4, pc}
 800826c:	e000ed00 	.word	0xe000ed00

08008270 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8008274:	f000 b9fe 	b.w	8008674 <USBD_LL_Resume>

08008278 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008278:	2308      	movs	r3, #8
{
 800827a:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800827c:	4a25      	ldr	r2, [pc, #148]	; (8008314 <USBD_LL_Init+0x9c>)
{
 800827e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8008280:	4825      	ldr	r0, [pc, #148]	; (8008318 <USBD_LL_Init+0xa0>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008282:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008286:	2302      	movs	r3, #2
 8008288:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800828a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800828c:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8008290:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008294:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008298:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800829a:	f7fa fe23 	bl	8002ee4 <HAL_PCD_Init>
 800829e:	b108      	cbz	r0, 80082a4 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 80082a0:	f7f9 f9bc 	bl	800161c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);*/


  //CDC ENDPOINTS
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x38);
 80082a4:	2200      	movs	r2, #0
 80082a6:	2338      	movs	r3, #56	; 0x38
 80082a8:	4611      	mov	r1, r2
 80082aa:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80082ae:	f7fb f9c8 	bl	8003642 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x88);
 80082b2:	2388      	movs	r3, #136	; 0x88
 80082b4:	2200      	movs	r2, #0
 80082b6:	2180      	movs	r1, #128	; 0x80
 80082b8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80082bc:	f7fb f9c1 	bl	8003642 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xF0);
 80082c0:	23f0      	movs	r3, #240	; 0xf0
 80082c2:	2200      	movs	r2, #0
 80082c4:	2181      	movs	r1, #129	; 0x81
 80082c6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80082ca:	f7fb f9ba 	bl	8003642 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x140);
 80082ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80082d2:	2200      	movs	r2, #0
 80082d4:	2101      	movs	r1, #1
 80082d6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80082da:	f7fb f9b2 	bl	8003642 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x130);
 80082de:	f44f 7398 	mov.w	r3, #304	; 0x130
 80082e2:	2200      	movs	r2, #0
 80082e4:	2182      	movs	r1, #130	; 0x82
 80082e6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80082ea:	f7fb f9aa 	bl	8003642 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x83 , PCD_SNG_BUF, 0x180);
 80082ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80082f2:	2200      	movs	r2, #0
 80082f4:	2183      	movs	r1, #131	; 0x83
 80082f6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80082fa:	f7fb f9a2 	bl	8003642 <HAL_PCDEx_PMAConfig>
   HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x02 , PCD_SNG_BUF, 0x1D0);
 80082fe:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8008302:	2200      	movs	r2, #0
 8008304:	2102      	movs	r1, #2
 8008306:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800830a:	f7fb f99a 	bl	8003642 <HAL_PCDEx_PMAConfig>

  return USBD_OK;
}
 800830e:	2000      	movs	r0, #0
 8008310:	bd10      	pop	{r4, pc}
 8008312:	bf00      	nop
 8008314:	40005c00 	.word	0x40005c00
 8008318:	20001718 	.word	0x20001718

0800831c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800831c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800831e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008322:	f7fa fe54 	bl	8002fce <HAL_PCD_Start>
 8008326:	2803      	cmp	r0, #3
 8008328:	bf96      	itet	ls
 800832a:	4b02      	ldrls	r3, [pc, #8]	; (8008334 <USBD_LL_Start+0x18>)
 800832c:	2002      	movhi	r0, #2
 800832e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8008330:	bd08      	pop	{r3, pc}
 8008332:	bf00      	nop
 8008334:	0800d9ec 	.word	0x0800d9ec

08008338 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008338:	b510      	push	{r4, lr}
 800833a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800833c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008340:	4613      	mov	r3, r2
 8008342:	4622      	mov	r2, r4
 8008344:	f7fa fe6e 	bl	8003024 <HAL_PCD_EP_Open>
 8008348:	2803      	cmp	r0, #3
 800834a:	bf96      	itet	ls
 800834c:	4b01      	ldrls	r3, [pc, #4]	; (8008354 <USBD_LL_OpenEP+0x1c>)
 800834e:	2002      	movhi	r0, #2
 8008350:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8008352:	bd10      	pop	{r4, pc}
 8008354:	0800d9ec 	.word	0x0800d9ec

08008358 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008358:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800835a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800835e:	f7fa fe94 	bl	800308a <HAL_PCD_EP_Close>
 8008362:	2803      	cmp	r0, #3
 8008364:	bf96      	itet	ls
 8008366:	4b02      	ldrls	r3, [pc, #8]	; (8008370 <USBD_LL_CloseEP+0x18>)
 8008368:	2002      	movhi	r0, #2
 800836a:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 800836c:	bd08      	pop	{r3, pc}
 800836e:	bf00      	nop
 8008370:	0800d9ec 	.word	0x0800d9ec

08008374 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008374:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008376:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800837a:	f7fb f8fb 	bl	8003574 <HAL_PCD_EP_SetStall>
 800837e:	2803      	cmp	r0, #3
 8008380:	bf96      	itet	ls
 8008382:	4b02      	ldrls	r3, [pc, #8]	; (800838c <USBD_LL_StallEP+0x18>)
 8008384:	2002      	movhi	r0, #2
 8008386:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8008388:	bd08      	pop	{r3, pc}
 800838a:	bf00      	nop
 800838c:	0800d9ec 	.word	0x0800d9ec

08008390 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008390:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008392:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008396:	f7fb f921 	bl	80035dc <HAL_PCD_EP_ClrStall>
 800839a:	2803      	cmp	r0, #3
 800839c:	bf96      	itet	ls
 800839e:	4b02      	ldrls	r3, [pc, #8]	; (80083a8 <USBD_LL_ClearStallEP+0x18>)
 80083a0:	2002      	movhi	r0, #2
 80083a2:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 80083a4:	bd08      	pop	{r3, pc}
 80083a6:	bf00      	nop
 80083a8:	0800d9ec 	.word	0x0800d9ec

080083ac <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80083ac:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083ae:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80083b2:	bf45      	ittet	mi
 80083b4:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 80083b8:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80083bc:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80083c0:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80083c4:	bf58      	it	pl
 80083c6:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 80083ca:	4770      	bx	lr

080083cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80083d2:	f7fa fe13 	bl	8002ffc <HAL_PCD_SetAddress>
 80083d6:	2803      	cmp	r0, #3
 80083d8:	bf96      	itet	ls
 80083da:	4b02      	ldrls	r3, [pc, #8]	; (80083e4 <USBD_LL_SetUSBAddress+0x18>)
 80083dc:	2002      	movhi	r0, #2
 80083de:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80083e0:	bd08      	pop	{r3, pc}
 80083e2:	bf00      	nop
 80083e4:	0800d9ec 	.word	0x0800d9ec

080083e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80083ee:	f7fa fe94 	bl	800311a <HAL_PCD_EP_Transmit>
 80083f2:	2803      	cmp	r0, #3
 80083f4:	bf96      	itet	ls
 80083f6:	4b02      	ldrls	r3, [pc, #8]	; (8008400 <USBD_LL_Transmit+0x18>)
 80083f8:	2002      	movhi	r0, #2
 80083fa:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 80083fc:	bd08      	pop	{r3, pc}
 80083fe:	bf00      	nop
 8008400:	0800d9ec 	.word	0x0800d9ec

08008404 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008404:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008406:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800840a:	f7fa fe67 	bl	80030dc <HAL_PCD_EP_Receive>
 800840e:	2803      	cmp	r0, #3
 8008410:	bf96      	itet	ls
 8008412:	4b02      	ldrls	r3, [pc, #8]	; (800841c <USBD_LL_PrepareReceive+0x18>)
 8008414:	2002      	movhi	r0, #2
 8008416:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8008418:	bd08      	pop	{r3, pc}
 800841a:	bf00      	nop
 800841c:	0800d9ec 	.word	0x0800d9ec

08008420 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008420:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8008424:	f7fa be72 	b.w	800310c <HAL_PCD_EP_GetRxCount>

08008428 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008428:	4770      	bx	lr

0800842a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800842a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800842c:	b180      	cbz	r0, 8008450 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800842e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008432:	b113      	cbz	r3, 800843a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800843a:	b109      	cbz	r1, 8008440 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800843c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008440:	2301      	movs	r3, #1
  pdev->id = id;
 8008442:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008444:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008448:	f7ff ff16 	bl	8008278 <USBD_LL_Init>

  return USBD_OK;
 800844c:	2000      	movs	r0, #0
}
 800844e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008450:	2002      	movs	r0, #2
 8008452:	e7fc      	b.n	800844e <USBD_Init+0x24>

08008454 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008454:	b119      	cbz	r1, 800845e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008456:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800845a:	2000      	movs	r0, #0
 800845c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800845e:	2002      	movs	r0, #2
  }

  return status;
}
 8008460:	4770      	bx	lr

08008462 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008462:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008464:	f7ff ff5a 	bl	800831c <USBD_LL_Start>

  return USBD_OK;
}
 8008468:	2000      	movs	r0, #0
 800846a:	bd08      	pop	{r3, pc}

0800846c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800846c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800846e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008472:	b90b      	cbnz	r3, 8008478 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008474:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008476:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4798      	blx	r3
 800847c:	2800      	cmp	r0, #0
 800847e:	d0fa      	beq.n	8008476 <USBD_SetClassConfig+0xa>
 8008480:	e7f8      	b.n	8008474 <USBD_SetClassConfig+0x8>

08008482 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008482:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008484:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	4798      	blx	r3

  return USBD_OK;
}
 800848c:	2000      	movs	r0, #0
 800848e:	bd08      	pop	{r3, pc}

08008490 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008490:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008492:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8008496:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008498:	4628      	mov	r0, r5
 800849a:	f000 fac9 	bl	8008a30 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800849e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80084a0:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80084a4:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80084a8:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80084ac:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1FU)
 80084b0:	f001 031f 	and.w	r3, r1, #31
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d00e      	beq.n	80084d6 <USBD_LL_SetupStage+0x46>
 80084b8:	d307      	bcc.n	80084ca <USBD_LL_SetupStage+0x3a>
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d010      	beq.n	80084e0 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084be:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80084c2:	4620      	mov	r0, r4
 80084c4:	f7ff ff56 	bl	8008374 <USBD_LL_StallEP>
      break;
 80084c8:	e003      	b.n	80084d2 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80084ca:	4629      	mov	r1, r5
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 f8f3 	bl	80086b8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80084d2:	2000      	movs	r0, #0
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80084d6:	4629      	mov	r1, r5
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fa11 	bl	8008900 <USBD_StdItfReq>
      break;
 80084de:	e7f8      	b.n	80084d2 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80084e0:	4629      	mov	r1, r5
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 fa31 	bl	800894a <USBD_StdEPReq>
      break;
 80084e8:	e7f3      	b.n	80084d2 <USBD_LL_SetupStage+0x42>

080084ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084ea:	b570      	push	{r4, r5, r6, lr}
 80084ec:	4605      	mov	r5, r0
 80084ee:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084f0:	bb49      	cbnz	r1, 8008546 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084f2:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d11e      	bne.n	8008538 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80084fa:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80084fe:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8008502:	4293      	cmp	r3, r2
 8008504:	d90b      	bls.n	800851e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8008506:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8008508:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800850a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx(pdev, pdata,
 800850e:	bf8c      	ite	hi
 8008510:	b29a      	uxthhi	r2, r3
 8008512:	b292      	uxthls	r2, r2
 8008514:	4631      	mov	r1, r6
 8008516:	f000 fc89 	bl	8008e2c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800851a:	2000      	movs	r0, #0
}
 800851c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800851e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	b123      	cbz	r3, 8008530 <USBD_LL_DataOutStage+0x46>
 8008526:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800852a:	2a03      	cmp	r2, #3
 800852c:	d100      	bne.n	8008530 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800852e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008530:	4628      	mov	r0, r5
 8008532:	f000 fc83 	bl	8008e3c <USBD_CtlSendStatus>
 8008536:	e7f0      	b.n	800851a <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008538:	2b05      	cmp	r3, #5
 800853a:	d1ee      	bne.n	800851a <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 800853c:	f8c5 11f4 	str.w	r1, [r5, #500]	; 0x1f4
        USBD_LL_StallEP(pdev, 0U);
 8008540:	f7ff ff18 	bl	8008374 <USBD_LL_StallEP>
 8008544:	e7e9      	b.n	800851a <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8008546:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	b12b      	cbz	r3, 800855a <USBD_LL_DataOutStage+0x70>
 800854e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008552:	2a03      	cmp	r2, #3
 8008554:	d101      	bne.n	800855a <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8008556:	4798      	blx	r3
 8008558:	e7df      	b.n	800851a <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800855a:	2002      	movs	r0, #2
 800855c:	e7de      	b.n	800851c <USBD_LL_DataOutStage+0x32>

0800855e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800855e:	b570      	push	{r4, r5, r6, lr}
 8008560:	4613      	mov	r3, r2
 8008562:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008564:	460e      	mov	r6, r1
 8008566:	2900      	cmp	r1, #0
 8008568:	d147      	bne.n	80085fa <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800856a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800856e:	2a02      	cmp	r2, #2
 8008570:	d13c      	bne.n	80085ec <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008572:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 8008576:	4295      	cmp	r5, r2
 8008578:	d913      	bls.n	80085a2 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800857a:	1aaa      	subs	r2, r5, r2
 800857c:	61c2      	str	r2, [r0, #28]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800857e:	4619      	mov	r1, r3
 8008580:	b292      	uxth	r2, r2
 8008582:	f000 fc3c 	bl	8008dfe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008586:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008588:	461a      	mov	r2, r3
 800858a:	4619      	mov	r1, r3
 800858c:	4620      	mov	r0, r4
 800858e:	f7ff ff39 	bl	8008404 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008592:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008596:	2000      	movs	r0, #0
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800859c:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80085a2:	6983      	ldr	r3, [r0, #24]
 80085a4:	fbb3 f5f2 	udiv	r5, r3, r2
 80085a8:	fb02 3515 	mls	r5, r2, r5, r3
 80085ac:	b965      	cbnz	r5, 80085c8 <USBD_LL_DataInStage+0x6a>
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d80a      	bhi.n	80085c8 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80085b2:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d206      	bcs.n	80085c8 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085ba:	462a      	mov	r2, r5
 80085bc:	f000 fc1f 	bl	8008dfe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085c0:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085c4:	462b      	mov	r3, r5
 80085c6:	e7df      	b.n	8008588 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085c8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	b12b      	cbz	r3, 80085dc <USBD_LL_DataInStage+0x7e>
 80085d0:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80085d4:	2a03      	cmp	r2, #3
 80085d6:	d101      	bne.n	80085dc <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80085d8:	4620      	mov	r0, r4
 80085da:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80085dc:	2180      	movs	r1, #128	; 0x80
 80085de:	4620      	mov	r0, r4
 80085e0:	f7ff fec8 	bl	8008374 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fc34 	bl	8008e52 <USBD_CtlReceiveStatus>
 80085ea:	e7d2      	b.n	8008592 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085ec:	f032 0304 	bics.w	r3, r2, #4
 80085f0:	d1cf      	bne.n	8008592 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80085f2:	2180      	movs	r1, #128	; 0x80
 80085f4:	f7ff febe 	bl	8008374 <USBD_LL_StallEP>
 80085f8:	e7cb      	b.n	8008592 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80085fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	b133      	cbz	r3, 8008610 <USBD_LL_DataInStage+0xb2>
 8008602:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008606:	2a03      	cmp	r2, #3
 8008608:	d102      	bne.n	8008610 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800860a:	4798      	blx	r3
  return USBD_OK;
 800860c:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800860e:	e7c7      	b.n	80085a0 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8008610:	2002      	movs	r0, #2
 8008612:	e7c5      	b.n	80085a0 <USBD_LL_DataInStage+0x42>

08008614 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008614:	2200      	movs	r2, #0
{
 8008616:	b538      	push	{r3, r4, r5, lr}
 8008618:	4604      	mov	r4, r0

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800861a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800861c:	4611      	mov	r1, r2
 800861e:	2340      	movs	r3, #64	; 0x40
 8008620:	f7ff fe8a 	bl	8008338 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008624:	462b      	mov	r3, r5
 8008626:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008628:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800862c:	2200      	movs	r2, #0
 800862e:	4620      	mov	r0, r4
 8008630:	f7ff fe82 	bl	8008338 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008634:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 8008636:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008638:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800863c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008640:	6225      	str	r5, [r4, #32]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008642:	f8c4 11f4 	str.w	r1, [r4, #500]	; 0x1f4
  pdev->dev_config = 0U;
 8008646:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008648:	f8c4 1204 	str.w	r1, [r4, #516]	; 0x204
  if (pdev->pClassData)
 800864c:	b123      	cbz	r3, 8008658 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800864e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008652:	4620      	mov	r0, r4
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008658:	2000      	movs	r0, #0
 800865a:	bd38      	pop	{r3, r4, r5, pc}

0800865c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800865c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800865e:	2000      	movs	r0, #0
 8008660:	4770      	bx	lr

08008662 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008662:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008666:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800866a:	2304      	movs	r3, #4
 800866c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc

  return USBD_OK;
}
 8008670:	2000      	movs	r0, #0
 8008672:	4770      	bx	lr

08008674 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008674:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008678:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800867a:	bf04      	itt	eq
 800867c:	f890 31fd 	ldrbeq.w	r3, [r0, #509]	; 0x1fd
 8008680:	f880 31fc 	strbeq.w	r3, [r0, #508]	; 0x1fc
  }

  return USBD_OK;
}
 8008684:	2000      	movs	r0, #0
 8008686:	4770      	bx	lr

08008688 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008688:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800868e:	2a03      	cmp	r2, #3
 8008690:	d104      	bne.n	800869c <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8008692:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	b103      	cbz	r3, 800869c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800869a:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800869c:	2000      	movs	r0, #0
 800869e:	bd08      	pop	{r3, pc}

080086a0 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80086a0:	b510      	push	{r4, lr}
 80086a2:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80086a4:	2180      	movs	r1, #128	; 0x80
 80086a6:	f7ff fe65 	bl	8008374 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086aa:	4620      	mov	r0, r4
}
 80086ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80086b0:	2100      	movs	r1, #0
 80086b2:	f7ff be5f 	b.w	8008374 <USBD_LL_StallEP>
	...

080086b8 <USBD_StdDevReq>:
{
 80086b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ba:	780b      	ldrb	r3, [r1, #0]
{
 80086bc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086c2:	2b20      	cmp	r3, #32
{
 80086c4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086c6:	d012      	beq.n	80086ee <USBD_StdDevReq+0x36>
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d010      	beq.n	80086ee <USBD_StdDevReq+0x36>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d15b      	bne.n	8008788 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 80086d0:	784b      	ldrb	r3, [r1, #1]
 80086d2:	2b09      	cmp	r3, #9
 80086d4:	d858      	bhi.n	8008788 <USBD_StdDevReq+0xd0>
 80086d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80086da:	00e9      	.short	0x00e9
 80086dc:	00570105 	.word	0x00570105
 80086e0:	005700fe 	.word	0x005700fe
 80086e4:	00130084 	.word	0x00130084
 80086e8:	00d20057 	.word	0x00d20057
 80086ec:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80086ee:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80086f2:	4629      	mov	r1, r5
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	4620      	mov	r0, r4
 80086f8:	4798      	blx	r3
}
 80086fa:	2000      	movs	r0, #0
 80086fc:	b003      	add	sp, #12
 80086fe:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008706:	884b      	ldrh	r3, [r1, #2]
 8008708:	0a1a      	lsrs	r2, r3, #8
 800870a:	3a01      	subs	r2, #1
 800870c:	2a06      	cmp	r2, #6
 800870e:	d83b      	bhi.n	8008788 <USBD_StdDevReq+0xd0>
 8008710:	e8df f002 	tbb	[pc, r2]
 8008714:	3a2d2004 	.word	0x3a2d2004
 8008718:	523a      	.short	0x523a
 800871a:	5c          	.byte	0x5c
 800871b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800871c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008720:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008722:	f10d 0106 	add.w	r1, sp, #6
 8008726:	7c20      	ldrb	r0, [r4, #16]
 8008728:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800872a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800872e:	b152      	cbz	r2, 8008746 <USBD_StdDevReq+0x8e>
 8008730:	88eb      	ldrh	r3, [r5, #6]
 8008732:	b143      	cbz	r3, 8008746 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8008734:	429a      	cmp	r2, r3
 8008736:	bf28      	it	cs
 8008738:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800873a:	4601      	mov	r1, r0
 800873c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800873e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008742:	f000 fb4f 	bl	8008de4 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8008746:	88eb      	ldrh	r3, [r5, #6]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1d6      	bne.n	80086fa <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 800874c:	4620      	mov	r0, r4
 800874e:	f000 fb75 	bl	8008e3c <USBD_CtlSendStatus>
 8008752:	e7d2      	b.n	80086fa <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008754:	7c02      	ldrb	r2, [r0, #16]
 8008756:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800875a:	b932      	cbnz	r2, 800876a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800875e:	f10d 0006 	add.w	r0, sp, #6
 8008762:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008764:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008766:	7043      	strb	r3, [r0, #1]
 8008768:	e7df      	b.n	800872a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876c:	e7f7      	b.n	800875e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b05      	cmp	r3, #5
 8008772:	d809      	bhi.n	8008788 <USBD_StdDevReq+0xd0>
 8008774:	e8df f003 	tbb	[pc, r3]
 8008778:	14100c03 	.word	0x14100c03
 800877c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800877e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008782:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1cc      	bne.n	8008722 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8008788:	4620      	mov	r0, r4
 800878a:	f7ff ff89 	bl	80086a0 <USBD_CtlError.constprop.1>
 800878e:	e7b4      	b.n	80086fa <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008790:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	e7f5      	b.n	8008784 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008798:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	e7f1      	b.n	8008784 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087a0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	e7ed      	b.n	8008784 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087a8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	e7e9      	b.n	8008784 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087b0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	e7e5      	b.n	8008784 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087b8:	7c03      	ldrb	r3, [r0, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e4      	bne.n	8008788 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80087be:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80087c2:	f10d 0006 	add.w	r0, sp, #6
 80087c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c8:	4798      	blx	r3
 80087ca:	e7ae      	b.n	800872a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087cc:	7c03      	ldrb	r3, [r0, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1da      	bne.n	8008788 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80087d2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80087d6:	f10d 0006 	add.w	r0, sp, #6
 80087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087dc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087de:	2307      	movs	r3, #7
 80087e0:	e7c1      	b.n	8008766 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087e2:	888b      	ldrh	r3, [r1, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1cf      	bne.n	8008788 <USBD_StdDevReq+0xd0>
 80087e8:	88cb      	ldrh	r3, [r1, #6]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1cc      	bne.n	8008788 <USBD_StdDevReq+0xd0>
 80087ee:	884d      	ldrh	r5, [r1, #2]
 80087f0:	2d7f      	cmp	r5, #127	; 0x7f
 80087f2:	d8c9      	bhi.n	8008788 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d0c5      	beq.n	8008788 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087fc:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80087fe:	f880 11fe 	strb.w	r1, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008802:	f7ff fde3 	bl	80083cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008806:	4620      	mov	r0, r4
 8008808:	f000 fb18 	bl	8008e3c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800880c:	b11d      	cbz	r5, 8008816 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800880e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008810:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8008814:	e771      	b.n	80086fa <USBD_StdDevReq+0x42>
 8008816:	2301      	movs	r3, #1
 8008818:	e7fa      	b.n	8008810 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 800881a:	7889      	ldrb	r1, [r1, #2]
 800881c:	4d37      	ldr	r5, [pc, #220]	; (80088fc <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800881e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008820:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008822:	d8b1      	bhi.n	8008788 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8008824:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008828:	2b02      	cmp	r3, #2
 800882a:	d008      	beq.n	800883e <USBD_StdDevReq+0x186>
 800882c:	2b03      	cmp	r3, #3
 800882e:	d014      	beq.n	800885a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8008830:	f7ff ff36 	bl	80086a0 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008834:	7829      	ldrb	r1, [r5, #0]
 8008836:	4620      	mov	r0, r4
 8008838:	f7ff fe23 	bl	8008482 <USBD_ClrClassConfig>
 800883c:	e75d      	b.n	80086fa <USBD_StdDevReq+0x42>
        if (cfgidx)
 800883e:	2900      	cmp	r1, #0
 8008840:	d084      	beq.n	800874c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8008842:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008844:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8008846:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008848:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800884c:	4620      	mov	r0, r4
 800884e:	f7ff fe0d 	bl	800846c <USBD_SetClassConfig>
 8008852:	2802      	cmp	r0, #2
 8008854:	f47f af7a 	bne.w	800874c <USBD_StdDevReq+0x94>
 8008858:	e796      	b.n	8008788 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800885a:	b931      	cbnz	r1, 800886a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800885c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800885e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008860:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
          USBD_ClrClassConfig(pdev, cfgidx);
 8008864:	f7ff fe0d 	bl	8008482 <USBD_ClrClassConfig>
 8008868:	e770      	b.n	800874c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800886a:	6841      	ldr	r1, [r0, #4]
 800886c:	2901      	cmp	r1, #1
 800886e:	f43f af6d 	beq.w	800874c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008872:	b2c9      	uxtb	r1, r1
 8008874:	f7ff fe05 	bl	8008482 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008878:	7829      	ldrb	r1, [r5, #0]
 800887a:	6061      	str	r1, [r4, #4]
 800887c:	e7e6      	b.n	800884c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800887e:	88ca      	ldrh	r2, [r1, #6]
 8008880:	2a01      	cmp	r2, #1
 8008882:	d181      	bne.n	8008788 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8008884:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008888:	2b00      	cmp	r3, #0
 800888a:	f43f af7d 	beq.w	8008788 <USBD_StdDevReq+0xd0>
 800888e:	2b02      	cmp	r3, #2
 8008890:	d904      	bls.n	800889c <USBD_StdDevReq+0x1e4>
 8008892:	2b03      	cmp	r3, #3
 8008894:	f47f af78 	bne.w	8008788 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008898:	1d01      	adds	r1, r0, #4
 800889a:	e003      	b.n	80088a4 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 800889c:	4601      	mov	r1, r0
 800889e:	2300      	movs	r3, #0
 80088a0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fa9d 	bl	8008de4 <USBD_CtlSendData>
 80088aa:	e726      	b.n	80086fa <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 80088ac:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80088b0:	3b01      	subs	r3, #1
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	f63f af68 	bhi.w	8008788 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 80088b8:	88cb      	ldrh	r3, [r1, #6]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	f47f af64 	bne.w	8008788 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088c0:	2301      	movs	r3, #1
 80088c2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80088c4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80088c8:	b10b      	cbz	r3, 80088ce <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088ca:	2303      	movs	r3, #3
 80088cc:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80088ce:	2202      	movs	r2, #2
 80088d0:	f104 010c 	add.w	r1, r4, #12
 80088d4:	e7e6      	b.n	80088a4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088d6:	884b      	ldrh	r3, [r1, #2]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	f47f af0e 	bne.w	80086fa <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80088de:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 80088e2:	e733      	b.n	800874c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80088e4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80088e8:	3b01      	subs	r3, #1
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	f63f af4c 	bhi.w	8008788 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088f0:	884b      	ldrh	r3, [r1, #2]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	f47f af01 	bne.w	80086fa <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	e7f0      	b.n	80088de <USBD_StdDevReq+0x226>
 80088fc:	200014fc 	.word	0x200014fc

08008900 <USBD_StdItfReq>:
{
 8008900:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008902:	780b      	ldrb	r3, [r1, #0]
{
 8008904:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800890a:	2b20      	cmp	r3, #32
{
 800890c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890e:	d002      	beq.n	8008916 <USBD_StdItfReq+0x16>
 8008910:	2b40      	cmp	r3, #64	; 0x40
 8008912:	d000      	beq.n	8008916 <USBD_StdItfReq+0x16>
 8008914:	b9ab      	cbnz	r3, 8008942 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8008916:	f894 31fc 	ldrb.w	r3, [r4, #508]	; 0x1fc
 800891a:	3b01      	subs	r3, #1
 800891c:	2b02      	cmp	r3, #2
 800891e:	d810      	bhi.n	8008942 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008920:	792b      	ldrb	r3, [r5, #4]
 8008922:	2b03      	cmp	r3, #3
 8008924:	d80d      	bhi.n	8008942 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008926:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800892a:	4629      	mov	r1, r5
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	4620      	mov	r0, r4
 8008930:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008932:	88eb      	ldrh	r3, [r5, #6]
 8008934:	b91b      	cbnz	r3, 800893e <USBD_StdItfReq+0x3e>
 8008936:	b910      	cbnz	r0, 800893e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8008938:	4620      	mov	r0, r4
 800893a:	f000 fa7f 	bl	8008e3c <USBD_CtlSendStatus>
}
 800893e:	2000      	movs	r0, #0
 8008940:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8008942:	4620      	mov	r0, r4
 8008944:	f7ff feac 	bl	80086a0 <USBD_CtlError.constprop.1>
          break;
 8008948:	e7f9      	b.n	800893e <USBD_StdItfReq+0x3e>

0800894a <USBD_StdEPReq>:
{
 800894a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800894c:	780a      	ldrb	r2, [r1, #0]
{
 800894e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008950:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008954:	2a20      	cmp	r2, #32
{
 8008956:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008958:	d014      	beq.n	8008984 <USBD_StdEPReq+0x3a>
 800895a:	2a40      	cmp	r2, #64	; 0x40
 800895c:	d012      	beq.n	8008984 <USBD_StdEPReq+0x3a>
 800895e:	b96a      	cbnz	r2, 800897c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8008960:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008962:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8008964:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8008966:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8008968:	d020      	beq.n	80089ac <USBD_StdEPReq+0x62>
 800896a:	d336      	bcc.n	80089da <USBD_StdEPReq+0x90>
 800896c:	2d03      	cmp	r5, #3
 800896e:	d105      	bne.n	800897c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8008970:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008974:	2a02      	cmp	r2, #2
 8008976:	d027      	beq.n	80089c8 <USBD_StdEPReq+0x7e>
 8008978:	2a03      	cmp	r2, #3
 800897a:	d00b      	beq.n	8008994 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 800897c:	4620      	mov	r0, r4
 800897e:	f7ff fe8f 	bl	80086a0 <USBD_CtlError.constprop.1>
              break;
 8008982:	e005      	b.n	8008990 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8008984:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8008988:	4619      	mov	r1, r3
 800898a:	6892      	ldr	r2, [r2, #8]
 800898c:	4620      	mov	r0, r4
 800898e:	4790      	blx	r2
}
 8008990:	2000      	movs	r0, #0
 8008992:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008994:	885a      	ldrh	r2, [r3, #2]
 8008996:	b92a      	cbnz	r2, 80089a4 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8008998:	064a      	lsls	r2, r1, #25
 800899a:	d003      	beq.n	80089a4 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800899c:	88db      	ldrh	r3, [r3, #6]
 800899e:	b90b      	cbnz	r3, 80089a4 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 80089a0:	f7ff fce8 	bl	8008374 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fa49 	bl	8008e3c <USBD_CtlSendStatus>
              break;
 80089aa:	e7f1      	b.n	8008990 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80089ac:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80089b0:	2a02      	cmp	r2, #2
 80089b2:	d009      	beq.n	80089c8 <USBD_StdEPReq+0x7e>
 80089b4:	2a03      	cmp	r2, #3
 80089b6:	d1e1      	bne.n	800897c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089b8:	885b      	ldrh	r3, [r3, #2]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e8      	bne.n	8008990 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80089be:	064d      	lsls	r5, r1, #25
 80089c0:	d0f0      	beq.n	80089a4 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80089c2:	f7ff fce5 	bl	8008390 <USBD_LL_ClearStallEP>
 80089c6:	e7ed      	b.n	80089a4 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089c8:	064b      	lsls	r3, r1, #25
 80089ca:	d0d7      	beq.n	800897c <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80089cc:	f7ff fcd2 	bl	8008374 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80089d0:	2180      	movs	r1, #128	; 0x80
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff fcce 	bl	8008374 <USBD_LL_StallEP>
 80089d8:	e7da      	b.n	8008990 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80089da:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d00f      	beq.n	8008a02 <USBD_StdEPReq+0xb8>
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d1ca      	bne.n	800897c <USBD_StdEPReq+0x32>
 80089e6:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ea:	eb00 1503 	add.w	r5, r0, r3, lsl #4
 80089ee:	0612      	lsls	r2, r2, #24
 80089f0:	bf4c      	ite	mi
 80089f2:	3514      	addmi	r5, #20
 80089f4:	f505 7582 	addpl.w	r5, r5, #260	; 0x104
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089f8:	b99b      	cbnz	r3, 8008a22 <USBD_StdEPReq+0xd8>
                pep->status = 0x0001U;
 80089fa:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089fc:	2202      	movs	r2, #2
 80089fe:	4629      	mov	r1, r5
 8008a00:	e00b      	b.n	8008a1a <USBD_StdEPReq+0xd0>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a02:	0648      	lsls	r0, r1, #25
 8008a04:	d1ba      	bne.n	800897c <USBD_StdEPReq+0x32>
              pep->status = 0x0000U;
 8008a06:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a08:	0611      	lsls	r1, r2, #24
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a0a:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a0e:	bf4c      	ite	mi
 8008a10:	f104 0114 	addmi.w	r1, r4, #20
 8008a14:	f504 7182 	addpl.w	r1, r4, #260	; 0x104
              pep->status = 0x0000U;
 8008a18:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 f9e2 	bl	8008de4 <USBD_CtlSendData>
              break;
 8008a20:	e7b6      	b.n	8008990 <USBD_StdEPReq+0x46>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008a22:	f7ff fcc3 	bl	80083ac <USBD_LL_IsStallEP>
 8008a26:	b108      	cbz	r0, 8008a2c <USBD_StdEPReq+0xe2>
                pep->status = 0x0001U;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e7e6      	b.n	80089fa <USBD_StdEPReq+0xb0>
                pep->status = 0x0000U;
 8008a2c:	6028      	str	r0, [r5, #0]
 8008a2e:	e7e5      	b.n	80089fc <USBD_StdEPReq+0xb2>

08008a30 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8008a30:	780b      	ldrb	r3, [r1, #0]
 8008a32:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008a34:	784b      	ldrb	r3, [r1, #1]
 8008a36:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008a38:	78ca      	ldrb	r2, [r1, #3]
 8008a3a:	788b      	ldrb	r3, [r1, #2]
 8008a3c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008a40:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008a42:	794a      	ldrb	r2, [r1, #5]
 8008a44:	790b      	ldrb	r3, [r1, #4]
 8008a46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008a4a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008a4c:	79ca      	ldrb	r2, [r1, #7]
 8008a4e:	798b      	ldrb	r3, [r1, #6]
 8008a50:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008a54:	80c3      	strh	r3, [r0, #6]
}
 8008a56:	4770      	bx	lr

08008a58 <USBD_CtlError>:
{
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8008a5c:	2180      	movs	r1, #128	; 0x80
 8008a5e:	f7ff fc89 	bl	8008374 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008a62:	4620      	mov	r0, r4
}
 8008a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8008a68:	2100      	movs	r1, #0
 8008a6a:	f7ff bc83 	b.w	8008374 <USBD_LL_StallEP>

08008a6e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a6e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8008a70:	b188      	cbz	r0, 8008a96 <USBD_GetString+0x28>
 8008a72:	4605      	mov	r5, r0
 8008a74:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8008a76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2c00      	cmp	r4, #0
 8008a7e:	d1f9      	bne.n	8008a74 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a80:	3301      	adds	r3, #1
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a86:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	704b      	strb	r3, [r1, #1]
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	3801      	subs	r0, #1
    while (*desc != '\0')
 8008a90:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008a94:	b905      	cbnz	r5, 8008a98 <USBD_GetString+0x2a>
}
 8008a96:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	54cd      	strb	r5, [r1, r3]
 8008a9c:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8008a9e:	3302      	adds	r3, #2
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	548c      	strb	r4, [r1, r2]
 8008aa4:	e7f4      	b.n	8008a90 <USBD_GetString+0x22>

08008aa6 <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	4770      	bx	lr

08008aaa <CUSTOM_HID_GetEvent_FS>:
  /* USER CODE END 6 */
}

/* USER CODE BEGIN 7 */
static int8_t CUSTOM_HID_GetEvent_FS(USBD_SetupReqTypedef* req,uint8_t** return_buf)
{
 8008aaa:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
  USBD_GetEvent_HID((req->wValue & 0xff),req->wLength,return_buf);
 8008aac:	460a      	mov	r2, r1
 8008aae:	88c1      	ldrh	r1, [r0, #6]
 8008ab0:	7880      	ldrb	r0, [r0, #2]
 8008ab2:	f7fe ff6b 	bl	800798c <USBD_GetEvent_HID>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	bd08      	pop	{r3, pc}

08008aba <CUSTOM_HID_OutEvent_FS>:
{
 8008aba:	b508      	push	{r3, lr}
	 USBD_OutEvent_HID(report);
 8008abc:	f7fe ff5c 	bl	8007978 <USBD_OutEvent_HID>
}
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	bd08      	pop	{r3, pc}

08008ac4 <CUSTOM_HID_DeInit_FS>:
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	4770      	bx	lr

08008ac8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008ac8:	2329      	movs	r3, #41	; 0x29
 8008aca:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8008acc:	4800      	ldr	r0, [pc, #0]	; (8008ad0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8008ace:	4770      	bx	lr
 8008ad0:	20000654 	.word	0x20000654

08008ad4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008ad4:	2329      	movs	r3, #41	; 0x29
 8008ad6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8008ad8:	4800      	ldr	r0, [pc, #0]	; (8008adc <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8008ada:	4770      	bx	lr
 8008adc:	20000680 	.word	0x20000680

08008ae0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008ae0:	2329      	movs	r3, #41	; 0x29
 8008ae2:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8008ae4:	4800      	ldr	r0, [pc, #0]	; (8008ae8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8008ae6:	4770      	bx	lr
 8008ae8:	200006c4 	.word	0x200006c4

08008aec <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008aec:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008af0:	2000      	movs	r0, #0
 8008af2:	f883 0210 	strb.w	r0, [r3, #528]	; 0x210

  return USBD_OK;
}
 8008af6:	4770      	bx	lr

08008af8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008af8:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008afa:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218

  if (hhid->IsReportAvailable == 1U)
 8008afe:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d107      	bne.n	8008b16 <USBD_CUSTOM_HID_EP0_RxReady+0x1e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 8008b06:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  }

  return USBD_OK;
}
 8008b16:	2000      	movs	r0, #0
 8008b18:	bd10      	pop	{r4, pc}
	...

08008b1c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008b1c:	230a      	movs	r3, #10
 8008b1e:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8008b20:	4800      	ldr	r0, [pc, #0]	; (8008b24 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8008b22:	4770      	bx	lr
 8008b24:	200006b8 	.word	0x200006b8

08008b28 <USBD_CUSTOM_HID_DataOut>:
{
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 8008b2c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
 8008b30:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008b34:	4628      	mov	r0, r5
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b3e:	462a      	mov	r2, r5
 8008b40:	2102      	movs	r1, #2
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7ff fc5e 	bl	8008404 <USBD_LL_PrepareReceive>
}
 8008b48:	2000      	movs	r0, #0
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}

08008b4c <USBD_CUSTOM_HID_Setup>:
{
 8008b4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint16_t status_info = 0U;
 8008b4e:	2300      	movs	r3, #0
{
 8008b50:	460e      	mov	r6, r1
  uint16_t status_info = 0U;
 8008b52:	f8ad 3002 	strh.w	r3, [sp, #2]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b56:	7833      	ldrb	r3, [r6, #0]
{
 8008b58:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b5a:	f013 0360 	ands.w	r3, r3, #96	; 0x60
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008b5e:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b62:	d03d      	beq.n	8008be0 <USBD_CUSTOM_HID_Setup+0x94>
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	d132      	bne.n	8008bce <USBD_CUSTOM_HID_Setup+0x82>
      switch (req->bRequest)
 8008b68:	7873      	ldrb	r3, [r6, #1]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	2b0a      	cmp	r3, #10
 8008b6e:	d82e      	bhi.n	8008bce <USBD_CUSTOM_HID_Setup+0x82>
 8008b70:	e8df f003 	tbb	[pc, r3]
 8008b74:	2d0b1722 	.word	0x2d0b1722
 8008b78:	2d2d2d2d 	.word	0x2d2d2d2d
 8008b7c:	121b      	.short	0x121b
 8008b7e:	06          	.byte	0x06
 8008b7f:	00          	.byte	0x00
          hhid->Protocol = (uint8_t)(req->wValue);
 8008b80:	78b3      	ldrb	r3, [r6, #2]
 8008b82:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  uint8_t ret = USBD_OK;
 8008b86:	2000      	movs	r0, #0
 8008b88:	e026      	b.n	8008bd8 <USBD_CUSTOM_HID_Setup+0x8c>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f501 7100 	add.w	r1, r1, #512	; 0x200
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 f927 	bl	8008de4 <USBD_CtlSendData>
 8008b96:	e7f6      	b.n	8008b86 <USBD_CUSTOM_HID_Setup+0x3a>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008b98:	8873      	ldrh	r3, [r6, #2]
 8008b9a:	0a1b      	lsrs	r3, r3, #8
 8008b9c:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8008ba0:	e7f1      	b.n	8008b86 <USBD_CUSTOM_HID_Setup+0x3a>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8008ba8:	e7f2      	b.n	8008b90 <USBD_CUSTOM_HID_Setup+0x44>
          hhid->IsReportAvailable = 1U;
 8008baa:	2301      	movs	r3, #1
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008bac:	88f2      	ldrh	r2, [r6, #6]
          hhid->IsReportAvailable = 1U;
 8008bae:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008bb2:	f000 f92c 	bl	8008e0e <USBD_CtlPrepareRx>
 8008bb6:	e7e6      	b.n	8008b86 <USBD_CUSTOM_HID_Setup+0x3a>
          get_feature_return_buf = 0;
 8008bb8:	2400      	movs	r4, #0
          ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->GetEvent(req, &get_feature_return_buf);
 8008bba:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
          get_feature_return_buf = 0;
 8008bbe:	a902      	add	r1, sp, #8
 8008bc0:	f841 4d04 	str.w	r4, [r1, #-4]!
          ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->GetEvent(req, &get_feature_return_buf);
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	4798      	blx	r3
          if(get_feature_return_buf == 0){
 8008bca:	9901      	ldr	r1, [sp, #4]
 8008bcc:	b931      	cbnz	r1, 8008bdc <USBD_CUSTOM_HID_Setup+0x90>
          USBD_CtlError(pdev, req);
 8008bce:	4628      	mov	r0, r5
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	f7ff ff41 	bl	8008a58 <USBD_CtlError>
          ret = USBD_FAIL;
 8008bd6:	2002      	movs	r0, #2
}
 8008bd8:	b002      	add	sp, #8
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
        	   USBD_CtlSendData (pdev, get_feature_return_buf, (uint8_t)(req->wLength));
 8008bdc:	79b2      	ldrb	r2, [r6, #6]
 8008bde:	e7d7      	b.n	8008b90 <USBD_CUSTOM_HID_Setup+0x44>
      switch (req->bRequest)
 8008be0:	7873      	ldrb	r3, [r6, #1]
 8008be2:	2b0b      	cmp	r3, #11
 8008be4:	d8f3      	bhi.n	8008bce <USBD_CUSTOM_HID_Setup+0x82>
 8008be6:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <USBD_CUSTOM_HID_Setup+0xa0>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c1d 	.word	0x08008c1d
 8008bf0:	08008bcf 	.word	0x08008bcf
 8008bf4:	08008bcf 	.word	0x08008bcf
 8008bf8:	08008bcf 	.word	0x08008bcf
 8008bfc:	08008bcf 	.word	0x08008bcf
 8008c00:	08008bcf 	.word	0x08008bcf
 8008c04:	08008c2d 	.word	0x08008c2d
 8008c08:	08008bcf 	.word	0x08008bcf
 8008c0c:	08008bcf 	.word	0x08008bcf
 8008c10:	08008bcf 	.word	0x08008bcf
 8008c14:	08008c5f 	.word	0x08008c5f
 8008c18:	08008c6f 	.word	0x08008c6f
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c1c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d1d4      	bne.n	8008bce <USBD_CUSTOM_HID_Setup+0x82>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c24:	2202      	movs	r2, #2
 8008c26:	eb0d 0102 	add.w	r1, sp, r2
 8008c2a:	e7b1      	b.n	8008b90 <USBD_CUSTOM_HID_Setup+0x44>
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008c2c:	8873      	ldrh	r3, [r6, #2]
 8008c2e:	0a1b      	lsrs	r3, r3, #8
 8008c30:	2b22      	cmp	r3, #34	; 0x22
 8008c32:	d109      	bne.n	8008c48 <USBD_CUSTOM_HID_Setup+0xfc>
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008c34:	f240 43f3 	movw	r3, #1267	; 0x4f3
 8008c38:	88f2      	ldrh	r2, [r6, #6]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	bf28      	it	cs
 8008c3e:	461a      	movcs	r2, r3
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008c40:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008c44:	6819      	ldr	r1, [r3, #0]
 8008c46:	e7a3      	b.n	8008b90 <USBD_CUSTOM_HID_Setup+0x44>
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008c48:	2b21      	cmp	r3, #33	; 0x21
 8008c4a:	d105      	bne.n	8008c58 <USBD_CUSTOM_HID_Setup+0x10c>
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008c4c:	88f2      	ldrh	r2, [r6, #6]
              pbuf = USBD_CUSTOM_HID_Desc;
 8008c4e:	490c      	ldr	r1, [pc, #48]	; (8008c80 <USBD_CUSTOM_HID_Setup+0x134>)
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008c50:	2a09      	cmp	r2, #9
 8008c52:	bf28      	it	cs
 8008c54:	2209      	movcs	r2, #9
 8008c56:	e79b      	b.n	8008b90 <USBD_CUSTOM_HID_Setup+0x44>
  uint8_t  *pbuf = NULL;
 8008c58:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8008c5a:	460a      	mov	r2, r1
 8008c5c:	e798      	b.n	8008b90 <USBD_CUSTOM_HID_Setup+0x44>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c5e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d1b3      	bne.n	8008bce <USBD_CUSTOM_HID_Setup+0x82>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008c66:	2201      	movs	r2, #1
 8008c68:	f501 7102 	add.w	r1, r1, #520	; 0x208
 8008c6c:	e790      	b.n	8008b90 <USBD_CUSTOM_HID_Setup+0x44>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d1ab      	bne.n	8008bce <USBD_CUSTOM_HID_Setup+0x82>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008c76:	78b3      	ldrb	r3, [r6, #2]
 8008c78:	f8c1 3208 	str.w	r3, [r1, #520]	; 0x208
 8008c7c:	e783      	b.n	8008b86 <USBD_CUSTOM_HID_Setup+0x3a>
 8008c7e:	bf00      	nop
 8008c80:	200006ac 	.word	0x200006ac

08008c84 <USBD_CUSTOM_HID_DeInit>:
{
 8008c84:	b510      	push	{r4, lr}
 8008c86:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008c88:	2183      	movs	r1, #131	; 0x83
 8008c8a:	f7ff fb65 	bl	8008358 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008c8e:	2102      	movs	r1, #2
 8008c90:	4620      	mov	r0, r4
 8008c92:	f7ff fb61 	bl	8008358 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8008c96:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8008c9a:	b153      	cbz	r3, 8008cb2 <USBD_CUSTOM_HID_DeInit+0x2e>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c9c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008ca4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8008ca8:	f003 fa40 	bl	800c12c <free>
    pdev->pClassData = NULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	bd10      	pop	{r4, pc}

08008cb6 <USBD_CUSTOM_HID_Init>:
{
 8008cb6:	b570      	push	{r4, r5, r6, lr}
 8008cb8:	4605      	mov	r5, r0
  USBD_LL_OpenEP(pdev,
 8008cba:	2340      	movs	r3, #64	; 0x40
 8008cbc:	2203      	movs	r2, #3
 8008cbe:	2183      	movs	r1, #131	; 0x83
 8008cc0:	f7ff fb3a 	bl	8008338 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008cc4:	2340      	movs	r3, #64	; 0x40
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	2102      	movs	r1, #2
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f7ff fb34 	bl	8008338 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008cd0:	f44f 7005 	mov.w	r0, #532	; 0x214
 8008cd4:	f003 fa22 	bl	800c11c <malloc>
 8008cd8:	4606      	mov	r6, r0
 8008cda:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
  if (pdev->pClassData == NULL)
 8008cde:	b178      	cbz	r0, 8008d00 <USBD_CUSTOM_HID_Init+0x4a>
    hhid->state = CUSTOM_HID_IDLE;
 8008ce0:	2400      	movs	r4, #0
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008ce2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
    hhid->state = CUSTOM_HID_IDLE;
 8008ce6:	f880 4210 	strb.w	r4, [r0, #528]	; 0x210
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cf2:	4632      	mov	r2, r6
 8008cf4:	2102      	movs	r1, #2
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f7ff fb84 	bl	8008404 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008cfc:	4620      	mov	r0, r4
}
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1U;
 8008d00:	2001      	movs	r0, #1
 8008d02:	e7fc      	b.n	8008cfe <USBD_CUSTOM_HID_Init+0x48>

08008d04 <USBD_CUSTOM_HID_SendReport>:
{
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d08:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008d0c:	2a03      	cmp	r2, #3
 8008d0e:	d10b      	bne.n	8008d28 <USBD_CUSTOM_HID_SendReport+0x24>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008d10:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 8008d14:	2401      	movs	r4, #1
    if (hhid->state == CUSTOM_HID_IDLE)
 8008d16:	f896 5210 	ldrb.w	r5, [r6, #528]	; 0x210
 8008d1a:	b93d      	cbnz	r5, 8008d2c <USBD_CUSTOM_HID_SendReport+0x28>
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008d1c:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 8008d1e:	f886 4210 	strb.w	r4, [r6, #528]	; 0x210
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008d22:	2183      	movs	r1, #131	; 0x83
 8008d24:	f7ff fb60 	bl	80083e8 <USBD_LL_Transmit>
  return USBD_OK;
 8008d28:	2000      	movs	r0, #0
}
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	e7fc      	b.n	8008d2a <USBD_CUSTOM_HID_SendReport+0x26>

08008d30 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8008d30:	b119      	cbz	r1, 8008d3a <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8008d32:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 8008d36:	2000      	movs	r0, #0
 8008d38:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008d3a:	2002      	movs	r0, #2
  }

  return ret;
}
 8008d3c:	4770      	bx	lr
	...

08008d40 <USBD_FS_DeviceDescriptor_Composite>:
    USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
  } ;

uint8_t * USBD_FS_DeviceDescriptor_Composite(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc_Composite);
 8008d40:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc_Composite;
}
 8008d42:	4801      	ldr	r0, [pc, #4]	; (8008d48 <USBD_FS_DeviceDescriptor_Composite+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc_Composite);
 8008d44:	800b      	strh	r3, [r1, #0]
}
 8008d46:	4770      	bx	lr
 8008d48:	2000070c 	.word	0x2000070c

08008d4c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d4c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8008d4e:	4801      	ldr	r0, [pc, #4]	; (8008d54 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8008d50:	800b      	strh	r3, [r1, #0]
}
 8008d52:	4770      	bx	lr
 8008d54:	20000720 	.word	0x20000720

08008d58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d5a:	4c04      	ldr	r4, [pc, #16]	; (8008d6c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8008d5c:	460a      	mov	r2, r1
 8008d5e:	4804      	ldr	r0, [pc, #16]	; (8008d70 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8008d60:	4621      	mov	r1, r4
 8008d62:	f7ff fe84 	bl	8008a6e <USBD_GetString>
  return USBD_StrDesc;
}
 8008d66:	4620      	mov	r0, r4
 8008d68:	bd10      	pop	{r4, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20001f98 	.word	0x20001f98
 8008d70:	0800da11 	.word	0x0800da11

08008d74 <USBD_FS_ProductStrDescriptor>:
{
 8008d74:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d76:	4c04      	ldr	r4, [pc, #16]	; (8008d88 <USBD_FS_ProductStrDescriptor+0x14>)
 8008d78:	460a      	mov	r2, r1
 8008d7a:	4804      	ldr	r0, [pc, #16]	; (8008d8c <USBD_FS_ProductStrDescriptor+0x18>)
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7ff fe76 	bl	8008a6e <USBD_GetString>
}
 8008d82:	4620      	mov	r0, r4
 8008d84:	bd10      	pop	{r4, pc}
 8008d86:	bf00      	nop
 8008d88:	20001f98 	.word	0x20001f98
 8008d8c:	0800da1e 	.word	0x0800da1e

08008d90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d90:	b510      	push	{r4, lr}
	if(speed == USBD_SPEED_HIGH)
	{
		USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8008d92:	4c04      	ldr	r4, [pc, #16]	; (8008da4 <USBD_FS_SerialStrDescriptor+0x14>)
 8008d94:	460a      	mov	r2, r1
 8008d96:	4804      	ldr	r0, [pc, #16]	; (8008da8 <USBD_FS_SerialStrDescriptor+0x18>)
 8008d98:	4621      	mov	r1, r4
 8008d9a:	f7ff fe68 	bl	8008a6e <USBD_GetString>
	else
	{
	    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
	}
	return USBD_StrDesc;
}
 8008d9e:	4620      	mov	r0, r4
 8008da0:	bd10      	pop	{r4, pc}
 8008da2:	bf00      	nop
 8008da4:	20001f98 	.word	0x20001f98
 8008da8:	0800da2a 	.word	0x0800da2a

08008dac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dac:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dae:	4c04      	ldr	r4, [pc, #16]	; (8008dc0 <USBD_FS_ConfigStrDescriptor+0x14>)
 8008db0:	460a      	mov	r2, r1
 8008db2:	4804      	ldr	r0, [pc, #16]	; (8008dc4 <USBD_FS_ConfigStrDescriptor+0x18>)
 8008db4:	4621      	mov	r1, r4
 8008db6:	f7ff fe5a 	bl	8008a6e <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8008dba:	4620      	mov	r0, r4
 8008dbc:	bd10      	pop	{r4, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20001f98 	.word	0x20001f98
 8008dc4:	0800d9f0 	.word	0x0800d9f0

08008dc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dca:	4c04      	ldr	r4, [pc, #16]	; (8008ddc <USBD_FS_InterfaceStrDescriptor+0x14>)
 8008dcc:	460a      	mov	r2, r1
 8008dce:	4804      	ldr	r0, [pc, #16]	; (8008de0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	f7ff fe4c 	bl	8008a6e <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	bd10      	pop	{r4, pc}
 8008dda:	bf00      	nop
 8008ddc:	20001f98 	.word	0x20001f98
 8008de0:	0800d9ff 	.word	0x0800d9ff

08008de4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008de4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008de6:	2202      	movs	r2, #2
{
 8008de8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dea:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8008dee:	e9c0 3306 	strd	r3, r3, [r0, #24]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008df2:	460a      	mov	r2, r1
 8008df4:	2100      	movs	r1, #0
 8008df6:	f7ff faf7 	bl	80083e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	bd10      	pop	{r4, pc}

08008dfe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008dfe:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e00:	4613      	mov	r3, r2
 8008e02:	460a      	mov	r2, r1
 8008e04:	2100      	movs	r1, #0
 8008e06:	f7ff faef 	bl	80083e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	bd08      	pop	{r3, pc}

08008e0e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e0e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e10:	2203      	movs	r2, #3
{
 8008e12:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e14:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8008e18:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e1c:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8008e1e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e22:	2100      	movs	r1, #0
 8008e24:	f7ff faee 	bl	8008404 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e28:	2000      	movs	r0, #0
 8008e2a:	bd10      	pop	{r4, pc}

08008e2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e2c:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e2e:	4613      	mov	r3, r2
 8008e30:	460a      	mov	r2, r1
 8008e32:	2100      	movs	r1, #0
 8008e34:	f7ff fae6 	bl	8008404 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e38:	2000      	movs	r0, #0
 8008e3a:	bd08      	pop	{r3, pc}

08008e3c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e3c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e3e:	2304      	movs	r3, #4
 8008e40:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e44:	2300      	movs	r3, #0
 8008e46:	461a      	mov	r2, r3
 8008e48:	4619      	mov	r1, r3
 8008e4a:	f7ff facd 	bl	80083e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008e4e:	2000      	movs	r0, #0
 8008e50:	bd08      	pop	{r3, pc}

08008e52 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e52:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e54:	2305      	movs	r3, #5
 8008e56:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4619      	mov	r1, r3
 8008e60:	f7ff fad0 	bl	8008404 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e64:	2000      	movs	r0, #0
 8008e66:	bd08      	pop	{r3, pc}

08008e68 <_ZdlPvj>:
 8008e68:	f000 b81a 	b.w	8008ea0 <_ZdlPv>

08008e6c <_Znwj>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	bf14      	ite	ne
 8008e72:	4604      	movne	r4, r0
 8008e74:	2401      	moveq	r4, #1
 8008e76:	4620      	mov	r0, r4
 8008e78:	f003 f950 	bl	800c11c <malloc>
 8008e7c:	b930      	cbnz	r0, 8008e8c <_Znwj+0x20>
 8008e7e:	f000 f807 	bl	8008e90 <_ZSt15get_new_handlerv>
 8008e82:	b908      	cbnz	r0, 8008e88 <_Znwj+0x1c>
 8008e84:	f003 f919 	bl	800c0ba <abort>
 8008e88:	4780      	blx	r0
 8008e8a:	e7f4      	b.n	8008e76 <_Znwj+0xa>
 8008e8c:	bd10      	pop	{r4, pc}
	...

08008e90 <_ZSt15get_new_handlerv>:
 8008e90:	4b02      	ldr	r3, [pc, #8]	; (8008e9c <_ZSt15get_new_handlerv+0xc>)
 8008e92:	6818      	ldr	r0, [r3, #0]
 8008e94:	f3bf 8f5b 	dmb	ish
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	20001500 	.word	0x20001500

08008ea0 <_ZdlPv>:
 8008ea0:	f003 b944 	b.w	800c12c <free>

08008ea4 <_ZSt19__throw_logic_errorPKc>:
 8008ea4:	b508      	push	{r3, lr}
 8008ea6:	f003 f908 	bl	800c0ba <abort>

08008eaa <_ZSt24__throw_invalid_argumentPKc>:
 8008eaa:	b508      	push	{r3, lr}
 8008eac:	f003 f905 	bl	800c0ba <abort>

08008eb0 <_ZSt20__throw_length_errorPKc>:
 8008eb0:	b508      	push	{r3, lr}
 8008eb2:	f003 f902 	bl	800c0ba <abort>

08008eb6 <_ZSt20__throw_out_of_rangePKc>:
 8008eb6:	b508      	push	{r3, lr}
 8008eb8:	f003 f8ff 	bl	800c0ba <abort>

08008ebc <_ZSt24__throw_out_of_range_fmtPKcz>:
 8008ebc:	b40f      	push	{r0, r1, r2, r3}
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	f107 0410 	add.w	r4, r7, #16
 8008ec8:	f854 5b04 	ldr.w	r5, [r4], #4
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f7f7 f93f 	bl	8000150 <strlen>
 8008ed2:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8008ed6:	f023 0307 	bic.w	r3, r3, #7
 8008eda:	ebad 0d03 	sub.w	sp, sp, r3
 8008ede:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8008ee2:	4623      	mov	r3, r4
 8008ee4:	462a      	mov	r2, r5
 8008ee6:	4668      	mov	r0, sp
 8008ee8:	607c      	str	r4, [r7, #4]
 8008eea:	f000 fa79 	bl	80093e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8008eee:	f003 f8e4 	bl	800c0ba <abort>

08008ef2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8008ef2:	b10a      	cbz	r2, 8008ef8 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8008ef4:	f003 b930 	b.w	800c158 <memcmp>
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4770      	bx	lr

08008efc <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8008efc:	4613      	mov	r3, r2
 8008efe:	460a      	mov	r2, r1
 8008f00:	b111      	cbz	r1, 8008f08 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8008f02:	7819      	ldrb	r1, [r3, #0]
 8008f04:	f003 b91a 	b.w	800c13c <memchr>
 8008f08:	4608      	mov	r0, r1
 8008f0a:	4770      	bx	lr

08008f0c <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8008f0c:	b10a      	cbz	r2, 8008f12 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8008f0e:	f003 b932 	b.w	800c176 <memcpy>
 8008f12:	4770      	bx	lr

08008f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008f14:	b508      	push	{r3, lr}
 8008f16:	680b      	ldr	r3, [r1, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	da02      	bge.n	8008f22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8008f1c:	4809      	ldr	r0, [pc, #36]	; (8008f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8008f1e:	f7ff ffc7 	bl	8008eb0 <_ZSt20__throw_length_errorPKc>
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d908      	bls.n	8008f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8008f26:	0052      	lsls	r2, r2, #1
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d205      	bcs.n	8008f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	bfb6      	itet	lt
 8008f30:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8008f34:	600a      	strge	r2, [r1, #0]
 8008f36:	600b      	strlt	r3, [r1, #0]
 8008f38:	6808      	ldr	r0, [r1, #0]
 8008f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f3e:	3001      	adds	r0, #1
 8008f40:	f7ff bf94 	b.w	8008e6c <_Znwj>
 8008f44:	0800dac2 	.word	0x0800dac2

08008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f853 0b08 	ldr.w	r0, [r3], #8
 8008f4e:	4298      	cmp	r0, r3
 8008f50:	d001      	beq.n	8008f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008f52:	f7ff bfa5 	b.w	8008ea0 <_ZdlPv>
 8008f56:	4770      	bx	lr

08008f58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8008f58:	b510      	push	{r4, lr}
 8008f5a:	6843      	ldr	r3, [r0, #4]
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	d904      	bls.n	8008f6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8008f62:	460a      	mov	r2, r1
 8008f64:	4802      	ldr	r0, [pc, #8]	; (8008f70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8008f66:	4621      	mov	r1, r4
 8008f68:	f7ff ffa8 	bl	8008ebc <_ZSt24__throw_out_of_range_fmtPKcz>
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	bd10      	pop	{r4, pc}
 8008f70:	0800da4c 	.word	0x0800da4c

08008f74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008f74:	b508      	push	{r3, lr}
 8008f76:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008f7a:	6840      	ldr	r0, [r0, #4]
 8008f7c:	3901      	subs	r1, #1
 8008f7e:	1a09      	subs	r1, r1, r0
 8008f80:	4291      	cmp	r1, r2
 8008f82:	d202      	bcs.n	8008f8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff ff93 	bl	8008eb0 <_ZSt20__throw_length_errorPKc>
 8008f8a:	bd08      	pop	{r3, pc}

08008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008f8c:	2a01      	cmp	r2, #1
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	d102      	bne.n	8008f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8008f92:	780a      	ldrb	r2, [r1, #0]
 8008f94:	7002      	strb	r2, [r0, #0]
 8008f96:	bd10      	pop	{r4, pc}
 8008f98:	f7ff ffb8 	bl	8008f0c <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8008f9c:	e7fb      	b.n	8008f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08008f9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8008f9e:	b508      	push	{r3, lr}
 8008fa0:	1a52      	subs	r2, r2, r1
 8008fa2:	f7ff fff3 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008fa6:	bd08      	pop	{r3, pc}

08008fa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8008fa8:	b508      	push	{r3, lr}
 8008faa:	1a52      	subs	r2, r2, r1
 8008fac:	f7ff ffee 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008fb0:	bd08      	pop	{r3, pc}

08008fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8008fb2:	4288      	cmp	r0, r1
 8008fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	460e      	mov	r6, r1
 8008fba:	d020      	beq.n	8008ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8008fbc:	6802      	ldr	r2, [r0, #0]
 8008fbe:	f100 0308 	add.w	r3, r0, #8
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	bf08      	it	eq
 8008fc6:	220f      	moveq	r2, #15
 8008fc8:	684d      	ldr	r5, [r1, #4]
 8008fca:	bf18      	it	ne
 8008fcc:	6882      	ldrne	r2, [r0, #8]
 8008fce:	42aa      	cmp	r2, r5
 8008fd0:	d20b      	bcs.n	8008fea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8008fd2:	a902      	add	r1, sp, #8
 8008fd4:	f841 5d04 	str.w	r5, [r1, #-4]!
 8008fd8:	f7ff ff9c 	bl	8008f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008fdc:	4607      	mov	r7, r0
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f7ff ffb2 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	6027      	str	r7, [r4, #0]
 8008fe8:	60a3      	str	r3, [r4, #8]
 8008fea:	b125      	cbz	r5, 8008ff6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8008fec:	462a      	mov	r2, r5
 8008fee:	6831      	ldr	r1, [r6, #0]
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	f7ff ffcb 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	6065      	str	r5, [r4, #4]
 8008ffc:	555a      	strb	r2, [r3, r5]
 8008ffe:	b003      	add	sp, #12
 8009000:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8009002:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009006:	4616      	mov	r6, r2
 8009008:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800900c:	6842      	ldr	r2, [r0, #4]
 800900e:	469a      	mov	sl, r3
 8009010:	eba8 0306 	sub.w	r3, r8, r6
 8009014:	1a57      	subs	r7, r2, r1
 8009016:	4413      	add	r3, r2
 8009018:	6802      	ldr	r2, [r0, #0]
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	f100 0308 	add.w	r3, r0, #8
 8009020:	429a      	cmp	r2, r3
 8009022:	460d      	mov	r5, r1
 8009024:	bf14      	ite	ne
 8009026:	6882      	ldrne	r2, [r0, #8]
 8009028:	220f      	moveq	r2, #15
 800902a:	a901      	add	r1, sp, #4
 800902c:	4604      	mov	r4, r0
 800902e:	f7ff ff71 	bl	8008f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009032:	1bbf      	subs	r7, r7, r6
 8009034:	4681      	mov	r9, r0
 8009036:	b11d      	cbz	r5, 8009040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8009038:	462a      	mov	r2, r5
 800903a:	6821      	ldr	r1, [r4, #0]
 800903c:	f7ff ffa6 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009040:	f1ba 0f00 	cmp.w	sl, #0
 8009044:	d008      	beq.n	8009058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8009046:	f1b8 0f00 	cmp.w	r8, #0
 800904a:	d005      	beq.n	8009058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800904c:	4642      	mov	r2, r8
 800904e:	4651      	mov	r1, sl
 8009050:	eb09 0005 	add.w	r0, r9, r5
 8009054:	f7ff ff9a 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009058:	b147      	cbz	r7, 800906c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800905a:	6821      	ldr	r1, [r4, #0]
 800905c:	442e      	add	r6, r5
 800905e:	eb05 0008 	add.w	r0, r5, r8
 8009062:	463a      	mov	r2, r7
 8009064:	4431      	add	r1, r6
 8009066:	4448      	add	r0, r9
 8009068:	f7ff ff90 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800906c:	4620      	mov	r0, r4
 800906e:	f7ff ff6b 	bl	8008f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009072:	9b01      	ldr	r3, [sp, #4]
 8009074:	f8c4 9000 	str.w	r9, [r4]
 8009078:	60a3      	str	r3, [r4, #8]
 800907a:	b002      	add	sp, #8
 800907c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	4604      	mov	r4, r0
 8009084:	460e      	mov	r6, r1
 8009086:	3008      	adds	r0, #8
 8009088:	6020      	str	r0, [r4, #0]
 800908a:	f856 3b08 	ldr.w	r3, [r6], #8
 800908e:	460d      	mov	r5, r1
 8009090:	429e      	cmp	r6, r3
 8009092:	d10b      	bne.n	80090ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8009094:	2210      	movs	r2, #16
 8009096:	4631      	mov	r1, r6
 8009098:	f7ff ff38 	bl	8008f0c <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800909c:	686b      	ldr	r3, [r5, #4]
 800909e:	4620      	mov	r0, r4
 80090a0:	6063      	str	r3, [r4, #4]
 80090a2:	2300      	movs	r3, #0
 80090a4:	602e      	str	r6, [r5, #0]
 80090a6:	606b      	str	r3, [r5, #4]
 80090a8:	722b      	strb	r3, [r5, #8]
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	688b      	ldr	r3, [r1, #8]
 80090b0:	60a3      	str	r3, [r4, #8]
 80090b2:	e7f3      	b.n	800909c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080090b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	460b      	mov	r3, r1
 80090b8:	4606      	mov	r6, r0
 80090ba:	f853 7b08 	ldr.w	r7, [r3], #8
 80090be:	4605      	mov	r5, r0
 80090c0:	42bb      	cmp	r3, r7
 80090c2:	460c      	mov	r4, r1
 80090c4:	f856 2b08 	ldr.w	r2, [r6], #8
 80090c8:	d016      	beq.n	80090f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 80090ca:	4296      	cmp	r6, r2
 80090cc:	bf08      	it	eq
 80090ce:	2200      	moveq	r2, #0
 80090d0:	6007      	str	r7, [r0, #0]
 80090d2:	6849      	ldr	r1, [r1, #4]
 80090d4:	bf18      	it	ne
 80090d6:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 80090da:	6041      	str	r1, [r0, #4]
 80090dc:	68a1      	ldr	r1, [r4, #8]
 80090de:	6081      	str	r1, [r0, #8]
 80090e0:	b142      	cbz	r2, 80090f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80090e2:	6022      	str	r2, [r4, #0]
 80090e4:	f8c4 c008 	str.w	ip, [r4, #8]
 80090e8:	2300      	movs	r3, #0
 80090ea:	6822      	ldr	r2, [r4, #0]
 80090ec:	6063      	str	r3, [r4, #4]
 80090ee:	7013      	strb	r3, [r2, #0]
 80090f0:	4628      	mov	r0, r5
 80090f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	e7f7      	b.n	80090e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 80090f8:	f7ff ff5b 	bl	8008fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80090fc:	e7f4      	b.n	80090e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

080090fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80090fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009100:	6802      	ldr	r2, [r0, #0]
 8009102:	f100 0308 	add.w	r3, r0, #8
 8009106:	429a      	cmp	r2, r3
 8009108:	bf08      	it	eq
 800910a:	230f      	moveq	r3, #15
 800910c:	6846      	ldr	r6, [r0, #4]
 800910e:	bf18      	it	ne
 8009110:	6883      	ldrne	r3, [r0, #8]
 8009112:	1c75      	adds	r5, r6, #1
 8009114:	429d      	cmp	r5, r3
 8009116:	4604      	mov	r4, r0
 8009118:	460f      	mov	r7, r1
 800911a:	d906      	bls.n	800912a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 800911c:	2301      	movs	r3, #1
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	2300      	movs	r3, #0
 8009122:	4631      	mov	r1, r6
 8009124:	461a      	mov	r2, r3
 8009126:	f7ff ff6c 	bl	8009002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800912a:	2200      	movs	r2, #0
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	559f      	strb	r7, [r3, r6]
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	6065      	str	r5, [r4, #4]
 8009134:	555a      	strb	r2, [r3, r5]
 8009136:	b003      	add	sp, #12
 8009138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800913a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800913a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800913c:	4604      	mov	r4, r0
 800913e:	4626      	mov	r6, r4
 8009140:	f856 3b08 	ldr.w	r3, [r6], #8
 8009144:	6840      	ldr	r0, [r0, #4]
 8009146:	42b3      	cmp	r3, r6
 8009148:	bf0c      	ite	eq
 800914a:	260f      	moveq	r6, #15
 800914c:	68a6      	ldrne	r6, [r4, #8]
 800914e:	1885      	adds	r5, r0, r2
 8009150:	42b5      	cmp	r5, r6
 8009152:	d80a      	bhi.n	800916a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8009154:	b112      	cbz	r2, 800915c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 8009156:	4418      	add	r0, r3
 8009158:	f7ff ff18 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800915c:	2200      	movs	r2, #0
 800915e:	4620      	mov	r0, r4
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	6065      	str	r5, [r4, #4]
 8009164:	555a      	strb	r2, [r3, r5]
 8009166:	b002      	add	sp, #8
 8009168:	bd70      	pop	{r4, r5, r6, pc}
 800916a:	9200      	str	r2, [sp, #0]
 800916c:	460b      	mov	r3, r1
 800916e:	2200      	movs	r2, #0
 8009170:	4601      	mov	r1, r0
 8009172:	4620      	mov	r0, r4
 8009174:	f7ff ff45 	bl	8009002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009178:	e7f0      	b.n	800915c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0800917a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800917a:	b508      	push	{r3, lr}
 800917c:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009180:	f7ff ffdb 	bl	800913a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009184:	bd08      	pop	{r3, pc}

08009186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8009186:	b508      	push	{r3, lr}
 8009188:	f7ff fff7 	bl	800917a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800918c:	bd08      	pop	{r3, pc}
	...

08009190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	4604      	mov	r4, r0
 8009194:	460d      	mov	r5, r1
 8009196:	4616      	mov	r6, r2
 8009198:	4b04      	ldr	r3, [pc, #16]	; (80091ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800919a:	2100      	movs	r1, #0
 800919c:	f7ff feea 	bl	8008f74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80091a0:	4632      	mov	r2, r6
 80091a2:	4629      	mov	r1, r5
 80091a4:	4620      	mov	r0, r4
 80091a6:	f7ff ffc8 	bl	800913a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	0800daad 	.word	0x0800daad

080091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	460d      	mov	r5, r1
 80091b8:	f7f6 ffca 	bl	8000150 <strlen>
 80091bc:	4606      	mov	r6, r0
 80091be:	4602      	mov	r2, r0
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80091c2:	4620      	mov	r0, r4
 80091c4:	2100      	movs	r1, #0
 80091c6:	f7ff fed5 	bl	8008f74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80091ca:	4632      	mov	r2, r6
 80091cc:	4629      	mov	r1, r5
 80091ce:	4620      	mov	r0, r4
 80091d0:	f7ff ffb3 	bl	800913a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80091d4:	bd70      	pop	{r4, r5, r6, pc}
 80091d6:	bf00      	nop
 80091d8:	0800daad 	.word	0x0800daad

080091dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 80091dc:	b508      	push	{r3, lr}
 80091de:	f7ff ffe7 	bl	80091b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80091e2:	bd08      	pop	{r3, pc}

080091e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 80091e4:	b513      	push	{r0, r1, r4, lr}
 80091e6:	f88d 1007 	strb.w	r1, [sp, #7]
 80091ea:	6841      	ldr	r1, [r0, #4]
 80091ec:	4613      	mov	r3, r2
 80091ee:	428a      	cmp	r2, r1
 80091f0:	d20a      	bcs.n	8009208 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80091f2:	6804      	ldr	r4, [r0, #0]
 80091f4:	f10d 0207 	add.w	r2, sp, #7
 80091f8:	1ac9      	subs	r1, r1, r3
 80091fa:	18e0      	adds	r0, r4, r3
 80091fc:	f7ff fe7e 	bl	8008efc <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8009200:	b110      	cbz	r0, 8009208 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8009202:	1b00      	subs	r0, r0, r4
 8009204:	b002      	add	sp, #8
 8009206:	bd10      	pop	{r4, pc}
 8009208:	f04f 30ff 	mov.w	r0, #4294967295
 800920c:	e7fa      	b.n	8009204 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

0800920e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800920e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009210:	4606      	mov	r6, r0
 8009212:	6845      	ldr	r5, [r0, #4]
 8009214:	4608      	mov	r0, r1
 8009216:	460f      	mov	r7, r1
 8009218:	f7f6 ff9a 	bl	8000150 <strlen>
 800921c:	4285      	cmp	r5, r0
 800921e:	4604      	mov	r4, r0
 8009220:	462a      	mov	r2, r5
 8009222:	4639      	mov	r1, r7
 8009224:	bf28      	it	cs
 8009226:	4602      	movcs	r2, r0
 8009228:	6830      	ldr	r0, [r6, #0]
 800922a:	f7ff fe62 	bl	8008ef2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800922e:	b900      	cbnz	r0, 8009232 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8009230:	1b28      	subs	r0, r5, r4
 8009232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8009234:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009236:	4604      	mov	r4, r0
 8009238:	4616      	mov	r6, r2
 800923a:	460d      	mov	r5, r1
 800923c:	b919      	cbnz	r1, 8009246 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800923e:	b112      	cbz	r2, 8009246 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009240:	480d      	ldr	r0, [pc, #52]	; (8009278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8009242:	f7ff fe2f 	bl	8008ea4 <_ZSt19__throw_logic_errorPKc>
 8009246:	1b73      	subs	r3, r6, r5
 8009248:	2b0f      	cmp	r3, #15
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	d907      	bls.n	800925e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800924e:	2200      	movs	r2, #0
 8009250:	a901      	add	r1, sp, #4
 8009252:	4620      	mov	r0, r4
 8009254:	f7ff fe5e 	bl	8008f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009258:	9b01      	ldr	r3, [sp, #4]
 800925a:	6020      	str	r0, [r4, #0]
 800925c:	60a3      	str	r3, [r4, #8]
 800925e:	4632      	mov	r2, r6
 8009260:	4629      	mov	r1, r5
 8009262:	6820      	ldr	r0, [r4, #0]
 8009264:	f7ff fe9b 	bl	8008f9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8009268:	2100      	movs	r1, #0
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	6822      	ldr	r2, [r4, #0]
 800926e:	6063      	str	r3, [r4, #4]
 8009270:	54d1      	strb	r1, [r2, r3]
 8009272:	b002      	add	sp, #8
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	bf00      	nop
 8009278:	0800da83 	.word	0x0800da83

0800927c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800927c:	b510      	push	{r4, lr}
 800927e:	4604      	mov	r4, r0
 8009280:	f100 0208 	add.w	r2, r0, #8
 8009284:	6002      	str	r2, [r0, #0]
 8009286:	e9d1 1200 	ldrd	r1, r2, [r1]
 800928a:	f04f 0300 	mov.w	r3, #0
 800928e:	440a      	add	r2, r1
 8009290:	f7ff ffd0 	bl	8009234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8009294:	4620      	mov	r0, r4
 8009296:	bd10      	pop	{r4, pc}

08009298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009298:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800929a:	4604      	mov	r4, r0
 800929c:	4616      	mov	r6, r2
 800929e:	460d      	mov	r5, r1
 80092a0:	b919      	cbnz	r1, 80092aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80092a2:	b112      	cbz	r2, 80092aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80092a4:	480d      	ldr	r0, [pc, #52]	; (80092dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80092a6:	f7ff fdfd 	bl	8008ea4 <_ZSt19__throw_logic_errorPKc>
 80092aa:	1b73      	subs	r3, r6, r5
 80092ac:	2b0f      	cmp	r3, #15
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	d907      	bls.n	80092c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80092b2:	2200      	movs	r2, #0
 80092b4:	a901      	add	r1, sp, #4
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7ff fe2c 	bl	8008f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80092bc:	9b01      	ldr	r3, [sp, #4]
 80092be:	6020      	str	r0, [r4, #0]
 80092c0:	60a3      	str	r3, [r4, #8]
 80092c2:	4632      	mov	r2, r6
 80092c4:	4629      	mov	r1, r5
 80092c6:	6820      	ldr	r0, [r4, #0]
 80092c8:	f7ff fe6e 	bl	8008fa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80092cc:	2100      	movs	r1, #0
 80092ce:	9b01      	ldr	r3, [sp, #4]
 80092d0:	6822      	ldr	r2, [r4, #0]
 80092d2:	6063      	str	r3, [r4, #4]
 80092d4:	54d1      	strb	r1, [r2, r3]
 80092d6:	b002      	add	sp, #8
 80092d8:	bd70      	pop	{r4, r5, r6, pc}
 80092da:	bf00      	nop
 80092dc:	0800da83 	.word	0x0800da83

080092e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	460d      	mov	r5, r1
 80092e4:	4616      	mov	r6, r2
 80092e6:	461f      	mov	r7, r3
 80092e8:	f100 0308 	add.w	r3, r0, #8
 80092ec:	4604      	mov	r4, r0
 80092ee:	6003      	str	r3, [r0, #0]
 80092f0:	4631      	mov	r1, r6
 80092f2:	4a09      	ldr	r2, [pc, #36]	; (8009318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
 80092f4:	4628      	mov	r0, r5
 80092f6:	f7ff fe2f 	bl	8008f58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80092fa:	6829      	ldr	r1, [r5, #0]
 80092fc:	686a      	ldr	r2, [r5, #4]
 80092fe:	4401      	add	r1, r0
 8009300:	1b92      	subs	r2, r2, r6
 8009302:	4620      	mov	r0, r4
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	42ba      	cmp	r2, r7
 800930a:	bf94      	ite	ls
 800930c:	188a      	addls	r2, r1, r2
 800930e:	19ca      	addhi	r2, r1, r7
 8009310:	f7ff ffc2 	bl	8009298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8009314:	4620      	mov	r0, r4
 8009316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009318:	0800dada 	.word	0x0800dada

0800931c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	460d      	mov	r5, r1
 8009320:	4604      	mov	r4, r0
 8009322:	4611      	mov	r1, r2
 8009324:	4628      	mov	r0, r5
 8009326:	4a06      	ldr	r2, [pc, #24]	; (8009340 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8009328:	461e      	mov	r6, r3
 800932a:	f7ff fe15 	bl	8008f58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800932e:	4633      	mov	r3, r6
 8009330:	4602      	mov	r2, r0
 8009332:	4629      	mov	r1, r5
 8009334:	4620      	mov	r0, r4
 8009336:	f7ff ffd3 	bl	80092e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 800933a:	4620      	mov	r0, r4
 800933c:	bd70      	pop	{r4, r5, r6, pc}
 800933e:	bf00      	nop
 8009340:	0800da37 	.word	0x0800da37

08009344 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8009344:	b580      	push	{r7, lr}
 8009346:	b09c      	sub	sp, #112	; 0x70
 8009348:	af00      	add	r7, sp, #0
 800934a:	1a0e      	subs	r6, r1, r0
 800934c:	4680      	mov	r8, r0
 800934e:	2269      	movs	r2, #105	; 0x69
 8009350:	490e      	ldr	r1, [pc, #56]	; (800938c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8009352:	1d38      	adds	r0, r7, #4
 8009354:	f002 ff0f 	bl	800c176 <memcpy>
 8009358:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800935c:	f023 0307 	bic.w	r3, r3, #7
 8009360:	ebad 0d03 	sub.w	sp, sp, r3
 8009364:	466c      	mov	r4, sp
 8009366:	2268      	movs	r2, #104	; 0x68
 8009368:	1d39      	adds	r1, r7, #4
 800936a:	4620      	mov	r0, r4
 800936c:	f002 ff03 	bl	800c176 <memcpy>
 8009370:	4632      	mov	r2, r6
 8009372:	4641      	mov	r1, r8
 8009374:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009378:	f002 fefd 	bl	800c176 <memcpy>
 800937c:	2300      	movs	r3, #0
 800937e:	1c75      	adds	r5, r6, #1
 8009380:	4425      	add	r5, r4
 8009382:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8009386:	4620      	mov	r0, r4
 8009388:	f7ff fd8c 	bl	8008ea4 <_ZSt19__throw_logic_errorPKc>
 800938c:	0800db00 	.word	0x0800db00

08009390 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	af00      	add	r7, sp, #0
 8009394:	b086      	sub	sp, #24
 8009396:	466d      	mov	r5, sp
 8009398:	f105 040c 	add.w	r4, r5, #12
 800939c:	4623      	mov	r3, r4
 800939e:	f04f 0c0a 	mov.w	ip, #10
 80093a2:	f8df e038 	ldr.w	lr, [pc, #56]	; 80093dc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80093a6:	fbb2 f6fc 	udiv	r6, r2, ip
 80093aa:	fb0c 2216 	mls	r2, ip, r6, r2
 80093ae:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80093b2:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80093b6:	4632      	mov	r2, r6
 80093b8:	2e00      	cmp	r6, #0
 80093ba:	d1f4      	bne.n	80093a6 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 80093bc:	1ae4      	subs	r4, r4, r3
 80093be:	428c      	cmp	r4, r1
 80093c0:	d808      	bhi.n	80093d4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80093c2:	f1c4 010c 	rsb	r1, r4, #12
 80093c6:	4622      	mov	r2, r4
 80093c8:	4429      	add	r1, r5
 80093ca:	f002 fed4 	bl	800c176 <memcpy>
 80093ce:	4620      	mov	r0, r4
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d4:	f04f 34ff 	mov.w	r4, #4294967295
 80093d8:	e7f9      	b.n	80093ce <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 80093da:	bf00      	nop
 80093dc:	0800daf5 	.word	0x0800daf5

080093e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80093e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e4:	4606      	mov	r6, r0
 80093e6:	4615      	mov	r5, r2
 80093e8:	4604      	mov	r4, r0
 80093ea:	3901      	subs	r1, #1
 80093ec:	1847      	adds	r7, r0, r1
 80093ee:	782a      	ldrb	r2, [r5, #0]
 80093f0:	b39a      	cbz	r2, 800945a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80093f2:	42bc      	cmp	r4, r7
 80093f4:	d22d      	bcs.n	8009452 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80093f6:	2a25      	cmp	r2, #37	; 0x25
 80093f8:	d107      	bne.n	800940a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80093fa:	786a      	ldrb	r2, [r5, #1]
 80093fc:	2a73      	cmp	r2, #115	; 0x73
 80093fe:	d00a      	beq.n	8009416 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8009400:	2a7a      	cmp	r2, #122	; 0x7a
 8009402:	d013      	beq.n	800942c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8009404:	2a25      	cmp	r2, #37	; 0x25
 8009406:	d100      	bne.n	800940a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8009408:	3501      	adds	r5, #1
 800940a:	782a      	ldrb	r2, [r5, #0]
 800940c:	3401      	adds	r4, #1
 800940e:	f804 2c01 	strb.w	r2, [r4, #-1]
 8009412:	3501      	adds	r5, #1
 8009414:	e7eb      	b.n	80093ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8009416:	1d19      	adds	r1, r3, #4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3b01      	subs	r3, #1
 800941c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8009420:	b1a2      	cbz	r2, 800944c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 8009422:	42bc      	cmp	r4, r7
 8009424:	d015      	beq.n	8009452 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8009426:	f804 2b01 	strb.w	r2, [r4], #1
 800942a:	e7f7      	b.n	800941c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800942c:	78aa      	ldrb	r2, [r5, #2]
 800942e:	2a75      	cmp	r2, #117	; 0x75
 8009430:	d1eb      	bne.n	800940a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	1b39      	subs	r1, r7, r4
 8009436:	4620      	mov	r0, r4
 8009438:	f103 0804 	add.w	r8, r3, #4
 800943c:	f7ff ffa8 	bl	8009390 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8009440:	2800      	cmp	r0, #0
 8009442:	dd06      	ble.n	8009452 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8009444:	4404      	add	r4, r0
 8009446:	3503      	adds	r5, #3
 8009448:	4643      	mov	r3, r8
 800944a:	e7d0      	b.n	80093ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800944c:	3502      	adds	r5, #2
 800944e:	460b      	mov	r3, r1
 8009450:	e7cd      	b.n	80093ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8009452:	4621      	mov	r1, r4
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff ff75 	bl	8009344 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800945a:	7022      	strb	r2, [r4, #0]
 800945c:	1ba0      	subs	r0, r4, r6
 800945e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009464 <tan>:
 8009464:	b530      	push	{r4, r5, lr}
 8009466:	4a12      	ldr	r2, [pc, #72]	; (80094b0 <tan+0x4c>)
 8009468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800946c:	4293      	cmp	r3, r2
 800946e:	b087      	sub	sp, #28
 8009470:	dc06      	bgt.n	8009480 <tan+0x1c>
 8009472:	2301      	movs	r3, #1
 8009474:	2200      	movs	r2, #0
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	2300      	movs	r3, #0
 800947a:	f001 fe99 	bl	800b1b0 <__kernel_tan>
 800947e:	e006      	b.n	800948e <tan+0x2a>
 8009480:	4a0c      	ldr	r2, [pc, #48]	; (80094b4 <tan+0x50>)
 8009482:	4293      	cmp	r3, r2
 8009484:	dd05      	ble.n	8009492 <tan+0x2e>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	f7f6 fe6d 	bl	8000168 <__aeabi_dsub>
 800948e:	b007      	add	sp, #28
 8009490:	bd30      	pop	{r4, r5, pc}
 8009492:	aa02      	add	r2, sp, #8
 8009494:	f000 fef8 	bl	800a288 <__ieee754_rem_pio2>
 8009498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800949c:	0040      	lsls	r0, r0, #1
 800949e:	f000 0002 	and.w	r0, r0, #2
 80094a2:	f1c0 0001 	rsb	r0, r0, #1
 80094a6:	9000      	str	r0, [sp, #0]
 80094a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ac:	e7e5      	b.n	800947a <tan+0x16>
 80094ae:	bf00      	nop
 80094b0:	3fe921fb 	.word	0x3fe921fb
 80094b4:	7fefffff 	.word	0x7fefffff

080094b8 <sinf>:
 80094b8:	b507      	push	{r0, r1, r2, lr}
 80094ba:	4a19      	ldr	r2, [pc, #100]	; (8009520 <sinf+0x68>)
 80094bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80094c0:	4293      	cmp	r3, r2
 80094c2:	4601      	mov	r1, r0
 80094c4:	dc04      	bgt.n	80094d0 <sinf+0x18>
 80094c6:	2200      	movs	r2, #0
 80094c8:	2100      	movs	r1, #0
 80094ca:	f002 fb4f 	bl	800bb6c <__kernel_sinf>
 80094ce:	e004      	b.n	80094da <sinf+0x22>
 80094d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094d4:	db04      	blt.n	80094e0 <sinf+0x28>
 80094d6:	f7f7 fb2b 	bl	8000b30 <__aeabi_fsub>
 80094da:	b003      	add	sp, #12
 80094dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80094e0:	4669      	mov	r1, sp
 80094e2:	f001 f96d 	bl	800a7c0 <__ieee754_rem_pio2f>
 80094e6:	f000 0003 	and.w	r0, r0, #3
 80094ea:	2801      	cmp	r0, #1
 80094ec:	d006      	beq.n	80094fc <sinf+0x44>
 80094ee:	2802      	cmp	r0, #2
 80094f0:	d009      	beq.n	8009506 <sinf+0x4e>
 80094f2:	b980      	cbnz	r0, 8009516 <sinf+0x5e>
 80094f4:	2201      	movs	r2, #1
 80094f6:	9901      	ldr	r1, [sp, #4]
 80094f8:	9800      	ldr	r0, [sp, #0]
 80094fa:	e7e6      	b.n	80094ca <sinf+0x12>
 80094fc:	9901      	ldr	r1, [sp, #4]
 80094fe:	9800      	ldr	r0, [sp, #0]
 8009500:	f002 f816 	bl	800b530 <__kernel_cosf>
 8009504:	e7e9      	b.n	80094da <sinf+0x22>
 8009506:	2201      	movs	r2, #1
 8009508:	9901      	ldr	r1, [sp, #4]
 800950a:	9800      	ldr	r0, [sp, #0]
 800950c:	f002 fb2e 	bl	800bb6c <__kernel_sinf>
 8009510:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009514:	e7e1      	b.n	80094da <sinf+0x22>
 8009516:	9901      	ldr	r1, [sp, #4]
 8009518:	9800      	ldr	r0, [sp, #0]
 800951a:	f002 f809 	bl	800b530 <__kernel_cosf>
 800951e:	e7f7      	b.n	8009510 <sinf+0x58>
 8009520:	3f490fd8 	.word	0x3f490fd8

08009524 <pow>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	b08f      	sub	sp, #60	; 0x3c
 800952a:	461d      	mov	r5, r3
 800952c:	4680      	mov	r8, r0
 800952e:	4689      	mov	r9, r1
 8009530:	4614      	mov	r4, r2
 8009532:	f000 f99d 	bl	8009870 <__ieee754_pow>
 8009536:	4fa1      	ldr	r7, [pc, #644]	; (80097bc <pow+0x298>)
 8009538:	e9cd 0100 	strd	r0, r1, [sp]
 800953c:	f997 3000 	ldrsb.w	r3, [r7]
 8009540:	463e      	mov	r6, r7
 8009542:	9302      	str	r3, [sp, #8]
 8009544:	3301      	adds	r3, #1
 8009546:	d05f      	beq.n	8009608 <pow+0xe4>
 8009548:	4622      	mov	r2, r4
 800954a:	462b      	mov	r3, r5
 800954c:	4620      	mov	r0, r4
 800954e:	4629      	mov	r1, r5
 8009550:	f7f7 fa5c 	bl	8000a0c <__aeabi_dcmpun>
 8009554:	4682      	mov	sl, r0
 8009556:	2800      	cmp	r0, #0
 8009558:	d156      	bne.n	8009608 <pow+0xe4>
 800955a:	4642      	mov	r2, r8
 800955c:	464b      	mov	r3, r9
 800955e:	4640      	mov	r0, r8
 8009560:	4649      	mov	r1, r9
 8009562:	f7f7 fa53 	bl	8000a0c <__aeabi_dcmpun>
 8009566:	9003      	str	r0, [sp, #12]
 8009568:	b1e8      	cbz	r0, 80095a6 <pow+0x82>
 800956a:	2200      	movs	r2, #0
 800956c:	2300      	movs	r3, #0
 800956e:	4620      	mov	r0, r4
 8009570:	4629      	mov	r1, r5
 8009572:	f7f7 fa19 	bl	80009a8 <__aeabi_dcmpeq>
 8009576:	2800      	cmp	r0, #0
 8009578:	d046      	beq.n	8009608 <pow+0xe4>
 800957a:	2301      	movs	r3, #1
 800957c:	2200      	movs	r2, #0
 800957e:	9304      	str	r3, [sp, #16]
 8009580:	4b8f      	ldr	r3, [pc, #572]	; (80097c0 <pow+0x29c>)
 8009582:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009586:	9305      	str	r3, [sp, #20]
 8009588:	4b8e      	ldr	r3, [pc, #568]	; (80097c4 <pow+0x2a0>)
 800958a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800958e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009592:	9b02      	ldr	r3, [sp, #8]
 8009594:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d031      	beq.n	8009600 <pow+0xdc>
 800959c:	a804      	add	r0, sp, #16
 800959e:	f002 fbeb 	bl	800bd78 <matherr>
 80095a2:	bb38      	cbnz	r0, 80095f4 <pow+0xd0>
 80095a4:	e058      	b.n	8009658 <pow+0x134>
 80095a6:	f04f 0a00 	mov.w	sl, #0
 80095aa:	f04f 0b00 	mov.w	fp, #0
 80095ae:	4652      	mov	r2, sl
 80095b0:	465b      	mov	r3, fp
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	f7f7 f9f7 	bl	80009a8 <__aeabi_dcmpeq>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d051      	beq.n	8009662 <pow+0x13e>
 80095be:	4652      	mov	r2, sl
 80095c0:	465b      	mov	r3, fp
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f7f7 f9ef 	bl	80009a8 <__aeabi_dcmpeq>
 80095ca:	4606      	mov	r6, r0
 80095cc:	b308      	cbz	r0, 8009612 <pow+0xee>
 80095ce:	2301      	movs	r3, #1
 80095d0:	9304      	str	r3, [sp, #16]
 80095d2:	4b7b      	ldr	r3, [pc, #492]	; (80097c0 <pow+0x29c>)
 80095d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80095d8:	9305      	str	r3, [sp, #20]
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80095e0:	930c      	str	r3, [sp, #48]	; 0x30
 80095e2:	9b02      	ldr	r3, [sp, #8]
 80095e4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0d7      	beq.n	800959c <pow+0x78>
 80095ec:	2200      	movs	r2, #0
 80095ee:	4b75      	ldr	r3, [pc, #468]	; (80097c4 <pow+0x2a0>)
 80095f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80095f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095f6:	b11b      	cbz	r3, 8009600 <pow+0xdc>
 80095f8:	f002 fd66 	bl	800c0c8 <__errno>
 80095fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095fe:	6003      	str	r3, [r0, #0]
 8009600:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8009604:	e9cd 3400 	strd	r3, r4, [sp]
 8009608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800960c:	b00f      	add	sp, #60	; 0x3c
 800960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009612:	4620      	mov	r0, r4
 8009614:	4629      	mov	r1, r5
 8009616:	f002 fb23 	bl	800bc60 <finite>
 800961a:	2800      	cmp	r0, #0
 800961c:	d0f4      	beq.n	8009608 <pow+0xe4>
 800961e:	4652      	mov	r2, sl
 8009620:	465b      	mov	r3, fp
 8009622:	4620      	mov	r0, r4
 8009624:	4629      	mov	r1, r5
 8009626:	f7f7 f9c9 	bl	80009bc <__aeabi_dcmplt>
 800962a:	2800      	cmp	r0, #0
 800962c:	d0ec      	beq.n	8009608 <pow+0xe4>
 800962e:	2301      	movs	r3, #1
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	4b63      	ldr	r3, [pc, #396]	; (80097c0 <pow+0x29c>)
 8009634:	960c      	str	r6, [sp, #48]	; 0x30
 8009636:	9305      	str	r3, [sp, #20]
 8009638:	f997 3000 	ldrsb.w	r3, [r7]
 800963c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009640:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009644:	b913      	cbnz	r3, 800964c <pow+0x128>
 8009646:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800964a:	e7a7      	b.n	800959c <pow+0x78>
 800964c:	2000      	movs	r0, #0
 800964e:	495e      	ldr	r1, [pc, #376]	; (80097c8 <pow+0x2a4>)
 8009650:	2b02      	cmp	r3, #2
 8009652:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009656:	d1a1      	bne.n	800959c <pow+0x78>
 8009658:	f002 fd36 	bl	800c0c8 <__errno>
 800965c:	2321      	movs	r3, #33	; 0x21
 800965e:	6003      	str	r3, [r0, #0]
 8009660:	e7c8      	b.n	80095f4 <pow+0xd0>
 8009662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009666:	f002 fafb 	bl	800bc60 <finite>
 800966a:	9002      	str	r0, [sp, #8]
 800966c:	2800      	cmp	r0, #0
 800966e:	d177      	bne.n	8009760 <pow+0x23c>
 8009670:	4640      	mov	r0, r8
 8009672:	4649      	mov	r1, r9
 8009674:	f002 faf4 	bl	800bc60 <finite>
 8009678:	2800      	cmp	r0, #0
 800967a:	d071      	beq.n	8009760 <pow+0x23c>
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	f002 faee 	bl	800bc60 <finite>
 8009684:	2800      	cmp	r0, #0
 8009686:	d06b      	beq.n	8009760 <pow+0x23c>
 8009688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800968c:	4619      	mov	r1, r3
 800968e:	4610      	mov	r0, r2
 8009690:	f7f7 f9bc 	bl	8000a0c <__aeabi_dcmpun>
 8009694:	f997 7000 	ldrsb.w	r7, [r7]
 8009698:	4b49      	ldr	r3, [pc, #292]	; (80097c0 <pow+0x29c>)
 800969a:	b1a0      	cbz	r0, 80096c6 <pow+0x1a2>
 800969c:	2201      	movs	r2, #1
 800969e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096a2:	9b02      	ldr	r3, [sp, #8]
 80096a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80096a8:	930c      	str	r3, [sp, #48]	; 0x30
 80096aa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80096ae:	2f00      	cmp	r7, #0
 80096b0:	d0c9      	beq.n	8009646 <pow+0x122>
 80096b2:	4652      	mov	r2, sl
 80096b4:	465b      	mov	r3, fp
 80096b6:	4650      	mov	r0, sl
 80096b8:	4659      	mov	r1, fp
 80096ba:	f7f7 f837 	bl	800072c <__aeabi_ddiv>
 80096be:	2f02      	cmp	r7, #2
 80096c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80096c4:	e7c7      	b.n	8009656 <pow+0x132>
 80096c6:	2203      	movs	r2, #3
 80096c8:	900c      	str	r0, [sp, #48]	; 0x30
 80096ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096ce:	4620      	mov	r0, r4
 80096d0:	4629      	mov	r1, r5
 80096d2:	2200      	movs	r2, #0
 80096d4:	4b3d      	ldr	r3, [pc, #244]	; (80097cc <pow+0x2a8>)
 80096d6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80096da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80096de:	f7f6 fefb 	bl	80004d8 <__aeabi_dmul>
 80096e2:	4604      	mov	r4, r0
 80096e4:	460d      	mov	r5, r1
 80096e6:	bb17      	cbnz	r7, 800972e <pow+0x20a>
 80096e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80096ec:	4b38      	ldr	r3, [pc, #224]	; (80097d0 <pow+0x2ac>)
 80096ee:	4640      	mov	r0, r8
 80096f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80096f4:	4649      	mov	r1, r9
 80096f6:	4652      	mov	r2, sl
 80096f8:	465b      	mov	r3, fp
 80096fa:	f7f7 f95f 	bl	80009bc <__aeabi_dcmplt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d054      	beq.n	80097ac <pow+0x288>
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	f002 fb3f 	bl	800bd88 <rint>
 800970a:	4622      	mov	r2, r4
 800970c:	462b      	mov	r3, r5
 800970e:	f7f7 f94b 	bl	80009a8 <__aeabi_dcmpeq>
 8009712:	b920      	cbnz	r0, 800971e <pow+0x1fa>
 8009714:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009718:	4b2e      	ldr	r3, [pc, #184]	; (80097d4 <pow+0x2b0>)
 800971a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800971e:	f996 3000 	ldrsb.w	r3, [r6]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d142      	bne.n	80097ac <pow+0x288>
 8009726:	f002 fccf 	bl	800c0c8 <__errno>
 800972a:	2322      	movs	r3, #34	; 0x22
 800972c:	e797      	b.n	800965e <pow+0x13a>
 800972e:	2200      	movs	r2, #0
 8009730:	4b29      	ldr	r3, [pc, #164]	; (80097d8 <pow+0x2b4>)
 8009732:	4640      	mov	r0, r8
 8009734:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009738:	4649      	mov	r1, r9
 800973a:	4652      	mov	r2, sl
 800973c:	465b      	mov	r3, fp
 800973e:	f7f7 f93d 	bl	80009bc <__aeabi_dcmplt>
 8009742:	2800      	cmp	r0, #0
 8009744:	d0eb      	beq.n	800971e <pow+0x1fa>
 8009746:	4620      	mov	r0, r4
 8009748:	4629      	mov	r1, r5
 800974a:	f002 fb1d 	bl	800bd88 <rint>
 800974e:	4622      	mov	r2, r4
 8009750:	462b      	mov	r3, r5
 8009752:	f7f7 f929 	bl	80009a8 <__aeabi_dcmpeq>
 8009756:	2800      	cmp	r0, #0
 8009758:	d1e1      	bne.n	800971e <pow+0x1fa>
 800975a:	2200      	movs	r2, #0
 800975c:	4b1a      	ldr	r3, [pc, #104]	; (80097c8 <pow+0x2a4>)
 800975e:	e7dc      	b.n	800971a <pow+0x1f6>
 8009760:	2200      	movs	r2, #0
 8009762:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009766:	2300      	movs	r3, #0
 8009768:	f7f7 f91e 	bl	80009a8 <__aeabi_dcmpeq>
 800976c:	2800      	cmp	r0, #0
 800976e:	f43f af4b 	beq.w	8009608 <pow+0xe4>
 8009772:	4640      	mov	r0, r8
 8009774:	4649      	mov	r1, r9
 8009776:	f002 fa73 	bl	800bc60 <finite>
 800977a:	2800      	cmp	r0, #0
 800977c:	f43f af44 	beq.w	8009608 <pow+0xe4>
 8009780:	4620      	mov	r0, r4
 8009782:	4629      	mov	r1, r5
 8009784:	f002 fa6c 	bl	800bc60 <finite>
 8009788:	2800      	cmp	r0, #0
 800978a:	f43f af3d 	beq.w	8009608 <pow+0xe4>
 800978e:	2304      	movs	r3, #4
 8009790:	9304      	str	r3, [sp, #16]
 8009792:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <pow+0x29c>)
 8009794:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009798:	9305      	str	r3, [sp, #20]
 800979a:	2300      	movs	r3, #0
 800979c:	2400      	movs	r4, #0
 800979e:	930c      	str	r3, [sp, #48]	; 0x30
 80097a0:	2300      	movs	r3, #0
 80097a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80097a6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80097aa:	e7b8      	b.n	800971e <pow+0x1fa>
 80097ac:	a804      	add	r0, sp, #16
 80097ae:	f002 fae3 	bl	800bd78 <matherr>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f47f af1e 	bne.w	80095f4 <pow+0xd0>
 80097b8:	e7b5      	b.n	8009726 <pow+0x202>
 80097ba:	bf00      	nop
 80097bc:	20000724 	.word	0x20000724
 80097c0:	0800db69 	.word	0x0800db69
 80097c4:	3ff00000 	.word	0x3ff00000
 80097c8:	fff00000 	.word	0xfff00000
 80097cc:	3fe00000 	.word	0x3fe00000
 80097d0:	47efffff 	.word	0x47efffff
 80097d4:	c7efffff 	.word	0xc7efffff
 80097d8:	7ff00000 	.word	0x7ff00000

080097dc <sqrtf>:
 80097dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097de:	b08b      	sub	sp, #44	; 0x2c
 80097e0:	4604      	mov	r4, r0
 80097e2:	f001 f945 	bl	800aa70 <__ieee754_sqrtf>
 80097e6:	4b20      	ldr	r3, [pc, #128]	; (8009868 <sqrtf+0x8c>)
 80097e8:	4606      	mov	r6, r0
 80097ea:	f993 5000 	ldrsb.w	r5, [r3]
 80097ee:	1c6b      	adds	r3, r5, #1
 80097f0:	d02a      	beq.n	8009848 <sqrtf+0x6c>
 80097f2:	4621      	mov	r1, r4
 80097f4:	4620      	mov	r0, r4
 80097f6:	f7f7 fc6b 	bl	80010d0 <__aeabi_fcmpun>
 80097fa:	4607      	mov	r7, r0
 80097fc:	bb20      	cbnz	r0, 8009848 <sqrtf+0x6c>
 80097fe:	2100      	movs	r1, #0
 8009800:	4620      	mov	r0, r4
 8009802:	f7f7 fc3d 	bl	8001080 <__aeabi_fcmplt>
 8009806:	b1f8      	cbz	r0, 8009848 <sqrtf+0x6c>
 8009808:	2301      	movs	r3, #1
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	4b17      	ldr	r3, [pc, #92]	; (800986c <sqrtf+0x90>)
 800980e:	4620      	mov	r0, r4
 8009810:	9301      	str	r3, [sp, #4]
 8009812:	9708      	str	r7, [sp, #32]
 8009814:	f7f6 fe08 	bl	8000428 <__aeabi_f2d>
 8009818:	2200      	movs	r2, #0
 800981a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800981e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009822:	2300      	movs	r3, #0
 8009824:	b99d      	cbnz	r5, 800984e <sqrtf+0x72>
 8009826:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800982a:	4668      	mov	r0, sp
 800982c:	f002 faa4 	bl	800bd78 <matherr>
 8009830:	b1a8      	cbz	r0, 800985e <sqrtf+0x82>
 8009832:	9b08      	ldr	r3, [sp, #32]
 8009834:	b11b      	cbz	r3, 800983e <sqrtf+0x62>
 8009836:	f002 fc47 	bl	800c0c8 <__errno>
 800983a:	9b08      	ldr	r3, [sp, #32]
 800983c:	6003      	str	r3, [r0, #0]
 800983e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009842:	f7f7 f921 	bl	8000a88 <__aeabi_d2f>
 8009846:	4606      	mov	r6, r0
 8009848:	4630      	mov	r0, r6
 800984a:	b00b      	add	sp, #44	; 0x2c
 800984c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984e:	4610      	mov	r0, r2
 8009850:	4619      	mov	r1, r3
 8009852:	f7f6 ff6b 	bl	800072c <__aeabi_ddiv>
 8009856:	2d02      	cmp	r5, #2
 8009858:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800985c:	d1e5      	bne.n	800982a <sqrtf+0x4e>
 800985e:	f002 fc33 	bl	800c0c8 <__errno>
 8009862:	2321      	movs	r3, #33	; 0x21
 8009864:	6003      	str	r3, [r0, #0]
 8009866:	e7e4      	b.n	8009832 <sqrtf+0x56>
 8009868:	20000724 	.word	0x20000724
 800986c:	0800db6d 	.word	0x0800db6d

08009870 <__ieee754_pow>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	b091      	sub	sp, #68	; 0x44
 8009876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800987a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800987e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009882:	ea55 0302 	orrs.w	r3, r5, r2
 8009886:	4607      	mov	r7, r0
 8009888:	4688      	mov	r8, r1
 800988a:	f000 84b7 	beq.w	800a1fc <__ieee754_pow+0x98c>
 800988e:	4b80      	ldr	r3, [pc, #512]	; (8009a90 <__ieee754_pow+0x220>)
 8009890:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009894:	429c      	cmp	r4, r3
 8009896:	4689      	mov	r9, r1
 8009898:	4682      	mov	sl, r0
 800989a:	dc09      	bgt.n	80098b0 <__ieee754_pow+0x40>
 800989c:	d103      	bne.n	80098a6 <__ieee754_pow+0x36>
 800989e:	b938      	cbnz	r0, 80098b0 <__ieee754_pow+0x40>
 80098a0:	42a5      	cmp	r5, r4
 80098a2:	dc0d      	bgt.n	80098c0 <__ieee754_pow+0x50>
 80098a4:	e001      	b.n	80098aa <__ieee754_pow+0x3a>
 80098a6:	429d      	cmp	r5, r3
 80098a8:	dc02      	bgt.n	80098b0 <__ieee754_pow+0x40>
 80098aa:	429d      	cmp	r5, r3
 80098ac:	d10e      	bne.n	80098cc <__ieee754_pow+0x5c>
 80098ae:	b16a      	cbz	r2, 80098cc <__ieee754_pow+0x5c>
 80098b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80098b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80098b8:	ea54 030a 	orrs.w	r3, r4, sl
 80098bc:	f000 849e 	beq.w	800a1fc <__ieee754_pow+0x98c>
 80098c0:	4874      	ldr	r0, [pc, #464]	; (8009a94 <__ieee754_pow+0x224>)
 80098c2:	b011      	add	sp, #68	; 0x44
 80098c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	f002 ba58 	b.w	800bd7c <nan>
 80098cc:	f1b9 0f00 	cmp.w	r9, #0
 80098d0:	da53      	bge.n	800997a <__ieee754_pow+0x10a>
 80098d2:	4b71      	ldr	r3, [pc, #452]	; (8009a98 <__ieee754_pow+0x228>)
 80098d4:	429d      	cmp	r5, r3
 80098d6:	dc4e      	bgt.n	8009976 <__ieee754_pow+0x106>
 80098d8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80098dc:	429d      	cmp	r5, r3
 80098de:	dd4c      	ble.n	800997a <__ieee754_pow+0x10a>
 80098e0:	152b      	asrs	r3, r5, #20
 80098e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098e6:	2b14      	cmp	r3, #20
 80098e8:	dd28      	ble.n	800993c <__ieee754_pow+0xcc>
 80098ea:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80098ee:	fa22 f103 	lsr.w	r1, r2, r3
 80098f2:	fa01 f303 	lsl.w	r3, r1, r3
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d13f      	bne.n	800997a <__ieee754_pow+0x10a>
 80098fa:	f001 0101 	and.w	r1, r1, #1
 80098fe:	f1c1 0302 	rsb	r3, r1, #2
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	2a00      	cmp	r2, #0
 8009906:	d15c      	bne.n	80099c2 <__ieee754_pow+0x152>
 8009908:	4b61      	ldr	r3, [pc, #388]	; (8009a90 <__ieee754_pow+0x220>)
 800990a:	429d      	cmp	r5, r3
 800990c:	d126      	bne.n	800995c <__ieee754_pow+0xec>
 800990e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009912:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009916:	ea53 030a 	orrs.w	r3, r3, sl
 800991a:	f000 846f 	beq.w	800a1fc <__ieee754_pow+0x98c>
 800991e:	4b5f      	ldr	r3, [pc, #380]	; (8009a9c <__ieee754_pow+0x22c>)
 8009920:	429c      	cmp	r4, r3
 8009922:	dd2c      	ble.n	800997e <__ieee754_pow+0x10e>
 8009924:	2e00      	cmp	r6, #0
 8009926:	f280 846f 	bge.w	800a208 <__ieee754_pow+0x998>
 800992a:	f04f 0b00 	mov.w	fp, #0
 800992e:	f04f 0c00 	mov.w	ip, #0
 8009932:	4658      	mov	r0, fp
 8009934:	4661      	mov	r1, ip
 8009936:	b011      	add	sp, #68	; 0x44
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	2a00      	cmp	r2, #0
 800993e:	d13e      	bne.n	80099be <__ieee754_pow+0x14e>
 8009940:	f1c3 0314 	rsb	r3, r3, #20
 8009944:	fa45 f103 	asr.w	r1, r5, r3
 8009948:	fa01 f303 	lsl.w	r3, r1, r3
 800994c:	42ab      	cmp	r3, r5
 800994e:	f040 8463 	bne.w	800a218 <__ieee754_pow+0x9a8>
 8009952:	f001 0101 	and.w	r1, r1, #1
 8009956:	f1c1 0302 	rsb	r3, r1, #2
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	4b50      	ldr	r3, [pc, #320]	; (8009aa0 <__ieee754_pow+0x230>)
 800995e:	429d      	cmp	r5, r3
 8009960:	d114      	bne.n	800998c <__ieee754_pow+0x11c>
 8009962:	2e00      	cmp	r6, #0
 8009964:	f280 8454 	bge.w	800a210 <__ieee754_pow+0x9a0>
 8009968:	463a      	mov	r2, r7
 800996a:	4643      	mov	r3, r8
 800996c:	2000      	movs	r0, #0
 800996e:	494c      	ldr	r1, [pc, #304]	; (8009aa0 <__ieee754_pow+0x230>)
 8009970:	f7f6 fedc 	bl	800072c <__aeabi_ddiv>
 8009974:	e013      	b.n	800999e <__ieee754_pow+0x12e>
 8009976:	2302      	movs	r3, #2
 8009978:	e7c3      	b.n	8009902 <__ieee754_pow+0x92>
 800997a:	2300      	movs	r3, #0
 800997c:	e7c1      	b.n	8009902 <__ieee754_pow+0x92>
 800997e:	2e00      	cmp	r6, #0
 8009980:	dad3      	bge.n	800992a <__ieee754_pow+0xba>
 8009982:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009986:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800998a:	e7d2      	b.n	8009932 <__ieee754_pow+0xc2>
 800998c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009990:	d108      	bne.n	80099a4 <__ieee754_pow+0x134>
 8009992:	463a      	mov	r2, r7
 8009994:	4643      	mov	r3, r8
 8009996:	4638      	mov	r0, r7
 8009998:	4641      	mov	r1, r8
 800999a:	f7f6 fd9d 	bl	80004d8 <__aeabi_dmul>
 800999e:	4683      	mov	fp, r0
 80099a0:	468c      	mov	ip, r1
 80099a2:	e7c6      	b.n	8009932 <__ieee754_pow+0xc2>
 80099a4:	4b3f      	ldr	r3, [pc, #252]	; (8009aa4 <__ieee754_pow+0x234>)
 80099a6:	429e      	cmp	r6, r3
 80099a8:	d10b      	bne.n	80099c2 <__ieee754_pow+0x152>
 80099aa:	f1b9 0f00 	cmp.w	r9, #0
 80099ae:	db08      	blt.n	80099c2 <__ieee754_pow+0x152>
 80099b0:	4638      	mov	r0, r7
 80099b2:	4641      	mov	r1, r8
 80099b4:	b011      	add	sp, #68	; 0x44
 80099b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	f000 be55 	b.w	800a668 <__ieee754_sqrt>
 80099be:	2300      	movs	r3, #0
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	4638      	mov	r0, r7
 80099c4:	4641      	mov	r1, r8
 80099c6:	f002 f947 	bl	800bc58 <fabs>
 80099ca:	4683      	mov	fp, r0
 80099cc:	468c      	mov	ip, r1
 80099ce:	f1ba 0f00 	cmp.w	sl, #0
 80099d2:	d12b      	bne.n	8009a2c <__ieee754_pow+0x1bc>
 80099d4:	b124      	cbz	r4, 80099e0 <__ieee754_pow+0x170>
 80099d6:	4b32      	ldr	r3, [pc, #200]	; (8009aa0 <__ieee754_pow+0x230>)
 80099d8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80099dc:	429a      	cmp	r2, r3
 80099de:	d125      	bne.n	8009a2c <__ieee754_pow+0x1bc>
 80099e0:	2e00      	cmp	r6, #0
 80099e2:	da07      	bge.n	80099f4 <__ieee754_pow+0x184>
 80099e4:	465a      	mov	r2, fp
 80099e6:	4663      	mov	r3, ip
 80099e8:	2000      	movs	r0, #0
 80099ea:	492d      	ldr	r1, [pc, #180]	; (8009aa0 <__ieee754_pow+0x230>)
 80099ec:	f7f6 fe9e 	bl	800072c <__aeabi_ddiv>
 80099f0:	4683      	mov	fp, r0
 80099f2:	468c      	mov	ip, r1
 80099f4:	f1b9 0f00 	cmp.w	r9, #0
 80099f8:	da9b      	bge.n	8009932 <__ieee754_pow+0xc2>
 80099fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80099fe:	9b00      	ldr	r3, [sp, #0]
 8009a00:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009a04:	4323      	orrs	r3, r4
 8009a06:	d108      	bne.n	8009a1a <__ieee754_pow+0x1aa>
 8009a08:	465a      	mov	r2, fp
 8009a0a:	4663      	mov	r3, ip
 8009a0c:	4658      	mov	r0, fp
 8009a0e:	4661      	mov	r1, ip
 8009a10:	f7f6 fbaa 	bl	8000168 <__aeabi_dsub>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	e7aa      	b.n	8009970 <__ieee754_pow+0x100>
 8009a1a:	9b00      	ldr	r3, [sp, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d188      	bne.n	8009932 <__ieee754_pow+0xc2>
 8009a20:	4658      	mov	r0, fp
 8009a22:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009a26:	4683      	mov	fp, r0
 8009a28:	469c      	mov	ip, r3
 8009a2a:	e782      	b.n	8009932 <__ieee754_pow+0xc2>
 8009a2c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009a30:	f109 33ff 	add.w	r3, r9, #4294967295
 8009a34:	930d      	str	r3, [sp, #52]	; 0x34
 8009a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a38:	9b00      	ldr	r3, [sp, #0]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	d104      	bne.n	8009a48 <__ieee754_pow+0x1d8>
 8009a3e:	463a      	mov	r2, r7
 8009a40:	4643      	mov	r3, r8
 8009a42:	4638      	mov	r0, r7
 8009a44:	4641      	mov	r1, r8
 8009a46:	e7e3      	b.n	8009a10 <__ieee754_pow+0x1a0>
 8009a48:	4b17      	ldr	r3, [pc, #92]	; (8009aa8 <__ieee754_pow+0x238>)
 8009a4a:	429d      	cmp	r5, r3
 8009a4c:	f340 80fe 	ble.w	8009c4c <__ieee754_pow+0x3dc>
 8009a50:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009a54:	429d      	cmp	r5, r3
 8009a56:	dd0b      	ble.n	8009a70 <__ieee754_pow+0x200>
 8009a58:	4b10      	ldr	r3, [pc, #64]	; (8009a9c <__ieee754_pow+0x22c>)
 8009a5a:	429c      	cmp	r4, r3
 8009a5c:	dc0e      	bgt.n	8009a7c <__ieee754_pow+0x20c>
 8009a5e:	2e00      	cmp	r6, #0
 8009a60:	f6bf af63 	bge.w	800992a <__ieee754_pow+0xba>
 8009a64:	a308      	add	r3, pc, #32	; (adr r3, 8009a88 <__ieee754_pow+0x218>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	e794      	b.n	800999a <__ieee754_pow+0x12a>
 8009a70:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <__ieee754_pow+0x23c>)
 8009a72:	429c      	cmp	r4, r3
 8009a74:	ddf3      	ble.n	8009a5e <__ieee754_pow+0x1ee>
 8009a76:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <__ieee754_pow+0x230>)
 8009a78:	429c      	cmp	r4, r3
 8009a7a:	dd19      	ble.n	8009ab0 <__ieee754_pow+0x240>
 8009a7c:	2e00      	cmp	r6, #0
 8009a7e:	dcf1      	bgt.n	8009a64 <__ieee754_pow+0x1f4>
 8009a80:	e753      	b.n	800992a <__ieee754_pow+0xba>
 8009a82:	bf00      	nop
 8009a84:	f3af 8000 	nop.w
 8009a88:	8800759c 	.word	0x8800759c
 8009a8c:	7e37e43c 	.word	0x7e37e43c
 8009a90:	7ff00000 	.word	0x7ff00000
 8009a94:	0800d732 	.word	0x0800d732
 8009a98:	433fffff 	.word	0x433fffff
 8009a9c:	3fefffff 	.word	0x3fefffff
 8009aa0:	3ff00000 	.word	0x3ff00000
 8009aa4:	3fe00000 	.word	0x3fe00000
 8009aa8:	41e00000 	.word	0x41e00000
 8009aac:	3feffffe 	.word	0x3feffffe
 8009ab0:	4661      	mov	r1, ip
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4b60      	ldr	r3, [pc, #384]	; (8009c38 <__ieee754_pow+0x3c8>)
 8009ab6:	4658      	mov	r0, fp
 8009ab8:	f7f6 fb56 	bl	8000168 <__aeabi_dsub>
 8009abc:	a354      	add	r3, pc, #336	; (adr r3, 8009c10 <__ieee754_pow+0x3a0>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	f7f6 fd07 	bl	80004d8 <__aeabi_dmul>
 8009aca:	a353      	add	r3, pc, #332	; (adr r3, 8009c18 <__ieee754_pow+0x3a8>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	460f      	mov	r7, r1
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f7f6 fcfe 	bl	80004d8 <__aeabi_dmul>
 8009adc:	2200      	movs	r2, #0
 8009ade:	4682      	mov	sl, r0
 8009ae0:	468b      	mov	fp, r1
 8009ae2:	4b56      	ldr	r3, [pc, #344]	; (8009c3c <__ieee754_pow+0x3cc>)
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f7f6 fcf6 	bl	80004d8 <__aeabi_dmul>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	a14b      	add	r1, pc, #300	; (adr r1, 8009c20 <__ieee754_pow+0x3b0>)
 8009af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009af6:	f7f6 fb37 	bl	8000168 <__aeabi_dsub>
 8009afa:	4622      	mov	r2, r4
 8009afc:	462b      	mov	r3, r5
 8009afe:	f7f6 fceb 	bl	80004d8 <__aeabi_dmul>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	2000      	movs	r0, #0
 8009b08:	494d      	ldr	r1, [pc, #308]	; (8009c40 <__ieee754_pow+0x3d0>)
 8009b0a:	f7f6 fb2d 	bl	8000168 <__aeabi_dsub>
 8009b0e:	4622      	mov	r2, r4
 8009b10:	462b      	mov	r3, r5
 8009b12:	4680      	mov	r8, r0
 8009b14:	4689      	mov	r9, r1
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fcdd 	bl	80004d8 <__aeabi_dmul>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4640      	mov	r0, r8
 8009b24:	4649      	mov	r1, r9
 8009b26:	f7f6 fcd7 	bl	80004d8 <__aeabi_dmul>
 8009b2a:	a33f      	add	r3, pc, #252	; (adr r3, 8009c28 <__ieee754_pow+0x3b8>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fcd2 	bl	80004d8 <__aeabi_dmul>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4650      	mov	r0, sl
 8009b3a:	4659      	mov	r1, fp
 8009b3c:	f7f6 fb14 	bl	8000168 <__aeabi_dsub>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	4630      	mov	r0, r6
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	f7f6 fb0e 	bl	800016c <__adddf3>
 8009b50:	2000      	movs	r0, #0
 8009b52:	468b      	mov	fp, r1
 8009b54:	4682      	mov	sl, r0
 8009b56:	4632      	mov	r2, r6
 8009b58:	463b      	mov	r3, r7
 8009b5a:	f7f6 fb05 	bl	8000168 <__aeabi_dsub>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4620      	mov	r0, r4
 8009b64:	4629      	mov	r1, r5
 8009b66:	f7f6 faff 	bl	8000168 <__aeabi_dsub>
 8009b6a:	9b00      	ldr	r3, [sp, #0]
 8009b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	4313      	orrs	r3, r2
 8009b72:	f04f 0300 	mov.w	r3, #0
 8009b76:	bf0c      	ite	eq
 8009b78:	4c32      	ldreq	r4, [pc, #200]	; (8009c44 <__ieee754_pow+0x3d4>)
 8009b7a:	4c2f      	ldrne	r4, [pc, #188]	; (8009c38 <__ieee754_pow+0x3c8>)
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	e9cd 3400 	strd	r3, r4, [sp]
 8009b82:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b86:	2400      	movs	r4, #0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	f7f6 fae9 	bl	8000168 <__aeabi_dsub>
 8009b96:	4652      	mov	r2, sl
 8009b98:	465b      	mov	r3, fp
 8009b9a:	f7f6 fc9d 	bl	80004d8 <__aeabi_dmul>
 8009b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	4689      	mov	r9, r1
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 fc95 	bl	80004d8 <__aeabi_dmul>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	f7f6 fad9 	bl	800016c <__adddf3>
 8009bba:	4622      	mov	r2, r4
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	4680      	mov	r8, r0
 8009bc0:	4689      	mov	r9, r1
 8009bc2:	4650      	mov	r0, sl
 8009bc4:	4659      	mov	r1, fp
 8009bc6:	f7f6 fc87 	bl	80004d8 <__aeabi_dmul>
 8009bca:	4604      	mov	r4, r0
 8009bcc:	460d      	mov	r5, r1
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009bda:	f7f6 fac7 	bl	800016c <__adddf3>
 8009bde:	4b1a      	ldr	r3, [pc, #104]	; (8009c48 <__ieee754_pow+0x3d8>)
 8009be0:	4682      	mov	sl, r0
 8009be2:	4299      	cmp	r1, r3
 8009be4:	460f      	mov	r7, r1
 8009be6:	460e      	mov	r6, r1
 8009be8:	f340 82e1 	ble.w	800a1ae <__ieee754_pow+0x93e>
 8009bec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009bf0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009bf4:	4303      	orrs	r3, r0
 8009bf6:	f000 81db 	beq.w	8009fb0 <__ieee754_pow+0x740>
 8009bfa:	a30d      	add	r3, pc, #52	; (adr r3, 8009c30 <__ieee754_pow+0x3c0>)
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c04:	f7f6 fc68 	bl	80004d8 <__aeabi_dmul>
 8009c08:	a309      	add	r3, pc, #36	; (adr r3, 8009c30 <__ieee754_pow+0x3c0>)
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	e6c4      	b.n	800999a <__ieee754_pow+0x12a>
 8009c10:	60000000 	.word	0x60000000
 8009c14:	3ff71547 	.word	0x3ff71547
 8009c18:	f85ddf44 	.word	0xf85ddf44
 8009c1c:	3e54ae0b 	.word	0x3e54ae0b
 8009c20:	55555555 	.word	0x55555555
 8009c24:	3fd55555 	.word	0x3fd55555
 8009c28:	652b82fe 	.word	0x652b82fe
 8009c2c:	3ff71547 	.word	0x3ff71547
 8009c30:	8800759c 	.word	0x8800759c
 8009c34:	7e37e43c 	.word	0x7e37e43c
 8009c38:	3ff00000 	.word	0x3ff00000
 8009c3c:	3fd00000 	.word	0x3fd00000
 8009c40:	3fe00000 	.word	0x3fe00000
 8009c44:	bff00000 	.word	0xbff00000
 8009c48:	408fffff 	.word	0x408fffff
 8009c4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	da08      	bge.n	8009c68 <__ieee754_pow+0x3f8>
 8009c56:	4658      	mov	r0, fp
 8009c58:	4bcd      	ldr	r3, [pc, #820]	; (8009f90 <__ieee754_pow+0x720>)
 8009c5a:	4661      	mov	r1, ip
 8009c5c:	f7f6 fc3c 	bl	80004d8 <__aeabi_dmul>
 8009c60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009c64:	4683      	mov	fp, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	1523      	asrs	r3, r4, #20
 8009c6a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c6e:	4413      	add	r3, r2
 8009c70:	930c      	str	r3, [sp, #48]	; 0x30
 8009c72:	4bc8      	ldr	r3, [pc, #800]	; (8009f94 <__ieee754_pow+0x724>)
 8009c74:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009c78:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009c82:	dd08      	ble.n	8009c96 <__ieee754_pow+0x426>
 8009c84:	4bc4      	ldr	r3, [pc, #784]	; (8009f98 <__ieee754_pow+0x728>)
 8009c86:	429c      	cmp	r4, r3
 8009c88:	f340 815b 	ble.w	8009f42 <__ieee754_pow+0x6d2>
 8009c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009c92:	3301      	adds	r3, #1
 8009c94:	930c      	str	r3, [sp, #48]	; 0x30
 8009c96:	f04f 0800 	mov.w	r8, #0
 8009c9a:	4658      	mov	r0, fp
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4bbf      	ldr	r3, [pc, #764]	; (8009f9c <__ieee754_pow+0x72c>)
 8009ca0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8009ca4:	444b      	add	r3, r9
 8009ca6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009caa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	4623      	mov	r3, r4
 8009cb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009cb6:	f7f6 fa57 	bl	8000168 <__aeabi_dsub>
 8009cba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	460f      	mov	r7, r1
 8009cc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cc6:	f7f6 fa51 	bl	800016c <__adddf3>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	2000      	movs	r0, #0
 8009cd0:	49b3      	ldr	r1, [pc, #716]	; (8009fa0 <__ieee754_pow+0x730>)
 8009cd2:	f7f6 fd2b 	bl	800072c <__aeabi_ddiv>
 8009cd6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4630      	mov	r0, r6
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	f7f6 fbf9 	bl	80004d8 <__aeabi_dmul>
 8009ce6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cea:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009cee:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	106d      	asrs	r5, r5, #1
 8009cf8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009cfc:	9304      	str	r3, [sp, #16]
 8009cfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009d02:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009d06:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8009d0a:	4650      	mov	r0, sl
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	4614      	mov	r4, r2
 8009d10:	461d      	mov	r5, r3
 8009d12:	f7f6 fbe1 	bl	80004d8 <__aeabi_dmul>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	f7f6 fa23 	bl	8000168 <__aeabi_dsub>
 8009d22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d26:	4606      	mov	r6, r0
 8009d28:	460f      	mov	r7, r1
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	f7f6 fa1b 	bl	8000168 <__aeabi_dsub>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d3a:	f7f6 fa15 	bl	8000168 <__aeabi_dsub>
 8009d3e:	4652      	mov	r2, sl
 8009d40:	465b      	mov	r3, fp
 8009d42:	f7f6 fbc9 	bl	80004d8 <__aeabi_dmul>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	f7f6 fa0b 	bl	8000168 <__aeabi_dsub>
 8009d52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d56:	f7f6 fbbf 	bl	80004d8 <__aeabi_dmul>
 8009d5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d62:	4610      	mov	r0, r2
 8009d64:	4619      	mov	r1, r3
 8009d66:	f7f6 fbb7 	bl	80004d8 <__aeabi_dmul>
 8009d6a:	a377      	add	r3, pc, #476	; (adr r3, 8009f48 <__ieee754_pow+0x6d8>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	4604      	mov	r4, r0
 8009d72:	460d      	mov	r5, r1
 8009d74:	f7f6 fbb0 	bl	80004d8 <__aeabi_dmul>
 8009d78:	a375      	add	r3, pc, #468	; (adr r3, 8009f50 <__ieee754_pow+0x6e0>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	f7f6 f9f5 	bl	800016c <__adddf3>
 8009d82:	4622      	mov	r2, r4
 8009d84:	462b      	mov	r3, r5
 8009d86:	f7f6 fba7 	bl	80004d8 <__aeabi_dmul>
 8009d8a:	a373      	add	r3, pc, #460	; (adr r3, 8009f58 <__ieee754_pow+0x6e8>)
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	f7f6 f9ec 	bl	800016c <__adddf3>
 8009d94:	4622      	mov	r2, r4
 8009d96:	462b      	mov	r3, r5
 8009d98:	f7f6 fb9e 	bl	80004d8 <__aeabi_dmul>
 8009d9c:	a370      	add	r3, pc, #448	; (adr r3, 8009f60 <__ieee754_pow+0x6f0>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 f9e3 	bl	800016c <__adddf3>
 8009da6:	4622      	mov	r2, r4
 8009da8:	462b      	mov	r3, r5
 8009daa:	f7f6 fb95 	bl	80004d8 <__aeabi_dmul>
 8009dae:	a36e      	add	r3, pc, #440	; (adr r3, 8009f68 <__ieee754_pow+0x6f8>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f7f6 f9da 	bl	800016c <__adddf3>
 8009db8:	4622      	mov	r2, r4
 8009dba:	462b      	mov	r3, r5
 8009dbc:	f7f6 fb8c 	bl	80004d8 <__aeabi_dmul>
 8009dc0:	a36b      	add	r3, pc, #428	; (adr r3, 8009f70 <__ieee754_pow+0x700>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 f9d1 	bl	800016c <__adddf3>
 8009dca:	4622      	mov	r2, r4
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460f      	mov	r7, r1
 8009dd0:	462b      	mov	r3, r5
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f7f6 fb7f 	bl	80004d8 <__aeabi_dmul>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4630      	mov	r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	f7f6 fb79 	bl	80004d8 <__aeabi_dmul>
 8009de6:	4604      	mov	r4, r0
 8009de8:	460d      	mov	r5, r1
 8009dea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dee:	4652      	mov	r2, sl
 8009df0:	465b      	mov	r3, fp
 8009df2:	f7f6 f9bb 	bl	800016c <__adddf3>
 8009df6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dfa:	f7f6 fb6d 	bl	80004d8 <__aeabi_dmul>
 8009dfe:	4622      	mov	r2, r4
 8009e00:	462b      	mov	r3, r5
 8009e02:	f7f6 f9b3 	bl	800016c <__adddf3>
 8009e06:	4652      	mov	r2, sl
 8009e08:	4606      	mov	r6, r0
 8009e0a:	460f      	mov	r7, r1
 8009e0c:	465b      	mov	r3, fp
 8009e0e:	4650      	mov	r0, sl
 8009e10:	4659      	mov	r1, fp
 8009e12:	f7f6 fb61 	bl	80004d8 <__aeabi_dmul>
 8009e16:	2200      	movs	r2, #0
 8009e18:	4b62      	ldr	r3, [pc, #392]	; (8009fa4 <__ieee754_pow+0x734>)
 8009e1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e1e:	f7f6 f9a5 	bl	800016c <__adddf3>
 8009e22:	4632      	mov	r2, r6
 8009e24:	463b      	mov	r3, r7
 8009e26:	f7f6 f9a1 	bl	800016c <__adddf3>
 8009e2a:	9804      	ldr	r0, [sp, #16]
 8009e2c:	460d      	mov	r5, r1
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4650      	mov	r0, sl
 8009e36:	4659      	mov	r1, fp
 8009e38:	f7f6 fb4e 	bl	80004d8 <__aeabi_dmul>
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4682      	mov	sl, r0
 8009e40:	468b      	mov	fp, r1
 8009e42:	4b58      	ldr	r3, [pc, #352]	; (8009fa4 <__ieee754_pow+0x734>)
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	f7f6 f98e 	bl	8000168 <__aeabi_dsub>
 8009e4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e50:	f7f6 f98a 	bl	8000168 <__aeabi_dsub>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 f984 	bl	8000168 <__aeabi_dsub>
 8009e60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e64:	f7f6 fb38 	bl	80004d8 <__aeabi_dmul>
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e72:	462b      	mov	r3, r5
 8009e74:	f7f6 fb30 	bl	80004d8 <__aeabi_dmul>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	4639      	mov	r1, r7
 8009e80:	f7f6 f974 	bl	800016c <__adddf3>
 8009e84:	4606      	mov	r6, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4650      	mov	r0, sl
 8009e8e:	4659      	mov	r1, fp
 8009e90:	f7f6 f96c 	bl	800016c <__adddf3>
 8009e94:	a338      	add	r3, pc, #224	; (adr r3, 8009f78 <__ieee754_pow+0x708>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	9804      	ldr	r0, [sp, #16]
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	f7f6 fb1a 	bl	80004d8 <__aeabi_dmul>
 8009ea4:	4652      	mov	r2, sl
 8009ea6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009eaa:	465b      	mov	r3, fp
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 f95a 	bl	8000168 <__aeabi_dsub>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7f6 f954 	bl	8000168 <__aeabi_dsub>
 8009ec0:	a32f      	add	r3, pc, #188	; (adr r3, 8009f80 <__ieee754_pow+0x710>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f7f6 fb07 	bl	80004d8 <__aeabi_dmul>
 8009eca:	a32f      	add	r3, pc, #188	; (adr r3, 8009f88 <__ieee754_pow+0x718>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	f7f6 fafe 	bl	80004d8 <__aeabi_dmul>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	f7f6 f942 	bl	800016c <__adddf3>
 8009ee8:	4b2f      	ldr	r3, [pc, #188]	; (8009fa8 <__ieee754_pow+0x738>)
 8009eea:	444b      	add	r3, r9
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f7f6 f93c 	bl	800016c <__adddf3>
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ef8:	460d      	mov	r5, r1
 8009efa:	f7f6 fa83 	bl	8000404 <__aeabi_i2d>
 8009efe:	4606      	mov	r6, r0
 8009f00:	460f      	mov	r7, r1
 8009f02:	4b2a      	ldr	r3, [pc, #168]	; (8009fac <__ieee754_pow+0x73c>)
 8009f04:	4622      	mov	r2, r4
 8009f06:	444b      	add	r3, r9
 8009f08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f0c:	462b      	mov	r3, r5
 8009f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f12:	f7f6 f92b 	bl	800016c <__adddf3>
 8009f16:	4642      	mov	r2, r8
 8009f18:	464b      	mov	r3, r9
 8009f1a:	f7f6 f927 	bl	800016c <__adddf3>
 8009f1e:	4632      	mov	r2, r6
 8009f20:	463b      	mov	r3, r7
 8009f22:	f7f6 f923 	bl	800016c <__adddf3>
 8009f26:	9804      	ldr	r0, [sp, #16]
 8009f28:	4632      	mov	r2, r6
 8009f2a:	463b      	mov	r3, r7
 8009f2c:	4682      	mov	sl, r0
 8009f2e:	468b      	mov	fp, r1
 8009f30:	f7f6 f91a 	bl	8000168 <__aeabi_dsub>
 8009f34:	4642      	mov	r2, r8
 8009f36:	464b      	mov	r3, r9
 8009f38:	f7f6 f916 	bl	8000168 <__aeabi_dsub>
 8009f3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f40:	e60b      	b.n	8009b5a <__ieee754_pow+0x2ea>
 8009f42:	f04f 0801 	mov.w	r8, #1
 8009f46:	e6a8      	b.n	8009c9a <__ieee754_pow+0x42a>
 8009f48:	4a454eef 	.word	0x4a454eef
 8009f4c:	3fca7e28 	.word	0x3fca7e28
 8009f50:	93c9db65 	.word	0x93c9db65
 8009f54:	3fcd864a 	.word	0x3fcd864a
 8009f58:	a91d4101 	.word	0xa91d4101
 8009f5c:	3fd17460 	.word	0x3fd17460
 8009f60:	518f264d 	.word	0x518f264d
 8009f64:	3fd55555 	.word	0x3fd55555
 8009f68:	db6fabff 	.word	0xdb6fabff
 8009f6c:	3fdb6db6 	.word	0x3fdb6db6
 8009f70:	33333303 	.word	0x33333303
 8009f74:	3fe33333 	.word	0x3fe33333
 8009f78:	e0000000 	.word	0xe0000000
 8009f7c:	3feec709 	.word	0x3feec709
 8009f80:	dc3a03fd 	.word	0xdc3a03fd
 8009f84:	3feec709 	.word	0x3feec709
 8009f88:	145b01f5 	.word	0x145b01f5
 8009f8c:	be3e2fe0 	.word	0xbe3e2fe0
 8009f90:	43400000 	.word	0x43400000
 8009f94:	0003988e 	.word	0x0003988e
 8009f98:	000bb679 	.word	0x000bb679
 8009f9c:	0800db78 	.word	0x0800db78
 8009fa0:	3ff00000 	.word	0x3ff00000
 8009fa4:	40080000 	.word	0x40080000
 8009fa8:	0800db98 	.word	0x0800db98
 8009fac:	0800db88 	.word	0x0800db88
 8009fb0:	a39b      	add	r3, pc, #620	; (adr r3, 800a220 <__ieee754_pow+0x9b0>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	4649      	mov	r1, r9
 8009fba:	f7f6 f8d7 	bl	800016c <__adddf3>
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc4:	462b      	mov	r3, r5
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	4639      	mov	r1, r7
 8009fca:	f7f6 f8cd 	bl	8000168 <__aeabi_dsub>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fd6:	f7f6 fd0f 	bl	80009f8 <__aeabi_dcmpgt>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	f47f ae0d 	bne.w	8009bfa <__ieee754_pow+0x38a>
 8009fe0:	4aa3      	ldr	r2, [pc, #652]	; (800a270 <__ieee754_pow+0xa00>)
 8009fe2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	f340 8103 	ble.w	800a1f2 <__ieee754_pow+0x982>
 8009fec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	151b      	asrs	r3, r3, #20
 8009ff4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009ff8:	fa4a f303 	asr.w	r3, sl, r3
 8009ffc:	4433      	add	r3, r6
 8009ffe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a002:	4f9c      	ldr	r7, [pc, #624]	; (800a274 <__ieee754_pow+0xa04>)
 800a004:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a008:	4117      	asrs	r7, r2
 800a00a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a00e:	ea23 0107 	bic.w	r1, r3, r7
 800a012:	f1c2 0214 	rsb	r2, r2, #20
 800a016:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a01a:	fa4a fa02 	asr.w	sl, sl, r2
 800a01e:	2e00      	cmp	r6, #0
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4620      	mov	r0, r4
 800a026:	4629      	mov	r1, r5
 800a028:	bfb8      	it	lt
 800a02a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a02e:	f7f6 f89b 	bl	8000168 <__aeabi_dsub>
 800a032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a03a:	4642      	mov	r2, r8
 800a03c:	464b      	mov	r3, r9
 800a03e:	f7f6 f895 	bl	800016c <__adddf3>
 800a042:	a379      	add	r3, pc, #484	; (adr r3, 800a228 <__ieee754_pow+0x9b8>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	2000      	movs	r0, #0
 800a04a:	460d      	mov	r5, r1
 800a04c:	4604      	mov	r4, r0
 800a04e:	f7f6 fa43 	bl	80004d8 <__aeabi_dmul>
 800a052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a056:	4606      	mov	r6, r0
 800a058:	460f      	mov	r7, r1
 800a05a:	4620      	mov	r0, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	f7f6 f883 	bl	8000168 <__aeabi_dsub>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4640      	mov	r0, r8
 800a068:	4649      	mov	r1, r9
 800a06a:	f7f6 f87d 	bl	8000168 <__aeabi_dsub>
 800a06e:	a370      	add	r3, pc, #448	; (adr r3, 800a230 <__ieee754_pow+0x9c0>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f7f6 fa30 	bl	80004d8 <__aeabi_dmul>
 800a078:	a36f      	add	r3, pc, #444	; (adr r3, 800a238 <__ieee754_pow+0x9c8>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	4680      	mov	r8, r0
 800a080:	4689      	mov	r9, r1
 800a082:	4620      	mov	r0, r4
 800a084:	4629      	mov	r1, r5
 800a086:	f7f6 fa27 	bl	80004d8 <__aeabi_dmul>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4640      	mov	r0, r8
 800a090:	4649      	mov	r1, r9
 800a092:	f7f6 f86b 	bl	800016c <__adddf3>
 800a096:	4604      	mov	r4, r0
 800a098:	460d      	mov	r5, r1
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 f863 	bl	800016c <__adddf3>
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	4680      	mov	r8, r0
 800a0ac:	4689      	mov	r9, r1
 800a0ae:	f7f6 f85b 	bl	8000168 <__aeabi_dsub>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	f7f6 f855 	bl	8000168 <__aeabi_dsub>
 800a0be:	4642      	mov	r2, r8
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	460f      	mov	r7, r1
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	f7f6 fa05 	bl	80004d8 <__aeabi_dmul>
 800a0ce:	a35c      	add	r3, pc, #368	; (adr r3, 800a240 <__ieee754_pow+0x9d0>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	f7f6 f9fe 	bl	80004d8 <__aeabi_dmul>
 800a0dc:	a35a      	add	r3, pc, #360	; (adr r3, 800a248 <__ieee754_pow+0x9d8>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f841 	bl	8000168 <__aeabi_dsub>
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	f7f6 f9f5 	bl	80004d8 <__aeabi_dmul>
 800a0ee:	a358      	add	r3, pc, #352	; (adr r3, 800a250 <__ieee754_pow+0x9e0>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 f83a 	bl	800016c <__adddf3>
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	f7f6 f9ec 	bl	80004d8 <__aeabi_dmul>
 800a100:	a355      	add	r3, pc, #340	; (adr r3, 800a258 <__ieee754_pow+0x9e8>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 f82f 	bl	8000168 <__aeabi_dsub>
 800a10a:	4622      	mov	r2, r4
 800a10c:	462b      	mov	r3, r5
 800a10e:	f7f6 f9e3 	bl	80004d8 <__aeabi_dmul>
 800a112:	a353      	add	r3, pc, #332	; (adr r3, 800a260 <__ieee754_pow+0x9f0>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 f828 	bl	800016c <__adddf3>
 800a11c:	4622      	mov	r2, r4
 800a11e:	462b      	mov	r3, r5
 800a120:	f7f6 f9da 	bl	80004d8 <__aeabi_dmul>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4640      	mov	r0, r8
 800a12a:	4649      	mov	r1, r9
 800a12c:	f7f6 f81c 	bl	8000168 <__aeabi_dsub>
 800a130:	4604      	mov	r4, r0
 800a132:	460d      	mov	r5, r1
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	4640      	mov	r0, r8
 800a13a:	4649      	mov	r1, r9
 800a13c:	f7f6 f9cc 	bl	80004d8 <__aeabi_dmul>
 800a140:	2200      	movs	r2, #0
 800a142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a14a:	4620      	mov	r0, r4
 800a14c:	4629      	mov	r1, r5
 800a14e:	f7f6 f80b 	bl	8000168 <__aeabi_dsub>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15a:	f7f6 fae7 	bl	800072c <__aeabi_ddiv>
 800a15e:	4632      	mov	r2, r6
 800a160:	4604      	mov	r4, r0
 800a162:	460d      	mov	r5, r1
 800a164:	463b      	mov	r3, r7
 800a166:	4640      	mov	r0, r8
 800a168:	4649      	mov	r1, r9
 800a16a:	f7f6 f9b5 	bl	80004d8 <__aeabi_dmul>
 800a16e:	4632      	mov	r2, r6
 800a170:	463b      	mov	r3, r7
 800a172:	f7f5 fffb 	bl	800016c <__adddf3>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4620      	mov	r0, r4
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7f5 fff3 	bl	8000168 <__aeabi_dsub>
 800a182:	4642      	mov	r2, r8
 800a184:	464b      	mov	r3, r9
 800a186:	f7f5 ffef 	bl	8000168 <__aeabi_dsub>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	2000      	movs	r0, #0
 800a190:	4939      	ldr	r1, [pc, #228]	; (800a278 <__ieee754_pow+0xa08>)
 800a192:	f7f5 ffe9 	bl	8000168 <__aeabi_dsub>
 800a196:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a19a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a19e:	da2b      	bge.n	800a1f8 <__ieee754_pow+0x988>
 800a1a0:	4652      	mov	r2, sl
 800a1a2:	f001 fe7d 	bl	800bea0 <scalbn>
 800a1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1aa:	f7ff bbf6 	b.w	800999a <__ieee754_pow+0x12a>
 800a1ae:	4b33      	ldr	r3, [pc, #204]	; (800a27c <__ieee754_pow+0xa0c>)
 800a1b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a1b4:	429f      	cmp	r7, r3
 800a1b6:	f77f af13 	ble.w	8009fe0 <__ieee754_pow+0x770>
 800a1ba:	4b31      	ldr	r3, [pc, #196]	; (800a280 <__ieee754_pow+0xa10>)
 800a1bc:	440b      	add	r3, r1
 800a1be:	4303      	orrs	r3, r0
 800a1c0:	d00b      	beq.n	800a1da <__ieee754_pow+0x96a>
 800a1c2:	a329      	add	r3, pc, #164	; (adr r3, 800a268 <__ieee754_pow+0x9f8>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1cc:	f7f6 f984 	bl	80004d8 <__aeabi_dmul>
 800a1d0:	a325      	add	r3, pc, #148	; (adr r3, 800a268 <__ieee754_pow+0x9f8>)
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	f7ff bbe0 	b.w	800999a <__ieee754_pow+0x12a>
 800a1da:	4622      	mov	r2, r4
 800a1dc:	462b      	mov	r3, r5
 800a1de:	f7f5 ffc3 	bl	8000168 <__aeabi_dsub>
 800a1e2:	4642      	mov	r2, r8
 800a1e4:	464b      	mov	r3, r9
 800a1e6:	f7f6 fbfd 	bl	80009e4 <__aeabi_dcmpge>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f43f aef8 	beq.w	8009fe0 <__ieee754_pow+0x770>
 800a1f0:	e7e7      	b.n	800a1c2 <__ieee754_pow+0x952>
 800a1f2:	f04f 0a00 	mov.w	sl, #0
 800a1f6:	e71e      	b.n	800a036 <__ieee754_pow+0x7c6>
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	e7d4      	b.n	800a1a6 <__ieee754_pow+0x936>
 800a1fc:	f04f 0b00 	mov.w	fp, #0
 800a200:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a278 <__ieee754_pow+0xa08>
 800a204:	f7ff bb95 	b.w	8009932 <__ieee754_pow+0xc2>
 800a208:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a20c:	f7ff bb91 	b.w	8009932 <__ieee754_pow+0xc2>
 800a210:	4638      	mov	r0, r7
 800a212:	4641      	mov	r1, r8
 800a214:	f7ff bbc3 	b.w	800999e <__ieee754_pow+0x12e>
 800a218:	9200      	str	r2, [sp, #0]
 800a21a:	f7ff bb9f 	b.w	800995c <__ieee754_pow+0xec>
 800a21e:	bf00      	nop
 800a220:	652b82fe 	.word	0x652b82fe
 800a224:	3c971547 	.word	0x3c971547
 800a228:	00000000 	.word	0x00000000
 800a22c:	3fe62e43 	.word	0x3fe62e43
 800a230:	fefa39ef 	.word	0xfefa39ef
 800a234:	3fe62e42 	.word	0x3fe62e42
 800a238:	0ca86c39 	.word	0x0ca86c39
 800a23c:	be205c61 	.word	0xbe205c61
 800a240:	72bea4d0 	.word	0x72bea4d0
 800a244:	3e663769 	.word	0x3e663769
 800a248:	c5d26bf1 	.word	0xc5d26bf1
 800a24c:	3ebbbd41 	.word	0x3ebbbd41
 800a250:	af25de2c 	.word	0xaf25de2c
 800a254:	3f11566a 	.word	0x3f11566a
 800a258:	16bebd93 	.word	0x16bebd93
 800a25c:	3f66c16c 	.word	0x3f66c16c
 800a260:	5555553e 	.word	0x5555553e
 800a264:	3fc55555 	.word	0x3fc55555
 800a268:	c2f8f359 	.word	0xc2f8f359
 800a26c:	01a56e1f 	.word	0x01a56e1f
 800a270:	3fe00000 	.word	0x3fe00000
 800a274:	000fffff 	.word	0x000fffff
 800a278:	3ff00000 	.word	0x3ff00000
 800a27c:	4090cbff 	.word	0x4090cbff
 800a280:	3f6f3400 	.word	0x3f6f3400
 800a284:	00000000 	.word	0x00000000

0800a288 <__ieee754_rem_pio2>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	4614      	mov	r4, r2
 800a28e:	4ac2      	ldr	r2, [pc, #776]	; (800a598 <__ieee754_rem_pio2+0x310>)
 800a290:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a294:	4592      	cmp	sl, r2
 800a296:	b08d      	sub	sp, #52	; 0x34
 800a298:	468b      	mov	fp, r1
 800a29a:	dc07      	bgt.n	800a2ac <__ieee754_rem_pio2+0x24>
 800a29c:	2200      	movs	r2, #0
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e9c4 0100 	strd	r0, r1, [r4]
 800a2a4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a2a8:	2500      	movs	r5, #0
 800a2aa:	e023      	b.n	800a2f4 <__ieee754_rem_pio2+0x6c>
 800a2ac:	4abb      	ldr	r2, [pc, #748]	; (800a59c <__ieee754_rem_pio2+0x314>)
 800a2ae:	4592      	cmp	sl, r2
 800a2b0:	dc71      	bgt.n	800a396 <__ieee754_rem_pio2+0x10e>
 800a2b2:	a3ab      	add	r3, pc, #684	; (adr r3, 800a560 <__ieee754_rem_pio2+0x2d8>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	4db9      	ldr	r5, [pc, #740]	; (800a5a0 <__ieee754_rem_pio2+0x318>)
 800a2bc:	dd36      	ble.n	800a32c <__ieee754_rem_pio2+0xa4>
 800a2be:	f7f5 ff53 	bl	8000168 <__aeabi_dsub>
 800a2c2:	45aa      	cmp	sl, r5
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	460f      	mov	r7, r1
 800a2c8:	d018      	beq.n	800a2fc <__ieee754_rem_pio2+0x74>
 800a2ca:	a3a7      	add	r3, pc, #668	; (adr r3, 800a568 <__ieee754_rem_pio2+0x2e0>)
 800a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d0:	f7f5 ff4a 	bl	8000168 <__aeabi_dsub>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	4630      	mov	r0, r6
 800a2da:	e9c4 2300 	strd	r2, r3, [r4]
 800a2de:	4639      	mov	r1, r7
 800a2e0:	f7f5 ff42 	bl	8000168 <__aeabi_dsub>
 800a2e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800a568 <__ieee754_rem_pio2+0x2e0>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	f7f5 ff3d 	bl	8000168 <__aeabi_dsub>
 800a2ee:	2501      	movs	r5, #1
 800a2f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	b00d      	add	sp, #52	; 0x34
 800a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fc:	a39c      	add	r3, pc, #624	; (adr r3, 800a570 <__ieee754_rem_pio2+0x2e8>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f5 ff31 	bl	8000168 <__aeabi_dsub>
 800a306:	a39c      	add	r3, pc, #624	; (adr r3, 800a578 <__ieee754_rem_pio2+0x2f0>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	4606      	mov	r6, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	f7f5 ff2a 	bl	8000168 <__aeabi_dsub>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4630      	mov	r0, r6
 800a31a:	e9c4 2300 	strd	r2, r3, [r4]
 800a31e:	4639      	mov	r1, r7
 800a320:	f7f5 ff22 	bl	8000168 <__aeabi_dsub>
 800a324:	a394      	add	r3, pc, #592	; (adr r3, 800a578 <__ieee754_rem_pio2+0x2f0>)
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	e7de      	b.n	800a2ea <__ieee754_rem_pio2+0x62>
 800a32c:	f7f5 ff1e 	bl	800016c <__adddf3>
 800a330:	45aa      	cmp	sl, r5
 800a332:	4606      	mov	r6, r0
 800a334:	460f      	mov	r7, r1
 800a336:	d016      	beq.n	800a366 <__ieee754_rem_pio2+0xde>
 800a338:	a38b      	add	r3, pc, #556	; (adr r3, 800a568 <__ieee754_rem_pio2+0x2e0>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f7f5 ff15 	bl	800016c <__adddf3>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4630      	mov	r0, r6
 800a348:	e9c4 2300 	strd	r2, r3, [r4]
 800a34c:	4639      	mov	r1, r7
 800a34e:	f7f5 ff0b 	bl	8000168 <__aeabi_dsub>
 800a352:	a385      	add	r3, pc, #532	; (adr r3, 800a568 <__ieee754_rem_pio2+0x2e0>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f5 ff08 	bl	800016c <__adddf3>
 800a35c:	f04f 35ff 	mov.w	r5, #4294967295
 800a360:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a364:	e7c6      	b.n	800a2f4 <__ieee754_rem_pio2+0x6c>
 800a366:	a382      	add	r3, pc, #520	; (adr r3, 800a570 <__ieee754_rem_pio2+0x2e8>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f5 fefe 	bl	800016c <__adddf3>
 800a370:	a381      	add	r3, pc, #516	; (adr r3, 800a578 <__ieee754_rem_pio2+0x2f0>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	f7f5 fef7 	bl	800016c <__adddf3>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4630      	mov	r0, r6
 800a384:	e9c4 2300 	strd	r2, r3, [r4]
 800a388:	4639      	mov	r1, r7
 800a38a:	f7f5 feed 	bl	8000168 <__aeabi_dsub>
 800a38e:	a37a      	add	r3, pc, #488	; (adr r3, 800a578 <__ieee754_rem_pio2+0x2f0>)
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	e7e0      	b.n	800a358 <__ieee754_rem_pio2+0xd0>
 800a396:	4a83      	ldr	r2, [pc, #524]	; (800a5a4 <__ieee754_rem_pio2+0x31c>)
 800a398:	4592      	cmp	sl, r2
 800a39a:	f300 80d2 	bgt.w	800a542 <__ieee754_rem_pio2+0x2ba>
 800a39e:	f001 fc5b 	bl	800bc58 <fabs>
 800a3a2:	a377      	add	r3, pc, #476	; (adr r3, 800a580 <__ieee754_rem_pio2+0x2f8>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	460f      	mov	r7, r1
 800a3ac:	f7f6 f894 	bl	80004d8 <__aeabi_dmul>
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4b7d      	ldr	r3, [pc, #500]	; (800a5a8 <__ieee754_rem_pio2+0x320>)
 800a3b4:	f7f5 feda 	bl	800016c <__adddf3>
 800a3b8:	f7f6 fb3e 	bl	8000a38 <__aeabi_d2iz>
 800a3bc:	4605      	mov	r5, r0
 800a3be:	f7f6 f821 	bl	8000404 <__aeabi_i2d>
 800a3c2:	a367      	add	r3, pc, #412	; (adr r3, 800a560 <__ieee754_rem_pio2+0x2d8>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3cc:	f7f6 f884 	bl	80004d8 <__aeabi_dmul>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	f7f5 fec6 	bl	8000168 <__aeabi_dsub>
 800a3dc:	a362      	add	r3, pc, #392	; (adr r3, 800a568 <__ieee754_rem_pio2+0x2e0>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460f      	mov	r7, r1
 800a3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ea:	f7f6 f875 	bl	80004d8 <__aeabi_dmul>
 800a3ee:	2d1f      	cmp	r5, #31
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	4689      	mov	r9, r1
 800a3f4:	dc0e      	bgt.n	800a414 <__ieee754_rem_pio2+0x18c>
 800a3f6:	4b6d      	ldr	r3, [pc, #436]	; (800a5ac <__ieee754_rem_pio2+0x324>)
 800a3f8:	1e6a      	subs	r2, r5, #1
 800a3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fe:	4553      	cmp	r3, sl
 800a400:	d008      	beq.n	800a414 <__ieee754_rem_pio2+0x18c>
 800a402:	4642      	mov	r2, r8
 800a404:	464b      	mov	r3, r9
 800a406:	4630      	mov	r0, r6
 800a408:	4639      	mov	r1, r7
 800a40a:	f7f5 fead 	bl	8000168 <__aeabi_dsub>
 800a40e:	e9c4 0100 	strd	r0, r1, [r4]
 800a412:	e011      	b.n	800a438 <__ieee754_rem_pio2+0x1b0>
 800a414:	464b      	mov	r3, r9
 800a416:	4642      	mov	r2, r8
 800a418:	4630      	mov	r0, r6
 800a41a:	4639      	mov	r1, r7
 800a41c:	f7f5 fea4 	bl	8000168 <__aeabi_dsub>
 800a420:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a424:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a428:	ebaa 0303 	sub.w	r3, sl, r3
 800a42c:	2b10      	cmp	r3, #16
 800a42e:	dc1f      	bgt.n	800a470 <__ieee754_rem_pio2+0x1e8>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	e9c4 2300 	strd	r2, r3, [r4]
 800a438:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a43c:	4630      	mov	r0, r6
 800a43e:	4653      	mov	r3, sl
 800a440:	4639      	mov	r1, r7
 800a442:	f7f5 fe91 	bl	8000168 <__aeabi_dsub>
 800a446:	4642      	mov	r2, r8
 800a448:	464b      	mov	r3, r9
 800a44a:	f7f5 fe8d 	bl	8000168 <__aeabi_dsub>
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	f1bb 0f00 	cmp.w	fp, #0
 800a456:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a45a:	f6bf af4b 	bge.w	800a2f4 <__ieee754_rem_pio2+0x6c>
 800a45e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a462:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800a466:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a46a:	60e1      	str	r1, [r4, #12]
 800a46c:	426d      	negs	r5, r5
 800a46e:	e741      	b.n	800a2f4 <__ieee754_rem_pio2+0x6c>
 800a470:	a33f      	add	r3, pc, #252	; (adr r3, 800a570 <__ieee754_rem_pio2+0x2e8>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a47a:	f7f6 f82d 	bl	80004d8 <__aeabi_dmul>
 800a47e:	4680      	mov	r8, r0
 800a480:	4689      	mov	r9, r1
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4630      	mov	r0, r6
 800a488:	4639      	mov	r1, r7
 800a48a:	f7f5 fe6d 	bl	8000168 <__aeabi_dsub>
 800a48e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4630      	mov	r0, r6
 800a498:	4639      	mov	r1, r7
 800a49a:	f7f5 fe65 	bl	8000168 <__aeabi_dsub>
 800a49e:	4642      	mov	r2, r8
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	f7f5 fe61 	bl	8000168 <__aeabi_dsub>
 800a4a6:	a334      	add	r3, pc, #208	; (adr r3, 800a578 <__ieee754_rem_pio2+0x2f0>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	4606      	mov	r6, r0
 800a4ae:	460f      	mov	r7, r1
 800a4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4b4:	f7f6 f810 	bl	80004d8 <__aeabi_dmul>
 800a4b8:	4632      	mov	r2, r6
 800a4ba:	463b      	mov	r3, r7
 800a4bc:	f7f5 fe54 	bl	8000168 <__aeabi_dsub>
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	4680      	mov	r8, r0
 800a4c6:	4689      	mov	r9, r1
 800a4c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4cc:	f7f5 fe4c 	bl	8000168 <__aeabi_dsub>
 800a4d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a4d4:	ebaa 0a03 	sub.w	sl, sl, r3
 800a4d8:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800a4dc:	dc06      	bgt.n	800a4ec <__ieee754_rem_pio2+0x264>
 800a4de:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	e9c4 2300 	strd	r2, r3, [r4]
 800a4ea:	e7a5      	b.n	800a438 <__ieee754_rem_pio2+0x1b0>
 800a4ec:	a326      	add	r3, pc, #152	; (adr r3, 800a588 <__ieee754_rem_pio2+0x300>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f6:	f7f5 ffef 	bl	80004d8 <__aeabi_dmul>
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	4689      	mov	r9, r1
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a506:	f7f5 fe2f 	bl	8000168 <__aeabi_dsub>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4606      	mov	r6, r0
 800a510:	460f      	mov	r7, r1
 800a512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a516:	f7f5 fe27 	bl	8000168 <__aeabi_dsub>
 800a51a:	4642      	mov	r2, r8
 800a51c:	464b      	mov	r3, r9
 800a51e:	f7f5 fe23 	bl	8000168 <__aeabi_dsub>
 800a522:	a31b      	add	r3, pc, #108	; (adr r3, 800a590 <__ieee754_rem_pio2+0x308>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	4680      	mov	r8, r0
 800a52a:	4689      	mov	r9, r1
 800a52c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a530:	f7f5 ffd2 	bl	80004d8 <__aeabi_dmul>
 800a534:	4642      	mov	r2, r8
 800a536:	464b      	mov	r3, r9
 800a538:	f7f5 fe16 	bl	8000168 <__aeabi_dsub>
 800a53c:	4680      	mov	r8, r0
 800a53e:	4689      	mov	r9, r1
 800a540:	e75f      	b.n	800a402 <__ieee754_rem_pio2+0x17a>
 800a542:	4a1b      	ldr	r2, [pc, #108]	; (800a5b0 <__ieee754_rem_pio2+0x328>)
 800a544:	4592      	cmp	sl, r2
 800a546:	dd35      	ble.n	800a5b4 <__ieee754_rem_pio2+0x32c>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	f7f5 fe0c 	bl	8000168 <__aeabi_dsub>
 800a550:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a554:	e9c4 0100 	strd	r0, r1, [r4]
 800a558:	e6a6      	b.n	800a2a8 <__ieee754_rem_pio2+0x20>
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w
 800a560:	54400000 	.word	0x54400000
 800a564:	3ff921fb 	.word	0x3ff921fb
 800a568:	1a626331 	.word	0x1a626331
 800a56c:	3dd0b461 	.word	0x3dd0b461
 800a570:	1a600000 	.word	0x1a600000
 800a574:	3dd0b461 	.word	0x3dd0b461
 800a578:	2e037073 	.word	0x2e037073
 800a57c:	3ba3198a 	.word	0x3ba3198a
 800a580:	6dc9c883 	.word	0x6dc9c883
 800a584:	3fe45f30 	.word	0x3fe45f30
 800a588:	2e000000 	.word	0x2e000000
 800a58c:	3ba3198a 	.word	0x3ba3198a
 800a590:	252049c1 	.word	0x252049c1
 800a594:	397b839a 	.word	0x397b839a
 800a598:	3fe921fb 	.word	0x3fe921fb
 800a59c:	4002d97b 	.word	0x4002d97b
 800a5a0:	3ff921fb 	.word	0x3ff921fb
 800a5a4:	413921fb 	.word	0x413921fb
 800a5a8:	3fe00000 	.word	0x3fe00000
 800a5ac:	0800dba8 	.word	0x0800dba8
 800a5b0:	7fefffff 	.word	0x7fefffff
 800a5b4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800a5b8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a5bc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800a5c0:	460f      	mov	r7, r1
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	f7f6 fa38 	bl	8000a38 <__aeabi_d2iz>
 800a5c8:	f7f5 ff1c 	bl	8000404 <__aeabi_i2d>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5d8:	f7f5 fdc6 	bl	8000168 <__aeabi_dsub>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	4b20      	ldr	r3, [pc, #128]	; (800a660 <__ieee754_rem_pio2+0x3d8>)
 800a5e0:	f7f5 ff7a 	bl	80004d8 <__aeabi_dmul>
 800a5e4:	460f      	mov	r7, r1
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	f7f6 fa26 	bl	8000a38 <__aeabi_d2iz>
 800a5ec:	f7f5 ff0a 	bl	8000404 <__aeabi_i2d>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5fc:	f7f5 fdb4 	bl	8000168 <__aeabi_dsub>
 800a600:	2200      	movs	r2, #0
 800a602:	4b17      	ldr	r3, [pc, #92]	; (800a660 <__ieee754_rem_pio2+0x3d8>)
 800a604:	f7f5 ff68 	bl	80004d8 <__aeabi_dmul>
 800a608:	f04f 0803 	mov.w	r8, #3
 800a60c:	2600      	movs	r6, #0
 800a60e:	2700      	movs	r7, #0
 800a610:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a614:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a618:	4632      	mov	r2, r6
 800a61a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a61e:	463b      	mov	r3, r7
 800a620:	f108 3aff 	add.w	sl, r8, #4294967295
 800a624:	f7f6 f9c0 	bl	80009a8 <__aeabi_dcmpeq>
 800a628:	b9b8      	cbnz	r0, 800a65a <__ieee754_rem_pio2+0x3d2>
 800a62a:	4b0e      	ldr	r3, [pc, #56]	; (800a664 <__ieee754_rem_pio2+0x3dc>)
 800a62c:	462a      	mov	r2, r5
 800a62e:	9301      	str	r3, [sp, #4]
 800a630:	2302      	movs	r3, #2
 800a632:	4621      	mov	r1, r4
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	a806      	add	r0, sp, #24
 800a638:	4643      	mov	r3, r8
 800a63a:	f000 fa6d 	bl	800ab18 <__kernel_rem_pio2>
 800a63e:	f1bb 0f00 	cmp.w	fp, #0
 800a642:	4605      	mov	r5, r0
 800a644:	f6bf ae56 	bge.w	800a2f4 <__ieee754_rem_pio2+0x6c>
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a64e:	6063      	str	r3, [r4, #4]
 800a650:	68e3      	ldr	r3, [r4, #12]
 800a652:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a656:	60e3      	str	r3, [r4, #12]
 800a658:	e708      	b.n	800a46c <__ieee754_rem_pio2+0x1e4>
 800a65a:	46d0      	mov	r8, sl
 800a65c:	e7dc      	b.n	800a618 <__ieee754_rem_pio2+0x390>
 800a65e:	bf00      	nop
 800a660:	41700000 	.word	0x41700000
 800a664:	0800dc28 	.word	0x0800dc28

0800a668 <__ieee754_sqrt>:
 800a668:	4b54      	ldr	r3, [pc, #336]	; (800a7bc <__ieee754_sqrt+0x154>)
 800a66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66e:	438b      	bics	r3, r1
 800a670:	4606      	mov	r6, r0
 800a672:	460d      	mov	r5, r1
 800a674:	460a      	mov	r2, r1
 800a676:	460c      	mov	r4, r1
 800a678:	d10f      	bne.n	800a69a <__ieee754_sqrt+0x32>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	f7f5 ff2b 	bl	80004d8 <__aeabi_dmul>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	4630      	mov	r0, r6
 800a688:	4629      	mov	r1, r5
 800a68a:	f7f5 fd6f 	bl	800016c <__adddf3>
 800a68e:	4606      	mov	r6, r0
 800a690:	460d      	mov	r5, r1
 800a692:	4630      	mov	r0, r6
 800a694:	4629      	mov	r1, r5
 800a696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a69a:	2900      	cmp	r1, #0
 800a69c:	4607      	mov	r7, r0
 800a69e:	4603      	mov	r3, r0
 800a6a0:	dc0e      	bgt.n	800a6c0 <__ieee754_sqrt+0x58>
 800a6a2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a6a6:	ea5c 0707 	orrs.w	r7, ip, r7
 800a6aa:	d0f2      	beq.n	800a692 <__ieee754_sqrt+0x2a>
 800a6ac:	b141      	cbz	r1, 800a6c0 <__ieee754_sqrt+0x58>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	f7f5 fd59 	bl	8000168 <__aeabi_dsub>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	f7f6 f837 	bl	800072c <__aeabi_ddiv>
 800a6be:	e7e6      	b.n	800a68e <__ieee754_sqrt+0x26>
 800a6c0:	1512      	asrs	r2, r2, #20
 800a6c2:	d074      	beq.n	800a7ae <__ieee754_sqrt+0x146>
 800a6c4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a6c8:	07d5      	lsls	r5, r2, #31
 800a6ca:	f04f 0500 	mov.w	r5, #0
 800a6ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a6d2:	bf48      	it	mi
 800a6d4:	0fd9      	lsrmi	r1, r3, #31
 800a6d6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a6da:	bf44      	itt	mi
 800a6dc:	005b      	lslmi	r3, r3, #1
 800a6de:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800a6e2:	1051      	asrs	r1, r2, #1
 800a6e4:	0fda      	lsrs	r2, r3, #31
 800a6e6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	2216      	movs	r2, #22
 800a6ee:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	1987      	adds	r7, r0, r6
 800a6f6:	42a7      	cmp	r7, r4
 800a6f8:	bfde      	ittt	le
 800a6fa:	19b8      	addle	r0, r7, r6
 800a6fc:	1be4      	suble	r4, r4, r7
 800a6fe:	19ad      	addle	r5, r5, r6
 800a700:	0fdf      	lsrs	r7, r3, #31
 800a702:	3a01      	subs	r2, #1
 800a704:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800a708:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a70c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a710:	d1f0      	bne.n	800a6f4 <__ieee754_sqrt+0x8c>
 800a712:	f04f 0c20 	mov.w	ip, #32
 800a716:	4696      	mov	lr, r2
 800a718:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a71c:	4284      	cmp	r4, r0
 800a71e:	eb06 070e 	add.w	r7, r6, lr
 800a722:	dc02      	bgt.n	800a72a <__ieee754_sqrt+0xc2>
 800a724:	d112      	bne.n	800a74c <__ieee754_sqrt+0xe4>
 800a726:	429f      	cmp	r7, r3
 800a728:	d810      	bhi.n	800a74c <__ieee754_sqrt+0xe4>
 800a72a:	2f00      	cmp	r7, #0
 800a72c:	eb07 0e06 	add.w	lr, r7, r6
 800a730:	da42      	bge.n	800a7b8 <__ieee754_sqrt+0x150>
 800a732:	f1be 0f00 	cmp.w	lr, #0
 800a736:	db3f      	blt.n	800a7b8 <__ieee754_sqrt+0x150>
 800a738:	f100 0801 	add.w	r8, r0, #1
 800a73c:	1a24      	subs	r4, r4, r0
 800a73e:	4640      	mov	r0, r8
 800a740:	429f      	cmp	r7, r3
 800a742:	bf88      	it	hi
 800a744:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800a748:	1bdb      	subs	r3, r3, r7
 800a74a:	4432      	add	r2, r6
 800a74c:	0064      	lsls	r4, r4, #1
 800a74e:	f1bc 0c01 	subs.w	ip, ip, #1
 800a752:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800a756:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a75a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a75e:	d1dd      	bne.n	800a71c <__ieee754_sqrt+0xb4>
 800a760:	4323      	orrs	r3, r4
 800a762:	d006      	beq.n	800a772 <__ieee754_sqrt+0x10a>
 800a764:	1c54      	adds	r4, r2, #1
 800a766:	bf0b      	itete	eq
 800a768:	4662      	moveq	r2, ip
 800a76a:	3201      	addne	r2, #1
 800a76c:	3501      	addeq	r5, #1
 800a76e:	f022 0201 	bicne.w	r2, r2, #1
 800a772:	106b      	asrs	r3, r5, #1
 800a774:	0852      	lsrs	r2, r2, #1
 800a776:	07e8      	lsls	r0, r5, #31
 800a778:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a77c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a780:	bf48      	it	mi
 800a782:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a786:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800a78a:	4616      	mov	r6, r2
 800a78c:	e781      	b.n	800a692 <__ieee754_sqrt+0x2a>
 800a78e:	0adc      	lsrs	r4, r3, #11
 800a790:	3915      	subs	r1, #21
 800a792:	055b      	lsls	r3, r3, #21
 800a794:	2c00      	cmp	r4, #0
 800a796:	d0fa      	beq.n	800a78e <__ieee754_sqrt+0x126>
 800a798:	02e6      	lsls	r6, r4, #11
 800a79a:	d50a      	bpl.n	800a7b2 <__ieee754_sqrt+0x14a>
 800a79c:	f1c2 0020 	rsb	r0, r2, #32
 800a7a0:	fa23 f000 	lsr.w	r0, r3, r0
 800a7a4:	1e55      	subs	r5, r2, #1
 800a7a6:	4093      	lsls	r3, r2
 800a7a8:	4304      	orrs	r4, r0
 800a7aa:	1b4a      	subs	r2, r1, r5
 800a7ac:	e78a      	b.n	800a6c4 <__ieee754_sqrt+0x5c>
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	e7f0      	b.n	800a794 <__ieee754_sqrt+0x12c>
 800a7b2:	0064      	lsls	r4, r4, #1
 800a7b4:	3201      	adds	r2, #1
 800a7b6:	e7ef      	b.n	800a798 <__ieee754_sqrt+0x130>
 800a7b8:	4680      	mov	r8, r0
 800a7ba:	e7bf      	b.n	800a73c <__ieee754_sqrt+0xd4>
 800a7bc:	7ff00000 	.word	0x7ff00000

0800a7c0 <__ieee754_rem_pio2f>:
 800a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	4a9d      	ldr	r2, [pc, #628]	; (800aa3c <__ieee754_rem_pio2f+0x27c>)
 800a7c6:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800a7ca:	4295      	cmp	r5, r2
 800a7cc:	b087      	sub	sp, #28
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	dc04      	bgt.n	800a7de <__ieee754_rem_pio2f+0x1e>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	6020      	str	r0, [r4, #0]
 800a7d8:	604b      	str	r3, [r1, #4]
 800a7da:	2600      	movs	r6, #0
 800a7dc:	e01a      	b.n	800a814 <__ieee754_rem_pio2f+0x54>
 800a7de:	4a98      	ldr	r2, [pc, #608]	; (800aa40 <__ieee754_rem_pio2f+0x280>)
 800a7e0:	4295      	cmp	r5, r2
 800a7e2:	dc4b      	bgt.n	800a87c <__ieee754_rem_pio2f+0xbc>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f025 050f 	bic.w	r5, r5, #15
 800a7ea:	4996      	ldr	r1, [pc, #600]	; (800aa44 <__ieee754_rem_pio2f+0x284>)
 800a7ec:	4e96      	ldr	r6, [pc, #600]	; (800aa48 <__ieee754_rem_pio2f+0x288>)
 800a7ee:	dd23      	ble.n	800a838 <__ieee754_rem_pio2f+0x78>
 800a7f0:	f7f6 f99e 	bl	8000b30 <__aeabi_fsub>
 800a7f4:	42b5      	cmp	r5, r6
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	d010      	beq.n	800a81c <__ieee754_rem_pio2f+0x5c>
 800a7fa:	4994      	ldr	r1, [pc, #592]	; (800aa4c <__ieee754_rem_pio2f+0x28c>)
 800a7fc:	f7f6 f998 	bl	8000b30 <__aeabi_fsub>
 800a800:	4601      	mov	r1, r0
 800a802:	6020      	str	r0, [r4, #0]
 800a804:	4638      	mov	r0, r7
 800a806:	f7f6 f993 	bl	8000b30 <__aeabi_fsub>
 800a80a:	4990      	ldr	r1, [pc, #576]	; (800aa4c <__ieee754_rem_pio2f+0x28c>)
 800a80c:	f7f6 f990 	bl	8000b30 <__aeabi_fsub>
 800a810:	2601      	movs	r6, #1
 800a812:	6060      	str	r0, [r4, #4]
 800a814:	4630      	mov	r0, r6
 800a816:	b007      	add	sp, #28
 800a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81c:	498c      	ldr	r1, [pc, #560]	; (800aa50 <__ieee754_rem_pio2f+0x290>)
 800a81e:	f7f6 f987 	bl	8000b30 <__aeabi_fsub>
 800a822:	498c      	ldr	r1, [pc, #560]	; (800aa54 <__ieee754_rem_pio2f+0x294>)
 800a824:	4605      	mov	r5, r0
 800a826:	f7f6 f983 	bl	8000b30 <__aeabi_fsub>
 800a82a:	4601      	mov	r1, r0
 800a82c:	6020      	str	r0, [r4, #0]
 800a82e:	4628      	mov	r0, r5
 800a830:	f7f6 f97e 	bl	8000b30 <__aeabi_fsub>
 800a834:	4987      	ldr	r1, [pc, #540]	; (800aa54 <__ieee754_rem_pio2f+0x294>)
 800a836:	e7e9      	b.n	800a80c <__ieee754_rem_pio2f+0x4c>
 800a838:	f7f6 f97c 	bl	8000b34 <__addsf3>
 800a83c:	42b5      	cmp	r5, r6
 800a83e:	4607      	mov	r7, r0
 800a840:	d00e      	beq.n	800a860 <__ieee754_rem_pio2f+0xa0>
 800a842:	4982      	ldr	r1, [pc, #520]	; (800aa4c <__ieee754_rem_pio2f+0x28c>)
 800a844:	f7f6 f976 	bl	8000b34 <__addsf3>
 800a848:	4601      	mov	r1, r0
 800a84a:	6020      	str	r0, [r4, #0]
 800a84c:	4638      	mov	r0, r7
 800a84e:	f7f6 f96f 	bl	8000b30 <__aeabi_fsub>
 800a852:	497e      	ldr	r1, [pc, #504]	; (800aa4c <__ieee754_rem_pio2f+0x28c>)
 800a854:	f7f6 f96e 	bl	8000b34 <__addsf3>
 800a858:	f04f 36ff 	mov.w	r6, #4294967295
 800a85c:	6060      	str	r0, [r4, #4]
 800a85e:	e7d9      	b.n	800a814 <__ieee754_rem_pio2f+0x54>
 800a860:	497b      	ldr	r1, [pc, #492]	; (800aa50 <__ieee754_rem_pio2f+0x290>)
 800a862:	f7f6 f967 	bl	8000b34 <__addsf3>
 800a866:	497b      	ldr	r1, [pc, #492]	; (800aa54 <__ieee754_rem_pio2f+0x294>)
 800a868:	4605      	mov	r5, r0
 800a86a:	f7f6 f963 	bl	8000b34 <__addsf3>
 800a86e:	4601      	mov	r1, r0
 800a870:	6020      	str	r0, [r4, #0]
 800a872:	4628      	mov	r0, r5
 800a874:	f7f6 f95c 	bl	8000b30 <__aeabi_fsub>
 800a878:	4976      	ldr	r1, [pc, #472]	; (800aa54 <__ieee754_rem_pio2f+0x294>)
 800a87a:	e7eb      	b.n	800a854 <__ieee754_rem_pio2f+0x94>
 800a87c:	4a76      	ldr	r2, [pc, #472]	; (800aa58 <__ieee754_rem_pio2f+0x298>)
 800a87e:	4295      	cmp	r5, r2
 800a880:	f300 808c 	bgt.w	800a99c <__ieee754_rem_pio2f+0x1dc>
 800a884:	f001 fb7a 	bl	800bf7c <fabsf>
 800a888:	4974      	ldr	r1, [pc, #464]	; (800aa5c <__ieee754_rem_pio2f+0x29c>)
 800a88a:	4680      	mov	r8, r0
 800a88c:	f7f6 fa5a 	bl	8000d44 <__aeabi_fmul>
 800a890:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a894:	f7f6 f94e 	bl	8000b34 <__addsf3>
 800a898:	f7f6 fc30 	bl	80010fc <__aeabi_f2iz>
 800a89c:	4606      	mov	r6, r0
 800a89e:	f7f6 f9fd 	bl	8000c9c <__aeabi_i2f>
 800a8a2:	4968      	ldr	r1, [pc, #416]	; (800aa44 <__ieee754_rem_pio2f+0x284>)
 800a8a4:	4682      	mov	sl, r0
 800a8a6:	f7f6 fa4d 	bl	8000d44 <__aeabi_fmul>
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	4640      	mov	r0, r8
 800a8ae:	f7f6 f93f 	bl	8000b30 <__aeabi_fsub>
 800a8b2:	4966      	ldr	r1, [pc, #408]	; (800aa4c <__ieee754_rem_pio2f+0x28c>)
 800a8b4:	4680      	mov	r8, r0
 800a8b6:	4650      	mov	r0, sl
 800a8b8:	f7f6 fa44 	bl	8000d44 <__aeabi_fmul>
 800a8bc:	2e1f      	cmp	r6, #31
 800a8be:	4681      	mov	r9, r0
 800a8c0:	dc0c      	bgt.n	800a8dc <__ieee754_rem_pio2f+0x11c>
 800a8c2:	4a67      	ldr	r2, [pc, #412]	; (800aa60 <__ieee754_rem_pio2f+0x2a0>)
 800a8c4:	1e71      	subs	r1, r6, #1
 800a8c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a8ca:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d004      	beq.n	800a8dc <__ieee754_rem_pio2f+0x11c>
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	f7f6 f92b 	bl	8000b30 <__aeabi_fsub>
 800a8da:	e009      	b.n	800a8f0 <__ieee754_rem_pio2f+0x130>
 800a8dc:	4649      	mov	r1, r9
 800a8de:	4640      	mov	r0, r8
 800a8e0:	f7f6 f926 	bl	8000b30 <__aeabi_fsub>
 800a8e4:	15ed      	asrs	r5, r5, #23
 800a8e6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a8ea:	1aeb      	subs	r3, r5, r3
 800a8ec:	2b08      	cmp	r3, #8
 800a8ee:	dc01      	bgt.n	800a8f4 <__ieee754_rem_pio2f+0x134>
 800a8f0:	6020      	str	r0, [r4, #0]
 800a8f2:	e024      	b.n	800a93e <__ieee754_rem_pio2f+0x17e>
 800a8f4:	4956      	ldr	r1, [pc, #344]	; (800aa50 <__ieee754_rem_pio2f+0x290>)
 800a8f6:	4650      	mov	r0, sl
 800a8f8:	f7f6 fa24 	bl	8000d44 <__aeabi_fmul>
 800a8fc:	4681      	mov	r9, r0
 800a8fe:	4601      	mov	r1, r0
 800a900:	4640      	mov	r0, r8
 800a902:	f7f6 f915 	bl	8000b30 <__aeabi_fsub>
 800a906:	4601      	mov	r1, r0
 800a908:	4683      	mov	fp, r0
 800a90a:	4640      	mov	r0, r8
 800a90c:	f7f6 f910 	bl	8000b30 <__aeabi_fsub>
 800a910:	4649      	mov	r1, r9
 800a912:	f7f6 f90d 	bl	8000b30 <__aeabi_fsub>
 800a916:	4680      	mov	r8, r0
 800a918:	494e      	ldr	r1, [pc, #312]	; (800aa54 <__ieee754_rem_pio2f+0x294>)
 800a91a:	4650      	mov	r0, sl
 800a91c:	f7f6 fa12 	bl	8000d44 <__aeabi_fmul>
 800a920:	4641      	mov	r1, r8
 800a922:	f7f6 f905 	bl	8000b30 <__aeabi_fsub>
 800a926:	4601      	mov	r1, r0
 800a928:	4681      	mov	r9, r0
 800a92a:	4658      	mov	r0, fp
 800a92c:	f7f6 f900 	bl	8000b30 <__aeabi_fsub>
 800a930:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a934:	1aed      	subs	r5, r5, r3
 800a936:	2d19      	cmp	r5, #25
 800a938:	dc15      	bgt.n	800a966 <__ieee754_rem_pio2f+0x1a6>
 800a93a:	46d8      	mov	r8, fp
 800a93c:	6020      	str	r0, [r4, #0]
 800a93e:	6825      	ldr	r5, [r4, #0]
 800a940:	4640      	mov	r0, r8
 800a942:	4629      	mov	r1, r5
 800a944:	f7f6 f8f4 	bl	8000b30 <__aeabi_fsub>
 800a948:	4649      	mov	r1, r9
 800a94a:	f7f6 f8f1 	bl	8000b30 <__aeabi_fsub>
 800a94e:	2f00      	cmp	r7, #0
 800a950:	6060      	str	r0, [r4, #4]
 800a952:	f6bf af5f 	bge.w	800a814 <__ieee754_rem_pio2f+0x54>
 800a956:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800a95a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a95e:	6025      	str	r5, [r4, #0]
 800a960:	6060      	str	r0, [r4, #4]
 800a962:	4276      	negs	r6, r6
 800a964:	e756      	b.n	800a814 <__ieee754_rem_pio2f+0x54>
 800a966:	493f      	ldr	r1, [pc, #252]	; (800aa64 <__ieee754_rem_pio2f+0x2a4>)
 800a968:	4650      	mov	r0, sl
 800a96a:	f7f6 f9eb 	bl	8000d44 <__aeabi_fmul>
 800a96e:	4605      	mov	r5, r0
 800a970:	4601      	mov	r1, r0
 800a972:	4658      	mov	r0, fp
 800a974:	f7f6 f8dc 	bl	8000b30 <__aeabi_fsub>
 800a978:	4601      	mov	r1, r0
 800a97a:	4680      	mov	r8, r0
 800a97c:	4658      	mov	r0, fp
 800a97e:	f7f6 f8d7 	bl	8000b30 <__aeabi_fsub>
 800a982:	4629      	mov	r1, r5
 800a984:	f7f6 f8d4 	bl	8000b30 <__aeabi_fsub>
 800a988:	4605      	mov	r5, r0
 800a98a:	4937      	ldr	r1, [pc, #220]	; (800aa68 <__ieee754_rem_pio2f+0x2a8>)
 800a98c:	4650      	mov	r0, sl
 800a98e:	f7f6 f9d9 	bl	8000d44 <__aeabi_fmul>
 800a992:	4629      	mov	r1, r5
 800a994:	f7f6 f8cc 	bl	8000b30 <__aeabi_fsub>
 800a998:	4681      	mov	r9, r0
 800a99a:	e79a      	b.n	800a8d2 <__ieee754_rem_pio2f+0x112>
 800a99c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a9a0:	db05      	blt.n	800a9ae <__ieee754_rem_pio2f+0x1ee>
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	f7f6 f8c4 	bl	8000b30 <__aeabi_fsub>
 800a9a8:	6060      	str	r0, [r4, #4]
 800a9aa:	6020      	str	r0, [r4, #0]
 800a9ac:	e715      	b.n	800a7da <__ieee754_rem_pio2f+0x1a>
 800a9ae:	15ee      	asrs	r6, r5, #23
 800a9b0:	3e86      	subs	r6, #134	; 0x86
 800a9b2:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f7f6 fba0 	bl	80010fc <__aeabi_f2iz>
 800a9bc:	f7f6 f96e 	bl	8000c9c <__aeabi_i2f>
 800a9c0:	4601      	mov	r1, r0
 800a9c2:	9003      	str	r0, [sp, #12]
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f7f6 f8b3 	bl	8000b30 <__aeabi_fsub>
 800a9ca:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a9ce:	f7f6 f9b9 	bl	8000d44 <__aeabi_fmul>
 800a9d2:	4680      	mov	r8, r0
 800a9d4:	f7f6 fb92 	bl	80010fc <__aeabi_f2iz>
 800a9d8:	f7f6 f960 	bl	8000c9c <__aeabi_i2f>
 800a9dc:	4601      	mov	r1, r0
 800a9de:	9004      	str	r0, [sp, #16]
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	f7f6 f8a4 	bl	8000b30 <__aeabi_fsub>
 800a9e8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a9ec:	f7f6 f9aa 	bl	8000d44 <__aeabi_fmul>
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	9005      	str	r0, [sp, #20]
 800a9f4:	f7f6 fb3a 	bl	800106c <__aeabi_fcmpeq>
 800a9f8:	b1e8      	cbz	r0, 800aa36 <__ieee754_rem_pio2f+0x276>
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	f7f6 fb35 	bl	800106c <__aeabi_fcmpeq>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	bf14      	ite	ne
 800aa06:	2301      	movne	r3, #1
 800aa08:	2302      	moveq	r3, #2
 800aa0a:	4a18      	ldr	r2, [pc, #96]	; (800aa6c <__ieee754_rem_pio2f+0x2ac>)
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	9201      	str	r2, [sp, #4]
 800aa10:	2202      	movs	r2, #2
 800aa12:	a803      	add	r0, sp, #12
 800aa14:	9200      	str	r2, [sp, #0]
 800aa16:	4632      	mov	r2, r6
 800aa18:	f000 fe0a 	bl	800b630 <__kernel_rem_pio2f>
 800aa1c:	2f00      	cmp	r7, #0
 800aa1e:	4606      	mov	r6, r0
 800aa20:	f6bf aef8 	bge.w	800a814 <__ieee754_rem_pio2f+0x54>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	6863      	ldr	r3, [r4, #4]
 800aa2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa32:	6063      	str	r3, [r4, #4]
 800aa34:	e795      	b.n	800a962 <__ieee754_rem_pio2f+0x1a2>
 800aa36:	2303      	movs	r3, #3
 800aa38:	e7e7      	b.n	800aa0a <__ieee754_rem_pio2f+0x24a>
 800aa3a:	bf00      	nop
 800aa3c:	3f490fd8 	.word	0x3f490fd8
 800aa40:	4016cbe3 	.word	0x4016cbe3
 800aa44:	3fc90f80 	.word	0x3fc90f80
 800aa48:	3fc90fd0 	.word	0x3fc90fd0
 800aa4c:	37354443 	.word	0x37354443
 800aa50:	37354400 	.word	0x37354400
 800aa54:	2e85a308 	.word	0x2e85a308
 800aa58:	43490f80 	.word	0x43490f80
 800aa5c:	3f22f984 	.word	0x3f22f984
 800aa60:	0800dd30 	.word	0x0800dd30
 800aa64:	2e85a300 	.word	0x2e85a300
 800aa68:	248d3132 	.word	0x248d3132
 800aa6c:	0800ddb0 	.word	0x0800ddb0

0800aa70 <__ieee754_sqrtf>:
 800aa70:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800aa74:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	d309      	bcc.n	800aa94 <__ieee754_sqrtf+0x24>
 800aa80:	4601      	mov	r1, r0
 800aa82:	f7f6 f95f 	bl	8000d44 <__aeabi_fmul>
 800aa86:	4601      	mov	r1, r0
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f7f6 f853 	bl	8000b34 <__addsf3>
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4620      	mov	r0, r4
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	2a00      	cmp	r2, #0
 800aa96:	d0fb      	beq.n	800aa90 <__ieee754_sqrtf+0x20>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	da06      	bge.n	800aaaa <__ieee754_sqrtf+0x3a>
 800aa9c:	4601      	mov	r1, r0
 800aa9e:	f7f6 f847 	bl	8000b30 <__aeabi_fsub>
 800aaa2:	4601      	mov	r1, r0
 800aaa4:	f7f6 fa02 	bl	8000eac <__aeabi_fdiv>
 800aaa8:	e7f1      	b.n	800aa8e <__ieee754_sqrtf+0x1e>
 800aaaa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800aaae:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800aab2:	d32e      	bcc.n	800ab12 <__ieee754_sqrtf+0xa2>
 800aab4:	3c7f      	subs	r4, #127	; 0x7f
 800aab6:	07e2      	lsls	r2, r4, #31
 800aab8:	f04f 0200 	mov.w	r2, #0
 800aabc:	ea4f 0164 	mov.w	r1, r4, asr #1
 800aac0:	4616      	mov	r6, r2
 800aac2:	f04f 0419 	mov.w	r4, #25
 800aac6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800aaca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aace:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aad2:	bf48      	it	mi
 800aad4:	005b      	lslmi	r3, r3, #1
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	1835      	adds	r5, r6, r0
 800aada:	429d      	cmp	r5, r3
 800aadc:	bfde      	ittt	le
 800aade:	182e      	addle	r6, r5, r0
 800aae0:	1b5b      	suble	r3, r3, r5
 800aae2:	1812      	addle	r2, r2, r0
 800aae4:	3c01      	subs	r4, #1
 800aae6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aaea:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800aaee:	d1f3      	bne.n	800aad8 <__ieee754_sqrtf+0x68>
 800aaf0:	b113      	cbz	r3, 800aaf8 <__ieee754_sqrtf+0x88>
 800aaf2:	3201      	adds	r2, #1
 800aaf4:	f022 0201 	bic.w	r2, r2, #1
 800aaf8:	1054      	asrs	r4, r2, #1
 800aafa:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800aafe:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800ab02:	e7c5      	b.n	800aa90 <__ieee754_sqrtf+0x20>
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	3201      	adds	r2, #1
 800ab08:	0219      	lsls	r1, r3, #8
 800ab0a:	d5fb      	bpl.n	800ab04 <__ieee754_sqrtf+0x94>
 800ab0c:	3a01      	subs	r2, #1
 800ab0e:	1aa4      	subs	r4, r4, r2
 800ab10:	e7d0      	b.n	800aab4 <__ieee754_sqrtf+0x44>
 800ab12:	2200      	movs	r2, #0
 800ab14:	e7f8      	b.n	800ab08 <__ieee754_sqrtf+0x98>
	...

0800ab18 <__kernel_rem_pio2>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ab20:	9307      	str	r3, [sp, #28]
 800ab22:	9104      	str	r1, [sp, #16]
 800ab24:	4bbf      	ldr	r3, [pc, #764]	; (800ae24 <__kernel_rem_pio2+0x30c>)
 800ab26:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ab28:	1ed4      	subs	r4, r2, #3
 800ab2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab2e:	2500      	movs	r5, #0
 800ab30:	9302      	str	r3, [sp, #8]
 800ab32:	9b07      	ldr	r3, [sp, #28]
 800ab34:	9008      	str	r0, [sp, #32]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	9306      	str	r3, [sp, #24]
 800ab3a:	2318      	movs	r3, #24
 800ab3c:	fb94 f4f3 	sdiv	r4, r4, r3
 800ab40:	f06f 0317 	mvn.w	r3, #23
 800ab44:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ab48:	fb04 3303 	mla	r3, r4, r3, r3
 800ab4c:	eb03 0a02 	add.w	sl, r3, r2
 800ab50:	9a06      	ldr	r2, [sp, #24]
 800ab52:	9b02      	ldr	r3, [sp, #8]
 800ab54:	1aa7      	subs	r7, r4, r2
 800ab56:	eb03 0802 	add.w	r8, r3, r2
 800ab5a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ab62:	2300      	movs	r3, #0
 800ab64:	ae1e      	add	r6, sp, #120	; 0x78
 800ab66:	4545      	cmp	r5, r8
 800ab68:	dd14      	ble.n	800ab94 <__kernel_rem_pio2+0x7c>
 800ab6a:	2600      	movs	r6, #0
 800ab6c:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800ab70:	9b02      	ldr	r3, [sp, #8]
 800ab72:	429e      	cmp	r6, r3
 800ab74:	dc39      	bgt.n	800abea <__kernel_rem_pio2+0xd2>
 800ab76:	9b08      	ldr	r3, [sp, #32]
 800ab78:	f04f 0800 	mov.w	r8, #0
 800ab7c:	3b08      	subs	r3, #8
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	9b07      	ldr	r3, [sp, #28]
 800ab82:	f04f 0900 	mov.w	r9, #0
 800ab86:	199d      	adds	r5, r3, r6
 800ab88:	ab20      	add	r3, sp, #128	; 0x80
 800ab8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ab8e:	9305      	str	r3, [sp, #20]
 800ab90:	2700      	movs	r7, #0
 800ab92:	e023      	b.n	800abdc <__kernel_rem_pio2+0xc4>
 800ab94:	42ef      	cmn	r7, r5
 800ab96:	d40b      	bmi.n	800abb0 <__kernel_rem_pio2+0x98>
 800ab98:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ab9c:	e9cd 2300 	strd	r2, r3, [sp]
 800aba0:	f7f5 fc30 	bl	8000404 <__aeabi_i2d>
 800aba4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aba8:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800abac:	3501      	adds	r5, #1
 800abae:	e7da      	b.n	800ab66 <__kernel_rem_pio2+0x4e>
 800abb0:	4610      	mov	r0, r2
 800abb2:	4619      	mov	r1, r3
 800abb4:	e7f8      	b.n	800aba8 <__kernel_rem_pio2+0x90>
 800abb6:	9905      	ldr	r1, [sp, #20]
 800abb8:	9d00      	ldr	r5, [sp, #0]
 800abba:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800abbe:	9105      	str	r1, [sp, #20]
 800abc0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800abc4:	9500      	str	r5, [sp, #0]
 800abc6:	f7f5 fc87 	bl	80004d8 <__aeabi_dmul>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	4640      	mov	r0, r8
 800abd0:	4649      	mov	r1, r9
 800abd2:	f7f5 facb 	bl	800016c <__adddf3>
 800abd6:	4680      	mov	r8, r0
 800abd8:	4689      	mov	r9, r1
 800abda:	3701      	adds	r7, #1
 800abdc:	9b06      	ldr	r3, [sp, #24]
 800abde:	429f      	cmp	r7, r3
 800abe0:	dde9      	ble.n	800abb6 <__kernel_rem_pio2+0x9e>
 800abe2:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800abe6:	3601      	adds	r6, #1
 800abe8:	e7c2      	b.n	800ab70 <__kernel_rem_pio2+0x58>
 800abea:	9b02      	ldr	r3, [sp, #8]
 800abec:	aa0c      	add	r2, sp, #48	; 0x30
 800abee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abf2:	930b      	str	r3, [sp, #44]	; 0x2c
 800abf4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800abf6:	9f02      	ldr	r7, [sp, #8]
 800abf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800abfc:	930a      	str	r3, [sp, #40]	; 0x28
 800abfe:	2600      	movs	r6, #0
 800ac00:	ab98      	add	r3, sp, #608	; 0x260
 800ac02:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800ac06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac0e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ac12:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ac16:	ab98      	add	r3, sp, #608	; 0x260
 800ac18:	445b      	add	r3, fp
 800ac1a:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800ac1e:	1bbb      	subs	r3, r7, r6
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dc71      	bgt.n	800ad08 <__kernel_rem_pio2+0x1f0>
 800ac24:	4652      	mov	r2, sl
 800ac26:	4640      	mov	r0, r8
 800ac28:	4649      	mov	r1, r9
 800ac2a:	f001 f939 	bl	800bea0 <scalbn>
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ac34:	4604      	mov	r4, r0
 800ac36:	460d      	mov	r5, r1
 800ac38:	f7f5 fc4e 	bl	80004d8 <__aeabi_dmul>
 800ac3c:	f001 f818 	bl	800bc70 <floor>
 800ac40:	2200      	movs	r2, #0
 800ac42:	4b79      	ldr	r3, [pc, #484]	; (800ae28 <__kernel_rem_pio2+0x310>)
 800ac44:	f7f5 fc48 	bl	80004d8 <__aeabi_dmul>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7f5 fa8a 	bl	8000168 <__aeabi_dsub>
 800ac54:	460d      	mov	r5, r1
 800ac56:	4604      	mov	r4, r0
 800ac58:	f7f5 feee 	bl	8000a38 <__aeabi_d2iz>
 800ac5c:	9005      	str	r0, [sp, #20]
 800ac5e:	f7f5 fbd1 	bl	8000404 <__aeabi_i2d>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4620      	mov	r0, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	f7f5 fa7d 	bl	8000168 <__aeabi_dsub>
 800ac6e:	f1ba 0f00 	cmp.w	sl, #0
 800ac72:	4680      	mov	r8, r0
 800ac74:	4689      	mov	r9, r1
 800ac76:	dd6c      	ble.n	800ad52 <__kernel_rem_pio2+0x23a>
 800ac78:	1e7a      	subs	r2, r7, #1
 800ac7a:	ab0c      	add	r3, sp, #48	; 0x30
 800ac7c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ac80:	f1ca 0118 	rsb	r1, sl, #24
 800ac84:	9c05      	ldr	r4, [sp, #20]
 800ac86:	fa40 f301 	asr.w	r3, r0, r1
 800ac8a:	441c      	add	r4, r3
 800ac8c:	408b      	lsls	r3, r1
 800ac8e:	1ac0      	subs	r0, r0, r3
 800ac90:	ab0c      	add	r3, sp, #48	; 0x30
 800ac92:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ac96:	f1ca 0317 	rsb	r3, sl, #23
 800ac9a:	9405      	str	r4, [sp, #20]
 800ac9c:	fa40 f303 	asr.w	r3, r0, r3
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	9b00      	ldr	r3, [sp, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	dd62      	ble.n	800ad6e <__kernel_rem_pio2+0x256>
 800aca8:	2200      	movs	r2, #0
 800acaa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800acae:	4614      	mov	r4, r2
 800acb0:	9b05      	ldr	r3, [sp, #20]
 800acb2:	3301      	adds	r3, #1
 800acb4:	9305      	str	r3, [sp, #20]
 800acb6:	4297      	cmp	r7, r2
 800acb8:	f300 809f 	bgt.w	800adfa <__kernel_rem_pio2+0x2e2>
 800acbc:	f1ba 0f00 	cmp.w	sl, #0
 800acc0:	dd07      	ble.n	800acd2 <__kernel_rem_pio2+0x1ba>
 800acc2:	f1ba 0f01 	cmp.w	sl, #1
 800acc6:	f000 80bb 	beq.w	800ae40 <__kernel_rem_pio2+0x328>
 800acca:	f1ba 0f02 	cmp.w	sl, #2
 800acce:	f000 80c1 	beq.w	800ae54 <__kernel_rem_pio2+0x33c>
 800acd2:	9b00      	ldr	r3, [sp, #0]
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d14a      	bne.n	800ad6e <__kernel_rem_pio2+0x256>
 800acd8:	4642      	mov	r2, r8
 800acda:	464b      	mov	r3, r9
 800acdc:	2000      	movs	r0, #0
 800acde:	4953      	ldr	r1, [pc, #332]	; (800ae2c <__kernel_rem_pio2+0x314>)
 800ace0:	f7f5 fa42 	bl	8000168 <__aeabi_dsub>
 800ace4:	4680      	mov	r8, r0
 800ace6:	4689      	mov	r9, r1
 800ace8:	2c00      	cmp	r4, #0
 800acea:	d040      	beq.n	800ad6e <__kernel_rem_pio2+0x256>
 800acec:	4652      	mov	r2, sl
 800acee:	2000      	movs	r0, #0
 800acf0:	494e      	ldr	r1, [pc, #312]	; (800ae2c <__kernel_rem_pio2+0x314>)
 800acf2:	f001 f8d5 	bl	800bea0 <scalbn>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	4640      	mov	r0, r8
 800acfc:	4649      	mov	r1, r9
 800acfe:	f7f5 fa33 	bl	8000168 <__aeabi_dsub>
 800ad02:	4680      	mov	r8, r0
 800ad04:	4689      	mov	r9, r1
 800ad06:	e032      	b.n	800ad6e <__kernel_rem_pio2+0x256>
 800ad08:	2200      	movs	r2, #0
 800ad0a:	4b49      	ldr	r3, [pc, #292]	; (800ae30 <__kernel_rem_pio2+0x318>)
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	4649      	mov	r1, r9
 800ad10:	f7f5 fbe2 	bl	80004d8 <__aeabi_dmul>
 800ad14:	f7f5 fe90 	bl	8000a38 <__aeabi_d2iz>
 800ad18:	f7f5 fb74 	bl	8000404 <__aeabi_i2d>
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	4b45      	ldr	r3, [pc, #276]	; (800ae34 <__kernel_rem_pio2+0x31c>)
 800ad20:	e9cd 0100 	strd	r0, r1, [sp]
 800ad24:	f7f5 fbd8 	bl	80004d8 <__aeabi_dmul>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	4649      	mov	r1, r9
 800ad30:	f7f5 fa1a 	bl	8000168 <__aeabi_dsub>
 800ad34:	f7f5 fe80 	bl	8000a38 <__aeabi_d2iz>
 800ad38:	ab0c      	add	r3, sp, #48	; 0x30
 800ad3a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800ad3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad46:	f7f5 fa11 	bl	800016c <__adddf3>
 800ad4a:	3601      	adds	r6, #1
 800ad4c:	4680      	mov	r8, r0
 800ad4e:	4689      	mov	r9, r1
 800ad50:	e765      	b.n	800ac1e <__kernel_rem_pio2+0x106>
 800ad52:	d105      	bne.n	800ad60 <__kernel_rem_pio2+0x248>
 800ad54:	1e7b      	subs	r3, r7, #1
 800ad56:	aa0c      	add	r2, sp, #48	; 0x30
 800ad58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ad5c:	15c3      	asrs	r3, r0, #23
 800ad5e:	e79f      	b.n	800aca0 <__kernel_rem_pio2+0x188>
 800ad60:	2200      	movs	r2, #0
 800ad62:	4b35      	ldr	r3, [pc, #212]	; (800ae38 <__kernel_rem_pio2+0x320>)
 800ad64:	f7f5 fe3e 	bl	80009e4 <__aeabi_dcmpge>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d143      	bne.n	800adf4 <__kernel_rem_pio2+0x2dc>
 800ad6c:	9000      	str	r0, [sp, #0]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2300      	movs	r3, #0
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fe17 	bl	80009a8 <__aeabi_dcmpeq>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f000 80c3 	beq.w	800af06 <__kernel_rem_pio2+0x3ee>
 800ad80:	1e7c      	subs	r4, r7, #1
 800ad82:	4623      	mov	r3, r4
 800ad84:	2200      	movs	r2, #0
 800ad86:	9902      	ldr	r1, [sp, #8]
 800ad88:	428b      	cmp	r3, r1
 800ad8a:	da6a      	bge.n	800ae62 <__kernel_rem_pio2+0x34a>
 800ad8c:	2a00      	cmp	r2, #0
 800ad8e:	f000 8084 	beq.w	800ae9a <__kernel_rem_pio2+0x382>
 800ad92:	ab0c      	add	r3, sp, #48	; 0x30
 800ad94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ad98:	f1aa 0a18 	sub.w	sl, sl, #24
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 80b0 	beq.w	800af02 <__kernel_rem_pio2+0x3ea>
 800ada2:	4652      	mov	r2, sl
 800ada4:	2000      	movs	r0, #0
 800ada6:	4921      	ldr	r1, [pc, #132]	; (800ae2c <__kernel_rem_pio2+0x314>)
 800ada8:	f001 f87a 	bl	800bea0 <scalbn>
 800adac:	4625      	mov	r5, r4
 800adae:	4606      	mov	r6, r0
 800adb0:	460f      	mov	r7, r1
 800adb2:	f04f 0a00 	mov.w	sl, #0
 800adb6:	00e3      	lsls	r3, r4, #3
 800adb8:	aa98      	add	r2, sp, #608	; 0x260
 800adba:	eb02 0803 	add.w	r8, r2, r3
 800adbe:	f8df b070 	ldr.w	fp, [pc, #112]	; 800ae30 <__kernel_rem_pio2+0x318>
 800adc2:	9306      	str	r3, [sp, #24]
 800adc4:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800adc8:	2d00      	cmp	r5, #0
 800adca:	f280 80d2 	bge.w	800af72 <__kernel_rem_pio2+0x45a>
 800adce:	2500      	movs	r5, #0
 800add0:	9a06      	ldr	r2, [sp, #24]
 800add2:	ab98      	add	r3, sp, #608	; 0x260
 800add4:	189e      	adds	r6, r3, r2
 800add6:	3ea8      	subs	r6, #168	; 0xa8
 800add8:	1b63      	subs	r3, r4, r5
 800adda:	2b00      	cmp	r3, #0
 800addc:	f2c0 80f9 	blt.w	800afd2 <__kernel_rem_pio2+0x4ba>
 800ade0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800ae3c <__kernel_rem_pio2+0x324>
 800ade4:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800ade8:	f04f 0a00 	mov.w	sl, #0
 800adec:	f04f 0b00 	mov.w	fp, #0
 800adf0:	2700      	movs	r7, #0
 800adf2:	e0e2      	b.n	800afba <__kernel_rem_pio2+0x4a2>
 800adf4:	2302      	movs	r3, #2
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	e756      	b.n	800aca8 <__kernel_rem_pio2+0x190>
 800adfa:	ab0c      	add	r3, sp, #48	; 0x30
 800adfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae00:	b94c      	cbnz	r4, 800ae16 <__kernel_rem_pio2+0x2fe>
 800ae02:	b12b      	cbz	r3, 800ae10 <__kernel_rem_pio2+0x2f8>
 800ae04:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ae08:	a80c      	add	r0, sp, #48	; 0x30
 800ae0a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ae0e:	2301      	movs	r3, #1
 800ae10:	3201      	adds	r2, #1
 800ae12:	461c      	mov	r4, r3
 800ae14:	e74f      	b.n	800acb6 <__kernel_rem_pio2+0x19e>
 800ae16:	1acb      	subs	r3, r1, r3
 800ae18:	a80c      	add	r0, sp, #48	; 0x30
 800ae1a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ae1e:	4623      	mov	r3, r4
 800ae20:	e7f6      	b.n	800ae10 <__kernel_rem_pio2+0x2f8>
 800ae22:	bf00      	nop
 800ae24:	0800e108 	.word	0x0800e108
 800ae28:	40200000 	.word	0x40200000
 800ae2c:	3ff00000 	.word	0x3ff00000
 800ae30:	3e700000 	.word	0x3e700000
 800ae34:	41700000 	.word	0x41700000
 800ae38:	3fe00000 	.word	0x3fe00000
 800ae3c:	0800e0c0 	.word	0x0800e0c0
 800ae40:	1e7a      	subs	r2, r7, #1
 800ae42:	ab0c      	add	r3, sp, #48	; 0x30
 800ae44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae48:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ae4c:	a90c      	add	r1, sp, #48	; 0x30
 800ae4e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ae52:	e73e      	b.n	800acd2 <__kernel_rem_pio2+0x1ba>
 800ae54:	1e7a      	subs	r2, r7, #1
 800ae56:	ab0c      	add	r3, sp, #48	; 0x30
 800ae58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ae60:	e7f4      	b.n	800ae4c <__kernel_rem_pio2+0x334>
 800ae62:	a90c      	add	r1, sp, #48	; 0x30
 800ae64:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	e78b      	b.n	800ad86 <__kernel_rem_pio2+0x26e>
 800ae6e:	3401      	adds	r4, #1
 800ae70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae74:	2a00      	cmp	r2, #0
 800ae76:	d0fa      	beq.n	800ae6e <__kernel_rem_pio2+0x356>
 800ae78:	ab98      	add	r3, sp, #608	; 0x260
 800ae7a:	449b      	add	fp, r3
 800ae7c:	9b07      	ldr	r3, [sp, #28]
 800ae7e:	1c7e      	adds	r6, r7, #1
 800ae80:	19dd      	adds	r5, r3, r7
 800ae82:	ab98      	add	r3, sp, #608	; 0x260
 800ae84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ae88:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800ae8c:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800ae90:	443c      	add	r4, r7
 800ae92:	42b4      	cmp	r4, r6
 800ae94:	da04      	bge.n	800aea0 <__kernel_rem_pio2+0x388>
 800ae96:	4627      	mov	r7, r4
 800ae98:	e6b1      	b.n	800abfe <__kernel_rem_pio2+0xe6>
 800ae9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae9c:	2401      	movs	r4, #1
 800ae9e:	e7e7      	b.n	800ae70 <__kernel_rem_pio2+0x358>
 800aea0:	f105 0308 	add.w	r3, r5, #8
 800aea4:	9309      	str	r3, [sp, #36]	; 0x24
 800aea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea8:	2700      	movs	r7, #0
 800aeaa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aeae:	f7f5 faa9 	bl	8000404 <__aeabi_i2d>
 800aeb2:	f04f 0800 	mov.w	r8, #0
 800aeb6:	f04f 0900 	mov.w	r9, #0
 800aeba:	9b08      	ldr	r3, [sp, #32]
 800aebc:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800aec0:	3b08      	subs	r3, #8
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	f105 0310 	add.w	r3, r5, #16
 800aec8:	9305      	str	r3, [sp, #20]
 800aeca:	9b06      	ldr	r3, [sp, #24]
 800aecc:	429f      	cmp	r7, r3
 800aece:	dd04      	ble.n	800aeda <__kernel_rem_pio2+0x3c2>
 800aed0:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800aed4:	3601      	adds	r6, #1
 800aed6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aed8:	e7db      	b.n	800ae92 <__kernel_rem_pio2+0x37a>
 800aeda:	9905      	ldr	r1, [sp, #20]
 800aedc:	9d00      	ldr	r5, [sp, #0]
 800aede:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800aee2:	9105      	str	r1, [sp, #20]
 800aee4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800aee8:	9500      	str	r5, [sp, #0]
 800aeea:	f7f5 faf5 	bl	80004d8 <__aeabi_dmul>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4640      	mov	r0, r8
 800aef4:	4649      	mov	r1, r9
 800aef6:	f7f5 f939 	bl	800016c <__adddf3>
 800aefa:	3701      	adds	r7, #1
 800aefc:	4680      	mov	r8, r0
 800aefe:	4689      	mov	r9, r1
 800af00:	e7e3      	b.n	800aeca <__kernel_rem_pio2+0x3b2>
 800af02:	3c01      	subs	r4, #1
 800af04:	e745      	b.n	800ad92 <__kernel_rem_pio2+0x27a>
 800af06:	f1ca 0200 	rsb	r2, sl, #0
 800af0a:	4640      	mov	r0, r8
 800af0c:	4649      	mov	r1, r9
 800af0e:	f000 ffc7 	bl	800bea0 <scalbn>
 800af12:	2200      	movs	r2, #0
 800af14:	4ba3      	ldr	r3, [pc, #652]	; (800b1a4 <__kernel_rem_pio2+0x68c>)
 800af16:	4604      	mov	r4, r0
 800af18:	460d      	mov	r5, r1
 800af1a:	f7f5 fd63 	bl	80009e4 <__aeabi_dcmpge>
 800af1e:	b1f8      	cbz	r0, 800af60 <__kernel_rem_pio2+0x448>
 800af20:	2200      	movs	r2, #0
 800af22:	4ba1      	ldr	r3, [pc, #644]	; (800b1a8 <__kernel_rem_pio2+0x690>)
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 fad6 	bl	80004d8 <__aeabi_dmul>
 800af2c:	f7f5 fd84 	bl	8000a38 <__aeabi_d2iz>
 800af30:	4606      	mov	r6, r0
 800af32:	f7f5 fa67 	bl	8000404 <__aeabi_i2d>
 800af36:	2200      	movs	r2, #0
 800af38:	4b9a      	ldr	r3, [pc, #616]	; (800b1a4 <__kernel_rem_pio2+0x68c>)
 800af3a:	f7f5 facd 	bl	80004d8 <__aeabi_dmul>
 800af3e:	460b      	mov	r3, r1
 800af40:	4602      	mov	r2, r0
 800af42:	4629      	mov	r1, r5
 800af44:	4620      	mov	r0, r4
 800af46:	f7f5 f90f 	bl	8000168 <__aeabi_dsub>
 800af4a:	f7f5 fd75 	bl	8000a38 <__aeabi_d2iz>
 800af4e:	1c7c      	adds	r4, r7, #1
 800af50:	ab0c      	add	r3, sp, #48	; 0x30
 800af52:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800af56:	f10a 0a18 	add.w	sl, sl, #24
 800af5a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800af5e:	e720      	b.n	800ada2 <__kernel_rem_pio2+0x28a>
 800af60:	4620      	mov	r0, r4
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 fd68 	bl	8000a38 <__aeabi_d2iz>
 800af68:	ab0c      	add	r3, sp, #48	; 0x30
 800af6a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800af6e:	463c      	mov	r4, r7
 800af70:	e717      	b.n	800ada2 <__kernel_rem_pio2+0x28a>
 800af72:	ab0c      	add	r3, sp, #48	; 0x30
 800af74:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af78:	f7f5 fa44 	bl	8000404 <__aeabi_i2d>
 800af7c:	4632      	mov	r2, r6
 800af7e:	463b      	mov	r3, r7
 800af80:	f7f5 faaa 	bl	80004d8 <__aeabi_dmul>
 800af84:	4652      	mov	r2, sl
 800af86:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800af8a:	465b      	mov	r3, fp
 800af8c:	4630      	mov	r0, r6
 800af8e:	4639      	mov	r1, r7
 800af90:	f7f5 faa2 	bl	80004d8 <__aeabi_dmul>
 800af94:	3d01      	subs	r5, #1
 800af96:	4606      	mov	r6, r0
 800af98:	460f      	mov	r7, r1
 800af9a:	e715      	b.n	800adc8 <__kernel_rem_pio2+0x2b0>
 800af9c:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800afa0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800afa4:	f7f5 fa98 	bl	80004d8 <__aeabi_dmul>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	4650      	mov	r0, sl
 800afae:	4659      	mov	r1, fp
 800afb0:	f7f5 f8dc 	bl	800016c <__adddf3>
 800afb4:	4682      	mov	sl, r0
 800afb6:	468b      	mov	fp, r1
 800afb8:	3701      	adds	r7, #1
 800afba:	9b02      	ldr	r3, [sp, #8]
 800afbc:	429f      	cmp	r7, r3
 800afbe:	dc01      	bgt.n	800afc4 <__kernel_rem_pio2+0x4ac>
 800afc0:	42bd      	cmp	r5, r7
 800afc2:	daeb      	bge.n	800af9c <__kernel_rem_pio2+0x484>
 800afc4:	ab48      	add	r3, sp, #288	; 0x120
 800afc6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800afca:	e9c3 ab00 	strd	sl, fp, [r3]
 800afce:	3501      	adds	r5, #1
 800afd0:	e702      	b.n	800add8 <__kernel_rem_pio2+0x2c0>
 800afd2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d86c      	bhi.n	800b0b2 <__kernel_rem_pio2+0x59a>
 800afd8:	e8df f003 	tbb	[pc, r3]
 800afdc:	022f2f59 	.word	0x022f2f59
 800afe0:	9a06      	ldr	r2, [sp, #24]
 800afe2:	ab48      	add	r3, sp, #288	; 0x120
 800afe4:	189d      	adds	r5, r3, r2
 800afe6:	46aa      	mov	sl, r5
 800afe8:	46a3      	mov	fp, r4
 800afea:	f1bb 0f00 	cmp.w	fp, #0
 800afee:	f300 8087 	bgt.w	800b100 <__kernel_rem_pio2+0x5e8>
 800aff2:	46a2      	mov	sl, r4
 800aff4:	f1ba 0f01 	cmp.w	sl, #1
 800aff8:	f300 809f 	bgt.w	800b13a <__kernel_rem_pio2+0x622>
 800affc:	2700      	movs	r7, #0
 800affe:	463e      	mov	r6, r7
 800b000:	9d06      	ldr	r5, [sp, #24]
 800b002:	ab48      	add	r3, sp, #288	; 0x120
 800b004:	3508      	adds	r5, #8
 800b006:	441d      	add	r5, r3
 800b008:	2c01      	cmp	r4, #1
 800b00a:	f300 80b3 	bgt.w	800b174 <__kernel_rem_pio2+0x65c>
 800b00e:	9b00      	ldr	r3, [sp, #0]
 800b010:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800b012:	9849      	ldr	r0, [sp, #292]	; 0x124
 800b014:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800b016:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f040 80b5 	bne.w	800b188 <__kernel_rem_pio2+0x670>
 800b01e:	4603      	mov	r3, r0
 800b020:	462a      	mov	r2, r5
 800b022:	9804      	ldr	r0, [sp, #16]
 800b024:	e9c0 2300 	strd	r2, r3, [r0]
 800b028:	4622      	mov	r2, r4
 800b02a:	460b      	mov	r3, r1
 800b02c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b030:	463a      	mov	r2, r7
 800b032:	4633      	mov	r3, r6
 800b034:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b038:	e03b      	b.n	800b0b2 <__kernel_rem_pio2+0x59a>
 800b03a:	f04f 0c00 	mov.w	ip, #0
 800b03e:	4626      	mov	r6, r4
 800b040:	4667      	mov	r7, ip
 800b042:	9d06      	ldr	r5, [sp, #24]
 800b044:	ab48      	add	r3, sp, #288	; 0x120
 800b046:	3508      	adds	r5, #8
 800b048:	441d      	add	r5, r3
 800b04a:	2e00      	cmp	r6, #0
 800b04c:	da42      	bge.n	800b0d4 <__kernel_rem_pio2+0x5bc>
 800b04e:	9b00      	ldr	r3, [sp, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d049      	beq.n	800b0e8 <__kernel_rem_pio2+0x5d0>
 800b054:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800b058:	4662      	mov	r2, ip
 800b05a:	460b      	mov	r3, r1
 800b05c:	9904      	ldr	r1, [sp, #16]
 800b05e:	2601      	movs	r6, #1
 800b060:	e9c1 2300 	strd	r2, r3, [r1]
 800b064:	a948      	add	r1, sp, #288	; 0x120
 800b066:	463b      	mov	r3, r7
 800b068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b06c:	f7f5 f87c 	bl	8000168 <__aeabi_dsub>
 800b070:	4684      	mov	ip, r0
 800b072:	460f      	mov	r7, r1
 800b074:	ad48      	add	r5, sp, #288	; 0x120
 800b076:	42b4      	cmp	r4, r6
 800b078:	da38      	bge.n	800b0ec <__kernel_rem_pio2+0x5d4>
 800b07a:	9b00      	ldr	r3, [sp, #0]
 800b07c:	b10b      	cbz	r3, 800b082 <__kernel_rem_pio2+0x56a>
 800b07e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b082:	4662      	mov	r2, ip
 800b084:	463b      	mov	r3, r7
 800b086:	9904      	ldr	r1, [sp, #16]
 800b088:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b08c:	e011      	b.n	800b0b2 <__kernel_rem_pio2+0x59a>
 800b08e:	2700      	movs	r7, #0
 800b090:	463d      	mov	r5, r7
 800b092:	9b06      	ldr	r3, [sp, #24]
 800b094:	aa98      	add	r2, sp, #608	; 0x260
 800b096:	4413      	add	r3, r2
 800b098:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800b09c:	2c00      	cmp	r4, #0
 800b09e:	da0f      	bge.n	800b0c0 <__kernel_rem_pio2+0x5a8>
 800b0a0:	9b00      	ldr	r3, [sp, #0]
 800b0a2:	b10b      	cbz	r3, 800b0a8 <__kernel_rem_pio2+0x590>
 800b0a4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b0a8:	463a      	mov	r2, r7
 800b0aa:	462b      	mov	r3, r5
 800b0ac:	9904      	ldr	r1, [sp, #16]
 800b0ae:	e9c1 2300 	strd	r2, r3, [r1]
 800b0b2:	9b05      	ldr	r3, [sp, #20]
 800b0b4:	f003 0007 	and.w	r0, r3, #7
 800b0b8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	f7f5 f850 	bl	800016c <__adddf3>
 800b0cc:	3c01      	subs	r4, #1
 800b0ce:	4607      	mov	r7, r0
 800b0d0:	460d      	mov	r5, r1
 800b0d2:	e7e3      	b.n	800b09c <__kernel_rem_pio2+0x584>
 800b0d4:	4660      	mov	r0, ip
 800b0d6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 f846 	bl	800016c <__adddf3>
 800b0e0:	3e01      	subs	r6, #1
 800b0e2:	4684      	mov	ip, r0
 800b0e4:	460f      	mov	r7, r1
 800b0e6:	e7b0      	b.n	800b04a <__kernel_rem_pio2+0x532>
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	e7b5      	b.n	800b058 <__kernel_rem_pio2+0x540>
 800b0ec:	4660      	mov	r0, ip
 800b0ee:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	f7f5 f83a 	bl	800016c <__adddf3>
 800b0f8:	3601      	adds	r6, #1
 800b0fa:	4684      	mov	ip, r0
 800b0fc:	460f      	mov	r7, r1
 800b0fe:	e7ba      	b.n	800b076 <__kernel_rem_pio2+0x55e>
 800b100:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800b104:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800b108:	4640      	mov	r0, r8
 800b10a:	4649      	mov	r1, r9
 800b10c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b110:	f7f5 f82c 	bl	800016c <__adddf3>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4606      	mov	r6, r0
 800b11a:	460f      	mov	r7, r1
 800b11c:	4640      	mov	r0, r8
 800b11e:	4649      	mov	r1, r9
 800b120:	f7f5 f822 	bl	8000168 <__aeabi_dsub>
 800b124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b128:	f7f5 f820 	bl	800016c <__adddf3>
 800b12c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b130:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b134:	e9ca 6700 	strd	r6, r7, [sl]
 800b138:	e757      	b.n	800afea <__kernel_rem_pio2+0x4d2>
 800b13a:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800b13e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b142:	4630      	mov	r0, r6
 800b144:	4639      	mov	r1, r7
 800b146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b14a:	f7f5 f80f 	bl	800016c <__adddf3>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4680      	mov	r8, r0
 800b154:	4689      	mov	r9, r1
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	f7f5 f805 	bl	8000168 <__aeabi_dsub>
 800b15e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b162:	f7f5 f803 	bl	800016c <__adddf3>
 800b166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b16a:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b16e:	e9c5 8900 	strd	r8, r9, [r5]
 800b172:	e73f      	b.n	800aff4 <__kernel_rem_pio2+0x4dc>
 800b174:	4638      	mov	r0, r7
 800b176:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b17a:	4631      	mov	r1, r6
 800b17c:	f7f4 fff6 	bl	800016c <__adddf3>
 800b180:	3c01      	subs	r4, #1
 800b182:	4607      	mov	r7, r0
 800b184:	460e      	mov	r6, r1
 800b186:	e73f      	b.n	800b008 <__kernel_rem_pio2+0x4f0>
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b18e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b192:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b196:	601d      	str	r5, [r3, #0]
 800b198:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b19c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b1a0:	615e      	str	r6, [r3, #20]
 800b1a2:	e786      	b.n	800b0b2 <__kernel_rem_pio2+0x59a>
 800b1a4:	41700000 	.word	0x41700000
 800b1a8:	3e700000 	.word	0x3e700000
 800b1ac:	00000000 	.word	0x00000000

0800b1b0 <__kernel_tan>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	461f      	mov	r7, r3
 800b1b6:	4bda      	ldr	r3, [pc, #872]	; (800b520 <__kernel_tan+0x370>)
 800b1b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b1bc:	b089      	sub	sp, #36	; 0x24
 800b1be:	429e      	cmp	r6, r3
 800b1c0:	4682      	mov	sl, r0
 800b1c2:	468b      	mov	fp, r1
 800b1c4:	4690      	mov	r8, r2
 800b1c6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800b1ca:	9105      	str	r1, [sp, #20]
 800b1cc:	dc21      	bgt.n	800b212 <__kernel_tan+0x62>
 800b1ce:	f7f5 fc33 	bl	8000a38 <__aeabi_d2iz>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d140      	bne.n	800b258 <__kernel_tan+0xa8>
 800b1d6:	4652      	mov	r2, sl
 800b1d8:	f109 0301 	add.w	r3, r9, #1
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	4333      	orrs	r3, r6
 800b1e0:	d110      	bne.n	800b204 <__kernel_tan+0x54>
 800b1e2:	4650      	mov	r0, sl
 800b1e4:	4659      	mov	r1, fp
 800b1e6:	f000 fd37 	bl	800bc58 <fabs>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	49cc      	ldr	r1, [pc, #816]	; (800b524 <__kernel_tan+0x374>)
 800b1f2:	f7f5 fa9b 	bl	800072c <__aeabi_ddiv>
 800b1f6:	4682      	mov	sl, r0
 800b1f8:	468b      	mov	fp, r1
 800b1fa:	4650      	mov	r0, sl
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	b009      	add	sp, #36	; 0x24
 800b200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b204:	f1b9 0f01 	cmp.w	r9, #1
 800b208:	d0f7      	beq.n	800b1fa <__kernel_tan+0x4a>
 800b20a:	465b      	mov	r3, fp
 800b20c:	2000      	movs	r0, #0
 800b20e:	49c6      	ldr	r1, [pc, #792]	; (800b528 <__kernel_tan+0x378>)
 800b210:	e7ef      	b.n	800b1f2 <__kernel_tan+0x42>
 800b212:	4bc6      	ldr	r3, [pc, #792]	; (800b52c <__kernel_tan+0x37c>)
 800b214:	429e      	cmp	r6, r3
 800b216:	dd1f      	ble.n	800b258 <__kernel_tan+0xa8>
 800b218:	2900      	cmp	r1, #0
 800b21a:	da04      	bge.n	800b226 <__kernel_tan+0x76>
 800b21c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b220:	469b      	mov	fp, r3
 800b222:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b226:	4652      	mov	r2, sl
 800b228:	a19f      	add	r1, pc, #636	; (adr r1, 800b4a8 <__kernel_tan+0x2f8>)
 800b22a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b22e:	465b      	mov	r3, fp
 800b230:	f7f4 ff9a 	bl	8000168 <__aeabi_dsub>
 800b234:	4604      	mov	r4, r0
 800b236:	460d      	mov	r5, r1
 800b238:	a19d      	add	r1, pc, #628	; (adr r1, 800b4b0 <__kernel_tan+0x300>)
 800b23a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b23e:	4642      	mov	r2, r8
 800b240:	463b      	mov	r3, r7
 800b242:	f7f4 ff91 	bl	8000168 <__aeabi_dsub>
 800b246:	4622      	mov	r2, r4
 800b248:	462b      	mov	r3, r5
 800b24a:	f7f4 ff8f 	bl	800016c <__adddf3>
 800b24e:	f04f 0800 	mov.w	r8, #0
 800b252:	4682      	mov	sl, r0
 800b254:	468b      	mov	fp, r1
 800b256:	4647      	mov	r7, r8
 800b258:	4652      	mov	r2, sl
 800b25a:	465b      	mov	r3, fp
 800b25c:	4650      	mov	r0, sl
 800b25e:	4659      	mov	r1, fp
 800b260:	f7f5 f93a 	bl	80004d8 <__aeabi_dmul>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	e9cd 0100 	strd	r0, r1, [sp]
 800b26c:	f7f5 f934 	bl	80004d8 <__aeabi_dmul>
 800b270:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b274:	4604      	mov	r4, r0
 800b276:	460d      	mov	r5, r1
 800b278:	4650      	mov	r0, sl
 800b27a:	4659      	mov	r1, fp
 800b27c:	f7f5 f92c 	bl	80004d8 <__aeabi_dmul>
 800b280:	a38d      	add	r3, pc, #564	; (adr r3, 800b4b8 <__kernel_tan+0x308>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b28a:	4620      	mov	r0, r4
 800b28c:	4629      	mov	r1, r5
 800b28e:	f7f5 f923 	bl	80004d8 <__aeabi_dmul>
 800b292:	a38b      	add	r3, pc, #556	; (adr r3, 800b4c0 <__kernel_tan+0x310>)
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f7f4 ff68 	bl	800016c <__adddf3>
 800b29c:	4622      	mov	r2, r4
 800b29e:	462b      	mov	r3, r5
 800b2a0:	f7f5 f91a 	bl	80004d8 <__aeabi_dmul>
 800b2a4:	a388      	add	r3, pc, #544	; (adr r3, 800b4c8 <__kernel_tan+0x318>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f7f4 ff5f 	bl	800016c <__adddf3>
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	462b      	mov	r3, r5
 800b2b2:	f7f5 f911 	bl	80004d8 <__aeabi_dmul>
 800b2b6:	a386      	add	r3, pc, #536	; (adr r3, 800b4d0 <__kernel_tan+0x320>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f7f4 ff56 	bl	800016c <__adddf3>
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	462b      	mov	r3, r5
 800b2c4:	f7f5 f908 	bl	80004d8 <__aeabi_dmul>
 800b2c8:	a383      	add	r3, pc, #524	; (adr r3, 800b4d8 <__kernel_tan+0x328>)
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	f7f4 ff4d 	bl	800016c <__adddf3>
 800b2d2:	4622      	mov	r2, r4
 800b2d4:	462b      	mov	r3, r5
 800b2d6:	f7f5 f8ff 	bl	80004d8 <__aeabi_dmul>
 800b2da:	a381      	add	r3, pc, #516	; (adr r3, 800b4e0 <__kernel_tan+0x330>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f7f4 ff44 	bl	800016c <__adddf3>
 800b2e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e8:	f7f5 f8f6 	bl	80004d8 <__aeabi_dmul>
 800b2ec:	a37e      	add	r3, pc, #504	; (adr r3, 800b4e8 <__kernel_tan+0x338>)
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7f5 f8ed 	bl	80004d8 <__aeabi_dmul>
 800b2fe:	a37c      	add	r3, pc, #496	; (adr r3, 800b4f0 <__kernel_tan+0x340>)
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	f7f4 ff32 	bl	800016c <__adddf3>
 800b308:	4622      	mov	r2, r4
 800b30a:	462b      	mov	r3, r5
 800b30c:	f7f5 f8e4 	bl	80004d8 <__aeabi_dmul>
 800b310:	a379      	add	r3, pc, #484	; (adr r3, 800b4f8 <__kernel_tan+0x348>)
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	f7f4 ff29 	bl	800016c <__adddf3>
 800b31a:	4622      	mov	r2, r4
 800b31c:	462b      	mov	r3, r5
 800b31e:	f7f5 f8db 	bl	80004d8 <__aeabi_dmul>
 800b322:	a377      	add	r3, pc, #476	; (adr r3, 800b500 <__kernel_tan+0x350>)
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	f7f4 ff20 	bl	800016c <__adddf3>
 800b32c:	4622      	mov	r2, r4
 800b32e:	462b      	mov	r3, r5
 800b330:	f7f5 f8d2 	bl	80004d8 <__aeabi_dmul>
 800b334:	a374      	add	r3, pc, #464	; (adr r3, 800b508 <__kernel_tan+0x358>)
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	f7f4 ff17 	bl	800016c <__adddf3>
 800b33e:	4622      	mov	r2, r4
 800b340:	462b      	mov	r3, r5
 800b342:	f7f5 f8c9 	bl	80004d8 <__aeabi_dmul>
 800b346:	a372      	add	r3, pc, #456	; (adr r3, 800b510 <__kernel_tan+0x360>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f7f4 ff0e 	bl	800016c <__adddf3>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b358:	f7f4 ff08 	bl	800016c <__adddf3>
 800b35c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b360:	f7f5 f8ba 	bl	80004d8 <__aeabi_dmul>
 800b364:	4642      	mov	r2, r8
 800b366:	463b      	mov	r3, r7
 800b368:	f7f4 ff00 	bl	800016c <__adddf3>
 800b36c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b370:	f7f5 f8b2 	bl	80004d8 <__aeabi_dmul>
 800b374:	4642      	mov	r2, r8
 800b376:	463b      	mov	r3, r7
 800b378:	f7f4 fef8 	bl	800016c <__adddf3>
 800b37c:	a366      	add	r3, pc, #408	; (adr r3, 800b518 <__kernel_tan+0x368>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	4604      	mov	r4, r0
 800b384:	460d      	mov	r5, r1
 800b386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b38a:	f7f5 f8a5 	bl	80004d8 <__aeabi_dmul>
 800b38e:	4622      	mov	r2, r4
 800b390:	462b      	mov	r3, r5
 800b392:	f7f4 feeb 	bl	800016c <__adddf3>
 800b396:	e9cd 0100 	strd	r0, r1, [sp]
 800b39a:	460b      	mov	r3, r1
 800b39c:	4602      	mov	r2, r0
 800b39e:	4659      	mov	r1, fp
 800b3a0:	4650      	mov	r0, sl
 800b3a2:	f7f4 fee3 	bl	800016c <__adddf3>
 800b3a6:	4b61      	ldr	r3, [pc, #388]	; (800b52c <__kernel_tan+0x37c>)
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	429e      	cmp	r6, r3
 800b3ac:	460d      	mov	r5, r1
 800b3ae:	dd3d      	ble.n	800b42c <__kernel_tan+0x27c>
 800b3b0:	4648      	mov	r0, r9
 800b3b2:	f7f5 f827 	bl	8000404 <__aeabi_i2d>
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	4680      	mov	r8, r0
 800b3ba:	4689      	mov	r9, r1
 800b3bc:	462b      	mov	r3, r5
 800b3be:	4620      	mov	r0, r4
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	f7f5 f889 	bl	80004d8 <__aeabi_dmul>
 800b3c6:	4642      	mov	r2, r8
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	460f      	mov	r7, r1
 800b3cc:	464b      	mov	r3, r9
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f4 fecb 	bl	800016c <__adddf3>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4630      	mov	r0, r6
 800b3dc:	4639      	mov	r1, r7
 800b3de:	f7f5 f9a5 	bl	800072c <__aeabi_ddiv>
 800b3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3e6:	f7f4 febf 	bl	8000168 <__aeabi_dsub>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	4659      	mov	r1, fp
 800b3f2:	f7f4 feb9 	bl	8000168 <__aeabi_dsub>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	f7f4 feb7 	bl	800016c <__adddf3>
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	4640      	mov	r0, r8
 800b404:	4649      	mov	r1, r9
 800b406:	f7f4 feaf 	bl	8000168 <__aeabi_dsub>
 800b40a:	9b05      	ldr	r3, [sp, #20]
 800b40c:	4604      	mov	r4, r0
 800b40e:	1798      	asrs	r0, r3, #30
 800b410:	f000 0002 	and.w	r0, r0, #2
 800b414:	f1c0 0001 	rsb	r0, r0, #1
 800b418:	460d      	mov	r5, r1
 800b41a:	f7f4 fff3 	bl	8000404 <__aeabi_i2d>
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4620      	mov	r0, r4
 800b424:	4629      	mov	r1, r5
 800b426:	f7f5 f857 	bl	80004d8 <__aeabi_dmul>
 800b42a:	e6e4      	b.n	800b1f6 <__kernel_tan+0x46>
 800b42c:	f1b9 0f01 	cmp.w	r9, #1
 800b430:	d036      	beq.n	800b4a0 <__kernel_tan+0x2f0>
 800b432:	460f      	mov	r7, r1
 800b434:	4602      	mov	r2, r0
 800b436:	460b      	mov	r3, r1
 800b438:	2000      	movs	r0, #0
 800b43a:	493b      	ldr	r1, [pc, #236]	; (800b528 <__kernel_tan+0x378>)
 800b43c:	f7f5 f976 	bl	800072c <__aeabi_ddiv>
 800b440:	2600      	movs	r6, #0
 800b442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b446:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b44a:	4652      	mov	r2, sl
 800b44c:	465b      	mov	r3, fp
 800b44e:	4630      	mov	r0, r6
 800b450:	4639      	mov	r1, r7
 800b452:	f7f4 fe89 	bl	8000168 <__aeabi_dsub>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b45e:	f7f4 fe83 	bl	8000168 <__aeabi_dsub>
 800b462:	4632      	mov	r2, r6
 800b464:	462b      	mov	r3, r5
 800b466:	f7f5 f837 	bl	80004d8 <__aeabi_dmul>
 800b46a:	4632      	mov	r2, r6
 800b46c:	4682      	mov	sl, r0
 800b46e:	468b      	mov	fp, r1
 800b470:	462b      	mov	r3, r5
 800b472:	4630      	mov	r0, r6
 800b474:	4639      	mov	r1, r7
 800b476:	f7f5 f82f 	bl	80004d8 <__aeabi_dmul>
 800b47a:	2200      	movs	r2, #0
 800b47c:	4b29      	ldr	r3, [pc, #164]	; (800b524 <__kernel_tan+0x374>)
 800b47e:	f7f4 fe75 	bl	800016c <__adddf3>
 800b482:	4602      	mov	r2, r0
 800b484:	460b      	mov	r3, r1
 800b486:	4650      	mov	r0, sl
 800b488:	4659      	mov	r1, fp
 800b48a:	f7f4 fe6f 	bl	800016c <__adddf3>
 800b48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b492:	f7f5 f821 	bl	80004d8 <__aeabi_dmul>
 800b496:	4632      	mov	r2, r6
 800b498:	462b      	mov	r3, r5
 800b49a:	f7f4 fe67 	bl	800016c <__adddf3>
 800b49e:	e6aa      	b.n	800b1f6 <__kernel_tan+0x46>
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	468b      	mov	fp, r1
 800b4a4:	e6a9      	b.n	800b1fa <__kernel_tan+0x4a>
 800b4a6:	bf00      	nop
 800b4a8:	54442d18 	.word	0x54442d18
 800b4ac:	3fe921fb 	.word	0x3fe921fb
 800b4b0:	33145c07 	.word	0x33145c07
 800b4b4:	3c81a626 	.word	0x3c81a626
 800b4b8:	74bf7ad4 	.word	0x74bf7ad4
 800b4bc:	3efb2a70 	.word	0x3efb2a70
 800b4c0:	32f0a7e9 	.word	0x32f0a7e9
 800b4c4:	3f12b80f 	.word	0x3f12b80f
 800b4c8:	1a8d1068 	.word	0x1a8d1068
 800b4cc:	3f3026f7 	.word	0x3f3026f7
 800b4d0:	fee08315 	.word	0xfee08315
 800b4d4:	3f57dbc8 	.word	0x3f57dbc8
 800b4d8:	e96e8493 	.word	0xe96e8493
 800b4dc:	3f8226e3 	.word	0x3f8226e3
 800b4e0:	1bb341fe 	.word	0x1bb341fe
 800b4e4:	3faba1ba 	.word	0x3faba1ba
 800b4e8:	db605373 	.word	0xdb605373
 800b4ec:	bef375cb 	.word	0xbef375cb
 800b4f0:	a03792a6 	.word	0xa03792a6
 800b4f4:	3f147e88 	.word	0x3f147e88
 800b4f8:	f2f26501 	.word	0xf2f26501
 800b4fc:	3f4344d8 	.word	0x3f4344d8
 800b500:	c9560328 	.word	0xc9560328
 800b504:	3f6d6d22 	.word	0x3f6d6d22
 800b508:	8406d637 	.word	0x8406d637
 800b50c:	3f9664f4 	.word	0x3f9664f4
 800b510:	1110fe7a 	.word	0x1110fe7a
 800b514:	3fc11111 	.word	0x3fc11111
 800b518:	55555563 	.word	0x55555563
 800b51c:	3fd55555 	.word	0x3fd55555
 800b520:	3e2fffff 	.word	0x3e2fffff
 800b524:	3ff00000 	.word	0x3ff00000
 800b528:	bff00000 	.word	0xbff00000
 800b52c:	3fe59427 	.word	0x3fe59427

0800b530 <__kernel_cosf>:
 800b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b538:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b53c:	4606      	mov	r6, r0
 800b53e:	4688      	mov	r8, r1
 800b540:	da03      	bge.n	800b54a <__kernel_cosf+0x1a>
 800b542:	f7f5 fddb 	bl	80010fc <__aeabi_f2iz>
 800b546:	2800      	cmp	r0, #0
 800b548:	d05c      	beq.n	800b604 <__kernel_cosf+0xd4>
 800b54a:	4631      	mov	r1, r6
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7f5 fbf9 	bl	8000d44 <__aeabi_fmul>
 800b552:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b556:	4605      	mov	r5, r0
 800b558:	f7f5 fbf4 	bl	8000d44 <__aeabi_fmul>
 800b55c:	492b      	ldr	r1, [pc, #172]	; (800b60c <__kernel_cosf+0xdc>)
 800b55e:	4607      	mov	r7, r0
 800b560:	4628      	mov	r0, r5
 800b562:	f7f5 fbef 	bl	8000d44 <__aeabi_fmul>
 800b566:	492a      	ldr	r1, [pc, #168]	; (800b610 <__kernel_cosf+0xe0>)
 800b568:	f7f5 fae4 	bl	8000b34 <__addsf3>
 800b56c:	4629      	mov	r1, r5
 800b56e:	f7f5 fbe9 	bl	8000d44 <__aeabi_fmul>
 800b572:	4928      	ldr	r1, [pc, #160]	; (800b614 <__kernel_cosf+0xe4>)
 800b574:	f7f5 fadc 	bl	8000b30 <__aeabi_fsub>
 800b578:	4629      	mov	r1, r5
 800b57a:	f7f5 fbe3 	bl	8000d44 <__aeabi_fmul>
 800b57e:	4926      	ldr	r1, [pc, #152]	; (800b618 <__kernel_cosf+0xe8>)
 800b580:	f7f5 fad8 	bl	8000b34 <__addsf3>
 800b584:	4629      	mov	r1, r5
 800b586:	f7f5 fbdd 	bl	8000d44 <__aeabi_fmul>
 800b58a:	4924      	ldr	r1, [pc, #144]	; (800b61c <__kernel_cosf+0xec>)
 800b58c:	f7f5 fad0 	bl	8000b30 <__aeabi_fsub>
 800b590:	4629      	mov	r1, r5
 800b592:	f7f5 fbd7 	bl	8000d44 <__aeabi_fmul>
 800b596:	4922      	ldr	r1, [pc, #136]	; (800b620 <__kernel_cosf+0xf0>)
 800b598:	f7f5 facc 	bl	8000b34 <__addsf3>
 800b59c:	4629      	mov	r1, r5
 800b59e:	f7f5 fbd1 	bl	8000d44 <__aeabi_fmul>
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	f7f5 fbce 	bl	8000d44 <__aeabi_fmul>
 800b5a8:	4641      	mov	r1, r8
 800b5aa:	4605      	mov	r5, r0
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7f5 fbc9 	bl	8000d44 <__aeabi_fmul>
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	f7f5 fabb 	bl	8000b30 <__aeabi_fsub>
 800b5ba:	4b1a      	ldr	r3, [pc, #104]	; (800b624 <__kernel_cosf+0xf4>)
 800b5bc:	4605      	mov	r5, r0
 800b5be:	429c      	cmp	r4, r3
 800b5c0:	dc0a      	bgt.n	800b5d8 <__kernel_cosf+0xa8>
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f7f5 fab3 	bl	8000b30 <__aeabi_fsub>
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b5d0:	f7f5 faae 	bl	8000b30 <__aeabi_fsub>
 800b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d8:	4b13      	ldr	r3, [pc, #76]	; (800b628 <__kernel_cosf+0xf8>)
 800b5da:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b5de:	429c      	cmp	r4, r3
 800b5e0:	bfcc      	ite	gt
 800b5e2:	4c12      	ldrgt	r4, [pc, #72]	; (800b62c <__kernel_cosf+0xfc>)
 800b5e4:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	f7f5 faa1 	bl	8000b30 <__aeabi_fsub>
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	f7f5 fa9c 	bl	8000b30 <__aeabi_fsub>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	f7f5 fa99 	bl	8000b30 <__aeabi_fsub>
 800b5fe:	4601      	mov	r1, r0
 800b600:	4630      	mov	r0, r6
 800b602:	e7e5      	b.n	800b5d0 <__kernel_cosf+0xa0>
 800b604:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b608:	e7e4      	b.n	800b5d4 <__kernel_cosf+0xa4>
 800b60a:	bf00      	nop
 800b60c:	ad47d74e 	.word	0xad47d74e
 800b610:	310f74f6 	.word	0x310f74f6
 800b614:	3493f27c 	.word	0x3493f27c
 800b618:	37d00d01 	.word	0x37d00d01
 800b61c:	3ab60b61 	.word	0x3ab60b61
 800b620:	3d2aaaab 	.word	0x3d2aaaab
 800b624:	3e999999 	.word	0x3e999999
 800b628:	3f480000 	.word	0x3f480000
 800b62c:	3e900000 	.word	0x3e900000

0800b630 <__kernel_rem_pio2f>:
 800b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	b0d9      	sub	sp, #356	; 0x164
 800b636:	9304      	str	r3, [sp, #16]
 800b638:	9101      	str	r1, [sp, #4]
 800b63a:	4bc3      	ldr	r3, [pc, #780]	; (800b948 <__kernel_rem_pio2f+0x318>)
 800b63c:	9962      	ldr	r1, [sp, #392]	; 0x188
 800b63e:	1ed4      	subs	r4, r2, #3
 800b640:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b644:	2500      	movs	r5, #0
 800b646:	9302      	str	r3, [sp, #8]
 800b648:	9b04      	ldr	r3, [sp, #16]
 800b64a:	f04f 0a00 	mov.w	sl, #0
 800b64e:	3b01      	subs	r3, #1
 800b650:	9303      	str	r3, [sp, #12]
 800b652:	2308      	movs	r3, #8
 800b654:	fb94 f4f3 	sdiv	r4, r4, r3
 800b658:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b65c:	1c66      	adds	r6, r4, #1
 800b65e:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800b662:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b666:	eb03 0802 	add.w	r8, r3, r2
 800b66a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b66c:	1aa7      	subs	r7, r4, r2
 800b66e:	9005      	str	r0, [sp, #20]
 800b670:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b674:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800b678:	4545      	cmp	r5, r8
 800b67a:	dd7f      	ble.n	800b77c <__kernel_rem_pio2f+0x14c>
 800b67c:	f04f 0800 	mov.w	r8, #0
 800b680:	f04f 0a00 	mov.w	sl, #0
 800b684:	f06f 0b03 	mvn.w	fp, #3
 800b688:	9b04      	ldr	r3, [sp, #16]
 800b68a:	aa1c      	add	r2, sp, #112	; 0x70
 800b68c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b690:	ab44      	add	r3, sp, #272	; 0x110
 800b692:	9a02      	ldr	r2, [sp, #8]
 800b694:	4590      	cmp	r8, r2
 800b696:	f340 8097 	ble.w	800b7c8 <__kernel_rem_pio2f+0x198>
 800b69a:	4613      	mov	r3, r2
 800b69c:	aa08      	add	r2, sp, #32
 800b69e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6a2:	9307      	str	r3, [sp, #28]
 800b6a4:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b6a6:	9f02      	ldr	r7, [sp, #8]
 800b6a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b6ac:	9306      	str	r3, [sp, #24]
 800b6ae:	46ba      	mov	sl, r7
 800b6b0:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800b6b4:	ab58      	add	r3, sp, #352	; 0x160
 800b6b6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b6ba:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800b6be:	ad07      	add	r5, sp, #28
 800b6c0:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b6c4:	f1ba 0f00 	cmp.w	sl, #0
 800b6c8:	f300 8081 	bgt.w	800b7ce <__kernel_rem_pio2f+0x19e>
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 fc98 	bl	800c004 <scalbnf>
 800b6d4:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800b6d8:	4604      	mov	r4, r0
 800b6da:	f7f5 fb33 	bl	8000d44 <__aeabi_fmul>
 800b6de:	f000 fc51 	bl	800bf84 <floorf>
 800b6e2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800b6e6:	f7f5 fb2d 	bl	8000d44 <__aeabi_fmul>
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f7f5 fa1f 	bl	8000b30 <__aeabi_fsub>
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	f7f5 fd02 	bl	80010fc <__aeabi_f2iz>
 800b6f8:	4681      	mov	r9, r0
 800b6fa:	f7f5 facf 	bl	8000c9c <__aeabi_i2f>
 800b6fe:	4601      	mov	r1, r0
 800b700:	4620      	mov	r0, r4
 800b702:	f7f5 fa15 	bl	8000b30 <__aeabi_fsub>
 800b706:	2e00      	cmp	r6, #0
 800b708:	4604      	mov	r4, r0
 800b70a:	dd7e      	ble.n	800b80a <__kernel_rem_pio2f+0x1da>
 800b70c:	1e7b      	subs	r3, r7, #1
 800b70e:	aa08      	add	r2, sp, #32
 800b710:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b714:	f1c6 0208 	rsb	r2, r6, #8
 800b718:	fa45 f002 	asr.w	r0, r5, r2
 800b71c:	4481      	add	r9, r0
 800b71e:	4090      	lsls	r0, r2
 800b720:	1a2d      	subs	r5, r5, r0
 800b722:	aa08      	add	r2, sp, #32
 800b724:	f1c6 0007 	rsb	r0, r6, #7
 800b728:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800b72c:	4105      	asrs	r5, r0
 800b72e:	2d00      	cmp	r5, #0
 800b730:	dd79      	ble.n	800b826 <__kernel_rem_pio2f+0x1f6>
 800b732:	2200      	movs	r2, #0
 800b734:	4690      	mov	r8, r2
 800b736:	f109 0901 	add.w	r9, r9, #1
 800b73a:	4297      	cmp	r7, r2
 800b73c:	f300 80ae 	bgt.w	800b89c <__kernel_rem_pio2f+0x26c>
 800b740:	2e00      	cmp	r6, #0
 800b742:	dd05      	ble.n	800b750 <__kernel_rem_pio2f+0x120>
 800b744:	2e01      	cmp	r6, #1
 800b746:	f000 80c0 	beq.w	800b8ca <__kernel_rem_pio2f+0x29a>
 800b74a:	2e02      	cmp	r6, #2
 800b74c:	f000 80c7 	beq.w	800b8de <__kernel_rem_pio2f+0x2ae>
 800b750:	2d02      	cmp	r5, #2
 800b752:	d168      	bne.n	800b826 <__kernel_rem_pio2f+0x1f6>
 800b754:	4621      	mov	r1, r4
 800b756:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b75a:	f7f5 f9e9 	bl	8000b30 <__aeabi_fsub>
 800b75e:	4604      	mov	r4, r0
 800b760:	f1b8 0f00 	cmp.w	r8, #0
 800b764:	d05f      	beq.n	800b826 <__kernel_rem_pio2f+0x1f6>
 800b766:	4631      	mov	r1, r6
 800b768:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b76c:	f000 fc4a 	bl	800c004 <scalbnf>
 800b770:	4601      	mov	r1, r0
 800b772:	4620      	mov	r0, r4
 800b774:	f7f5 f9dc 	bl	8000b30 <__aeabi_fsub>
 800b778:	4604      	mov	r4, r0
 800b77a:	e054      	b.n	800b826 <__kernel_rem_pio2f+0x1f6>
 800b77c:	42ef      	cmn	r7, r5
 800b77e:	d407      	bmi.n	800b790 <__kernel_rem_pio2f+0x160>
 800b780:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b784:	f7f5 fa8a 	bl	8000c9c <__aeabi_i2f>
 800b788:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800b78c:	3501      	adds	r5, #1
 800b78e:	e773      	b.n	800b678 <__kernel_rem_pio2f+0x48>
 800b790:	4650      	mov	r0, sl
 800b792:	e7f9      	b.n	800b788 <__kernel_rem_pio2f+0x158>
 800b794:	fb0b 5207 	mla	r2, fp, r7, r5
 800b798:	9306      	str	r3, [sp, #24]
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b7a0:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800b7a4:	f7f5 face 	bl	8000d44 <__aeabi_fmul>
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	4648      	mov	r0, r9
 800b7ac:	f7f5 f9c2 	bl	8000b34 <__addsf3>
 800b7b0:	4681      	mov	r9, r0
 800b7b2:	9b06      	ldr	r3, [sp, #24]
 800b7b4:	3701      	adds	r7, #1
 800b7b6:	9a03      	ldr	r2, [sp, #12]
 800b7b8:	4297      	cmp	r7, r2
 800b7ba:	ddeb      	ble.n	800b794 <__kernel_rem_pio2f+0x164>
 800b7bc:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800b7c0:	3504      	adds	r5, #4
 800b7c2:	f108 0801 	add.w	r8, r8, #1
 800b7c6:	e764      	b.n	800b692 <__kernel_rem_pio2f+0x62>
 800b7c8:	46d1      	mov	r9, sl
 800b7ca:	2700      	movs	r7, #0
 800b7cc:	e7f3      	b.n	800b7b6 <__kernel_rem_pio2f+0x186>
 800b7ce:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f7f5 fab6 	bl	8000d44 <__aeabi_fmul>
 800b7d8:	f7f5 fc90 	bl	80010fc <__aeabi_f2iz>
 800b7dc:	f7f5 fa5e 	bl	8000c9c <__aeabi_i2f>
 800b7e0:	4641      	mov	r1, r8
 800b7e2:	4683      	mov	fp, r0
 800b7e4:	f7f5 faae 	bl	8000d44 <__aeabi_fmul>
 800b7e8:	4601      	mov	r1, r0
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f7f5 f9a0 	bl	8000b30 <__aeabi_fsub>
 800b7f0:	f7f5 fc84 	bl	80010fc <__aeabi_f2iz>
 800b7f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7f8:	f845 0f04 	str.w	r0, [r5, #4]!
 800b7fc:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800b800:	4658      	mov	r0, fp
 800b802:	f7f5 f997 	bl	8000b34 <__addsf3>
 800b806:	4604      	mov	r4, r0
 800b808:	e75c      	b.n	800b6c4 <__kernel_rem_pio2f+0x94>
 800b80a:	d105      	bne.n	800b818 <__kernel_rem_pio2f+0x1e8>
 800b80c:	1e7b      	subs	r3, r7, #1
 800b80e:	aa08      	add	r2, sp, #32
 800b810:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b814:	122d      	asrs	r5, r5, #8
 800b816:	e78a      	b.n	800b72e <__kernel_rem_pio2f+0xfe>
 800b818:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b81c:	f7f5 fc44 	bl	80010a8 <__aeabi_fcmpge>
 800b820:	2800      	cmp	r0, #0
 800b822:	d139      	bne.n	800b898 <__kernel_rem_pio2f+0x268>
 800b824:	4605      	mov	r5, r0
 800b826:	2100      	movs	r1, #0
 800b828:	4620      	mov	r0, r4
 800b82a:	f7f5 fc1f 	bl	800106c <__aeabi_fcmpeq>
 800b82e:	2800      	cmp	r0, #0
 800b830:	f000 80a0 	beq.w	800b974 <__kernel_rem_pio2f+0x344>
 800b834:	1e7c      	subs	r4, r7, #1
 800b836:	4623      	mov	r3, r4
 800b838:	2200      	movs	r2, #0
 800b83a:	9902      	ldr	r1, [sp, #8]
 800b83c:	428b      	cmp	r3, r1
 800b83e:	da55      	bge.n	800b8ec <__kernel_rem_pio2f+0x2bc>
 800b840:	2a00      	cmp	r2, #0
 800b842:	d07e      	beq.n	800b942 <__kernel_rem_pio2f+0x312>
 800b844:	ab08      	add	r3, sp, #32
 800b846:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b84a:	3e08      	subs	r6, #8
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 808f 	beq.w	800b970 <__kernel_rem_pio2f+0x340>
 800b852:	4631      	mov	r1, r6
 800b854:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b858:	f000 fbd4 	bl	800c004 <scalbnf>
 800b85c:	46a0      	mov	r8, r4
 800b85e:	4682      	mov	sl, r0
 800b860:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 800b864:	af44      	add	r7, sp, #272	; 0x110
 800b866:	f1b8 0f00 	cmp.w	r8, #0
 800b86a:	f280 80b5 	bge.w	800b9d8 <__kernel_rem_pio2f+0x3a8>
 800b86e:	f04f 0a00 	mov.w	sl, #0
 800b872:	2300      	movs	r3, #0
 800b874:	00a6      	lsls	r6, r4, #2
 800b876:	4a35      	ldr	r2, [pc, #212]	; (800b94c <__kernel_rem_pio2f+0x31c>)
 800b878:	4437      	add	r7, r6
 800b87a:	eba4 010a 	sub.w	r1, r4, sl
 800b87e:	2900      	cmp	r1, #0
 800b880:	f280 80db 	bge.w	800ba3a <__kernel_rem_pio2f+0x40a>
 800b884:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800b886:	2b03      	cmp	r3, #3
 800b888:	f200 80ff 	bhi.w	800ba8a <__kernel_rem_pio2f+0x45a>
 800b88c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b890:	01200102 	.word	0x01200102
 800b894:	00d90120 	.word	0x00d90120
 800b898:	2502      	movs	r5, #2
 800b89a:	e74a      	b.n	800b732 <__kernel_rem_pio2f+0x102>
 800b89c:	ab08      	add	r3, sp, #32
 800b89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a2:	f1b8 0f00 	cmp.w	r8, #0
 800b8a6:	d109      	bne.n	800b8bc <__kernel_rem_pio2f+0x28c>
 800b8a8:	b12b      	cbz	r3, 800b8b6 <__kernel_rem_pio2f+0x286>
 800b8aa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b8ae:	a908      	add	r1, sp, #32
 800b8b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	3201      	adds	r2, #1
 800b8b8:	4698      	mov	r8, r3
 800b8ba:	e73e      	b.n	800b73a <__kernel_rem_pio2f+0x10a>
 800b8bc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b8c0:	a908      	add	r1, sp, #32
 800b8c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b8c6:	4643      	mov	r3, r8
 800b8c8:	e7f5      	b.n	800b8b6 <__kernel_rem_pio2f+0x286>
 800b8ca:	1e7a      	subs	r2, r7, #1
 800b8cc:	ab08      	add	r3, sp, #32
 800b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d6:	a908      	add	r1, sp, #32
 800b8d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b8dc:	e738      	b.n	800b750 <__kernel_rem_pio2f+0x120>
 800b8de:	1e7a      	subs	r2, r7, #1
 800b8e0:	ab08      	add	r3, sp, #32
 800b8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8ea:	e7f4      	b.n	800b8d6 <__kernel_rem_pio2f+0x2a6>
 800b8ec:	a908      	add	r1, sp, #32
 800b8ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	e7a0      	b.n	800b83a <__kernel_rem_pio2f+0x20a>
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b8fe:	2900      	cmp	r1, #0
 800b900:	d0fa      	beq.n	800b8f8 <__kernel_rem_pio2f+0x2c8>
 800b902:	f06f 0803 	mvn.w	r8, #3
 800b906:	9a04      	ldr	r2, [sp, #16]
 800b908:	1c7d      	adds	r5, r7, #1
 800b90a:	18bc      	adds	r4, r7, r2
 800b90c:	aa1c      	add	r2, sp, #112	; 0x70
 800b90e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b912:	441f      	add	r7, r3
 800b914:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b918:	42af      	cmp	r7, r5
 800b91a:	f6ff aec8 	blt.w	800b6ae <__kernel_rem_pio2f+0x7e>
 800b91e:	9b06      	ldr	r3, [sp, #24]
 800b920:	f04f 0a00 	mov.w	sl, #0
 800b924:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b928:	f7f5 f9b8 	bl	8000c9c <__aeabi_i2f>
 800b92c:	f04f 0b00 	mov.w	fp, #0
 800b930:	6020      	str	r0, [r4, #0]
 800b932:	9b03      	ldr	r3, [sp, #12]
 800b934:	459a      	cmp	sl, r3
 800b936:	dd0b      	ble.n	800b950 <__kernel_rem_pio2f+0x320>
 800b938:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800b93c:	3404      	adds	r4, #4
 800b93e:	3501      	adds	r5, #1
 800b940:	e7ea      	b.n	800b918 <__kernel_rem_pio2f+0x2e8>
 800b942:	9a07      	ldr	r2, [sp, #28]
 800b944:	2301      	movs	r3, #1
 800b946:	e7d8      	b.n	800b8fa <__kernel_rem_pio2f+0x2ca>
 800b948:	0800e144 	.word	0x0800e144
 800b94c:	0800e118 	.word	0x0800e118
 800b950:	fb08 f30a 	mul.w	r3, r8, sl
 800b954:	9a05      	ldr	r2, [sp, #20]
 800b956:	58e0      	ldr	r0, [r4, r3]
 800b958:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800b95c:	f7f5 f9f2 	bl	8000d44 <__aeabi_fmul>
 800b960:	4601      	mov	r1, r0
 800b962:	4658      	mov	r0, fp
 800b964:	f7f5 f8e6 	bl	8000b34 <__addsf3>
 800b968:	f10a 0a01 	add.w	sl, sl, #1
 800b96c:	4683      	mov	fp, r0
 800b96e:	e7e0      	b.n	800b932 <__kernel_rem_pio2f+0x302>
 800b970:	3c01      	subs	r4, #1
 800b972:	e767      	b.n	800b844 <__kernel_rem_pio2f+0x214>
 800b974:	4271      	negs	r1, r6
 800b976:	4620      	mov	r0, r4
 800b978:	f000 fb44 	bl	800c004 <scalbnf>
 800b97c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b980:	4604      	mov	r4, r0
 800b982:	f7f5 fb91 	bl	80010a8 <__aeabi_fcmpge>
 800b986:	b1f8      	cbz	r0, 800b9c8 <__kernel_rem_pio2f+0x398>
 800b988:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b98c:	4620      	mov	r0, r4
 800b98e:	f7f5 f9d9 	bl	8000d44 <__aeabi_fmul>
 800b992:	f7f5 fbb3 	bl	80010fc <__aeabi_f2iz>
 800b996:	f7f5 f981 	bl	8000c9c <__aeabi_i2f>
 800b99a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b99e:	4680      	mov	r8, r0
 800b9a0:	f7f5 f9d0 	bl	8000d44 <__aeabi_fmul>
 800b9a4:	4601      	mov	r1, r0
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f7f5 f8c2 	bl	8000b30 <__aeabi_fsub>
 800b9ac:	f7f5 fba6 	bl	80010fc <__aeabi_f2iz>
 800b9b0:	ab08      	add	r3, sp, #32
 800b9b2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	f7f5 fba0 	bl	80010fc <__aeabi_f2iz>
 800b9bc:	1c7c      	adds	r4, r7, #1
 800b9be:	ab08      	add	r3, sp, #32
 800b9c0:	3608      	adds	r6, #8
 800b9c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b9c6:	e744      	b.n	800b852 <__kernel_rem_pio2f+0x222>
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7f5 fb97 	bl	80010fc <__aeabi_f2iz>
 800b9ce:	ab08      	add	r3, sp, #32
 800b9d0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b9d4:	463c      	mov	r4, r7
 800b9d6:	e73c      	b.n	800b852 <__kernel_rem_pio2f+0x222>
 800b9d8:	ab08      	add	r3, sp, #32
 800b9da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b9de:	f7f5 f95d 	bl	8000c9c <__aeabi_i2f>
 800b9e2:	4651      	mov	r1, sl
 800b9e4:	f7f5 f9ae 	bl	8000d44 <__aeabi_fmul>
 800b9e8:	4631      	mov	r1, r6
 800b9ea:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800b9ee:	4650      	mov	r0, sl
 800b9f0:	f7f5 f9a8 	bl	8000d44 <__aeabi_fmul>
 800b9f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9f8:	4682      	mov	sl, r0
 800b9fa:	e734      	b.n	800b866 <__kernel_rem_pio2f+0x236>
 800b9fc:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800ba00:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800ba04:	9304      	str	r3, [sp, #16]
 800ba06:	9203      	str	r2, [sp, #12]
 800ba08:	f7f5 f99c 	bl	8000d44 <__aeabi_fmul>
 800ba0c:	4601      	mov	r1, r0
 800ba0e:	4658      	mov	r0, fp
 800ba10:	f7f5 f890 	bl	8000b34 <__addsf3>
 800ba14:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800ba18:	4683      	mov	fp, r0
 800ba1a:	f108 0801 	add.w	r8, r8, #1
 800ba1e:	9902      	ldr	r1, [sp, #8]
 800ba20:	4588      	cmp	r8, r1
 800ba22:	dc01      	bgt.n	800ba28 <__kernel_rem_pio2f+0x3f8>
 800ba24:	45c2      	cmp	sl, r8
 800ba26:	dae9      	bge.n	800b9fc <__kernel_rem_pio2f+0x3cc>
 800ba28:	a958      	add	r1, sp, #352	; 0x160
 800ba2a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba2e:	f841 bca0 	str.w	fp, [r1, #-160]
 800ba32:	f10a 0a01 	add.w	sl, sl, #1
 800ba36:	3f04      	subs	r7, #4
 800ba38:	e71f      	b.n	800b87a <__kernel_rem_pio2f+0x24a>
 800ba3a:	469b      	mov	fp, r3
 800ba3c:	f04f 0800 	mov.w	r8, #0
 800ba40:	e7ed      	b.n	800ba1e <__kernel_rem_pio2f+0x3ee>
 800ba42:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800ba46:	4456      	add	r6, sl
 800ba48:	4637      	mov	r7, r6
 800ba4a:	46a0      	mov	r8, r4
 800ba4c:	f1b8 0f00 	cmp.w	r8, #0
 800ba50:	dc4a      	bgt.n	800bae8 <__kernel_rem_pio2f+0x4b8>
 800ba52:	4627      	mov	r7, r4
 800ba54:	2f01      	cmp	r7, #1
 800ba56:	dc60      	bgt.n	800bb1a <__kernel_rem_pio2f+0x4ea>
 800ba58:	2000      	movs	r0, #0
 800ba5a:	2c01      	cmp	r4, #1
 800ba5c:	dc74      	bgt.n	800bb48 <__kernel_rem_pio2f+0x518>
 800ba5e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800ba60:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800ba62:	2d00      	cmp	r5, #0
 800ba64:	d176      	bne.n	800bb54 <__kernel_rem_pio2f+0x524>
 800ba66:	9901      	ldr	r1, [sp, #4]
 800ba68:	600a      	str	r2, [r1, #0]
 800ba6a:	460a      	mov	r2, r1
 800ba6c:	604b      	str	r3, [r1, #4]
 800ba6e:	6090      	str	r0, [r2, #8]
 800ba70:	e00b      	b.n	800ba8a <__kernel_rem_pio2f+0x45a>
 800ba72:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800ba76:	f7f5 f85d 	bl	8000b34 <__addsf3>
 800ba7a:	3c01      	subs	r4, #1
 800ba7c:	2c00      	cmp	r4, #0
 800ba7e:	daf8      	bge.n	800ba72 <__kernel_rem_pio2f+0x442>
 800ba80:	b10d      	cbz	r5, 800ba86 <__kernel_rem_pio2f+0x456>
 800ba82:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ba86:	9b01      	ldr	r3, [sp, #4]
 800ba88:	6018      	str	r0, [r3, #0]
 800ba8a:	f009 0007 	and.w	r0, r9, #7
 800ba8e:	b059      	add	sp, #356	; 0x164
 800ba90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba94:	2000      	movs	r0, #0
 800ba96:	ae30      	add	r6, sp, #192	; 0xc0
 800ba98:	e7f0      	b.n	800ba7c <__kernel_rem_pio2f+0x44c>
 800ba9a:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800ba9e:	f7f5 f849 	bl	8000b34 <__addsf3>
 800baa2:	3e01      	subs	r6, #1
 800baa4:	2e00      	cmp	r6, #0
 800baa6:	daf8      	bge.n	800ba9a <__kernel_rem_pio2f+0x46a>
 800baa8:	b1b5      	cbz	r5, 800bad8 <__kernel_rem_pio2f+0x4a8>
 800baaa:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800baae:	9a01      	ldr	r2, [sp, #4]
 800bab0:	af58      	add	r7, sp, #352	; 0x160
 800bab2:	4601      	mov	r1, r0
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800baba:	f7f5 f839 	bl	8000b30 <__aeabi_fsub>
 800babe:	2601      	movs	r6, #1
 800bac0:	42b4      	cmp	r4, r6
 800bac2:	da0b      	bge.n	800badc <__kernel_rem_pio2f+0x4ac>
 800bac4:	b10d      	cbz	r5, 800baca <__kernel_rem_pio2f+0x49a>
 800bac6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800baca:	9b01      	ldr	r3, [sp, #4]
 800bacc:	6058      	str	r0, [r3, #4]
 800bace:	e7dc      	b.n	800ba8a <__kernel_rem_pio2f+0x45a>
 800bad0:	4626      	mov	r6, r4
 800bad2:	2000      	movs	r0, #0
 800bad4:	af30      	add	r7, sp, #192	; 0xc0
 800bad6:	e7e5      	b.n	800baa4 <__kernel_rem_pio2f+0x474>
 800bad8:	4603      	mov	r3, r0
 800bada:	e7e8      	b.n	800baae <__kernel_rem_pio2f+0x47e>
 800badc:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800bae0:	f7f5 f828 	bl	8000b34 <__addsf3>
 800bae4:	3601      	adds	r6, #1
 800bae6:	e7eb      	b.n	800bac0 <__kernel_rem_pio2f+0x490>
 800bae8:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 800baec:	f108 38ff 	add.w	r8, r8, #4294967295
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4610      	mov	r0, r2
 800baf4:	4619      	mov	r1, r3
 800baf6:	9303      	str	r3, [sp, #12]
 800baf8:	9202      	str	r2, [sp, #8]
 800bafa:	f7f5 f81b 	bl	8000b34 <__addsf3>
 800bafe:	9a02      	ldr	r2, [sp, #8]
 800bb00:	4601      	mov	r1, r0
 800bb02:	4683      	mov	fp, r0
 800bb04:	4610      	mov	r0, r2
 800bb06:	f7f5 f813 	bl	8000b30 <__aeabi_fsub>
 800bb0a:	9b03      	ldr	r3, [sp, #12]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	f7f5 f811 	bl	8000b34 <__addsf3>
 800bb12:	f8c7 b000 	str.w	fp, [r7]
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	e798      	b.n	800ba4c <__kernel_rem_pio2f+0x41c>
 800bb1a:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800bb1e:	3f01      	subs	r7, #1
 800bb20:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800bb24:	4618      	mov	r0, r3
 800bb26:	4659      	mov	r1, fp
 800bb28:	9302      	str	r3, [sp, #8]
 800bb2a:	f7f5 f803 	bl	8000b34 <__addsf3>
 800bb2e:	9b02      	ldr	r3, [sp, #8]
 800bb30:	4601      	mov	r1, r0
 800bb32:	4680      	mov	r8, r0
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7f4 fffb 	bl	8000b30 <__aeabi_fsub>
 800bb3a:	4659      	mov	r1, fp
 800bb3c:	f7f4 fffa 	bl	8000b34 <__addsf3>
 800bb40:	f8c6 8000 	str.w	r8, [r6]
 800bb44:	6070      	str	r0, [r6, #4]
 800bb46:	e785      	b.n	800ba54 <__kernel_rem_pio2f+0x424>
 800bb48:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800bb4c:	f7f4 fff2 	bl	8000b34 <__addsf3>
 800bb50:	3c01      	subs	r4, #1
 800bb52:	e782      	b.n	800ba5a <__kernel_rem_pio2f+0x42a>
 800bb54:	9901      	ldr	r1, [sp, #4]
 800bb56:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800bb5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb5e:	600a      	str	r2, [r1, #0]
 800bb60:	604b      	str	r3, [r1, #4]
 800bb62:	460a      	mov	r2, r1
 800bb64:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bb68:	e781      	b.n	800ba6e <__kernel_rem_pio2f+0x43e>
 800bb6a:	bf00      	nop

0800bb6c <__kernel_sinf>:
 800bb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb70:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800bb74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bb78:	4604      	mov	r4, r0
 800bb7a:	460f      	mov	r7, r1
 800bb7c:	4691      	mov	r9, r2
 800bb7e:	da03      	bge.n	800bb88 <__kernel_sinf+0x1c>
 800bb80:	f7f5 fabc 	bl	80010fc <__aeabi_f2iz>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d035      	beq.n	800bbf4 <__kernel_sinf+0x88>
 800bb88:	4621      	mov	r1, r4
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7f5 f8da 	bl	8000d44 <__aeabi_fmul>
 800bb90:	4605      	mov	r5, r0
 800bb92:	4601      	mov	r1, r0
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7f5 f8d5 	bl	8000d44 <__aeabi_fmul>
 800bb9a:	4929      	ldr	r1, [pc, #164]	; (800bc40 <__kernel_sinf+0xd4>)
 800bb9c:	4606      	mov	r6, r0
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f7f5 f8d0 	bl	8000d44 <__aeabi_fmul>
 800bba4:	4927      	ldr	r1, [pc, #156]	; (800bc44 <__kernel_sinf+0xd8>)
 800bba6:	f7f4 ffc3 	bl	8000b30 <__aeabi_fsub>
 800bbaa:	4629      	mov	r1, r5
 800bbac:	f7f5 f8ca 	bl	8000d44 <__aeabi_fmul>
 800bbb0:	4925      	ldr	r1, [pc, #148]	; (800bc48 <__kernel_sinf+0xdc>)
 800bbb2:	f7f4 ffbf 	bl	8000b34 <__addsf3>
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7f5 f8c4 	bl	8000d44 <__aeabi_fmul>
 800bbbc:	4923      	ldr	r1, [pc, #140]	; (800bc4c <__kernel_sinf+0xe0>)
 800bbbe:	f7f4 ffb7 	bl	8000b30 <__aeabi_fsub>
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	f7f5 f8be 	bl	8000d44 <__aeabi_fmul>
 800bbc8:	4921      	ldr	r1, [pc, #132]	; (800bc50 <__kernel_sinf+0xe4>)
 800bbca:	f7f4 ffb3 	bl	8000b34 <__addsf3>
 800bbce:	4680      	mov	r8, r0
 800bbd0:	f1b9 0f00 	cmp.w	r9, #0
 800bbd4:	d111      	bne.n	800bbfa <__kernel_sinf+0x8e>
 800bbd6:	4601      	mov	r1, r0
 800bbd8:	4628      	mov	r0, r5
 800bbda:	f7f5 f8b3 	bl	8000d44 <__aeabi_fmul>
 800bbde:	491d      	ldr	r1, [pc, #116]	; (800bc54 <__kernel_sinf+0xe8>)
 800bbe0:	f7f4 ffa6 	bl	8000b30 <__aeabi_fsub>
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	f7f5 f8ad 	bl	8000d44 <__aeabi_fmul>
 800bbea:	4601      	mov	r1, r0
 800bbec:	4620      	mov	r0, r4
 800bbee:	f7f4 ffa1 	bl	8000b34 <__addsf3>
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bbfe:	4638      	mov	r0, r7
 800bc00:	f7f5 f8a0 	bl	8000d44 <__aeabi_fmul>
 800bc04:	4641      	mov	r1, r8
 800bc06:	4681      	mov	r9, r0
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7f5 f89b 	bl	8000d44 <__aeabi_fmul>
 800bc0e:	4601      	mov	r1, r0
 800bc10:	4648      	mov	r0, r9
 800bc12:	f7f4 ff8d 	bl	8000b30 <__aeabi_fsub>
 800bc16:	4629      	mov	r1, r5
 800bc18:	f7f5 f894 	bl	8000d44 <__aeabi_fmul>
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	f7f4 ff87 	bl	8000b30 <__aeabi_fsub>
 800bc22:	490c      	ldr	r1, [pc, #48]	; (800bc54 <__kernel_sinf+0xe8>)
 800bc24:	4605      	mov	r5, r0
 800bc26:	4630      	mov	r0, r6
 800bc28:	f7f5 f88c 	bl	8000d44 <__aeabi_fmul>
 800bc2c:	4601      	mov	r1, r0
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f7f4 ff80 	bl	8000b34 <__addsf3>
 800bc34:	4601      	mov	r1, r0
 800bc36:	4620      	mov	r0, r4
 800bc38:	f7f4 ff7a 	bl	8000b30 <__aeabi_fsub>
 800bc3c:	e7d9      	b.n	800bbf2 <__kernel_sinf+0x86>
 800bc3e:	bf00      	nop
 800bc40:	2f2ec9d3 	.word	0x2f2ec9d3
 800bc44:	32d72f34 	.word	0x32d72f34
 800bc48:	3638ef1b 	.word	0x3638ef1b
 800bc4c:	39500d01 	.word	0x39500d01
 800bc50:	3c088889 	.word	0x3c088889
 800bc54:	3e2aaaab 	.word	0x3e2aaaab

0800bc58 <fabs>:
 800bc58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4770      	bx	lr

0800bc60 <finite>:
 800bc60:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800bc64:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800bc68:	0fc0      	lsrs	r0, r0, #31
 800bc6a:	4770      	bx	lr
 800bc6c:	0000      	movs	r0, r0
	...

0800bc70 <floor>:
 800bc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc74:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bc78:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800bc7c:	2e13      	cmp	r6, #19
 800bc7e:	4607      	mov	r7, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	460c      	mov	r4, r1
 800bc84:	4605      	mov	r5, r0
 800bc86:	dc35      	bgt.n	800bcf4 <floor+0x84>
 800bc88:	2e00      	cmp	r6, #0
 800bc8a:	da16      	bge.n	800bcba <floor+0x4a>
 800bc8c:	a336      	add	r3, pc, #216	; (adr r3, 800bd68 <floor+0xf8>)
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	f7f4 fa6b 	bl	800016c <__adddf3>
 800bc96:	2200      	movs	r2, #0
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f7f4 fead 	bl	80009f8 <__aeabi_dcmpgt>
 800bc9e:	b148      	cbz	r0, 800bcb4 <floor+0x44>
 800bca0:	2c00      	cmp	r4, #0
 800bca2:	da5b      	bge.n	800bd5c <floor+0xec>
 800bca4:	2500      	movs	r5, #0
 800bca6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bcaa:	4a31      	ldr	r2, [pc, #196]	; (800bd70 <floor+0x100>)
 800bcac:	433b      	orrs	r3, r7
 800bcae:	42ab      	cmp	r3, r5
 800bcb0:	bf18      	it	ne
 800bcb2:	4614      	movne	r4, r2
 800bcb4:	4623      	mov	r3, r4
 800bcb6:	462f      	mov	r7, r5
 800bcb8:	e026      	b.n	800bd08 <floor+0x98>
 800bcba:	4a2e      	ldr	r2, [pc, #184]	; (800bd74 <floor+0x104>)
 800bcbc:	fa42 f806 	asr.w	r8, r2, r6
 800bcc0:	ea01 0208 	and.w	r2, r1, r8
 800bcc4:	4302      	orrs	r2, r0
 800bcc6:	d01f      	beq.n	800bd08 <floor+0x98>
 800bcc8:	a327      	add	r3, pc, #156	; (adr r3, 800bd68 <floor+0xf8>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	f7f4 fa4d 	bl	800016c <__adddf3>
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f7f4 fe8f 	bl	80009f8 <__aeabi_dcmpgt>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d0ea      	beq.n	800bcb4 <floor+0x44>
 800bcde:	2c00      	cmp	r4, #0
 800bce0:	bfbe      	ittt	lt
 800bce2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bce6:	fa43 f606 	asrlt.w	r6, r3, r6
 800bcea:	19a4      	addlt	r4, r4, r6
 800bcec:	ea24 0408 	bic.w	r4, r4, r8
 800bcf0:	2500      	movs	r5, #0
 800bcf2:	e7df      	b.n	800bcb4 <floor+0x44>
 800bcf4:	2e33      	cmp	r6, #51	; 0x33
 800bcf6:	dd0b      	ble.n	800bd10 <floor+0xa0>
 800bcf8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bcfc:	d104      	bne.n	800bd08 <floor+0x98>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	f7f4 fa34 	bl	800016c <__adddf3>
 800bd04:	4607      	mov	r7, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	4638      	mov	r0, r7
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd10:	f04f 32ff 	mov.w	r2, #4294967295
 800bd14:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800bd18:	fa22 f808 	lsr.w	r8, r2, r8
 800bd1c:	ea18 0f00 	tst.w	r8, r0
 800bd20:	d0f2      	beq.n	800bd08 <floor+0x98>
 800bd22:	a311      	add	r3, pc, #68	; (adr r3, 800bd68 <floor+0xf8>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fa20 	bl	800016c <__adddf3>
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f7f4 fe62 	bl	80009f8 <__aeabi_dcmpgt>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d0bd      	beq.n	800bcb4 <floor+0x44>
 800bd38:	2c00      	cmp	r4, #0
 800bd3a:	da02      	bge.n	800bd42 <floor+0xd2>
 800bd3c:	2e14      	cmp	r6, #20
 800bd3e:	d103      	bne.n	800bd48 <floor+0xd8>
 800bd40:	3401      	adds	r4, #1
 800bd42:	ea25 0508 	bic.w	r5, r5, r8
 800bd46:	e7b5      	b.n	800bcb4 <floor+0x44>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bd4e:	fa03 f606 	lsl.w	r6, r3, r6
 800bd52:	4435      	add	r5, r6
 800bd54:	42bd      	cmp	r5, r7
 800bd56:	bf38      	it	cc
 800bd58:	18e4      	addcc	r4, r4, r3
 800bd5a:	e7f2      	b.n	800bd42 <floor+0xd2>
 800bd5c:	2500      	movs	r5, #0
 800bd5e:	462c      	mov	r4, r5
 800bd60:	e7a8      	b.n	800bcb4 <floor+0x44>
 800bd62:	bf00      	nop
 800bd64:	f3af 8000 	nop.w
 800bd68:	8800759c 	.word	0x8800759c
 800bd6c:	7e37e43c 	.word	0x7e37e43c
 800bd70:	bff00000 	.word	0xbff00000
 800bd74:	000fffff 	.word	0x000fffff

0800bd78 <matherr>:
 800bd78:	2000      	movs	r0, #0
 800bd7a:	4770      	bx	lr

0800bd7c <nan>:
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	4901      	ldr	r1, [pc, #4]	; (800bd84 <nan+0x8>)
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	7ff80000 	.word	0x7ff80000

0800bd88 <rint>:
 800bd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd8e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800bd92:	f1bc 0f13 	cmp.w	ip, #19
 800bd96:	4604      	mov	r4, r0
 800bd98:	460d      	mov	r5, r1
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800bda2:	dc5a      	bgt.n	800be5a <rint+0xd2>
 800bda4:	f1bc 0f00 	cmp.w	ip, #0
 800bda8:	da2b      	bge.n	800be02 <rint+0x7a>
 800bdaa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bdae:	4302      	orrs	r2, r0
 800bdb0:	d023      	beq.n	800bdfa <rint+0x72>
 800bdb2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800bdb6:	4302      	orrs	r2, r0
 800bdb8:	4256      	negs	r6, r2
 800bdba:	4316      	orrs	r6, r2
 800bdbc:	0c4b      	lsrs	r3, r1, #17
 800bdbe:	0b36      	lsrs	r6, r6, #12
 800bdc0:	4934      	ldr	r1, [pc, #208]	; (800be94 <rint+0x10c>)
 800bdc2:	045b      	lsls	r3, r3, #17
 800bdc4:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800bdc8:	ea46 0503 	orr.w	r5, r6, r3
 800bdcc:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	462b      	mov	r3, r5
 800bdd4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bdd8:	4620      	mov	r0, r4
 800bdda:	4629      	mov	r1, r5
 800bddc:	f7f4 f9c6 	bl	800016c <__adddf3>
 800bde0:	e9cd 0100 	strd	r0, r1, [sp]
 800bde4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bde8:	462b      	mov	r3, r5
 800bdea:	4622      	mov	r2, r4
 800bdec:	f7f4 f9bc 	bl	8000168 <__aeabi_dsub>
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdf6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	b003      	add	sp, #12
 800be00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be02:	4a25      	ldr	r2, [pc, #148]	; (800be98 <rint+0x110>)
 800be04:	fa42 f20c 	asr.w	r2, r2, ip
 800be08:	4011      	ands	r1, r2
 800be0a:	4301      	orrs	r1, r0
 800be0c:	d0f5      	beq.n	800bdfa <rint+0x72>
 800be0e:	0852      	lsrs	r2, r2, #1
 800be10:	ea05 0102 	and.w	r1, r5, r2
 800be14:	ea50 0601 	orrs.w	r6, r0, r1
 800be18:	d00c      	beq.n	800be34 <rint+0xac>
 800be1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800be1e:	f1bc 0f13 	cmp.w	ip, #19
 800be22:	bf0c      	ite	eq
 800be24:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800be28:	2600      	movne	r6, #0
 800be2a:	ea25 0202 	bic.w	r2, r5, r2
 800be2e:	fa43 f30c 	asr.w	r3, r3, ip
 800be32:	4313      	orrs	r3, r2
 800be34:	4917      	ldr	r1, [pc, #92]	; (800be94 <rint+0x10c>)
 800be36:	4632      	mov	r2, r6
 800be38:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800be3c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800be40:	4620      	mov	r0, r4
 800be42:	4629      	mov	r1, r5
 800be44:	f7f4 f992 	bl	800016c <__adddf3>
 800be48:	e9cd 0100 	strd	r0, r1, [sp]
 800be4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be50:	4622      	mov	r2, r4
 800be52:	462b      	mov	r3, r5
 800be54:	f7f4 f988 	bl	8000168 <__aeabi_dsub>
 800be58:	e008      	b.n	800be6c <rint+0xe4>
 800be5a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800be5e:	dd08      	ble.n	800be72 <rint+0xea>
 800be60:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800be64:	d1c9      	bne.n	800bdfa <rint+0x72>
 800be66:	4602      	mov	r2, r0
 800be68:	f7f4 f980 	bl	800016c <__adddf3>
 800be6c:	4604      	mov	r4, r0
 800be6e:	460d      	mov	r5, r1
 800be70:	e7c3      	b.n	800bdfa <rint+0x72>
 800be72:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800be76:	f04f 32ff 	mov.w	r2, #4294967295
 800be7a:	40ca      	lsrs	r2, r1
 800be7c:	4210      	tst	r0, r2
 800be7e:	d0bc      	beq.n	800bdfa <rint+0x72>
 800be80:	0852      	lsrs	r2, r2, #1
 800be82:	4210      	tst	r0, r2
 800be84:	bf1f      	itttt	ne
 800be86:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800be8a:	ea20 0202 	bicne.w	r2, r0, r2
 800be8e:	410e      	asrne	r6, r1
 800be90:	4316      	orrne	r6, r2
 800be92:	e7cf      	b.n	800be34 <rint+0xac>
 800be94:	0800e150 	.word	0x0800e150
 800be98:	000fffff 	.word	0x000fffff
 800be9c:	00000000 	.word	0x00000000

0800bea0 <scalbn>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	4616      	mov	r6, r2
 800bea4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bea8:	4604      	mov	r4, r0
 800beaa:	460d      	mov	r5, r1
 800beac:	460b      	mov	r3, r1
 800beae:	b982      	cbnz	r2, 800bed2 <scalbn+0x32>
 800beb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800beb4:	4303      	orrs	r3, r0
 800beb6:	d034      	beq.n	800bf22 <scalbn+0x82>
 800beb8:	4b2d      	ldr	r3, [pc, #180]	; (800bf70 <scalbn+0xd0>)
 800beba:	2200      	movs	r2, #0
 800bebc:	f7f4 fb0c 	bl	80004d8 <__aeabi_dmul>
 800bec0:	4b2c      	ldr	r3, [pc, #176]	; (800bf74 <scalbn+0xd4>)
 800bec2:	4604      	mov	r4, r0
 800bec4:	429e      	cmp	r6, r3
 800bec6:	460d      	mov	r5, r1
 800bec8:	da0d      	bge.n	800bee6 <scalbn+0x46>
 800beca:	a325      	add	r3, pc, #148	; (adr r3, 800bf60 <scalbn+0xc0>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	e01c      	b.n	800bf0c <scalbn+0x6c>
 800bed2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800bed6:	42ba      	cmp	r2, r7
 800bed8:	d109      	bne.n	800beee <scalbn+0x4e>
 800beda:	4602      	mov	r2, r0
 800bedc:	f7f4 f946 	bl	800016c <__adddf3>
 800bee0:	4604      	mov	r4, r0
 800bee2:	460d      	mov	r5, r1
 800bee4:	e01d      	b.n	800bf22 <scalbn+0x82>
 800bee6:	460b      	mov	r3, r1
 800bee8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800beec:	3a36      	subs	r2, #54	; 0x36
 800beee:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bef2:	4432      	add	r2, r6
 800bef4:	428a      	cmp	r2, r1
 800bef6:	dd0c      	ble.n	800bf12 <scalbn+0x72>
 800bef8:	4622      	mov	r2, r4
 800befa:	462b      	mov	r3, r5
 800befc:	a11a      	add	r1, pc, #104	; (adr r1, 800bf68 <scalbn+0xc8>)
 800befe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf02:	f000 f8cb 	bl	800c09c <copysign>
 800bf06:	a318      	add	r3, pc, #96	; (adr r3, 800bf68 <scalbn+0xc8>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 fae4 	bl	80004d8 <__aeabi_dmul>
 800bf10:	e7e6      	b.n	800bee0 <scalbn+0x40>
 800bf12:	2a00      	cmp	r2, #0
 800bf14:	dd08      	ble.n	800bf28 <scalbn+0x88>
 800bf16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf1e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf22:	4620      	mov	r0, r4
 800bf24:	4629      	mov	r1, r5
 800bf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf28:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bf2c:	da0b      	bge.n	800bf46 <scalbn+0xa6>
 800bf2e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bf32:	429e      	cmp	r6, r3
 800bf34:	4622      	mov	r2, r4
 800bf36:	462b      	mov	r3, r5
 800bf38:	dce0      	bgt.n	800befc <scalbn+0x5c>
 800bf3a:	a109      	add	r1, pc, #36	; (adr r1, 800bf60 <scalbn+0xc0>)
 800bf3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf40:	f000 f8ac 	bl	800c09c <copysign>
 800bf44:	e7c1      	b.n	800beca <scalbn+0x2a>
 800bf46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf4a:	3236      	adds	r2, #54	; 0x36
 800bf4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf54:	4620      	mov	r0, r4
 800bf56:	4629      	mov	r1, r5
 800bf58:	2200      	movs	r2, #0
 800bf5a:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <scalbn+0xd8>)
 800bf5c:	e7d6      	b.n	800bf0c <scalbn+0x6c>
 800bf5e:	bf00      	nop
 800bf60:	c2f8f359 	.word	0xc2f8f359
 800bf64:	01a56e1f 	.word	0x01a56e1f
 800bf68:	8800759c 	.word	0x8800759c
 800bf6c:	7e37e43c 	.word	0x7e37e43c
 800bf70:	43500000 	.word	0x43500000
 800bf74:	ffff3cb0 	.word	0xffff3cb0
 800bf78:	3c900000 	.word	0x3c900000

0800bf7c <fabsf>:
 800bf7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bf80:	4770      	bx	lr
	...

0800bf84 <floorf>:
 800bf84:	b570      	push	{r4, r5, r6, lr}
 800bf86:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800bf8a:	0df5      	lsrs	r5, r6, #23
 800bf8c:	3d7f      	subs	r5, #127	; 0x7f
 800bf8e:	2d16      	cmp	r5, #22
 800bf90:	4601      	mov	r1, r0
 800bf92:	4604      	mov	r4, r0
 800bf94:	dc26      	bgt.n	800bfe4 <floorf+0x60>
 800bf96:	2d00      	cmp	r5, #0
 800bf98:	da0e      	bge.n	800bfb8 <floorf+0x34>
 800bf9a:	4917      	ldr	r1, [pc, #92]	; (800bff8 <floorf+0x74>)
 800bf9c:	f7f4 fdca 	bl	8000b34 <__addsf3>
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	f7f5 f88b 	bl	80010bc <__aeabi_fcmpgt>
 800bfa6:	b128      	cbz	r0, 800bfb4 <floorf+0x30>
 800bfa8:	2c00      	cmp	r4, #0
 800bfaa:	da23      	bge.n	800bff4 <floorf+0x70>
 800bfac:	4b13      	ldr	r3, [pc, #76]	; (800bffc <floorf+0x78>)
 800bfae:	2e00      	cmp	r6, #0
 800bfb0:	bf18      	it	ne
 800bfb2:	461c      	movne	r4, r3
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	e01b      	b.n	800bff0 <floorf+0x6c>
 800bfb8:	4e11      	ldr	r6, [pc, #68]	; (800c000 <floorf+0x7c>)
 800bfba:	412e      	asrs	r6, r5
 800bfbc:	4230      	tst	r0, r6
 800bfbe:	d017      	beq.n	800bff0 <floorf+0x6c>
 800bfc0:	490d      	ldr	r1, [pc, #52]	; (800bff8 <floorf+0x74>)
 800bfc2:	f7f4 fdb7 	bl	8000b34 <__addsf3>
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	f7f5 f878 	bl	80010bc <__aeabi_fcmpgt>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d0f1      	beq.n	800bfb4 <floorf+0x30>
 800bfd0:	2c00      	cmp	r4, #0
 800bfd2:	bfbe      	ittt	lt
 800bfd4:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800bfd8:	fa43 f505 	asrlt.w	r5, r3, r5
 800bfdc:	1964      	addlt	r4, r4, r5
 800bfde:	ea24 0406 	bic.w	r4, r4, r6
 800bfe2:	e7e7      	b.n	800bfb4 <floorf+0x30>
 800bfe4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800bfe8:	d302      	bcc.n	800bff0 <floorf+0x6c>
 800bfea:	f7f4 fda3 	bl	8000b34 <__addsf3>
 800bfee:	4601      	mov	r1, r0
 800bff0:	4608      	mov	r0, r1
 800bff2:	bd70      	pop	{r4, r5, r6, pc}
 800bff4:	2400      	movs	r4, #0
 800bff6:	e7dd      	b.n	800bfb4 <floorf+0x30>
 800bff8:	7149f2ca 	.word	0x7149f2ca
 800bffc:	bf800000 	.word	0xbf800000
 800c000:	007fffff 	.word	0x007fffff

0800c004 <scalbnf>:
 800c004:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800c008:	b510      	push	{r4, lr}
 800c00a:	4602      	mov	r2, r0
 800c00c:	460c      	mov	r4, r1
 800c00e:	4601      	mov	r1, r0
 800c010:	d027      	beq.n	800c062 <scalbnf+0x5e>
 800c012:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c016:	d303      	bcc.n	800c020 <scalbnf+0x1c>
 800c018:	f7f4 fd8c 	bl	8000b34 <__addsf3>
 800c01c:	4602      	mov	r2, r0
 800c01e:	e020      	b.n	800c062 <scalbnf+0x5e>
 800c020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c024:	d215      	bcs.n	800c052 <scalbnf+0x4e>
 800c026:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800c02a:	f7f4 fe8b 	bl	8000d44 <__aeabi_fmul>
 800c02e:	4b18      	ldr	r3, [pc, #96]	; (800c090 <scalbnf+0x8c>)
 800c030:	4602      	mov	r2, r0
 800c032:	429c      	cmp	r4, r3
 800c034:	db22      	blt.n	800c07c <scalbnf+0x78>
 800c036:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c03a:	3b19      	subs	r3, #25
 800c03c:	4423      	add	r3, r4
 800c03e:	2bfe      	cmp	r3, #254	; 0xfe
 800c040:	dd09      	ble.n	800c056 <scalbnf+0x52>
 800c042:	4611      	mov	r1, r2
 800c044:	4813      	ldr	r0, [pc, #76]	; (800c094 <scalbnf+0x90>)
 800c046:	f000 f832 	bl	800c0ae <copysignf>
 800c04a:	4912      	ldr	r1, [pc, #72]	; (800c094 <scalbnf+0x90>)
 800c04c:	f7f4 fe7a 	bl	8000d44 <__aeabi_fmul>
 800c050:	e7e4      	b.n	800c01c <scalbnf+0x18>
 800c052:	0ddb      	lsrs	r3, r3, #23
 800c054:	e7f2      	b.n	800c03c <scalbnf+0x38>
 800c056:	2b00      	cmp	r3, #0
 800c058:	dd05      	ble.n	800c066 <scalbnf+0x62>
 800c05a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c05e:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800c062:	4610      	mov	r0, r2
 800c064:	bd10      	pop	{r4, pc}
 800c066:	f113 0f16 	cmn.w	r3, #22
 800c06a:	da09      	bge.n	800c080 <scalbnf+0x7c>
 800c06c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c070:	429c      	cmp	r4, r3
 800c072:	4611      	mov	r1, r2
 800c074:	dce6      	bgt.n	800c044 <scalbnf+0x40>
 800c076:	4808      	ldr	r0, [pc, #32]	; (800c098 <scalbnf+0x94>)
 800c078:	f000 f819 	bl	800c0ae <copysignf>
 800c07c:	4906      	ldr	r1, [pc, #24]	; (800c098 <scalbnf+0x94>)
 800c07e:	e7e5      	b.n	800c04c <scalbnf+0x48>
 800c080:	3319      	adds	r3, #25
 800c082:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c086:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800c08a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c08e:	e7dd      	b.n	800c04c <scalbnf+0x48>
 800c090:	ffff3cb0 	.word	0xffff3cb0
 800c094:	7149f2ca 	.word	0x7149f2ca
 800c098:	0da24260 	.word	0x0da24260

0800c09c <copysign>:
 800c09c:	b530      	push	{r4, r5, lr}
 800c09e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c0a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0a6:	ea42 0503 	orr.w	r5, r2, r3
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	bd30      	pop	{r4, r5, pc}

0800c0ae <copysignf>:
 800c0ae:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c0b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c0b6:	4308      	orrs	r0, r1
 800c0b8:	4770      	bx	lr

0800c0ba <abort>:
 800c0ba:	b508      	push	{r3, lr}
 800c0bc:	2006      	movs	r0, #6
 800c0be:	f000 f97d 	bl	800c3bc <raise>
 800c0c2:	2001      	movs	r0, #1
 800c0c4:	f7f5 fc8c 	bl	80019e0 <_exit>

0800c0c8 <__errno>:
 800c0c8:	4b01      	ldr	r3, [pc, #4]	; (800c0d0 <__errno+0x8>)
 800c0ca:	6818      	ldr	r0, [r3, #0]
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	20000728 	.word	0x20000728

0800c0d4 <__libc_init_array>:
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	2500      	movs	r5, #0
 800c0d8:	4e0c      	ldr	r6, [pc, #48]	; (800c10c <__libc_init_array+0x38>)
 800c0da:	4c0d      	ldr	r4, [pc, #52]	; (800c110 <__libc_init_array+0x3c>)
 800c0dc:	1ba4      	subs	r4, r4, r6
 800c0de:	10a4      	asrs	r4, r4, #2
 800c0e0:	42a5      	cmp	r5, r4
 800c0e2:	d109      	bne.n	800c0f8 <__libc_init_array+0x24>
 800c0e4:	f001 fa08 	bl	800d4f8 <_init>
 800c0e8:	2500      	movs	r5, #0
 800c0ea:	4e0a      	ldr	r6, [pc, #40]	; (800c114 <__libc_init_array+0x40>)
 800c0ec:	4c0a      	ldr	r4, [pc, #40]	; (800c118 <__libc_init_array+0x44>)
 800c0ee:	1ba4      	subs	r4, r4, r6
 800c0f0:	10a4      	asrs	r4, r4, #2
 800c0f2:	42a5      	cmp	r5, r4
 800c0f4:	d105      	bne.n	800c102 <__libc_init_array+0x2e>
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0fc:	4798      	blx	r3
 800c0fe:	3501      	adds	r5, #1
 800c100:	e7ee      	b.n	800c0e0 <__libc_init_array+0xc>
 800c102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c106:	4798      	blx	r3
 800c108:	3501      	adds	r5, #1
 800c10a:	e7f2      	b.n	800c0f2 <__libc_init_array+0x1e>
 800c10c:	0800e304 	.word	0x0800e304
 800c110:	0800e304 	.word	0x0800e304
 800c114:	0800e304 	.word	0x0800e304
 800c118:	0800e310 	.word	0x0800e310

0800c11c <malloc>:
 800c11c:	4b02      	ldr	r3, [pc, #8]	; (800c128 <malloc+0xc>)
 800c11e:	4601      	mov	r1, r0
 800c120:	6818      	ldr	r0, [r3, #0]
 800c122:	f000 b8a1 	b.w	800c268 <_malloc_r>
 800c126:	bf00      	nop
 800c128:	20000728 	.word	0x20000728

0800c12c <free>:
 800c12c:	4b02      	ldr	r3, [pc, #8]	; (800c138 <free+0xc>)
 800c12e:	4601      	mov	r1, r0
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	f000 b84d 	b.w	800c1d0 <_free_r>
 800c136:	bf00      	nop
 800c138:	20000728 	.word	0x20000728

0800c13c <memchr>:
 800c13c:	b510      	push	{r4, lr}
 800c13e:	b2c9      	uxtb	r1, r1
 800c140:	4402      	add	r2, r0
 800c142:	4290      	cmp	r0, r2
 800c144:	4603      	mov	r3, r0
 800c146:	d101      	bne.n	800c14c <memchr+0x10>
 800c148:	2300      	movs	r3, #0
 800c14a:	e003      	b.n	800c154 <memchr+0x18>
 800c14c:	781c      	ldrb	r4, [r3, #0]
 800c14e:	3001      	adds	r0, #1
 800c150:	428c      	cmp	r4, r1
 800c152:	d1f6      	bne.n	800c142 <memchr+0x6>
 800c154:	4618      	mov	r0, r3
 800c156:	bd10      	pop	{r4, pc}

0800c158 <memcmp>:
 800c158:	b530      	push	{r4, r5, lr}
 800c15a:	2400      	movs	r4, #0
 800c15c:	42a2      	cmp	r2, r4
 800c15e:	d101      	bne.n	800c164 <memcmp+0xc>
 800c160:	2000      	movs	r0, #0
 800c162:	e007      	b.n	800c174 <memcmp+0x1c>
 800c164:	5d03      	ldrb	r3, [r0, r4]
 800c166:	3401      	adds	r4, #1
 800c168:	190d      	adds	r5, r1, r4
 800c16a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800c16e:	42ab      	cmp	r3, r5
 800c170:	d0f4      	beq.n	800c15c <memcmp+0x4>
 800c172:	1b58      	subs	r0, r3, r5
 800c174:	bd30      	pop	{r4, r5, pc}

0800c176 <memcpy>:
 800c176:	b510      	push	{r4, lr}
 800c178:	1e43      	subs	r3, r0, #1
 800c17a:	440a      	add	r2, r1
 800c17c:	4291      	cmp	r1, r2
 800c17e:	d100      	bne.n	800c182 <memcpy+0xc>
 800c180:	bd10      	pop	{r4, pc}
 800c182:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c18a:	e7f7      	b.n	800c17c <memcpy+0x6>

0800c18c <memmove>:
 800c18c:	4288      	cmp	r0, r1
 800c18e:	b510      	push	{r4, lr}
 800c190:	eb01 0302 	add.w	r3, r1, r2
 800c194:	d807      	bhi.n	800c1a6 <memmove+0x1a>
 800c196:	1e42      	subs	r2, r0, #1
 800c198:	4299      	cmp	r1, r3
 800c19a:	d00a      	beq.n	800c1b2 <memmove+0x26>
 800c19c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c1a4:	e7f8      	b.n	800c198 <memmove+0xc>
 800c1a6:	4283      	cmp	r3, r0
 800c1a8:	d9f5      	bls.n	800c196 <memmove+0xa>
 800c1aa:	1881      	adds	r1, r0, r2
 800c1ac:	1ad2      	subs	r2, r2, r3
 800c1ae:	42d3      	cmn	r3, r2
 800c1b0:	d100      	bne.n	800c1b4 <memmove+0x28>
 800c1b2:	bd10      	pop	{r4, pc}
 800c1b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c1bc:	e7f7      	b.n	800c1ae <memmove+0x22>

0800c1be <memset>:
 800c1be:	4603      	mov	r3, r0
 800c1c0:	4402      	add	r2, r0
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d100      	bne.n	800c1c8 <memset+0xa>
 800c1c6:	4770      	bx	lr
 800c1c8:	f803 1b01 	strb.w	r1, [r3], #1
 800c1cc:	e7f9      	b.n	800c1c2 <memset+0x4>
	...

0800c1d0 <_free_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	2900      	cmp	r1, #0
 800c1d6:	d043      	beq.n	800c260 <_free_r+0x90>
 800c1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1dc:	1f0c      	subs	r4, r1, #4
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	bfb8      	it	lt
 800c1e2:	18e4      	addlt	r4, r4, r3
 800c1e4:	f000 fab1 	bl	800c74a <__malloc_lock>
 800c1e8:	4a1e      	ldr	r2, [pc, #120]	; (800c264 <_free_r+0x94>)
 800c1ea:	6813      	ldr	r3, [r2, #0]
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	b933      	cbnz	r3, 800c1fe <_free_r+0x2e>
 800c1f0:	6063      	str	r3, [r4, #4]
 800c1f2:	6014      	str	r4, [r2, #0]
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1fa:	f000 baa7 	b.w	800c74c <__malloc_unlock>
 800c1fe:	42a3      	cmp	r3, r4
 800c200:	d90b      	bls.n	800c21a <_free_r+0x4a>
 800c202:	6821      	ldr	r1, [r4, #0]
 800c204:	1862      	adds	r2, r4, r1
 800c206:	4293      	cmp	r3, r2
 800c208:	bf01      	itttt	eq
 800c20a:	681a      	ldreq	r2, [r3, #0]
 800c20c:	685b      	ldreq	r3, [r3, #4]
 800c20e:	1852      	addeq	r2, r2, r1
 800c210:	6022      	streq	r2, [r4, #0]
 800c212:	6063      	str	r3, [r4, #4]
 800c214:	6004      	str	r4, [r0, #0]
 800c216:	e7ed      	b.n	800c1f4 <_free_r+0x24>
 800c218:	4613      	mov	r3, r2
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	b10a      	cbz	r2, 800c222 <_free_r+0x52>
 800c21e:	42a2      	cmp	r2, r4
 800c220:	d9fa      	bls.n	800c218 <_free_r+0x48>
 800c222:	6819      	ldr	r1, [r3, #0]
 800c224:	1858      	adds	r0, r3, r1
 800c226:	42a0      	cmp	r0, r4
 800c228:	d10b      	bne.n	800c242 <_free_r+0x72>
 800c22a:	6820      	ldr	r0, [r4, #0]
 800c22c:	4401      	add	r1, r0
 800c22e:	1858      	adds	r0, r3, r1
 800c230:	4282      	cmp	r2, r0
 800c232:	6019      	str	r1, [r3, #0]
 800c234:	d1de      	bne.n	800c1f4 <_free_r+0x24>
 800c236:	6810      	ldr	r0, [r2, #0]
 800c238:	6852      	ldr	r2, [r2, #4]
 800c23a:	4401      	add	r1, r0
 800c23c:	6019      	str	r1, [r3, #0]
 800c23e:	605a      	str	r2, [r3, #4]
 800c240:	e7d8      	b.n	800c1f4 <_free_r+0x24>
 800c242:	d902      	bls.n	800c24a <_free_r+0x7a>
 800c244:	230c      	movs	r3, #12
 800c246:	602b      	str	r3, [r5, #0]
 800c248:	e7d4      	b.n	800c1f4 <_free_r+0x24>
 800c24a:	6820      	ldr	r0, [r4, #0]
 800c24c:	1821      	adds	r1, r4, r0
 800c24e:	428a      	cmp	r2, r1
 800c250:	bf01      	itttt	eq
 800c252:	6811      	ldreq	r1, [r2, #0]
 800c254:	6852      	ldreq	r2, [r2, #4]
 800c256:	1809      	addeq	r1, r1, r0
 800c258:	6021      	streq	r1, [r4, #0]
 800c25a:	6062      	str	r2, [r4, #4]
 800c25c:	605c      	str	r4, [r3, #4]
 800c25e:	e7c9      	b.n	800c1f4 <_free_r+0x24>
 800c260:	bd38      	pop	{r3, r4, r5, pc}
 800c262:	bf00      	nop
 800c264:	20001504 	.word	0x20001504

0800c268 <_malloc_r>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	1ccd      	adds	r5, r1, #3
 800c26c:	f025 0503 	bic.w	r5, r5, #3
 800c270:	3508      	adds	r5, #8
 800c272:	2d0c      	cmp	r5, #12
 800c274:	bf38      	it	cc
 800c276:	250c      	movcc	r5, #12
 800c278:	2d00      	cmp	r5, #0
 800c27a:	4606      	mov	r6, r0
 800c27c:	db01      	blt.n	800c282 <_malloc_r+0x1a>
 800c27e:	42a9      	cmp	r1, r5
 800c280:	d903      	bls.n	800c28a <_malloc_r+0x22>
 800c282:	230c      	movs	r3, #12
 800c284:	6033      	str	r3, [r6, #0]
 800c286:	2000      	movs	r0, #0
 800c288:	bd70      	pop	{r4, r5, r6, pc}
 800c28a:	f000 fa5e 	bl	800c74a <__malloc_lock>
 800c28e:	4a21      	ldr	r2, [pc, #132]	; (800c314 <_malloc_r+0xac>)
 800c290:	6814      	ldr	r4, [r2, #0]
 800c292:	4621      	mov	r1, r4
 800c294:	b991      	cbnz	r1, 800c2bc <_malloc_r+0x54>
 800c296:	4c20      	ldr	r4, [pc, #128]	; (800c318 <_malloc_r+0xb0>)
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	b91b      	cbnz	r3, 800c2a4 <_malloc_r+0x3c>
 800c29c:	4630      	mov	r0, r6
 800c29e:	f000 f855 	bl	800c34c <_sbrk_r>
 800c2a2:	6020      	str	r0, [r4, #0]
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f000 f850 	bl	800c34c <_sbrk_r>
 800c2ac:	1c43      	adds	r3, r0, #1
 800c2ae:	d124      	bne.n	800c2fa <_malloc_r+0x92>
 800c2b0:	230c      	movs	r3, #12
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	6033      	str	r3, [r6, #0]
 800c2b6:	f000 fa49 	bl	800c74c <__malloc_unlock>
 800c2ba:	e7e4      	b.n	800c286 <_malloc_r+0x1e>
 800c2bc:	680b      	ldr	r3, [r1, #0]
 800c2be:	1b5b      	subs	r3, r3, r5
 800c2c0:	d418      	bmi.n	800c2f4 <_malloc_r+0x8c>
 800c2c2:	2b0b      	cmp	r3, #11
 800c2c4:	d90f      	bls.n	800c2e6 <_malloc_r+0x7e>
 800c2c6:	600b      	str	r3, [r1, #0]
 800c2c8:	18cc      	adds	r4, r1, r3
 800c2ca:	50cd      	str	r5, [r1, r3]
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f000 fa3d 	bl	800c74c <__malloc_unlock>
 800c2d2:	f104 000b 	add.w	r0, r4, #11
 800c2d6:	1d23      	adds	r3, r4, #4
 800c2d8:	f020 0007 	bic.w	r0, r0, #7
 800c2dc:	1ac3      	subs	r3, r0, r3
 800c2de:	d0d3      	beq.n	800c288 <_malloc_r+0x20>
 800c2e0:	425a      	negs	r2, r3
 800c2e2:	50e2      	str	r2, [r4, r3]
 800c2e4:	e7d0      	b.n	800c288 <_malloc_r+0x20>
 800c2e6:	684b      	ldr	r3, [r1, #4]
 800c2e8:	428c      	cmp	r4, r1
 800c2ea:	bf16      	itet	ne
 800c2ec:	6063      	strne	r3, [r4, #4]
 800c2ee:	6013      	streq	r3, [r2, #0]
 800c2f0:	460c      	movne	r4, r1
 800c2f2:	e7eb      	b.n	800c2cc <_malloc_r+0x64>
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	6849      	ldr	r1, [r1, #4]
 800c2f8:	e7cc      	b.n	800c294 <_malloc_r+0x2c>
 800c2fa:	1cc4      	adds	r4, r0, #3
 800c2fc:	f024 0403 	bic.w	r4, r4, #3
 800c300:	42a0      	cmp	r0, r4
 800c302:	d005      	beq.n	800c310 <_malloc_r+0xa8>
 800c304:	1a21      	subs	r1, r4, r0
 800c306:	4630      	mov	r0, r6
 800c308:	f000 f820 	bl	800c34c <_sbrk_r>
 800c30c:	3001      	adds	r0, #1
 800c30e:	d0cf      	beq.n	800c2b0 <_malloc_r+0x48>
 800c310:	6025      	str	r5, [r4, #0]
 800c312:	e7db      	b.n	800c2cc <_malloc_r+0x64>
 800c314:	20001504 	.word	0x20001504
 800c318:	20001508 	.word	0x20001508

0800c31c <iprintf>:
 800c31c:	b40f      	push	{r0, r1, r2, r3}
 800c31e:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <iprintf+0x2c>)
 800c320:	b513      	push	{r0, r1, r4, lr}
 800c322:	681c      	ldr	r4, [r3, #0]
 800c324:	b124      	cbz	r4, 800c330 <iprintf+0x14>
 800c326:	69a3      	ldr	r3, [r4, #24]
 800c328:	b913      	cbnz	r3, 800c330 <iprintf+0x14>
 800c32a:	4620      	mov	r0, r4
 800c32c:	f000 f96e 	bl	800c60c <__sinit>
 800c330:	ab05      	add	r3, sp, #20
 800c332:	9a04      	ldr	r2, [sp, #16]
 800c334:	68a1      	ldr	r1, [r4, #8]
 800c336:	4620      	mov	r0, r4
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	f000 fb83 	bl	800ca44 <_vfiprintf_r>
 800c33e:	b002      	add	sp, #8
 800c340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c344:	b004      	add	sp, #16
 800c346:	4770      	bx	lr
 800c348:	20000728 	.word	0x20000728

0800c34c <_sbrk_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	2300      	movs	r3, #0
 800c350:	4c05      	ldr	r4, [pc, #20]	; (800c368 <_sbrk_r+0x1c>)
 800c352:	4605      	mov	r5, r0
 800c354:	4608      	mov	r0, r1
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	f7f5 fb70 	bl	8001a3c <_sbrk>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_sbrk_r+0x1a>
 800c360:	6823      	ldr	r3, [r4, #0]
 800c362:	b103      	cbz	r3, 800c366 <_sbrk_r+0x1a>
 800c364:	602b      	str	r3, [r5, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	20002198 	.word	0x20002198

0800c36c <_raise_r>:
 800c36c:	291f      	cmp	r1, #31
 800c36e:	b538      	push	{r3, r4, r5, lr}
 800c370:	4604      	mov	r4, r0
 800c372:	460d      	mov	r5, r1
 800c374:	d904      	bls.n	800c380 <_raise_r+0x14>
 800c376:	2316      	movs	r3, #22
 800c378:	6003      	str	r3, [r0, #0]
 800c37a:	f04f 30ff 	mov.w	r0, #4294967295
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c382:	b112      	cbz	r2, 800c38a <_raise_r+0x1e>
 800c384:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c388:	b94b      	cbnz	r3, 800c39e <_raise_r+0x32>
 800c38a:	4620      	mov	r0, r4
 800c38c:	f000 f830 	bl	800c3f0 <_getpid_r>
 800c390:	462a      	mov	r2, r5
 800c392:	4601      	mov	r1, r0
 800c394:	4620      	mov	r0, r4
 800c396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c39a:	f000 b817 	b.w	800c3cc <_kill_r>
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d00a      	beq.n	800c3b8 <_raise_r+0x4c>
 800c3a2:	1c59      	adds	r1, r3, #1
 800c3a4:	d103      	bne.n	800c3ae <_raise_r+0x42>
 800c3a6:	2316      	movs	r3, #22
 800c3a8:	6003      	str	r3, [r0, #0]
 800c3aa:	2001      	movs	r0, #1
 800c3ac:	e7e7      	b.n	800c37e <_raise_r+0x12>
 800c3ae:	2400      	movs	r4, #0
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3b6:	4798      	blx	r3
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	e7e0      	b.n	800c37e <_raise_r+0x12>

0800c3bc <raise>:
 800c3bc:	4b02      	ldr	r3, [pc, #8]	; (800c3c8 <raise+0xc>)
 800c3be:	4601      	mov	r1, r0
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	f7ff bfd3 	b.w	800c36c <_raise_r>
 800c3c6:	bf00      	nop
 800c3c8:	20000728 	.word	0x20000728

0800c3cc <_kill_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	4c06      	ldr	r4, [pc, #24]	; (800c3ec <_kill_r+0x20>)
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	f7f5 faf9 	bl	80019d0 <_kill>
 800c3de:	1c43      	adds	r3, r0, #1
 800c3e0:	d102      	bne.n	800c3e8 <_kill_r+0x1c>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	b103      	cbz	r3, 800c3e8 <_kill_r+0x1c>
 800c3e6:	602b      	str	r3, [r5, #0]
 800c3e8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20002198 	.word	0x20002198

0800c3f0 <_getpid_r>:
 800c3f0:	f7f5 baec 	b.w	80019cc <_getpid>

0800c3f4 <_strtol_l.isra.0>:
 800c3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f8:	4680      	mov	r8, r0
 800c3fa:	4689      	mov	r9, r1
 800c3fc:	4692      	mov	sl, r2
 800c3fe:	461e      	mov	r6, r3
 800c400:	460f      	mov	r7, r1
 800c402:	463d      	mov	r5, r7
 800c404:	9808      	ldr	r0, [sp, #32]
 800c406:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c40a:	f000 f989 	bl	800c720 <__locale_ctype_ptr_l>
 800c40e:	4420      	add	r0, r4
 800c410:	7843      	ldrb	r3, [r0, #1]
 800c412:	f013 0308 	ands.w	r3, r3, #8
 800c416:	d132      	bne.n	800c47e <_strtol_l.isra.0+0x8a>
 800c418:	2c2d      	cmp	r4, #45	; 0x2d
 800c41a:	d132      	bne.n	800c482 <_strtol_l.isra.0+0x8e>
 800c41c:	2201      	movs	r2, #1
 800c41e:	787c      	ldrb	r4, [r7, #1]
 800c420:	1cbd      	adds	r5, r7, #2
 800c422:	2e00      	cmp	r6, #0
 800c424:	d05d      	beq.n	800c4e2 <_strtol_l.isra.0+0xee>
 800c426:	2e10      	cmp	r6, #16
 800c428:	d109      	bne.n	800c43e <_strtol_l.isra.0+0x4a>
 800c42a:	2c30      	cmp	r4, #48	; 0x30
 800c42c:	d107      	bne.n	800c43e <_strtol_l.isra.0+0x4a>
 800c42e:	782b      	ldrb	r3, [r5, #0]
 800c430:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c434:	2b58      	cmp	r3, #88	; 0x58
 800c436:	d14f      	bne.n	800c4d8 <_strtol_l.isra.0+0xe4>
 800c438:	2610      	movs	r6, #16
 800c43a:	786c      	ldrb	r4, [r5, #1]
 800c43c:	3502      	adds	r5, #2
 800c43e:	2a00      	cmp	r2, #0
 800c440:	bf14      	ite	ne
 800c442:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c446:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c44a:	2700      	movs	r7, #0
 800c44c:	fbb1 fcf6 	udiv	ip, r1, r6
 800c450:	4638      	mov	r0, r7
 800c452:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c456:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c45a:	2b09      	cmp	r3, #9
 800c45c:	d817      	bhi.n	800c48e <_strtol_l.isra.0+0x9a>
 800c45e:	461c      	mov	r4, r3
 800c460:	42a6      	cmp	r6, r4
 800c462:	dd23      	ble.n	800c4ac <_strtol_l.isra.0+0xb8>
 800c464:	1c7b      	adds	r3, r7, #1
 800c466:	d007      	beq.n	800c478 <_strtol_l.isra.0+0x84>
 800c468:	4584      	cmp	ip, r0
 800c46a:	d31c      	bcc.n	800c4a6 <_strtol_l.isra.0+0xb2>
 800c46c:	d101      	bne.n	800c472 <_strtol_l.isra.0+0x7e>
 800c46e:	45a6      	cmp	lr, r4
 800c470:	db19      	blt.n	800c4a6 <_strtol_l.isra.0+0xb2>
 800c472:	2701      	movs	r7, #1
 800c474:	fb00 4006 	mla	r0, r0, r6, r4
 800c478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c47c:	e7eb      	b.n	800c456 <_strtol_l.isra.0+0x62>
 800c47e:	462f      	mov	r7, r5
 800c480:	e7bf      	b.n	800c402 <_strtol_l.isra.0+0xe>
 800c482:	2c2b      	cmp	r4, #43	; 0x2b
 800c484:	bf04      	itt	eq
 800c486:	1cbd      	addeq	r5, r7, #2
 800c488:	787c      	ldrbeq	r4, [r7, #1]
 800c48a:	461a      	mov	r2, r3
 800c48c:	e7c9      	b.n	800c422 <_strtol_l.isra.0+0x2e>
 800c48e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c492:	2b19      	cmp	r3, #25
 800c494:	d801      	bhi.n	800c49a <_strtol_l.isra.0+0xa6>
 800c496:	3c37      	subs	r4, #55	; 0x37
 800c498:	e7e2      	b.n	800c460 <_strtol_l.isra.0+0x6c>
 800c49a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c49e:	2b19      	cmp	r3, #25
 800c4a0:	d804      	bhi.n	800c4ac <_strtol_l.isra.0+0xb8>
 800c4a2:	3c57      	subs	r4, #87	; 0x57
 800c4a4:	e7dc      	b.n	800c460 <_strtol_l.isra.0+0x6c>
 800c4a6:	f04f 37ff 	mov.w	r7, #4294967295
 800c4aa:	e7e5      	b.n	800c478 <_strtol_l.isra.0+0x84>
 800c4ac:	1c7b      	adds	r3, r7, #1
 800c4ae:	d108      	bne.n	800c4c2 <_strtol_l.isra.0+0xce>
 800c4b0:	2322      	movs	r3, #34	; 0x22
 800c4b2:	4608      	mov	r0, r1
 800c4b4:	f8c8 3000 	str.w	r3, [r8]
 800c4b8:	f1ba 0f00 	cmp.w	sl, #0
 800c4bc:	d107      	bne.n	800c4ce <_strtol_l.isra.0+0xda>
 800c4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c2:	b102      	cbz	r2, 800c4c6 <_strtol_l.isra.0+0xd2>
 800c4c4:	4240      	negs	r0, r0
 800c4c6:	f1ba 0f00 	cmp.w	sl, #0
 800c4ca:	d0f8      	beq.n	800c4be <_strtol_l.isra.0+0xca>
 800c4cc:	b10f      	cbz	r7, 800c4d2 <_strtol_l.isra.0+0xde>
 800c4ce:	f105 39ff 	add.w	r9, r5, #4294967295
 800c4d2:	f8ca 9000 	str.w	r9, [sl]
 800c4d6:	e7f2      	b.n	800c4be <_strtol_l.isra.0+0xca>
 800c4d8:	2430      	movs	r4, #48	; 0x30
 800c4da:	2e00      	cmp	r6, #0
 800c4dc:	d1af      	bne.n	800c43e <_strtol_l.isra.0+0x4a>
 800c4de:	2608      	movs	r6, #8
 800c4e0:	e7ad      	b.n	800c43e <_strtol_l.isra.0+0x4a>
 800c4e2:	2c30      	cmp	r4, #48	; 0x30
 800c4e4:	d0a3      	beq.n	800c42e <_strtol_l.isra.0+0x3a>
 800c4e6:	260a      	movs	r6, #10
 800c4e8:	e7a9      	b.n	800c43e <_strtol_l.isra.0+0x4a>
	...

0800c4ec <strtol>:
 800c4ec:	4b08      	ldr	r3, [pc, #32]	; (800c510 <strtol+0x24>)
 800c4ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4f0:	681c      	ldr	r4, [r3, #0]
 800c4f2:	4d08      	ldr	r5, [pc, #32]	; (800c514 <strtol+0x28>)
 800c4f4:	6a23      	ldr	r3, [r4, #32]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	bf08      	it	eq
 800c4fa:	462b      	moveq	r3, r5
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	4613      	mov	r3, r2
 800c500:	460a      	mov	r2, r1
 800c502:	4601      	mov	r1, r0
 800c504:	4620      	mov	r0, r4
 800c506:	f7ff ff75 	bl	800c3f4 <_strtol_l.isra.0>
 800c50a:	b003      	add	sp, #12
 800c50c:	bd30      	pop	{r4, r5, pc}
 800c50e:	bf00      	nop
 800c510:	20000728 	.word	0x20000728
 800c514:	2000078c 	.word	0x2000078c

0800c518 <_vsniprintf_r>:
 800c518:	b530      	push	{r4, r5, lr}
 800c51a:	1e14      	subs	r4, r2, #0
 800c51c:	4605      	mov	r5, r0
 800c51e:	b09b      	sub	sp, #108	; 0x6c
 800c520:	4618      	mov	r0, r3
 800c522:	da05      	bge.n	800c530 <_vsniprintf_r+0x18>
 800c524:	238b      	movs	r3, #139	; 0x8b
 800c526:	f04f 30ff 	mov.w	r0, #4294967295
 800c52a:	602b      	str	r3, [r5, #0]
 800c52c:	b01b      	add	sp, #108	; 0x6c
 800c52e:	bd30      	pop	{r4, r5, pc}
 800c530:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c534:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c538:	bf0c      	ite	eq
 800c53a:	4623      	moveq	r3, r4
 800c53c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c540:	9302      	str	r3, [sp, #8]
 800c542:	9305      	str	r3, [sp, #20]
 800c544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c548:	9100      	str	r1, [sp, #0]
 800c54a:	9104      	str	r1, [sp, #16]
 800c54c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c550:	4602      	mov	r2, r0
 800c552:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c554:	4669      	mov	r1, sp
 800c556:	4628      	mov	r0, r5
 800c558:	f000 f954 	bl	800c804 <_svfiprintf_r>
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	bfbc      	itt	lt
 800c560:	238b      	movlt	r3, #139	; 0x8b
 800c562:	602b      	strlt	r3, [r5, #0]
 800c564:	2c00      	cmp	r4, #0
 800c566:	d0e1      	beq.n	800c52c <_vsniprintf_r+0x14>
 800c568:	2200      	movs	r2, #0
 800c56a:	9b00      	ldr	r3, [sp, #0]
 800c56c:	701a      	strb	r2, [r3, #0]
 800c56e:	e7dd      	b.n	800c52c <_vsniprintf_r+0x14>

0800c570 <vsniprintf>:
 800c570:	b507      	push	{r0, r1, r2, lr}
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	460a      	mov	r2, r1
 800c578:	4601      	mov	r1, r0
 800c57a:	4803      	ldr	r0, [pc, #12]	; (800c588 <vsniprintf+0x18>)
 800c57c:	6800      	ldr	r0, [r0, #0]
 800c57e:	f7ff ffcb 	bl	800c518 <_vsniprintf_r>
 800c582:	b003      	add	sp, #12
 800c584:	f85d fb04 	ldr.w	pc, [sp], #4
 800c588:	20000728 	.word	0x20000728

0800c58c <std>:
 800c58c:	2300      	movs	r3, #0
 800c58e:	b510      	push	{r4, lr}
 800c590:	4604      	mov	r4, r0
 800c592:	e9c0 3300 	strd	r3, r3, [r0]
 800c596:	6083      	str	r3, [r0, #8]
 800c598:	8181      	strh	r1, [r0, #12]
 800c59a:	6643      	str	r3, [r0, #100]	; 0x64
 800c59c:	81c2      	strh	r2, [r0, #14]
 800c59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5a2:	6183      	str	r3, [r0, #24]
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	2208      	movs	r2, #8
 800c5a8:	305c      	adds	r0, #92	; 0x5c
 800c5aa:	f7ff fe08 	bl	800c1be <memset>
 800c5ae:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <std+0x38>)
 800c5b0:	6224      	str	r4, [r4, #32]
 800c5b2:	6263      	str	r3, [r4, #36]	; 0x24
 800c5b4:	4b04      	ldr	r3, [pc, #16]	; (800c5c8 <std+0x3c>)
 800c5b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5b8:	4b04      	ldr	r3, [pc, #16]	; (800c5cc <std+0x40>)
 800c5ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5bc:	4b04      	ldr	r3, [pc, #16]	; (800c5d0 <std+0x44>)
 800c5be:	6323      	str	r3, [r4, #48]	; 0x30
 800c5c0:	bd10      	pop	{r4, pc}
 800c5c2:	bf00      	nop
 800c5c4:	0800cf81 	.word	0x0800cf81
 800c5c8:	0800cfa3 	.word	0x0800cfa3
 800c5cc:	0800cfdb 	.word	0x0800cfdb
 800c5d0:	0800cfff 	.word	0x0800cfff

0800c5d4 <_cleanup_r>:
 800c5d4:	4901      	ldr	r1, [pc, #4]	; (800c5dc <_cleanup_r+0x8>)
 800c5d6:	f000 b885 	b.w	800c6e4 <_fwalk_reent>
 800c5da:	bf00      	nop
 800c5dc:	0800d2f5 	.word	0x0800d2f5

0800c5e0 <__sfmoreglue>:
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	2568      	movs	r5, #104	; 0x68
 800c5e4:	1e4a      	subs	r2, r1, #1
 800c5e6:	4355      	muls	r5, r2
 800c5e8:	460e      	mov	r6, r1
 800c5ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5ee:	f7ff fe3b 	bl	800c268 <_malloc_r>
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	b140      	cbz	r0, 800c608 <__sfmoreglue+0x28>
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	e9c0 1600 	strd	r1, r6, [r0]
 800c5fc:	300c      	adds	r0, #12
 800c5fe:	60a0      	str	r0, [r4, #8]
 800c600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c604:	f7ff fddb 	bl	800c1be <memset>
 800c608:	4620      	mov	r0, r4
 800c60a:	bd70      	pop	{r4, r5, r6, pc}

0800c60c <__sinit>:
 800c60c:	6983      	ldr	r3, [r0, #24]
 800c60e:	b510      	push	{r4, lr}
 800c610:	4604      	mov	r4, r0
 800c612:	bb33      	cbnz	r3, 800c662 <__sinit+0x56>
 800c614:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c618:	6503      	str	r3, [r0, #80]	; 0x50
 800c61a:	4b12      	ldr	r3, [pc, #72]	; (800c664 <__sinit+0x58>)
 800c61c:	4a12      	ldr	r2, [pc, #72]	; (800c668 <__sinit+0x5c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6282      	str	r2, [r0, #40]	; 0x28
 800c622:	4298      	cmp	r0, r3
 800c624:	bf04      	itt	eq
 800c626:	2301      	moveq	r3, #1
 800c628:	6183      	streq	r3, [r0, #24]
 800c62a:	f000 f81f 	bl	800c66c <__sfp>
 800c62e:	6060      	str	r0, [r4, #4]
 800c630:	4620      	mov	r0, r4
 800c632:	f000 f81b 	bl	800c66c <__sfp>
 800c636:	60a0      	str	r0, [r4, #8]
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 f817 	bl	800c66c <__sfp>
 800c63e:	2200      	movs	r2, #0
 800c640:	60e0      	str	r0, [r4, #12]
 800c642:	2104      	movs	r1, #4
 800c644:	6860      	ldr	r0, [r4, #4]
 800c646:	f7ff ffa1 	bl	800c58c <std>
 800c64a:	2201      	movs	r2, #1
 800c64c:	2109      	movs	r1, #9
 800c64e:	68a0      	ldr	r0, [r4, #8]
 800c650:	f7ff ff9c 	bl	800c58c <std>
 800c654:	2202      	movs	r2, #2
 800c656:	2112      	movs	r1, #18
 800c658:	68e0      	ldr	r0, [r4, #12]
 800c65a:	f7ff ff97 	bl	800c58c <std>
 800c65e:	2301      	movs	r3, #1
 800c660:	61a3      	str	r3, [r4, #24]
 800c662:	bd10      	pop	{r4, pc}
 800c664:	0800e160 	.word	0x0800e160
 800c668:	0800c5d5 	.word	0x0800c5d5

0800c66c <__sfp>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	4b1b      	ldr	r3, [pc, #108]	; (800c6dc <__sfp+0x70>)
 800c670:	4607      	mov	r7, r0
 800c672:	681e      	ldr	r6, [r3, #0]
 800c674:	69b3      	ldr	r3, [r6, #24]
 800c676:	b913      	cbnz	r3, 800c67e <__sfp+0x12>
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff ffc7 	bl	800c60c <__sinit>
 800c67e:	3648      	adds	r6, #72	; 0x48
 800c680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c684:	3b01      	subs	r3, #1
 800c686:	d503      	bpl.n	800c690 <__sfp+0x24>
 800c688:	6833      	ldr	r3, [r6, #0]
 800c68a:	b133      	cbz	r3, 800c69a <__sfp+0x2e>
 800c68c:	6836      	ldr	r6, [r6, #0]
 800c68e:	e7f7      	b.n	800c680 <__sfp+0x14>
 800c690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c694:	b16d      	cbz	r5, 800c6b2 <__sfp+0x46>
 800c696:	3468      	adds	r4, #104	; 0x68
 800c698:	e7f4      	b.n	800c684 <__sfp+0x18>
 800c69a:	2104      	movs	r1, #4
 800c69c:	4638      	mov	r0, r7
 800c69e:	f7ff ff9f 	bl	800c5e0 <__sfmoreglue>
 800c6a2:	6030      	str	r0, [r6, #0]
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d1f1      	bne.n	800c68c <__sfp+0x20>
 800c6a8:	230c      	movs	r3, #12
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	603b      	str	r3, [r7, #0]
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b2:	4b0b      	ldr	r3, [pc, #44]	; (800c6e0 <__sfp+0x74>)
 800c6b4:	6665      	str	r5, [r4, #100]	; 0x64
 800c6b6:	e9c4 5500 	strd	r5, r5, [r4]
 800c6ba:	60a5      	str	r5, [r4, #8]
 800c6bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c6c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6cc:	f7ff fd77 	bl	800c1be <memset>
 800c6d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6d8:	e7e9      	b.n	800c6ae <__sfp+0x42>
 800c6da:	bf00      	nop
 800c6dc:	0800e160 	.word	0x0800e160
 800c6e0:	ffff0001 	.word	0xffff0001

0800c6e4 <_fwalk_reent>:
 800c6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6e8:	4680      	mov	r8, r0
 800c6ea:	4689      	mov	r9, r1
 800c6ec:	2600      	movs	r6, #0
 800c6ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6f2:	b914      	cbnz	r4, 800c6fa <_fwalk_reent+0x16>
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c6fe:	3f01      	subs	r7, #1
 800c700:	d501      	bpl.n	800c706 <_fwalk_reent+0x22>
 800c702:	6824      	ldr	r4, [r4, #0]
 800c704:	e7f5      	b.n	800c6f2 <_fwalk_reent+0xe>
 800c706:	89ab      	ldrh	r3, [r5, #12]
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d907      	bls.n	800c71c <_fwalk_reent+0x38>
 800c70c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c710:	3301      	adds	r3, #1
 800c712:	d003      	beq.n	800c71c <_fwalk_reent+0x38>
 800c714:	4629      	mov	r1, r5
 800c716:	4640      	mov	r0, r8
 800c718:	47c8      	blx	r9
 800c71a:	4306      	orrs	r6, r0
 800c71c:	3568      	adds	r5, #104	; 0x68
 800c71e:	e7ee      	b.n	800c6fe <_fwalk_reent+0x1a>

0800c720 <__locale_ctype_ptr_l>:
 800c720:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c724:	4770      	bx	lr

0800c726 <__ascii_mbtowc>:
 800c726:	b082      	sub	sp, #8
 800c728:	b901      	cbnz	r1, 800c72c <__ascii_mbtowc+0x6>
 800c72a:	a901      	add	r1, sp, #4
 800c72c:	b142      	cbz	r2, 800c740 <__ascii_mbtowc+0x1a>
 800c72e:	b14b      	cbz	r3, 800c744 <__ascii_mbtowc+0x1e>
 800c730:	7813      	ldrb	r3, [r2, #0]
 800c732:	600b      	str	r3, [r1, #0]
 800c734:	7812      	ldrb	r2, [r2, #0]
 800c736:	1c10      	adds	r0, r2, #0
 800c738:	bf18      	it	ne
 800c73a:	2001      	movne	r0, #1
 800c73c:	b002      	add	sp, #8
 800c73e:	4770      	bx	lr
 800c740:	4610      	mov	r0, r2
 800c742:	e7fb      	b.n	800c73c <__ascii_mbtowc+0x16>
 800c744:	f06f 0001 	mvn.w	r0, #1
 800c748:	e7f8      	b.n	800c73c <__ascii_mbtowc+0x16>

0800c74a <__malloc_lock>:
 800c74a:	4770      	bx	lr

0800c74c <__malloc_unlock>:
 800c74c:	4770      	bx	lr

0800c74e <__ssputs_r>:
 800c74e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c752:	688e      	ldr	r6, [r1, #8]
 800c754:	4682      	mov	sl, r0
 800c756:	429e      	cmp	r6, r3
 800c758:	460c      	mov	r4, r1
 800c75a:	4690      	mov	r8, r2
 800c75c:	4699      	mov	r9, r3
 800c75e:	d837      	bhi.n	800c7d0 <__ssputs_r+0x82>
 800c760:	898a      	ldrh	r2, [r1, #12]
 800c762:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c766:	d031      	beq.n	800c7cc <__ssputs_r+0x7e>
 800c768:	2302      	movs	r3, #2
 800c76a:	6825      	ldr	r5, [r4, #0]
 800c76c:	6909      	ldr	r1, [r1, #16]
 800c76e:	1a6f      	subs	r7, r5, r1
 800c770:	6965      	ldr	r5, [r4, #20]
 800c772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c776:	fb95 f5f3 	sdiv	r5, r5, r3
 800c77a:	f109 0301 	add.w	r3, r9, #1
 800c77e:	443b      	add	r3, r7
 800c780:	429d      	cmp	r5, r3
 800c782:	bf38      	it	cc
 800c784:	461d      	movcc	r5, r3
 800c786:	0553      	lsls	r3, r2, #21
 800c788:	d530      	bpl.n	800c7ec <__ssputs_r+0x9e>
 800c78a:	4629      	mov	r1, r5
 800c78c:	f7ff fd6c 	bl	800c268 <_malloc_r>
 800c790:	4606      	mov	r6, r0
 800c792:	b950      	cbnz	r0, 800c7aa <__ssputs_r+0x5c>
 800c794:	230c      	movs	r3, #12
 800c796:	f04f 30ff 	mov.w	r0, #4294967295
 800c79a:	f8ca 3000 	str.w	r3, [sl]
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a4:	81a3      	strh	r3, [r4, #12]
 800c7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7aa:	463a      	mov	r2, r7
 800c7ac:	6921      	ldr	r1, [r4, #16]
 800c7ae:	f7ff fce2 	bl	800c176 <memcpy>
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7bc:	81a3      	strh	r3, [r4, #12]
 800c7be:	6126      	str	r6, [r4, #16]
 800c7c0:	443e      	add	r6, r7
 800c7c2:	6026      	str	r6, [r4, #0]
 800c7c4:	464e      	mov	r6, r9
 800c7c6:	6165      	str	r5, [r4, #20]
 800c7c8:	1bed      	subs	r5, r5, r7
 800c7ca:	60a5      	str	r5, [r4, #8]
 800c7cc:	454e      	cmp	r6, r9
 800c7ce:	d900      	bls.n	800c7d2 <__ssputs_r+0x84>
 800c7d0:	464e      	mov	r6, r9
 800c7d2:	4632      	mov	r2, r6
 800c7d4:	4641      	mov	r1, r8
 800c7d6:	6820      	ldr	r0, [r4, #0]
 800c7d8:	f7ff fcd8 	bl	800c18c <memmove>
 800c7dc:	68a3      	ldr	r3, [r4, #8]
 800c7de:	2000      	movs	r0, #0
 800c7e0:	1b9b      	subs	r3, r3, r6
 800c7e2:	60a3      	str	r3, [r4, #8]
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	441e      	add	r6, r3
 800c7e8:	6026      	str	r6, [r4, #0]
 800c7ea:	e7dc      	b.n	800c7a6 <__ssputs_r+0x58>
 800c7ec:	462a      	mov	r2, r5
 800c7ee:	f000 fe21 	bl	800d434 <_realloc_r>
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d1e2      	bne.n	800c7be <__ssputs_r+0x70>
 800c7f8:	6921      	ldr	r1, [r4, #16]
 800c7fa:	4650      	mov	r0, sl
 800c7fc:	f7ff fce8 	bl	800c1d0 <_free_r>
 800c800:	e7c8      	b.n	800c794 <__ssputs_r+0x46>
	...

0800c804 <_svfiprintf_r>:
 800c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	461d      	mov	r5, r3
 800c80a:	898b      	ldrh	r3, [r1, #12]
 800c80c:	b09d      	sub	sp, #116	; 0x74
 800c80e:	061f      	lsls	r7, r3, #24
 800c810:	4680      	mov	r8, r0
 800c812:	460c      	mov	r4, r1
 800c814:	4616      	mov	r6, r2
 800c816:	d50f      	bpl.n	800c838 <_svfiprintf_r+0x34>
 800c818:	690b      	ldr	r3, [r1, #16]
 800c81a:	b96b      	cbnz	r3, 800c838 <_svfiprintf_r+0x34>
 800c81c:	2140      	movs	r1, #64	; 0x40
 800c81e:	f7ff fd23 	bl	800c268 <_malloc_r>
 800c822:	6020      	str	r0, [r4, #0]
 800c824:	6120      	str	r0, [r4, #16]
 800c826:	b928      	cbnz	r0, 800c834 <_svfiprintf_r+0x30>
 800c828:	230c      	movs	r3, #12
 800c82a:	f8c8 3000 	str.w	r3, [r8]
 800c82e:	f04f 30ff 	mov.w	r0, #4294967295
 800c832:	e0c8      	b.n	800c9c6 <_svfiprintf_r+0x1c2>
 800c834:	2340      	movs	r3, #64	; 0x40
 800c836:	6163      	str	r3, [r4, #20]
 800c838:	2300      	movs	r3, #0
 800c83a:	9309      	str	r3, [sp, #36]	; 0x24
 800c83c:	2320      	movs	r3, #32
 800c83e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c842:	2330      	movs	r3, #48	; 0x30
 800c844:	f04f 0b01 	mov.w	fp, #1
 800c848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c84c:	9503      	str	r5, [sp, #12]
 800c84e:	4637      	mov	r7, r6
 800c850:	463d      	mov	r5, r7
 800c852:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c856:	b10b      	cbz	r3, 800c85c <_svfiprintf_r+0x58>
 800c858:	2b25      	cmp	r3, #37	; 0x25
 800c85a:	d13e      	bne.n	800c8da <_svfiprintf_r+0xd6>
 800c85c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c860:	d00b      	beq.n	800c87a <_svfiprintf_r+0x76>
 800c862:	4653      	mov	r3, sl
 800c864:	4632      	mov	r2, r6
 800c866:	4621      	mov	r1, r4
 800c868:	4640      	mov	r0, r8
 800c86a:	f7ff ff70 	bl	800c74e <__ssputs_r>
 800c86e:	3001      	adds	r0, #1
 800c870:	f000 80a4 	beq.w	800c9bc <_svfiprintf_r+0x1b8>
 800c874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c876:	4453      	add	r3, sl
 800c878:	9309      	str	r3, [sp, #36]	; 0x24
 800c87a:	783b      	ldrb	r3, [r7, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 809d 	beq.w	800c9bc <_svfiprintf_r+0x1b8>
 800c882:	2300      	movs	r3, #0
 800c884:	f04f 32ff 	mov.w	r2, #4294967295
 800c888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c88c:	9304      	str	r3, [sp, #16]
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c894:	931a      	str	r3, [sp, #104]	; 0x68
 800c896:	462f      	mov	r7, r5
 800c898:	2205      	movs	r2, #5
 800c89a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c89e:	4850      	ldr	r0, [pc, #320]	; (800c9e0 <_svfiprintf_r+0x1dc>)
 800c8a0:	f7ff fc4c 	bl	800c13c <memchr>
 800c8a4:	9b04      	ldr	r3, [sp, #16]
 800c8a6:	b9d0      	cbnz	r0, 800c8de <_svfiprintf_r+0xda>
 800c8a8:	06d9      	lsls	r1, r3, #27
 800c8aa:	bf44      	itt	mi
 800c8ac:	2220      	movmi	r2, #32
 800c8ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8b2:	071a      	lsls	r2, r3, #28
 800c8b4:	bf44      	itt	mi
 800c8b6:	222b      	movmi	r2, #43	; 0x2b
 800c8b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8bc:	782a      	ldrb	r2, [r5, #0]
 800c8be:	2a2a      	cmp	r2, #42	; 0x2a
 800c8c0:	d015      	beq.n	800c8ee <_svfiprintf_r+0xea>
 800c8c2:	462f      	mov	r7, r5
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	250a      	movs	r5, #10
 800c8c8:	9a07      	ldr	r2, [sp, #28]
 800c8ca:	4639      	mov	r1, r7
 800c8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d0:	3b30      	subs	r3, #48	; 0x30
 800c8d2:	2b09      	cmp	r3, #9
 800c8d4:	d94d      	bls.n	800c972 <_svfiprintf_r+0x16e>
 800c8d6:	b1b8      	cbz	r0, 800c908 <_svfiprintf_r+0x104>
 800c8d8:	e00f      	b.n	800c8fa <_svfiprintf_r+0xf6>
 800c8da:	462f      	mov	r7, r5
 800c8dc:	e7b8      	b.n	800c850 <_svfiprintf_r+0x4c>
 800c8de:	4a40      	ldr	r2, [pc, #256]	; (800c9e0 <_svfiprintf_r+0x1dc>)
 800c8e0:	463d      	mov	r5, r7
 800c8e2:	1a80      	subs	r0, r0, r2
 800c8e4:	fa0b f000 	lsl.w	r0, fp, r0
 800c8e8:	4318      	orrs	r0, r3
 800c8ea:	9004      	str	r0, [sp, #16]
 800c8ec:	e7d3      	b.n	800c896 <_svfiprintf_r+0x92>
 800c8ee:	9a03      	ldr	r2, [sp, #12]
 800c8f0:	1d11      	adds	r1, r2, #4
 800c8f2:	6812      	ldr	r2, [r2, #0]
 800c8f4:	9103      	str	r1, [sp, #12]
 800c8f6:	2a00      	cmp	r2, #0
 800c8f8:	db01      	blt.n	800c8fe <_svfiprintf_r+0xfa>
 800c8fa:	9207      	str	r2, [sp, #28]
 800c8fc:	e004      	b.n	800c908 <_svfiprintf_r+0x104>
 800c8fe:	4252      	negs	r2, r2
 800c900:	f043 0302 	orr.w	r3, r3, #2
 800c904:	9207      	str	r2, [sp, #28]
 800c906:	9304      	str	r3, [sp, #16]
 800c908:	783b      	ldrb	r3, [r7, #0]
 800c90a:	2b2e      	cmp	r3, #46	; 0x2e
 800c90c:	d10c      	bne.n	800c928 <_svfiprintf_r+0x124>
 800c90e:	787b      	ldrb	r3, [r7, #1]
 800c910:	2b2a      	cmp	r3, #42	; 0x2a
 800c912:	d133      	bne.n	800c97c <_svfiprintf_r+0x178>
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	3702      	adds	r7, #2
 800c918:	1d1a      	adds	r2, r3, #4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	9203      	str	r2, [sp, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfb8      	it	lt
 800c922:	f04f 33ff 	movlt.w	r3, #4294967295
 800c926:	9305      	str	r3, [sp, #20]
 800c928:	4d2e      	ldr	r5, [pc, #184]	; (800c9e4 <_svfiprintf_r+0x1e0>)
 800c92a:	2203      	movs	r2, #3
 800c92c:	7839      	ldrb	r1, [r7, #0]
 800c92e:	4628      	mov	r0, r5
 800c930:	f7ff fc04 	bl	800c13c <memchr>
 800c934:	b138      	cbz	r0, 800c946 <_svfiprintf_r+0x142>
 800c936:	2340      	movs	r3, #64	; 0x40
 800c938:	1b40      	subs	r0, r0, r5
 800c93a:	fa03 f000 	lsl.w	r0, r3, r0
 800c93e:	9b04      	ldr	r3, [sp, #16]
 800c940:	3701      	adds	r7, #1
 800c942:	4303      	orrs	r3, r0
 800c944:	9304      	str	r3, [sp, #16]
 800c946:	7839      	ldrb	r1, [r7, #0]
 800c948:	2206      	movs	r2, #6
 800c94a:	4827      	ldr	r0, [pc, #156]	; (800c9e8 <_svfiprintf_r+0x1e4>)
 800c94c:	1c7e      	adds	r6, r7, #1
 800c94e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c952:	f7ff fbf3 	bl	800c13c <memchr>
 800c956:	2800      	cmp	r0, #0
 800c958:	d038      	beq.n	800c9cc <_svfiprintf_r+0x1c8>
 800c95a:	4b24      	ldr	r3, [pc, #144]	; (800c9ec <_svfiprintf_r+0x1e8>)
 800c95c:	bb13      	cbnz	r3, 800c9a4 <_svfiprintf_r+0x1a0>
 800c95e:	9b03      	ldr	r3, [sp, #12]
 800c960:	3307      	adds	r3, #7
 800c962:	f023 0307 	bic.w	r3, r3, #7
 800c966:	3308      	adds	r3, #8
 800c968:	9303      	str	r3, [sp, #12]
 800c96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c96c:	444b      	add	r3, r9
 800c96e:	9309      	str	r3, [sp, #36]	; 0x24
 800c970:	e76d      	b.n	800c84e <_svfiprintf_r+0x4a>
 800c972:	fb05 3202 	mla	r2, r5, r2, r3
 800c976:	2001      	movs	r0, #1
 800c978:	460f      	mov	r7, r1
 800c97a:	e7a6      	b.n	800c8ca <_svfiprintf_r+0xc6>
 800c97c:	2300      	movs	r3, #0
 800c97e:	250a      	movs	r5, #10
 800c980:	4619      	mov	r1, r3
 800c982:	3701      	adds	r7, #1
 800c984:	9305      	str	r3, [sp, #20]
 800c986:	4638      	mov	r0, r7
 800c988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c98c:	3a30      	subs	r2, #48	; 0x30
 800c98e:	2a09      	cmp	r2, #9
 800c990:	d903      	bls.n	800c99a <_svfiprintf_r+0x196>
 800c992:	2b00      	cmp	r3, #0
 800c994:	d0c8      	beq.n	800c928 <_svfiprintf_r+0x124>
 800c996:	9105      	str	r1, [sp, #20]
 800c998:	e7c6      	b.n	800c928 <_svfiprintf_r+0x124>
 800c99a:	fb05 2101 	mla	r1, r5, r1, r2
 800c99e:	2301      	movs	r3, #1
 800c9a0:	4607      	mov	r7, r0
 800c9a2:	e7f0      	b.n	800c986 <_svfiprintf_r+0x182>
 800c9a4:	ab03      	add	r3, sp, #12
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	4622      	mov	r2, r4
 800c9aa:	4b11      	ldr	r3, [pc, #68]	; (800c9f0 <_svfiprintf_r+0x1ec>)
 800c9ac:	a904      	add	r1, sp, #16
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	f3af 8000 	nop.w
 800c9b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c9b8:	4681      	mov	r9, r0
 800c9ba:	d1d6      	bne.n	800c96a <_svfiprintf_r+0x166>
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	065b      	lsls	r3, r3, #25
 800c9c0:	f53f af35 	bmi.w	800c82e <_svfiprintf_r+0x2a>
 800c9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9c6:	b01d      	add	sp, #116	; 0x74
 800c9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9cc:	ab03      	add	r3, sp, #12
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	4622      	mov	r2, r4
 800c9d2:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <_svfiprintf_r+0x1ec>)
 800c9d4:	a904      	add	r1, sp, #16
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	f000 f9c0 	bl	800cd5c <_printf_i>
 800c9dc:	e7ea      	b.n	800c9b4 <_svfiprintf_r+0x1b0>
 800c9de:	bf00      	nop
 800c9e0:	0800e1ce 	.word	0x0800e1ce
 800c9e4:	0800e1d4 	.word	0x0800e1d4
 800c9e8:	0800e1d8 	.word	0x0800e1d8
 800c9ec:	00000000 	.word	0x00000000
 800c9f0:	0800c74f 	.word	0x0800c74f

0800c9f4 <__sfputc_r>:
 800c9f4:	6893      	ldr	r3, [r2, #8]
 800c9f6:	b410      	push	{r4}
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	6093      	str	r3, [r2, #8]
 800c9fe:	da07      	bge.n	800ca10 <__sfputc_r+0x1c>
 800ca00:	6994      	ldr	r4, [r2, #24]
 800ca02:	42a3      	cmp	r3, r4
 800ca04:	db01      	blt.n	800ca0a <__sfputc_r+0x16>
 800ca06:	290a      	cmp	r1, #10
 800ca08:	d102      	bne.n	800ca10 <__sfputc_r+0x1c>
 800ca0a:	bc10      	pop	{r4}
 800ca0c:	f000 bafc 	b.w	800d008 <__swbuf_r>
 800ca10:	6813      	ldr	r3, [r2, #0]
 800ca12:	1c58      	adds	r0, r3, #1
 800ca14:	6010      	str	r0, [r2, #0]
 800ca16:	7019      	strb	r1, [r3, #0]
 800ca18:	4608      	mov	r0, r1
 800ca1a:	bc10      	pop	{r4}
 800ca1c:	4770      	bx	lr

0800ca1e <__sfputs_r>:
 800ca1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca20:	4606      	mov	r6, r0
 800ca22:	460f      	mov	r7, r1
 800ca24:	4614      	mov	r4, r2
 800ca26:	18d5      	adds	r5, r2, r3
 800ca28:	42ac      	cmp	r4, r5
 800ca2a:	d101      	bne.n	800ca30 <__sfputs_r+0x12>
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	e007      	b.n	800ca40 <__sfputs_r+0x22>
 800ca30:	463a      	mov	r2, r7
 800ca32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7ff ffdc 	bl	800c9f4 <__sfputc_r>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	d1f3      	bne.n	800ca28 <__sfputs_r+0xa>
 800ca40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca44 <_vfiprintf_r>:
 800ca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca48:	460c      	mov	r4, r1
 800ca4a:	b09d      	sub	sp, #116	; 0x74
 800ca4c:	4617      	mov	r7, r2
 800ca4e:	461d      	mov	r5, r3
 800ca50:	4606      	mov	r6, r0
 800ca52:	b118      	cbz	r0, 800ca5c <_vfiprintf_r+0x18>
 800ca54:	6983      	ldr	r3, [r0, #24]
 800ca56:	b90b      	cbnz	r3, 800ca5c <_vfiprintf_r+0x18>
 800ca58:	f7ff fdd8 	bl	800c60c <__sinit>
 800ca5c:	4b7c      	ldr	r3, [pc, #496]	; (800cc50 <_vfiprintf_r+0x20c>)
 800ca5e:	429c      	cmp	r4, r3
 800ca60:	d158      	bne.n	800cb14 <_vfiprintf_r+0xd0>
 800ca62:	6874      	ldr	r4, [r6, #4]
 800ca64:	89a3      	ldrh	r3, [r4, #12]
 800ca66:	0718      	lsls	r0, r3, #28
 800ca68:	d55e      	bpl.n	800cb28 <_vfiprintf_r+0xe4>
 800ca6a:	6923      	ldr	r3, [r4, #16]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d05b      	beq.n	800cb28 <_vfiprintf_r+0xe4>
 800ca70:	2300      	movs	r3, #0
 800ca72:	9309      	str	r3, [sp, #36]	; 0x24
 800ca74:	2320      	movs	r3, #32
 800ca76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca7a:	2330      	movs	r3, #48	; 0x30
 800ca7c:	f04f 0b01 	mov.w	fp, #1
 800ca80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca84:	9503      	str	r5, [sp, #12]
 800ca86:	46b8      	mov	r8, r7
 800ca88:	4645      	mov	r5, r8
 800ca8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca8e:	b10b      	cbz	r3, 800ca94 <_vfiprintf_r+0x50>
 800ca90:	2b25      	cmp	r3, #37	; 0x25
 800ca92:	d154      	bne.n	800cb3e <_vfiprintf_r+0xfa>
 800ca94:	ebb8 0a07 	subs.w	sl, r8, r7
 800ca98:	d00b      	beq.n	800cab2 <_vfiprintf_r+0x6e>
 800ca9a:	4653      	mov	r3, sl
 800ca9c:	463a      	mov	r2, r7
 800ca9e:	4621      	mov	r1, r4
 800caa0:	4630      	mov	r0, r6
 800caa2:	f7ff ffbc 	bl	800ca1e <__sfputs_r>
 800caa6:	3001      	adds	r0, #1
 800caa8:	f000 80c2 	beq.w	800cc30 <_vfiprintf_r+0x1ec>
 800caac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caae:	4453      	add	r3, sl
 800cab0:	9309      	str	r3, [sp, #36]	; 0x24
 800cab2:	f898 3000 	ldrb.w	r3, [r8]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 80ba 	beq.w	800cc30 <_vfiprintf_r+0x1ec>
 800cabc:	2300      	movs	r3, #0
 800cabe:	f04f 32ff 	mov.w	r2, #4294967295
 800cac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cac6:	9304      	str	r3, [sp, #16]
 800cac8:	9307      	str	r3, [sp, #28]
 800caca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cace:	931a      	str	r3, [sp, #104]	; 0x68
 800cad0:	46a8      	mov	r8, r5
 800cad2:	2205      	movs	r2, #5
 800cad4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cad8:	485e      	ldr	r0, [pc, #376]	; (800cc54 <_vfiprintf_r+0x210>)
 800cada:	f7ff fb2f 	bl	800c13c <memchr>
 800cade:	9b04      	ldr	r3, [sp, #16]
 800cae0:	bb78      	cbnz	r0, 800cb42 <_vfiprintf_r+0xfe>
 800cae2:	06d9      	lsls	r1, r3, #27
 800cae4:	bf44      	itt	mi
 800cae6:	2220      	movmi	r2, #32
 800cae8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800caec:	071a      	lsls	r2, r3, #28
 800caee:	bf44      	itt	mi
 800caf0:	222b      	movmi	r2, #43	; 0x2b
 800caf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800caf6:	782a      	ldrb	r2, [r5, #0]
 800caf8:	2a2a      	cmp	r2, #42	; 0x2a
 800cafa:	d02a      	beq.n	800cb52 <_vfiprintf_r+0x10e>
 800cafc:	46a8      	mov	r8, r5
 800cafe:	2000      	movs	r0, #0
 800cb00:	250a      	movs	r5, #10
 800cb02:	9a07      	ldr	r2, [sp, #28]
 800cb04:	4641      	mov	r1, r8
 800cb06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb0a:	3b30      	subs	r3, #48	; 0x30
 800cb0c:	2b09      	cmp	r3, #9
 800cb0e:	d969      	bls.n	800cbe4 <_vfiprintf_r+0x1a0>
 800cb10:	b360      	cbz	r0, 800cb6c <_vfiprintf_r+0x128>
 800cb12:	e024      	b.n	800cb5e <_vfiprintf_r+0x11a>
 800cb14:	4b50      	ldr	r3, [pc, #320]	; (800cc58 <_vfiprintf_r+0x214>)
 800cb16:	429c      	cmp	r4, r3
 800cb18:	d101      	bne.n	800cb1e <_vfiprintf_r+0xda>
 800cb1a:	68b4      	ldr	r4, [r6, #8]
 800cb1c:	e7a2      	b.n	800ca64 <_vfiprintf_r+0x20>
 800cb1e:	4b4f      	ldr	r3, [pc, #316]	; (800cc5c <_vfiprintf_r+0x218>)
 800cb20:	429c      	cmp	r4, r3
 800cb22:	bf08      	it	eq
 800cb24:	68f4      	ldreq	r4, [r6, #12]
 800cb26:	e79d      	b.n	800ca64 <_vfiprintf_r+0x20>
 800cb28:	4621      	mov	r1, r4
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f000 fade 	bl	800d0ec <__swsetup_r>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d09d      	beq.n	800ca70 <_vfiprintf_r+0x2c>
 800cb34:	f04f 30ff 	mov.w	r0, #4294967295
 800cb38:	b01d      	add	sp, #116	; 0x74
 800cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3e:	46a8      	mov	r8, r5
 800cb40:	e7a2      	b.n	800ca88 <_vfiprintf_r+0x44>
 800cb42:	4a44      	ldr	r2, [pc, #272]	; (800cc54 <_vfiprintf_r+0x210>)
 800cb44:	4645      	mov	r5, r8
 800cb46:	1a80      	subs	r0, r0, r2
 800cb48:	fa0b f000 	lsl.w	r0, fp, r0
 800cb4c:	4318      	orrs	r0, r3
 800cb4e:	9004      	str	r0, [sp, #16]
 800cb50:	e7be      	b.n	800cad0 <_vfiprintf_r+0x8c>
 800cb52:	9a03      	ldr	r2, [sp, #12]
 800cb54:	1d11      	adds	r1, r2, #4
 800cb56:	6812      	ldr	r2, [r2, #0]
 800cb58:	9103      	str	r1, [sp, #12]
 800cb5a:	2a00      	cmp	r2, #0
 800cb5c:	db01      	blt.n	800cb62 <_vfiprintf_r+0x11e>
 800cb5e:	9207      	str	r2, [sp, #28]
 800cb60:	e004      	b.n	800cb6c <_vfiprintf_r+0x128>
 800cb62:	4252      	negs	r2, r2
 800cb64:	f043 0302 	orr.w	r3, r3, #2
 800cb68:	9207      	str	r2, [sp, #28]
 800cb6a:	9304      	str	r3, [sp, #16]
 800cb6c:	f898 3000 	ldrb.w	r3, [r8]
 800cb70:	2b2e      	cmp	r3, #46	; 0x2e
 800cb72:	d10e      	bne.n	800cb92 <_vfiprintf_r+0x14e>
 800cb74:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cb78:	2b2a      	cmp	r3, #42	; 0x2a
 800cb7a:	d138      	bne.n	800cbee <_vfiprintf_r+0x1aa>
 800cb7c:	9b03      	ldr	r3, [sp, #12]
 800cb7e:	f108 0802 	add.w	r8, r8, #2
 800cb82:	1d1a      	adds	r2, r3, #4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	9203      	str	r2, [sp, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	bfb8      	it	lt
 800cb8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	4d33      	ldr	r5, [pc, #204]	; (800cc60 <_vfiprintf_r+0x21c>)
 800cb94:	2203      	movs	r2, #3
 800cb96:	f898 1000 	ldrb.w	r1, [r8]
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f7ff face 	bl	800c13c <memchr>
 800cba0:	b140      	cbz	r0, 800cbb4 <_vfiprintf_r+0x170>
 800cba2:	2340      	movs	r3, #64	; 0x40
 800cba4:	1b40      	subs	r0, r0, r5
 800cba6:	fa03 f000 	lsl.w	r0, r3, r0
 800cbaa:	9b04      	ldr	r3, [sp, #16]
 800cbac:	f108 0801 	add.w	r8, r8, #1
 800cbb0:	4303      	orrs	r3, r0
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	f898 1000 	ldrb.w	r1, [r8]
 800cbb8:	2206      	movs	r2, #6
 800cbba:	482a      	ldr	r0, [pc, #168]	; (800cc64 <_vfiprintf_r+0x220>)
 800cbbc:	f108 0701 	add.w	r7, r8, #1
 800cbc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbc4:	f7ff faba 	bl	800c13c <memchr>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d037      	beq.n	800cc3c <_vfiprintf_r+0x1f8>
 800cbcc:	4b26      	ldr	r3, [pc, #152]	; (800cc68 <_vfiprintf_r+0x224>)
 800cbce:	bb1b      	cbnz	r3, 800cc18 <_vfiprintf_r+0x1d4>
 800cbd0:	9b03      	ldr	r3, [sp, #12]
 800cbd2:	3307      	adds	r3, #7
 800cbd4:	f023 0307 	bic.w	r3, r3, #7
 800cbd8:	3308      	adds	r3, #8
 800cbda:	9303      	str	r3, [sp, #12]
 800cbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbde:	444b      	add	r3, r9
 800cbe0:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe2:	e750      	b.n	800ca86 <_vfiprintf_r+0x42>
 800cbe4:	fb05 3202 	mla	r2, r5, r2, r3
 800cbe8:	2001      	movs	r0, #1
 800cbea:	4688      	mov	r8, r1
 800cbec:	e78a      	b.n	800cb04 <_vfiprintf_r+0xc0>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	250a      	movs	r5, #10
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	f108 0801 	add.w	r8, r8, #1
 800cbf8:	9305      	str	r3, [sp, #20]
 800cbfa:	4640      	mov	r0, r8
 800cbfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc00:	3a30      	subs	r2, #48	; 0x30
 800cc02:	2a09      	cmp	r2, #9
 800cc04:	d903      	bls.n	800cc0e <_vfiprintf_r+0x1ca>
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d0c3      	beq.n	800cb92 <_vfiprintf_r+0x14e>
 800cc0a:	9105      	str	r1, [sp, #20]
 800cc0c:	e7c1      	b.n	800cb92 <_vfiprintf_r+0x14e>
 800cc0e:	fb05 2101 	mla	r1, r5, r1, r2
 800cc12:	2301      	movs	r3, #1
 800cc14:	4680      	mov	r8, r0
 800cc16:	e7f0      	b.n	800cbfa <_vfiprintf_r+0x1b6>
 800cc18:	ab03      	add	r3, sp, #12
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	4622      	mov	r2, r4
 800cc1e:	4b13      	ldr	r3, [pc, #76]	; (800cc6c <_vfiprintf_r+0x228>)
 800cc20:	a904      	add	r1, sp, #16
 800cc22:	4630      	mov	r0, r6
 800cc24:	f3af 8000 	nop.w
 800cc28:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cc2c:	4681      	mov	r9, r0
 800cc2e:	d1d5      	bne.n	800cbdc <_vfiprintf_r+0x198>
 800cc30:	89a3      	ldrh	r3, [r4, #12]
 800cc32:	065b      	lsls	r3, r3, #25
 800cc34:	f53f af7e 	bmi.w	800cb34 <_vfiprintf_r+0xf0>
 800cc38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc3a:	e77d      	b.n	800cb38 <_vfiprintf_r+0xf4>
 800cc3c:	ab03      	add	r3, sp, #12
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	4622      	mov	r2, r4
 800cc42:	4b0a      	ldr	r3, [pc, #40]	; (800cc6c <_vfiprintf_r+0x228>)
 800cc44:	a904      	add	r1, sp, #16
 800cc46:	4630      	mov	r0, r6
 800cc48:	f000 f888 	bl	800cd5c <_printf_i>
 800cc4c:	e7ec      	b.n	800cc28 <_vfiprintf_r+0x1e4>
 800cc4e:	bf00      	nop
 800cc50:	0800e184 	.word	0x0800e184
 800cc54:	0800e1ce 	.word	0x0800e1ce
 800cc58:	0800e1a4 	.word	0x0800e1a4
 800cc5c:	0800e164 	.word	0x0800e164
 800cc60:	0800e1d4 	.word	0x0800e1d4
 800cc64:	0800e1d8 	.word	0x0800e1d8
 800cc68:	00000000 	.word	0x00000000
 800cc6c:	0800ca1f 	.word	0x0800ca1f

0800cc70 <_printf_common>:
 800cc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc74:	4691      	mov	r9, r2
 800cc76:	461f      	mov	r7, r3
 800cc78:	688a      	ldr	r2, [r1, #8]
 800cc7a:	690b      	ldr	r3, [r1, #16]
 800cc7c:	4606      	mov	r6, r0
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	bfb8      	it	lt
 800cc82:	4613      	movlt	r3, r2
 800cc84:	f8c9 3000 	str.w	r3, [r9]
 800cc88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc92:	b112      	cbz	r2, 800cc9a <_printf_common+0x2a>
 800cc94:	3301      	adds	r3, #1
 800cc96:	f8c9 3000 	str.w	r3, [r9]
 800cc9a:	6823      	ldr	r3, [r4, #0]
 800cc9c:	0699      	lsls	r1, r3, #26
 800cc9e:	bf42      	ittt	mi
 800cca0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cca4:	3302      	addmi	r3, #2
 800cca6:	f8c9 3000 	strmi.w	r3, [r9]
 800ccaa:	6825      	ldr	r5, [r4, #0]
 800ccac:	f015 0506 	ands.w	r5, r5, #6
 800ccb0:	d107      	bne.n	800ccc2 <_printf_common+0x52>
 800ccb2:	f104 0a19 	add.w	sl, r4, #25
 800ccb6:	68e3      	ldr	r3, [r4, #12]
 800ccb8:	f8d9 2000 	ldr.w	r2, [r9]
 800ccbc:	1a9b      	subs	r3, r3, r2
 800ccbe:	42ab      	cmp	r3, r5
 800ccc0:	dc29      	bgt.n	800cd16 <_printf_common+0xa6>
 800ccc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ccc6:	6822      	ldr	r2, [r4, #0]
 800ccc8:	3300      	adds	r3, #0
 800ccca:	bf18      	it	ne
 800cccc:	2301      	movne	r3, #1
 800ccce:	0692      	lsls	r2, r2, #26
 800ccd0:	d42e      	bmi.n	800cd30 <_printf_common+0xc0>
 800ccd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccd6:	4639      	mov	r1, r7
 800ccd8:	4630      	mov	r0, r6
 800ccda:	47c0      	blx	r8
 800ccdc:	3001      	adds	r0, #1
 800ccde:	d021      	beq.n	800cd24 <_printf_common+0xb4>
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	68e5      	ldr	r5, [r4, #12]
 800cce4:	f003 0306 	and.w	r3, r3, #6
 800cce8:	2b04      	cmp	r3, #4
 800ccea:	bf18      	it	ne
 800ccec:	2500      	movne	r5, #0
 800ccee:	f8d9 2000 	ldr.w	r2, [r9]
 800ccf2:	f04f 0900 	mov.w	r9, #0
 800ccf6:	bf08      	it	eq
 800ccf8:	1aad      	subeq	r5, r5, r2
 800ccfa:	68a3      	ldr	r3, [r4, #8]
 800ccfc:	6922      	ldr	r2, [r4, #16]
 800ccfe:	bf08      	it	eq
 800cd00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd04:	4293      	cmp	r3, r2
 800cd06:	bfc4      	itt	gt
 800cd08:	1a9b      	subgt	r3, r3, r2
 800cd0a:	18ed      	addgt	r5, r5, r3
 800cd0c:	341a      	adds	r4, #26
 800cd0e:	454d      	cmp	r5, r9
 800cd10:	d11a      	bne.n	800cd48 <_printf_common+0xd8>
 800cd12:	2000      	movs	r0, #0
 800cd14:	e008      	b.n	800cd28 <_printf_common+0xb8>
 800cd16:	2301      	movs	r3, #1
 800cd18:	4652      	mov	r2, sl
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	47c0      	blx	r8
 800cd20:	3001      	adds	r0, #1
 800cd22:	d103      	bne.n	800cd2c <_printf_common+0xbc>
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd2c:	3501      	adds	r5, #1
 800cd2e:	e7c2      	b.n	800ccb6 <_printf_common+0x46>
 800cd30:	2030      	movs	r0, #48	; 0x30
 800cd32:	18e1      	adds	r1, r4, r3
 800cd34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd3e:	4422      	add	r2, r4
 800cd40:	3302      	adds	r3, #2
 800cd42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd46:	e7c4      	b.n	800ccd2 <_printf_common+0x62>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	4622      	mov	r2, r4
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	4630      	mov	r0, r6
 800cd50:	47c0      	blx	r8
 800cd52:	3001      	adds	r0, #1
 800cd54:	d0e6      	beq.n	800cd24 <_printf_common+0xb4>
 800cd56:	f109 0901 	add.w	r9, r9, #1
 800cd5a:	e7d8      	b.n	800cd0e <_printf_common+0x9e>

0800cd5c <_printf_i>:
 800cd5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cd64:	460c      	mov	r4, r1
 800cd66:	7e09      	ldrb	r1, [r1, #24]
 800cd68:	b085      	sub	sp, #20
 800cd6a:	296e      	cmp	r1, #110	; 0x6e
 800cd6c:	4617      	mov	r7, r2
 800cd6e:	4606      	mov	r6, r0
 800cd70:	4698      	mov	r8, r3
 800cd72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd74:	f000 80b3 	beq.w	800cede <_printf_i+0x182>
 800cd78:	d822      	bhi.n	800cdc0 <_printf_i+0x64>
 800cd7a:	2963      	cmp	r1, #99	; 0x63
 800cd7c:	d036      	beq.n	800cdec <_printf_i+0x90>
 800cd7e:	d80a      	bhi.n	800cd96 <_printf_i+0x3a>
 800cd80:	2900      	cmp	r1, #0
 800cd82:	f000 80b9 	beq.w	800cef8 <_printf_i+0x19c>
 800cd86:	2958      	cmp	r1, #88	; 0x58
 800cd88:	f000 8083 	beq.w	800ce92 <_printf_i+0x136>
 800cd8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cd94:	e032      	b.n	800cdfc <_printf_i+0xa0>
 800cd96:	2964      	cmp	r1, #100	; 0x64
 800cd98:	d001      	beq.n	800cd9e <_printf_i+0x42>
 800cd9a:	2969      	cmp	r1, #105	; 0x69
 800cd9c:	d1f6      	bne.n	800cd8c <_printf_i+0x30>
 800cd9e:	6820      	ldr	r0, [r4, #0]
 800cda0:	6813      	ldr	r3, [r2, #0]
 800cda2:	0605      	lsls	r5, r0, #24
 800cda4:	f103 0104 	add.w	r1, r3, #4
 800cda8:	d52a      	bpl.n	800ce00 <_printf_i+0xa4>
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6011      	str	r1, [r2, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	da03      	bge.n	800cdba <_printf_i+0x5e>
 800cdb2:	222d      	movs	r2, #45	; 0x2d
 800cdb4:	425b      	negs	r3, r3
 800cdb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cdba:	486f      	ldr	r0, [pc, #444]	; (800cf78 <_printf_i+0x21c>)
 800cdbc:	220a      	movs	r2, #10
 800cdbe:	e039      	b.n	800ce34 <_printf_i+0xd8>
 800cdc0:	2973      	cmp	r1, #115	; 0x73
 800cdc2:	f000 809d 	beq.w	800cf00 <_printf_i+0x1a4>
 800cdc6:	d808      	bhi.n	800cdda <_printf_i+0x7e>
 800cdc8:	296f      	cmp	r1, #111	; 0x6f
 800cdca:	d020      	beq.n	800ce0e <_printf_i+0xb2>
 800cdcc:	2970      	cmp	r1, #112	; 0x70
 800cdce:	d1dd      	bne.n	800cd8c <_printf_i+0x30>
 800cdd0:	6823      	ldr	r3, [r4, #0]
 800cdd2:	f043 0320 	orr.w	r3, r3, #32
 800cdd6:	6023      	str	r3, [r4, #0]
 800cdd8:	e003      	b.n	800cde2 <_printf_i+0x86>
 800cdda:	2975      	cmp	r1, #117	; 0x75
 800cddc:	d017      	beq.n	800ce0e <_printf_i+0xb2>
 800cdde:	2978      	cmp	r1, #120	; 0x78
 800cde0:	d1d4      	bne.n	800cd8c <_printf_i+0x30>
 800cde2:	2378      	movs	r3, #120	; 0x78
 800cde4:	4865      	ldr	r0, [pc, #404]	; (800cf7c <_printf_i+0x220>)
 800cde6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cdea:	e055      	b.n	800ce98 <_printf_i+0x13c>
 800cdec:	6813      	ldr	r3, [r2, #0]
 800cdee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdf2:	1d19      	adds	r1, r3, #4
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	6011      	str	r1, [r2, #0]
 800cdf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e08c      	b.n	800cf1a <_printf_i+0x1be>
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce06:	6011      	str	r1, [r2, #0]
 800ce08:	bf18      	it	ne
 800ce0a:	b21b      	sxthne	r3, r3
 800ce0c:	e7cf      	b.n	800cdae <_printf_i+0x52>
 800ce0e:	6813      	ldr	r3, [r2, #0]
 800ce10:	6825      	ldr	r5, [r4, #0]
 800ce12:	1d18      	adds	r0, r3, #4
 800ce14:	6010      	str	r0, [r2, #0]
 800ce16:	0628      	lsls	r0, r5, #24
 800ce18:	d501      	bpl.n	800ce1e <_printf_i+0xc2>
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	e002      	b.n	800ce24 <_printf_i+0xc8>
 800ce1e:	0668      	lsls	r0, r5, #25
 800ce20:	d5fb      	bpl.n	800ce1a <_printf_i+0xbe>
 800ce22:	881b      	ldrh	r3, [r3, #0]
 800ce24:	296f      	cmp	r1, #111	; 0x6f
 800ce26:	bf14      	ite	ne
 800ce28:	220a      	movne	r2, #10
 800ce2a:	2208      	moveq	r2, #8
 800ce2c:	4852      	ldr	r0, [pc, #328]	; (800cf78 <_printf_i+0x21c>)
 800ce2e:	2100      	movs	r1, #0
 800ce30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce34:	6865      	ldr	r5, [r4, #4]
 800ce36:	2d00      	cmp	r5, #0
 800ce38:	60a5      	str	r5, [r4, #8]
 800ce3a:	f2c0 8095 	blt.w	800cf68 <_printf_i+0x20c>
 800ce3e:	6821      	ldr	r1, [r4, #0]
 800ce40:	f021 0104 	bic.w	r1, r1, #4
 800ce44:	6021      	str	r1, [r4, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d13d      	bne.n	800cec6 <_printf_i+0x16a>
 800ce4a:	2d00      	cmp	r5, #0
 800ce4c:	f040 808e 	bne.w	800cf6c <_printf_i+0x210>
 800ce50:	4665      	mov	r5, ip
 800ce52:	2a08      	cmp	r2, #8
 800ce54:	d10b      	bne.n	800ce6e <_printf_i+0x112>
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	07db      	lsls	r3, r3, #31
 800ce5a:	d508      	bpl.n	800ce6e <_printf_i+0x112>
 800ce5c:	6923      	ldr	r3, [r4, #16]
 800ce5e:	6862      	ldr	r2, [r4, #4]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	bfde      	ittt	le
 800ce64:	2330      	movle	r3, #48	; 0x30
 800ce66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce6e:	ebac 0305 	sub.w	r3, ip, r5
 800ce72:	6123      	str	r3, [r4, #16]
 800ce74:	f8cd 8000 	str.w	r8, [sp]
 800ce78:	463b      	mov	r3, r7
 800ce7a:	aa03      	add	r2, sp, #12
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f7ff fef6 	bl	800cc70 <_printf_common>
 800ce84:	3001      	adds	r0, #1
 800ce86:	d14d      	bne.n	800cf24 <_printf_i+0x1c8>
 800ce88:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8c:	b005      	add	sp, #20
 800ce8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce92:	4839      	ldr	r0, [pc, #228]	; (800cf78 <_printf_i+0x21c>)
 800ce94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ce98:	6813      	ldr	r3, [r2, #0]
 800ce9a:	6821      	ldr	r1, [r4, #0]
 800ce9c:	1d1d      	adds	r5, r3, #4
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6015      	str	r5, [r2, #0]
 800cea2:	060a      	lsls	r2, r1, #24
 800cea4:	d50b      	bpl.n	800cebe <_printf_i+0x162>
 800cea6:	07ca      	lsls	r2, r1, #31
 800cea8:	bf44      	itt	mi
 800ceaa:	f041 0120 	orrmi.w	r1, r1, #32
 800ceae:	6021      	strmi	r1, [r4, #0]
 800ceb0:	b91b      	cbnz	r3, 800ceba <_printf_i+0x15e>
 800ceb2:	6822      	ldr	r2, [r4, #0]
 800ceb4:	f022 0220 	bic.w	r2, r2, #32
 800ceb8:	6022      	str	r2, [r4, #0]
 800ceba:	2210      	movs	r2, #16
 800cebc:	e7b7      	b.n	800ce2e <_printf_i+0xd2>
 800cebe:	064d      	lsls	r5, r1, #25
 800cec0:	bf48      	it	mi
 800cec2:	b29b      	uxthmi	r3, r3
 800cec4:	e7ef      	b.n	800cea6 <_printf_i+0x14a>
 800cec6:	4665      	mov	r5, ip
 800cec8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cecc:	fb02 3311 	mls	r3, r2, r1, r3
 800ced0:	5cc3      	ldrb	r3, [r0, r3]
 800ced2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ced6:	460b      	mov	r3, r1
 800ced8:	2900      	cmp	r1, #0
 800ceda:	d1f5      	bne.n	800cec8 <_printf_i+0x16c>
 800cedc:	e7b9      	b.n	800ce52 <_printf_i+0xf6>
 800cede:	6813      	ldr	r3, [r2, #0]
 800cee0:	6825      	ldr	r5, [r4, #0]
 800cee2:	1d18      	adds	r0, r3, #4
 800cee4:	6961      	ldr	r1, [r4, #20]
 800cee6:	6010      	str	r0, [r2, #0]
 800cee8:	0628      	lsls	r0, r5, #24
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	d501      	bpl.n	800cef2 <_printf_i+0x196>
 800ceee:	6019      	str	r1, [r3, #0]
 800cef0:	e002      	b.n	800cef8 <_printf_i+0x19c>
 800cef2:	066a      	lsls	r2, r5, #25
 800cef4:	d5fb      	bpl.n	800ceee <_printf_i+0x192>
 800cef6:	8019      	strh	r1, [r3, #0]
 800cef8:	2300      	movs	r3, #0
 800cefa:	4665      	mov	r5, ip
 800cefc:	6123      	str	r3, [r4, #16]
 800cefe:	e7b9      	b.n	800ce74 <_printf_i+0x118>
 800cf00:	6813      	ldr	r3, [r2, #0]
 800cf02:	1d19      	adds	r1, r3, #4
 800cf04:	6011      	str	r1, [r2, #0]
 800cf06:	681d      	ldr	r5, [r3, #0]
 800cf08:	6862      	ldr	r2, [r4, #4]
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	f7ff f915 	bl	800c13c <memchr>
 800cf12:	b108      	cbz	r0, 800cf18 <_printf_i+0x1bc>
 800cf14:	1b40      	subs	r0, r0, r5
 800cf16:	6060      	str	r0, [r4, #4]
 800cf18:	6863      	ldr	r3, [r4, #4]
 800cf1a:	6123      	str	r3, [r4, #16]
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf22:	e7a7      	b.n	800ce74 <_printf_i+0x118>
 800cf24:	6923      	ldr	r3, [r4, #16]
 800cf26:	462a      	mov	r2, r5
 800cf28:	4639      	mov	r1, r7
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	47c0      	blx	r8
 800cf2e:	3001      	adds	r0, #1
 800cf30:	d0aa      	beq.n	800ce88 <_printf_i+0x12c>
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	079b      	lsls	r3, r3, #30
 800cf36:	d413      	bmi.n	800cf60 <_printf_i+0x204>
 800cf38:	68e0      	ldr	r0, [r4, #12]
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	4298      	cmp	r0, r3
 800cf3e:	bfb8      	it	lt
 800cf40:	4618      	movlt	r0, r3
 800cf42:	e7a3      	b.n	800ce8c <_printf_i+0x130>
 800cf44:	2301      	movs	r3, #1
 800cf46:	464a      	mov	r2, r9
 800cf48:	4639      	mov	r1, r7
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	47c0      	blx	r8
 800cf4e:	3001      	adds	r0, #1
 800cf50:	d09a      	beq.n	800ce88 <_printf_i+0x12c>
 800cf52:	3501      	adds	r5, #1
 800cf54:	68e3      	ldr	r3, [r4, #12]
 800cf56:	9a03      	ldr	r2, [sp, #12]
 800cf58:	1a9b      	subs	r3, r3, r2
 800cf5a:	42ab      	cmp	r3, r5
 800cf5c:	dcf2      	bgt.n	800cf44 <_printf_i+0x1e8>
 800cf5e:	e7eb      	b.n	800cf38 <_printf_i+0x1dc>
 800cf60:	2500      	movs	r5, #0
 800cf62:	f104 0919 	add.w	r9, r4, #25
 800cf66:	e7f5      	b.n	800cf54 <_printf_i+0x1f8>
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1ac      	bne.n	800cec6 <_printf_i+0x16a>
 800cf6c:	7803      	ldrb	r3, [r0, #0]
 800cf6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf76:	e76c      	b.n	800ce52 <_printf_i+0xf6>
 800cf78:	0800e1df 	.word	0x0800e1df
 800cf7c:	0800e1f0 	.word	0x0800e1f0

0800cf80 <__sread>:
 800cf80:	b510      	push	{r4, lr}
 800cf82:	460c      	mov	r4, r1
 800cf84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf88:	f000 fa7a 	bl	800d480 <_read_r>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	bfab      	itete	ge
 800cf90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf92:	89a3      	ldrhlt	r3, [r4, #12]
 800cf94:	181b      	addge	r3, r3, r0
 800cf96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf9a:	bfac      	ite	ge
 800cf9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf9e:	81a3      	strhlt	r3, [r4, #12]
 800cfa0:	bd10      	pop	{r4, pc}

0800cfa2 <__swrite>:
 800cfa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa6:	461f      	mov	r7, r3
 800cfa8:	898b      	ldrh	r3, [r1, #12]
 800cfaa:	4605      	mov	r5, r0
 800cfac:	05db      	lsls	r3, r3, #23
 800cfae:	460c      	mov	r4, r1
 800cfb0:	4616      	mov	r6, r2
 800cfb2:	d505      	bpl.n	800cfc0 <__swrite+0x1e>
 800cfb4:	2302      	movs	r3, #2
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfbc:	f000 f9c4 	bl	800d348 <_lseek_r>
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	4632      	mov	r2, r6
 800cfc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfc8:	81a3      	strh	r3, [r4, #12]
 800cfca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfce:	463b      	mov	r3, r7
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd6:	f000 b877 	b.w	800d0c8 <_write_r>

0800cfda <__sseek>:
 800cfda:	b510      	push	{r4, lr}
 800cfdc:	460c      	mov	r4, r1
 800cfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe2:	f000 f9b1 	bl	800d348 <_lseek_r>
 800cfe6:	1c43      	adds	r3, r0, #1
 800cfe8:	89a3      	ldrh	r3, [r4, #12]
 800cfea:	bf15      	itete	ne
 800cfec:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cff6:	81a3      	strheq	r3, [r4, #12]
 800cff8:	bf18      	it	ne
 800cffa:	81a3      	strhne	r3, [r4, #12]
 800cffc:	bd10      	pop	{r4, pc}

0800cffe <__sclose>:
 800cffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d002:	f000 b8e1 	b.w	800d1c8 <_close_r>
	...

0800d008 <__swbuf_r>:
 800d008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00a:	460e      	mov	r6, r1
 800d00c:	4614      	mov	r4, r2
 800d00e:	4605      	mov	r5, r0
 800d010:	b118      	cbz	r0, 800d01a <__swbuf_r+0x12>
 800d012:	6983      	ldr	r3, [r0, #24]
 800d014:	b90b      	cbnz	r3, 800d01a <__swbuf_r+0x12>
 800d016:	f7ff faf9 	bl	800c60c <__sinit>
 800d01a:	4b21      	ldr	r3, [pc, #132]	; (800d0a0 <__swbuf_r+0x98>)
 800d01c:	429c      	cmp	r4, r3
 800d01e:	d12a      	bne.n	800d076 <__swbuf_r+0x6e>
 800d020:	686c      	ldr	r4, [r5, #4]
 800d022:	69a3      	ldr	r3, [r4, #24]
 800d024:	60a3      	str	r3, [r4, #8]
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	071a      	lsls	r2, r3, #28
 800d02a:	d52e      	bpl.n	800d08a <__swbuf_r+0x82>
 800d02c:	6923      	ldr	r3, [r4, #16]
 800d02e:	b363      	cbz	r3, 800d08a <__swbuf_r+0x82>
 800d030:	6923      	ldr	r3, [r4, #16]
 800d032:	6820      	ldr	r0, [r4, #0]
 800d034:	b2f6      	uxtb	r6, r6
 800d036:	1ac0      	subs	r0, r0, r3
 800d038:	6963      	ldr	r3, [r4, #20]
 800d03a:	4637      	mov	r7, r6
 800d03c:	4283      	cmp	r3, r0
 800d03e:	dc04      	bgt.n	800d04a <__swbuf_r+0x42>
 800d040:	4621      	mov	r1, r4
 800d042:	4628      	mov	r0, r5
 800d044:	f000 f956 	bl	800d2f4 <_fflush_r>
 800d048:	bb28      	cbnz	r0, 800d096 <__swbuf_r+0x8e>
 800d04a:	68a3      	ldr	r3, [r4, #8]
 800d04c:	3001      	adds	r0, #1
 800d04e:	3b01      	subs	r3, #1
 800d050:	60a3      	str	r3, [r4, #8]
 800d052:	6823      	ldr	r3, [r4, #0]
 800d054:	1c5a      	adds	r2, r3, #1
 800d056:	6022      	str	r2, [r4, #0]
 800d058:	701e      	strb	r6, [r3, #0]
 800d05a:	6963      	ldr	r3, [r4, #20]
 800d05c:	4283      	cmp	r3, r0
 800d05e:	d004      	beq.n	800d06a <__swbuf_r+0x62>
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	07db      	lsls	r3, r3, #31
 800d064:	d519      	bpl.n	800d09a <__swbuf_r+0x92>
 800d066:	2e0a      	cmp	r6, #10
 800d068:	d117      	bne.n	800d09a <__swbuf_r+0x92>
 800d06a:	4621      	mov	r1, r4
 800d06c:	4628      	mov	r0, r5
 800d06e:	f000 f941 	bl	800d2f4 <_fflush_r>
 800d072:	b190      	cbz	r0, 800d09a <__swbuf_r+0x92>
 800d074:	e00f      	b.n	800d096 <__swbuf_r+0x8e>
 800d076:	4b0b      	ldr	r3, [pc, #44]	; (800d0a4 <__swbuf_r+0x9c>)
 800d078:	429c      	cmp	r4, r3
 800d07a:	d101      	bne.n	800d080 <__swbuf_r+0x78>
 800d07c:	68ac      	ldr	r4, [r5, #8]
 800d07e:	e7d0      	b.n	800d022 <__swbuf_r+0x1a>
 800d080:	4b09      	ldr	r3, [pc, #36]	; (800d0a8 <__swbuf_r+0xa0>)
 800d082:	429c      	cmp	r4, r3
 800d084:	bf08      	it	eq
 800d086:	68ec      	ldreq	r4, [r5, #12]
 800d088:	e7cb      	b.n	800d022 <__swbuf_r+0x1a>
 800d08a:	4621      	mov	r1, r4
 800d08c:	4628      	mov	r0, r5
 800d08e:	f000 f82d 	bl	800d0ec <__swsetup_r>
 800d092:	2800      	cmp	r0, #0
 800d094:	d0cc      	beq.n	800d030 <__swbuf_r+0x28>
 800d096:	f04f 37ff 	mov.w	r7, #4294967295
 800d09a:	4638      	mov	r0, r7
 800d09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	0800e184 	.word	0x0800e184
 800d0a4:	0800e1a4 	.word	0x0800e1a4
 800d0a8:	0800e164 	.word	0x0800e164

0800d0ac <__ascii_wctomb>:
 800d0ac:	b149      	cbz	r1, 800d0c2 <__ascii_wctomb+0x16>
 800d0ae:	2aff      	cmp	r2, #255	; 0xff
 800d0b0:	bf8b      	itete	hi
 800d0b2:	238a      	movhi	r3, #138	; 0x8a
 800d0b4:	700a      	strbls	r2, [r1, #0]
 800d0b6:	6003      	strhi	r3, [r0, #0]
 800d0b8:	2001      	movls	r0, #1
 800d0ba:	bf88      	it	hi
 800d0bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d0c0:	4770      	bx	lr
 800d0c2:	4608      	mov	r0, r1
 800d0c4:	4770      	bx	lr
	...

0800d0c8 <_write_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	4608      	mov	r0, r1
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	4c05      	ldr	r4, [pc, #20]	; (800d0e8 <_write_r+0x20>)
 800d0d4:	6022      	str	r2, [r4, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	f7f4 fc96 	bl	8001a08 <_write>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	d102      	bne.n	800d0e6 <_write_r+0x1e>
 800d0e0:	6823      	ldr	r3, [r4, #0]
 800d0e2:	b103      	cbz	r3, 800d0e6 <_write_r+0x1e>
 800d0e4:	602b      	str	r3, [r5, #0]
 800d0e6:	bd38      	pop	{r3, r4, r5, pc}
 800d0e8:	20002198 	.word	0x20002198

0800d0ec <__swsetup_r>:
 800d0ec:	4b32      	ldr	r3, [pc, #200]	; (800d1b8 <__swsetup_r+0xcc>)
 800d0ee:	b570      	push	{r4, r5, r6, lr}
 800d0f0:	681d      	ldr	r5, [r3, #0]
 800d0f2:	4606      	mov	r6, r0
 800d0f4:	460c      	mov	r4, r1
 800d0f6:	b125      	cbz	r5, 800d102 <__swsetup_r+0x16>
 800d0f8:	69ab      	ldr	r3, [r5, #24]
 800d0fa:	b913      	cbnz	r3, 800d102 <__swsetup_r+0x16>
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	f7ff fa85 	bl	800c60c <__sinit>
 800d102:	4b2e      	ldr	r3, [pc, #184]	; (800d1bc <__swsetup_r+0xd0>)
 800d104:	429c      	cmp	r4, r3
 800d106:	d10f      	bne.n	800d128 <__swsetup_r+0x3c>
 800d108:	686c      	ldr	r4, [r5, #4]
 800d10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d10e:	b29a      	uxth	r2, r3
 800d110:	0715      	lsls	r5, r2, #28
 800d112:	d42c      	bmi.n	800d16e <__swsetup_r+0x82>
 800d114:	06d0      	lsls	r0, r2, #27
 800d116:	d411      	bmi.n	800d13c <__swsetup_r+0x50>
 800d118:	2209      	movs	r2, #9
 800d11a:	6032      	str	r2, [r6, #0]
 800d11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d120:	81a3      	strh	r3, [r4, #12]
 800d122:	f04f 30ff 	mov.w	r0, #4294967295
 800d126:	e03e      	b.n	800d1a6 <__swsetup_r+0xba>
 800d128:	4b25      	ldr	r3, [pc, #148]	; (800d1c0 <__swsetup_r+0xd4>)
 800d12a:	429c      	cmp	r4, r3
 800d12c:	d101      	bne.n	800d132 <__swsetup_r+0x46>
 800d12e:	68ac      	ldr	r4, [r5, #8]
 800d130:	e7eb      	b.n	800d10a <__swsetup_r+0x1e>
 800d132:	4b24      	ldr	r3, [pc, #144]	; (800d1c4 <__swsetup_r+0xd8>)
 800d134:	429c      	cmp	r4, r3
 800d136:	bf08      	it	eq
 800d138:	68ec      	ldreq	r4, [r5, #12]
 800d13a:	e7e6      	b.n	800d10a <__swsetup_r+0x1e>
 800d13c:	0751      	lsls	r1, r2, #29
 800d13e:	d512      	bpl.n	800d166 <__swsetup_r+0x7a>
 800d140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d142:	b141      	cbz	r1, 800d156 <__swsetup_r+0x6a>
 800d144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d148:	4299      	cmp	r1, r3
 800d14a:	d002      	beq.n	800d152 <__swsetup_r+0x66>
 800d14c:	4630      	mov	r0, r6
 800d14e:	f7ff f83f 	bl	800c1d0 <_free_r>
 800d152:	2300      	movs	r3, #0
 800d154:	6363      	str	r3, [r4, #52]	; 0x34
 800d156:	89a3      	ldrh	r3, [r4, #12]
 800d158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d15c:	81a3      	strh	r3, [r4, #12]
 800d15e:	2300      	movs	r3, #0
 800d160:	6063      	str	r3, [r4, #4]
 800d162:	6923      	ldr	r3, [r4, #16]
 800d164:	6023      	str	r3, [r4, #0]
 800d166:	89a3      	ldrh	r3, [r4, #12]
 800d168:	f043 0308 	orr.w	r3, r3, #8
 800d16c:	81a3      	strh	r3, [r4, #12]
 800d16e:	6923      	ldr	r3, [r4, #16]
 800d170:	b94b      	cbnz	r3, 800d186 <__swsetup_r+0x9a>
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d17c:	d003      	beq.n	800d186 <__swsetup_r+0x9a>
 800d17e:	4621      	mov	r1, r4
 800d180:	4630      	mov	r0, r6
 800d182:	f000 f917 	bl	800d3b4 <__smakebuf_r>
 800d186:	89a2      	ldrh	r2, [r4, #12]
 800d188:	f012 0301 	ands.w	r3, r2, #1
 800d18c:	d00c      	beq.n	800d1a8 <__swsetup_r+0xbc>
 800d18e:	2300      	movs	r3, #0
 800d190:	60a3      	str	r3, [r4, #8]
 800d192:	6963      	ldr	r3, [r4, #20]
 800d194:	425b      	negs	r3, r3
 800d196:	61a3      	str	r3, [r4, #24]
 800d198:	6923      	ldr	r3, [r4, #16]
 800d19a:	b953      	cbnz	r3, 800d1b2 <__swsetup_r+0xc6>
 800d19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d1a4:	d1ba      	bne.n	800d11c <__swsetup_r+0x30>
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}
 800d1a8:	0792      	lsls	r2, r2, #30
 800d1aa:	bf58      	it	pl
 800d1ac:	6963      	ldrpl	r3, [r4, #20]
 800d1ae:	60a3      	str	r3, [r4, #8]
 800d1b0:	e7f2      	b.n	800d198 <__swsetup_r+0xac>
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	e7f7      	b.n	800d1a6 <__swsetup_r+0xba>
 800d1b6:	bf00      	nop
 800d1b8:	20000728 	.word	0x20000728
 800d1bc:	0800e184 	.word	0x0800e184
 800d1c0:	0800e1a4 	.word	0x0800e1a4
 800d1c4:	0800e164 	.word	0x0800e164

0800d1c8 <_close_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	4c05      	ldr	r4, [pc, #20]	; (800d1e4 <_close_r+0x1c>)
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	6023      	str	r3, [r4, #0]
 800d1d4:	f7f4 fc26 	bl	8001a24 <_close>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_close_r+0x1a>
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_close_r+0x1a>
 800d1e0:	602b      	str	r3, [r5, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	20002198 	.word	0x20002198

0800d1e8 <__sflush_r>:
 800d1e8:	898a      	ldrh	r2, [r1, #12]
 800d1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	0710      	lsls	r0, r2, #28
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	d458      	bmi.n	800d2a8 <__sflush_r+0xc0>
 800d1f6:	684b      	ldr	r3, [r1, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	dc05      	bgt.n	800d208 <__sflush_r+0x20>
 800d1fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	dc02      	bgt.n	800d208 <__sflush_r+0x20>
 800d202:	2000      	movs	r0, #0
 800d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d20a:	2e00      	cmp	r6, #0
 800d20c:	d0f9      	beq.n	800d202 <__sflush_r+0x1a>
 800d20e:	2300      	movs	r3, #0
 800d210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d214:	682f      	ldr	r7, [r5, #0]
 800d216:	6a21      	ldr	r1, [r4, #32]
 800d218:	602b      	str	r3, [r5, #0]
 800d21a:	d032      	beq.n	800d282 <__sflush_r+0x9a>
 800d21c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d21e:	89a3      	ldrh	r3, [r4, #12]
 800d220:	075a      	lsls	r2, r3, #29
 800d222:	d505      	bpl.n	800d230 <__sflush_r+0x48>
 800d224:	6863      	ldr	r3, [r4, #4]
 800d226:	1ac0      	subs	r0, r0, r3
 800d228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d22a:	b10b      	cbz	r3, 800d230 <__sflush_r+0x48>
 800d22c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d22e:	1ac0      	subs	r0, r0, r3
 800d230:	2300      	movs	r3, #0
 800d232:	4602      	mov	r2, r0
 800d234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d236:	6a21      	ldr	r1, [r4, #32]
 800d238:	4628      	mov	r0, r5
 800d23a:	47b0      	blx	r6
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	89a3      	ldrh	r3, [r4, #12]
 800d240:	d106      	bne.n	800d250 <__sflush_r+0x68>
 800d242:	6829      	ldr	r1, [r5, #0]
 800d244:	291d      	cmp	r1, #29
 800d246:	d848      	bhi.n	800d2da <__sflush_r+0xf2>
 800d248:	4a29      	ldr	r2, [pc, #164]	; (800d2f0 <__sflush_r+0x108>)
 800d24a:	40ca      	lsrs	r2, r1
 800d24c:	07d6      	lsls	r6, r2, #31
 800d24e:	d544      	bpl.n	800d2da <__sflush_r+0xf2>
 800d250:	2200      	movs	r2, #0
 800d252:	6062      	str	r2, [r4, #4]
 800d254:	6922      	ldr	r2, [r4, #16]
 800d256:	04d9      	lsls	r1, r3, #19
 800d258:	6022      	str	r2, [r4, #0]
 800d25a:	d504      	bpl.n	800d266 <__sflush_r+0x7e>
 800d25c:	1c42      	adds	r2, r0, #1
 800d25e:	d101      	bne.n	800d264 <__sflush_r+0x7c>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b903      	cbnz	r3, 800d266 <__sflush_r+0x7e>
 800d264:	6560      	str	r0, [r4, #84]	; 0x54
 800d266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d268:	602f      	str	r7, [r5, #0]
 800d26a:	2900      	cmp	r1, #0
 800d26c:	d0c9      	beq.n	800d202 <__sflush_r+0x1a>
 800d26e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d272:	4299      	cmp	r1, r3
 800d274:	d002      	beq.n	800d27c <__sflush_r+0x94>
 800d276:	4628      	mov	r0, r5
 800d278:	f7fe ffaa 	bl	800c1d0 <_free_r>
 800d27c:	2000      	movs	r0, #0
 800d27e:	6360      	str	r0, [r4, #52]	; 0x34
 800d280:	e7c0      	b.n	800d204 <__sflush_r+0x1c>
 800d282:	2301      	movs	r3, #1
 800d284:	4628      	mov	r0, r5
 800d286:	47b0      	blx	r6
 800d288:	1c41      	adds	r1, r0, #1
 800d28a:	d1c8      	bne.n	800d21e <__sflush_r+0x36>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d0c5      	beq.n	800d21e <__sflush_r+0x36>
 800d292:	2b1d      	cmp	r3, #29
 800d294:	d001      	beq.n	800d29a <__sflush_r+0xb2>
 800d296:	2b16      	cmp	r3, #22
 800d298:	d101      	bne.n	800d29e <__sflush_r+0xb6>
 800d29a:	602f      	str	r7, [r5, #0]
 800d29c:	e7b1      	b.n	800d202 <__sflush_r+0x1a>
 800d29e:	89a3      	ldrh	r3, [r4, #12]
 800d2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2a4:	81a3      	strh	r3, [r4, #12]
 800d2a6:	e7ad      	b.n	800d204 <__sflush_r+0x1c>
 800d2a8:	690f      	ldr	r7, [r1, #16]
 800d2aa:	2f00      	cmp	r7, #0
 800d2ac:	d0a9      	beq.n	800d202 <__sflush_r+0x1a>
 800d2ae:	0793      	lsls	r3, r2, #30
 800d2b0:	bf18      	it	ne
 800d2b2:	2300      	movne	r3, #0
 800d2b4:	680e      	ldr	r6, [r1, #0]
 800d2b6:	bf08      	it	eq
 800d2b8:	694b      	ldreq	r3, [r1, #20]
 800d2ba:	eba6 0807 	sub.w	r8, r6, r7
 800d2be:	600f      	str	r7, [r1, #0]
 800d2c0:	608b      	str	r3, [r1, #8]
 800d2c2:	f1b8 0f00 	cmp.w	r8, #0
 800d2c6:	dd9c      	ble.n	800d202 <__sflush_r+0x1a>
 800d2c8:	4643      	mov	r3, r8
 800d2ca:	463a      	mov	r2, r7
 800d2cc:	6a21      	ldr	r1, [r4, #32]
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2d2:	47b0      	blx	r6
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	dc06      	bgt.n	800d2e6 <__sflush_r+0xfe>
 800d2d8:	89a3      	ldrh	r3, [r4, #12]
 800d2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2de:	81a3      	strh	r3, [r4, #12]
 800d2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e4:	e78e      	b.n	800d204 <__sflush_r+0x1c>
 800d2e6:	4407      	add	r7, r0
 800d2e8:	eba8 0800 	sub.w	r8, r8, r0
 800d2ec:	e7e9      	b.n	800d2c2 <__sflush_r+0xda>
 800d2ee:	bf00      	nop
 800d2f0:	20400001 	.word	0x20400001

0800d2f4 <_fflush_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	690b      	ldr	r3, [r1, #16]
 800d2f8:	4605      	mov	r5, r0
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	b1db      	cbz	r3, 800d336 <_fflush_r+0x42>
 800d2fe:	b118      	cbz	r0, 800d308 <_fflush_r+0x14>
 800d300:	6983      	ldr	r3, [r0, #24]
 800d302:	b90b      	cbnz	r3, 800d308 <_fflush_r+0x14>
 800d304:	f7ff f982 	bl	800c60c <__sinit>
 800d308:	4b0c      	ldr	r3, [pc, #48]	; (800d33c <_fflush_r+0x48>)
 800d30a:	429c      	cmp	r4, r3
 800d30c:	d109      	bne.n	800d322 <_fflush_r+0x2e>
 800d30e:	686c      	ldr	r4, [r5, #4]
 800d310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d314:	b17b      	cbz	r3, 800d336 <_fflush_r+0x42>
 800d316:	4621      	mov	r1, r4
 800d318:	4628      	mov	r0, r5
 800d31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d31e:	f7ff bf63 	b.w	800d1e8 <__sflush_r>
 800d322:	4b07      	ldr	r3, [pc, #28]	; (800d340 <_fflush_r+0x4c>)
 800d324:	429c      	cmp	r4, r3
 800d326:	d101      	bne.n	800d32c <_fflush_r+0x38>
 800d328:	68ac      	ldr	r4, [r5, #8]
 800d32a:	e7f1      	b.n	800d310 <_fflush_r+0x1c>
 800d32c:	4b05      	ldr	r3, [pc, #20]	; (800d344 <_fflush_r+0x50>)
 800d32e:	429c      	cmp	r4, r3
 800d330:	bf08      	it	eq
 800d332:	68ec      	ldreq	r4, [r5, #12]
 800d334:	e7ec      	b.n	800d310 <_fflush_r+0x1c>
 800d336:	2000      	movs	r0, #0
 800d338:	bd38      	pop	{r3, r4, r5, pc}
 800d33a:	bf00      	nop
 800d33c:	0800e184 	.word	0x0800e184
 800d340:	0800e1a4 	.word	0x0800e1a4
 800d344:	0800e164 	.word	0x0800e164

0800d348 <_lseek_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4605      	mov	r5, r0
 800d34c:	4608      	mov	r0, r1
 800d34e:	4611      	mov	r1, r2
 800d350:	2200      	movs	r2, #0
 800d352:	4c05      	ldr	r4, [pc, #20]	; (800d368 <_lseek_r+0x20>)
 800d354:	6022      	str	r2, [r4, #0]
 800d356:	461a      	mov	r2, r3
 800d358:	f7f4 fb6e 	bl	8001a38 <_lseek>
 800d35c:	1c43      	adds	r3, r0, #1
 800d35e:	d102      	bne.n	800d366 <_lseek_r+0x1e>
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	b103      	cbz	r3, 800d366 <_lseek_r+0x1e>
 800d364:	602b      	str	r3, [r5, #0]
 800d366:	bd38      	pop	{r3, r4, r5, pc}
 800d368:	20002198 	.word	0x20002198

0800d36c <__swhatbuf_r>:
 800d36c:	b570      	push	{r4, r5, r6, lr}
 800d36e:	460e      	mov	r6, r1
 800d370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d374:	b096      	sub	sp, #88	; 0x58
 800d376:	2900      	cmp	r1, #0
 800d378:	4614      	mov	r4, r2
 800d37a:	461d      	mov	r5, r3
 800d37c:	da07      	bge.n	800d38e <__swhatbuf_r+0x22>
 800d37e:	2300      	movs	r3, #0
 800d380:	602b      	str	r3, [r5, #0]
 800d382:	89b3      	ldrh	r3, [r6, #12]
 800d384:	061a      	lsls	r2, r3, #24
 800d386:	d410      	bmi.n	800d3aa <__swhatbuf_r+0x3e>
 800d388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d38c:	e00e      	b.n	800d3ac <__swhatbuf_r+0x40>
 800d38e:	466a      	mov	r2, sp
 800d390:	f000 f888 	bl	800d4a4 <_fstat_r>
 800d394:	2800      	cmp	r0, #0
 800d396:	dbf2      	blt.n	800d37e <__swhatbuf_r+0x12>
 800d398:	9a01      	ldr	r2, [sp, #4]
 800d39a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d39e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3a2:	425a      	negs	r2, r3
 800d3a4:	415a      	adcs	r2, r3
 800d3a6:	602a      	str	r2, [r5, #0]
 800d3a8:	e7ee      	b.n	800d388 <__swhatbuf_r+0x1c>
 800d3aa:	2340      	movs	r3, #64	; 0x40
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	6023      	str	r3, [r4, #0]
 800d3b0:	b016      	add	sp, #88	; 0x58
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}

0800d3b4 <__smakebuf_r>:
 800d3b4:	898b      	ldrh	r3, [r1, #12]
 800d3b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3b8:	079d      	lsls	r5, r3, #30
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460c      	mov	r4, r1
 800d3be:	d507      	bpl.n	800d3d0 <__smakebuf_r+0x1c>
 800d3c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	6123      	str	r3, [r4, #16]
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	6163      	str	r3, [r4, #20]
 800d3cc:	b002      	add	sp, #8
 800d3ce:	bd70      	pop	{r4, r5, r6, pc}
 800d3d0:	ab01      	add	r3, sp, #4
 800d3d2:	466a      	mov	r2, sp
 800d3d4:	f7ff ffca 	bl	800d36c <__swhatbuf_r>
 800d3d8:	9900      	ldr	r1, [sp, #0]
 800d3da:	4605      	mov	r5, r0
 800d3dc:	4630      	mov	r0, r6
 800d3de:	f7fe ff43 	bl	800c268 <_malloc_r>
 800d3e2:	b948      	cbnz	r0, 800d3f8 <__smakebuf_r+0x44>
 800d3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e8:	059a      	lsls	r2, r3, #22
 800d3ea:	d4ef      	bmi.n	800d3cc <__smakebuf_r+0x18>
 800d3ec:	f023 0303 	bic.w	r3, r3, #3
 800d3f0:	f043 0302 	orr.w	r3, r3, #2
 800d3f4:	81a3      	strh	r3, [r4, #12]
 800d3f6:	e7e3      	b.n	800d3c0 <__smakebuf_r+0xc>
 800d3f8:	4b0d      	ldr	r3, [pc, #52]	; (800d430 <__smakebuf_r+0x7c>)
 800d3fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3fc:	89a3      	ldrh	r3, [r4, #12]
 800d3fe:	6020      	str	r0, [r4, #0]
 800d400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d404:	81a3      	strh	r3, [r4, #12]
 800d406:	9b00      	ldr	r3, [sp, #0]
 800d408:	6120      	str	r0, [r4, #16]
 800d40a:	6163      	str	r3, [r4, #20]
 800d40c:	9b01      	ldr	r3, [sp, #4]
 800d40e:	b15b      	cbz	r3, 800d428 <__smakebuf_r+0x74>
 800d410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d414:	4630      	mov	r0, r6
 800d416:	f000 f857 	bl	800d4c8 <_isatty_r>
 800d41a:	b128      	cbz	r0, 800d428 <__smakebuf_r+0x74>
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	f023 0303 	bic.w	r3, r3, #3
 800d422:	f043 0301 	orr.w	r3, r3, #1
 800d426:	81a3      	strh	r3, [r4, #12]
 800d428:	89a3      	ldrh	r3, [r4, #12]
 800d42a:	431d      	orrs	r5, r3
 800d42c:	81a5      	strh	r5, [r4, #12]
 800d42e:	e7cd      	b.n	800d3cc <__smakebuf_r+0x18>
 800d430:	0800c5d5 	.word	0x0800c5d5

0800d434 <_realloc_r>:
 800d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d436:	4607      	mov	r7, r0
 800d438:	4614      	mov	r4, r2
 800d43a:	460e      	mov	r6, r1
 800d43c:	b921      	cbnz	r1, 800d448 <_realloc_r+0x14>
 800d43e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d442:	4611      	mov	r1, r2
 800d444:	f7fe bf10 	b.w	800c268 <_malloc_r>
 800d448:	b922      	cbnz	r2, 800d454 <_realloc_r+0x20>
 800d44a:	f7fe fec1 	bl	800c1d0 <_free_r>
 800d44e:	4625      	mov	r5, r4
 800d450:	4628      	mov	r0, r5
 800d452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d454:	f000 f848 	bl	800d4e8 <_malloc_usable_size_r>
 800d458:	42a0      	cmp	r0, r4
 800d45a:	d20f      	bcs.n	800d47c <_realloc_r+0x48>
 800d45c:	4621      	mov	r1, r4
 800d45e:	4638      	mov	r0, r7
 800d460:	f7fe ff02 	bl	800c268 <_malloc_r>
 800d464:	4605      	mov	r5, r0
 800d466:	2800      	cmp	r0, #0
 800d468:	d0f2      	beq.n	800d450 <_realloc_r+0x1c>
 800d46a:	4631      	mov	r1, r6
 800d46c:	4622      	mov	r2, r4
 800d46e:	f7fe fe82 	bl	800c176 <memcpy>
 800d472:	4631      	mov	r1, r6
 800d474:	4638      	mov	r0, r7
 800d476:	f7fe feab 	bl	800c1d0 <_free_r>
 800d47a:	e7e9      	b.n	800d450 <_realloc_r+0x1c>
 800d47c:	4635      	mov	r5, r6
 800d47e:	e7e7      	b.n	800d450 <_realloc_r+0x1c>

0800d480 <_read_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4605      	mov	r5, r0
 800d484:	4608      	mov	r0, r1
 800d486:	4611      	mov	r1, r2
 800d488:	2200      	movs	r2, #0
 800d48a:	4c05      	ldr	r4, [pc, #20]	; (800d4a0 <_read_r+0x20>)
 800d48c:	6022      	str	r2, [r4, #0]
 800d48e:	461a      	mov	r2, r3
 800d490:	f7f4 faac 	bl	80019ec <_read>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d102      	bne.n	800d49e <_read_r+0x1e>
 800d498:	6823      	ldr	r3, [r4, #0]
 800d49a:	b103      	cbz	r3, 800d49e <_read_r+0x1e>
 800d49c:	602b      	str	r3, [r5, #0]
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	20002198 	.word	0x20002198

0800d4a4 <_fstat_r>:
 800d4a4:	b538      	push	{r3, r4, r5, lr}
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	4c06      	ldr	r4, [pc, #24]	; (800d4c4 <_fstat_r+0x20>)
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	f7f4 faba 	bl	8001a2a <_fstat>
 800d4b6:	1c43      	adds	r3, r0, #1
 800d4b8:	d102      	bne.n	800d4c0 <_fstat_r+0x1c>
 800d4ba:	6823      	ldr	r3, [r4, #0]
 800d4bc:	b103      	cbz	r3, 800d4c0 <_fstat_r+0x1c>
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	bd38      	pop	{r3, r4, r5, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20002198 	.word	0x20002198

0800d4c8 <_isatty_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	4c05      	ldr	r4, [pc, #20]	; (800d4e4 <_isatty_r+0x1c>)
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	6023      	str	r3, [r4, #0]
 800d4d4:	f7f4 faae 	bl	8001a34 <_isatty>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	d102      	bne.n	800d4e2 <_isatty_r+0x1a>
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	b103      	cbz	r3, 800d4e2 <_isatty_r+0x1a>
 800d4e0:	602b      	str	r3, [r5, #0]
 800d4e2:	bd38      	pop	{r3, r4, r5, pc}
 800d4e4:	20002198 	.word	0x20002198

0800d4e8 <_malloc_usable_size_r>:
 800d4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ec:	1f18      	subs	r0, r3, #4
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	bfbc      	itt	lt
 800d4f2:	580b      	ldrlt	r3, [r1, r0]
 800d4f4:	18c0      	addlt	r0, r0, r3
 800d4f6:	4770      	bx	lr

0800d4f8 <_init>:
 800d4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fa:	bf00      	nop
 800d4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4fe:	bc08      	pop	{r3}
 800d500:	469e      	mov	lr, r3
 800d502:	4770      	bx	lr

0800d504 <_fini>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	bf00      	nop
 800d508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50a:	bc08      	pop	{r3}
 800d50c:	469e      	mov	lr, r3
 800d50e:	4770      	bx	lr
