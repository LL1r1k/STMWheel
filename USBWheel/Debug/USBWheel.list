
USBWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000185c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf8  080186d8  080186d8  000286d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080193d0  080193d0  000308f8  2**0
                  CONTENTS
  4 .ARM          00000000  080193d0  080193d0  000308f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080193d0  080193d0  000308f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080193d0  080193d0  000293d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080193dc  080193dc  000293dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008f8  20000000  080193e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018ac  200008f8  08019cdc  000308f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200021a4  08019cdc  000321a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000308f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00074a90  00000000  00000000  00030921  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b456  00000000  00000000  000a53b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002da8  00000000  00000000  000b0808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ad0  00000000  00000000  000b35b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024292  00000000  00000000  000b6080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002adef  00000000  00000000  000da312  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a74ad  00000000  00000000  00105101  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ac5ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e5f8  00000000  00000000  001ac62c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200008f8 	.word	0x200008f8
 800012c:	00000000 	.word	0x00000000
 8000130:	080186c0 	.word	0x080186c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200008fc 	.word	0x200008fc
 800014c:	080186c0 	.word	0x080186c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <cppmain>:
extern uint16_t BUF_DMA [ARRAY_LEN];
extern TIM_HandleTypeDef htim2;

USBD_HandleTypeDef hUsbDeviceFS;

void cppmain() {
 800115c:	b598      	push	{r3, r4, r7, lr}
 800115e:	af00      	add	r7, sp, #0

	ws2812_init();
 8001160:	f011 fb34 	bl	80127cc <_Z11ws2812_initv>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8001164:	f44f 735e 	mov.w	r3, #888	; 0x378
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <cppmain+0x5c>)
 800116a:	2100      	movs	r1, #0
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <cppmain+0x60>)
 800116e:	f004 fe31 	bl	8005dd4 <HAL_TIM_PWM_Start_DMA>
	HAL_ADC_Start_DMA(&HADC, ADC_BUF, ADC_CHANNELS);
 8001172:	2202      	movs	r2, #2
 8001174:	4912      	ldr	r1, [pc, #72]	; (80011c0 <cppmain+0x64>)
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <cppmain+0x68>)
 8001178:	f001 f8a0 	bl	80022bc <HAL_ADC_Start_DMA>

	mainclass = new FFBWheel();
 800117c:	20c0      	movs	r0, #192	; 0xc0
 800117e:	f014 f899 	bl	80152b4 <_Znwj>
 8001182:	4603      	mov	r3, r0
 8001184:	461c      	mov	r4, r3
 8001186:	4620      	mov	r0, r4
 8001188:	f00a ffc6 	bl	800c118 <_ZN8FFBWheelC1Ev>
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <cppmain+0x6c>)
 800118e:	601c      	str	r4, [r3, #0]
	mainclass->usbInit();
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <cppmain+0x6c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f00b fc9d 	bl	800cad4 <_ZN8FFBWheel7usbInitEv>

	while(running){
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <cppmain+0x70>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <cppmain+0x56>
		mainclass->update();
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <cppmain+0x6c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f00b f934 	bl	800c414 <_ZN8FFBWheel6updateEv>
		updateLeds();
 80011ac:	f011 faec 	bl	8012788 <_Z10updateLedsv>
	while(running){
 80011b0:	e7f3      	b.n	800119a <cppmain+0x3e>
	}

}
 80011b2:	bf00      	nop
 80011b4:	bd98      	pop	{r3, r4, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000b8c 	.word	0x20000b8c
 80011bc:	200016dc 	.word	0x200016dc
 80011c0:	20000b64 	.word	0x20000b64
 80011c4:	20001628 	.word	0x20001628
 80011c8:	20000914 	.word	0x20000914
 80011cc:	20000000 	.word	0x20000000

080011d0 <EE_Format>:

//##########################################################################################################
//##########################################################################################################
//##########################################################################################################
bool	EE_Format(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
	uint32_t	error;
	HAL_FLASH_Unlock();
 80011d6:	f001 feb7 	bl	8002f48 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80011da:	2301      	movs	r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
	#if ( _EEPROM_F1_LOW_DESTINY==1 || _EEPROM_F1_MEDIUM_DESTINY==1 || _EEPROM_F1_HIGH_DESTINY==1 )
	flashErase.Banks = FLASH_BANK_1;
 80011de:	2301      	movs	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
	#endif
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <EE_Format+0x50>)
 80011e4:	60fb      	str	r3, [r7, #12]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80011ea:	f107 0214 	add.w	r2, r7, #20
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 ff90 	bl	8003118 <HAL_FLASHEx_Erase>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <EE_Format+0x42>
	{
		HAL_FLASH_Lock();
 80011fe:	f001 fec9 	bl	8002f94 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001208:	d001      	beq.n	800120e <EE_Format+0x3e>
			return false;
 800120a:	2300      	movs	r3, #0
 800120c:	e004      	b.n	8001218 <EE_Format+0x48>
		else
			return true;	
 800120e:	2301      	movs	r3, #1
 8001210:	e002      	b.n	8001218 <EE_Format+0x48>
	}
	HAL_FLASH_Lock();
 8001212:	f001 febf 	bl	8002f94 <HAL_FLASH_Lock>
	return false;	
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0801fc00 	.word	0x0801fc00

08001224 <EE_Reads>:
	HAL_FLASH_Lock();
	return true;
}
//##########################################################################################################
bool EE_Reads(uint16_t StartVirtualAddress,uint16_t HowManyToRead,uint32_t* Data)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	603a      	str	r2, [r7, #0]
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	460b      	mov	r3, r1
 8001232:	80bb      	strh	r3, [r7, #4]
	if((StartVirtualAddress+HowManyToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8001234:	88fa      	ldrh	r2, [r7, #6]
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800123e:	dd01      	ble.n	8001244 <EE_Reads+0x20>
		return false;
 8001240:	2300      	movs	r3, #0
 8001242:	e018      	b.n	8001276 <EE_Reads+0x52>
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	81fb      	strh	r3, [r7, #14]
 8001248:	e00e      	b.n	8001268 <EE_Reads+0x44>
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001252:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	601a      	str	r2, [r3, #0]
		Data++;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3304      	adds	r3, #4
 8001260:	603b      	str	r3, [r7, #0]
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	3301      	adds	r3, #1
 8001266:	81fb      	strh	r3, [r7, #14]
 8001268:	89fa      	ldrh	r2, [r7, #14]
 800126a:	88b9      	ldrh	r1, [r7, #4]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	440b      	add	r3, r1
 8001270:	429a      	cmp	r2, r3
 8001272:	dbea      	blt.n	800124a <EE_Reads+0x26>
	}
	return true;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <EE_Writes>:
//##########################################################################################################
bool 	EE_Writes(uint16_t StartVirtualAddress,uint16_t HowManyToWrite,uint32_t* Data)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	603a      	str	r2, [r7, #0]
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	460b      	mov	r3, r1
 800128e:	80bb      	strh	r3, [r7, #4]
	if((StartVirtualAddress+HowManyToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	88bb      	ldrh	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800129a:	dd01      	ble.n	80012a0 <EE_Writes+0x20>
		return false;
 800129c:	2300      	movs	r3, #0
 800129e:	e02b      	b.n	80012f8 <EE_Writes+0x78>
		Data++;
	}	
	if(EE_Format()==false)
		return false;
	#endif
	HAL_FLASH_Unlock();
 80012a0:	f001 fe52 	bl	8002f48 <HAL_FLASH_Unlock>
			HAL_FLASH_Lock();
			return false;
		}
	}
	#else
	HAL_FLASH_Unlock();
 80012a4:	f001 fe50 	bl	8002f48 <HAL_FLASH_Unlock>
	for(uint16_t i=0; i<HowManyToWrite ; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	81fb      	strh	r3, [r7, #14]
 80012ac:	e01d      	b.n	80012ea <EE_Writes+0x6a>
	{		
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,((i+StartVirtualAddress)*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)Data[i])!=HAL_OK)
 80012ae:	89fa      	ldrh	r2, [r7, #14]
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80012ba:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f04f 0400 	mov.w	r4, #0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4623      	mov	r3, r4
 80012d0:	2002      	movs	r0, #2
 80012d2:	f001 fdc9 	bl	8002e68 <HAL_FLASH_Program>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <EE_Writes+0x64>
		{
			HAL_FLASH_Lock();
 80012dc:	f001 fe5a 	bl	8002f94 <HAL_FLASH_Lock>
			return false;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e009      	b.n	80012f8 <EE_Writes+0x78>
	for(uint16_t i=0; i<HowManyToWrite ; i++)
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	3301      	adds	r3, #1
 80012e8:	81fb      	strh	r3, [r7, #14]
 80012ea:	89fa      	ldrh	r2, [r7, #14]
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3dd      	bcc.n	80012ae <EE_Writes+0x2e>
		}
	}	
	#endif
	HAL_FLASH_Lock();
 80012f2:	f001 fe4f 	bl	8002f94 <HAL_FLASH_Lock>
	return true;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001304:	f000 fea0 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001308:	f000 f815 	bl	8001336 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130c:	f000 fada 	bl	80018c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001310:	f000 fab2 	bl	8001878 <MX_DMA_Init>
  MX_ADC1_Init();
 8001314:	f000 f86c 	bl	80013f0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001318:	f000 fa06 	bl	8001728 <MX_TIM3_Init>
  MX_USB_PCD_Init();
 800131c:	f000 faa6 	bl	800186c <MX_USB_PCD_Init>
  MX_TIM4_Init();
 8001320:	f000 fa50 	bl	80017c4 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001324:	f000 f8b2 	bl	800148c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001328:	f000 f8de 	bl	80014e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800132c:	f000 f988 	bl	8001640 <MX_TIM2_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  cppmain();
 8001330:	f7ff ff14 	bl	800115c <cppmain>
 8001334:	e7fc      	b.n	8001330 <main+0x30>

08001336 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b094      	sub	sp, #80	; 0x50
 800133a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001340:	2228      	movs	r2, #40	; 0x28
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f016 fcbe 	bl	8017cc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001366:	2301      	movs	r3, #1
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	2301      	movs	r3, #1
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001380:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001382:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138c:	4618      	mov	r0, r3
 800138e:	f003 ff63 	bl	8005258 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001398:	f000 fb10 	bl	80019bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 f9cd 	bl	8005758 <HAL_RCC_ClockConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013c4:	f000 fafa 	bl	80019bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80013c8:	2312      	movs	r3, #18
 80013ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 fb45 	bl	8005a68 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013e4:	f000 faea 	bl	80019bc <Error_Handler>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3750      	adds	r7, #80	; 0x50
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_ADC1_Init+0x94>)
 8001402:	4a21      	ldr	r2, [pc, #132]	; (8001488 <MX_ADC1_Init+0x98>)
 8001404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_ADC1_Init+0x94>)
 8001408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800140c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_ADC1_Init+0x94>)
 8001410:	2201      	movs	r2, #1
 8001412:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_ADC1_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_ADC1_Init+0x94>)
 800141c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001420:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_ADC1_Init+0x94>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_ADC1_Init+0x94>)
 800142a:	2202      	movs	r2, #2
 800142c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800142e:	4815      	ldr	r0, [pc, #84]	; (8001484 <MX_ADC1_Init+0x94>)
 8001430:	f000 fe6c 	bl	800210c <HAL_ADC_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800143a:	f000 fabf 	bl	80019bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001442:	2301      	movs	r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001446:	2307      	movs	r3, #7
 8001448:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_ADC1_Init+0x94>)
 8001450:	f001 f824 	bl	800249c <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800145a:	f000 faaf 	bl	80019bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001462:	2302      	movs	r3, #2
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_ADC1_Init+0x94>)
 800146c:	f001 f816 	bl	800249c <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001476:	f000 faa1 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20001628 	.word	0x20001628
 8001488:	40012400 	.word	0x40012400

0800148c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_I2C1_Init+0x50>)
 8001492:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <MX_I2C1_Init+0x54>)
 8001494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_I2C1_Init+0x50>)
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <MX_I2C1_Init+0x58>)
 800149a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_I2C1_Init+0x50>)
 80014aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_I2C1_Init+0x50>)
 80014ca:	f002 f887 	bl	80035dc <HAL_I2C_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d4:	f000 fa72 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20001594 	.word	0x20001594
 80014e0:	40005400 	.word	0x40005400
 80014e4:	000186a0 	.word	0x000186a0

080014e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b096      	sub	sp, #88	; 0x58
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f016 fbd0 	bl	8017cc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <MX_TIM1_Init+0x150>)
 8001528:	4a44      	ldr	r2, [pc, #272]	; (800163c <MX_TIM1_Init+0x154>)
 800152a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <MX_TIM1_Init+0x150>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <MX_TIM1_Init+0x150>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <MX_TIM1_Init+0x150>)
 800153a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800153e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <MX_TIM1_Init+0x150>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001546:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <MX_TIM1_Init+0x150>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <MX_TIM1_Init+0x150>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001552:	4839      	ldr	r0, [pc, #228]	; (8001638 <MX_TIM1_Init+0x150>)
 8001554:	f004 fb3e 	bl	8005bd4 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800155e:	f000 fa2d 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800156c:	4619      	mov	r1, r3
 800156e:	4832      	ldr	r0, [pc, #200]	; (8001638 <MX_TIM1_Init+0x150>)
 8001570:	f004 ff92 	bl	8006498 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800157a:	f000 fa1f 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800157e:	482e      	ldr	r0, [pc, #184]	; (8001638 <MX_TIM1_Init+0x150>)
 8001580:	f004 fb76 	bl	8005c70 <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800158a:	f000 fa17 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800159a:	4619      	mov	r1, r3
 800159c:	4826      	ldr	r0, [pc, #152]	; (8001638 <MX_TIM1_Init+0x150>)
 800159e:	f005 fb8f 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015a8:	f000 fa08 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	; 0x60
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <MX_TIM1_Init+0x150>)
 80015d2:	f004 fe9b 	bl	800630c <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015dc:	f000 f9ee 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_TIM1_Init+0x150>)
 80015ea:	f004 fe8f 	bl	800630c <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015f4:	f000 f9e2 	bl	80019bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM1_Init+0x150>)
 800161c:	f005 fb94 	bl	8006d48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001626:	f000 f9c9 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM1_Init+0x150>)
 800162c:	f000 fb74 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 8001630:	bf00      	nop
 8001632:	3758      	adds	r7, #88	; 0x58
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000169c 	.word	0x2000169c
 800163c:	40012c00 	.word	0x40012c00

08001640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	f107 0320 	add.w	r3, r7, #32
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001676:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <MX_TIM2_Init+0xe4>)
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001686:	2259      	movs	r2, #89	; 0x59
 8001688:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <MX_TIM2_Init+0xe4>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001696:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001698:	f004 fa9c 	bl	8005bd4 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80016a2:	f000 f98b 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b0:	4619      	mov	r1, r3
 80016b2:	481c      	ldr	r0, [pc, #112]	; (8001724 <MX_TIM2_Init+0xe4>)
 80016b4:	f004 fef0 	bl	8006498 <HAL_TIM_ConfigClockSource>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016be:	f000 f97d 	bl	80019bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016c2:	4818      	ldr	r0, [pc, #96]	; (8001724 <MX_TIM2_Init+0xe4>)
 80016c4:	f004 fad4 	bl	8005c70 <HAL_TIM_PWM_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80016ce:	f000 f975 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	4619      	mov	r1, r3
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <MX_TIM2_Init+0xe4>)
 80016e2:	f005 faed 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016ec:	f000 f966 	bl	80019bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f0:	2360      	movs	r3, #96	; 0x60
 80016f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001708:	f004 fe00 	bl	800630c <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001712:	f000 f953 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001718:	f000 fafe 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 800171c:	bf00      	nop
 800171e:	3738      	adds	r7, #56	; 0x38
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200016dc 	.word	0x200016dc

08001728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_TIM3_Init+0x94>)
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <MX_TIM3_Init+0x98>)
 8001748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_TIM3_Init+0x94>)
 800174c:	2247      	movs	r2, #71	; 0x47
 800174e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_TIM3_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_TIM3_Init+0x94>)
 8001758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_TIM3_Init+0x94>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_TIM3_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800176a:	4814      	ldr	r0, [pc, #80]	; (80017bc <MX_TIM3_Init+0x94>)
 800176c:	f004 fa32 	bl	8005bd4 <HAL_TIM_Base_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001776:	f000 f921 	bl	80019bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4619      	mov	r1, r3
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_TIM3_Init+0x94>)
 8001788:	f004 fe86 	bl	8006498 <HAL_TIM_ConfigClockSource>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001792:	f000 f913 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_TIM3_Init+0x94>)
 80017a4:	f005 fa8c 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017ae:	f000 f905 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200015e8 	.word	0x200015e8
 80017c0:	40000400 	.word	0x40000400

080017c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	; 0x30
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	2224      	movs	r2, #36	; 0x24
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f016 fa77 	bl	8017cc6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017e2:	4a21      	ldr	r2, [pc, #132]	; (8001868 <MX_TIM4_Init+0xa4>)
 80017e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017ee:	2220      	movs	r2, #32
 80017f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_TIM4_Init+0xa0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_TIM4_Init+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001806:	2303      	movs	r3, #3
 8001808:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800180e:	2301      	movs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800181e:	2301      	movs	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4619      	mov	r1, r3
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <MX_TIM4_Init+0xa0>)
 8001832:	f004 fbd5 	bl	8005fe0 <HAL_TIM_Encoder_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800183c:	f000 f8be 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_TIM4_Init+0xa0>)
 800184e:	f005 fa37 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001858:	f000 f8b0 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	; 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20001554 	.word	0x20001554
 8001868:	40000800 	.word	0x40000800

0800186c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN USB_Init 2 */
#endif
  /* USER CODE END USB_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_DMA_Init+0x48>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <MX_DMA_Init+0x48>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <MX_DMA_Init+0x48>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	200b      	movs	r0, #11
 800189c:	f001 f8bf 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018a0:	200b      	movs	r0, #11
 80018a2:	f001 f8d8 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	200f      	movs	r0, #15
 80018ac:	f001 f8b7 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018b0:	200f      	movs	r0, #15
 80018b2:	f001 f8d0 	bl	8002a56 <HAL_NVIC_EnableIRQ>

}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000

080018c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a33      	ldr	r2, [pc, #204]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a2d      	ldr	r2, [pc, #180]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <MX_GPIO_Init+0xe8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <MX_GPIO_Init+0xe8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <MX_GPIO_Init+0xe8>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <MX_GPIO_Init+0xe8>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <MX_GPIO_Init+0xe8>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a21      	ldr	r2, [pc, #132]	; (80019ac <MX_GPIO_Init+0xe8>)
 8001926:	f043 0308 	orr.w	r3, r3, #8
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <MX_GPIO_Init+0xe8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193e:	481c      	ldr	r0, [pc, #112]	; (80019b0 <MX_GPIO_Init+0xec>)
 8001940:	f001 fe03 	bl	800354a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2302      	movs	r3, #2
 8001954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4619      	mov	r1, r3
 800195c:	4814      	ldr	r0, [pc, #80]	; (80019b0 <MX_GPIO_Init+0xec>)
 800195e:	f001 fc83 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN1_Pin */
  GPIO_InitStruct.Pin = DIN1_Pin;
 8001962:	2308      	movs	r3, #8
 8001964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIN1_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	480f      	ldr	r0, [pc, #60]	; (80019b4 <MX_GPIO_Init+0xf0>)
 8001976:	f001 fc77 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = ENCODER_Z_Pin;
 800197a:	2320      	movs	r3, #32
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_GPIO_Init+0xf4>)
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001982:	2301      	movs	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4619      	mov	r1, r3
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <MX_GPIO_Init+0xf0>)
 800198e:	f001 fc6b 	bl	8003268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2017      	movs	r0, #23
 8001998:	f001 f841 	bl	8002a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800199c:	2017      	movs	r0, #23
 800199e:	f001 f85a 	bl	8002a56 <HAL_NVIC_EnableIRQ>

}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40010c00 	.word	0x40010c00
 80019b8:	10110000 	.word	0x10110000

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_MspInit+0x5c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_MspInit+0x5c>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6193      	str	r3, [r2, #24]
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_MspInit+0x5c>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_MspInit+0x5c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_MspInit+0x5c>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_MspInit+0x5c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_MspInit+0x60>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_MspInit+0x60>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000

08001a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a29      	ldr	r2, [pc, #164]	; (8001aec <HAL_ADC_MspInit+0xc0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d14a      	bne.n	8001ae2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_ADC_MspInit+0xc4>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a80:	2303      	movs	r3, #3
 8001a82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	481a      	ldr	r0, [pc, #104]	; (8001af4 <HAL_ADC_MspInit+0xc8>)
 8001a8c:	f001 fbec 	bl	8003268 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001a92:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <HAL_ADC_MspInit+0xd0>)
 8001a94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ab6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001aba:	2220      	movs	r2, #32
 8001abc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ac8:	f000 ffe0 	bl	8002a8c <HAL_DMA_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001ad2:	f7ff ff73 	bl	80019bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ada:	621a      	str	r2, [r3, #32]
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_ADC_MspInit+0xcc>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40012400 	.word	0x40012400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	20001658 	.word	0x20001658
 8001afc:	40020008 	.word	0x40020008

08001b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <HAL_I2C_MspInit+0x90>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d132      	bne.n	8001b86 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3e:	2312      	movs	r3, #18
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4812      	ldr	r0, [pc, #72]	; (8001b98 <HAL_I2C_MspInit+0x98>)
 8001b4e:	f001 fb8b 	bl	8003268 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_I2C_MspInit+0x9c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
 8001b68:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_I2C_MspInit+0x9c>)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_I2C_MspInit+0x94>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40005400 	.word	0x40005400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a32      	ldr	r2, [pc, #200]	; (8001c78 <HAL_TIM_Base_MspInit+0xd8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10c      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4a31      	ldr	r2, [pc, #196]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bbc:	6193      	str	r3, [r2, #24]
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bca:	e051      	b.n	8001c70 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d133      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001bf0:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <HAL_TIM_Base_MspInit+0xe4>)
 8001bf2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c16:	2220      	movs	r2, #32
 8001c18:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001c20:	4817      	ldr	r0, [pc, #92]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c22:	f000 ff33 	bl	8002a8c <HAL_DMA_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_TIM_Base_MspInit+0x90>
      Error_Handler();
 8001c2c:	f7ff fec6 	bl	80019bc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_TIM_Base_MspInit+0xe0>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001c3c:	e018      	b.n	8001c70 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_TIM_Base_MspInit+0xe8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d113      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	61d3      	str	r3, [r2, #28]
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_TIM_Base_MspInit+0xdc>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	201d      	movs	r0, #29
 8001c66:	f000 feda 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c6a:	201d      	movs	r0, #29
 8001c6c:	f000 fef3 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40012c00 	.word	0x40012c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	20001510 	.word	0x20001510
 8001c84:	40020058 	.word	0x40020058
 8001c88:	40000400 	.word	0x40000400

08001c8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_TIM_Encoder_MspInit+0x80>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d12b      	bne.n	8001d04 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	61d3      	str	r3, [r2, #28]
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001cdc:	23c0      	movs	r3, #192	; 0xc0
 8001cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4619      	mov	r1, r3
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cf0:	f001 faba 	bl	8003268 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	201e      	movs	r0, #30
 8001cfa:	f000 fe90 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cfe:	201e      	movs	r0, #30
 8001d00:	f000 fea9 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40000800 	.word	0x40000800
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010c00 	.word	0x40010c00

08001d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_TIM_MspPostInit+0xbc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d119      	bne.n	8001d6c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = MOTOR_B_Pin|MOTOR_A_Pin;
 8001d50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	481d      	ldr	r0, [pc, #116]	; (8001ddc <HAL_TIM_MspPostInit+0xc4>)
 8001d66:	f001 fa7f 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d6a:	e02f      	b.n	8001dcc <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d74:	d12a      	bne.n	8001dcc <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6193      	str	r3, [r2, #24]
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_TIM_MspPostInit+0xc0>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <HAL_TIM_MspPostInit+0xc4>)
 8001da4:	f001 fa60 	bl	8003268 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_TIM_MspPostInit+0xc8>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_TIM_MspPostInit+0xc8>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	6053      	str	r3, [r2, #4]
}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	40010000 	.word	0x40010000

08001de4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_PCD_MspInit+0x44>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d113      	bne.n	8001e1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_PCD_MspInit+0x48>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_PCD_MspInit+0x48>)
 8001dfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_PCD_MspInit+0x48>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	2014      	movs	r0, #20
 8001e14:	f000 fe03 	bl	8002a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001e18:	2014      	movs	r0, #20
 8001e1a:	f000 fe1c 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USB_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40005c00 	.word	0x40005c00
 8001e2c:	40021000 	.word	0x40021000

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <HardFault_Handler+0x4>

08001e42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <MemManage_Handler+0x4>

08001e48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <BusFault_Handler+0x4>

08001e4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <UsageFault_Handler+0x4>

08001e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7c:	f000 f92a 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <DMA1_Channel1_IRQHandler+0x10>)
 8001e8a:	f000 feb9 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20001658 	.word	0x20001658

08001e98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
  //HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_1);
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <DMA1_Channel5_IRQHandler+0x10>)
 8001e9e:	f000 feaf 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20001510 	.word	0x20001510

08001eac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001eb0:	2020      	movs	r0, #32
 8001eb2:	f001 fb7b 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <TIM3_IRQHandler+0x10>)
 8001ec2:	f004 f91b 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200015e8 	.word	0x200015e8

08001ed0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <TIM4_IRQHandler+0x10>)
 8001ed6:	f004 f911 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20001554 	.word	0x20001554

08001ee4 <USB_LP_CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 1 */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001eea:	f002 fbda 	bl	80046a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000171c 	.word	0x2000171c

08001ef8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
	return 1;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <_kill>:

int _kill(int pid, int sig)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f10:	f015 fe5e 	bl	8017bd0 <__errno>
 8001f14:	4602      	mov	r2, r0
 8001f16:	2316      	movs	r3, #22
 8001f18:	6013      	str	r3, [r2, #0]
	return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_exit>:

void _exit (int status)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffe7 	bl	8001f06 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f38:	e7fe      	b.n	8001f38 <_exit+0x12>
	...

08001f3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_sbrk+0x50>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <_sbrk+0x16>
		heap_end = &end;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <_sbrk+0x50>)
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <_sbrk+0x54>)
 8001f50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <_sbrk+0x50>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <_sbrk+0x50>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	466a      	mov	r2, sp
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d907      	bls.n	8001f76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f66:	f015 fe33 	bl	8017bd0 <__errno>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	e006      	b.n	8001f84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <_sbrk+0x50>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <_sbrk+0x50>)
 8001f80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000b3c 	.word	0x20000b3c
 8001f90:	200021a8 	.word	0x200021a8

08001f94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <SystemInit+0x5c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <SystemInit+0x5c>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <SystemInit+0x5c>)
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4911      	ldr	r1, [pc, #68]	; (8001ff0 <SystemInit+0x5c>)
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <SystemInit+0x60>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <SystemInit+0x5c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <SystemInit+0x5c>)
 8001fb6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <SystemInit+0x5c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SystemInit+0x5c>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <SystemInit+0x5c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <SystemInit+0x5c>)
 8001fd2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fd6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SystemInit+0x5c>)
 8001fda:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fde:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SystemInit+0x64>)
 8001fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	f8ff0000 	.word	0xf8ff0000
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ffc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ffe:	e003      	b.n	8002008 <LoopCopyDataInit>

08002000 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002002:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002004:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002006:	3104      	adds	r1, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002008:	480a      	ldr	r0, [pc, #40]	; (8002034 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800200c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800200e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002010:	d3f6      	bcc.n	8002000 <CopyDataInit>
  ldr r2, =_sbss
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002014:	e002      	b.n	800201c <LoopFillZerobss>

08002016 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002018:	f842 3b04 	str.w	r3, [r2], #4

0800201c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800201e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002020:	d3f9      	bcc.n	8002016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002022:	f7ff ffb7 	bl	8001f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002026:	f015 fdd9 	bl	8017bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800202a:	f7ff f969 	bl	8001300 <main>
  bx lr
 800202e:	4770      	bx	lr
  ldr r3, =_sidata
 8002030:	080193e4 	.word	0x080193e4
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002038:	200008f8 	.word	0x200008f8
  ldr r2, =_sbss
 800203c:	200008f8 	.word	0x200008f8
  ldr r3, = _ebss
 8002040:	200021a4 	.word	0x200021a4

08002044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC1_2_IRQHandler>
	...

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_Init+0x28>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_Init+0x28>)
 8002052:	f043 0310 	orr.w	r3, r3, #16
 8002056:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 fcd5 	bl	8002a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f808 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fcb0 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fced 	bl	8002a72 <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 fcb5 	bl	8002a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000004 	.word	0x20000004
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_IncTick+0x1c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_IncTick+0x20>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <HAL_IncTick+0x20>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	2000000c 	.word	0x2000000c
 80020f4:	20001988 	.word	0x20001988

080020f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_GetTick+0x10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	20001988 	.word	0x20001988

0800210c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0be      	b.n	80022ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fc6e 	bl	8001a2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 faed 	bl	8002730 <ADC_ConversionStop_Disable>
 8002156:	4603      	mov	r3, r0
 8002158:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 8099 	bne.w	800229a <HAL_ADC_Init+0x18e>
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 8095 	bne.w	800229a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800218c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7b1b      	ldrb	r3, [r3, #12]
 8002192:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002194:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4313      	orrs	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a4:	d003      	beq.n	80021ae <HAL_ADC_Init+0xa2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d102      	bne.n	80021b4 <HAL_ADC_Init+0xa8>
 80021ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_Init+0xaa>
 80021b4:	2300      	movs	r3, #0
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7d1b      	ldrb	r3, [r3, #20]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d119      	bne.n	80021f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	035a      	lsls	r2, r3, #13
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e00b      	b.n	80021f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <HAL_ADC_Init+0x1a8>)
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	430b      	orrs	r3, r1
 800221e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002228:	d003      	beq.n	8002232 <HAL_ADC_Init+0x126>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d104      	bne.n	800223c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	3b01      	subs	r3, #1
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	430a      	orrs	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_ADC_Init+0x1ac>)
 8002258:	4013      	ands	r3, r2
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	d10b      	bne.n	8002278 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002276:	e018      	b.n	80022aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f023 0312 	bic.w	r3, r3, #18
 8002280:	f043 0210 	orr.w	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002298:	e007      	b.n	80022aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	ffe1f7fd 	.word	0xffe1f7fd
 80022b8:	ff1f0efe 	.word	0xff1f0efe

080022bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a64      	ldr	r2, [pc, #400]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_ADC_Start_DMA+0x24>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a63      	ldr	r2, [pc, #396]	; (8002468 <HAL_ADC_Start_DMA+0x1ac>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d106      	bne.n	80022ee <HAL_ADC_Start_DMA+0x32>
 80022e0:	4b60      	ldr	r3, [pc, #384]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 80b3 	bne.w	8002454 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_Start_DMA+0x40>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e0ae      	b.n	800245a <HAL_ADC_Start_DMA+0x19e>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f9c1 	bl	800268c <ADC_Enable>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 809a 	bne.w	800244a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a4e      	ldr	r2, [pc, #312]	; (8002468 <HAL_ADC_Start_DMA+0x1ac>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d105      	bne.n	8002340 <HAL_ADC_Start_DMA+0x84>
 8002334:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d115      	bne.n	800236c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d026      	beq.n	80023a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002362:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800236a:	e01d      	b.n	80023a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a39      	ldr	r2, [pc, #228]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <HAL_ADC_Start_DMA+0xd0>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a38      	ldr	r2, [pc, #224]	; (8002468 <HAL_ADC_Start_DMA+0x1ac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d10d      	bne.n	80023a8 <HAL_ADC_Start_DMA+0xec>
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	f023 0206 	bic.w	r2, r3, #6
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
 80023c0:	e002      	b.n	80023c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <HAL_ADC_Start_DMA+0x1b0>)
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <HAL_ADC_Start_DMA+0x1b4>)
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_ADC_Start_DMA+0x1b8>)
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0202 	mvn.w	r2, #2
 80023f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002400:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a18      	ldr	r0, [r3, #32]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	334c      	adds	r3, #76	; 0x4c
 800240c:	4619      	mov	r1, r3
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f000 fb95 	bl	8002b40 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002420:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002424:	d108      	bne.n	8002438 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002434:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002436:	e00f      	b.n	8002458 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002446:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002448:	e006      	b.n	8002458 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002452:	e001      	b.n	8002458 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40012400 	.word	0x40012400
 8002468:	40012800 	.word	0x40012800
 800246c:	080027a5 	.word	0x080027a5
 8002470:	08002821 	.word	0x08002821
 8002474:	0800283d 	.word	0x0800283d

08002478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x20>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e0dc      	b.n	8002676 <HAL_ADC_ConfigChannel+0x1da>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b06      	cmp	r3, #6
 80024ca:	d81c      	bhi.n	8002506 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b05      	subs	r3, #5
 80024de:	221f      	movs	r2, #31
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4019      	ands	r1, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b05      	subs	r3, #5
 80024f8:	fa00 f203 	lsl.w	r2, r0, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
 8002504:	e03c      	b.n	8002580 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d81c      	bhi.n	8002548 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	3b23      	subs	r3, #35	; 0x23
 8002520:	221f      	movs	r2, #31
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	4019      	ands	r1, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b23      	subs	r3, #35	; 0x23
 800253a:	fa00 f203 	lsl.w	r2, r0, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
 8002546:	e01b      	b.n	8002580 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b41      	subs	r3, #65	; 0x41
 800255a:	221f      	movs	r2, #31
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	4019      	ands	r1, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b41      	subs	r3, #65	; 0x41
 8002574:	fa00 f203 	lsl.w	r2, r0, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b09      	cmp	r3, #9
 8002586:	d91c      	bls.n	80025c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68d9      	ldr	r1, [r3, #12]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	3b1e      	subs	r3, #30
 800259a:	2207      	movs	r2, #7
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	4019      	ands	r1, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6898      	ldr	r0, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	3b1e      	subs	r3, #30
 80025b4:	fa00 f203 	lsl.w	r2, r0, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	e019      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6919      	ldr	r1, [r3, #16]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	2207      	movs	r2, #7
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	4019      	ands	r1, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6898      	ldr	r0, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	fa00 f203 	lsl.w	r2, r0, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d003      	beq.n	8002606 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002602:	2b11      	cmp	r3, #17
 8002604:	d132      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <HAL_ADC_ConfigChannel+0x1e4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d125      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d126      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800262c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b10      	cmp	r3, #16
 8002634:	d11a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_ADC_ConfigChannel+0x1e8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <HAL_ADC_ConfigChannel+0x1ec>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	0c9a      	lsrs	r2, r3, #18
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800264c:	e002      	b.n	8002654 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3b01      	subs	r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_ADC_ConfigChannel+0x1b2>
 800265a:	e007      	b.n	800266c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012400 	.word	0x40012400
 8002684:	20000004 	.word	0x20000004
 8002688:	431bde83 	.word	0x431bde83

0800268c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d039      	beq.n	800271e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <ADC_Enable+0x9c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1b      	ldr	r2, [pc, #108]	; (800272c <ADC_Enable+0xa0>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	0c9b      	lsrs	r3, r3, #18
 80026c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026c8:	e002      	b.n	80026d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f9      	bne.n	80026ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026d6:	f7ff fd0f 	bl	80020f8 <HAL_GetTick>
 80026da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026dc:	e018      	b.n	8002710 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026de:	f7ff fd0b 	bl	80020f8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d911      	bls.n	8002710 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f043 0210 	orr.w	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e007      	b.n	8002720 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d1df      	bne.n	80026de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000004 	.word	0x20000004
 800272c:	431bde83 	.word	0x431bde83

08002730 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d127      	bne.n	800279a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800275a:	f7ff fccd 	bl	80020f8 <HAL_GetTick>
 800275e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002760:	e014      	b.n	800278c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002762:	f7ff fcc9 	bl	80020f8 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d90d      	bls.n	800278c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	f043 0210 	orr.w	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e007      	b.n	800279c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d0e3      	beq.n	8002762 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d127      	bne.n	800280e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027d8:	d115      	bne.n	8002806 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d111      	bne.n	8002806 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f00f fb98 	bl	8011f3c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800280c:	e004      	b.n	8002818 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fe22 	bl	8002478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff fe11 	bl	800248a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4906      	ldr	r1, [pc, #24]	; (8002908 <__NVIC_EnableIRQ+0x34>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d4:	d301      	bcc.n	80029da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00f      	b.n	80029fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <SysTick_Config+0x40>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e2:	210f      	movs	r1, #15
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f7ff ff90 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <SysTick_Config+0x40>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <SysTick_Config+0x40>)
 80029f4:	2207      	movs	r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000e010 	.word	0xe000e010

08002a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff2d 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a30:	f7ff ff42 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff90 	bl	8002960 <NVIC_EncodePriority>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff5f 	bl	800290c <__NVIC_SetPriority>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff35 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffa2 	bl	80029c4 <SysTick_Config>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e043      	b.n	8002b2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_DMA_Init+0xa8>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_DMA_Init+0xac>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	009a      	lsls	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_DMA_Init+0xb0>)
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ad6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ada:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	bffdfff8 	.word	0xbffdfff8
 8002b38:	cccccccd 	.word	0xcccccccd
 8002b3c:	40020000 	.word	0x40020000

08002b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_DMA_Start_IT+0x20>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e04a      	b.n	8002bf6 <HAL_DMA_Start_IT+0xb6>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d13a      	bne.n	8002be8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f938 	bl	8002e0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 020e 	orr.w	r2, r2, #14
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e00f      	b.n	8002bd6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0204 	bic.w	r2, r2, #4
 8002bc4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 020a 	orr.w	r2, r2, #10
 8002bd4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e005      	b.n	8002bf4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d04f      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xc8>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04a      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0204 	bic.w	r2, r2, #4
 8002c4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_DMA_IRQHandler+0x1f0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d029      	beq.n	8002cae <HAL_DMA_IRQHandler+0xae>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <HAL_DMA_IRQHandler+0x1f4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d022      	beq.n	8002caa <HAL_DMA_IRQHandler+0xaa>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a63      	ldr	r2, [pc, #396]	; (8002df8 <HAL_DMA_IRQHandler+0x1f8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01a      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0xa4>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a62      	ldr	r2, [pc, #392]	; (8002dfc <HAL_DMA_IRQHandler+0x1fc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d012      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x9e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a60      	ldr	r2, [pc, #384]	; (8002e00 <HAL_DMA_IRQHandler+0x200>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00a      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x98>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5f      	ldr	r2, [pc, #380]	; (8002e04 <HAL_DMA_IRQHandler+0x204>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d102      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x92>
 8002c8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c90:	e00e      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002c92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c96:	e00b      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002c98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c9c:	e008      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002c9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ca2:	e005      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca8:	e002      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002caa:	2340      	movs	r3, #64	; 0x40
 8002cac:	e000      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <HAL_DMA_IRQHandler+0x208>)
 8002cb2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8094 	beq.w	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc6:	e08e      	b.n	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	2202      	movs	r2, #2
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d056      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x186>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d051      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020a 	bic.w	r2, r2, #10
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a38      	ldr	r2, [pc, #224]	; (8002df0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d029      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x166>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a37      	ldr	r2, [pc, #220]	; (8002df4 <HAL_DMA_IRQHandler+0x1f4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d022      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x162>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a35      	ldr	r2, [pc, #212]	; (8002df8 <HAL_DMA_IRQHandler+0x1f8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d01a      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x15c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <HAL_DMA_IRQHandler+0x1fc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d012      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x156>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <HAL_DMA_IRQHandler+0x200>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00a      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x150>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a31      	ldr	r2, [pc, #196]	; (8002e04 <HAL_DMA_IRQHandler+0x204>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d102      	bne.n	8002d4a <HAL_DMA_IRQHandler+0x14a>
 8002d44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d48:	e00e      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4e:	e00b      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d54:	e008      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d5a:	e005      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d60:	e002      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d62:	2320      	movs	r3, #32
 8002d64:	e000      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d66:	2302      	movs	r3, #2
 8002d68:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <HAL_DMA_IRQHandler+0x208>)
 8002d6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d034      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d84:	e02f      	b.n	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d028      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x1e8>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d023      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 020e 	bic.w	r2, r2, #14
 8002dae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
    }
  }
  return;
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
}
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40020008 	.word	0x40020008
 8002df4:	4002001c 	.word	0x4002001c
 8002df8:	40020030 	.word	0x40020030
 8002dfc:	40020044 	.word	0x40020044
 8002e00:	40020058 	.word	0x40020058
 8002e04:	4002006c 	.word	0x4002006c
 8002e08:	40020000 	.word	0x40020000

08002e0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d108      	bne.n	8002e4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e4a:	e007      	b.n	8002e5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_FLASH_Program+0xd8>)
 8002e84:	7e1b      	ldrb	r3, [r3, #24]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_FLASH_Program+0x26>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e054      	b.n	8002f38 <HAL_FLASH_Program+0xd0>
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_FLASH_Program+0xd8>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002e94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e98:	f000 f8a8 	bl	8002fec <FLASH_WaitForLastOperation>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d144      	bne.n	8002f30 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d102      	bne.n	8002eb2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002eac:	2301      	movs	r3, #1
 8002eae:	757b      	strb	r3, [r7, #21]
 8002eb0:	e007      	b.n	8002ec2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d102      	bne.n	8002ebe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	757b      	strb	r3, [r7, #21]
 8002ebc:	e001      	b.n	8002ec2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75bb      	strb	r3, [r7, #22]
 8002ec6:	e02d      	b.n	8002f24 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002ec8:	7dbb      	ldrb	r3, [r7, #22]
 8002eca:	005a      	lsls	r2, r3, #1
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	eb02 0c03 	add.w	ip, r2, r3
 8002ed2:	7dbb      	ldrb	r3, [r7, #22]
 8002ed4:	0119      	lsls	r1, r3, #4
 8002ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eda:	f1c1 0620 	rsb	r6, r1, #32
 8002ede:	f1a1 0020 	sub.w	r0, r1, #32
 8002ee2:	fa22 f401 	lsr.w	r4, r2, r1
 8002ee6:	fa03 f606 	lsl.w	r6, r3, r6
 8002eea:	4334      	orrs	r4, r6
 8002eec:	fa23 f000 	lsr.w	r0, r3, r0
 8002ef0:	4304      	orrs	r4, r0
 8002ef2:	fa23 f501 	lsr.w	r5, r3, r1
 8002ef6:	b2a3      	uxth	r3, r4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4660      	mov	r0, ip
 8002efc:	f000 f85a 	bl	8002fb4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f04:	f000 f872 	bl	8002fec <FLASH_WaitForLastOperation>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_FLASH_Program+0xdc>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <HAL_FLASH_Program+0xdc>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002f1e:	7dbb      	ldrb	r3, [r7, #22]
 8002f20:	3301      	adds	r3, #1
 8002f22:	75bb      	strb	r3, [r7, #22]
 8002f24:	7dba      	ldrb	r2, [r7, #22]
 8002f26:	7d7b      	ldrb	r3, [r7, #21]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3cd      	bcc.n	8002ec8 <HAL_FLASH_Program+0x60>
 8002f2c:	e000      	b.n	8002f30 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002f2e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_FLASH_Program+0xd8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	761a      	strb	r2, [r3, #24]

  return status;
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f40:	20001990 	.word	0x20001990
 8002f44:	40022000 	.word	0x40022000

08002f48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <HAL_FLASH_Unlock+0x40>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_FLASH_Unlock+0x40>)
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_FLASH_Unlock+0x44>)
 8002f62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_FLASH_Unlock+0x40>)
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <HAL_FLASH_Unlock+0x48>)
 8002f68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_FLASH_Unlock+0x40>)
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	45670123 	.word	0x45670123
 8002f90:	cdef89ab 	.word	0xcdef89ab

08002f94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_FLASH_Lock+0x1c>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_FLASH_Lock+0x1c>)
 8002f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40022000 	.word	0x40022000

08002fb4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <FLASH_Program_HalfWord+0x30>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <FLASH_Program_HalfWord+0x34>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <FLASH_Program_HalfWord+0x34>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	801a      	strh	r2, [r3, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20001990 	.word	0x20001990
 8002fe8:	40022000 	.word	0x40022000

08002fec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff f880 	bl	80020f8 <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002ffa:	e010      	b.n	800301e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d00c      	beq.n	800301e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <FLASH_WaitForLastOperation+0x2e>
 800300a:	f7ff f875 	bl	80020f8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d201      	bcs.n	800301e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e025      	b.n	800306a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e8      	bne.n	8002ffc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003036:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 8003038:	2220      	movs	r2, #32
 800303a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <FLASH_WaitForLastOperation+0x88>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003060:	f000 f80a 	bl	8003078 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000

08003078 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003082:	4b23      	ldr	r3, [pc, #140]	; (8003110 <FLASH_SetErrorCode+0x98>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 8003098:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f043 0310 	orr.w	r3, r3, #16
 80030a0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 80030b8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f043 0304 	orr.w	r3, r3, #4
 80030d6:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <FLASH_SetErrorCode+0x9c>)
 80030d8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f240 1201 	movw	r2, #257	; 0x101
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d106      	bne.n	80030fe <FLASH_SetErrorCode+0x86>
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4a06      	ldr	r2, [pc, #24]	; (8003110 <FLASH_SetErrorCode+0x98>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	61d3      	str	r3, [r2, #28]
}  
 80030fc:	e002      	b.n	8003104 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80030fe:	4a04      	ldr	r2, [pc, #16]	; (8003110 <FLASH_SetErrorCode+0x98>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	60d3      	str	r3, [r2, #12]
}  
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40022000 	.word	0x40022000
 8003114:	20001990 	.word	0x20001990

08003118 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800312a:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <HAL_FLASHEx_Erase+0xd0>)
 800312c:	7e1b      	ldrb	r3, [r3, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_FLASHEx_Erase+0x1e>
 8003132:	2302      	movs	r3, #2
 8003134:	e053      	b.n	80031de <HAL_FLASHEx_Erase+0xc6>
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_FLASHEx_Erase+0xd0>)
 8003138:	2201      	movs	r2, #1
 800313a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d116      	bne.n	8003172 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003144:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003148:	f7ff ff50 	bl	8002fec <FLASH_WaitForLastOperation>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d141      	bne.n	80031d6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003152:	2001      	movs	r0, #1
 8003154:	f000 f84c 	bl	80031f0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003158:	f24c 3050 	movw	r0, #50000	; 0xc350
 800315c:	f7ff ff46 	bl	8002fec <FLASH_WaitForLastOperation>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_FLASHEx_Erase+0xd4>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <HAL_FLASHEx_Erase+0xd4>)
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	6113      	str	r3, [r2, #16]
 8003170:	e031      	b.n	80031d6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003172:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003176:	f7ff ff39 	bl	8002fec <FLASH_WaitForLastOperation>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d12a      	bne.n	80031d6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f04f 32ff 	mov.w	r2, #4294967295
 8003186:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	e019      	b.n	80031c4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003190:	68b8      	ldr	r0, [r7, #8]
 8003192:	f000 f849 	bl	8003228 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003196:	f24c 3050 	movw	r0, #50000	; 0xc350
 800319a:	f7ff ff27 	bl	8002fec <FLASH_WaitForLastOperation>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_FLASHEx_Erase+0xd4>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_FLASHEx_Erase+0xd4>)
 80031a8:	f023 0302 	bic.w	r3, r3, #2
 80031ac:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	601a      	str	r2, [r3, #0]
            break;
 80031ba:	e00c      	b.n	80031d6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031c2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	029a      	lsls	r2, r3, #10
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3dc      	bcc.n	8003190 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_FLASHEx_Erase+0xd0>)
 80031d8:	2200      	movs	r2, #0
 80031da:	761a      	strb	r2, [r3, #24]

  return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20001990 	.word	0x20001990
 80031ec:	40022000 	.word	0x40022000

080031f0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <FLASH_MassErase+0x30>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <FLASH_MassErase+0x34>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	4a08      	ldr	r2, [pc, #32]	; (8003224 <FLASH_MassErase+0x34>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <FLASH_MassErase+0x34>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	4a05      	ldr	r2, [pc, #20]	; (8003224 <FLASH_MassErase+0x34>)
 8003210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003214:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	20001990 	.word	0x20001990
 8003224:	40022000 	.word	0x40022000

08003228 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <FLASH_PageErase+0x38>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <FLASH_PageErase+0x3c>)
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <FLASH_PageErase+0x3c>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003242:	4a08      	ldr	r2, [pc, #32]	; (8003264 <FLASH_PageErase+0x3c>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <FLASH_PageErase+0x3c>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	4a05      	ldr	r2, [pc, #20]	; (8003264 <FLASH_PageErase+0x3c>)
 800324e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003252:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20001990 	.word	0x20001990
 8003264:	40022000 	.word	0x40022000

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b08b      	sub	sp, #44	; 0x2c
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327a:	e127      	b.n	80034cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800327c:	2201      	movs	r2, #1
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	429a      	cmp	r2, r3
 8003296:	f040 8116 	bne.w	80034c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b12      	cmp	r3, #18
 80032a0:	d034      	beq.n	800330c <HAL_GPIO_Init+0xa4>
 80032a2:	2b12      	cmp	r3, #18
 80032a4:	d80d      	bhi.n	80032c2 <HAL_GPIO_Init+0x5a>
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d02b      	beq.n	8003302 <HAL_GPIO_Init+0x9a>
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d804      	bhi.n	80032b8 <HAL_GPIO_Init+0x50>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d031      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d01c      	beq.n	80032f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032b6:	e048      	b.n	800334a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d043      	beq.n	8003344 <HAL_GPIO_Init+0xdc>
 80032bc:	2b11      	cmp	r3, #17
 80032be:	d01b      	beq.n	80032f8 <HAL_GPIO_Init+0x90>
          break;
 80032c0:	e043      	b.n	800334a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032c2:	4a89      	ldr	r2, [pc, #548]	; (80034e8 <HAL_GPIO_Init+0x280>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d026      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032c8:	4a87      	ldr	r2, [pc, #540]	; (80034e8 <HAL_GPIO_Init+0x280>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d806      	bhi.n	80032dc <HAL_GPIO_Init+0x74>
 80032ce:	4a87      	ldr	r2, [pc, #540]	; (80034ec <HAL_GPIO_Init+0x284>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d020      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032d4:	4a86      	ldr	r2, [pc, #536]	; (80034f0 <HAL_GPIO_Init+0x288>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01d      	beq.n	8003316 <HAL_GPIO_Init+0xae>
          break;
 80032da:	e036      	b.n	800334a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032dc:	4a85      	ldr	r2, [pc, #532]	; (80034f4 <HAL_GPIO_Init+0x28c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d019      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032e2:	4a85      	ldr	r2, [pc, #532]	; (80034f8 <HAL_GPIO_Init+0x290>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d016      	beq.n	8003316 <HAL_GPIO_Init+0xae>
 80032e8:	4a84      	ldr	r2, [pc, #528]	; (80034fc <HAL_GPIO_Init+0x294>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_GPIO_Init+0xae>
          break;
 80032ee:	e02c      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	623b      	str	r3, [r7, #32]
          break;
 80032f6:	e028      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	3304      	adds	r3, #4
 80032fe:	623b      	str	r3, [r7, #32]
          break;
 8003300:	e023      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	3308      	adds	r3, #8
 8003308:	623b      	str	r3, [r7, #32]
          break;
 800330a:	e01e      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	330c      	adds	r3, #12
 8003312:	623b      	str	r3, [r7, #32]
          break;
 8003314:	e019      	b.n	800334a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800331e:	2304      	movs	r3, #4
 8003320:	623b      	str	r3, [r7, #32]
          break;
 8003322:	e012      	b.n	800334a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800332c:	2308      	movs	r3, #8
 800332e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	611a      	str	r2, [r3, #16]
          break;
 8003336:	e008      	b.n	800334a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003338:	2308      	movs	r3, #8
 800333a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	615a      	str	r2, [r3, #20]
          break;
 8003342:	e002      	b.n	800334a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003344:	2300      	movs	r3, #0
 8003346:	623b      	str	r3, [r7, #32]
          break;
 8003348:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2bff      	cmp	r3, #255	; 0xff
 800334e:	d801      	bhi.n	8003354 <HAL_GPIO_Init+0xec>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	e001      	b.n	8003358 <HAL_GPIO_Init+0xf0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2bff      	cmp	r3, #255	; 0xff
 800335e:	d802      	bhi.n	8003366 <HAL_GPIO_Init+0xfe>
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	e002      	b.n	800336c <HAL_GPIO_Init+0x104>
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	3b08      	subs	r3, #8
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	210f      	movs	r1, #15
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	401a      	ands	r2, r3
 800337e:	6a39      	ldr	r1, [r7, #32]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	431a      	orrs	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8096 	beq.w	80034c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800339a:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_GPIO_Init+0x298>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_GPIO_Init+0x298>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6193      	str	r3, [r2, #24]
 80033a6:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_GPIO_Init+0x298>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033b2:	4a54      	ldr	r2, [pc, #336]	; (8003504 <HAL_GPIO_Init+0x29c>)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <HAL_GPIO_Init+0x2a0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x19e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4a      	ldr	r2, [pc, #296]	; (800350c <HAL_GPIO_Init+0x2a4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x19a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a49      	ldr	r2, [pc, #292]	; (8003510 <HAL_GPIO_Init+0x2a8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x196>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a48      	ldr	r2, [pc, #288]	; (8003514 <HAL_GPIO_Init+0x2ac>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x192>
 80033f6:	2303      	movs	r3, #3
 80033f8:	e006      	b.n	8003408 <HAL_GPIO_Init+0x1a0>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e004      	b.n	8003408 <HAL_GPIO_Init+0x1a0>
 80033fe:	2302      	movs	r3, #2
 8003400:	e002      	b.n	8003408 <HAL_GPIO_Init+0x1a0>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_GPIO_Init+0x1a0>
 8003406:	2300      	movs	r3, #0
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	f002 0203 	and.w	r2, r2, #3
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4093      	lsls	r3, r2
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003418:	493a      	ldr	r1, [pc, #232]	; (8003504 <HAL_GPIO_Init+0x29c>)
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003432:	4b39      	ldr	r3, [pc, #228]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4938      	ldr	r1, [pc, #224]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
 800343e:	e006      	b.n	800344e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003440:	4b35      	ldr	r3, [pc, #212]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	43db      	mvns	r3, r3
 8003448:	4933      	ldr	r1, [pc, #204]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 800344a:	4013      	ands	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d006      	beq.n	8003468 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	492e      	ldr	r1, [pc, #184]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
 8003466:	e006      	b.n	8003476 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003468:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	43db      	mvns	r3, r3
 8003470:	4929      	ldr	r1, [pc, #164]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003472:	4013      	ands	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003482:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	4924      	ldr	r1, [pc, #144]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
 800348e:	e006      	b.n	800349e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	43db      	mvns	r3, r3
 8003498:	491f      	ldr	r1, [pc, #124]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 800349a:	4013      	ands	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d006      	beq.n	80034b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	491a      	ldr	r1, [pc, #104]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60cb      	str	r3, [r1, #12]
 80034b6:	e006      	b.n	80034c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	43db      	mvns	r3, r3
 80034c0:	4915      	ldr	r1, [pc, #84]	; (8003518 <HAL_GPIO_Init+0x2b0>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	3301      	adds	r3, #1
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f47f aed0 	bne.w	800327c <HAL_GPIO_Init+0x14>
  }
}
 80034dc:	bf00      	nop
 80034de:	372c      	adds	r7, #44	; 0x2c
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	10210000 	.word	0x10210000
 80034ec:	10110000 	.word	0x10110000
 80034f0:	10120000 	.word	0x10120000
 80034f4:	10310000 	.word	0x10310000
 80034f8:	10320000 	.word	0x10320000
 80034fc:	10220000 	.word	0x10220000
 8003500:	40021000 	.word	0x40021000
 8003504:	40010000 	.word	0x40010000
 8003508:	40010800 	.word	0x40010800
 800350c:	40010c00 	.word	0x40010c00
 8003510:	40011000 	.word	0x40011000
 8003514:	40011400 	.word	0x40011400
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e001      	b.n	800353e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	807b      	strh	r3, [r7, #2]
 8003556:	4613      	mov	r3, r2
 8003558:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800355a:	787b      	ldrb	r3, [r7, #1]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003560:	887a      	ldrh	r2, [r7, #2]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003566:	e003      	b.n	8003570 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	041a      	lsls	r2, r3, #16
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	611a      	str	r2, [r3, #16]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003598:	e002      	b.n	80035a0 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	611a      	str	r2, [r3, #16]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f00e fd24 	bl	8012018 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e10f      	b.n	800380e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe fa7c 	bl	8001b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003620:	f002 f9f0 	bl	8005a04 <HAL_RCC_GetPCLK1Freq>
 8003624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4a7b      	ldr	r2, [pc, #492]	; (8003818 <HAL_I2C_Init+0x23c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d807      	bhi.n	8003640 <HAL_I2C_Init+0x64>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a7a      	ldr	r2, [pc, #488]	; (800381c <HAL_I2C_Init+0x240>)
 8003634:	4293      	cmp	r3, r2
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e006      	b.n	800364e <HAL_I2C_Init+0x72>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a77      	ldr	r2, [pc, #476]	; (8003820 <HAL_I2C_Init+0x244>)
 8003644:	4293      	cmp	r3, r2
 8003646:	bf94      	ite	ls
 8003648:	2301      	movls	r3, #1
 800364a:	2300      	movhi	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0db      	b.n	800380e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a72      	ldr	r2, [pc, #456]	; (8003824 <HAL_I2C_Init+0x248>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	0c9b      	lsrs	r3, r3, #18
 8003660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a64      	ldr	r2, [pc, #400]	; (8003818 <HAL_I2C_Init+0x23c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d802      	bhi.n	8003690 <HAL_I2C_Init+0xb4>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3301      	adds	r3, #1
 800368e:	e009      	b.n	80036a4 <HAL_I2C_Init+0xc8>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	4a63      	ldr	r2, [pc, #396]	; (8003828 <HAL_I2C_Init+0x24c>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	3301      	adds	r3, #1
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4956      	ldr	r1, [pc, #344]	; (8003818 <HAL_I2C_Init+0x23c>)
 80036c0:	428b      	cmp	r3, r1
 80036c2:	d80d      	bhi.n	80036e0 <HAL_I2C_Init+0x104>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1e59      	subs	r1, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d2:	3301      	adds	r3, #1
 80036d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d8:	2b04      	cmp	r3, #4
 80036da:	bf38      	it	cc
 80036dc:	2304      	movcc	r3, #4
 80036de:	e04f      	b.n	8003780 <HAL_I2C_Init+0x1a4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d111      	bne.n	800370c <HAL_I2C_Init+0x130>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1e58      	subs	r0, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	440b      	add	r3, r1
 80036f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e012      	b.n	8003732 <HAL_I2C_Init+0x156>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1e58      	subs	r0, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	0099      	lsls	r1, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003722:	3301      	adds	r3, #1
 8003724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Init+0x15e>
 8003736:	2301      	movs	r3, #1
 8003738:	e022      	b.n	8003780 <HAL_I2C_Init+0x1a4>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10e      	bne.n	8003760 <HAL_I2C_Init+0x184>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1e58      	subs	r0, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	440b      	add	r3, r1
 8003750:	fbb0 f3f3 	udiv	r3, r0, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375e:	e00f      	b.n	8003780 <HAL_I2C_Init+0x1a4>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	0099      	lsls	r1, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	fbb0 f3f3 	udiv	r3, r0, r3
 8003776:	3301      	adds	r3, #1
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	6809      	ldr	r1, [r1, #0]
 8003784:	4313      	orrs	r3, r2
 8003786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6911      	ldr	r1, [r2, #16]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68d2      	ldr	r2, [r2, #12]
 80037ba:	4311      	orrs	r1, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	000186a0 	.word	0x000186a0
 800381c:	001e847f 	.word	0x001e847f
 8003820:	003d08ff 	.word	0x003d08ff
 8003824:	431bde83 	.word	0x431bde83
 8003828:	10624dd3 	.word	0x10624dd3

0800382c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	461a      	mov	r2, r3
 8003838:	460b      	mov	r3, r1
 800383a:	817b      	strh	r3, [r7, #10]
 800383c:	4613      	mov	r3, r2
 800383e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003840:	f7fe fc5a 	bl	80020f8 <HAL_GetTick>
 8003844:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b20      	cmp	r3, #32
 8003850:	f040 80e0 	bne.w	8003a14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2319      	movs	r3, #25
 800385a:	2201      	movs	r2, #1
 800385c:	4970      	ldr	r1, [pc, #448]	; (8003a20 <HAL_I2C_Master_Transmit+0x1f4>)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fc3c 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
 800386c:	e0d3      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_I2C_Master_Transmit+0x50>
 8003878:	2302      	movs	r3, #2
 800387a:	e0cc      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d007      	beq.n	80038a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2221      	movs	r2, #33	; 0x21
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2210      	movs	r2, #16
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	893a      	ldrh	r2, [r7, #8]
 80038d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a50      	ldr	r2, [pc, #320]	; (8003a24 <HAL_I2C_Master_Transmit+0x1f8>)
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038e4:	8979      	ldrh	r1, [r7, #10]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	6a3a      	ldr	r2, [r7, #32]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 faca 	bl	8003e84 <I2C_MasterRequestWrite>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e08d      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003910:	e066      	b.n	80039e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	6a39      	ldr	r1, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fcb6 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b04      	cmp	r3, #4
 8003928:	d107      	bne.n	800393a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d11b      	bne.n	80039b4 <HAL_I2C_Master_Transmit+0x188>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	2b00      	cmp	r3, #0
 8003982:	d017      	beq.n	80039b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	6a39      	ldr	r1, [r7, #32]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 fca6 	bl	800430a <I2C_WaitOnBTFFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d107      	bne.n	80039dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e01a      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d194      	bne.n	8003912 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	00100002 	.word	0x00100002
 8003a24:	ffff0000 	.word	0xffff0000

08003a28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	461a      	mov	r2, r3
 8003a34:	460b      	mov	r3, r1
 8003a36:	817b      	strh	r3, [r7, #10]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a3c:	f7fe fb5c 	bl	80020f8 <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	f040 8213 	bne.w	8003e76 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2319      	movs	r3, #25
 8003a56:	2201      	movs	r2, #1
 8003a58:	497e      	ldr	r1, [pc, #504]	; (8003c54 <HAL_I2C_Master_Receive+0x22c>)
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fb3e 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
 8003a68:	e206      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2C_Master_Receive+0x50>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e1ff      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d007      	beq.n	8003a9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2222      	movs	r2, #34	; 0x22
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2210      	movs	r2, #16
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	893a      	ldrh	r2, [r7, #8]
 8003ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a5e      	ldr	r2, [pc, #376]	; (8003c58 <HAL_I2C_Master_Receive+0x230>)
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ae0:	8979      	ldrh	r1, [r7, #10]
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fa42 	bl	8003f70 <I2C_MasterRequestRead>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e1c0      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d113      	bne.n	8003b26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	623b      	str	r3, [r7, #32]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	623b      	str	r3, [r7, #32]
 8003b12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e194      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d11d      	bne.n	8003b6a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b3e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b66:	b662      	cpsie	i
 8003b68:	e172      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d11d      	bne.n	8003bae <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b82:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003baa:	b662      	cpsie	i
 8003bac:	e150      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bd4:	e13c      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	f200 80f5 	bhi.w	8003dca <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d123      	bne.n	8003c30 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fbcd 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e13d      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c2e:	e10f      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d150      	bne.n	8003cda <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4906      	ldr	r1, [pc, #24]	; (8003c5c <HAL_I2C_Master_Receive+0x234>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa4a 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e112      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
 8003c52:	bf00      	nop
 8003c54:	00100002 	.word	0x00100002
 8003c58:	ffff0000 	.word	0xffff0000
 8003c5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c60:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c70:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd8:	e0ba      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4967      	ldr	r1, [pc, #412]	; (8003e80 <HAL_I2C_Master_Receive+0x458>)
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f9f9 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0c1      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d04:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	2200      	movs	r2, #0
 8003d40:	494f      	ldr	r1, [pc, #316]	; (8003e80 <HAL_I2C_Master_Receive+0x458>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f9ca 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e092      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d60:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d94:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc8:	e042      	b.n	8003e50 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fadc 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e04c      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d118      	bne.n	8003e50 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f47f aebe 	bne.w	8003bd6 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	00010004 	.word	0x00010004

08003e84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	460b      	mov	r3, r1
 8003e92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d006      	beq.n	8003eae <I2C_MasterRequestWrite+0x2a>
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d003      	beq.n	8003eae <I2C_MasterRequestWrite+0x2a>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eac:	d108      	bne.n	8003ec0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e00b      	b.n	8003ed8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	2b12      	cmp	r3, #18
 8003ec6:	d107      	bne.n	8003ed8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f8f9 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e035      	b.n	8003f60 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003efc:	d108      	bne.n	8003f10 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003efe:	897b      	ldrh	r3, [r7, #10]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f0c:	611a      	str	r2, [r3, #16]
 8003f0e:	e01b      	b.n	8003f48 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f10:	897b      	ldrh	r3, [r7, #10]
 8003f12:	11db      	asrs	r3, r3, #7
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 0306 	and.w	r3, r3, #6
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f063 030f 	orn	r3, r3, #15
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	490e      	ldr	r1, [pc, #56]	; (8003f68 <I2C_MasterRequestWrite+0xe4>)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f92b 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e010      	b.n	8003f60 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f3e:	897b      	ldrh	r3, [r7, #10]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4907      	ldr	r1, [pc, #28]	; (8003f6c <I2C_MasterRequestWrite+0xe8>)
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f91b 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	00010008 	.word	0x00010008
 8003f6c:	00010002 	.word	0x00010002

08003f70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d006      	beq.n	8003faa <I2C_MasterRequestRead+0x3a>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d003      	beq.n	8003faa <I2C_MasterRequestRead+0x3a>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa8:	d108      	bne.n	8003fbc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e00b      	b.n	8003fd4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b11      	cmp	r3, #17
 8003fc2:	d107      	bne.n	8003fd4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f87b 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e06d      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff8:	d108      	bne.n	800400c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ffa:	897b      	ldrh	r3, [r7, #10]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e053      	b.n	80040b4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800400c:	897b      	ldrh	r3, [r7, #10]
 800400e:	11db      	asrs	r3, r3, #7
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0306 	and.w	r3, r3, #6
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f063 030f 	orn	r3, r3, #15
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	492a      	ldr	r1, [pc, #168]	; (80040d4 <I2C_MasterRequestRead+0x164>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f8ad 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e048      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800403a:	897b      	ldrh	r3, [r7, #10]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4923      	ldr	r1, [pc, #140]	; (80040d8 <I2C_MasterRequestRead+0x168>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f89d 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e038      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800407e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f825 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e017      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	11db      	asrs	r3, r3, #7
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f003 0306 	and.w	r3, r3, #6
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f063 030e 	orn	r3, r3, #14
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4907      	ldr	r1, [pc, #28]	; (80040d8 <I2C_MasterRequestRead+0x168>)
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f865 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	00010008 	.word	0x00010008
 80040d8:	00010002 	.word	0x00010002

080040dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ec:	e025      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d021      	beq.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fd ffff 	bl	80020f8 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e023      	b.n	8004182 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10d      	bne.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	e00c      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	429a      	cmp	r2, r3
 800417e:	d0b6      	beq.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004198:	e051      	b.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d123      	bne.n	80041f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0204 	orr.w	r2, r3, #4
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e046      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d021      	beq.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fd ff7d 	bl	80020f8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e020      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10c      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4013      	ands	r3, r2
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e00b      	b.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d18d      	bne.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004294:	e02d      	b.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8ce 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e02d      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d021      	beq.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fd ff23 	bl	80020f8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e007      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b80      	cmp	r3, #128	; 0x80
 80042fe:	d1ca      	bne.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004316:	e02d      	b.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f88d 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e02d      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d021      	beq.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fd fee2 	bl	80020f8 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d1ca      	bne.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004398:	e042      	b.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d119      	bne.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0210 	mvn.w	r2, #16
 80043b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e029      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fd fe8c 	bl	80020f8 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e007      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d1b5      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d11b      	bne.n	8004488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004496:	b08b      	sub	sp, #44	; 0x2c
 8004498:	af06      	add	r7, sp, #24
 800449a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0d3      	b.n	800464e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd fc92 	bl	8001de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2203      	movs	r2, #3
 80044c4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f002 fcc5 	bl	8006e5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	687e      	ldr	r6, [r7, #4]
 80044da:	466d      	mov	r5, sp
 80044dc:	f106 0410 	add.w	r4, r6, #16
 80044e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	1d33      	adds	r3, r6, #4
 80044ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ec:	6838      	ldr	r0, [r7, #0]
 80044ee:	f002 fc8e 	bl	8006e0e <USB_CoreInit>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0a4      	b.n	800464e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f002 fcc2 	bl	8006e94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004510:	2300      	movs	r3, #0
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	e035      	b.n	8004582 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	015b      	lsls	r3, r3, #5
 800451c:	4413      	add	r3, r2
 800451e:	3329      	adds	r3, #41	; 0x29
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	015b      	lsls	r3, r3, #5
 800452a:	4413      	add	r3, r2
 800452c:	3328      	adds	r3, #40	; 0x28
 800452e:	7bfa      	ldrb	r2, [r7, #15]
 8004530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	b291      	uxth	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	015b      	lsls	r3, r3, #5
 800453c:	4413      	add	r3, r2
 800453e:	3336      	adds	r3, #54	; 0x36
 8004540:	460a      	mov	r2, r1
 8004542:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	015b      	lsls	r3, r3, #5
 800454a:	4413      	add	r3, r2
 800454c:	332b      	adds	r3, #43	; 0x2b
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	015b      	lsls	r3, r3, #5
 8004558:	4413      	add	r3, r2
 800455a:	3338      	adds	r3, #56	; 0x38
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	015b      	lsls	r3, r3, #5
 8004566:	4413      	add	r3, r2
 8004568:	333c      	adds	r3, #60	; 0x3c
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	3302      	adds	r3, #2
 8004574:	015b      	lsls	r3, r3, #5
 8004576:	4413      	add	r3, r2
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	3301      	adds	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d3c4      	bcc.n	8004516 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e031      	b.n	80045f6 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	015b      	lsls	r3, r3, #5
 8004598:	4413      	add	r3, r2
 800459a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	015b      	lsls	r3, r3, #5
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	015b      	lsls	r3, r3, #5
 80045b8:	4413      	add	r3, r2
 80045ba:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	015b      	lsls	r3, r3, #5
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	015b      	lsls	r3, r3, #5
 80045d8:	4413      	add	r3, r2
 80045da:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	330a      	adds	r3, #10
 80045e8:	015b      	lsls	r3, r3, #5
 80045ea:	4413      	add	r3, r2
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	3301      	adds	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d3c8      	bcc.n	8004592 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	687e      	ldr	r6, [r7, #4]
 8004608:	466d      	mov	r5, sp
 800460a:	f106 0410 	add.w	r4, r6, #16
 800460e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	1d33      	adds	r3, r6, #4
 8004618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800461a:	6838      	ldr	r0, [r7, #0]
 800461c:	f002 fc46 	bl	8006eac <USB_DevInit>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e00d      	b.n	800464e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f003 fc83 	bl	8007f52 <USB_DevDisconnect>

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004656 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_PCD_Start+0x16>
 8004668:	2302      	movs	r3, #2
 800466a:	e016      	b.n	800469a <HAL_PCD_Start+0x44>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004674:	2101      	movs	r1, #1
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f00f fa5d 	bl	8013b36 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f003 fc5c 	bl	8007f3e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f002 fbcf 	bl	8006e2e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f003 fc59 	bl	8007f66 <USB_ReadInterrupts>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046be:	d102      	bne.n	80046c6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 faf3 	bl	8004cac <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 fc4b 	bl	8007f66 <USB_ReadInterrupts>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d112      	bne.n	8004702 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ee:	b292      	uxth	r2, r2
 80046f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f00f f830 	bl	801375a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046fa:	2100      	movs	r1, #0
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f8de 	bl	80048be <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f003 fc2d 	bl	8007f66 <USB_ReadInterrupts>
 800470c:	4603      	mov	r3, r0
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004716:	d10b      	bne.n	8004730 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800472a:	b292      	uxth	r2, r2
 800472c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f003 fc16 	bl	8007f66 <USB_ReadInterrupts>
 800473a:	4603      	mov	r3, r0
 800473c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004744:	d10b      	bne.n	800475e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004758:	b292      	uxth	r2, r2
 800475a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f003 fbff 	bl	8007f66 <USB_ReadInterrupts>
 8004768:	4603      	mov	r3, r0
 800476a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d126      	bne.n	80047c2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800477c:	b29a      	uxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	b292      	uxth	r2, r2
 8004788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0208 	bic.w	r2, r2, #8
 800479e:	b292      	uxth	r2, r2
 80047a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f00f f811 	bl	80137cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047bc:	b292      	uxth	r2, r2
 80047be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f003 fbcd 	bl	8007f66 <USB_ReadInterrupts>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d6:	d13d      	bne.n	8004854 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	b292      	uxth	r2, r2
 80047ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004802:	b292      	uxth	r2, r2
 8004804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0204 	orr.w	r2, r2, #4
 800481a:	b292      	uxth	r2, r2
 800481c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f003 fb9e 	bl	8007f66 <USB_ReadInterrupts>
 800482a:	4603      	mov	r3, r0
 800482c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004834:	d10b      	bne.n	800484e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004848:	b292      	uxth	r2, r2
 800484a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f00e ffa2 	bl	8013798 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f003 fb84 	bl	8007f66 <USB_ReadInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d10e      	bne.n	8004888 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004872:	b29a      	uxth	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800487c:	b292      	uxth	r2, r2
 800487e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f00e ff5b 	bl	801373e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f003 fb6a 	bl	8007f66 <USB_ReadInterrupts>
 8004892:	4603      	mov	r3, r0
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489c:	d10b      	bne.n	80048b6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b0:	b292      	uxth	r2, r2
 80048b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_PCD_SetAddress+0x1a>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e013      	b.n	8004900 <HAL_PCD_SetAddress+0x42>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	4611      	mov	r1, r2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f003 fb11 	bl	8007f18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	4608      	mov	r0, r1
 8004912:	4611      	mov	r1, r2
 8004914:	461a      	mov	r2, r3
 8004916:	4603      	mov	r3, r0
 8004918:	70fb      	strb	r3, [r7, #3]
 800491a:	460b      	mov	r3, r1
 800491c:	803b      	strh	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004926:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	da0b      	bge.n	8004946 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	015b      	lsls	r3, r3, #5
 8004936:	3328      	adds	r3, #40	; 0x28
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	705a      	strb	r2, [r3, #1]
 8004944:	e00b      	b.n	800495e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	015b      	lsls	r3, r3, #5
 800494e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800496a:	883a      	ldrh	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	78ba      	ldrb	r2, [r7, #2]
 8004974:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	785b      	ldrb	r3, [r3, #1]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004988:	78bb      	ldrb	r3, [r7, #2]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d102      	bne.n	8004994 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_PCD_EP_Open+0x9a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e00e      	b.n	80049c0 <HAL_PCD_EP_Open+0xb8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f002 fa9f 	bl	8006ef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80049be:	7afb      	ldrb	r3, [r7, #11]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da0b      	bge.n	80049f4 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	015b      	lsls	r3, r3, #5
 80049e4:	3328      	adds	r3, #40	; 0x28
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	705a      	strb	r2, [r3, #1]
 80049f2:	e00b      	b.n	8004a0c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	015b      	lsls	r3, r3, #5
 80049fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_PCD_EP_Close+0x5e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e00e      	b.n	8004a44 <HAL_PCD_EP_Close+0x7c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f002 fd4b 	bl	80074d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	607a      	str	r2, [r7, #4]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a5c:	7afb      	ldrb	r3, [r7, #11]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	015b      	lsls	r3, r3, #5
 8004a64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2200      	movs	r2, #0
 8004a84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a86:	7afb      	ldrb	r3, [r7, #11]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a92:	7afb      	ldrb	r3, [r7, #11]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6979      	ldr	r1, [r7, #20]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f002 feaa 	bl	80077fc <USB_EPStartXfer>
 8004aa8:	e005      	b.n	8004ab6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6979      	ldr	r1, [r7, #20]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f002 fea3 	bl	80077fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	330a      	adds	r3, #10
 8004ad6:	015b      	lsls	r3, r3, #5
 8004ad8:	4413      	add	r3, r2
 8004ada:	3304      	adds	r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	460b      	mov	r3, r1
 8004af6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	015b      	lsls	r3, r3, #5
 8004b00:	3328      	adds	r3, #40	; 0x28
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b20:	7afb      	ldrb	r3, [r7, #11]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f002 fe5d 	bl	80077fc <USB_EPStartXfer>
 8004b42:	e005      	b.n	8004b50 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6979      	ldr	r1, [r7, #20]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f002 fe56 	bl	80077fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	f003 0207 	and.w	r2, r3, #7
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d901      	bls.n	8004b78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e046      	b.n	8004c06 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da0b      	bge.n	8004b98 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	015b      	lsls	r3, r3, #5
 8004b88:	3328      	adds	r3, #40	; 0x28
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	705a      	strb	r2, [r3, #1]
 8004b96:	e009      	b.n	8004bac <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	015b      	lsls	r3, r3, #5
 8004b9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_PCD_EP_SetStall+0x72>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e01c      	b.n	8004c06 <HAL_PCD_EP_SetStall+0xac>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68f9      	ldr	r1, [r7, #12]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f003 f8c6 	bl	8007d6c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d108      	bne.n	8004bfc <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f003 f9c4 	bl	8007f84 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	f003 020f 	and.w	r2, r3, #15
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d901      	bls.n	8004c2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e03a      	b.n	8004ca2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	da0b      	bge.n	8004c4c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	015b      	lsls	r3, r3, #5
 8004c3c:	3328      	adds	r3, #40	; 0x28
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	705a      	strb	r2, [r3, #1]
 8004c4a:	e00b      	b.n	8004c64 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	015b      	lsls	r3, r3, #5
 8004c54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_PCD_EP_ClrStall+0x76>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e00e      	b.n	8004ca2 <HAL_PCD_EP_ClrStall+0x94>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f003 f8ac 	bl	8007df0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b089      	sub	sp, #36	; 0x24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cb4:	e282      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cbe:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cc0:	8afb      	ldrh	r3, [r7, #22]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004cca:	7d7b      	ldrb	r3, [r7, #21]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 8142 	bne.w	8004f56 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cd2:	8afb      	ldrh	r3, [r7, #22]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d151      	bne.n	8004d80 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cec:	b29c      	uxth	r4, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3328      	adds	r3, #40	; 0x28
 8004d02:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	3302      	adds	r3, #2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	441a      	add	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f00e fce5 	bl	8013710 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8234 	beq.w	80051bc <PCD_EP_ISR_Handler+0x510>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f040 822f 	bne.w	80051bc <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	b292      	uxth	r2, r2
 8004d72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d7e:	e21d      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d86:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d90:	8a7b      	ldrh	r3, [r7, #18]
 8004d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d033      	beq.n	8004e02 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	3306      	adds	r3, #6
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f003 f922 	bl	8008022 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004dea:	4013      	ands	r3, r2
 8004dec:	b29c      	uxth	r4, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004df6:	b292      	uxth	r2, r2
 8004df8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f00e fc5e 	bl	80136bc <HAL_PCD_SetupStageCallback>
 8004e00:	e1dc      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f280 81d8 	bge.w	80051bc <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e18:	4013      	ands	r3, r2
 8004e1a:	b29c      	uxth	r4, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004e24:	b292      	uxth	r2, r2
 8004e26:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	461a      	mov	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3306      	adds	r3, #6
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d019      	beq.n	8004e90 <PCD_EP_ISR_Handler+0x1e4>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d015      	beq.n	8004e90 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6959      	ldr	r1, [r3, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f003 f8d4 	bl	8008022 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	441a      	add	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e88:	2100      	movs	r1, #0
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f00e fc28 	bl	80136e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461c      	mov	r4, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	441c      	add	r4, r3
 8004ea2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8004ea6:	461c      	mov	r4, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10e      	bne.n	8004ece <PCD_EP_ISR_Handler+0x222>
 8004eb0:	8823      	ldrh	r3, [r4, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8023      	strh	r3, [r4, #0]
 8004ebc:	8823      	ldrh	r3, [r4, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8023      	strh	r3, [r4, #0]
 8004ecc:	e02d      	b.n	8004f2a <PCD_EP_ISR_Handler+0x27e>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ed4:	d812      	bhi.n	8004efc <PCD_EP_ISR_Handler+0x250>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <PCD_EP_ISR_Handler+0x244>
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	3301      	adds	r3, #1
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	8023      	strh	r3, [r4, #0]
 8004efa:	e016      	b.n	8004f2a <PCD_EP_ISR_Handler+0x27e>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <PCD_EP_ISR_Handler+0x26a>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	029b      	lsls	r3, r3, #10
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	b29c      	uxth	r4, r3
 8004f3c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f40:	b29c      	uxth	r4, r3
 8004f42:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f46:	b29c      	uxth	r4, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4ba2      	ldr	r3, [pc, #648]	; (80051d8 <PCD_EP_ISR_Handler+0x52c>)
 8004f4e:	4323      	orrs	r3, r4
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]
 8004f54:	e132      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	7d7b      	ldrb	r3, [r7, #21]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f280 80d1 	bge.w	8005112 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	7d7b      	ldrb	r3, [r7, #21]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29c      	uxth	r4, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	7d7b      	ldrb	r3, [r7, #21]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004f98:	b292      	uxth	r2, r2
 8004f9a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004f9c:	7d7b      	ldrb	r3, [r7, #21]
 8004f9e:	015b      	lsls	r3, r3, #5
 8004fa0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	7b1b      	ldrb	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d121      	bne.n	8004ff6 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3306      	adds	r3, #6
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fda:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004fdc:	8bfb      	ldrh	r3, [r7, #30]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d072      	beq.n	80050c8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6959      	ldr	r1, [r3, #20]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	88da      	ldrh	r2, [r3, #6]
 8004fee:	8bfb      	ldrh	r3, [r7, #30]
 8004ff0:	f003 f817 	bl	8008022 <USB_ReadPMA>
 8004ff4:	e068      	b.n	80050c8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d021      	beq.n	8005054 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005018:	b29b      	uxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	3302      	adds	r3, #2
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005038:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800503a:	8bfb      	ldrh	r3, [r7, #30]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d02a      	beq.n	8005096 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6959      	ldr	r1, [r3, #20]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	891a      	ldrh	r2, [r3, #8]
 800504c:	8bfb      	ldrh	r3, [r7, #30]
 800504e:	f002 ffe8 	bl	8008022 <USB_ReadPMA>
 8005052:	e020      	b.n	8005096 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4413      	add	r3, r2
 8005068:	3306      	adds	r3, #6
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800507c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800507e:	8bfb      	ldrh	r3, [r7, #30]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6959      	ldr	r1, [r3, #20]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	895a      	ldrh	r2, [r3, #10]
 8005090:	8bfb      	ldrh	r3, [r7, #30]
 8005092:	f002 ffc6 	bl	8008022 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b0:	b29c      	uxth	r4, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	4b46      	ldr	r3, [pc, #280]	; (80051dc <PCD_EP_ISR_Handler+0x530>)
 80050c2:	4323      	orrs	r3, r4
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	8bfb      	ldrh	r3, [r7, #30]
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	8bfb      	ldrh	r3, [r7, #30]
 80050da:	441a      	add	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <PCD_EP_ISR_Handler+0x446>
 80050e8:	8bfa      	ldrh	r2, [r7, #30]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d206      	bcs.n	8005100 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f00e faf1 	bl	80136e0 <HAL_PCD_DataOutStageCallback>
 80050fe:	e008      	b.n	8005112 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	7819      	ldrb	r1, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff fc9d 	bl	8004a4c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005112:	8a7b      	ldrh	r3, [r7, #18]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	d04f      	beq.n	80051bc <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800511c:	7d7b      	ldrb	r3, [r7, #21]
 800511e:	015b      	lsls	r3, r3, #5
 8005120:	3328      	adds	r3, #40	; 0x28
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	7d7b      	ldrb	r3, [r7, #21]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	b29c      	uxth	r4, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	7d7b      	ldrb	r3, [r7, #21]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8005152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005156:	b29b      	uxth	r3, r3
 8005158:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	3302      	adds	r3, #2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f00e fab4 	bl	8013710 <HAL_PCD_DataInStageCallback>
 80051a8:	e008      	b.n	80051bc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	7819      	ldrb	r1, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fc96 	bl	8004ae8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	b21b      	sxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f6ff ad74 	blt.w	8004cb6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3724      	adds	r7, #36	; 0x24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd90      	pop	{r4, r7, pc}
 80051d8:	ffff8080 	.word	0xffff8080
 80051dc:	ffff80c0 	.word	0xffff80c0

080051e0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	817b      	strh	r3, [r7, #10]
 80051ee:	4613      	mov	r3, r2
 80051f0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80051f2:	897b      	ldrh	r3, [r7, #10]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051fe:	897b      	ldrh	r3, [r7, #10]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	015b      	lsls	r3, r3, #5
 8005206:	3328      	adds	r3, #40	; 0x28
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e006      	b.n	800521e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005210:	897b      	ldrh	r3, [r7, #10]
 8005212:	015b      	lsls	r3, r3, #5
 8005214:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800521e:	893b      	ldrh	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d107      	bne.n	8005234 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2200      	movs	r2, #0
 8005228:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	b29a      	uxth	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	80da      	strh	r2, [r3, #6]
 8005232:	e00b      	b.n	800524c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2201      	movs	r2, #1
 8005238:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	b29a      	uxth	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	b29a      	uxth	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e26c      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 8087 	beq.w	8005386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005278:	4b92      	ldr	r3, [pc, #584]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b04      	cmp	r3, #4
 8005282:	d00c      	beq.n	800529e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005284:	4b8f      	ldr	r3, [pc, #572]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 030c 	and.w	r3, r3, #12
 800528c:	2b08      	cmp	r3, #8
 800528e:	d112      	bne.n	80052b6 <HAL_RCC_OscConfig+0x5e>
 8005290:	4b8c      	ldr	r3, [pc, #560]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529c:	d10b      	bne.n	80052b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529e:	4b89      	ldr	r3, [pc, #548]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d06c      	beq.n	8005384 <HAL_RCC_OscConfig+0x12c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d168      	bne.n	8005384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e246      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052be:	d106      	bne.n	80052ce <HAL_RCC_OscConfig+0x76>
 80052c0:	4b80      	ldr	r3, [pc, #512]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a7f      	ldr	r2, [pc, #508]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	e02e      	b.n	800532c <HAL_RCC_OscConfig+0xd4>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCC_OscConfig+0x98>
 80052d6:	4b7b      	ldr	r3, [pc, #492]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a7a      	ldr	r2, [pc, #488]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	4b78      	ldr	r3, [pc, #480]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a77      	ldr	r2, [pc, #476]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e01d      	b.n	800532c <HAL_RCC_OscConfig+0xd4>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052f8:	d10c      	bne.n	8005314 <HAL_RCC_OscConfig+0xbc>
 80052fa:	4b72      	ldr	r3, [pc, #456]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a71      	ldr	r2, [pc, #452]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4b6f      	ldr	r3, [pc, #444]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6e      	ldr	r2, [pc, #440]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e00b      	b.n	800532c <HAL_RCC_OscConfig+0xd4>
 8005314:	4b6b      	ldr	r3, [pc, #428]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a6a      	ldr	r2, [pc, #424]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800531a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	4b68      	ldr	r3, [pc, #416]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a67      	ldr	r2, [pc, #412]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005334:	f7fc fee0 	bl	80020f8 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800533c:	f7fc fedc 	bl	80020f8 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	; 0x64
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e1fa      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534e:	4b5d      	ldr	r3, [pc, #372]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0xe4>
 800535a:	e014      	b.n	8005386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fc fecc 	bl	80020f8 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005364:	f7fc fec8 	bl	80020f8 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e1e6      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005376:	4b53      	ldr	r3, [pc, #332]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x10c>
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d063      	beq.n	800545a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005392:	4b4c      	ldr	r3, [pc, #304]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800539e:	4b49      	ldr	r3, [pc, #292]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d11c      	bne.n	80053e4 <HAL_RCC_OscConfig+0x18c>
 80053aa:	4b46      	ldr	r3, [pc, #280]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d116      	bne.n	80053e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b6:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_RCC_OscConfig+0x176>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d001      	beq.n	80053ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e1ba      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ce:	4b3d      	ldr	r3, [pc, #244]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4939      	ldr	r1, [pc, #228]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e2:	e03a      	b.n	800545a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d020      	beq.n	800542e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ec:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <HAL_RCC_OscConfig+0x270>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f2:	f7fc fe81 	bl	80020f8 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053fa:	f7fc fe7d 	bl	80020f8 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e19b      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540c:	4b2d      	ldr	r3, [pc, #180]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005418:	4b2a      	ldr	r3, [pc, #168]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4927      	ldr	r1, [pc, #156]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005428:	4313      	orrs	r3, r2
 800542a:	600b      	str	r3, [r1, #0]
 800542c:	e015      	b.n	800545a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542e:	4b26      	ldr	r3, [pc, #152]	; (80054c8 <HAL_RCC_OscConfig+0x270>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fc fe60 	bl	80020f8 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800543c:	f7fc fe5c 	bl	80020f8 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e17a      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d03a      	beq.n	80054dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d019      	beq.n	80054a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800546e:	4b17      	ldr	r3, [pc, #92]	; (80054cc <HAL_RCC_OscConfig+0x274>)
 8005470:	2201      	movs	r2, #1
 8005472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005474:	f7fc fe40 	bl	80020f8 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547c:	f7fc fe3c 	bl	80020f8 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e15a      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <HAL_RCC_OscConfig+0x26c>)
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800549a:	2001      	movs	r0, #1
 800549c:	f000 fac6 	bl	8005a2c <RCC_Delay>
 80054a0:	e01c      	b.n	80054dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <HAL_RCC_OscConfig+0x274>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a8:	f7fc fe26 	bl	80020f8 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ae:	e00f      	b.n	80054d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b0:	f7fc fe22 	bl	80020f8 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d908      	bls.n	80054d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e140      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000
 80054c8:	42420000 	.word	0x42420000
 80054cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d0:	4b9e      	ldr	r3, [pc, #632]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e9      	bne.n	80054b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80a6 	beq.w	8005636 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ee:	4b97      	ldr	r3, [pc, #604]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10d      	bne.n	8005516 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054fa:	4b94      	ldr	r3, [pc, #592]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	4a93      	ldr	r2, [pc, #588]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005504:	61d3      	str	r3, [r2, #28]
 8005506:	4b91      	ldr	r3, [pc, #580]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005512:	2301      	movs	r3, #1
 8005514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005516:	4b8e      	ldr	r3, [pc, #568]	; (8005750 <HAL_RCC_OscConfig+0x4f8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d118      	bne.n	8005554 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005522:	4b8b      	ldr	r3, [pc, #556]	; (8005750 <HAL_RCC_OscConfig+0x4f8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a8a      	ldr	r2, [pc, #552]	; (8005750 <HAL_RCC_OscConfig+0x4f8>)
 8005528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552e:	f7fc fde3 	bl	80020f8 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005536:	f7fc fddf 	bl	80020f8 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b64      	cmp	r3, #100	; 0x64
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e0fd      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005548:	4b81      	ldr	r3, [pc, #516]	; (8005750 <HAL_RCC_OscConfig+0x4f8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d106      	bne.n	800556a <HAL_RCC_OscConfig+0x312>
 800555c:	4b7b      	ldr	r3, [pc, #492]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4a7a      	ldr	r2, [pc, #488]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6213      	str	r3, [r2, #32]
 8005568:	e02d      	b.n	80055c6 <HAL_RCC_OscConfig+0x36e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0x334>
 8005572:	4b76      	ldr	r3, [pc, #472]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	4a75      	ldr	r2, [pc, #468]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	6213      	str	r3, [r2, #32]
 800557e:	4b73      	ldr	r3, [pc, #460]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	4a72      	ldr	r2, [pc, #456]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005584:	f023 0304 	bic.w	r3, r3, #4
 8005588:	6213      	str	r3, [r2, #32]
 800558a:	e01c      	b.n	80055c6 <HAL_RCC_OscConfig+0x36e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b05      	cmp	r3, #5
 8005592:	d10c      	bne.n	80055ae <HAL_RCC_OscConfig+0x356>
 8005594:	4b6d      	ldr	r3, [pc, #436]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	4a6c      	ldr	r2, [pc, #432]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800559a:	f043 0304 	orr.w	r3, r3, #4
 800559e:	6213      	str	r3, [r2, #32]
 80055a0:	4b6a      	ldr	r3, [pc, #424]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	4a69      	ldr	r2, [pc, #420]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	6213      	str	r3, [r2, #32]
 80055ac:	e00b      	b.n	80055c6 <HAL_RCC_OscConfig+0x36e>
 80055ae:	4b67      	ldr	r3, [pc, #412]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	4a66      	ldr	r2, [pc, #408]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	6213      	str	r3, [r2, #32]
 80055ba:	4b64      	ldr	r3, [pc, #400]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	4a63      	ldr	r2, [pc, #396]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d015      	beq.n	80055fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ce:	f7fc fd93 	bl	80020f8 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d4:	e00a      	b.n	80055ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d6:	f7fc fd8f 	bl	80020f8 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e0ab      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ec:	4b57      	ldr	r3, [pc, #348]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0ee      	beq.n	80055d6 <HAL_RCC_OscConfig+0x37e>
 80055f8:	e014      	b.n	8005624 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055fa:	f7fc fd7d 	bl	80020f8 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005600:	e00a      	b.n	8005618 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005602:	f7fc fd79 	bl	80020f8 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005610:	4293      	cmp	r3, r2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e095      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005618:	4b4c      	ldr	r3, [pc, #304]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1ee      	bne.n	8005602 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d105      	bne.n	8005636 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562a:	4b48      	ldr	r3, [pc, #288]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	4a47      	ldr	r2, [pc, #284]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005634:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8081 	beq.w	8005742 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005640:	4b42      	ldr	r3, [pc, #264]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 030c 	and.w	r3, r3, #12
 8005648:	2b08      	cmp	r3, #8
 800564a:	d061      	beq.n	8005710 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d146      	bne.n	80056e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005654:	4b3f      	ldr	r3, [pc, #252]	; (8005754 <HAL_RCC_OscConfig+0x4fc>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565a:	f7fc fd4d 	bl	80020f8 <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005662:	f7fc fd49 	bl	80020f8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e067      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005674:	4b35      	ldr	r3, [pc, #212]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f0      	bne.n	8005662 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005688:	d108      	bne.n	800569c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800568a:	4b30      	ldr	r3, [pc, #192]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	492d      	ldr	r1, [pc, #180]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a19      	ldr	r1, [r3, #32]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	430b      	orrs	r3, r1
 80056ae:	4927      	ldr	r1, [pc, #156]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b4:	4b27      	ldr	r3, [pc, #156]	; (8005754 <HAL_RCC_OscConfig+0x4fc>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fc fd1d 	bl	80020f8 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fc fd19 	bl	80020f8 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e037      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x46a>
 80056e0:	e02f      	b.n	8005742 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <HAL_RCC_OscConfig+0x4fc>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fc fd06 	bl	80020f8 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f0:	f7fc fd02 	bl	80020f8 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e020      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x498>
 800570e:	e018      	b.n	8005742 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e013      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_OscConfig+0x4f4>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	429a      	cmp	r2, r3
 800572e:	d106      	bne.n	800573e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40021000 	.word	0x40021000
 8005750:	40007000 	.word	0x40007000
 8005754:	42420060 	.word	0x42420060

08005758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0d0      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800576c:	4b6a      	ldr	r3, [pc, #424]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d910      	bls.n	800579c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b67      	ldr	r3, [pc, #412]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 0207 	bic.w	r2, r3, #7
 8005782:	4965      	ldr	r1, [pc, #404]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	4313      	orrs	r3, r2
 8005788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0b8      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b4:	4b59      	ldr	r3, [pc, #356]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4a58      	ldr	r2, [pc, #352]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057cc:	4b53      	ldr	r3, [pc, #332]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a52      	ldr	r2, [pc, #328]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b50      	ldr	r3, [pc, #320]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	494d      	ldr	r1, [pc, #308]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d040      	beq.n	8005878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b47      	ldr	r3, [pc, #284]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d115      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e07f      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d107      	bne.n	8005826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005816:	4b41      	ldr	r3, [pc, #260]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e073      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005826:	4b3d      	ldr	r3, [pc, #244]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06b      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005836:	4b39      	ldr	r3, [pc, #228]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f023 0203 	bic.w	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4936      	ldr	r1, [pc, #216]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005844:	4313      	orrs	r3, r2
 8005846:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005848:	f7fc fc56 	bl	80020f8 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584e:	e00a      	b.n	8005866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005850:	f7fc fc52 	bl	80020f8 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e053      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	4b2d      	ldr	r3, [pc, #180]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 020c 	and.w	r2, r3, #12
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	429a      	cmp	r2, r3
 8005876:	d1eb      	bne.n	8005850 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005878:	4b27      	ldr	r3, [pc, #156]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d210      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 0207 	bic.w	r2, r3, #7
 800588e:	4922      	ldr	r1, [pc, #136]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	4313      	orrs	r3, r2
 8005894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e032      	b.n	800590e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4916      	ldr	r1, [pc, #88]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	490e      	ldr	r1, [pc, #56]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058e6:	f000 f821 	bl	800592c <HAL_RCC_GetSysClockFreq>
 80058ea:	4601      	mov	r1, r0
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	5cd3      	ldrb	r3, [r2, r3]
 80058fa:	fa21 f303 	lsr.w	r3, r1, r3
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <HAL_RCC_ClockConfig+0x1cc>)
 8005900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_RCC_ClockConfig+0x1d0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fc fbb4 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40022000 	.word	0x40022000
 800591c:	40021000 	.word	0x40021000
 8005920:	08018ba0 	.word	0x08018ba0
 8005924:	20000004 	.word	0x20000004
 8005928:	20000008 	.word	0x20000008

0800592c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800592c:	b490      	push	{r4, r7}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005932:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005934:	1d3c      	adds	r4, r7, #4
 8005936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800593c:	4b28      	ldr	r3, [pc, #160]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005956:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b04      	cmp	r3, #4
 8005964:	d002      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x40>
 8005966:	2b08      	cmp	r3, #8
 8005968:	d003      	beq.n	8005972 <HAL_RCC_GetSysClockFreq+0x46>
 800596a:	e02d      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800596c:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800596e:	623b      	str	r3, [r7, #32]
      break;
 8005970:	e02d      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	0c9b      	lsrs	r3, r3, #18
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800597e:	4413      	add	r3, r2
 8005980:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005984:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d013      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005990:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	0c5b      	lsrs	r3, r3, #17
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800599e:	4413      	add	r3, r2
 80059a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	4a0f      	ldr	r2, [pc, #60]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059aa:	fb02 f203 	mul.w	r2, r2, r3
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
 80059b6:	e004      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4a0c      	ldr	r2, [pc, #48]	; (80059ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80059bc:	fb02 f303 	mul.w	r3, r2, r3
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	623b      	str	r3, [r7, #32]
      break;
 80059c6:	e002      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059ca:	623b      	str	r3, [r7, #32]
      break;
 80059cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ce:	6a3b      	ldr	r3, [r7, #32]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3728      	adds	r7, #40	; 0x28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc90      	pop	{r4, r7}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	080186d8 	.word	0x080186d8
 80059e0:	080186e8 	.word	0x080186e8
 80059e4:	40021000 	.word	0x40021000
 80059e8:	007a1200 	.word	0x007a1200
 80059ec:	003d0900 	.word	0x003d0900

080059f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f4:	4b02      	ldr	r3, [pc, #8]	; (8005a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr
 8005a00:	20000004 	.word	0x20000004

08005a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a08:	f7ff fff2 	bl	80059f0 <HAL_RCC_GetHCLKFreq>
 8005a0c:	4601      	mov	r1, r0
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	0a1b      	lsrs	r3, r3, #8
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	4a03      	ldr	r2, [pc, #12]	; (8005a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a1a:	5cd3      	ldrb	r3, [r2, r3]
 8005a1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40021000 	.word	0x40021000
 8005a28:	08018bb0 	.word	0x08018bb0

08005a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <RCC_Delay+0x34>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <RCC_Delay+0x38>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	0a5b      	lsrs	r3, r3, #9
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a48:	bf00      	nop
  }
  while (Delay --);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1e5a      	subs	r2, r3, #1
 8005a4e:	60fa      	str	r2, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f9      	bne.n	8005a48 <RCC_Delay+0x1c>
}
 8005a54:	bf00      	nop
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000004 	.word	0x20000004
 8005a64:	10624dd3 	.word	0x10624dd3

08005a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d07d      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005a84:	2300      	movs	r3, #0
 8005a86:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a88:	4b4f      	ldr	r3, [pc, #316]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a94:	4b4c      	ldr	r3, [pc, #304]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	4a4b      	ldr	r2, [pc, #300]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	61d3      	str	r3, [r2, #28]
 8005aa0:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab0:	4b46      	ldr	r3, [pc, #280]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d118      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005abc:	4b43      	ldr	r3, [pc, #268]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a42      	ldr	r2, [pc, #264]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac8:	f7fc fb16 	bl	80020f8 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ace:	e008      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad0:	f7fc fb12 	bl	80020f8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e06d      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae2:	4b3a      	ldr	r3, [pc, #232]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005aee:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02e      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d027      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b0c:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b16:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b1c:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b22:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d014      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b32:	f7fc fae1 	bl	80020f8 <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b38:	e00a      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b3a:	f7fc fadd 	bl	80020f8 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e036      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0ee      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4917      	ldr	r1, [pc, #92]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d105      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b74:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	490b      	ldr	r1, [pc, #44]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	4904      	ldr	r1, [pc, #16]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40007000 	.word	0x40007000
 8005bd0:	42420440 	.word	0x42420440

08005bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e01d      	b.n	8005c22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fb ffd0 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f000 fdb0 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0201 	orr.w	r2, r2, #1
 8005c40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b06      	cmp	r3, #6
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e01d      	b.n	8005cbe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f815 	bl	8005cc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f000 fd62 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 ffc4 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <HAL_TIM_PWM_Start+0x60>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d107      	bne.n	8005d0a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b06      	cmp	r3, #6
 8005d1a:	d007      	beq.n	8005d2c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00

08005d3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 ff92 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <HAL_TIM_PWM_Stop+0x94>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d117      	bne.n	8005d8e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a1a      	ldr	r2, [r3, #32]
 8005d64:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10f      	bne.n	8005d8e <HAL_TIM_PWM_Stop+0x52>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	f240 4344 	movw	r3, #1092	; 0x444
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d107      	bne.n	8005d8e <HAL_TIM_PWM_Stop+0x52>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10f      	bne.n	8005dbe <HAL_TIM_PWM_Stop+0x82>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	f240 4344 	movw	r3, #1092	; 0x444
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d107      	bne.n	8005dbe <HAL_TIM_PWM_Stop+0x82>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40012c00 	.word	0x40012c00

08005dd4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d101      	bne.n	8005df2 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
 8005df0:	e0e9      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d10b      	bne.n	8005e16 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start_DMA+0x3a>
 8005e04:	887b      	ldrh	r3, [r7, #2]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e0db      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b0c      	cmp	r3, #12
 8005e1a:	f200 80ad 	bhi.w	8005f78 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <HAL_TIM_PWM_Start_DMA+0x50>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005e59 	.word	0x08005e59
 8005e28:	08005f79 	.word	0x08005f79
 8005e2c:	08005f79 	.word	0x08005f79
 8005e30:	08005f79 	.word	0x08005f79
 8005e34:	08005ea1 	.word	0x08005ea1
 8005e38:	08005f79 	.word	0x08005f79
 8005e3c:	08005f79 	.word	0x08005f79
 8005e40:	08005f79 	.word	0x08005f79
 8005e44:	08005ee9 	.word	0x08005ee9
 8005e48:	08005f79 	.word	0x08005f79
 8005e4c:	08005f79 	.word	0x08005f79
 8005e50:	08005f79 	.word	0x08005f79
 8005e54:	08005f31 	.word	0x08005f31
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	4a5c      	ldr	r2, [pc, #368]	; (8005fd0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	4a5b      	ldr	r2, [pc, #364]	; (8005fd4 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	4a5a      	ldr	r2, [pc, #360]	; (8005fd8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3334      	adds	r3, #52	; 0x34
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	887b      	ldrh	r3, [r7, #2]
 8005e80:	f7fc fe5e 	bl	8002b40 <HAL_DMA_Start_IT>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e09b      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9c:	60da      	str	r2, [r3, #12]
      break;
 8005e9e:	e06c      	b.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	4a4a      	ldr	r2, [pc, #296]	; (8005fd0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	4a49      	ldr	r2, [pc, #292]	; (8005fd4 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	4a48      	ldr	r2, [pc, #288]	; (8005fd8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3338      	adds	r3, #56	; 0x38
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	887b      	ldrh	r3, [r7, #2]
 8005ec8:	f7fc fe3a 	bl	8002b40 <HAL_DMA_Start_IT>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e077      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ee4:	60da      	str	r2, [r3, #12]
      break;
 8005ee6:	e048      	b.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	4a38      	ldr	r2, [pc, #224]	; (8005fd0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	4a37      	ldr	r2, [pc, #220]	; (8005fd4 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a36      	ldr	r2, [pc, #216]	; (8005fd8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	333c      	adds	r3, #60	; 0x3c
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	887b      	ldrh	r3, [r7, #2]
 8005f10:	f7fc fe16 	bl	8002b40 <HAL_DMA_Start_IT>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e053      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f2c:	60da      	str	r2, [r3, #12]
      break;
 8005f2e:	e024      	b.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	4a26      	ldr	r2, [pc, #152]	; (8005fd0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <HAL_TIM_PWM_Start_DMA+0x200>)
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	4a24      	ldr	r2, [pc, #144]	; (8005fd8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3340      	adds	r3, #64	; 0x40
 8005f54:	461a      	mov	r2, r3
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	f7fc fdf2 	bl	8002b40 <HAL_DMA_Start_IT>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e02f      	b.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f74:	60da      	str	r2, [r3, #12]
      break;
 8005f76:	e000      	b.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8005f78:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fe78 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <HAL_TIM_PWM_Start_DMA+0x208>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d107      	bne.n	8005fa2 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b06      	cmp	r3, #6
 8005fb2:	d007      	beq.n	8005fc4 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	08006697 	.word	0x08006697
 8005fd4:	08006707 	.word	0x08006707
 8005fd8:	08006673 	.word	0x08006673
 8005fdc:	40012c00 	.word	0x40012c00

08005fe0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e07f      	b.n	80060f4 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fb fe3f 	bl	8001c8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006024:	f023 0307 	bic.w	r3, r3, #7
 8006028:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f000 fb9f 	bl	8006778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	4313      	orrs	r3, r2
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006080:	f023 030c 	bic.w	r3, r3, #12
 8006084:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800608c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	4313      	orrs	r3, r2
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	011a      	lsls	r2, r3, #4
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	031b      	lsls	r3, r3, #12
 80060b0:	4313      	orrs	r3, r2
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	4313      	orrs	r3, r2
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b02      	cmp	r3, #2
 8006110:	d122      	bne.n	8006158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b02      	cmp	r3, #2
 800611e:	d11b      	bne.n	8006158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0202 	mvn.w	r2, #2
 8006128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa6a 	bl	8006618 <HAL_TIM_IC_CaptureCallback>
 8006144:	e005      	b.n	8006152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fa5d 	bl	8006606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fa6c 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b04      	cmp	r3, #4
 8006164:	d122      	bne.n	80061ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d11b      	bne.n	80061ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0204 	mvn.w	r2, #4
 800617c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa40 	bl	8006618 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fa33 	bl	8006606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fa42 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d122      	bne.n	8006200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d11b      	bne.n	8006200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0208 	mvn.w	r2, #8
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa16 	bl	8006618 <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa09 	bl	8006606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa18 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b10      	cmp	r3, #16
 800620c:	d122      	bne.n	8006254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b10      	cmp	r3, #16
 800621a:	d11b      	bne.n	8006254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0210 	mvn.w	r2, #16
 8006224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2208      	movs	r2, #8
 800622a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f9ec 	bl	8006618 <HAL_TIM_IC_CaptureCallback>
 8006240:	e005      	b.n	800624e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f9df 	bl	8006606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f9ee 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10e      	bne.n	8006280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0201 	mvn.w	r2, #1
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f00b fe96 	bl	8011fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d10e      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006298:	2b80      	cmp	r3, #128	; 0x80
 800629a:	d107      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fda8 	bl	8006dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d107      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f9bb 	bl	800664e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d10e      	bne.n	8006304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d107      	bne.n	8006304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0220 	mvn.w	r2, #32
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fd73 	bl	8006dea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006322:	2302      	movs	r3, #2
 8006324:	e0b4      	b.n	8006490 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2202      	movs	r2, #2
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b0c      	cmp	r3, #12
 800633a:	f200 809f 	bhi.w	800647c <HAL_TIM_PWM_ConfigChannel+0x170>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006379 	.word	0x08006379
 8006348:	0800647d 	.word	0x0800647d
 800634c:	0800647d 	.word	0x0800647d
 8006350:	0800647d 	.word	0x0800647d
 8006354:	080063b9 	.word	0x080063b9
 8006358:	0800647d 	.word	0x0800647d
 800635c:	0800647d 	.word	0x0800647d
 8006360:	0800647d 	.word	0x0800647d
 8006364:	080063fb 	.word	0x080063fb
 8006368:	0800647d 	.word	0x0800647d
 800636c:	0800647d 	.word	0x0800647d
 8006370:	0800647d 	.word	0x0800647d
 8006374:	0800643b 	.word	0x0800643b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fa5c 	bl	800683c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0204 	bic.w	r2, r2, #4
 80063a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6999      	ldr	r1, [r3, #24]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	619a      	str	r2, [r3, #24]
      break;
 80063b6:	e062      	b.n	800647e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 faa2 	bl	8006908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6999      	ldr	r1, [r3, #24]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	021a      	lsls	r2, r3, #8
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	619a      	str	r2, [r3, #24]
      break;
 80063f8:	e041      	b.n	800647e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	4618      	mov	r0, r3
 8006402:	f000 faeb 	bl	80069dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0208 	orr.w	r2, r2, #8
 8006414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0204 	bic.w	r2, r2, #4
 8006424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	61da      	str	r2, [r3, #28]
      break;
 8006438:	e021      	b.n	800647e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fb35 	bl	8006ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	021a      	lsls	r2, r3, #8
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	61da      	str	r2, [r3, #28]
      break;
 800647a:	e000      	b.n	800647e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800647c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIM_ConfigClockSource+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e0a6      	b.n	80065fe <HAL_TIM_ConfigClockSource+0x166>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b40      	cmp	r3, #64	; 0x40
 80064e6:	d067      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x120>
 80064e8:	2b40      	cmp	r3, #64	; 0x40
 80064ea:	d80b      	bhi.n	8006504 <HAL_TIM_ConfigClockSource+0x6c>
 80064ec:	2b10      	cmp	r3, #16
 80064ee:	d073      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0x140>
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d802      	bhi.n	80064fa <HAL_TIM_ConfigClockSource+0x62>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d06f      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80064f8:	e078      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d06c      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0x140>
 80064fe:	2b30      	cmp	r3, #48	; 0x30
 8006500:	d06a      	beq.n	80065d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006502:	e073      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006504:	2b70      	cmp	r3, #112	; 0x70
 8006506:	d00d      	beq.n	8006524 <HAL_TIM_ConfigClockSource+0x8c>
 8006508:	2b70      	cmp	r3, #112	; 0x70
 800650a:	d804      	bhi.n	8006516 <HAL_TIM_ConfigClockSource+0x7e>
 800650c:	2b50      	cmp	r3, #80	; 0x50
 800650e:	d033      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0xe0>
 8006510:	2b60      	cmp	r3, #96	; 0x60
 8006512:	d041      	beq.n	8006598 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006514:	e06a      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	d066      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0x152>
 800651c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006520:	d017      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006522:	e063      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	6899      	ldr	r1, [r3, #8]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f000 fb81 	bl	8006c3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006546:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	609a      	str	r2, [r3, #8]
      break;
 8006550:	e04c      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6899      	ldr	r1, [r3, #8]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f000 fb6a 	bl	8006c3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006574:	609a      	str	r2, [r3, #8]
      break;
 8006576:	e039      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	6859      	ldr	r1, [r3, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	461a      	mov	r2, r3
 8006586:	f000 fae1 	bl	8006b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2150      	movs	r1, #80	; 0x50
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fb38 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 8006596:	e029      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f000 faff 	bl	8006ba8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2160      	movs	r1, #96	; 0x60
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fb28 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065b6:	e019      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	6859      	ldr	r1, [r3, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	461a      	mov	r2, r3
 80065c6:	f000 fac1 	bl	8006b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2140      	movs	r1, #64	; 0x40
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fb18 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065d6:	e009      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f000 fb0f 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065e8:	e000      	b.n	80065ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80065ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr

08006618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr

0800664e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff ffe9 	bl	8006660 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d103      	bne.n	80066be <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	771a      	strb	r2, [r3, #28]
 80066bc:	e019      	b.n	80066f2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d103      	bne.n	80066d0 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2202      	movs	r2, #2
 80066cc:	771a      	strb	r2, [r3, #28]
 80066ce:	e010      	b.n	80066f2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d103      	bne.n	80066e2 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2204      	movs	r2, #4
 80066de:	771a      	strb	r2, [r3, #28]
 80066e0:	e007      	b.n	80066f2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d102      	bne.n	80066f2 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2208      	movs	r2, #8
 80066f0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff99 	bl	800662a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	771a      	strb	r2, [r3, #28]
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d103      	bne.n	800672e <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	771a      	strb	r2, [r3, #28]
 800672c:	e019      	b.n	8006762 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d103      	bne.n	8006740 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2202      	movs	r2, #2
 800673c:	771a      	strb	r2, [r3, #28]
 800673e:	e010      	b.n	8006762 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	429a      	cmp	r2, r3
 8006748:	d103      	bne.n	8006752 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2204      	movs	r2, #4
 800674e:	771a      	strb	r2, [r3, #28]
 8006750:	e007      	b.n	8006762 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	429a      	cmp	r2, r3
 800675a:	d102      	bne.n	8006762 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2208      	movs	r2, #8
 8006760:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff ff6a 	bl	800663c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	771a      	strb	r2, [r3, #28]
}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a29      	ldr	r2, [pc, #164]	; (8006830 <TIM_Base_SetConfig+0xb8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00b      	beq.n	80067a8 <TIM_Base_SetConfig+0x30>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006796:	d007      	beq.n	80067a8 <TIM_Base_SetConfig+0x30>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a26      	ldr	r2, [pc, #152]	; (8006834 <TIM_Base_SetConfig+0xbc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_Base_SetConfig+0x30>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a25      	ldr	r2, [pc, #148]	; (8006838 <TIM_Base_SetConfig+0xc0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d108      	bne.n	80067ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <TIM_Base_SetConfig+0xb8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_Base_SetConfig+0x62>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c8:	d007      	beq.n	80067da <TIM_Base_SetConfig+0x62>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a19      	ldr	r2, [pc, #100]	; (8006834 <TIM_Base_SetConfig+0xbc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_Base_SetConfig+0x62>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a18      	ldr	r2, [pc, #96]	; (8006838 <TIM_Base_SetConfig+0xc0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a07      	ldr	r2, [pc, #28]	; (8006830 <TIM_Base_SetConfig+0xb8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d103      	bne.n	8006820 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	691a      	ldr	r2, [r3, #16]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	615a      	str	r2, [r3, #20]
}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800

0800683c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f023 0302 	bic.w	r3, r3, #2
 8006884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1c      	ldr	r2, [pc, #112]	; (8006904 <TIM_OC1_SetConfig+0xc8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10c      	bne.n	80068b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0308 	bic.w	r3, r3, #8
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a13      	ldr	r2, [pc, #76]	; (8006904 <TIM_OC1_SetConfig+0xc8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d111      	bne.n	80068de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	621a      	str	r2, [r3, #32]
}
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40012c00 	.word	0x40012c00

08006908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0210 	bic.w	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0320 	bic.w	r3, r3, #32
 8006952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <TIM_OC2_SetConfig+0xd0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d10d      	bne.n	8006984 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800696e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <TIM_OC2_SetConfig+0xd0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d113      	bne.n	80069b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr
 80069d8:	40012c00 	.word	0x40012c00

080069dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1d      	ldr	r2, [pc, #116]	; (8006aac <TIM_OC3_SetConfig+0xd0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d10d      	bne.n	8006a56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a14      	ldr	r2, [pc, #80]	; (8006aac <TIM_OC3_SetConfig+0xd0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d113      	bne.n	8006a86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00

08006ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	031b      	lsls	r3, r3, #12
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a0f      	ldr	r2, [pc, #60]	; (8006b48 <TIM_OC4_SetConfig+0x98>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d109      	bne.n	8006b24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	019b      	lsls	r3, r3, #6
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr
 8006b48:	40012c00 	.word	0x40012c00

08006b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f023 0201 	bic.w	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f023 030a 	bic.w	r3, r3, #10
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f023 0210 	bic.w	r2, r3, #16
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	031b      	lsls	r3, r3, #12
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	621a      	str	r2, [r3, #32]
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr

08006c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f043 0307 	orr.w	r3, r3, #7
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b087      	sub	sp, #28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	021a      	lsls	r2, r3, #8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	609a      	str	r2, [r3, #8]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr

08006c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1a      	ldr	r2, [r3, #32]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e032      	b.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d10:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e03d      	b.n	8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr

08006dea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr

08006e0e <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e0e:	b084      	sub	sp, #16
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	f107 0014 	add.w	r0, r7, #20
 8006e1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	b004      	add	sp, #16
 8006e2c:	4770      	bx	lr

08006e2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e36:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006e3a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	89fb      	ldrh	r3, [r7, #14]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006e68:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	b21a      	sxth	r2, r3
 8006e74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e78:	43db      	mvns	r3, r3
 8006e7a:	b21b      	sxth	r3, r3
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	b21b      	sxth	r3, r3
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr

08006e94 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006eac:	b084      	sub	sp, #16
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	f107 0014 	add.w	r0, r7, #20
 8006eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff ffa5 	bl	8006e2e <USB_EnableGlobalInt>

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ef0:	b004      	add	sp, #16
 8006ef2:	4770      	bx	lr

08006ef4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ef4:	b490      	push	{r4, r7}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f18:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	78db      	ldrb	r3, [r3, #3]
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d819      	bhi.n	8006f56 <USB_ActivateEndpoint+0x62>
 8006f22:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <USB_ActivateEndpoint+0x34>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f39 	.word	0x08006f39
 8006f2c:	08006f4d 	.word	0x08006f4d
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	08006f43 	.word	0x08006f43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006f38:	89bb      	ldrh	r3, [r7, #12]
 8006f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f3e:	81bb      	strh	r3, [r7, #12]
      break;
 8006f40:	e00d      	b.n	8006f5e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006f42:	89bb      	ldrh	r3, [r7, #12]
 8006f44:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006f48:	81bb      	strh	r3, [r7, #12]
      break;
 8006f4a:	e008      	b.n	8006f5e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006f4c:	89bb      	ldrh	r3, [r7, #12]
 8006f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f52:	81bb      	strh	r3, [r7, #12]
      break;
 8006f54:	e003      	b.n	8006f5e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5a:	e000      	b.n	8006f5e <USB_ActivateEndpoint+0x6a>
      break;
 8006f5c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	441a      	add	r2, r3
 8006f68:	89bb      	ldrh	r3, [r7, #12]
 8006f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	b29c      	uxth	r4, r3
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	4b8a      	ldr	r3, [pc, #552]	; (80071d4 <USB_ActivateEndpoint+0x2e0>)
 8006fac:	4323      	orrs	r3, r4
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	7b1b      	ldrb	r3, [r3, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f040 8112 	bne.w	80071e0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d067      	beq.n	8007094 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006fc4:	687c      	ldr	r4, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	441c      	add	r4, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	4423      	add	r3, r4
 8006fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fdc:	461c      	mov	r4, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	88db      	ldrh	r3, [r3, #6]
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29c      	uxth	r4, r3
 8006ffa:	4623      	mov	r3, r4
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d014      	beq.n	800702e <USB_ActivateEndpoint+0x13a>
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701a:	b29c      	uxth	r4, r3
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	4b6c      	ldr	r3, [pc, #432]	; (80071d8 <USB_ActivateEndpoint+0x2e4>)
 8007028:	4323      	orrs	r3, r4
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	78db      	ldrb	r3, [r3, #3]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d018      	beq.n	8007068 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800704c:	b29c      	uxth	r4, r3
 800704e:	f084 0320 	eor.w	r3, r4, #32
 8007052:	b29c      	uxth	r4, r3
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	441a      	add	r2, r3
 800705e:	4b5d      	ldr	r3, [pc, #372]	; (80071d4 <USB_ActivateEndpoint+0x2e0>)
 8007060:	4323      	orrs	r3, r4
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]
 8007066:	e22b      	b.n	80074c0 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707e:	b29c      	uxth	r4, r3
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	441a      	add	r2, r3
 800708a:	4b52      	ldr	r3, [pc, #328]	; (80071d4 <USB_ActivateEndpoint+0x2e0>)
 800708c:	4323      	orrs	r3, r4
 800708e:	b29b      	uxth	r3, r3
 8007090:	8013      	strh	r3, [r2, #0]
 8007092:	e215      	b.n	80074c0 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007094:	687c      	ldr	r4, [r7, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709c:	b29b      	uxth	r3, r3
 800709e:	441c      	add	r4, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	4423      	add	r3, r4
 80070a8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80070ac:	461c      	mov	r4, r3
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	88db      	ldrh	r3, [r3, #6]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80070bc:	687c      	ldr	r4, [r7, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	441c      	add	r4, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	4423      	add	r3, r4
 80070d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070d4:	461c      	mov	r4, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10e      	bne.n	80070fc <USB_ActivateEndpoint+0x208>
 80070de:	8823      	ldrh	r3, [r4, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	8023      	strh	r3, [r4, #0]
 80070ea:	8823      	ldrh	r3, [r4, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8023      	strh	r3, [r4, #0]
 80070fa:	e02d      	b.n	8007158 <USB_ActivateEndpoint+0x264>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b3e      	cmp	r3, #62	; 0x3e
 8007102:	d812      	bhi.n	800712a <USB_ActivateEndpoint+0x236>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	60bb      	str	r3, [r7, #8]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <USB_ActivateEndpoint+0x22a>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3301      	adds	r3, #1
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	b29b      	uxth	r3, r3
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	b29b      	uxth	r3, r3
 8007126:	8023      	strh	r3, [r4, #0]
 8007128:	e016      	b.n	8007158 <USB_ActivateEndpoint+0x264>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	60bb      	str	r3, [r7, #8]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <USB_ActivateEndpoint+0x250>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	3b01      	subs	r3, #1
 8007142:	60bb      	str	r3, [r7, #8]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	b29b      	uxth	r3, r3
 8007148:	029b      	lsls	r3, r3, #10
 800714a:	b29b      	uxth	r3, r3
 800714c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007154:	b29b      	uxth	r3, r3
 8007156:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29c      	uxth	r4, r3
 8007166:	4623      	mov	r3, r4
 8007168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d014      	beq.n	800719a <USB_ActivateEndpoint+0x2a6>
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007186:	b29c      	uxth	r4, r3
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	441a      	add	r2, r3
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <USB_ActivateEndpoint+0x2e8>)
 8007194:	4323      	orrs	r3, r4
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b0:	b29c      	uxth	r4, r3
 80071b2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80071b6:	b29c      	uxth	r4, r3
 80071b8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80071bc:	b29c      	uxth	r4, r3
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	441a      	add	r2, r3
 80071c8:	4b02      	ldr	r3, [pc, #8]	; (80071d4 <USB_ActivateEndpoint+0x2e0>)
 80071ca:	4323      	orrs	r3, r4
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	8013      	strh	r3, [r2, #0]
 80071d0:	e176      	b.n	80074c0 <USB_ActivateEndpoint+0x5cc>
 80071d2:	bf00      	nop
 80071d4:	ffff8080 	.word	0xffff8080
 80071d8:	ffff80c0 	.word	0xffff80c0
 80071dc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f6:	b29c      	uxth	r4, r3
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	441a      	add	r2, r3
 8007202:	4b96      	ldr	r3, [pc, #600]	; (800745c <USB_ActivateEndpoint+0x568>)
 8007204:	4323      	orrs	r3, r4
 8007206:	b29b      	uxth	r3, r3
 8007208:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800720a:	687c      	ldr	r4, [r7, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	441c      	add	r4, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	4423      	add	r3, r4
 800721e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007222:	461c      	mov	r4, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	891b      	ldrh	r3, [r3, #8]
 8007228:	085b      	lsrs	r3, r3, #1
 800722a:	b29b      	uxth	r3, r3
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	b29b      	uxth	r3, r3
 8007230:	8023      	strh	r3, [r4, #0]
 8007232:	687c      	ldr	r4, [r7, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723a:	b29b      	uxth	r3, r3
 800723c:	441c      	add	r4, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	4423      	add	r3, r4
 8007246:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800724a:	461c      	mov	r4, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	895b      	ldrh	r3, [r3, #10]
 8007250:	085b      	lsrs	r3, r3, #1
 8007252:	b29b      	uxth	r3, r3
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	b29b      	uxth	r3, r3
 8007258:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f040 8088 	bne.w	8007374 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29c      	uxth	r4, r3
 8007272:	4623      	mov	r3, r4
 8007274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d014      	beq.n	80072a6 <USB_ActivateEndpoint+0x3b2>
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007292:	b29c      	uxth	r4, r3
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	441a      	add	r2, r3
 800729e:	4b70      	ldr	r3, [pc, #448]	; (8007460 <USB_ActivateEndpoint+0x56c>)
 80072a0:	4323      	orrs	r3, r4
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29c      	uxth	r4, r3
 80072b4:	4623      	mov	r3, r4
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d014      	beq.n	80072e8 <USB_ActivateEndpoint+0x3f4>
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d4:	b29c      	uxth	r4, r3
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	441a      	add	r2, r3
 80072e0:	4b60      	ldr	r3, [pc, #384]	; (8007464 <USB_ActivateEndpoint+0x570>)
 80072e2:	4323      	orrs	r3, r4
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	b29c      	uxth	r4, r3
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	4b56      	ldr	r3, [pc, #344]	; (8007464 <USB_ActivateEndpoint+0x570>)
 800730c:	4323      	orrs	r3, r4
 800730e:	b29b      	uxth	r3, r3
 8007310:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007328:	b29c      	uxth	r4, r3
 800732a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800732e:	b29c      	uxth	r4, r3
 8007330:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007334:	b29c      	uxth	r4, r3
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	441a      	add	r2, r3
 8007340:	4b49      	ldr	r3, [pc, #292]	; (8007468 <USB_ActivateEndpoint+0x574>)
 8007342:	4323      	orrs	r3, r4
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735e:	b29c      	uxth	r4, r3
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	4b3f      	ldr	r3, [pc, #252]	; (8007468 <USB_ActivateEndpoint+0x574>)
 800736c:	4323      	orrs	r3, r4
 800736e:	b29b      	uxth	r3, r3
 8007370:	8013      	strh	r3, [r2, #0]
 8007372:	e0a5      	b.n	80074c0 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29c      	uxth	r4, r3
 8007382:	4623      	mov	r3, r4
 8007384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d014      	beq.n	80073b6 <USB_ActivateEndpoint+0x4c2>
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	b29c      	uxth	r4, r3
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	4b2c      	ldr	r3, [pc, #176]	; (8007460 <USB_ActivateEndpoint+0x56c>)
 80073b0:	4323      	orrs	r3, r4
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29c      	uxth	r4, r3
 80073c4:	4623      	mov	r3, r4
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d014      	beq.n	80073f8 <USB_ActivateEndpoint+0x504>
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e4:	b29c      	uxth	r4, r3
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	441a      	add	r2, r3
 80073f0:	4b1c      	ldr	r3, [pc, #112]	; (8007464 <USB_ActivateEndpoint+0x570>)
 80073f2:	4323      	orrs	r3, r4
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740e:	b29c      	uxth	r4, r3
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	4b11      	ldr	r3, [pc, #68]	; (8007460 <USB_ActivateEndpoint+0x56c>)
 800741c:	4323      	orrs	r3, r4
 800741e:	b29b      	uxth	r3, r3
 8007420:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	78db      	ldrb	r3, [r3, #3]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d020      	beq.n	800746c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007440:	b29c      	uxth	r4, r3
 8007442:	f084 0320 	eor.w	r3, r4, #32
 8007446:	b29c      	uxth	r4, r3
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	441a      	add	r2, r3
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <USB_ActivateEndpoint+0x574>)
 8007454:	4323      	orrs	r3, r4
 8007456:	b29b      	uxth	r3, r3
 8007458:	8013      	strh	r3, [r2, #0]
 800745a:	e01c      	b.n	8007496 <USB_ActivateEndpoint+0x5a2>
 800745c:	ffff8180 	.word	0xffff8180
 8007460:	ffffc080 	.word	0xffffc080
 8007464:	ffff80c0 	.word	0xffff80c0
 8007468:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007482:	b29c      	uxth	r4, r3
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	441a      	add	r2, r3
 800748e:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <USB_ActivateEndpoint+0x5d8>)
 8007490:	4323      	orrs	r3, r4
 8007492:	b29b      	uxth	r3, r3
 8007494:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ac:	b29c      	uxth	r4, r3
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	441a      	add	r2, r3
 80074b8:	4b04      	ldr	r3, [pc, #16]	; (80074cc <USB_ActivateEndpoint+0x5d8>)
 80074ba:	4323      	orrs	r3, r4
 80074bc:	b29b      	uxth	r3, r3
 80074be:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc90      	pop	{r4, r7}
 80074ca:	4770      	bx	lr
 80074cc:	ffff8080 	.word	0xffff8080

080074d0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074d0:	b490      	push	{r4, r7}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	7b1b      	ldrb	r3, [r3, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d171      	bne.n	80075c6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d036      	beq.n	8007558 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29c      	uxth	r4, r3
 80074f8:	4623      	mov	r3, r4
 80074fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d014      	beq.n	800752c <USB_DeactivateEndpoint+0x5c>
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007518:	b29c      	uxth	r4, r3
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	4b6b      	ldr	r3, [pc, #428]	; (80076d4 <USB_DeactivateEndpoint+0x204>)
 8007526:	4323      	orrs	r3, r4
 8007528:	b29b      	uxth	r3, r3
 800752a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007542:	b29c      	uxth	r4, r3
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	441a      	add	r2, r3
 800754e:	4b62      	ldr	r3, [pc, #392]	; (80076d8 <USB_DeactivateEndpoint+0x208>)
 8007550:	4323      	orrs	r3, r4
 8007552:	b29b      	uxth	r3, r3
 8007554:	8013      	strh	r3, [r2, #0]
 8007556:	e144      	b.n	80077e2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29c      	uxth	r4, r3
 8007566:	4623      	mov	r3, r4
 8007568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d014      	beq.n	800759a <USB_DeactivateEndpoint+0xca>
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	b29c      	uxth	r4, r3
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	441a      	add	r2, r3
 8007592:	4b52      	ldr	r3, [pc, #328]	; (80076dc <USB_DeactivateEndpoint+0x20c>)
 8007594:	4323      	orrs	r3, r4
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b0:	b29c      	uxth	r4, r3
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	4b46      	ldr	r3, [pc, #280]	; (80076d8 <USB_DeactivateEndpoint+0x208>)
 80075be:	4323      	orrs	r3, r4
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	8013      	strh	r3, [r2, #0]
 80075c4:	e10d      	b.n	80077e2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 8088 	bne.w	80076e0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29c      	uxth	r4, r3
 80075de:	4623      	mov	r3, r4
 80075e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d014      	beq.n	8007612 <USB_DeactivateEndpoint+0x142>
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fe:	b29c      	uxth	r4, r3
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	441a      	add	r2, r3
 800760a:	4b34      	ldr	r3, [pc, #208]	; (80076dc <USB_DeactivateEndpoint+0x20c>)
 800760c:	4323      	orrs	r3, r4
 800760e:	b29b      	uxth	r3, r3
 8007610:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29c      	uxth	r4, r3
 8007620:	4623      	mov	r3, r4
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d014      	beq.n	8007654 <USB_DeactivateEndpoint+0x184>
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007640:	b29c      	uxth	r4, r3
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	441a      	add	r2, r3
 800764c:	4b21      	ldr	r3, [pc, #132]	; (80076d4 <USB_DeactivateEndpoint+0x204>)
 800764e:	4323      	orrs	r3, r4
 8007650:	b29b      	uxth	r3, r3
 8007652:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766a:	b29c      	uxth	r4, r3
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	441a      	add	r2, r3
 8007676:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <USB_DeactivateEndpoint+0x204>)
 8007678:	4323      	orrs	r3, r4
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007694:	b29c      	uxth	r4, r3
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	441a      	add	r2, r3
 80076a0:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <USB_DeactivateEndpoint+0x208>)
 80076a2:	4323      	orrs	r3, r4
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076be:	b29c      	uxth	r4, r3
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	441a      	add	r2, r3
 80076ca:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <USB_DeactivateEndpoint+0x208>)
 80076cc:	4323      	orrs	r3, r4
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	8013      	strh	r3, [r2, #0]
 80076d2:	e086      	b.n	80077e2 <USB_DeactivateEndpoint+0x312>
 80076d4:	ffff80c0 	.word	0xffff80c0
 80076d8:	ffff8080 	.word	0xffff8080
 80076dc:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29c      	uxth	r4, r3
 80076ee:	4623      	mov	r3, r4
 80076f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d014      	beq.n	8007722 <USB_DeactivateEndpoint+0x252>
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	b29c      	uxth	r4, r3
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	441a      	add	r2, r3
 800771a:	4b35      	ldr	r3, [pc, #212]	; (80077f0 <USB_DeactivateEndpoint+0x320>)
 800771c:	4323      	orrs	r3, r4
 800771e:	b29b      	uxth	r3, r3
 8007720:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29c      	uxth	r4, r3
 8007730:	4623      	mov	r3, r4
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d014      	beq.n	8007764 <USB_DeactivateEndpoint+0x294>
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007750:	b29c      	uxth	r4, r3
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	441a      	add	r2, r3
 800775c:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <USB_DeactivateEndpoint+0x324>)
 800775e:	4323      	orrs	r3, r4
 8007760:	b29b      	uxth	r3, r3
 8007762:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777a:	b29c      	uxth	r4, r3
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <USB_DeactivateEndpoint+0x320>)
 8007788:	4323      	orrs	r3, r4
 800778a:	b29b      	uxth	r3, r3
 800778c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a4:	b29c      	uxth	r4, r3
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	441a      	add	r2, r3
 80077b0:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <USB_DeactivateEndpoint+0x328>)
 80077b2:	4323      	orrs	r3, r4
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	b29c      	uxth	r4, r3
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	441a      	add	r2, r3
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <USB_DeactivateEndpoint+0x328>)
 80077dc:	4323      	orrs	r3, r4
 80077de:	b29b      	uxth	r3, r3
 80077e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc90      	pop	{r4, r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	ffffc080 	.word	0xffffc080
 80077f4:	ffff80c0 	.word	0xffff80c0
 80077f8:	ffff8080 	.word	0xffff8080

080077fc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b08d      	sub	sp, #52	; 0x34
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b01      	cmp	r3, #1
 800780c:	f040 8160 	bne.w	8007ad0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	699a      	ldr	r2, [r3, #24]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	429a      	cmp	r2, r3
 800781a:	d909      	bls.n	8007830 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	1ad2      	subs	r2, r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	619a      	str	r2, [r3, #24]
 800782e:	e005      	b.n	800783c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2200      	movs	r2, #0
 800783a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	7b1b      	ldrb	r3, [r3, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d119      	bne.n	8007878 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	6959      	ldr	r1, [r3, #20]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	88da      	ldrh	r2, [r3, #6]
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	b29b      	uxth	r3, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fba2 	bl	8007f9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007856:	687c      	ldr	r4, [r7, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785e:	b29b      	uxth	r3, r3
 8007860:	441c      	add	r4, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	4423      	add	r3, r4
 800786a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800786e:	461c      	mov	r4, r3
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	b29b      	uxth	r3, r3
 8007874:	8023      	strh	r3, [r4, #0]
 8007876:	e10f      	b.n	8007a98 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d065      	beq.n	800795a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800788e:	687c      	ldr	r4, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d148      	bne.n	800792a <USB_EPStartXfer+0x12e>
 8007898:	687c      	ldr	r4, [r7, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	441c      	add	r4, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	4423      	add	r3, r4
 80078ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078b0:	461c      	mov	r4, r3
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10e      	bne.n	80078d6 <USB_EPStartXfer+0xda>
 80078b8:	8823      	ldrh	r3, [r4, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	8023      	strh	r3, [r4, #0]
 80078c4:	8823      	ldrh	r3, [r4, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8023      	strh	r3, [r4, #0]
 80078d4:	e03d      	b.n	8007952 <USB_EPStartXfer+0x156>
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	2b3e      	cmp	r3, #62	; 0x3e
 80078da:	d810      	bhi.n	80078fe <USB_EPStartXfer+0x102>
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <USB_EPStartXfer+0xf6>
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	029b      	lsls	r3, r3, #10
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	8023      	strh	r3, [r4, #0]
 80078fc:	e029      	b.n	8007952 <USB_EPStartXfer+0x156>
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	095b      	lsrs	r3, r3, #5
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
 8007904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <USB_EPStartXfer+0x118>
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	3b01      	subs	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	b29b      	uxth	r3, r3
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	b29b      	uxth	r3, r3
 800791c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007924:	b29b      	uxth	r3, r3
 8007926:	8023      	strh	r3, [r4, #0]
 8007928:	e013      	b.n	8007952 <USB_EPStartXfer+0x156>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d10f      	bne.n	8007952 <USB_EPStartXfer+0x156>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007938:	b29b      	uxth	r3, r3
 800793a:	441c      	add	r4, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	4423      	add	r3, r4
 8007944:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	895b      	ldrh	r3, [r3, #10]
 8007956:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007958:	e063      	b.n	8007a22 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d148      	bne.n	80079f4 <USB_EPStartXfer+0x1f8>
 8007962:	687c      	ldr	r4, [r7, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796a:	b29b      	uxth	r3, r3
 800796c:	441c      	add	r4, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	4423      	add	r3, r4
 8007976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800797a:	461c      	mov	r4, r3
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10e      	bne.n	80079a0 <USB_EPStartXfer+0x1a4>
 8007982:	8823      	ldrh	r3, [r4, #0]
 8007984:	b29b      	uxth	r3, r3
 8007986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800798a:	b29b      	uxth	r3, r3
 800798c:	8023      	strh	r3, [r4, #0]
 800798e:	8823      	ldrh	r3, [r4, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799a:	b29b      	uxth	r3, r3
 800799c:	8023      	strh	r3, [r4, #0]
 800799e:	e03d      	b.n	8007a1c <USB_EPStartXfer+0x220>
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	2b3e      	cmp	r3, #62	; 0x3e
 80079a4:	d810      	bhi.n	80079c8 <USB_EPStartXfer+0x1cc>
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	623b      	str	r3, [r7, #32]
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <USB_EPStartXfer+0x1c0>
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	3301      	adds	r3, #1
 80079ba:	623b      	str	r3, [r7, #32]
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	029b      	lsls	r3, r3, #10
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	8023      	strh	r3, [r4, #0]
 80079c6:	e029      	b.n	8007a1c <USB_EPStartXfer+0x220>
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <USB_EPStartXfer+0x1e2>
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	3b01      	subs	r3, #1
 80079dc:	623b      	str	r3, [r7, #32]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	029b      	lsls	r3, r3, #10
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8023      	strh	r3, [r4, #0]
 80079f2:	e013      	b.n	8007a1c <USB_EPStartXfer+0x220>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d10f      	bne.n	8007a1c <USB_EPStartXfer+0x220>
 80079fc:	687c      	ldr	r4, [r7, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	441c      	add	r4, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	4423      	add	r3, r4
 8007a10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a14:	461c      	mov	r4, r3
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	891b      	ldrh	r3, [r3, #8]
 8007a20:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6959      	ldr	r1, [r3, #20]
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fab4 	bl	8007f9a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d115      	bne.n	8007a66 <USB_EPStartXfer+0x26a>
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a50:	b29c      	uxth	r4, r3
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	441a      	add	r2, r3
 8007a5c:	4b9a      	ldr	r3, [pc, #616]	; (8007cc8 <USB_EPStartXfer+0x4cc>)
 8007a5e:	4323      	orrs	r3, r4
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	8013      	strh	r3, [r2, #0]
 8007a64:	e018      	b.n	8007a98 <USB_EPStartXfer+0x29c>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d114      	bne.n	8007a98 <USB_EPStartXfer+0x29c>
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a84:	b29c      	uxth	r4, r3
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	4b8e      	ldr	r3, [pc, #568]	; (8007ccc <USB_EPStartXfer+0x4d0>)
 8007a92:	4323      	orrs	r3, r4
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aae:	b29c      	uxth	r4, r3
 8007ab0:	f084 0310 	eor.w	r3, r4, #16
 8007ab4:	b29c      	uxth	r4, r3
 8007ab6:	f084 0320 	eor.w	r3, r4, #32
 8007aba:	b29c      	uxth	r4, r3
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	4b82      	ldr	r3, [pc, #520]	; (8007cd0 <USB_EPStartXfer+0x4d4>)
 8007ac8:	4323      	orrs	r3, r4
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]
 8007ace:	e146      	b.n	8007d5e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d909      	bls.n	8007af0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	1ad2      	subs	r2, r2, r3
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	619a      	str	r2, [r3, #24]
 8007aee:	e005      	b.n	8007afc <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2200      	movs	r2, #0
 8007afa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	7b1b      	ldrb	r3, [r3, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d148      	bne.n	8007b96 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b04:	687c      	ldr	r4, [r7, #4]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	441c      	add	r4, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	4423      	add	r3, r4
 8007b18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b1c:	461c      	mov	r4, r3
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10e      	bne.n	8007b42 <USB_EPStartXfer+0x346>
 8007b24:	8823      	ldrh	r3, [r4, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	8023      	strh	r3, [r4, #0]
 8007b30:	8823      	ldrh	r3, [r4, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	8023      	strh	r3, [r4, #0]
 8007b40:	e0f2      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	2b3e      	cmp	r3, #62	; 0x3e
 8007b46:	d810      	bhi.n	8007b6a <USB_EPStartXfer+0x36e>
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <USB_EPStartXfer+0x362>
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	029b      	lsls	r3, r3, #10
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	8023      	strh	r3, [r4, #0]
 8007b68:	e0de      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d102      	bne.n	8007b80 <USB_EPStartXfer+0x384>
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	029b      	lsls	r3, r3, #10
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	8023      	strh	r3, [r4, #0]
 8007b94:	e0c8      	b.n	8007d28 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d148      	bne.n	8007c30 <USB_EPStartXfer+0x434>
 8007b9e:	687c      	ldr	r4, [r7, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	441c      	add	r4, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	4423      	add	r3, r4
 8007bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bb6:	461c      	mov	r4, r3
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10e      	bne.n	8007bdc <USB_EPStartXfer+0x3e0>
 8007bbe:	8823      	ldrh	r3, [r4, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8023      	strh	r3, [r4, #0]
 8007bca:	8823      	ldrh	r3, [r4, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	8023      	strh	r3, [r4, #0]
 8007bda:	e03d      	b.n	8007c58 <USB_EPStartXfer+0x45c>
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	2b3e      	cmp	r3, #62	; 0x3e
 8007be0:	d810      	bhi.n	8007c04 <USB_EPStartXfer+0x408>
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	085b      	lsrs	r3, r3, #1
 8007be6:	61bb      	str	r3, [r7, #24]
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <USB_EPStartXfer+0x3fc>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	61bb      	str	r3, [r7, #24]
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	029b      	lsls	r3, r3, #10
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	8023      	strh	r3, [r4, #0]
 8007c02:	e029      	b.n	8007c58 <USB_EPStartXfer+0x45c>
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	f003 031f 	and.w	r3, r3, #31
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <USB_EPStartXfer+0x41e>
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	029b      	lsls	r3, r3, #10
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8023      	strh	r3, [r4, #0]
 8007c2e:	e013      	b.n	8007c58 <USB_EPStartXfer+0x45c>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	785b      	ldrb	r3, [r3, #1]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d10f      	bne.n	8007c58 <USB_EPStartXfer+0x45c>
 8007c38:	687c      	ldr	r4, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	441c      	add	r4, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	4423      	add	r3, r4
 8007c4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c50:	461c      	mov	r4, r3
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	8023      	strh	r3, [r4, #0]
 8007c58:	687c      	ldr	r4, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d14e      	bne.n	8007d00 <USB_EPStartXfer+0x504>
 8007c62:	687c      	ldr	r4, [r7, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	441c      	add	r4, r3
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	4423      	add	r3, r4
 8007c76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c7a:	461c      	mov	r4, r3
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10e      	bne.n	8007ca0 <USB_EPStartXfer+0x4a4>
 8007c82:	8823      	ldrh	r3, [r4, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	8023      	strh	r3, [r4, #0]
 8007c8e:	8823      	ldrh	r3, [r4, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8023      	strh	r3, [r4, #0]
 8007c9e:	e043      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca4:	d816      	bhi.n	8007cd4 <USB_EPStartXfer+0x4d8>
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	085b      	lsrs	r3, r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <USB_EPStartXfer+0x4c0>
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	029b      	lsls	r3, r3, #10
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	8023      	strh	r3, [r4, #0]
 8007cc6:	e02f      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007cc8:	ffff80c0 	.word	0xffff80c0
 8007ccc:	ffffc080 	.word	0xffffc080
 8007cd0:	ffff8080 	.word	0xffff8080
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <USB_EPStartXfer+0x4ee>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	029b      	lsls	r3, r3, #10
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	8023      	strh	r3, [r4, #0]
 8007cfe:	e013      	b.n	8007d28 <USB_EPStartXfer+0x52c>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	785b      	ldrb	r3, [r3, #1]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d10f      	bne.n	8007d28 <USB_EPStartXfer+0x52c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	441c      	add	r4, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	4423      	add	r3, r4
 8007d1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3e:	b29c      	uxth	r4, r3
 8007d40:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007d44:	b29c      	uxth	r4, r3
 8007d46:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007d4a:	b29c      	uxth	r4, r3
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	441a      	add	r2, r3
 8007d56:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <USB_EPStartXfer+0x56c>)
 8007d58:	4323      	orrs	r3, r4
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3734      	adds	r7, #52	; 0x34
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd90      	pop	{r4, r7, pc}
 8007d68:	ffff8080 	.word	0xffff8080

08007d6c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d6c:	b490      	push	{r4, r7}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d018      	beq.n	8007db0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d94:	b29c      	uxth	r4, r3
 8007d96:	f084 0310 	eor.w	r3, r4, #16
 8007d9a:	b29c      	uxth	r4, r3
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	441a      	add	r2, r3
 8007da6:	4b11      	ldr	r3, [pc, #68]	; (8007dec <USB_EPSetStall+0x80>)
 8007da8:	4323      	orrs	r3, r4
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	8013      	strh	r3, [r2, #0]
 8007dae:	e017      	b.n	8007de0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc6:	b29c      	uxth	r4, r3
 8007dc8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007dcc:	b29c      	uxth	r4, r3
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	441a      	add	r2, r3
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <USB_EPSetStall+0x80>)
 8007dda:	4323      	orrs	r3, r4
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bc90      	pop	{r4, r7}
 8007dea:	4770      	bx	lr
 8007dec:	ffff8080 	.word	0xffff8080

08007df0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007df0:	b490      	push	{r4, r7}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	7b1b      	ldrb	r3, [r3, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d17d      	bne.n	8007efe <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d03d      	beq.n	8007e86 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29c      	uxth	r4, r3
 8007e18:	4623      	mov	r3, r4
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d014      	beq.n	8007e4c <USB_EPClearStall+0x5c>
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e38:	b29c      	uxth	r4, r3
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	441a      	add	r2, r3
 8007e44:	4b31      	ldr	r3, [pc, #196]	; (8007f0c <USB_EPClearStall+0x11c>)
 8007e46:	4323      	orrs	r3, r4
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	78db      	ldrb	r3, [r3, #3]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d054      	beq.n	8007efe <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6a:	b29c      	uxth	r4, r3
 8007e6c:	f084 0320 	eor.w	r3, r4, #32
 8007e70:	b29c      	uxth	r4, r3
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	441a      	add	r2, r3
 8007e7c:	4b24      	ldr	r3, [pc, #144]	; (8007f10 <USB_EPClearStall+0x120>)
 8007e7e:	4323      	orrs	r3, r4
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	8013      	strh	r3, [r2, #0]
 8007e84:	e03b      	b.n	8007efe <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29c      	uxth	r4, r3
 8007e94:	4623      	mov	r3, r4
 8007e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d014      	beq.n	8007ec8 <USB_EPClearStall+0xd8>
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb4:	b29c      	uxth	r4, r3
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	441a      	add	r2, r3
 8007ec0:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <USB_EPClearStall+0x124>)
 8007ec2:	4323      	orrs	r3, r4
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ede:	b29c      	uxth	r4, r3
 8007ee0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007ee4:	b29c      	uxth	r4, r3
 8007ee6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007eea:	b29c      	uxth	r4, r3
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	441a      	add	r2, r3
 8007ef6:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <USB_EPClearStall+0x120>)
 8007ef8:	4323      	orrs	r3, r4
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc90      	pop	{r4, r7}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	ffff80c0 	.word	0xffff80c0
 8007f10:	ffff8080 	.word	0xffff8080
 8007f14:	ffffc080 	.word	0xffffc080

08007f18 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d103      	bne.n	8007f32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2280      	movs	r2, #128	; 0x80
 8007f2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr

08007f52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr

08007f66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b085      	sub	sp, #20
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f78:	68fb      	ldr	r3, [r7, #12]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr

08007f84 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr

08007f9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b08d      	sub	sp, #52	; 0x34
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	460b      	mov	r3, r1
 8007faa:	80fb      	strh	r3, [r7, #6]
 8007fac:	4613      	mov	r3, r2
 8007fae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fb0:	88bb      	ldrh	r3, [r7, #4]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	005a      	lsls	r2, r3, #1
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd2:	e01e      	b.n	8008012 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	3301      	adds	r3, #1
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	3302      	adds	r3, #2
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	3302      	adds	r3, #2
 8008004:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	3301      	adds	r3, #1
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	3b01      	subs	r3, #1
 8008010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1dd      	bne.n	8007fd4 <USB_WritePMA+0x3a>
  }
}
 8008018:	bf00      	nop
 800801a:	3734      	adds	r7, #52	; 0x34
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008022:	b480      	push	{r7}
 8008024:	b08b      	sub	sp, #44	; 0x2c
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	4611      	mov	r1, r2
 800802e:	461a      	mov	r2, r3
 8008030:	460b      	mov	r3, r1
 8008032:	80fb      	strh	r3, [r7, #6]
 8008034:	4613      	mov	r3, r2
 8008036:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008038:	88bb      	ldrh	r3, [r7, #4]
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	b29b      	uxth	r3, r3
 800803e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008048:	88fb      	ldrh	r3, [r7, #6]
 800804a:	005a      	lsls	r2, r3, #1
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008054:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
 800805a:	e01b      	b.n	8008094 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	3302      	adds	r3, #2
 8008068:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	b2da      	uxtb	r2, r3
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	3301      	adds	r3, #1
 8008076:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	0a1b      	lsrs	r3, r3, #8
 800807c:	b2da      	uxtb	r2, r3
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	3301      	adds	r3, #1
 8008086:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	3302      	adds	r3, #2
 800808c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	3b01      	subs	r3, #1
 8008092:	627b      	str	r3, [r7, #36]	; 0x24
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e0      	bne.n	800805c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800809a:	88bb      	ldrh	r3, [r7, #4]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d007      	beq.n	80080b6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	701a      	strb	r2, [r3, #0]
  }
}
 80080b6:	bf00      	nop
 80080b8:	372c      	adds	r7, #44	; 0x2c
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr
	...

080080d8 <_ZN10AdcHandlerC1Ev>:
#include "AdcHandler.h"


AdcHandler::AdcHandler() {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	4a07      	ldr	r2, [pc, #28]	; (8008100 <_ZN10AdcHandlerC1Ev+0x28>)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	601a      	str	r2, [r3, #0]
	extern std::vector<AdcHandler*> adcHandlers;
	adcHandlers.push_back(this);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	4619      	mov	r1, r3
 80080f0:	4804      	ldr	r0, [pc, #16]	; (8008104 <_ZN10AdcHandlerC1Ev+0x2c>)
 80080f2:	f000 f879 	bl	80081e8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE9push_backEOS1_>

}
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	08018bc0 	.word	0x08018bc0
 8008104:	20000b4c 	.word	0x20000b4c

08008108 <_ZN10AdcHandlerD1Ev>:

AdcHandler::~AdcHandler() {
 8008108:	b590      	push	{r4, r7, lr}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	4a21      	ldr	r2, [pc, #132]	; (8008198 <_ZN10AdcHandlerD1Ev+0x90>)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	601a      	str	r2, [r3, #0]
	extern std::vector<AdcHandler*> adcHandlers;
	for (uint8_t i = 0; i < adcHandlers.size(); i++){
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
 800811a:	7dfc      	ldrb	r4, [r7, #23]
 800811c:	481f      	ldr	r0, [pc, #124]	; (800819c <_ZN10AdcHandlerD1Ev+0x94>)
 800811e:	f000 f874 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 8008122:	4603      	mov	r3, r0
 8008124:	429c      	cmp	r4, r3
 8008126:	bf34      	ite	cc
 8008128:	2301      	movcc	r3, #1
 800812a:	2300      	movcs	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d02d      	beq.n	800818e <_ZN10AdcHandlerD1Ev+0x86>
		if(adcHandlers[i] == this){
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	4619      	mov	r1, r3
 8008136:	4819      	ldr	r0, [pc, #100]	; (800819c <_ZN10AdcHandlerD1Ev+0x94>)
 8008138:	f000 f877 	bl	800822a <_ZNSt6vectorIP10AdcHandlerSaIS1_EEixEj>
 800813c:	4603      	mov	r3, r0
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	bf0c      	ite	eq
 8008146:	2301      	moveq	r3, #1
 8008148:	2300      	movne	r3, #0
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01a      	beq.n	8008186 <_ZN10AdcHandlerD1Ev+0x7e>
			adcHandlers.erase(adcHandlers.begin()+i);
 8008150:	4812      	ldr	r0, [pc, #72]	; (800819c <_ZN10AdcHandlerD1Ev+0x94>)
 8008152:	f000 f879 	bl	8008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 8008156:	4603      	mov	r3, r0
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	7dfa      	ldrb	r2, [r7, #23]
 800815c:	f107 0310 	add.w	r3, r7, #16
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f000 f880 	bl	8008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8008168:	4603      	mov	r3, r0
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	f107 020c 	add.w	r2, r7, #12
 8008170:	f107 0308 	add.w	r3, r7, #8
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f88e 	bl	8008298 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	4807      	ldr	r0, [pc, #28]	; (800819c <_ZN10AdcHandlerD1Ev+0x94>)
 8008180:	f000 f89b 	bl	80082ba <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 8008184:	e003      	b.n	800818e <_ZN10AdcHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < adcHandlers.size(); i++){
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	3301      	adds	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
 800818c:	e7c5      	b.n	800811a <_ZN10AdcHandlerD1Ev+0x12>
		}
	}
}
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}
 8008198:	08018bc0 	.word	0x08018bc0
 800819c:	20000b4c 	.word	0x20000b4c

080081a0 <_ZN10AdcHandlerD0Ev>:
AdcHandler::~AdcHandler() {
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
}
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff ffad 	bl	8008108 <_ZN10AdcHandlerD1Ev>
 80081ae:	2104      	movs	r1, #4
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f00d f87d 	bl	80152b0 <_ZdlPvj>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <_ZN10AdcHandler6adcUpdEPVm>:

void AdcHandler::adcUpd(volatile uint32_t* ADC_BUF){
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]

}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <_ZSt4moveIRP10AdcHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80081f2:	6838      	ldr	r0, [r7, #0]
 80081f4:	f7ff ffee 	bl	80081d4 <_ZSt4moveIRP10AdcHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80081f8:	4603      	mov	r3, r0
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f88d 	bl	800831c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	109b      	asrs	r3, r3, #2
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr

0800822a <_ZNSt6vectorIP10AdcHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
      }
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr

08008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	f107 030c 	add.w	r3, r7, #12
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f000 f88d 	bl	8008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      __normal_iterator&
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
 800827e:	f107 020c 	add.w	r2, r7, #12
 8008282:	f107 0308 	add.w	r3, r7, #8
 8008286:	4611      	mov	r1, r2
 8008288:	4618      	mov	r0, r3
 800828a:	f000 f875 	bl	8008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 80082a2:	6838      	ldr	r0, [r7, #0]
 80082a4:	f000 f877 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80082a8:	4603      	mov	r3, r0
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff ffbf 	bl	8008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 80082ca:	4603      	mov	r3, r0
 80082cc:	60bb      	str	r3, [r7, #8]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f86b 	bl	80083aa <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE6cbeginEv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	f107 020c 	add.w	r2, r7, #12
 80082dc:	463b      	mov	r3, r7
 80082de:	4611      	mov	r1, r2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 f876 	bl	80083d2 <_ZN9__gnu_cxxmiIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 80082e6:	4602      	mov	r2, r0
 80082e8:	f107 0308 	add.w	r3, r7, #8
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff ffba 	bl	8008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 80082f4:	4603      	mov	r3, r0
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f880 	bl	80083fe <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 80082fe:	4603      	mov	r3, r0
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr

0800831c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800831c:	b5b0      	push	{r4, r5, r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	429a      	cmp	r2, r3
 8008330:	d011      	beq.n	8008356 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008332:	687c      	ldr	r4, [r7, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685d      	ldr	r5, [r3, #4]
 8008338:	6838      	ldr	r0, [r7, #0]
 800833a:	f7ff ffe5 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800833e:	4603      	mov	r3, r0
 8008340:	461a      	mov	r2, r3
 8008342:	4629      	mov	r1, r5
 8008344:	4620      	mov	r0, r4
 8008346:	f000 f896 	bl	8008476 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	1d1a      	adds	r2, r3, #4
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8008354:	e00c      	b.n	8008370 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8a0 	bl	800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 800835c:	4604      	mov	r4, r0
 800835e:	6838      	ldr	r0, [r7, #0]
 8008360:	f7ff ffd2 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	4621      	mov	r1, r4
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f8a8 	bl	80084c0 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bdb0      	pop	{r4, r5, r7, pc}

08008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr

08008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr

080083aa <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	f107 020c 	add.w	r2, r7, #12
 80083bc:	f107 0308 	add.w	r3, r7, #8
 80083c0:	4611      	mov	r1, r2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f908 	bl	80085d8 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <_ZN9__gnu_cxxmiIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80083d2:	b590      	push	{r4, r7, lr}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f90a 	bl	80085f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80083e2:	4603      	mov	r3, r0
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461c      	mov	r4, r3
 80083e8:	6838      	ldr	r0, [r7, #0]
 80083ea:	f000 f904 	bl	80085f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	1ae3      	subs	r3, r4, r3
 80083f4:	109b      	asrs	r3, r3, #2
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd90      	pop	{r4, r7, pc}

080083fe <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 80083fe:	b590      	push	{r4, r7, lr}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	6039      	str	r1, [r7, #0]
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 8008408:	463b      	mov	r3, r7
 800840a:	2101      	movs	r1, #1
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff ff2b 	bl	8008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8008412:	4603      	mov	r3, r0
 8008414:	60bb      	str	r3, [r7, #8]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f840 	bl	800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 800841c:	4603      	mov	r3, r0
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	f107 020c 	add.w	r2, r7, #12
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	4611      	mov	r1, r2
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f8ed 	bl	800860a <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00e      	beq.n	8008454 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8008436:	463b      	mov	r3, r7
 8008438:	2101      	movs	r1, #1
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff ff14 	bl	8008268 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8008440:	4604      	mov	r4, r0
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f82a 	bl	800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 8008448:	4603      	mov	r3, r0
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	4620      	mov	r0, r4
 8008450:	f000 f8f3 	bl	800863a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	1f1a      	subs	r2, r3, #4
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f000 f8ff 	bl	800866a <_ZNSt16allocator_traitsISaIP10AdcHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800846c:	683b      	ldr	r3, [r7, #0]
    }
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	bd90      	pop	{r4, r7, pc}

08008476 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ff40 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008488:	4603      	mov	r3, r0
 800848a:	461a      	mov	r2, r3
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f8f8 	bl	8008684 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 8008494:	bf00      	nop
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	1d1a      	adds	r2, r3, #4
 80084a8:	f107 030c 	add.w	r3, r7, #12
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff ff62 	bl	8008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80084c0:	b5b0      	push	{r4, r5, r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80084cc:	4a41      	ldr	r2, [pc, #260]	; (80085d4 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 80084ce:	2101      	movs	r1, #1
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f8ef 	bl	80086b4 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc>
 80084d6:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f7ff feb5 	bl	8008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 80084de:	4603      	mov	r3, r0
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	f107 0214 	add.w	r2, r7, #20
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 f929 	bl	8008744 <_ZN9__gnu_cxxmiIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80084f2:	4603      	mov	r3, r0
 80084f4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f938 	bl	8008770 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj>
 8008500:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8008506:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	18d5      	adds	r5, r2, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff fef9 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008516:	4603      	mov	r3, r0
 8008518:	461a      	mov	r2, r3
 800851a:	4629      	mov	r1, r5
 800851c:	4620      	mov	r0, r4
 800851e:	f7ff ffaa 	bl	8008476 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8008522:	2300      	movs	r3, #0
 8008524:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681c      	ldr	r4, [r3, #0]
 800852a:	f107 0308 	add.w	r3, r7, #8
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff ff31 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008534:	4603      	mov	r3, r0
 8008536:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f92c 	bl	8008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8008540:	4603      	mov	r3, r0
	  __new_finish
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	4629      	mov	r1, r5
 8008546:	4620      	mov	r0, r4
 8008548:	f000 f930 	bl	80087ac <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800854c:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	3304      	adds	r3, #4
 8008552:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8008554:	f107 0308 	add.w	r3, r7, #8
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff ff1c 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800855e:	4603      	mov	r3, r0
 8008560:	681c      	ldr	r4, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f915 	bl	8008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800856e:	4603      	mov	r3, r0
	  __new_finish
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	4629      	mov	r1, r5
 8008574:	4620      	mov	r0, r4
 8008576:	f000 f919 	bl	80087ac <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800857a:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681c      	ldr	r4, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f906 	bl	8008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800858c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800858e:	461a      	mov	r2, r3
 8008590:	4629      	mov	r1, r5
 8008592:	4620      	mov	r0, r4
 8008594:	f000 f923 	bl	80087de <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80085a2:	461a      	mov	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80085ac:	461a      	mov	r2, r3
 80085ae:	f000 f924 	bl	80087fa <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	441a      	add	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	609a      	str	r2, [r3, #8]
    }
 80085ca:	bf00      	nop
 80085cc:	3728      	adds	r7, #40	; 0x28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bdb0      	pop	{r4, r5, r7, pc}
 80085d2:	bf00      	nop
 80085d4:	080186ec 	.word	0x080186ec

080085d8 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr

080085f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr

0800860a <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800860a:	b590      	push	{r4, r7, lr}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff febe 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800861a:	4603      	mov	r3, r0
 800861c:	681c      	ldr	r4, [r3, #0]
 800861e:	6838      	ldr	r0, [r7, #0]
 8008620:	f7ff feb9 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008624:	4603      	mov	r3, r0
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429c      	cmp	r4, r3
 800862a:	bf14      	ite	ne
 800862c:	2301      	movne	r3, #1
 800862e:	2300      	moveq	r3, #0
 8008630:	b2db      	uxtb	r3, r3
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	bd90      	pop	{r4, r7, pc}

0800863a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 800863a:	b590      	push	{r4, r7, lr}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f8ea 	bl	8008820 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800864c:	4604      	mov	r4, r0
 800864e:	68b8      	ldr	r0, [r7, #8]
 8008650:	f000 f8e6 	bl	8008820 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8008654:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	4619      	mov	r1, r3
 800865a:	4620      	mov	r0, r4
 800865c:	f000 f8ea 	bl	8008834 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8008660:	4603      	mov	r3, r0
    }
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	bd90      	pop	{r4, r7, pc}

0800866a <_ZNSt16allocator_traitsISaIP10AdcHandlerEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f902 	bl	8008880 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE7destroyIS2_EEvPT_>
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8008684:	b590      	push	{r4, r7, lr}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff fe39 	bl	8008308 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8008696:	4603      	mov	r3, r0
 8008698:	681c      	ldr	r4, [r3, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4619      	mov	r1, r3
 800869e:	2004      	movs	r0, #4
 80086a0:	f7ff fd0e 	bl	80080c0 <_ZnwjPv>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d000      	beq.n	80086ac <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 80086aa:	601c      	str	r4, [r3, #0]
 80086ac:	bf00      	nop
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd90      	pop	{r4, r7, pc}

080086b4 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f8e7 	bl	8008894 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 80086c6:	4604      	mov	r4, r0
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff fd9e 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 80086ce:	4603      	mov	r3, r0
 80086d0:	1ae2      	subs	r2, r4, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	bf34      	ite	cc
 80086d8:	2301      	movcc	r3, #1
 80086da:	2300      	movcs	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f00c fe0c 	bl	8015302 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff fd8d 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 80086f0:	4604      	mov	r4, r0
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fd89 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 80086f8:	4603      	mov	r3, r0
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	f107 0208 	add.w	r2, r7, #8
 8008700:	f107 0310 	add.w	r3, r7, #16
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f000 f8d5 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 800870c:	4603      	mov	r3, r0
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4423      	add	r3, r4
 8008712:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f7ff fd78 	bl	800820a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 800871a:	4602      	mov	r2, r0
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	4293      	cmp	r3, r2
 8008720:	d306      	bcc.n	8008730 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f8b6 	bl	8008894 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 8008728:	4602      	mov	r2, r0
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	4293      	cmp	r3, r2
 800872e:	d904      	bls.n	800873a <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 f8af 	bl	8008894 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 8008736:	4603      	mov	r3, r0
 8008738:	e000      	b.n	800873c <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 800873a:	697b      	ldr	r3, [r7, #20]
      }
 800873c:	4618      	mov	r0, r3
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	bd90      	pop	{r4, r7, pc}

08008744 <_ZN9__gnu_cxxmiIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008744:	b590      	push	{r4, r7, lr}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff fe21 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008754:	4603      	mov	r3, r0
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	461c      	mov	r4, r3
 800875a:	6838      	ldr	r0, [r7, #0]
 800875c:	f7ff fe1b 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008760:	4603      	mov	r3, r0
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	1ae3      	subs	r3, r4, r3
 8008766:	109b      	asrs	r3, r3, #2
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	bd90      	pop	{r4, r7, pc}

08008770 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj+0x1e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	4618      	mov	r0, r3
 8008786:	f000 f8a9 	bl	80088dc <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8allocateERS2_j>
 800878a:	4603      	mov	r3, r0
 800878c:	e000      	b.n	8008790 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj+0x20>
 800878e:	2300      	movs	r3, #0
      }
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4618      	mov	r0, r3
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80087ac:	b590      	push	{r4, r7, lr}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 f89d 	bl	80088fa <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>
 80087c0:	4604      	mov	r4, r0
 80087c2:	68b8      	ldr	r0, [r7, #8]
 80087c4:	f000 f899 	bl	80088fa <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>
 80087c8:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 f8a2 	bl	8008918 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10AdcHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80087d4:	4603      	mov	r3, r0
    }
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd90      	pop	{r4, r7, pc}

080087de <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f8a4 	bl	800893a <_ZSt8_DestroyIPP10AdcHandlerEvT_S3_>
    }
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]
	if (__p)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f89e 	bl	8008954 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE10deallocateERS2_PS1_j>
      }
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr

08008834 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008834:	b5b0      	push	{r4, r5, r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f896 	bl	8008972 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8008846:	4604      	mov	r4, r0
 8008848:	68b8      	ldr	r0, [r7, #8]
 800884a:	f000 f892 	bl	8008972 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800884e:	4605      	mov	r5, r0
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f88e 	bl	8008972 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	4629      	mov	r1, r5
 800885c:	4620      	mov	r0, r4
 800885e:	f000 f896 	bl	800898e <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8008862:	4603      	mov	r3, r0
 8008864:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8008866:	f107 0214 	add.w	r2, r7, #20
 800886a:	f107 0310 	add.w	r3, r7, #16
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fd81 	bl	8008378 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008876:	693b      	ldr	r3, [r7, #16]
    }
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bdb0      	pop	{r4, r5, r7, pc}

08008880 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	bf00      	nop
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	bc80      	pop	{r7}
 8008892:	4770      	bx	lr

08008894 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 f893 	bl	80089ca <_ZNKSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80088a4:	4603      	mov	r3, r0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f883 	bl	80089b2 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8max_sizeERKS2_>
 80088ac:	4603      	mov	r3, r0
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d201      	bcs.n	80088d0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	e000      	b.n	80088d2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80088d0:	687b      	ldr	r3, [r7, #4]
    }
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr

080088dc <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80088e6:	2200      	movs	r2, #0
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f877 	bl	80089de <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv>
 80088f0:	4603      	mov	r3, r0
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8008902:	f107 030c 	add.w	r3, r7, #12
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 f886 	bl	8008a1a <_ZNSt13move_iteratorIPP10AdcHandlerEC1ES2_>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10AdcHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f883 	bl	8008a36 <_ZSt18uninitialized_copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>
 8008930:	4603      	mov	r3, r0
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <_ZSt8_DestroyIPP10AdcHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f887 	bl	8008a5a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10AdcHandlerEEvT_S5_>
    }
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f882 	bl	8008a6e <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE10deallocateEPS2_j>
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800897a:	1d3b      	adds	r3, r7, #4
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff fd0a 	bl	8008396 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8008982:	4603      	mov	r3, r0
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800899a:	2301      	movs	r3, #1
 800899c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 f870 	bl	8008a88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_>
 80089a8:	4603      	mov	r3, r0
    }
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f881 	bl	8008ac2 <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>
 80089c0:	4603      	mov	r3, r0
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <_ZNKSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr

080089de <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f869 	bl	8008ac2 <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>
 80089f0:	4602      	mov	r2, r0
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	bf8c      	ite	hi
 80089f8:	2301      	movhi	r3, #1
 80089fa:	2300      	movls	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008a02:	f00c fc75 	bl	80152f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f00c fc52 	bl	80152b4 <_Znwj>
 8008a10:	4603      	mov	r3, r0
      }
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <_ZNSt13move_iteratorIPP10AdcHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr

08008a36 <_ZSt18uninitialized_copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b086      	sub	sp, #24
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008a42:	2301      	movs	r3, #1
 8008a44:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 f844 	bl	8008ad8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10AdcHandlerES5_EET0_T_S8_S7_>
 8008a50:	4603      	mov	r3, r0
    }
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10AdcHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr

08008a6e <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f00c fc34 	bl	80152e8 <_ZdlPv>
      }
 8008a80:	bf00      	nop
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	109b      	asrs	r3, r3, #2
 8008a9c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d006      	beq.n	8008ab2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	68f9      	ldr	r1, [r7, #12]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f00f f8f1 	bl	8017c94 <memmove>
	  return __result + _Num;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	4413      	add	r3, r2
	}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008aca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr

08008ad8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10AdcHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68b9      	ldr	r1, [r7, #8]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f805 	bl	8008af8 <_ZSt4copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>
 8008aee:	4603      	mov	r3, r0
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <_ZSt4copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8008af8:	b590      	push	{r4, r7, lr}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f80f 	bl	8008b28 <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	f000 f80b 	bl	8008b28 <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008b12:	4603      	mov	r3, r0
	       __result));
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4619      	mov	r1, r3
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 f816 	bl	8008b4a <_ZSt14__copy_move_a2ILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8008b1e:	4603      	mov	r3, r0
    }
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd90      	pop	{r4, r7, pc}

08008b28 <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8008b30:	1d3b      	adds	r3, r7, #4
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f825 	bl	8008b82 <_ZNKSt13move_iteratorIPP10AdcHandlerE4baseEv>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f82c 	bl	8008b98 <_ZSt12__miter_baseIPP10AdcHandlerET_S3_>
 8008b40:	4603      	mov	r3, r0
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <_ZSt14__copy_move_a2ILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008b4a:	b5b0      	push	{r4, r5, r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 f828 	bl	8008bac <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	68b8      	ldr	r0, [r7, #8]
 8008b60:	f000 f824 	bl	8008bac <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8008b64:	4605      	mov	r5, r0
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f820 	bl	8008bac <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8008b6c:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4629      	mov	r1, r5
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7ff ff0b 	bl	800898e <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8008b78:	4603      	mov	r3, r0
    }
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bdb0      	pop	{r4, r5, r7, pc}

08008b82 <_ZNKSt13move_iteratorIPP10AdcHandlerE4baseEv>:
      base() const
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bc80      	pop	{r7}
 8008b96:	4770      	bx	lr

08008b98 <_ZSt12__miter_baseIPP10AdcHandlerET_S3_>:
    __miter_base(_Iterator __it)
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bc80      	pop	{r7}
 8008baa:	4770      	bx	lr

08008bac <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>:
    __niter_base(_Iterator __it)
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr

08008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
					__idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f00c fd6b 	bl	80156a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008bd2:	4602      	mov	r2, r0
			     __idx, __base); }
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4904      	ldr	r1, [pc, #16]	; (8008bec <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8008bdc:	4804      	ldr	r0, [pc, #16]	; (8008bf0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8008bde:	f000 fc3f 	bl	8009460 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8008be2:	4603      	mov	r3, r0
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	08018708 	.word	0x08018708
 8008bf0:	08017fc5 	.word	0x08017fc5

08008bf4 <_ZN9CmdParserC1Ev>:
 */

#include <CmdParser.h>


CmdParser::CmdParser() {
 8008bf4:	b590      	push	{r4, r7, lr}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	4a10      	ldr	r2, [pc, #64]	; (8008c40 <_ZN9CmdParserC1Ev+0x4c>)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3304      	adds	r3, #4
 8008c06:	4618      	mov	r0, r3
 8008c08:	f00c fc70 	bl	80154ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f103 041c 	add.w	r4, r3, #28
 8008c12:	f107 030c 	add.w	r3, r7, #12
 8008c16:	4618      	mov	r0, r3
 8008c18:	f00c fb68 	bl	80152ec <_ZNSaIcEC1Ev>
 8008c1c:	f107 030c 	add.w	r3, r7, #12
 8008c20:	461a      	mov	r2, r3
 8008c22:	4908      	ldr	r1, [pc, #32]	; (8008c44 <_ZN9CmdParserC1Ev+0x50>)
 8008c24:	4620      	mov	r0, r4
 8008c26:	f00c fd9d 	bl	8015764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c2a:	f107 030c 	add.w	r3, r7, #12
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f00c fb5d 	bl	80152ee <_ZNSaIcED1Ev>
	// TODO Auto-generated constructor stub

}
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd90      	pop	{r4, r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	08018bd4 	.word	0x08018bd4
 8008c44:	08018710 	.word	0x08018710

08008c48 <_ZN9CmdParserD1Ev>:

CmdParser::~CmdParser() {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	4a08      	ldr	r2, [pc, #32]	; (8008c74 <_ZN9CmdParserD1Ev+0x2c>)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	331c      	adds	r3, #28
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f00c fc67 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f00c fc62 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// TODO Auto-generated destructor stub
}
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	08018bd4 	.word	0x08018bd4

08008c78 <_ZN9CmdParserD0Ev>:
CmdParser::~CmdParser() {
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
}
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff ffe1 	bl	8008c48 <_ZN9CmdParserD1Ev>
 8008c86:	2134      	movs	r1, #52	; 0x34
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f00c fb11 	bl	80152b0 <_ZdlPvj>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <_ZN9CmdParser3addEPcPm>:
void CmdParser::clear(){
	buffer.clear();
}


bool CmdParser::add(char* Buf, uint32_t *Len){
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
	bool flag = false;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i=0;i<*Len;i++){
 8008ca8:	2300      	movs	r3, #0
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d222      	bcs.n	8008cfc <_ZN9CmdParser3addEPcPm+0x64>
		// Replace end markers
		if(*(Buf+i) == '\n' || *(Buf+i) == '\r' || *(Buf+i) == ';'|| *(Buf+i) == ' '){
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	4413      	add	r3, r2
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b0a      	cmp	r3, #10
 8008cc0:	d011      	beq.n	8008ce6 <_ZN9CmdParser3addEPcPm+0x4e>
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b0d      	cmp	r3, #13
 8008ccc:	d00b      	beq.n	8008ce6 <_ZN9CmdParser3addEPcPm+0x4e>
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b3b      	cmp	r3, #59	; 0x3b
 8008cd8:	d005      	beq.n	8008ce6 <_ZN9CmdParser3addEPcPm+0x4e>
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	4413      	add	r3, r2
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d106      	bne.n	8008cf4 <_ZN9CmdParser3addEPcPm+0x5c>
			*(Buf+i) = (uint8_t)';';
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	4413      	add	r3, r2
 8008cec:	223b      	movs	r2, #59	; 0x3b
 8008cee:	701a      	strb	r2, [r3, #0]
			flag = true;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i=0;i<*Len;i++){
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	613b      	str	r3, [r7, #16]
 8008cfa:	e7d7      	b.n	8008cac <_ZN9CmdParser3addEPcPm+0x14>
		}
	}

	this->buffer.append((char*)Buf,*Len);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	1d18      	adds	r0, r3, #4
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	f00c fca4 	bl	8015654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>

	return flag;
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <_ZN13ParsedCommandC1Ev>:


enum class CMDtype{
	set,setat,get,getat,none,help,err, dash
};
struct ParsedCommand
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f00c fbe3 	bl	80154ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	831a      	strh	r2, [r3, #24]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	61da      	str	r2, [r3, #28]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2204      	movs	r2, #4
 8008d36:	621a      	str	r2, [r3, #32]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <_ZN13ParsedCommandD1Ev>:
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f00c fbee 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <_ZN9CmdParser5parseEv>:



std::vector<ParsedCommand> CmdParser::parse(){
 8008d5c:	b590      	push	{r4, r7, lr}
 8008d5e:	b0e9      	sub	sp, #420	; 0x1a4
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	1d3b      	adds	r3, r7, #4
 8008d64:	6018      	str	r0, [r3, #0]
 8008d66:	463b      	mov	r3, r7
 8008d68:	6019      	str	r1, [r3, #0]

	std::vector<ParsedCommand> commands;
 8008d6a:	1d3b      	adds	r3, r7, #4
 8008d6c:	6818      	ldr	r0, [r3, #0]
 8008d6e:	f000 fbbd 	bl	80094ec <_ZNSt6vectorI13ParsedCommandSaIS0_EEC1Ev>
	std::vector<std::string> tokens;
 8008d72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fbc5 	bl	8009506 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>

	const char* test = buffer.c_str();
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f00c fc90 	bl	80156a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008d88:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
	if((uint8_t)test[0] == 0x86)
 8008d8c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b86      	cmp	r3, #134	; 0x86
 8008d94:	d125      	bne.n	8008de2 <_ZN9CmdParser5parseEv+0x86>
	{
		ParsedCommand cmd;
 8008d96:	f107 0308 	add.w	r3, r7, #8
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff ffbb 	bl	8008d16 <_ZN13ParsedCommandC1Ev>
		cmd.type = CMDtype::dash;
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	2207      	movs	r2, #7
 8008da6:	621a      	str	r2, [r3, #32]
		cmd.cmd = buffer;
 8008da8:	463b      	mov	r3, r7
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	1d1a      	adds	r2, r3, #4
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f00c fbc0 	bl	801553a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		buffer.clear();
 8008dba:	463b      	mov	r3, r7
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f00c fbe7 	bl	8015594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		commands.push_back(cmd);
 8008dc6:	f107 0208 	add.w	r2, r7, #8
 8008dca:	1d3b      	adds	r3, r7, #4
 8008dcc:	4611      	mov	r1, r2
 8008dce:	6818      	ldr	r0, [r3, #0]
 8008dd0:	f000 fbc1 	bl	8009556 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
		return commands;
 8008dd4:	bf00      	nop
		ParsedCommand cmd;
 8008dd6:	f107 0308 	add.w	r3, r7, #8
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff ffb1 	bl	8008d42 <_ZN13ParsedCommandD1Ev>
 8008de0:	e2f6      	b.n	80093d0 <_ZN9CmdParser5parseEv+0x674>
	}

    uint16_t pos = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
    uint16_t lpos = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
	while(pos < buffer.length()-1){
 8008dee:	f8b7 419e 	ldrh.w	r4, [r7, #414]	; 0x19e
 8008df2:	463b      	mov	r3, r7
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f00c fbc9 	bl	8015590 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	3b01      	subs	r3, #1
 8008e02:	429c      	cmp	r4, r3
 8008e04:	bf34      	ite	cc
 8008e06:	2301      	movcc	r3, #1
 8008e08:	2300      	movcs	r3, #0
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d02d      	beq.n	8008e6c <_ZN9CmdParser5parseEv+0x110>
		pos = buffer.find(';',lpos);
 8008e10:	463b      	mov	r3, r7
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3304      	adds	r3, #4
 8008e16:	f8b7 219c 	ldrh.w	r2, [r7, #412]	; 0x19c
 8008e1a:	213b      	movs	r1, #59	; 0x3b
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f00c fc45 	bl	80156ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
		std::string token = buffer.substr(lpos,pos-lpos);
 8008e28:	463b      	mov	r3, r7
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	1d19      	adds	r1, r3, #4
 8008e2e:	f8b7 419c 	ldrh.w	r4, [r7, #412]	; 0x19c
 8008e32:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8008e36:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8008e40:	4622      	mov	r2, r4
 8008e42:	f00c fcc3 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
		lpos = pos+1;
 8008e46:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
		tokens.push_back(token);
 8008e50:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008e54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fba1 	bl	80095a2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
		std::string token = buffer.substr(lpos,pos-lpos);
 8008e60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008e64:	4618      	mov	r0, r3
 8008e66:	f00c fb62 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(pos < buffer.length()-1){
 8008e6a:	e7c0      	b.n	8008dee <_ZN9CmdParser5parseEv+0x92>
	}

	for(std::string word : tokens){
 8008e6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e70:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008e74:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8008e78:	f000 fbb9 	bl	80095ee <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8008e88:	f000 fbc1 	bl	800960e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fbc6 	bl	8009630 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 828b 	beq.w	80093c2 <_ZN9CmdParser5parseEv+0x666>
 8008eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fbe5 	bl	8009680 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f00c fc1e 	bl	8015700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>

		ParsedCommand cmd;
 8008ec4:	f107 0308 	add.w	r3, r7, #8
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff ff24 	bl	8008d16 <_ZN13ParsedCommandC1Ev>

		if(word.back() == '?'){ // <cmd>?
 8008ece:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f00c fb6b 	bl	80155ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b3f      	cmp	r3, #63	; 0x3f
 8008ede:	bf0c      	ite	eq
 8008ee0:	2301      	moveq	r3, #1
 8008ee2:	2300      	movne	r3, #0
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d01f      	beq.n	8008f2a <_ZN9CmdParser5parseEv+0x1ce>
			cmd.type = CMDtype::get;
 8008eea:	f107 0308 	add.w	r3, r7, #8
 8008eee:	2202      	movs	r2, #2
 8008ef0:	621a      	str	r2, [r3, #32]
			cmd.cmd = word.substr(0, word.length()-1);
 8008ef2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f00c fb4a 	bl	8015590 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008efc:	4603      	mov	r3, r0
 8008efe:	3b01      	subs	r3, #1
 8008f00:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8008f04:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f00c fc5f 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8008f0e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008f12:	f107 0308 	add.w	r3, r7, #8
 8008f16:	4611      	mov	r1, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f00c fb14 	bl	8015546 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008f1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f22:	4618      	mov	r0, r3
 8008f24:	f00c fb03 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008f28:	e234      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>

		}else if(word.back() == '!'){
 8008f2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f00c fb3d 	bl	80155ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8008f34:	4603      	mov	r3, r0
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b21      	cmp	r3, #33	; 0x21
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2301      	moveq	r3, #1
 8008f3e:	2300      	movne	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d01f      	beq.n	8008f86 <_ZN9CmdParser5parseEv+0x22a>
			cmd.cmd = word.substr(0, word.length()-1);
 8008f46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f00c fb20 	bl	8015590 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8008f50:	4603      	mov	r3, r0
 8008f52:	3b01      	subs	r3, #1
 8008f54:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8008f58:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f00c fc35 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8008f62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f00c faea 	bl	8015546 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008f72:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008f76:	4618      	mov	r0, r3
 8008f78:	f00c fad9 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			cmd.type = CMDtype::help;
 8008f7c:	f107 0308 	add.w	r3, r7, #8
 8008f80:	2205      	movs	r2, #5
 8008f82:	621a      	str	r2, [r3, #32]
 8008f84:	e206      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>

		}else if(word.back() == '='){
 8008f86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f00c fb0f 	bl	80155ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8008f90:	4603      	mov	r3, r0
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b3d      	cmp	r3, #61	; 0x3d
 8008f96:	bf0c      	ite	eq
 8008f98:	2301      	moveq	r3, #1
 8008f9a:	2300      	movne	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00c      	beq.n	8008fbc <_ZN9CmdParser5parseEv+0x260>
			cmd.cmd = word;
 8008fa2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008fa6:	f107 0308 	add.w	r3, r7, #8
 8008faa:	4611      	mov	r1, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f00c fac4 	bl	801553a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
			cmd.type = CMDtype::err;
 8008fb2:	f107 0308 	add.w	r3, r7, #8
 8008fb6:	2206      	movs	r2, #6
 8008fb8:	621a      	str	r2, [r3, #32]
 8008fba:	e1eb      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>

		}else{ // More complex
			uint32_t peq = word.find('=', 0); // set
 8008fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	213d      	movs	r1, #61	; 0x3d
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f00c fb71 	bl	80156ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008fca:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
			//uint32_t pex = word.find('!', 0); // dual val
			uint32_t pqm = word.find('?', 0); // read with var
 8008fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	213f      	movs	r1, #63	; 0x3f
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f00c fb68 	bl	80156ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8008fdc:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
			if(pqm!=std::string::npos && pqm < peq && peq != std::string::npos){ // <cmd>?<int>=<int>
 8008fe0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe8:	d066      	beq.n	80090b8 <_ZN9CmdParser5parseEv+0x35c>
 8008fea:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8008fee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d260      	bcs.n	80090b8 <_ZN9CmdParser5parseEv+0x35c>
 8008ff6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d05b      	beq.n	80090b8 <_ZN9CmdParser5parseEv+0x35c>
				// Dual
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, peq-pqm));
 8009000:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009004:	1c5c      	adds	r4, r3, #1
 8009006:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800900a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8009014:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009018:	4622      	mov	r2, r4
 800901a:	f00c fbd7 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800901e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009022:	220a      	movs	r2, #10
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff fdca 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800902c:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 8009030:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009034:	4618      	mov	r0, r3
 8009036:	f00c fa7a 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				int32_t val2 = (int32_t)std::stol(word.substr(peq+1, word.npos));
 800903a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8009044:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009048:	f04f 33ff 	mov.w	r3, #4294967295
 800904c:	f00c fbbe 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8009050:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009054:	220a      	movs	r2, #10
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff fdb1 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800905e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8009062:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009066:	4618      	mov	r0, r3
 8009068:	f00c fa61 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.cmd = word.substr(0, pqm);
 800906c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8009070:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009074:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009078:	2200      	movs	r2, #0
 800907a:	f00c fba7 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800907e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f00c fa5c 	bl	8015546 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800908e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009092:	4618      	mov	r0, r3
 8009094:	f00c fa4b 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.type = CMDtype::setat;
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	2201      	movs	r2, #1
 800909e:	621a      	str	r2, [r3, #32]
				cmd.val = val2;
 80090a0:	f107 0308 	add.w	r3, r7, #8
 80090a4:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80090a8:	61da      	str	r2, [r3, #28]
				cmd.adr = val;
 80090aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	831a      	strh	r2, [r3, #24]
 80090b6:	e16d      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>

			}else if(pqm != std::string::npos && (std::isdigit(word[pqm+1]) || (std::isdigit(word[pqm+2]) && (word[pqm+1] == '-' || word[pqm+1] == '+')))){ // <cmd>?<int>
 80090b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c0:	d037      	beq.n	8009132 <_ZN9CmdParser5parseEv+0x3d6>
 80090c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090cc:	4611      	mov	r1, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f00c fa6a 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80090d4:	4603      	mov	r3, r0
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	3b30      	subs	r3, #48	; 0x30
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d927      	bls.n	800912e <_ZN9CmdParser5parseEv+0x3d2>
 80090de:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090e2:	1c9a      	adds	r2, r3, #2
 80090e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090e8:	4611      	mov	r1, r2
 80090ea:	4618      	mov	r0, r3
 80090ec:	f00c fa5c 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80090f0:	4603      	mov	r3, r0
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	3b30      	subs	r3, #48	; 0x30
 80090f6:	2b09      	cmp	r3, #9
 80090f8:	d81b      	bhi.n	8009132 <_ZN9CmdParser5parseEv+0x3d6>
 80090fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f00c fa4e 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800910c:	4603      	mov	r3, r0
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b2d      	cmp	r3, #45	; 0x2d
 8009112:	d00c      	beq.n	800912e <_ZN9CmdParser5parseEv+0x3d2>
 8009114:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f00c fa41 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8009126:	4603      	mov	r3, r0
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b2b      	cmp	r3, #43	; 0x2b
 800912c:	d101      	bne.n	8009132 <_ZN9CmdParser5parseEv+0x3d6>
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <_ZN9CmdParser5parseEv+0x3d8>
 8009132:	2300      	movs	r3, #0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d03e      	beq.n	80091b6 <_ZN9CmdParser5parseEv+0x45a>
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, word.npos));
 8009138:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8009142:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009146:	f04f 33ff 	mov.w	r3, #4294967295
 800914a:	f00c fb3f 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800914e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009152:	220a      	movs	r2, #10
 8009154:	2100      	movs	r1, #0
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fd32 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800915c:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8009160:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009164:	4618      	mov	r0, r3
 8009166:	f00c f9e2 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 800916a:	f107 0308 	add.w	r3, r7, #8
 800916e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8009172:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::getat;
 8009174:	f107 0308 	add.w	r3, r7, #8
 8009178:	2203      	movs	r2, #3
 800917a:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, pqm);
 800917c:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8009180:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009184:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009188:	2200      	movs	r2, #0
 800918a:	f00c fb1f 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800918e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	4611      	mov	r1, r2
 8009198:	4618      	mov	r0, r3
 800919a:	f00c f9d4 	bl	8015546 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800919e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80091a2:	4618      	mov	r0, r3
 80091a4:	f00c f9c3 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.adr = val;
 80091a8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	f107 0308 	add.w	r3, r7, #8
 80091b2:	831a      	strh	r2, [r3, #24]
 80091b4:	e0ee      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>
			}else if(peq != std::string::npos && (std::isdigit(word[peq+1]) || (std::isdigit(word[peq+2]) && (word[peq+1] == '-' || word[peq+1] == '+')))){ // <cmd>=<int>
 80091b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d037      	beq.n	8009230 <_ZN9CmdParser5parseEv+0x4d4>
 80091c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f00c f9eb 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80091d2:	4603      	mov	r3, r0
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	3b30      	subs	r3, #48	; 0x30
 80091d8:	2b09      	cmp	r3, #9
 80091da:	d927      	bls.n	800922c <_ZN9CmdParser5parseEv+0x4d0>
 80091dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091e0:	1c9a      	adds	r2, r3, #2
 80091e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091e6:	4611      	mov	r1, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f00c f9dd 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80091ee:	4603      	mov	r3, r0
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	3b30      	subs	r3, #48	; 0x30
 80091f4:	2b09      	cmp	r3, #9
 80091f6:	d81b      	bhi.n	8009230 <_ZN9CmdParser5parseEv+0x4d4>
 80091f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009202:	4611      	mov	r1, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f00c f9cf 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800920a:	4603      	mov	r3, r0
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b2d      	cmp	r3, #45	; 0x2d
 8009210:	d00c      	beq.n	800922c <_ZN9CmdParser5parseEv+0x4d0>
 8009212:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800921c:	4611      	mov	r1, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f00c f9c2 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8009224:	4603      	mov	r3, r0
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b2b      	cmp	r3, #43	; 0x2b
 800922a:	d101      	bne.n	8009230 <_ZN9CmdParser5parseEv+0x4d4>
 800922c:	2301      	movs	r3, #1
 800922e:	e000      	b.n	8009232 <_ZN9CmdParser5parseEv+0x4d6>
 8009230:	2300      	movs	r3, #0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d038      	beq.n	80092a8 <_ZN9CmdParser5parseEv+0x54c>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
 8009236:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8009240:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009244:	f04f 33ff 	mov.w	r3, #4294967295
 8009248:	f00c fac0 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800924c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009250:	220a      	movs	r2, #10
 8009252:	2100      	movs	r1, #0
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff fcb3 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800925a:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
 800925e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009262:	4618      	mov	r0, r3
 8009264:	f00c f963 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 8009268:	f107 0308 	add.w	r3, r7, #8
 800926c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8009270:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::set;
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	2200      	movs	r2, #0
 8009278:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, peq);
 800927a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800927e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009282:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009286:	2200      	movs	r2, #0
 8009288:	f00c faa0 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800928c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009290:	f107 0308 	add.w	r3, r7, #8
 8009294:	4611      	mov	r1, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f00c f955 	bl	8015546 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800929c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a0:	4618      	mov	r0, r3
 80092a2:	f00c f944 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80092a6:	e075      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>
			}else if(peq != std::string::npos && (word[peq+1] == 'R' || word[peq+1] == 'G' || word[peq+1] == 'B')){ // <cmd>=RGB
 80092a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b0:	d028      	beq.n	8009304 <_ZN9CmdParser5parseEv+0x5a8>
 80092b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092bc:	4611      	mov	r1, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	f00c f972 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80092c4:	4603      	mov	r3, r0
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b52      	cmp	r3, #82	; 0x52
 80092ca:	d019      	beq.n	8009300 <_ZN9CmdParser5parseEv+0x5a4>
 80092cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f00c f965 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80092de:	4603      	mov	r3, r0
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2b47      	cmp	r3, #71	; 0x47
 80092e4:	d00c      	beq.n	8009300 <_ZN9CmdParser5parseEv+0x5a4>
 80092e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80092ea:	1c5a      	adds	r2, r3, #1
 80092ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092f0:	4611      	mov	r1, r2
 80092f2:	4618      	mov	r0, r3
 80092f4:	f00c f958 	bl	80155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80092f8:	4603      	mov	r3, r0
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b42      	cmp	r3, #66	; 0x42
 80092fe:	d101      	bne.n	8009304 <_ZN9CmdParser5parseEv+0x5a8>
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <_ZN9CmdParser5parseEv+0x5aa>
 8009304:	2300      	movs	r3, #0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d038      	beq.n	800937c <_ZN9CmdParser5parseEv+0x620>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
 800930a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8009314:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009318:	f04f 33ff 	mov.w	r3, #4294967295
 800931c:	f00c fa56 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8009320:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009324:	220a      	movs	r2, #10
 8009326:	2100      	movs	r1, #0
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff fc49 	bl	8008bc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800932e:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8009332:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009336:	4618      	mov	r0, r3
 8009338:	f00c f8f9 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 800933c:	f107 0308 	add.w	r3, r7, #8
 8009340:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8009344:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::set;
 8009346:	f107 0308 	add.w	r3, r7, #8
 800934a:	2200      	movs	r2, #0
 800934c:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, peq);
 800934e:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8009352:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009356:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800935a:	2200      	movs	r2, #0
 800935c:	f00c fa36 	bl	80157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8009360:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8009364:	f107 0308 	add.w	r3, r7, #8
 8009368:	4611      	mov	r1, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f00c f8eb 	bl	8015546 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009370:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009374:	4618      	mov	r0, r3
 8009376:	f00c f8da 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800937a:	e00b      	b.n	8009394 <_ZN9CmdParser5parseEv+0x638>
			}else{
				cmd.cmd = word;
 800937c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009380:	f107 0308 	add.w	r3, r7, #8
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f00c f8d7 	bl	801553a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
				cmd.type = CMDtype::get;
 800938c:	f107 0308 	add.w	r3, r7, #8
 8009390:	2202      	movs	r2, #2
 8009392:	621a      	str	r2, [r3, #32]
			}

		}

		commands.push_back(cmd);
 8009394:	f107 0208 	add.w	r2, r7, #8
 8009398:	1d3b      	adds	r3, r7, #4
 800939a:	4611      	mov	r1, r2
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	f000 f8da 	bl	8009556 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
		ParsedCommand cmd;
 80093a2:	f107 0308 	add.w	r3, r7, #8
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff fccb 	bl	8008d42 <_ZN13ParsedCommandD1Ev>
	for(std::string word : tokens){
 80093ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093b0:	4618      	mov	r0, r3
 80093b2:	f00c f8bc 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80093b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 f950 	bl	8009660 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 80093c0:	e568      	b.n	8008e94 <_ZN9CmdParser5parseEv+0x138>
	}
	buffer.clear();
 80093c2:	463b      	mov	r3, r7
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4618      	mov	r0, r3
 80093ca:	f00c f8e3 	bl	8015594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	return commands;
 80093ce:	bf00      	nop
	std::vector<std::string> tokens;
 80093d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f8a3 	bl	8009520 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80093da:	1d3b      	adds	r3, r7, #4
 80093dc:	1d3a      	adds	r2, r7, #4
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	601a      	str	r2, [r3, #0]
}
 80093e2:	1d3b      	adds	r3, r7, #4
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd90      	pop	{r4, r7, pc}

080093ee <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	f00e fbeb 	bl	8017bd0 <__errno>
 80093fa:	4603      	mov	r3, r0
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	f00e fbe5 	bl	8017bd0 <__errno>
 8009406:	4602      	mov	r2, r0
 8009408:	2300      	movs	r3, #0
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4618      	mov	r0, r3
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	f00e fbd7 	bl	8017bd0 <__errno>
 8009422:	4603      	mov	r3, r0
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	bf0c      	ite	eq
 800942a:	2301      	moveq	r3, #1
 800942c:	2300      	movne	r3, #0
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d005      	beq.n	8009440 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8009434:	f00e fbcc 	bl	8017bd0 <__errno>
 8009438:	4602      	mov	r2, r0
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE>:
	int _M_errno;
      } const __save_errno;

      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	7039      	strb	r1, [r7, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	bc80      	pop	{r7}
 800945e:	4770      	bx	lr

08009460 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8009460:	b590      	push	{r4, r7, lr}
 8009462:	b08b      	sub	sp, #44	; 0x2c
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800946e:	f107 0314 	add.w	r3, r7, #20
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff ffbb 	bl	80093ee <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8009478:	f107 0118 	add.w	r1, r7, #24
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
 8009484:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	429a      	cmp	r2, r3
 800948c:	d102      	bne.n	8009494 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 800948e:	68b8      	ldr	r0, [r7, #8]
 8009490:	f00b ff34 	bl	80152fc <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8009494:	f00e fb9c 	bl	8017bd0 <__errno>
 8009498:	4603      	mov	r3, r0
 800949a:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800949c:	2b22      	cmp	r3, #34	; 0x22
 800949e:	d006      	beq.n	80094ae <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 80094a0:	4621      	mov	r1, r4
 80094a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094a4:	f7ff ffd1 	bl	800944a <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 80094ae:	2301      	movs	r3, #1
 80094b0:	e000      	b.n	80094b4 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 80094b2:	2300      	movs	r3, #0
      else if (errno == ERANGE
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 80094b8:	68b8      	ldr	r0, [r7, #8]
 80094ba:	f00b ff25 	bl	8015308 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	623b      	str	r3, [r7, #32]

      if (__idx)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d006      	beq.n	80094d6 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	461a      	mov	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	601a      	str	r2, [r3, #0]

      return __ret;
 80094d6:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff ff9a 	bl	8009416 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 80094e2:	4623      	mov	r3, r4
    }
 80094e4:	4618      	mov	r0, r3
 80094e6:	372c      	adds	r7, #44	; 0x2c
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd90      	pop	{r4, r7, pc}

080094ec <_ZNSt6vectorI13ParsedCommandSaIS0_EEC1Ev>:
      vector()
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 f8cd 	bl	8009696 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EEC1Ev>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      vector()
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4618      	mov	r0, r3
 8009512:	f000 f8f1 	bl	80096f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009520:	b5b0      	push	{r4, r5, r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681c      	ldr	r4, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f90e 	bl	8009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009538:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800953a:	461a      	mov	r2, r3
 800953c:	4629      	mov	r1, r5
 800953e:	4620      	mov	r0, r4
 8009540:	f000 f912 	bl	8009768 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f8e4 	bl	8009714 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bdb0      	pop	{r4, r5, r7, pc}

08009556 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	429a      	cmp	r2, r3
 800956a:	d00d      	beq.n	8009588 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	4619      	mov	r1, r3
 8009576:	f000 f90f 	bl	8009798 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	605a      	str	r2, [r3, #4]
      }
 8009586:	e008      	b.n	800959a <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f918 	bl	80097be <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>
 800958e:	4603      	mov	r3, r0
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f923 	bl	80097e0 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d00d      	beq.n	80095d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4619      	mov	r1, r3
 80095c2:	f000 f9af 	bl	8009924 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f103 0218 	add.w	r2, r3, #24
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	605a      	str	r2, [r3, #4]
      }
 80095d2:	e008      	b.n	80095e6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x44>
	  _M_realloc_insert(end(), __x);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f81a 	bl	800960e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 80095da:	4603      	mov	r3, r0
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f9b3 	bl	800994c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 80095e6:	bf00      	nop
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	f107 030c 	add.w	r3, r7, #12
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fa3c 	bl	8009a7c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	1d1a      	adds	r2, r3, #4
 800961a:	f107 030c 	add.w	r3, r7, #12
 800961e:	4611      	mov	r1, r2
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fa2b 	bl	8009a7c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009630:	b590      	push	{r4, r7, lr}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fa2d 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009640:	4603      	mov	r3, r0
 8009642:	681c      	ldr	r4, [r3, #0]
 8009644:	6838      	ldr	r0, [r7, #0]
 8009646:	f000 fa28 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800964a:	4603      	mov	r3, r0
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	429c      	cmp	r4, r3
 8009650:	bf14      	ite	ne
 8009652:	2301      	movne	r3, #1
 8009654:	2300      	moveq	r3, #0
 8009656:	b2db      	uxtb	r3, r3
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	bd90      	pop	{r4, r7, pc}

08009660 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f103 0218 	add.w	r2, r3, #24
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
	return *this;
 8009674:	687b      	ldr	r3, [r7, #4]
      }
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	bc80      	pop	{r7}
 800967e:	4770      	bx	lr

08009680 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	bc80      	pop	{r7}
 8009694:	4770      	bx	lr

08009696 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EEC1Ev>:
      _Vector_base()
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fa04 	bl	8009aae <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implC1Ev>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	bc80      	pop	{r7}
 80096c2:	4770      	bx	lr

080096c4 <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 fa13 	bl	8009afe <_ZSt8_DestroyIP13ParsedCommandEvT_S2_>
    }
 80096d8:	bf00      	nop
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa2a 	bl	8009b42 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fa08 	bl	8009b18 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6819      	ldr	r1, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8009724:	461a      	mov	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	10db      	asrs	r3, r3, #3
 800972e:	4a08      	ldr	r2, [pc, #32]	; (8009750 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x3c>)
 8009730:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8009734:	461a      	mov	r2, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa0f 	bl	8009b5a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
		      - this->_M_impl._M_start); }
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff ffce 	bl	80096e0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	aaaaaaab 	.word	0xaaaaaaab

08009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	bc80      	pop	{r7}
 8009766:	4770      	bx	lr

08009768 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fa02 	bl	8009b80 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800977c:	bf00      	nop
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4618      	mov	r0, r3
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	bc80      	pop	{r7}
 8009796:	4770      	bx	lr

08009798 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7ff ffed 	bl	8009784 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 80097aa:	4603      	mov	r3, r0
 80097ac:	461a      	mov	r2, r3
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fa0e 	bl	8009bd2 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	1d1a      	adds	r2, r3, #4
 80097ca:	f107 030c 	add.w	r3, r7, #12
 80097ce:	4611      	mov	r1, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fa18 	bl	8009c06 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80097e0:	b5b0      	push	{r4, r5, r7, lr}
 80097e2:	b08a      	sub	sp, #40	; 0x28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80097ec:	4a46      	ldr	r2, [pc, #280]	; (8009908 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x128>)
 80097ee:	2101      	movs	r1, #1
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 fa17 	bl	8009c24 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc>
 80097f6:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 fa5b 	bl	8009cb4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>
 80097fe:	4603      	mov	r3, r0
 8009800:	617b      	str	r3, [r7, #20]
 8009802:	f107 0214 	add.w	r2, r7, #20
 8009806:	f107 0308 	add.w	r3, r7, #8
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f000 fa61 	bl	8009cd4 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8009812:	4603      	mov	r3, r0
 8009814:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fa76 	bl	8009d0c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj>
 8009820:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009826:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009828:	6a3a      	ldr	r2, [r7, #32]
 800982a:	4613      	mov	r3, r2
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	4413      	add	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	189d      	adds	r5, r3, r2
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff ffa3 	bl	8009784 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 800983e:	4603      	mov	r3, r0
 8009840:	461a      	mov	r2, r3
 8009842:	4629      	mov	r1, r5
 8009844:	4620      	mov	r0, r4
 8009846:	f7ff ffa7 	bl	8009798 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 800984a:	2300      	movs	r3, #0
 800984c:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681c      	ldr	r4, [r3, #0]
 8009852:	f107 0308 	add.w	r3, r7, #8
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fa6c 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800985c:	4603      	mov	r3, r0
 800985e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff ff24 	bl	80096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8009868:	4603      	mov	r3, r0
	  __new_finish
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	4629      	mov	r1, r5
 800986e:	4620      	mov	r0, r4
 8009870:	f000 fa6a 	bl	8009d48 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 8009874:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	3324      	adds	r3, #36	; 0x24
 800987a:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800987c:	f107 0308 	add.w	r3, r7, #8
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fa57 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009886:	4603      	mov	r3, r0
 8009888:	681c      	ldr	r4, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4618      	mov	r0, r3
 8009892:	f7ff ff0d 	bl	80096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8009896:	4603      	mov	r3, r0
	  __new_finish
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	4629      	mov	r1, r5
 800989c:	4620      	mov	r0, r4
 800989e:	f000 fa53 	bl	8009d48 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 80098a2:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681c      	ldr	r4, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff fefe 	bl	80096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 80098b4:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80098b6:	461a      	mov	r2, r3
 80098b8:	4629      	mov	r1, r5
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7ff ff02 	bl	80096c4 <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80098ca:	461a      	mov	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	109b      	asrs	r3, r3, #2
 80098d4:	4a0d      	ldr	r2, [pc, #52]	; (800990c <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12c>)
 80098d6:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 80098da:	461a      	mov	r2, r3
 80098dc:	f000 f8fc 	bl	8009ad8 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80098ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ee:	4613      	mov	r3, r2
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	461a      	mov	r2, r3
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	441a      	add	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	609a      	str	r2, [r3, #8]
    }
 8009900:	bf00      	nop
 8009902:	3728      	adds	r7, #40	; 0x28
 8009904:	46bd      	mov	sp, r7
 8009906:	bdb0      	pop	{r4, r5, r7, pc}
 8009908:	08018780 	.word	0x08018780
 800990c:	38e38e39 	.word	0x38e38e39

08009910 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	bc80      	pop	{r7}
 8009922:	4770      	bx	lr

08009924 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff ffed 	bl	8009910 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8009936:	4603      	mov	r3, r0
 8009938:	461a      	mov	r2, r3
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 fa1c 	bl	8009d7a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 8009942:	bf00      	nop
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800994c:	b5b0      	push	{r4, r5, r7, lr}
 800994e:	b08a      	sub	sp, #40	; 0x28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8009958:	4a46      	ldr	r2, [pc, #280]	; (8009a74 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 800995a:	2101      	movs	r1, #1
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fa26 	bl	8009dae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8009962:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f7ff fe42 	bl	80095ee <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800996a:	4603      	mov	r3, r0
 800996c:	617b      	str	r3, [r7, #20]
 800996e:	f107 0214 	add.w	r2, r7, #20
 8009972:	f107 0308 	add.w	r3, r7, #8
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f000 fa61 	bl	8009e40 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800997e:	4603      	mov	r3, r0
 8009980:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fa76 	bl	8009e78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800998c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009992:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009994:	6a3a      	ldr	r2, [r7, #32]
 8009996:	4613      	mov	r3, r2
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	4413      	add	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	189d      	adds	r5, r3, r2
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff ffb3 	bl	8009910 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80099aa:	4603      	mov	r3, r0
 80099ac:	461a      	mov	r2, r3
 80099ae:	4629      	mov	r1, r5
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7ff ffb7 	bl	8009924 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	  __new_finish = pointer();
 80099b6:	2300      	movs	r3, #0
 80099b8:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681c      	ldr	r4, [r3, #0]
 80099be:	f107 0308 	add.w	r3, r7, #8
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f869 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80099c8:	4603      	mov	r3, r0
 80099ca:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff fec0 	bl	8009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80099d4:	4603      	mov	r3, r0
	  __new_finish
 80099d6:	69fa      	ldr	r2, [r7, #28]
 80099d8:	4629      	mov	r1, r5
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fa60 	bl	8009ea0 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80099e0:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	3318      	adds	r3, #24
 80099e6:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 80099e8:	f107 0308 	add.w	r3, r7, #8
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f854 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80099f2:	4603      	mov	r3, r0
 80099f4:	681c      	ldr	r4, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fea9 	bl	8009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009a02:	4603      	mov	r3, r0
	  __new_finish
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	4629      	mov	r1, r5
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 fa49 	bl	8009ea0 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8009a0e:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681c      	ldr	r4, [r3, #0]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff fe9a 	bl	8009754 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009a20:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009a22:	461a      	mov	r2, r3
 8009a24:	4629      	mov	r1, r5
 8009a26:	4620      	mov	r0, r4
 8009a28:	f7ff fe9e 	bl	8009768 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8009a36:	461a      	mov	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	10db      	asrs	r3, r3, #3
 8009a40:	4a0d      	ldr	r2, [pc, #52]	; (8009a78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8009a42:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8009a46:	461a      	mov	r2, r3
 8009a48:	f000 f887 	bl	8009b5a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	4413      	add	r3, r2
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	461a      	mov	r2, r3
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	441a      	add	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	609a      	str	r2, [r3, #8]
    }
 8009a6c:	bf00      	nop
 8009a6e:	3728      	adds	r7, #40	; 0x28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bdb0      	pop	{r4, r5, r7, pc}
 8009a74:	08018780 	.word	0x08018780
 8009a78:	aaaaaaab 	.word	0xaaaaaaab

08009a7c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr

08009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bc80      	pop	{r7}
 8009aac:	4770      	bx	lr

08009aae <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa0b 	bl	8009ed2 <_ZNSaI13ParsedCommandEC1Ev>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	605a      	str	r2, [r3, #4]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	609a      	str	r2, [r3, #8]
	{ }
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
	if (__p)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d005      	beq.n	8009af6 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f9fa 	bl	8009eea <_ZNSt16allocator_traitsISaI13ParsedCommandEE10deallocateERS1_PS0_j>
      }
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <_ZSt8_DestroyIP13ParsedCommandEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa06 	bl	8009f1c <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_>
    }
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fa13 	bl	8009f4c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	605a      	str	r2, [r3, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	609a      	str	r2, [r3, #8]
	{ }
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fa0a 	bl	8009f64 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
	if (__p)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d005      	beq.n	8009b78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	68b9      	ldr	r1, [r7, #8]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fa00 	bl	8009f78 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fa0c 	bl	8009faa <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <_ZN13ParsedCommandC1ERKS_>:
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f00b fda8 	bl	8015700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	8b1a      	ldrh	r2, [r3, #24]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	831a      	strh	r2, [r3, #24]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	69da      	ldr	r2, [r3, #28]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	61da      	str	r2, [r3, #28]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	6a1a      	ldr	r2, [r3, #32]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	621a      	str	r2, [r3, #32]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009bd2:	b590      	push	{r4, r7, lr}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fdd0 	bl	8009784 <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 8009be4:	4604      	mov	r4, r0
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	4619      	mov	r1, r3
 8009bea:	2024      	movs	r0, #36	; 0x24
 8009bec:	f7fe fa68 	bl	80080c0 <_ZnwjPv>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_+0x2c>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff ffce 	bl	8009b9a <_ZN13ParsedCommandC1ERKS_>
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd90      	pop	{r4, r7, pc}

08009c06 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr

08009c24 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 f9d2 	bl	8009fda <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 8009c36:	4604      	mov	r4, r0
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f9df 	bl	8009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	1ae2      	subs	r2, r4, r3
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	bf34      	ite	cc
 8009c48:	2301      	movcc	r3, #1
 8009c4a:	2300      	movcs	r3, #0
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f00b fb54 	bl	8015302 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f9ce 	bl	8009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009c60:	4604      	mov	r4, r0
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 f9ca 	bl	8009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	613b      	str	r3, [r7, #16]
 8009c6c:	f107 0208 	add.w	r2, r7, #8
 8009c70:	f107 0310 	add.w	r3, r7, #16
 8009c74:	4611      	mov	r1, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fe1d 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4423      	add	r3, r4
 8009c82:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 f9b9 	bl	8009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d306      	bcc.n	8009ca0 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x7c>
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 f9a1 	bl	8009fda <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d904      	bls.n	8009caa <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x86>
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 f99a 	bl	8009fda <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	e000      	b.n	8009cac <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x88>
 8009caa:	697b      	ldr	r3, [r7, #20]
      }
 8009cac:	4618      	mov	r0, r3
 8009cae:	371c      	adds	r7, #28
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd90      	pop	{r4, r7, pc}

08009cb4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	f107 030c 	add.w	r3, r7, #12
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff ff9e 	bl	8009c06 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009cd4:	b590      	push	{r4, r7, lr}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f828 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	461c      	mov	r4, r3
 8009cea:	6838      	ldr	r0, [r7, #0]
 8009cec:	f000 f822 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	1ae3      	subs	r3, r4, r3
 8009cf6:	109b      	asrs	r3, r3, #2
 8009cf8:	4a03      	ldr	r2, [pc, #12]	; (8009d08 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x34>)
 8009cfa:	fb02 f303 	mul.w	r3, r2, r3
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd90      	pop	{r4, r7, pc}
 8009d06:	bf00      	nop
 8009d08:	38e38e39 	.word	0x38e38e39

08009d0c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d006      	beq.n	8009d2a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj+0x1e>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 f981 	bl	800a028 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8allocateERS1_j>
 8009d26:	4603      	mov	r3, r0
 8009d28:	e000      	b.n	8009d2c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj+0x20>
 8009d2a:	2300      	movs	r3, #0
      }
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bc80      	pop	{r7}
 8009d46:	4770      	bx	lr

08009d48 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009d48:	b590      	push	{r4, r7, lr}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 f975 	bl	800a046 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	68b8      	ldr	r0, [r7, #8]
 8009d60:	f000 f971 	bl	800a046 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>
 8009d64:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 f97a 	bl	800a064 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP13ParsedCommandES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8009d70:	4603      	mov	r3, r0
    }
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd90      	pop	{r4, r7, pc}

08009d7a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009d7a:	b590      	push	{r4, r7, lr}
 8009d7c:	b085      	sub	sp, #20
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff fdc2 	bl	8009910 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4619      	mov	r1, r3
 8009d92:	2018      	movs	r0, #24
 8009d94:	f7fe f994 	bl	80080c0 <_ZnwjPv>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_+0x2c>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4618      	mov	r0, r3
 8009da2:	f00b fcad 	bl	8015700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009da6:	bf00      	nop
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd90      	pop	{r4, r7, pc}

08009dae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009dae:	b590      	push	{r4, r7, lr}
 8009db0:	b087      	sub	sp, #28
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f963 	bl	800a086 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 f970 	bl	800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	1ae2      	subs	r2, r4, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	bf34      	ite	cc
 8009dd2:	2301      	movcc	r3, #1
 8009dd4:	2300      	movcs	r3, #0
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f00b fa8f 	bl	8015302 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 f95f 	bl	800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009dea:	4604      	mov	r4, r0
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 f95b 	bl	800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009df2:	4603      	mov	r3, r0
 8009df4:	613b      	str	r3, [r7, #16]
 8009df6:	f107 0208 	add.w	r2, r7, #8
 8009dfa:	f107 0310 	add.w	r3, r7, #16
 8009dfe:	4611      	mov	r1, r2
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fd58 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 8009e06:	4603      	mov	r3, r0
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4423      	add	r3, r4
 8009e0c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f000 f94a 	bl	800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009e14:	4602      	mov	r2, r0
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d306      	bcc.n	8009e2a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f932 	bl	800a086 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009e22:	4602      	mov	r2, r0
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d904      	bls.n	8009e34 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 f92b 	bl	800a086 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8009e30:	4603      	mov	r3, r0
 8009e32:	e000      	b.n	8009e36 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 8009e34:	697b      	ldr	r3, [r7, #20]
      }
 8009e36:	4618      	mov	r0, r3
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd90      	pop	{r4, r7, pc}
	...

08009e40 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff fe25 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009e50:	4603      	mov	r3, r0
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	461c      	mov	r4, r3
 8009e56:	6838      	ldr	r0, [r7, #0]
 8009e58:	f7ff fe1f 	bl	8009a9a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	1ae3      	subs	r3, r4, r3
 8009e62:	10db      	asrs	r3, r3, #3
 8009e64:	4a03      	ldr	r2, [pc, #12]	; (8009e74 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 8009e66:	fb02 f303 	mul.w	r3, r2, r3
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd90      	pop	{r4, r7, pc}
 8009e72:	bf00      	nop
 8009e74:	aaaaaaab 	.word	0xaaaaaaab

08009e78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d006      	beq.n	8009e96 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 f921 	bl	800a0d4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8009e92:	4603      	mov	r3, r0
 8009e94:	e000      	b.n	8009e98 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8009e96:	2300      	movs	r3, #0
      }
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009ea0:	b590      	push	{r4, r7, lr}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 f91f 	bl	800a0f2 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	68b8      	ldr	r0, [r7, #8]
 8009eb8:	f000 f91b 	bl	800a0f2 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009ebc:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 f924 	bl	800a110 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 8009ec8:	4603      	mov	r3, r0
    }
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd90      	pop	{r4, r7, pc}

08009ed2 <_ZNSaI13ParsedCommandEC1Ev>:
      allocator() throw() { }
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f929 	bl	800a132 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandEC1Ev>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <_ZNSt16allocator_traitsISaI13ParsedCommandEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 f923 	bl	800a146 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE10deallocateEPS1_j>
 8009f00:	bf00      	nop
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <_ZSt11__addressofI13ParsedCommandEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4618      	mov	r0, r3
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr

08009f1c <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d00a      	beq.n	8009f44 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff ffea 	bl	8009f08 <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 8009f34:	4603      	mov	r3, r0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 f912 	bl	800a160 <_ZSt8_DestroyI13ParsedCommandEvPT_>
	  for (; __first != __last; ++__first)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3324      	adds	r3, #36	; 0x24
 8009f40:	607b      	str	r3, [r7, #4]
 8009f42:	e7f0      	b.n	8009f26 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_+0xa>
	}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f90e 	bl	800a176 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bc80      	pop	{r7}
 8009f76:	4770      	bx	lr

08009f78 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	68b9      	ldr	r1, [r7, #8]
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f8fe 	bl	800a18a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bc80      	pop	{r7}
 8009fa8:	4770      	bx	lr

08009faa <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d00a      	beq.n	8009fd2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff ffea 	bl	8009f96 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 f8ed 	bl	800a1a4 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3318      	adds	r3, #24
 8009fce:	607b      	str	r3, [r7, #4]
 8009fd0:	e7f0      	b.n	8009fb4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f8f4 	bl	800a1d2 <_ZNKSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8009fea:	4603      	mov	r3, r0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 f8e4 	bl	800a1ba <_ZNSt16allocator_traitsISaI13ParsedCommandEE8max_sizeERKS1_>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	461a      	mov	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	109b      	asrs	r3, r3, #2
 800a012:	4a04      	ldr	r2, [pc, #16]	; (800a024 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv+0x28>)
 800a014:	fb02 f303 	mul.w	r3, r2, r3
 800a018:	4618      	mov	r0, r3
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bc80      	pop	{r7}
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	38e38e39 	.word	0x38e38e39

0800a028 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a032:	2200      	movs	r2, #0
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f8d5 	bl	800a1e6 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv>
 800a03c:	4603      	mov	r3, r0
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a04e:	f107 030c 	add.w	r3, r7, #12
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	4618      	mov	r0, r3
 800a056:	f000 f8e7 	bl	800a228 <_ZNSt13move_iteratorIP13ParsedCommandEC1ES1_>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP13ParsedCommandES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 f8e4 	bl	800a244 <_ZSt18uninitialized_copyISt13move_iteratorIP13ParsedCommandES2_ET0_T_S5_S4_>
 800a07c:	4603      	mov	r3, r0
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 f8f5 	bl	800a280 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800a096:	4603      	mov	r3, r0
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 f8e5 	bl	800a268 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	10db      	asrs	r3, r3, #3
 800a0be:	4a04      	ldr	r2, [pc, #16]	; (800a0d0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800a0c0:	fb02 f303 	mul.w	r3, r2, r3
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bc80      	pop	{r7}
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	aaaaaaab 	.word	0xaaaaaaab

0800a0d4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a0de:	2200      	movs	r2, #0
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f8d6 	bl	800a294 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b084      	sub	sp, #16
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a0fa:	f107 030c 	add.w	r3, r7, #12
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4618      	mov	r0, r3
 800a102:	f000 f8e8 	bl	800a2d6 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	68b9      	ldr	r1, [r7, #8]
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f8e5 	bl	800a2f2 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800a128:	4603      	mov	r3, r0
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4618      	mov	r0, r3
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	bc80      	pop	{r7}
 800a144:	4770      	bx	lr

0800a146 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800a152:	68b8      	ldr	r0, [r7, #8]
 800a154:	f00b f8c8 	bl	80152e8 <_ZdlPv>
      }
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <_ZSt8_DestroyI13ParsedCommandEvPT_>:
    _Destroy(_Tp* __pointer)
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7fe fdea 	bl	8008d42 <_ZN13ParsedCommandD1Ev>
 800a16e:	bf00      	nop
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4618      	mov	r0, r3
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr

0800a18a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800a196:	68b8      	ldr	r0, [r7, #8]
 800a198:	f00b f8a6 	bl	80152e8 <_ZdlPv>
      }
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f00b f9be 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <_ZNSt16allocator_traitsISaI13ParsedCommandEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f8a8 	bl	800a318 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <_ZNKSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a1d2:	b480      	push	{r7}
 800a1d4:	b083      	sub	sp, #12
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bc80      	pop	{r7}
 800a1e4:	4770      	bx	lr

0800a1e6 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 f890 	bl	800a318 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	bf8c      	ite	hi
 800a200:	2301      	movhi	r3, #1
 800a202:	2300      	movls	r3, #0
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a20a:	f00b f871 	bl	80152f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	4613      	mov	r3, r2
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4618      	mov	r0, r3
 800a21a:	f00b f84b 	bl	80152b4 <_Znwj>
 800a21e:	4603      	mov	r3, r0
      }
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <_ZNSt13move_iteratorIP13ParsedCommandEC1ES1_>:
      move_iterator(iterator_type __i)
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr

0800a244 <_ZSt18uninitialized_copyISt13move_iteratorIP13ParsedCommandES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a250:	2301      	movs	r3, #1
 800a252:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	68b9      	ldr	r1, [r7, #8]
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 f869 	bl	800a330 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_>
 800a25e:	4603      	mov	r3, r0
    }
 800a260:	4618      	mov	r0, r3
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a) noexcept
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f88d 	bl	800a390 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a276:	4603      	mov	r3, r0
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4618      	mov	r0, r3
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	bc80      	pop	{r7}
 800a292:	4770      	bx	lr

0800a294 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 f875 	bl	800a390 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	bf8c      	ite	hi
 800a2ae:	2301      	movhi	r3, #1
 800a2b0:	2300      	movls	r3, #0
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800a2b8:	f00b f81a 	bl	80152f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	4413      	add	r3, r2
 800a2c4:	00db      	lsls	r3, r3, #3
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f00a fff4 	bl	80152b4 <_Znwj>
 800a2cc:	4603      	mov	r3, r0
      }
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bc80      	pop	{r7}
 800a2f0:	4770      	bx	lr

0800a2f2 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b086      	sub	sp, #24
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	60b9      	str	r1, [r7, #8]
 800a2fc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a2fe:	2301      	movs	r3, #1
 800a300:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	68b9      	ldr	r1, [r7, #8]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 f84e 	bl	800a3a8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800a30c:	4603      	mov	r3, r0
    }
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800a320:	4b02      	ldr	r3, [pc, #8]	; (800a32c <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv+0x14>)
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	bc80      	pop	{r7}
 800a32a:	4770      	bx	lr
 800a32c:	071c71c7 	.word	0x071c71c7

0800a330 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a340:	f107 0208 	add.w	r2, r7, #8
 800a344:	f107 030c 	add.w	r3, r7, #12
 800a348:	4611      	mov	r1, r2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f85b 	bl	800a406 <_ZStneIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d016      	beq.n	800a384 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a356:	6978      	ldr	r0, [r7, #20]
 800a358:	f7ff fdd6 	bl	8009f08 <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 800a35c:	4604      	mov	r4, r0
 800a35e:	f107 030c 	add.w	r3, r7, #12
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f870 	bl	800a448 <_ZNKSt13move_iteratorIP13ParsedCommandEdeEv>
 800a368:	4603      	mov	r3, r0
 800a36a:	4619      	mov	r1, r3
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 f89c 	bl	800a4aa <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a372:	f107 030c 	add.w	r3, r7, #12
 800a376:	4618      	mov	r0, r3
 800a378:	f000 f856 	bl	800a428 <_ZNSt13move_iteratorIP13ParsedCommandEppEv>
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	3324      	adds	r3, #36	; 0x24
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	e7dd      	b.n	800a340 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 800a384:	697b      	ldr	r3, [r7, #20]
	}
 800a386:	4618      	mov	r0, r3
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd90      	pop	{r4, r7, pc}
	...

0800a390 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800a398:	4b02      	ldr	r3, [pc, #8]	; (800a3a4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bc80      	pop	{r7}
 800a3a2:	4770      	bx	lr
 800a3a4:	0aaaaaaa 	.word	0x0aaaaaaa

0800a3a8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800a3b8:	f107 0208 	add.w	r2, r7, #8
 800a3bc:	f107 030c 	add.w	r3, r7, #12
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 f88a 	bl	800a4dc <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d016      	beq.n	800a3fc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800a3ce:	6978      	ldr	r0, [r7, #20]
 800a3d0:	f7ff fde1 	bl	8009f96 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	f107 030c 	add.w	r3, r7, #12
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f89f 	bl	800a51e <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f000 f8af 	bl	800a548 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800a3ea:	f107 030c 	add.w	r3, r7, #12
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 f885 	bl	800a4fe <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	3318      	adds	r3, #24
 800a3f8:	617b      	str	r3, [r7, #20]
 800a3fa:	e7dd      	b.n	800a3b8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800a3fc:	697b      	ldr	r3, [r7, #20]
	}
 800a3fe:	4618      	mov	r0, r3
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	bd90      	pop	{r4, r7, pc}

0800a406 <_ZStneIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f8b1 	bl	800a57a <_ZSteqIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>
 800a418:	4603      	mov	r3, r0
 800a41a:	f083 0301 	eor.w	r3, r3, #1
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	4618      	mov	r0, r3
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <_ZNSt13move_iteratorIP13ParsedCommandEppEv>:
      operator++()
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	601a      	str	r2, [r3, #0]
	return *this;
 800a43c:	687b      	ldr	r3, [r7, #4]
      }
 800a43e:	4618      	mov	r0, r3
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	bc80      	pop	{r7}
 800a446:	4770      	bx	lr

0800a448 <_ZNKSt13move_iteratorIP13ParsedCommandEdeEv>:
      operator*() const
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	bc80      	pop	{r7}
 800a45c:	4770      	bx	lr

0800a45e <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr

0800a472 <_ZN13ParsedCommandC1EOS_>:
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	4611      	mov	r1, r2
 800a482:	4618      	mov	r0, r3
 800a484:	f00b f839 	bl	80154fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	8b1a      	ldrh	r2, [r3, #24]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	831a      	strh	r2, [r3, #24]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	69da      	ldr	r2, [r3, #28]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	61da      	str	r2, [r3, #28]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	6a1a      	ldr	r2, [r3, #32]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	621a      	str	r2, [r3, #32]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800a4aa:	b590      	push	{r4, r7, lr}
 800a4ac:	b083      	sub	sp, #12
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800a4b4:	6838      	ldr	r0, [r7, #0]
 800a4b6:	f7ff ffd2 	bl	800a45e <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	2024      	movs	r0, #36	; 0x24
 800a4c2:	f7fd fdfd 	bl	80080c0 <_ZnwjPv>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_+0x2a>
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff ffcf 	bl	800a472 <_ZN13ParsedCommandC1EOS_>
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd90      	pop	{r4, r7, pc}

0800a4dc <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f85c 	bl	800a5a6 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	f083 0301 	eor.w	r3, r3, #1
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f103 0218 	add.w	r2, r3, #24
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	601a      	str	r2, [r3, #0]
	return *this;
 800a512:	687b      	ldr	r3, [r7, #4]
      }
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	bc80      	pop	{r7}
 800a51c:	4770      	bx	lr

0800a51e <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800a51e:	b480      	push	{r7}
 800a520:	b083      	sub	sp, #12
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	bc80      	pop	{r7}
 800a532:	4770      	bx	lr

0800a534 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	bc80      	pop	{r7}
 800a546:	4770      	bx	lr

0800a548 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800a548:	b590      	push	{r4, r7, lr}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800a552:	6838      	ldr	r0, [r7, #0]
 800a554:	f7ff ffee 	bl	800a534 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a558:	4604      	mov	r4, r0
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4619      	mov	r1, r3
 800a55e:	2018      	movs	r0, #24
 800a560:	f7fd fdae 	bl	80080c0 <_ZnwjPv>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800a56a:	4621      	mov	r1, r4
 800a56c:	4618      	mov	r0, r3
 800a56e:	f00a ffc4 	bl	80154fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	bd90      	pop	{r4, r7, pc}

0800a57a <_ZSteqIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 800a57a:	b590      	push	{r4, r7, lr}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f824 	bl	800a5d2 <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>
 800a58a:	4604      	mov	r4, r0
 800a58c:	6838      	ldr	r0, [r7, #0]
 800a58e:	f000 f820 	bl	800a5d2 <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>
 800a592:	4603      	mov	r3, r0
 800a594:	429c      	cmp	r4, r3
 800a596:	bf0c      	ite	eq
 800a598:	2301      	moveq	r3, #1
 800a59a:	2300      	movne	r3, #0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd90      	pop	{r4, r7, pc}

0800a5a6 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800a5a6:	b590      	push	{r4, r7, lr}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f819 	bl	800a5e8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	6838      	ldr	r0, [r7, #0]
 800a5ba:	f000 f815 	bl	800a5e8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	429c      	cmp	r4, r3
 800a5c2:	bf0c      	ite	eq
 800a5c4:	2301      	moveq	r3, #1
 800a5c6:	2300      	movne	r3, #0
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd90      	pop	{r4, r7, pc}

0800a5d2 <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>:
      base() const
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bc80      	pop	{r7}
 800a5e6:	4770      	bx	lr

0800a5e8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bc80      	pop	{r7}
 800a5fc:	4770      	bx	lr
	...

0800a600 <_ZN14CommandHandlerC1Ev>:

#include "CommandHandler.h"
#include "global_callbacks.h"
//#include "FFBoardMain.h"

CommandHandler::CommandHandler() {
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	4a06      	ldr	r2, [pc, #24]	; (800a624 <_ZN14CommandHandlerC1Ev+0x24>)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	711a      	strb	r2, [r3, #4]
	addCommandHandler();
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f857 	bl	800a6c8 <_ZN14CommandHandler17addCommandHandlerEv>
}
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4618      	mov	r0, r3
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	08018be4 	.word	0x08018be4

0800a628 <_ZN14CommandHandlerD1Ev>:

CommandHandler::~CommandHandler() {
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	4a05      	ldr	r2, [pc, #20]	; (800a648 <_ZN14CommandHandlerD1Ev+0x20>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	601a      	str	r2, [r3, #0]
	// Remove from global list when deleted
	removeCommandHandler();
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f87a 	bl	800a730 <_ZN14CommandHandler20removeCommandHandlerEv>
}
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4618      	mov	r0, r3
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	08018be4 	.word	0x08018be4

0800a64c <_ZN14CommandHandlerD0Ev>:
CommandHandler::~CommandHandler() {
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
}
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff ffe7 	bl	800a628 <_ZN14CommandHandlerD1Ev>
 800a65a:	2108      	movs	r1, #8
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f00a fe27 	bl	80152b0 <_ZdlPvj>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4618      	mov	r0, r3
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <_ZN14CommandHandler11hasCommandsEv>:

bool CommandHandler::hasCommands(){
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	return this->commandsEnabled;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	791b      	ldrb	r3, [r3, #4]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bc80      	pop	{r7}
 800a680:	4770      	bx	lr

0800a682 <_ZN14CommandHandler18setCommandsEnabledEb>:
void CommandHandler::setCommandsEnabled(bool enable){
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
	this->commandsEnabled = enable;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	78fa      	ldrb	r2, [r7, #3]
 800a692:	711a      	strb	r2, [r3, #4]
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	bc80      	pop	{r7}
 800a69c:	4770      	bx	lr

0800a69e <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/*
 * Implement this function
 * MUST return false when no valid command was found or if a help command or similar was parsed
 * When it returns true parsing is normally stopped after this class and not sent to others
 */
bool CommandHandler::command(ParsedCommand* cmd,std::string* reply){
 800a69e:	b480      	push	{r7}
 800a6a0:	b085      	sub	sp, #20
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
	if(!this->commandsEnabled){
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	791b      	ldrb	r3, [r3, #4]
 800a6ae:	f083 0301 	eor.w	r3, r3, #1
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e>
		return false;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e000      	b.n	800a6be <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20>
	}
	return false;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bc80      	pop	{r7}
 800a6c6:	4770      	bx	lr

0800a6c8 <_ZN14CommandHandler17addCommandHandlerEv>:


void CommandHandler::addCommandHandler(){
 800a6c8:	b590      	push	{r4, r7, lr}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	// If already added return
	extern std::vector<CommandHandler*> cmdHandlers;
	for(uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
 800a6d4:	7bfc      	ldrb	r4, [r7, #15]
 800a6d6:	4815      	ldr	r0, [pc, #84]	; (800a72c <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800a6d8:	f000 f872 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	429c      	cmp	r4, r3
 800a6e0:	bf34      	ite	cc
 800a6e2:	2301      	movcc	r3, #1
 800a6e4:	2300      	movcs	r3, #0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d012      	beq.n	800a712 <_ZN14CommandHandler17addCommandHandlerEv+0x4a>
		if(cmdHandlers[i] == this)
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	480e      	ldr	r0, [pc, #56]	; (800a72c <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800a6f2:	f000 f875 	bl	800a7e0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	bf0c      	ite	eq
 800a700:	2301      	moveq	r3, #1
 800a702:	2300      	movne	r3, #0
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10c      	bne.n	800a724 <_ZN14CommandHandler17addCommandHandlerEv+0x5c>
	for(uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
 800a70c:	3301      	adds	r3, #1
 800a70e:	73fb      	strb	r3, [r7, #15]
 800a710:	e7e0      	b.n	800a6d4 <_ZN14CommandHandler17addCommandHandlerEv+0xc>
			return;
	}
	cmdHandlers.push_back(this);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	f107 0308 	add.w	r3, r7, #8
 800a71a:	4619      	mov	r1, r3
 800a71c:	4803      	ldr	r0, [pc, #12]	; (800a72c <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800a71e:	f000 f878 	bl	800a812 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE9push_backEOS1_>
 800a722:	e000      	b.n	800a726 <_ZN14CommandHandler17addCommandHandlerEv+0x5e>
			return;
 800a724:	bf00      	nop
}
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd90      	pop	{r4, r7, pc}
 800a72c:	20000b58 	.word	0x20000b58

0800a730 <_ZN14CommandHandler20removeCommandHandlerEv>:

void CommandHandler::removeCommandHandler(){
 800a730:	b590      	push	{r4, r7, lr}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
	extern std::vector<CommandHandler*> cmdHandlers;
	for (uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a738:	2300      	movs	r3, #0
 800a73a:	75fb      	strb	r3, [r7, #23]
 800a73c:	7dfc      	ldrb	r4, [r7, #23]
 800a73e:	481f      	ldr	r0, [pc, #124]	; (800a7bc <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a740:	f000 f83e 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800a744:	4603      	mov	r3, r0
 800a746:	429c      	cmp	r4, r3
 800a748:	bf34      	ite	cc
 800a74a:	2301      	movcc	r3, #1
 800a74c:	2300      	movcs	r3, #0
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	d02e      	beq.n	800a7b2 <_ZN14CommandHandler20removeCommandHandlerEv+0x82>
		if(cmdHandlers[i] == this){
 800a754:	7dfb      	ldrb	r3, [r7, #23]
 800a756:	4619      	mov	r1, r3
 800a758:	4818      	ldr	r0, [pc, #96]	; (800a7bc <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a75a:	f000 f841 	bl	800a7e0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>
 800a75e:	4603      	mov	r3, r0
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	429a      	cmp	r2, r3
 800a766:	bf0c      	ite	eq
 800a768:	2301      	moveq	r3, #1
 800a76a:	2300      	movne	r3, #0
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d01b      	beq.n	800a7aa <_ZN14CommandHandler20removeCommandHandlerEv+0x7a>
			cmdHandlers.erase(cmdHandlers.begin()+i);
 800a772:	4812      	ldr	r0, [pc, #72]	; (800a7bc <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a774:	f000 f85e 	bl	800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800a778:	4603      	mov	r3, r0
 800a77a:	613b      	str	r3, [r7, #16]
 800a77c:	7dfa      	ldrb	r2, [r7, #23]
 800a77e:	f107 0310 	add.w	r3, r7, #16
 800a782:	4611      	mov	r1, r2
 800a784:	4618      	mov	r0, r3
 800a786:	f000 f865 	bl	800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800a78a:	4603      	mov	r3, r0
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	f107 020c 	add.w	r2, r7, #12
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 f873 	bl	800a884 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800a79e:	68b9      	ldr	r1, [r7, #8]
 800a7a0:	4806      	ldr	r0, [pc, #24]	; (800a7bc <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800a7a2:	f000 f880 	bl	800a8a6 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 800a7a6:	bf00      	nop
		}
	}
}
 800a7a8:	e003      	b.n	800a7b2 <_ZN14CommandHandler20removeCommandHandlerEv+0x82>
	for (uint8_t i = 0; i < cmdHandlers.size(); i++){
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	75fb      	strb	r3, [r7, #23]
 800a7b0:	e7c4      	b.n	800a73c <_ZN14CommandHandler20removeCommandHandlerEv+0xc>
}
 800a7b2:	bf00      	nop
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd90      	pop	{r4, r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000b58 	.word	0x20000b58

0800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	109b      	asrs	r3, r3, #2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bc80      	pop	{r7}
 800a7de:	4770      	bx	lr

0800a7e0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
      }
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bc80      	pop	{r7}
 800a7fc:	4770      	bx	lr

0800a7fe <_ZSt4moveIRP14CommandHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4618      	mov	r0, r3
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bc80      	pop	{r7}
 800a810:	4770      	bx	lr

0800a812 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800a81c:	6838      	ldr	r0, [r7, #0]
 800a81e:	f7ff ffee 	bl	800a7fe <_ZSt4moveIRP14CommandHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a822:	4603      	mov	r3, r0
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f86e 	bl	800a908 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	f107 030c 	add.w	r3, r7, #12
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f000 f88d 	bl	800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	f107 020c 	add.w	r2, r7, #12
 800a86e:	f107 0308 	add.w	r3, r7, #8
 800a872:	4611      	mov	r1, r2
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f875 	bl	800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800a88e:	6838      	ldr	r0, [r7, #0]
 800a890:	f000 f877 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800a894:	4603      	mov	r3, r0
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7ff ffbf 	bl	800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	60bb      	str	r3, [r7, #8]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f86b 	bl	800a996 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE6cbeginEv>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	f107 020c 	add.w	r2, r7, #12
 800a8c8:	463b      	mov	r3, r7
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 f876 	bl	800a9be <_ZN9__gnu_cxxmiIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	f107 0308 	add.w	r3, r7, #8
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7ff ffba 	bl	800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f880 	bl	800a9ea <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4618      	mov	r0, r3
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	bc80      	pop	{r7}
 800a906:	4770      	bx	lr

0800a908 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800a908:	b5b0      	push	{r4, r5, r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685a      	ldr	r2, [r3, #4]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d011      	beq.n	800a942 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a91e:	687c      	ldr	r4, [r7, #4]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685d      	ldr	r5, [r3, #4]
 800a924:	6838      	ldr	r0, [r7, #0]
 800a926:	f7ff ffe5 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800a92a:	4603      	mov	r3, r0
 800a92c:	461a      	mov	r2, r3
 800a92e:	4629      	mov	r1, r5
 800a930:	4620      	mov	r0, r4
 800a932:	f000 f896 	bl	800aa62 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	1d1a      	adds	r2, r3, #4
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	605a      	str	r2, [r3, #4]
      }
 800a940:	e00c      	b.n	800a95c <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f8a0 	bl	800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800a948:	4604      	mov	r4, r0
 800a94a:	6838      	ldr	r0, [r7, #0]
 800a94c:	f7ff ffd2 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800a950:	4603      	mov	r3, r0
 800a952:	461a      	mov	r2, r3
 800a954:	4621      	mov	r1, r4
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f8a8 	bl	800aaac <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bdb0      	pop	{r4, r5, r7, pc}

0800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bc80      	pop	{r7}
 800a980:	4770      	bx	lr

0800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr

0800a996 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	f107 020c 	add.w	r2, r7, #12
 800a9a8:	f107 0308 	add.w	r3, r7, #8
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 f908 	bl	800abc4 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <_ZN9__gnu_cxxmiIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a9be:	b590      	push	{r4, r7, lr}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f90a 	bl	800abe2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	461c      	mov	r4, r3
 800a9d4:	6838      	ldr	r0, [r7, #0]
 800a9d6:	f000 f904 	bl	800abe2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	1ae3      	subs	r3, r4, r3
 800a9e0:	109b      	asrs	r3, r3, #2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd90      	pop	{r4, r7, pc}

0800a9ea <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 800a9ea:	b590      	push	{r4, r7, lr}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff ff2b 	bl	800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	60bb      	str	r3, [r7, #8]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f840 	bl	800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	f107 020c 	add.w	r2, r7, #12
 800aa10:	f107 0308 	add.w	r3, r7, #8
 800aa14:	4611      	mov	r1, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 f8ed 	bl	800abf6 <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00e      	beq.n	800aa40 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800aa22:	463b      	mov	r3, r7
 800aa24:	2101      	movs	r1, #1
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7ff ff14 	bl	800a854 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f82a 	bl	800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800aa34:	4603      	mov	r3, r0
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 f8f3 	bl	800ac26 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	1f1a      	subs	r2, r3, #4
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4619      	mov	r1, r3
 800aa52:	4610      	mov	r0, r2
 800aa54:	f000 f8ff 	bl	800ac56 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800aa58:	683b      	ldr	r3, [r7, #0]
    }
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd90      	pop	{r4, r7, pc}

0800aa62 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff ff40 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa74:	4603      	mov	r3, r0
 800aa76:	461a      	mov	r2, r3
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 f8f8 	bl	800ac70 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	1d1a      	adds	r2, r3, #4
 800aa94:	f107 030c 	add.w	r3, r7, #12
 800aa98:	4611      	mov	r1, r2
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff ff62 	bl	800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800aaac:	b5b0      	push	{r4, r5, r7, lr}
 800aaae:	b08a      	sub	sp, #40	; 0x28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800aab8:	4a41      	ldr	r2, [pc, #260]	; (800abc0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 800aaba:	2101      	movs	r1, #1
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 f8ef 	bl	800aca0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc>
 800aac2:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f7ff feb5 	bl	800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800aaca:	4603      	mov	r3, r0
 800aacc:	617b      	str	r3, [r7, #20]
 800aace:	f107 0214 	add.w	r2, r7, #20
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	4611      	mov	r1, r2
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 f929 	bl	800ad30 <_ZN9__gnu_cxxmiIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800aade:	4603      	mov	r3, r0
 800aae0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 f938 	bl	800ad5c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj>
 800aaec:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800aaf2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	18d5      	adds	r5, r2, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff fef9 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800ab02:	4603      	mov	r3, r0
 800ab04:	461a      	mov	r2, r3
 800ab06:	4629      	mov	r1, r5
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f7ff ffaa 	bl	800aa62 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800ab0e:	2300      	movs	r3, #0
 800ab10:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681c      	ldr	r4, [r3, #0]
 800ab16:	f107 0308 	add.w	r3, r7, #8
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff ff31 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ab20:	4603      	mov	r3, r0
 800ab22:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 f92c 	bl	800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ab2c:	4603      	mov	r3, r0
	  __new_finish
 800ab2e:	69fa      	ldr	r2, [r7, #28]
 800ab30:	4629      	mov	r1, r5
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 f930 	bl	800ad98 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800ab38:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800ab40:	f107 0308 	add.w	r3, r7, #8
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff ff1c 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	681c      	ldr	r4, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 f915 	bl	800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ab5a:	4603      	mov	r3, r0
	  __new_finish
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	4629      	mov	r1, r5
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 f919 	bl	800ad98 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800ab66:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681c      	ldr	r4, [r3, #0]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 f906 	bl	800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ab78:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 f923 	bl	800adca <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800ab8e:	461a      	mov	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800ab98:	461a      	mov	r2, r3
 800ab9a:	f000 f924 	bl	800ade6 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	69fa      	ldr	r2, [r7, #28]
 800abb0:	441a      	add	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	609a      	str	r2, [r3, #8]
    }
 800abb6:	bf00      	nop
 800abb8:	3728      	adds	r7, #40	; 0x28
 800abba:	46bd      	mov	sp, r7
 800abbc:	bdb0      	pop	{r4, r5, r7, pc}
 800abbe:	bf00      	nop
 800abc0:	0801879c 	.word	0x0801879c

0800abc4 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	bc80      	pop	{r7}
 800abe0:	4770      	bx	lr

0800abe2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800abe2:	b480      	push	{r7}
 800abe4:	b083      	sub	sp, #12
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4618      	mov	r0, r3
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bc80      	pop	{r7}
 800abf4:	4770      	bx	lr

0800abf6 <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800abf6:	b590      	push	{r4, r7, lr}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff febe 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ac06:	4603      	mov	r3, r0
 800ac08:	681c      	ldr	r4, [r3, #0]
 800ac0a:	6838      	ldr	r0, [r7, #0]
 800ac0c:	f7ff feb9 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ac10:	4603      	mov	r3, r0
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	429c      	cmp	r4, r3
 800ac16:	bf14      	ite	ne
 800ac18:	2301      	movne	r3, #1
 800ac1a:	2300      	moveq	r3, #0
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	4618      	mov	r0, r3
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd90      	pop	{r4, r7, pc}

0800ac26 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 800ac26:	b590      	push	{r4, r7, lr}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f8ea 	bl	800ae0c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800ac38:	4604      	mov	r4, r0
 800ac3a:	68b8      	ldr	r0, [r7, #8]
 800ac3c:	f000 f8e6 	bl	800ae0c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800ac40:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	4619      	mov	r1, r3
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f8ea 	bl	800ae20 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800ac4c:	4603      	mov	r3, r0
    }
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd90      	pop	{r4, r7, pc}

0800ac56 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f902 	bl	800ae6c <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE7destroyIS2_EEvPT_>
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ac70:	b590      	push	{r4, r7, lr}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7ff fe39 	bl	800a8f4 <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800ac82:	4603      	mov	r3, r0
 800ac84:	681c      	ldr	r4, [r3, #0]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	2004      	movs	r0, #4
 800ac8c:	f7fd fa18 	bl	80080c0 <_ZnwjPv>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d000      	beq.n	800ac98 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 800ac96:	601c      	str	r4, [r3, #0]
 800ac98:	bf00      	nop
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd90      	pop	{r4, r7, pc}

0800aca0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800aca0:	b590      	push	{r4, r7, lr}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f000 f8e7 	bl	800ae80 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800acb2:	4604      	mov	r4, r0
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f7ff fd83 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800acba:	4603      	mov	r3, r0
 800acbc:	1ae2      	subs	r2, r4, r3
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	bf34      	ite	cc
 800acc4:	2301      	movcc	r3, #1
 800acc6:	2300      	movcs	r3, #0
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f00a fb16 	bl	8015302 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f7ff fd72 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800acdc:	4604      	mov	r4, r0
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f7ff fd6e 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800ace4:	4603      	mov	r3, r0
 800ace6:	613b      	str	r3, [r7, #16]
 800ace8:	f107 0208 	add.w	r2, r7, #8
 800acec:	f107 0310 	add.w	r3, r7, #16
 800acf0:	4611      	mov	r1, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fd fddf 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 800acf8:	4603      	mov	r3, r0
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4423      	add	r3, r4
 800acfe:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7ff fd5d 	bl	800a7c0 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800ad06:	4602      	mov	r2, r0
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d306      	bcc.n	800ad1c <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f000 f8b6 	bl	800ae80 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800ad14:	4602      	mov	r2, r0
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d904      	bls.n	800ad26 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 f8af 	bl	800ae80 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800ad22:	4603      	mov	r3, r0
 800ad24:	e000      	b.n	800ad28 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 800ad26:	697b      	ldr	r3, [r7, #20]
      }
 800ad28:	4618      	mov	r0, r3
 800ad2a:	371c      	adds	r7, #28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd90      	pop	{r4, r7, pc}

0800ad30 <_ZN9__gnu_cxxmiIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ad30:	b590      	push	{r4, r7, lr}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff fe21 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ad40:	4603      	mov	r3, r0
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	461c      	mov	r4, r3
 800ad46:	6838      	ldr	r0, [r7, #0]
 800ad48:	f7ff fe1b 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	1ae3      	subs	r3, r4, r3
 800ad52:	109b      	asrs	r3, r3, #2
 800ad54:	4618      	mov	r0, r3
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd90      	pop	{r4, r7, pc}

0800ad5c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d006      	beq.n	800ad7a <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj+0x1e>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 f896 	bl	800aea2 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8allocateERS2_j>
 800ad76:	4603      	mov	r3, r0
 800ad78:	e000      	b.n	800ad7c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj+0x20>
 800ad7a:	2300      	movs	r3, #0
      }
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bc80      	pop	{r7}
 800ad96:	4770      	bx	lr

0800ad98 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800ad98:	b590      	push	{r4, r7, lr}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f88a 	bl	800aec0 <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>
 800adac:	4604      	mov	r4, r0
 800adae:	68b8      	ldr	r0, [r7, #8]
 800adb0:	f000 f886 	bl	800aec0 <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>
 800adb4:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 f88f 	bl	800aede <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14CommandHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800adc0:	4603      	mov	r3, r0
    }
 800adc2:	4618      	mov	r0, r3
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd90      	pop	{r4, r7, pc}

0800adca <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	60f8      	str	r0, [r7, #12]
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f891 	bl	800af00 <_ZSt8_DestroyIPP14CommandHandlerEvT_S3_>
    }
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	607a      	str	r2, [r7, #4]
	if (__p)
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	68b9      	ldr	r1, [r7, #8]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f88b 	bl	800af1a <_ZNSt16allocator_traitsISaIP14CommandHandlerEE10deallocateERS2_PS1_j>
      }
 800ae04:	bf00      	nop
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4618      	mov	r0, r3
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bc80      	pop	{r7}
 800ae1e:	4770      	bx	lr

0800ae20 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ae20:	b5b0      	push	{r4, r5, r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f000 f883 	bl	800af38 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800ae32:	4604      	mov	r4, r0
 800ae34:	68b8      	ldr	r0, [r7, #8]
 800ae36:	f000 f87f 	bl	800af38 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f87b 	bl	800af38 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800ae42:	4603      	mov	r3, r0
 800ae44:	461a      	mov	r2, r3
 800ae46:	4629      	mov	r1, r5
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 f883 	bl	800af54 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800ae52:	f107 0214 	add.w	r2, r7, #20
 800ae56:	f107 0310 	add.w	r3, r7, #16
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7ff fd81 	bl	800a964 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ae62:	693b      	ldr	r3, [r7, #16]
    }
 800ae64:	4618      	mov	r0, r3
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae6c <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	bf00      	nop
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bc80      	pop	{r7}
 800ae7e:	4770      	bx	lr

0800ae80 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f880 	bl	800af90 <_ZNKSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800ae90:	4603      	mov	r3, r0
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 f870 	bl	800af78 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8max_sizeERKS2_>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800aeac:	2200      	movs	r2, #0
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f877 	bl	800afa4 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800aec8:	f107 030c 	add.w	r3, r7, #12
 800aecc:	6879      	ldr	r1, [r7, #4]
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 f886 	bl	800afe0 <_ZNSt13move_iteratorIPP14CommandHandlerEC1ES2_>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14CommandHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	60f8      	str	r0, [r7, #12]
 800aee6:	60b9      	str	r1, [r7, #8]
 800aee8:	607a      	str	r2, [r7, #4]
 800aeea:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	68b9      	ldr	r1, [r7, #8]
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 f883 	bl	800affc <_ZSt18uninitialized_copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>
 800aef6:	4603      	mov	r3, r0
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <_ZSt8_DestroyIPP14CommandHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f887 	bl	800b020 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14CommandHandlerEEvT_S5_>
    }
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <_ZNSt16allocator_traitsISaIP14CommandHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 f882 	bl	800b034 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE10deallocateEPS2_j>
 800af30:	bf00      	nop
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800af40:	1d3b      	adds	r3, r7, #4
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff fd1d 	bl	800a982 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800af48:	4603      	mov	r3, r0
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800af60:	2301      	movs	r3, #1
 800af62:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 f870 	bl	800b04e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_>
 800af6e:	4603      	mov	r3, r0
    }
 800af70:	4618      	mov	r0, r3
 800af72:	3718      	adds	r7, #24
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f881 	bl	800b088 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>
 800af86:	4603      	mov	r3, r0
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <_ZNKSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4618      	mov	r0, r3
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr

0800afa4 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f000 f869 	bl	800b088 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>
 800afb6:	4602      	mov	r2, r0
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	4293      	cmp	r3, r2
 800afbc:	bf8c      	ite	hi
 800afbe:	2301      	movhi	r3, #1
 800afc0:	2300      	movls	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800afc8:	f00a f992 	bl	80152f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f00a f96f 	bl	80152b4 <_Znwj>
 800afd6:	4603      	mov	r3, r0
      }
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <_ZNSt13move_iteratorIPP14CommandHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bc80      	pop	{r7}
 800affa:	4770      	bx	lr

0800affc <_ZSt18uninitialized_copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b008:	2301      	movs	r3, #1
 800b00a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 f844 	bl	800b09e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14CommandHandlerES5_EET0_T_S8_S7_>
 800b016:	4603      	mov	r3, r0
    }
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14CommandHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
 800b02a:	bf00      	nop
 800b02c:	370c      	adds	r7, #12
 800b02e:	46bd      	mov	sp, r7
 800b030:	bc80      	pop	{r7}
 800b032:	4770      	bx	lr

0800b034 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b040:	68b8      	ldr	r0, [r7, #8]
 800b042:	f00a f951 	bl	80152e8 <_ZdlPv>
      }
 800b046:	bf00      	nop
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b04e:	b580      	push	{r7, lr}
 800b050:	b086      	sub	sp, #24
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	109b      	asrs	r3, r3, #2
 800b062:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d006      	beq.n	800b078 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	461a      	mov	r2, r3
 800b070:	68f9      	ldr	r1, [r7, #12]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f00c fe0e 	bl	8017c94 <memmove>
	  return __result + _Num;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	4413      	add	r3, r2
	}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800b090:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b094:	4618      	mov	r0, r3
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	bc80      	pop	{r7}
 800b09c:	4770      	bx	lr

0800b09e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14CommandHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	60f8      	str	r0, [r7, #12]
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f000 f805 	bl	800b0be <_ZSt4copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <_ZSt4copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800b0be:	b590      	push	{r4, r7, lr}
 800b0c0:	b085      	sub	sp, #20
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	60f8      	str	r0, [r7, #12]
 800b0c6:	60b9      	str	r1, [r7, #8]
 800b0c8:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 f80f 	bl	800b0ee <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	68b8      	ldr	r0, [r7, #8]
 800b0d4:	f000 f80b 	bl	800b0ee <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800b0d8:	4603      	mov	r3, r0
	       __result));
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f000 f816 	bl	800b110 <_ZSt14__copy_move_a2ILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800b0e4:	4603      	mov	r3, r0
    }
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd90      	pop	{r4, r7, pc}

0800b0ee <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b082      	sub	sp, #8
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800b0f6:	1d3b      	adds	r3, r7, #4
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 f825 	bl	800b148 <_ZNKSt13move_iteratorIPP14CommandHandlerE4baseEv>
 800b0fe:	4603      	mov	r3, r0
 800b100:	4618      	mov	r0, r3
 800b102:	f000 f82c 	bl	800b15e <_ZSt12__miter_baseIPP14CommandHandlerET_S3_>
 800b106:	4603      	mov	r3, r0
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <_ZSt14__copy_move_a2ILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800b110:	b5b0      	push	{r4, r5, r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 f828 	bl	800b172 <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800b122:	4604      	mov	r4, r0
 800b124:	68b8      	ldr	r0, [r7, #8]
 800b126:	f000 f824 	bl	800b172 <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800b12a:	4605      	mov	r5, r0
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f820 	bl	800b172 <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800b132:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800b134:	461a      	mov	r2, r3
 800b136:	4629      	mov	r1, r5
 800b138:	4620      	mov	r0, r4
 800b13a:	f7ff ff0b 	bl	800af54 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800b13e:	4603      	mov	r3, r0
    }
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bdb0      	pop	{r4, r5, r7, pc}

0800b148 <_ZNKSt13move_iteratorIPP14CommandHandlerE4baseEv>:
      base() const
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc80      	pop	{r7}
 800b15c:	4770      	bx	lr

0800b15e <_ZSt12__miter_baseIPP14CommandHandlerET_S3_>:
    __miter_base(_Iterator __it)
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4618      	mov	r0, r3
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bc80      	pop	{r7}
 800b170:	4770      	bx	lr

0800b172 <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>:
    __niter_base(_Iterator __it)
 800b172:	b480      	push	{r7}
 800b174:	b083      	sub	sp, #12
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4618      	mov	r0, r3
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	bc80      	pop	{r7}
 800b184:	4770      	bx	lr
	...

0800b188 <_ZN12EncoderLocalC1Ev>:
 *      Author: Yannick
 */

#include "EncoderLocal.h"

EncoderLocal::EncoderLocal() {
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f910 	bl	800b3b8 <_ZN11ExtiHandlerC1Ev>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3304      	adds	r3, #4
 800b19c:	4618      	mov	r0, r3
 800b19e:	f006 f915 	bl	80113cc <_ZN12TimerHandlerC1Ev>
 800b1a2:	4a13      	ldr	r2, [pc, #76]	; (800b1f0 <_ZN12EncoderLocalC1Ev+0x68>)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]
 800b1a8:	4a12      	ldr	r2, [pc, #72]	; (800b1f4 <_ZN12EncoderLocalC1Ev+0x6c>)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	605a      	str	r2, [r3, #4]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1b4:	609a      	str	r2, [r3, #8]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	this->htim = &TIM_ENC;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a0d      	ldr	r2, [pc, #52]	; (800b1f8 <_ZN12EncoderLocalC1Ev+0x70>)
 800b1c2:	649a      	str	r2, [r3, #72]	; 0x48
	setPos(0);
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f867 	bl	800b29a <_ZN12EncoderLocal6setPosEl>

	this->htim->Instance->CR1 = 1;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fa fd25 	bl	8005c2a <HAL_TIM_Base_Start_IT>
	offset = 0;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	60da      	str	r2, [r3, #12]

}
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	08018c08 	.word	0x08018c08
 800b1f4:	08018c20 	.word	0x08018c20
 800b1f8:	20001554 	.word	0x20001554

0800b1fc <_ZN12EncoderLocalD1Ev>:

EncoderLocal::~EncoderLocal() {
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	4a0c      	ldr	r2, [pc, #48]	; (800b238 <_ZN12EncoderLocalD1Ev+0x3c>)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	4a0c      	ldr	r2, [pc, #48]	; (800b23c <_ZN12EncoderLocalD1Ev+0x40>)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	605a      	str	r2, [r3, #4]
	this->htim->Instance->CR1 = 0;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
EncoderLocal::~EncoderLocal() {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3304      	adds	r3, #4
 800b21e:	4618      	mov	r0, r3
 800b220:	f006 f8ec 	bl	80113fc <_ZN12TimerHandlerD1Ev>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f8de 	bl	800b3e8 <_ZN11ExtiHandlerD1Ev>
}
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	08018c08 	.word	0x08018c08
 800b23c:	08018c20 	.word	0x08018c20

0800b240 <_ZThn4_N12EncoderLocalD1Ev>:

class EncoderLocal: public ExtiHandler, TimerHandler {
public:

	EncoderLocal();
	virtual ~EncoderLocal();
 800b240:	f1a0 0004 	sub.w	r0, r0, #4
 800b244:	f7ff bfda 	b.w	800b1fc <_ZN12EncoderLocalD1Ev>

0800b248 <_ZN12EncoderLocalD0Ev>:
EncoderLocal::~EncoderLocal() {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
}
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff ffd3 	bl	800b1fc <_ZN12EncoderLocalD1Ev>
 800b256:	2150      	movs	r1, #80	; 0x50
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f00a f829 	bl	80152b0 <_ZdlPvj>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <_ZThn4_N12EncoderLocalD0Ev>:
 800b268:	f1a0 0004 	sub.w	r0, r0, #4
 800b26c:	f7ff bfec 	b.w	800b248 <_ZN12EncoderLocalD0Ev>

0800b270 <_ZN12EncoderLocal6getPosEv>:


int32_t EncoderLocal::getPos(){
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
	int32_t timpos = htim->Instance->CNT - 0x7fff;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800b284:	3b7f      	subs	r3, #127	; 0x7f
 800b286:	60fb      	str	r3, [r7, #12]
	return timpos + offset;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4413      	add	r3, r2
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	bc80      	pop	{r7}
 800b298:	4770      	bx	lr

0800b29a <_ZN12EncoderLocal6setPosEl>:
void EncoderLocal::setPos(int32_t pos){
 800b29a:	b480      	push	{r7}
 800b29c:	b083      	sub	sp, #12
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
	this->currentPosition = pos;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	61da      	str	r2, [r3, #28]
	htim->Instance->CNT = pos+0x7fff;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800b2b0:	337f      	adds	r3, #127	; 0x7f
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b2b6:	6812      	ldr	r2, [r2, #0]
 800b2b8:	6253      	str	r3, [r2, #36]	; 0x24
}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bc80      	pop	{r7}
 800b2c2:	4770      	bx	lr

0800b2c4 <_ZN12EncoderLocal4extiEt>:

void EncoderLocal::setPeriod(uint32_t period){
	this->htim->Instance->ARR = period-1;
}

void EncoderLocal::exti(uint16_t GPIO_Pin){
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	807b      	strh	r3, [r7, #2]
	if(GPIO_Pin == ENCODER_Z_Pin){
		// Encoder Z pin activated
	}
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bc80      	pop	{r7}
 800b2d8:	4770      	bx	lr

0800b2da <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:

void EncoderLocal::timerElapsed(TIM_HandleTypeDef* htim){
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b082      	sub	sp, #8
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	6039      	str	r1, [r7, #0]
	if(htim == this->htim){
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d102      	bne.n	800b2f4 <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef+0x1a>
		overflowCallback();
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f808 	bl	800b304 <_ZN12EncoderLocal16overflowCallbackEv>
	}
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <_ZThn4_N12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:
	uint32_t getPosCpr();
	void setPos(int32_t pos);
	void setPeriod(uint32_t period);
	void overflowCallback();
	void exti(uint16_t GPIO_Pin);
	void timerElapsed(TIM_HandleTypeDef* htim);
 800b2fc:	f1a0 0004 	sub.w	r0, r0, #4
 800b300:	f7ff bfeb 	b.w	800b2da <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>

0800b304 <_ZN12EncoderLocal16overflowCallbackEv>:

void EncoderLocal::overflowCallback(){
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
	if(first)					//TODO: figure it out
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b312:	2b00      	cmp	r3, #0
 800b314:	d004      	beq.n	800b320 <_ZN12EncoderLocal16overflowCallbackEv+0x1c>
	{
		first = false;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		return;
 800b31e:	e024      	b.n	800b36a <_ZN12EncoderLocal16overflowCallbackEv+0x66>
	}
	if(htim->Instance->CNT > this->htim->Instance->ARR/2){
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	085b      	lsrs	r3, r3, #1
 800b332:	429a      	cmp	r2, r3
 800b334:	bf8c      	ite	hi
 800b336:	2301      	movhi	r3, #1
 800b338:	2300      	movls	r3, #0
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00a      	beq.n	800b356 <_ZN12EncoderLocal16overflowCallbackEv+0x52>
		offset -= htim->Instance->ARR+1;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b348:	3301      	adds	r3, #1
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	68d2      	ldr	r2, [r2, #12]
 800b34e:	1ad2      	subs	r2, r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60da      	str	r2, [r3, #12]
 800b354:	e009      	b.n	800b36a <_ZN12EncoderLocal16overflowCallbackEv+0x66>
	}else{
		offset += htim->Instance->ARR+1;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	441a      	add	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60da      	str	r2, [r3, #12]
	}
}
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc80      	pop	{r7}
 800b370:	4770      	bx	lr

0800b372 <_ZN12EncoderLocal6getPprEv>:

uint32_t EncoderLocal::getPpr(){
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
	return this->ppr;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	689b      	ldr	r3, [r3, #8]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	bc80      	pop	{r7}
 800b386:	4770      	bx	lr

0800b388 <_ZN12EncoderLocal9getPosCprEv>:

uint32_t EncoderLocal::getPosCpr(){
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	return this->ppr;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	689b      	ldr	r3, [r3, #8]
}
 800b394:	4618      	mov	r0, r3
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	bc80      	pop	{r7}
 800b39c:	4770      	bx	lr

0800b39e <_ZN12EncoderLocal6setPprEm>:

void EncoderLocal::setPpr(uint32_t ppr){
 800b39e:	b480      	push	{r7}
 800b3a0:	b083      	sub	sp, #12
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	6039      	str	r1, [r7, #0]
	this->ppr = ppr;
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	609a      	str	r2, [r3, #8]
}
 800b3ae:	bf00      	nop
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bc80      	pop	{r7}
 800b3b6:	4770      	bx	lr

0800b3b8 <_ZN11ExtiHandlerC1Ev>:

#include "ExtiHandler.h"
#include "global_callbacks.h"
#include "vector"

ExtiHandler::ExtiHandler() {
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	4a07      	ldr	r2, [pc, #28]	; (800b3e0 <_ZN11ExtiHandlerC1Ev+0x28>)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	601a      	str	r2, [r3, #0]
	extern std::vector<ExtiHandler*> extiHandlers;
	extiHandlers.push_back(this);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	60fb      	str	r3, [r7, #12]
 800b3ca:	f107 030c 	add.w	r3, r7, #12
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4804      	ldr	r0, [pc, #16]	; (800b3e4 <_ZN11ExtiHandlerC1Ev+0x2c>)
 800b3d2:	f000 f87a 	bl	800b4ca <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE9push_backEOS1_>
}
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	08018c34 	.word	0x08018c34
 800b3e4:	20000b78 	.word	0x20000b78

0800b3e8 <_ZN11ExtiHandlerD1Ev>:

ExtiHandler::~ExtiHandler() {
 800b3e8:	b590      	push	{r4, r7, lr}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	4a21      	ldr	r2, [pc, #132]	; (800b478 <_ZN11ExtiHandlerD1Ev+0x90>)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	601a      	str	r2, [r3, #0]
	extern std::vector<ExtiHandler*> extiHandlers;
	for (uint8_t i = 0; i < extiHandlers.size(); i++){
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	75fb      	strb	r3, [r7, #23]
 800b3fa:	7dfc      	ldrb	r4, [r7, #23]
 800b3fc:	481f      	ldr	r0, [pc, #124]	; (800b47c <_ZN11ExtiHandlerD1Ev+0x94>)
 800b3fe:	f000 f875 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b402:	4603      	mov	r3, r0
 800b404:	429c      	cmp	r4, r3
 800b406:	bf34      	ite	cc
 800b408:	2301      	movcc	r3, #1
 800b40a:	2300      	movcs	r3, #0
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d02d      	beq.n	800b46e <_ZN11ExtiHandlerD1Ev+0x86>
		if(extiHandlers[i] == this){
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	4619      	mov	r1, r3
 800b416:	4819      	ldr	r0, [pc, #100]	; (800b47c <_ZN11ExtiHandlerD1Ev+0x94>)
 800b418:	f000 f878 	bl	800b50c <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEixEj>
 800b41c:	4603      	mov	r3, r0
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	429a      	cmp	r2, r3
 800b424:	bf0c      	ite	eq
 800b426:	2301      	moveq	r3, #1
 800b428:	2300      	movne	r3, #0
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01a      	beq.n	800b466 <_ZN11ExtiHandlerD1Ev+0x7e>
			extiHandlers.erase(extiHandlers.begin()+i);
 800b430:	4812      	ldr	r0, [pc, #72]	; (800b47c <_ZN11ExtiHandlerD1Ev+0x94>)
 800b432:	f000 f87a 	bl	800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800b436:	4603      	mov	r3, r0
 800b438:	613b      	str	r3, [r7, #16]
 800b43a:	7dfa      	ldrb	r2, [r7, #23]
 800b43c:	f107 0310 	add.w	r3, r7, #16
 800b440:	4611      	mov	r1, r2
 800b442:	4618      	mov	r0, r3
 800b444:	f000 f881 	bl	800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b448:	4603      	mov	r3, r0
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	f107 020c 	add.w	r2, r7, #12
 800b450:	f107 0308 	add.w	r3, r7, #8
 800b454:	4611      	mov	r1, r2
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f88f 	bl	800b57a <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800b45c:	68b9      	ldr	r1, [r7, #8]
 800b45e:	4807      	ldr	r0, [pc, #28]	; (800b47c <_ZN11ExtiHandlerD1Ev+0x94>)
 800b460:	f000 f89c 	bl	800b59c <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 800b464:	e003      	b.n	800b46e <_ZN11ExtiHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < extiHandlers.size(); i++){
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	3301      	adds	r3, #1
 800b46a:	75fb      	strb	r3, [r7, #23]
 800b46c:	e7c5      	b.n	800b3fa <_ZN11ExtiHandlerD1Ev+0x12>
		}
	}
}
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4618      	mov	r0, r3
 800b472:	371c      	adds	r7, #28
 800b474:	46bd      	mov	sp, r7
 800b476:	bd90      	pop	{r4, r7, pc}
 800b478:	08018c34 	.word	0x08018c34
 800b47c:	20000b78 	.word	0x20000b78

0800b480 <_ZN11ExtiHandlerD0Ev>:
ExtiHandler::~ExtiHandler() {
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
}
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff ffad 	bl	800b3e8 <_ZN11ExtiHandlerD1Ev>
 800b48e:	2104      	movs	r1, #4
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f009 ff0d 	bl	80152b0 <_ZdlPvj>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <_ZN11ExtiHandler4extiEt>:

void ExtiHandler::exti(uint16_t GPIO_Pin){
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	807b      	strh	r3, [r7, #2]

}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bc80      	pop	{r7}
 800b4b4:	4770      	bx	lr

0800b4b6 <_ZSt4moveIRP11ExtiHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bc80      	pop	{r7}
 800b4c8:	4770      	bx	lr

0800b4ca <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800b4d4:	6838      	ldr	r0, [r7, #0]
 800b4d6:	f7ff ffee 	bl	800b4b6 <_ZSt4moveIRP11ExtiHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f88d 	bl	800b5fe <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800b4e4:	bf00      	nop
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	109b      	asrs	r3, r3, #2
 800b502:	4618      	mov	r0, r3
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	bc80      	pop	{r7}
 800b50a:	4770      	bx	lr

0800b50c <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4413      	add	r3, r2
      }
 800b520:	4618      	mov	r0, r3
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	bc80      	pop	{r7}
 800b528:	4770      	bx	lr

0800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	f107 030c 	add.w	r3, r7, #12
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 f88d 	bl	800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	f107 020c 	add.w	r2, r7, #12
 800b564:	f107 0308 	add.w	r3, r7, #8
 800b568:	4611      	mov	r1, r2
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 f875 	bl	800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800b584:	6838      	ldr	r0, [r7, #0]
 800b586:	f000 f877 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b58a:	4603      	mov	r3, r0
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff ffbf 	bl	800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	60bb      	str	r3, [r7, #8]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f86b 	bl	800b68c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE6cbeginEv>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	60fb      	str	r3, [r7, #12]
 800b5ba:	f107 020c 	add.w	r2, r7, #12
 800b5be:	463b      	mov	r3, r7
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 f876 	bl	800b6b4 <_ZN9__gnu_cxxmiIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	f107 0308 	add.w	r3, r7, #8
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff ffba 	bl	800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f880 	bl	800b6e0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bc80      	pop	{r7}
 800b5fc:	4770      	bx	lr

0800b5fe <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800b5fe:	b5b0      	push	{r4, r5, r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	429a      	cmp	r2, r3
 800b612:	d011      	beq.n	800b638 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b614:	687c      	ldr	r4, [r7, #4]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685d      	ldr	r5, [r3, #4]
 800b61a:	6838      	ldr	r0, [r7, #0]
 800b61c:	f7ff ffe5 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b620:	4603      	mov	r3, r0
 800b622:	461a      	mov	r2, r3
 800b624:	4629      	mov	r1, r5
 800b626:	4620      	mov	r0, r4
 800b628:	f000 f896 	bl	800b758 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	1d1a      	adds	r2, r3, #4
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	605a      	str	r2, [r3, #4]
      }
 800b636:	e00c      	b.n	800b652 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f8a0 	bl	800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800b63e:	4604      	mov	r4, r0
 800b640:	6838      	ldr	r0, [r7, #0]
 800b642:	f7ff ffd2 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b646:	4603      	mov	r3, r0
 800b648:	461a      	mov	r2, r3
 800b64a:	4621      	mov	r1, r4
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f8a7 	bl	800b7a0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800b652:	bf00      	nop
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bdb0      	pop	{r4, r5, r7, pc}

0800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	bc80      	pop	{r7}
 800b676:	4770      	bx	lr

0800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4618      	mov	r0, r3
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	bc80      	pop	{r7}
 800b68a:	4770      	bx	lr

0800b68c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	f107 020c 	add.w	r2, r7, #12
 800b69e:	f107 0308 	add.w	r3, r7, #8
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 f907 	bl	800b8b8 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <_ZN9__gnu_cxxmiIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b6b4:	b590      	push	{r4, r7, lr}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f909 	bl	800b8d6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	461c      	mov	r4, r3
 800b6ca:	6838      	ldr	r0, [r7, #0]
 800b6cc:	f000 f903 	bl	800b8d6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	1ae3      	subs	r3, r4, r3
 800b6d6:	109b      	asrs	r3, r3, #2
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd90      	pop	{r4, r7, pc}

0800b6e0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 800b6e0:	b590      	push	{r4, r7, lr}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800b6ea:	463b      	mov	r3, r7
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7ff ff2b 	bl	800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	60bb      	str	r3, [r7, #8]
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f840 	bl	800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800b6fe:	4603      	mov	r3, r0
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	f107 020c 	add.w	r2, r7, #12
 800b706:	f107 0308 	add.w	r3, r7, #8
 800b70a:	4611      	mov	r1, r2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 f8ec 	bl	800b8ea <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00e      	beq.n	800b736 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800b718:	463b      	mov	r3, r7
 800b71a:	2101      	movs	r1, #1
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff ff14 	bl	800b54a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800b722:	4604      	mov	r4, r0
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f82a 	bl	800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800b72a:	4603      	mov	r3, r0
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	4619      	mov	r1, r3
 800b730:	4620      	mov	r0, r4
 800b732:	f000 f8f2 	bl	800b91a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	1f1a      	subs	r2, r3, #4
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	4619      	mov	r1, r3
 800b748:	4610      	mov	r0, r2
 800b74a:	f000 f8fe 	bl	800b94a <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800b74e:	683b      	ldr	r3, [r7, #0]
    }
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	bd90      	pop	{r4, r7, pc}

0800b758 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff ff40 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b76a:	4603      	mov	r3, r0
 800b76c:	461a      	mov	r2, r3
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f000 f8f7 	bl	800b964 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 800b776:	bf00      	nop
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	1d1a      	adds	r2, r3, #4
 800b78a:	f107 030c 	add.w	r3, r7, #12
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff ff62 	bl	800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800b7a0:	b5b0      	push	{r4, r5, r7, lr}
 800b7a2:	b08a      	sub	sp, #40	; 0x28
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800b7ac:	4a41      	ldr	r2, [pc, #260]	; (800b8b4 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f000 f8ef 	bl	800b994 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc>
 800b7b6:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f7ff feb6 	bl	800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	617b      	str	r3, [r7, #20]
 800b7c2:	f107 0214 	add.w	r2, r7, #20
 800b7c6:	f107 0308 	add.w	r3, r7, #8
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 f929 	bl	800ba24 <_ZN9__gnu_cxxmiIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 f938 	bl	800ba50 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj>
 800b7e0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800b7e6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800b7ec:	69fa      	ldr	r2, [r7, #28]
 800b7ee:	18d5      	adds	r5, r2, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff fefa 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f7ff ffab 	bl	800b758 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800b802:	2300      	movs	r3, #0
 800b804:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681c      	ldr	r4, [r3, #0]
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	4618      	mov	r0, r3
 800b810:	f7ff ff32 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b814:	4603      	mov	r3, r0
 800b816:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 f92c 	bl	800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b820:	4603      	mov	r3, r0
	  __new_finish
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	4629      	mov	r1, r5
 800b826:	4620      	mov	r0, r4
 800b828:	f000 f930 	bl	800ba8c <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800b82c:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	3304      	adds	r3, #4
 800b832:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 800b834:	f107 0308 	add.w	r3, r7, #8
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff ff1d 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b83e:	4603      	mov	r3, r0
 800b840:	681c      	ldr	r4, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 f915 	bl	800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b84e:	4603      	mov	r3, r0
	  __new_finish
 800b850:	69ba      	ldr	r2, [r7, #24]
 800b852:	4629      	mov	r1, r5
 800b854:	4620      	mov	r0, r4
 800b856:	f000 f919 	bl	800ba8c <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800b85a:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681c      	ldr	r4, [r3, #0]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	4618      	mov	r0, r3
 800b868:	f000 f906 	bl	800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b86c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b86e:	461a      	mov	r2, r3
 800b870:	4629      	mov	r1, r5
 800b872:	4620      	mov	r0, r4
 800b874:	f000 f923 	bl	800babe <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800b882:	461a      	mov	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 800b88c:	461a      	mov	r2, r3
 800b88e:	f000 f924 	bl	800bada <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	69fa      	ldr	r2, [r7, #28]
 800b896:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	441a      	add	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	609a      	str	r2, [r3, #8]
    }
 800b8aa:	bf00      	nop
 800b8ac:	3728      	adds	r7, #40	; 0x28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	080187b8 	.word	0x080187b8

0800b8b8 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bc80      	pop	{r7}
 800b8d4:	4770      	bx	lr

0800b8d6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b8d6:	b480      	push	{r7}
 800b8d8:	b083      	sub	sp, #12
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bc80      	pop	{r7}
 800b8e8:	4770      	bx	lr

0800b8ea <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b8ea:	b590      	push	{r4, r7, lr}
 800b8ec:	b083      	sub	sp, #12
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff febf 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	681c      	ldr	r4, [r3, #0]
 800b8fe:	6838      	ldr	r0, [r7, #0]
 800b900:	f7ff feba 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800b904:	4603      	mov	r3, r0
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	429c      	cmp	r4, r3
 800b90a:	bf14      	ite	ne
 800b90c:	2301      	movne	r3, #1
 800b90e:	2300      	moveq	r3, #0
 800b910:	b2db      	uxtb	r3, r3
 800b912:	4618      	mov	r0, r3
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	bd90      	pop	{r4, r7, pc}

0800b91a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 800b91a:	b590      	push	{r4, r7, lr}
 800b91c:	b085      	sub	sp, #20
 800b91e:	af00      	add	r7, sp, #0
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	60b9      	str	r1, [r7, #8]
 800b924:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f000 f8ea 	bl	800bb00 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800b92c:	4604      	mov	r4, r0
 800b92e:	68b8      	ldr	r0, [r7, #8]
 800b930:	f000 f8e6 	bl	800bb00 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800b934:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	4619      	mov	r1, r3
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 f8ea 	bl	800bb14 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800b940:	4603      	mov	r3, r0
    }
 800b942:	4618      	mov	r0, r3
 800b944:	3714      	adds	r7, #20
 800b946:	46bd      	mov	sp, r7
 800b948:	bd90      	pop	{r4, r7, pc}

0800b94a <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f902 	bl	800bb60 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE7destroyIS2_EEvPT_>
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800b964:	b590      	push	{r4, r7, lr}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff fe3a 	bl	800b5ea <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800b976:	4603      	mov	r3, r0
 800b978:	681c      	ldr	r4, [r3, #0]
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	4619      	mov	r1, r3
 800b97e:	2004      	movs	r0, #4
 800b980:	f7fc fb9e 	bl	80080c0 <_ZnwjPv>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d000      	beq.n	800b98c <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 800b98a:	601c      	str	r4, [r3, #0]
 800b98c:	bf00      	nop
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	bd90      	pop	{r4, r7, pc}

0800b994 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b994:	b590      	push	{r4, r7, lr}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 f8e7 	bl	800bb74 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f7ff fd9f 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	1ae2      	subs	r2, r4, r3
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	bf34      	ite	cc
 800b9b8:	2301      	movcc	r3, #1
 800b9ba:	2300      	movcs	r3, #0
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f009 fc9c 	bl	8015302 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff fd8e 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f7ff fd8a 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	613b      	str	r3, [r7, #16]
 800b9dc:	f107 0208 	add.w	r2, r7, #8
 800b9e0:	f107 0310 	add.w	r3, r7, #16
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fc ff65 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4423      	add	r3, r4
 800b9f2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f7ff fd79 	bl	800b4ec <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d306      	bcc.n	800ba10 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f000 f8b6 	bl	800bb74 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d904      	bls.n	800ba1a <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f8af 	bl	800bb74 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800ba16:	4603      	mov	r3, r0
 800ba18:	e000      	b.n	800ba1c <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 800ba1a:	697b      	ldr	r3, [r7, #20]
      }
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	371c      	adds	r7, #28
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd90      	pop	{r4, r7, pc}

0800ba24 <_ZN9__gnu_cxxmiIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ba24:	b590      	push	{r4, r7, lr}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff fe22 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ba34:	4603      	mov	r3, r0
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	461c      	mov	r4, r3
 800ba3a:	6838      	ldr	r0, [r7, #0]
 800ba3c:	f7ff fe1c 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ba40:	4603      	mov	r3, r0
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	1ae3      	subs	r3, r4, r3
 800ba46:	109b      	asrs	r3, r3, #2
 800ba48:	4618      	mov	r0, r3
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd90      	pop	{r4, r7, pc}

0800ba50 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d006      	beq.n	800ba6e <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj+0x1e>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 f896 	bl	800bb96 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8allocateERS2_j>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	e000      	b.n	800ba70 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj+0x20>
 800ba6e:	2300      	movs	r3, #0
      }
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4618      	mov	r0, r3
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bc80      	pop	{r7}
 800ba8a:	4770      	bx	lr

0800ba8c <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800ba8c:	b590      	push	{r4, r7, lr}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f000 f88a 	bl	800bbb4 <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>
 800baa0:	4604      	mov	r4, r0
 800baa2:	68b8      	ldr	r0, [r7, #8]
 800baa4:	f000 f886 	bl	800bbb4 <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>
 800baa8:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 f88f 	bl	800bbd2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP11ExtiHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800bab4:	4603      	mov	r3, r0
    }
 800bab6:	4618      	mov	r0, r3
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	bd90      	pop	{r4, r7, pc}

0800babe <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	60f8      	str	r0, [r7, #12]
 800bac6:	60b9      	str	r1, [r7, #8]
 800bac8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800baca:	68b9      	ldr	r1, [r7, #8]
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f000 f891 	bl	800bbf4 <_ZSt8_DestroyIPP11ExtiHandlerEvT_S3_>
    }
 800bad2:	bf00      	nop
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	607a      	str	r2, [r7, #4]
	if (__p)
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	68b9      	ldr	r1, [r7, #8]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f88b 	bl	800bc0e <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE10deallocateERS2_PS1_j>
      }
 800baf8:	bf00      	nop
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
    { return __it; }
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bc80      	pop	{r7}
 800bb12:	4770      	bx	lr

0800bb14 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800bb14:	b5b0      	push	{r4, r5, r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f000 f883 	bl	800bc2c <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800bb26:	4604      	mov	r4, r0
 800bb28:	68b8      	ldr	r0, [r7, #8]
 800bb2a:	f000 f87f 	bl	800bc2c <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800bb2e:	4605      	mov	r5, r0
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f87b 	bl	800bc2c <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800bb36:	4603      	mov	r3, r0
 800bb38:	461a      	mov	r2, r3
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f000 f883 	bl	800bc48 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800bb42:	4603      	mov	r3, r0
 800bb44:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800bb46:	f107 0214 	add.w	r2, r7, #20
 800bb4a:	f107 0310 	add.w	r3, r7, #16
 800bb4e:	4611      	mov	r1, r2
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff fd82 	bl	800b65a <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bb56:	693b      	ldr	r3, [r7, #16]
    }
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3718      	adds	r7, #24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bdb0      	pop	{r4, r5, r7, pc}

0800bb60 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
 800bb6a:	bf00      	nop
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bc80      	pop	{r7}
 800bb72:	4770      	bx	lr

0800bb74 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 f880 	bl	800bc84 <_ZNKSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800bb84:	4603      	mov	r3, r0
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f870 	bl	800bc6c <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8max_sizeERKS2_>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800bba0:	2200      	movs	r2, #0
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f877 	bl	800bc98 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	4618      	mov	r0, r3
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800bbbc:	f107 030c 	add.w	r3, r7, #12
 800bbc0:	6879      	ldr	r1, [r7, #4]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 f886 	bl	800bcd4 <_ZNSt13move_iteratorIPP11ExtiHandlerEC1ES2_>
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP11ExtiHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	607a      	str	r2, [r7, #4]
 800bbde:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f883 	bl	800bcf0 <_ZSt18uninitialized_copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>
 800bbea:	4603      	mov	r3, r0
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <_ZSt8_DestroyIPP11ExtiHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f887 	bl	800bd14 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ExtiHandlerEEvT_S5_>
    }
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	60f8      	str	r0, [r7, #12]
 800bc16:	60b9      	str	r1, [r7, #8]
 800bc18:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	68b9      	ldr	r1, [r7, #8]
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 f882 	bl	800bd28 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE10deallocateEPS2_j>
 800bc24:	bf00      	nop
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800bc34:	1d3b      	adds	r3, r7, #4
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7ff fd1e 	bl	800b678 <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800bc54:	2301      	movs	r3, #1
 800bc56:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	68b9      	ldr	r1, [r7, #8]
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 f870 	bl	800bd42 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_>
 800bc62:	4603      	mov	r3, r0
    }
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f881 	bl	800bd7c <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <_ZNKSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bc80      	pop	{r7}
 800bc96:	4770      	bx	lr

0800bc98 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 f869 	bl	800bd7c <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	bf8c      	ite	hi
 800bcb2:	2301      	movhi	r3, #1
 800bcb4:	2300      	movls	r3, #0
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bcbc:	f009 fb18 	bl	80152f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f009 faf5 	bl	80152b4 <_Znwj>
 800bcca:	4603      	mov	r3, r0
      }
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <_ZNSt13move_iteratorIPP11ExtiHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4618      	mov	r0, r3
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr

0800bcf0 <_ZSt18uninitialized_copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f844 	bl	800bd92 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP11ExtiHandlerES5_EET0_T_S8_S7_>
 800bd0a:	4603      	mov	r3, r0
    }
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ExtiHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
 800bd1e:	bf00      	nop
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bc80      	pop	{r7}
 800bd26:	4770      	bx	lr

0800bd28 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800bd34:	68b8      	ldr	r0, [r7, #8]
 800bd36:	f009 fad7 	bl	80152e8 <_ZdlPv>
      }
 800bd3a:	bf00      	nop
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b086      	sub	sp, #24
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	60f8      	str	r0, [r7, #12]
 800bd4a:	60b9      	str	r1, [r7, #8]
 800bd4c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	109b      	asrs	r3, r3, #2
 800bd56:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d006      	beq.n	800bd6c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	461a      	mov	r2, r3
 800bd64:	68f9      	ldr	r1, [r7, #12]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f00b ff94 	bl	8017c94 <memmove>
	  return __result + _Num;
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	4413      	add	r3, r2
	}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800bd84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bd88:	4618      	mov	r0, r3
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bc80      	pop	{r7}
 800bd90:	4770      	bx	lr

0800bd92 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP11ExtiHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f000 f805 	bl	800bdb2 <_ZSt4copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <_ZSt4copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800bdb2:	b590      	push	{r4, r7, lr}
 800bdb4:	b085      	sub	sp, #20
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 f80f 	bl	800bde2 <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	68b8      	ldr	r0, [r7, #8]
 800bdc8:	f000 f80b 	bl	800bde2 <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800bdcc:	4603      	mov	r3, r0
	       __result));
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f000 f816 	bl	800be04 <_ZSt14__copy_move_a2ILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800bdd8:	4603      	mov	r3, r0
    }
 800bdda:	4618      	mov	r0, r3
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd90      	pop	{r4, r7, pc}

0800bde2 <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b082      	sub	sp, #8
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800bdea:	1d3b      	adds	r3, r7, #4
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f825 	bl	800be3c <_ZNKSt13move_iteratorIPP11ExtiHandlerE4baseEv>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 f82c 	bl	800be52 <_ZSt12__miter_baseIPP11ExtiHandlerET_S3_>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <_ZSt14__copy_move_a2ILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800be04:	b5b0      	push	{r4, r5, r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 f828 	bl	800be66 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800be16:	4604      	mov	r4, r0
 800be18:	68b8      	ldr	r0, [r7, #8]
 800be1a:	f000 f824 	bl	800be66 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800be1e:	4605      	mov	r5, r0
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f820 	bl	800be66 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800be26:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800be28:	461a      	mov	r2, r3
 800be2a:	4629      	mov	r1, r5
 800be2c:	4620      	mov	r0, r4
 800be2e:	f7ff ff0b 	bl	800bc48 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800be32:	4603      	mov	r3, r0
    }
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bdb0      	pop	{r4, r5, r7, pc}

0800be3c <_ZNKSt13move_iteratorIPP11ExtiHandlerE4baseEv>:
      base() const
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4618      	mov	r0, r3
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bc80      	pop	{r7}
 800be50:	4770      	bx	lr

0800be52 <_ZSt12__miter_baseIPP11ExtiHandlerET_S3_>:
    __miter_base(_Iterator __it)
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
    { return __it; }
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4618      	mov	r0, r3
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	bc80      	pop	{r7}
 800be64:	4770      	bx	lr

0800be66 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>:
    __niter_base(_Iterator __it)
 800be66:	b480      	push	{r7}
 800be68:	b083      	sub	sp, #12
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4618      	mov	r0, r3
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	bc80      	pop	{r7}
 800be78:	4770      	bx	lr

0800be7a <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800be7a:	b480      	push	{r7}
 800be7c:	b083      	sub	sp, #12
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	bfb8      	it	lt
 800be88:	425b      	neglt	r3, r3
 800be8a:	4618      	mov	r0, r3
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	bc80      	pop	{r7}
 800be92:	4770      	bx	lr

0800be94 <_ZN14FFBWheelConfig7isequalERS_>:
	uint8_t maxAcceleration = 10;
	uint8_t maxPositionChange = 15;
	uint16_t minForce = 20000;


	bool isequal(FFBWheelConfig& conf)
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
	{
		if(	check == conf.check &&
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	f040 809b 	bne.w	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			axes == conf.axes &&
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	785a      	ldrb	r2, [r3, #1]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	785b      	ldrb	r3, [r3, #1]
		if(	check == conf.check &&
 800beb4:	429a      	cmp	r2, r3
 800beb6:	f040 8094 	bne.w	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			I2CButtons == conf.I2CButtons &&
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	789a      	ldrb	r2, [r3, #2]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	789b      	ldrb	r3, [r3, #2]
			axes == conf.axes &&
 800bec2:	429a      	cmp	r2, r3
 800bec4:	f040 808d 	bne.w	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			nLocalButtons == conf.nLocalButtons &&
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	78da      	ldrb	r2, [r3, #3]
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	78db      	ldrb	r3, [r3, #3]
			I2CButtons == conf.I2CButtons &&
 800bed0:	429a      	cmp	r2, r3
 800bed2:	f040 8086 	bne.w	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			degreesOfRotation == conf.degreesOfRotation &&
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	889a      	ldrh	r2, [r3, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	889b      	ldrh	r3, [r3, #4]
			nLocalButtons == conf.nLocalButtons &&
 800bede:	429a      	cmp	r2, r3
 800bee0:	d17f      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxpower == conf.maxpower &&
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	88da      	ldrh	r2, [r3, #6]
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	88db      	ldrh	r3, [r3, #6]
			degreesOfRotation == conf.degreesOfRotation &&
 800beea:	429a      	cmp	r2, r3
 800beec:	d179      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			endstop_gain == conf.endstop_gain &&
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	7b1a      	ldrb	r2, [r3, #12]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	7b1b      	ldrb	r3, [r3, #12]
			maxpower == conf.maxpower &&
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d173      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			encoderPPR == conf.encoderPPR &&
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	891a      	ldrh	r2, [r3, #8]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	891b      	ldrh	r3, [r3, #8]
			endstop_gain == conf.endstop_gain &&
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d16d      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxAdcCount == conf.maxAdcCount &&
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	7a9a      	ldrb	r2, [r3, #10]
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	7a9b      	ldrb	r3, [r3, #10]
			encoderPPR == conf.encoderPPR &&
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d167      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			inverted == conf.inverted &&
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	7ada      	ldrb	r2, [r3, #11]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	7adb      	ldrb	r3, [r3, #11]
			maxAdcCount == conf.maxAdcCount &&
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d161      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			constantGain == conf.constantGain &&
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	7b5a      	ldrb	r2, [r3, #13]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	7b5b      	ldrb	r3, [r3, #13]
			inverted == conf.inverted &&
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d15b      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			rampGain == conf.rampGain &&
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	7b9a      	ldrb	r2, [r3, #14]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	7b9b      	ldrb	r3, [r3, #14]
			constantGain == conf.constantGain &&
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d155      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			squareGain == conf.squareGain &&
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	7bda      	ldrb	r2, [r3, #15]
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	7bdb      	ldrb	r3, [r3, #15]
			rampGain == conf.rampGain &&
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d14f      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			sinGain == conf.sinGain &&
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	7c1a      	ldrb	r2, [r3, #16]
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	7c1b      	ldrb	r3, [r3, #16]
			squareGain == conf.squareGain &&
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d149      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			triangleGain == conf.triangleGain &&
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	7c5a      	ldrb	r2, [r3, #17]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	7c5b      	ldrb	r3, [r3, #17]
			sinGain == conf.sinGain &&
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d143      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			sawToothDownGain == conf.sawToothDownGain &&
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	7c9a      	ldrb	r2, [r3, #18]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	7c9b      	ldrb	r3, [r3, #18]
			triangleGain == conf.triangleGain &&
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d13d      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			sawToothUpGain == conf.sawToothUpGain &&
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	7cda      	ldrb	r2, [r3, #19]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	7cdb      	ldrb	r3, [r3, #19]
			sawToothDownGain == conf.sawToothDownGain &&
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d137      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			springGain == conf.springGain &&
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	7d1a      	ldrb	r2, [r3, #20]
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	7d1b      	ldrb	r3, [r3, #20]
			sawToothUpGain == conf.sawToothUpGain &&
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d131      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			damperGain == conf.damperGain &&
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	7d5a      	ldrb	r2, [r3, #21]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	7d5b      	ldrb	r3, [r3, #21]
			springGain == conf.springGain &&
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d12b      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			inertiaGain == conf.inertiaGain &&
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	7d9a      	ldrb	r2, [r3, #22]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	7d9b      	ldrb	r3, [r3, #22]
			damperGain == conf.damperGain &&
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d125      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			frictionGain == conf.frictionGain &&
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7dda      	ldrb	r2, [r3, #23]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	7ddb      	ldrb	r3, [r3, #23]
			inertiaGain == conf.inertiaGain &&
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d11f      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			totalGain == conf.totalGain &&
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7e1a      	ldrb	r2, [r3, #24]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	7e1b      	ldrb	r3, [r3, #24]
			frictionGain == conf.frictionGain &&
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d119      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxVelosity == conf.maxVelosity &&
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	7e5a      	ldrb	r2, [r3, #25]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	7e5b      	ldrb	r3, [r3, #25]
			totalGain == conf.totalGain &&
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d113      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxAcceleration == conf.maxAcceleration &&
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	7e9a      	ldrb	r2, [r3, #26]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	7e9b      	ldrb	r3, [r3, #26]
			maxVelosity == conf.maxVelosity &&
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d10d      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			maxPositionChange == conf.maxPositionChange &&
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	7eda      	ldrb	r2, [r3, #27]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	7edb      	ldrb	r3, [r3, #27]
			maxAcceleration == conf.maxAcceleration &&
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d107      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			minForce == conf.minForce)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	8b9a      	ldrh	r2, [r3, #28]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	8b9b      	ldrh	r3, [r3, #28]
			maxPositionChange == conf.maxPositionChange &&
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d101      	bne.n	800bfe2 <_ZN14FFBWheelConfig7isequalERS_+0x14e>
			return true;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e000      	b.n	800bfe4 <_ZN14FFBWheelConfig7isequalERS_+0x150>
		else
			return false;
 800bfe2:	2300      	movs	r3, #0
	}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr

0800bfee <_ZN14FFBWheelConfigC1Ev>:
struct FFBWheelConfig{
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2257      	movs	r2, #87	; 0x57
 800bffa:	701a      	strb	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2207      	movs	r2, #7
 800c000:	705a      	strb	r2, [r3, #1]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	709a      	strb	r2, [r3, #2]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	70da      	strb	r2, [r3, #3]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f44f 7261 	mov.w	r2, #900	; 0x384
 800c014:	809a      	strh	r2, [r3, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c01c:	80da      	strh	r2, [r3, #6]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c024:	811a      	strh	r2, [r3, #8]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2208      	movs	r2, #8
 800c02a:	729a      	strb	r2, [r3, #10]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	72da      	strb	r2, [r3, #11]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2214      	movs	r2, #20
 800c036:	731a      	strb	r2, [r3, #12]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2264      	movs	r2, #100	; 0x64
 800c03c:	735a      	strb	r2, [r3, #13]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2264      	movs	r2, #100	; 0x64
 800c042:	739a      	strb	r2, [r3, #14]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2264      	movs	r2, #100	; 0x64
 800c048:	73da      	strb	r2, [r3, #15]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2264      	movs	r2, #100	; 0x64
 800c04e:	741a      	strb	r2, [r3, #16]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2264      	movs	r2, #100	; 0x64
 800c054:	745a      	strb	r2, [r3, #17]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2264      	movs	r2, #100	; 0x64
 800c05a:	749a      	strb	r2, [r3, #18]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2264      	movs	r2, #100	; 0x64
 800c060:	74da      	strb	r2, [r3, #19]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2264      	movs	r2, #100	; 0x64
 800c066:	751a      	strb	r2, [r3, #20]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2264      	movs	r2, #100	; 0x64
 800c06c:	755a      	strb	r2, [r3, #21]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2264      	movs	r2, #100	; 0x64
 800c072:	759a      	strb	r2, [r3, #22]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2264      	movs	r2, #100	; 0x64
 800c078:	75da      	strb	r2, [r3, #23]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2264      	movs	r2, #100	; 0x64
 800c07e:	761a      	strb	r2, [r3, #24]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	220f      	movs	r2, #15
 800c084:	765a      	strb	r2, [r3, #25]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	220a      	movs	r2, #10
 800c08a:	769a      	strb	r2, [r3, #26]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	220f      	movs	r2, #15
 800c090:	76da      	strb	r2, [r3, #27]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c098:	839a      	strh	r2, [r3, #28]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4618      	mov	r0, r3
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bc80      	pop	{r7}
 800c0a4:	4770      	bx	lr

0800c0a6 <_ZN11reportHID_tC1Ev>:
};


struct  __attribute__((__packed__)) reportHID_t {
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	705a      	strb	r2, [r3, #1]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	709a      	strb	r2, [r3, #2]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	70da      	strb	r2, [r3, #3]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	711a      	strb	r2, [r3, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	715a      	strb	r2, [r3, #5]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	719a      	strb	r2, [r3, #6]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	71da      	strb	r2, [r3, #7]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	721a      	strb	r2, [r3, #8]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	725a      	strb	r2, [r3, #9]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	729a      	strb	r2, [r3, #10]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	72da      	strb	r2, [r3, #11]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	731a      	strb	r2, [r3, #12]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	735a      	strb	r2, [r3, #13]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	739a      	strb	r2, [r3, #14]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	73da      	strb	r2, [r3, #15]
 800c0fe:	2200      	movs	r2, #0
 800c100:	741a      	strb	r2, [r3, #16]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	745a      	strb	r2, [r3, #17]
 800c108:	2200      	movs	r2, #0
 800c10a:	749a      	strb	r2, [r3, #18]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4618      	mov	r0, r3
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	bc80      	pop	{r7}
 800c116:	4770      	bx	lr

0800c118 <_ZN8FFBWheelC1Ev>:
#include "FFBWheel.h"
#include "FFBWheel_usb_init.h"
// TODO class type for parser? (Simhub for example)
//////////////////////////////////////////////

FFBWheel::FFBWheel() {
 800c118:	b590      	push	{r4, r7, lr}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4618      	mov	r0, r3
 800c124:	f7fb ffd8 	bl	80080d8 <_ZN10AdcHandlerC1Ev>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3304      	adds	r3, #4
 800c12c:	4618      	mov	r0, r3
 800c12e:	f005 f94d 	bl	80113cc <_ZN12TimerHandlerC1Ev>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3308      	adds	r3, #8
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fa62 	bl	800a600 <_ZN14CommandHandlerC1Ev>
 800c13c:	4a3f      	ldr	r2, [pc, #252]	; (800c23c <_ZN8FFBWheelC1Ev+0x124>)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	4a3f      	ldr	r2, [pc, #252]	; (800c240 <_ZN8FFBWheelC1Ev+0x128>)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	605a      	str	r2, [r3, #4]
 800c148:	4a3e      	ldr	r2, [pc, #248]	; (800c244 <_ZN8FFBWheelC1Ev+0x12c>)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	609a      	str	r2, [r3, #8]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	735a      	strb	r2, [r3, #13]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	739a      	strb	r2, [r3, #14]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	73da      	strb	r2, [r3, #15]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3310      	adds	r3, #16
 800c164:	4618      	mov	r0, r3
 800c166:	f7fc fd45 	bl	8008bf4 <_ZN9CmdParserC1Ev>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	64da      	str	r2, [r3, #76]	; 0x4c
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	651a      	str	r2, [r3, #80]	; 0x50
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3354      	adds	r3, #84	; 0x54
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7ff ff37 	bl	800bfee <_ZN14FFBWheelConfigC1Ev>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	675a      	str	r2, [r3, #116]	; 0x74
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	679a      	str	r2, [r3, #120]	; 0x78
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	67da      	str	r2, [r3, #124]	; 0x7c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	338c      	adds	r3, #140	; 0x8c
 800c196:	4618      	mov	r0, r3
 800c198:	f7ff ff85 	bl	800c0a6 <_ZN11reportHID_tC1Ev>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c1c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f247 5230 	movw	r2, #30000	; 0x7530
 800c1d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	// Create HID FFB handler. Will receive all usb messages directly
	this->ffb = new HidFFB();
 800c1e0:	f640 30e8 	movw	r0, #3048	; 0xbe8
 800c1e4:	f009 f866 	bl	80152b4 <_Znwj>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	461c      	mov	r4, r3
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f003 faf7 	bl	800f7e0 <_ZN6HidFFBC1Ev>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	645c      	str	r4, [r3, #68]	; 0x44


	// Setup a timer
	extern TIM_HandleTypeDef htim3;
	this->timer_update = &htim3; // Timer setup with prescaler of sysclock
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a13      	ldr	r2, [pc, #76]	; (800c248 <_ZN8FFBWheelC1Ev+0x130>)
 800c1fa:	649a      	str	r2, [r3, #72]	; 0x48
	this->timer_update->Instance->ARR = 250;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	22fa      	movs	r2, #250	; 0xfa
 800c204:	62da      	str	r2, [r3, #44]	; 0x2c
	this->timer_update->Instance->CR1 = 1;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2201      	movs	r2, #1
 800c20e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(this->timer_update);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c214:	4618      	mov	r0, r3
 800c216:	f7f9 fd08 	bl	8005c2a <HAL_TIM_Base_Start_IT>

	restoreFlash(); // Load parameters
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f87c 	bl	800c318 <_ZN8FFBWheel12restoreFlashEv>
	ffb->set_config(&conf);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3354      	adds	r3, #84	; 0x54
 800c228:	4619      	mov	r1, r3
 800c22a:	4610      	mov	r0, r2
 800c22c:	f004 ff35 	bl	801109a <_ZN6HidFFB10set_configEP14FFBWheelConfig>
}
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4618      	mov	r0, r3
 800c234:	370c      	adds	r7, #12
 800c236:	46bd      	mov	sp, r7
 800c238:	bd90      	pop	{r4, r7, pc}
 800c23a:	bf00      	nop
 800c23c:	08018c48 	.word	0x08018c48
 800c240:	08018c64 	.word	0x08018c64
 800c244:	08018c78 	.word	0x08018c78
 800c248:	200015e8 	.word	0x200015e8

0800c24c <_ZN8FFBWheelD1Ev>:

FFBWheel::~FFBWheel() {
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	4a1d      	ldr	r2, [pc, #116]	; (800c2cc <_ZN8FFBWheelD1Ev+0x80>)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	601a      	str	r2, [r3, #0]
 800c25a:	4a1d      	ldr	r2, [pc, #116]	; (800c2d0 <_ZN8FFBWheelD1Ev+0x84>)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	605a      	str	r2, [r3, #4]
 800c260:	4a1c      	ldr	r2, [pc, #112]	; (800c2d4 <_ZN8FFBWheelD1Ev+0x88>)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	609a      	str	r2, [r3, #8]
	delete drv;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d008      	beq.n	800c280 <_ZN8FFBWheelD1Ev+0x34>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3304      	adds	r3, #4
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
	delete enc;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c284:	2b00      	cmp	r3, #0
 800c286:	d008      	beq.n	800c29a <_ZN8FFBWheelD1Ev+0x4e>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3304      	adds	r3, #4
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4610      	mov	r0, r2
 800c298:	4798      	blx	r3
FFBWheel::~FFBWheel() {
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	3310      	adds	r3, #16
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fc fcd2 	bl	8008c48 <_ZN9CmdParserD1Ev>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fe f9bd 	bl	800a628 <_ZN14CommandHandlerD1Ev>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f005 f8a2 	bl	80113fc <_ZN12TimerHandlerD1Ev>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fb ff24 	bl	8008108 <_ZN10AdcHandlerD1Ev>
}
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	08018c48 	.word	0x08018c48
 800c2d0:	08018c64 	.word	0x08018c64
 800c2d4:	08018c78 	.word	0x08018c78

0800c2d8 <_ZThn4_N8FFBWheelD1Ev>:


class FFBWheel: public AdcHandler, TimerHandler, CommandHandler{
public:
	FFBWheel();
	virtual ~FFBWheel();
 800c2d8:	f1a0 0004 	sub.w	r0, r0, #4
 800c2dc:	f7ff bfb6 	b.w	800c24c <_ZN8FFBWheelD1Ev>

0800c2e0 <_ZThn8_N8FFBWheelD1Ev>:
 800c2e0:	f1a0 0008 	sub.w	r0, r0, #8
 800c2e4:	f7ff bfb2 	b.w	800c24c <_ZN8FFBWheelD1Ev>

0800c2e8 <_ZN8FFBWheelD0Ev>:
FFBWheel::~FFBWheel() {
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
}
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7ff ffab 	bl	800c24c <_ZN8FFBWheelD1Ev>
 800c2f6:	21c0      	movs	r1, #192	; 0xc0
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f008 ffd9 	bl	80152b0 <_ZdlPvj>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4618      	mov	r0, r3
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <_ZThn8_N8FFBWheelD0Ev>:
 800c308:	f1a0 0008 	sub.w	r0, r0, #8
 800c30c:	f7ff bfec 	b.w	800c2e8 <_ZN8FFBWheelD0Ev>

0800c310 <_ZThn4_N8FFBWheelD0Ev>:
 800c310:	f1a0 0004 	sub.w	r0, r0, #4
 800c314:	f7ff bfe8 	b.w	800c2e8 <_ZN8FFBWheelD0Ev>

0800c318 <_ZN8FFBWheel12restoreFlashEv>:


void FFBWheel::restoreFlash(){
 800c318:	b5b0      	push	{r4, r5, r7, lr}
 800c31a:	b08a      	sub	sp, #40	; 0x28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6278      	str	r0, [r7, #36]	; 0x24

	conf = decodeConf();
 800c320:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c322:	463b      	mov	r3, r7
 800c324:	4618      	mov	r0, r3
 800c326:	f000 fbeb 	bl	800cb00 <_ZN8FFBWheel10decodeConfEv>
 800c32a:	3454      	adds	r4, #84	; 0x54
 800c32c:	463d      	mov	r5, r7
 800c32e:	6828      	ldr	r0, [r5, #0]
 800c330:	6869      	ldr	r1, [r5, #4]
 800c332:	68aa      	ldr	r2, [r5, #8]
 800c334:	68eb      	ldr	r3, [r5, #12]
 800c336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c338:	6928      	ldr	r0, [r5, #16]
 800c33a:	6969      	ldr	r1, [r5, #20]
 800c33c:	69aa      	ldr	r2, [r5, #24]
 800c33e:	c407      	stmia	r4!, {r0, r1, r2}
 800c340:	8bab      	ldrh	r3, [r5, #28]
 800c342:	8023      	strh	r3, [r4, #0]
	conf.check= 0x57;
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	2257      	movs	r2, #87	; 0x57
 800c348:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	drv = new MotorBTS7960();
 800c34c:	2018      	movs	r0, #24
 800c34e:	f008 ffb1 	bl	80152b4 <_Znwj>
 800c352:	4603      	mov	r3, r0
 800c354:	461c      	mov	r4, r3
 800c356:	4620      	mov	r0, r4
 800c358:	f004 ffae 	bl	80112b8 <_ZN12MotorBTS7960C1Ev>
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	675c      	str	r4, [r3, #116]	; 0x74
	enc = new EncoderLocal();
 800c360:	2050      	movs	r0, #80	; 0x50
 800c362:	f008 ffa7 	bl	80152b4 <_Znwj>
 800c366:	4603      	mov	r3, r0
 800c368:	461c      	mov	r4, r3
 800c36a:	4620      	mov	r0, r4
 800c36c:	f7fe ff0c 	bl	800b188 <_ZN12EncoderLocalC1Ev>
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	679c      	str	r4, [r3, #120]	; 0x78
	btns = new LocalButtons();
 800c374:	2018      	movs	r0, #24
 800c376:	f008 ff9d 	bl	80152b4 <_Znwj>
 800c37a:	4603      	mov	r3, r0
 800c37c:	461c      	mov	r4, r3
 800c37e:	4620      	mov	r0, r4
 800c380:	f004 fe98 	bl	80110b4 <_ZN12LocalButtonsC1Ev>
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	67dc      	str	r4, [r3, #124]	; 0x7c

	drv->start();
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c38c:	4618      	mov	r0, r3
 800c38e:	f004 fffb 	bl	8011388 <_ZN12MotorBTS79605startEv>
	initEncoder();
 800c392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c394:	f000 fbf6 	bl	800cb84 <_ZN8FFBWheel11initEncoderEv>
}
 800c398:	bf00      	nop
 800c39a:	3728      	adds	r7, #40	; 0x28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bdb0      	pop	{r4, r5, r7, pc}

0800c3a0 <_ZN8FFBWheel9saveFlashEv>:

// Saves parameters to flash
void FFBWheel::saveFlash(){
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08c      	sub	sp, #48	; 0x30
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
	FFBWheelConfig savedconf = decodeConf();
 800c3a8:	f107 030c 	add.w	r3, r7, #12
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 fba7 	bl	800cb00 <_ZN8FFBWheel10decodeConfEv>
	if(savedconf.isequal(conf))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800c3b8:	f107 030c 	add.w	r3, r7, #12
 800c3bc:	4611      	mov	r1, r2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff fd68 	bl	800be94 <_ZN14FFBWheelConfig7isequalERS_>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d120      	bne.n	800c40c <_ZN8FFBWheel9saveFlashEv+0x6c>
		return;
	uint32_t* buf = (uint32_t*)&conf;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	3354      	adds	r3, #84	; 0x54
 800c3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t len = sizeof(FFBWheelConfig);
 800c3d0:	231e      	movs	r3, #30
 800c3d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	len = len / 4 + (len % 4 != 0 ? 1 : 0);
 800c3d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3da:	089b      	lsrs	r3, r3, #2
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800c3e2:	f002 0203 	and.w	r2, r2, #3
 800c3e6:	2a00      	cmp	r2, #0
 800c3e8:	d001      	beq.n	800c3ee <_ZN8FFBWheel9saveFlashEv+0x4e>
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	e000      	b.n	800c3f0 <_ZN8FFBWheel9saveFlashEv+0x50>
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	EE_Format();
 800c3f6:	f7f4 feeb 	bl	80011d0 <EE_Format>
	EE_Writes(0x00, len, buf);
 800c3fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c402:	4619      	mov	r1, r3
 800c404:	2000      	movs	r0, #0
 800c406:	f7f4 ff3b 	bl	8001280 <EE_Writes>
 800c40a:	e000      	b.n	800c40e <_ZN8FFBWheel9saveFlashEv+0x6e>
		return;
 800c40c:	bf00      	nop
}
 800c40e:	3730      	adds	r7, #48	; 0x30
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <_ZN8FFBWheel6updateEv>:

/*
 * Periodical update method. Called from main loop
 */
void FFBWheel::update(){
 800c414:	b590      	push	{r4, r7, lr}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
	int16_t lasttorque = endstopTorque;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c420:	81bb      	strh	r3, [r7, #12]
	bool updateTorque = false;
 800c422:	2300      	movs	r3, #0
 800c424:	73fb      	strb	r3, [r7, #15]
	if(drv == nullptr || enc == nullptr){
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <_ZN8FFBWheel6updateEv+0x22>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c432:	2b00      	cmp	r3, #0
 800c434:	d102      	bne.n	800c43c <_ZN8FFBWheel6updateEv+0x28>
		pulseSysLed();
 800c436:	f006 f993 	bl	8012760 <_Z11pulseSysLedv>
		return;
 800c43a:	e0e6      	b.n	800c60a <_ZN8FFBWheel6updateEv+0x1f6>
	}

	if(usb_update_flag || update_flag){
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	7b5b      	ldrb	r3, [r3, #13]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d103      	bne.n	800c44c <_ZN8FFBWheel6updateEv+0x38>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	7b9b      	ldrb	r3, [r3, #14]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d041      	beq.n	800c4d0 <_ZN8FFBWheel6updateEv+0xbc>

		torque = 0;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	64da      	str	r2, [r3, #76]	; 0x4c
		scaledEnc = getEncValue(enc, conf.degreesOfRotation);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c45c:	461a      	mov	r2, r3
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f9a4 	bl	800c7ac <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>
 800c464:	4602      	mov	r2, r0
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		scaledEnc *= conf.inverted ? 1 : -1;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <_ZN8FFBWheel6updateEv+0x6c>
 800c47c:	2301      	movs	r3, #1
 800c47e:	e001      	b.n	800c484 <_ZN8FFBWheel6updateEv+0x70>
 800c480:	f04f 33ff 	mov.w	r3, #4294967295
 800c484:	fb02 f203 	mul.w	r2, r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

		update_flag = false;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	739a      	strb	r2, [r3, #14]

		if(abs(scaledEnc) > 0xffff){
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7ff fced 	bl	800be7a <_ZSt3absl>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	bfcc      	ite	gt
 800c4aa:	2301      	movgt	r3, #1
 800c4ac:	2300      	movle	r3, #0
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d006      	beq.n	800c4c2 <_ZN8FFBWheel6updateEv+0xae>
			drv->stop();
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f004 ff71 	bl	80113a0 <_ZN12MotorBTS79604stopEv>
			pulseSysLed();
 800c4be:	f006 f94f 	bl	8012760 <_Z11pulseSysLedv>
		}
		endstopTorque = updateEndstop();
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f8a8 	bl	800c618 <_ZN8FFBWheel13updateEndstopEv>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	651a      	str	r2, [r3, #80]	; 0x50

	}
	if(usb_update_flag){
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	7b5b      	ldrb	r3, [r3, #13]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d053      	beq.n	800c580 <_ZN8FFBWheel6updateEv+0x16c>
		speed = scaledEnc - lastScaledEnc;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4e4:	1ad2      	subs	r2, r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		lastScaledEnc = scaledEnc;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		usb_update_flag = false;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	735a      	strb	r2, [r3, #13]
		torque = ffb->calculateEffects(enc);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c506:	4619      	mov	r1, r3
 800c508:	4610      	mov	r0, r2
 800c50a:	f003 fdf9 	bl	8010100 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal>
 800c50e:	4602      	mov	r2, r0
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	64da      	str	r2, [r3, #76]	; 0x4c

		if(endstopTorque == 0 || (endstopTorque > 0 && torque > 0) || (endstopTorque < 0 && torque < 0))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00f      	beq.n	800c53c <_ZN8FFBWheel6updateEv+0x128>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c520:	2b00      	cmp	r3, #0
 800c522:	dd03      	ble.n	800c52c <_ZN8FFBWheel6updateEv+0x118>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c528:	2b00      	cmp	r3, #0
 800c52a:	dc07      	bgt.n	800c53c <_ZN8FFBWheel6updateEv+0x128>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c530:	2b00      	cmp	r3, #0
 800c532:	da22      	bge.n	800c57a <_ZN8FFBWheel6updateEv+0x166>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	da1e      	bge.n	800c57a <_ZN8FFBWheel6updateEv+0x166>
		{
			torque *= ((float)this->conf.totalGain / (float)100.00);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c540:	4618      	mov	r0, r3
 800c542:	f7f4 fbab 	bl	8000c9c <__aeabi_i2f>
 800c546:	4604      	mov	r4, r0
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c54e:	4618      	mov	r0, r3
 800c550:	f7f4 fba0 	bl	8000c94 <__aeabi_ui2f>
 800c554:	4603      	mov	r3, r0
 800c556:	492e      	ldr	r1, [pc, #184]	; (800c610 <_ZN8FFBWheel6updateEv+0x1fc>)
 800c558:	4618      	mov	r0, r3
 800c55a:	f7f4 fca7 	bl	8000eac <__aeabi_fdiv>
 800c55e:	4603      	mov	r3, r0
 800c560:	4619      	mov	r1, r3
 800c562:	4620      	mov	r0, r4
 800c564:	f7f4 fbee 	bl	8000d44 <__aeabi_fmul>
 800c568:	4603      	mov	r3, r0
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7f4 fdb0 	bl	80010d0 <__aeabi_f2iz>
 800c570:	4602      	mov	r2, r0
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	64da      	str	r2, [r3, #76]	; 0x4c
			updateTorque = true;
 800c576:	2301      	movs	r3, #1
 800c578:	73fb      	strb	r3, [r7, #15]
		}
		this->send_report();
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f99c 	bl	800c8b8 <_ZN8FFBWheel11send_reportEv>
	}

	if(endstopTorque!=lasttorque || updateTorque){
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d102      	bne.n	800c592 <_ZN8FFBWheel6updateEv+0x17e>
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d03b      	beq.n	800c60a <_ZN8FFBWheel6updateEv+0x1f6>
		torque = clip<int32_t,int16_t>(torque, -this->conf.maxpower, this->conf.maxpower);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c59c:	425b      	negs	r3, r3
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	b219      	sxth	r1, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5a8:	b21b      	sxth	r3, r3
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f000 fb48 	bl	800cc40 <_Z4clipIlsET_S0_T0_S1_>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	64da      	str	r2, [r3, #76]	; 0x4c
		torque += +endstopTorque;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5be:	441a      	add	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	64da      	str	r2, [r3, #76]	; 0x4c
		torque = clip<int32_t,int16_t>(torque, -0x7fff, 0x7fff);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c5cc:	4911      	ldr	r1, [pc, #68]	; (800c614 <_ZN8FFBWheel6updateEv+0x200>)
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fb36 	bl	800cc40 <_Z4clipIlsET_S0_T0_S1_>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	64da      	str	r2, [r3, #76]	; 0x4c
		torque *= conf.inverted ? 1 : -1;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <_ZN8FFBWheel6updateEv+0x1d8>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e001      	b.n	800c5f0 <_ZN8FFBWheel6updateEv+0x1dc>
 800c5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f0:	fb02 f203 	mul.w	r2, r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	64da      	str	r2, [r3, #76]	; 0x4c
		drv->turn(torque);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c600:	b21b      	sxth	r3, r3
 800c602:	4619      	mov	r1, r3
 800c604:	4610      	mov	r0, r2
 800c606:	f004 fe17 	bl	8011238 <_ZN12MotorBTS79604turnEs>
	}
}
 800c60a:	3714      	adds	r7, #20
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd90      	pop	{r4, r7, pc}
 800c610:	42c80000 	.word	0x42c80000
 800c614:	ffff8001 	.word	0xffff8001

0800c618 <_ZN8FFBWheel13updateEndstopEv>:


int16_t FFBWheel::updateEndstop(){
 800c618:	b590      	push	{r4, r7, lr}
 800c61a:	b087      	sub	sp, #28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
	int8_t clipdir = cliptest<int32_t,int32_t>(lastScaledEnc, -0x7fff, 0x7fff);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c626:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c62a:	4933      	ldr	r1, [pc, #204]	; (800c6f8 <_ZN8FFBWheel13updateEndstopEv+0xe0>)
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 fb22 	bl	800cc76 <_Z8cliptestIllEaT_T0_S1_>
 800c632:	4603      	mov	r3, r0
 800c634:	75fb      	strb	r3, [r7, #23]
	if(clipdir == 0){
 800c636:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <_ZN8FFBWheel13updateEndstopEv+0x2a>
		return 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	e052      	b.n	800c6e8 <_ZN8FFBWheel13updateEndstopEv+0xd0>
	}
	int32_t addtorque = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	613b      	str	r3, [r7, #16]
	addtorque += clip<int32_t,int32_t>(abs(lastScaledEnc)-0x7fff,-0x7fff,0x7fff);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7ff fc14 	bl	800be7a <_ZSt3absl>
 800c652:	4603      	mov	r3, r0
 800c654:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c658:	3b7f      	subs	r3, #127	; 0x7f
 800c65a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c65e:	4926      	ldr	r1, [pc, #152]	; (800c6f8 <_ZN8FFBWheel13updateEndstopEv+0xe0>)
 800c660:	4618      	mov	r0, r3
 800c662:	f000 fb21 	bl	800cca8 <_Z4clipIllET_S0_T0_S1_>
 800c666:	4602      	mov	r2, r0
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	4413      	add	r3, r2
 800c66c:	613b      	str	r3, [r7, #16]
	float scale = ((float)conf.endstop_gain * 50.00) / 255.00; // 0..50
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c674:	4618      	mov	r0, r3
 800c676:	f7f4 fb0d 	bl	8000c94 <__aeabi_ui2f>
 800c67a:	4603      	mov	r3, r0
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7f3 fed3 	bl	8000428 <__aeabi_f2d>
 800c682:	f04f 0200 	mov.w	r2, #0
 800c686:	4b1d      	ldr	r3, [pc, #116]	; (800c6fc <_ZN8FFBWheel13updateEndstopEv+0xe4>)
 800c688:	f7f3 ff26 	bl	80004d8 <__aeabi_dmul>
 800c68c:	4603      	mov	r3, r0
 800c68e:	460c      	mov	r4, r1
 800c690:	4618      	mov	r0, r3
 800c692:	4621      	mov	r1, r4
 800c694:	a316      	add	r3, pc, #88	; (adr r3, 800c6f0 <_ZN8FFBWheel13updateEndstopEv+0xd8>)
 800c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69a:	f7f4 f847 	bl	800072c <__aeabi_ddiv>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	4621      	mov	r1, r4
 800c6a6:	f7f4 f9ef 	bl	8000a88 <__aeabi_d2f>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	60fb      	str	r3, [r7, #12]
	addtorque *= scale;
 800c6ae:	6938      	ldr	r0, [r7, #16]
 800c6b0:	f7f4 faf4 	bl	8000c9c <__aeabi_i2f>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	68f9      	ldr	r1, [r7, #12]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7f4 fb43 	bl	8000d44 <__aeabi_fmul>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7f4 fd05 	bl	80010d0 <__aeabi_f2iz>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	613b      	str	r3, [r7, #16]
	addtorque *= -clipdir;
 800c6ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6ce:	425a      	negs	r2, r3
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	fb02 f303 	mul.w	r3, r2, r3
 800c6d6:	613b      	str	r3, [r7, #16]

	return clip<int32_t,int32_t>(addtorque, -0x7fff ,0x7fff);
 800c6d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c6dc:	4906      	ldr	r1, [pc, #24]	; (800c6f8 <_ZN8FFBWheel13updateEndstopEv+0xe0>)
 800c6de:	6938      	ldr	r0, [r7, #16]
 800c6e0:	f000 fae2 	bl	800cca8 <_Z4clipIllET_S0_T0_S1_>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	b21b      	sxth	r3, r3
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	371c      	adds	r7, #28
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd90      	pop	{r4, r7, pc}
 800c6f0:	00000000 	.word	0x00000000
 800c6f4:	406fe000 	.word	0x406fe000
 800c6f8:	ffff8001 	.word	0xffff8001
 800c6fc:	40490000 	.word	0x40490000

0800c700 <_ZN8FFBWheel6adcUpdEPVm>:

void FFBWheel::adcUpd(volatile uint32_t* ADC_BUF){
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0;i<ADC_PINS;i++)
 800c70a:	2300      	movs	r3, #0
 800c70c:	73fb      	strb	r3, [r7, #15]
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d815      	bhi.n	800c740 <_ZN8FFBWheel6adcUpdEPVm+0x40>
	{
		this->adc_buf2[i] += ADC_BUF[i+ADC_CHAN_FPIN];
 800c714:	7bfb      	ldrb	r3, [r7, #15]
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	4413      	add	r3, r2
 800c71c:	6819      	ldr	r1, [r3, #0]
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	3320      	adds	r3, #32
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
 800c72c:	440a      	add	r2, r1
 800c72e:	6879      	ldr	r1, [r7, #4]
 800c730:	3320      	adds	r3, #32
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	440b      	add	r3, r1
 800c736:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0;i<ADC_PINS;i++)
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	3301      	adds	r3, #1
 800c73c:	73fb      	strb	r3, [r7, #15]
 800c73e:	e7e6      	b.n	800c70e <_ZN8FFBWheel6adcUpdEPVm+0xe>
	}
	adcCount++;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	7bdb      	ldrb	r3, [r3, #15]
 800c744:	3301      	adds	r3, #1
 800c746:	b2da      	uxtb	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	73da      	strb	r2, [r3, #15]
	if(adcCount >= conf.maxAdcCount)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	7bda      	ldrb	r2, [r3, #15]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800c756:	429a      	cmp	r2, r3
 800c758:	d323      	bcc.n	800c7a2 <_ZN8FFBWheel6adcUpdEPVm+0xa2>
	{
		for(uint8_t i = 0;i<ADC_PINS;i++)
 800c75a:	2300      	movs	r3, #0
 800c75c:	73bb      	strb	r3, [r7, #14]
 800c75e:	7bbb      	ldrb	r3, [r7, #14]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d81b      	bhi.n	800c79c <_ZN8FFBWheel6adcUpdEPVm+0x9c>
		{
			this->adc_buf[i] = this->adc_buf2[i]/conf.maxAdcCount;
 800c764:	7bbb      	ldrb	r3, [r7, #14]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	3320      	adds	r3, #32
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 800c776:	fbb3 f3f2 	udiv	r3, r3, r2
 800c77a:	7bba      	ldrb	r2, [r7, #14]
 800c77c:	b299      	uxth	r1, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	3240      	adds	r2, #64	; 0x40
 800c782:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			this->adc_buf2[i]= 0;
 800c786:	7bbb      	ldrb	r3, [r7, #14]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	3320      	adds	r3, #32
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	2200      	movs	r2, #0
 800c792:	605a      	str	r2, [r3, #4]
		for(uint8_t i = 0;i<ADC_PINS;i++)
 800c794:	7bbb      	ldrb	r3, [r7, #14]
 800c796:	3301      	adds	r3, #1
 800c798:	73bb      	strb	r3, [r7, #14]
 800c79a:	e7e0      	b.n	800c75e <_ZN8FFBWheel6adcUpdEPVm+0x5e>
		}
		adcCount = 0;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	73da      	strb	r2, [r3, #15]
	}

}
 800c7a2:	bf00      	nop
 800c7a4:	3714      	adds	r7, #20
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bc80      	pop	{r7}
 800c7aa:	4770      	bx	lr

0800c7ac <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>:

int32_t FFBWheel::getEncValue(EncoderLocal* enc,uint16_t degrees){
 800c7ac:	b590      	push	{r4, r7, lr}
 800c7ae:	b089      	sub	sp, #36	; 0x24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	80fb      	strh	r3, [r7, #6]
	if(enc == nullptr){
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d102      	bne.n	800c7c6 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x1a>
			return 0x7fff; // Return center if no encoder present
 800c7c0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800c7c4:	e06f      	b.n	800c8a6 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0xfa>
	}

	enc->currentPosition = enc->getPos();
 800c7c6:	68b8      	ldr	r0, [r7, #8]
 800c7c8:	f7fe fd52 	bl	800b270 <_ZN12EncoderLocal6getPosEv>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	61da      	str	r2, [r3, #28]
	enc->positionChange = enc->currentPosition - enc->lastPosition;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	69da      	ldr	r2, [r3, #28]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	1ad2      	subs	r2, r2, r3
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	63da      	str	r2, [r3, #60]	; 0x3c
	uint32_t currentEncoderTime = (int32_t) HAL_GetTick();
 800c7e0:	f7f5 fc8a 	bl	80020f8 <HAL_GetTick>
 800c7e4:	61f8      	str	r0, [r7, #28]
	int16_t diffTime = (int16_t)(currentEncoderTime -  enc->lastEncoderTime) ;
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	837b      	strh	r3, [r7, #26]
	if (diffTime > 0) {
 800c7f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	dd21      	ble.n	800c842 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x96>
		enc->currentVelocity = enc->positionChange / diffTime;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c802:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c806:	fb92 f2f3 	sdiv	r2, r2, r3
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	629a      	str	r2, [r3, #40]	; 0x28
		enc->currentAcceleration = (abs(enc->currentVelocity) - abs(enc->lastVelocity)) / diffTime;
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff fb31 	bl	800be7a <_ZSt3absl>
 800c818:	4604      	mov	r4, r0
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81e:	4618      	mov	r0, r3
 800c820:	f7ff fb2b 	bl	800be7a <_ZSt3absl>
 800c824:	4603      	mov	r3, r0
 800c826:	1ae2      	subs	r2, r4, r3
 800c828:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c82c:	fb92 f2f3 	sdiv	r2, r2, r3
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	635a      	str	r2, [r3, #52]	; 0x34
		enc->lastEncoderTime = currentEncoderTime;
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	69fa      	ldr	r2, [r7, #28]
 800c838:	645a      	str	r2, [r3, #68]	; 0x44
		enc->lastVelocity = enc->currentVelocity;
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	enc->lastPosition = enc->currentPosition;
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	69da      	ldr	r2, [r3, #28]
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	621a      	str	r2, [r3, #32]

	float angle = 360.0*((float)enc->currentPosition/(float)enc->getPosCpr());
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	69db      	ldr	r3, [r3, #28]
 800c84e:	4618      	mov	r0, r3
 800c850:	f7f4 fa24 	bl	8000c9c <__aeabi_i2f>
 800c854:	4604      	mov	r4, r0
 800c856:	68b8      	ldr	r0, [r7, #8]
 800c858:	f7fe fd96 	bl	800b388 <_ZN12EncoderLocal9getPosCprEv>
 800c85c:	4603      	mov	r3, r0
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f4 fa18 	bl	8000c94 <__aeabi_ui2f>
 800c864:	4603      	mov	r3, r0
 800c866:	4619      	mov	r1, r3
 800c868:	4620      	mov	r0, r4
 800c86a:	f7f4 fb1f 	bl	8000eac <__aeabi_fdiv>
 800c86e:	4603      	mov	r3, r0
 800c870:	490f      	ldr	r1, [pc, #60]	; (800c8b0 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x104>)
 800c872:	4618      	mov	r0, r3
 800c874:	f7f4 fa66 	bl	8000d44 <__aeabi_fmul>
 800c878:	4603      	mov	r3, r0
 800c87a:	617b      	str	r3, [r7, #20]
	int32_t val = (0xffff / (float)degrees) * angle;
 800c87c:	88fb      	ldrh	r3, [r7, #6]
 800c87e:	4618      	mov	r0, r3
 800c880:	f7f4 fa08 	bl	8000c94 <__aeabi_ui2f>
 800c884:	4603      	mov	r3, r0
 800c886:	4619      	mov	r1, r3
 800c888:	480a      	ldr	r0, [pc, #40]	; (800c8b4 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x108>)
 800c88a:	f7f4 fb0f 	bl	8000eac <__aeabi_fdiv>
 800c88e:	4603      	mov	r3, r0
 800c890:	6979      	ldr	r1, [r7, #20]
 800c892:	4618      	mov	r0, r3
 800c894:	f7f4 fa56 	bl	8000d44 <__aeabi_fmul>
 800c898:	4603      	mov	r3, r0
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f4 fc18 	bl	80010d0 <__aeabi_f2iz>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	613b      	str	r3, [r7, #16]
	return val;
 800c8a4:	693b      	ldr	r3, [r7, #16]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3724      	adds	r7, #36	; 0x24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd90      	pop	{r4, r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	43b40000 	.word	0x43b40000
 800c8b4:	477fff00 	.word	0x477fff00

0800c8b8 <_ZN8FFBWheel11send_reportEv>:


void FFBWheel::send_report(){
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
	extern USBD_HandleTypeDef hUsbDeviceFS;

	// Read buttons
	reportHID.buttons = 0;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	uint32_t buf = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60bb      	str	r3, [r7, #8]
	btns->readButtons(&buf);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8e2:	f107 0208 	add.w	r2, r7, #8
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f004 fc3f 	bl	801116c <_ZN12LocalButtons11readButtonsEPm>
	reportHID.buttons = buf;
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8c3 208d 	str.w	r2, [r3, #141]	; 0x8d

	// Encoder
	reportHID.X = clip(lastScaledEnc,-0x7fff,0x7fff);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c8fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c900:	4953      	ldr	r1, [pc, #332]	; (800ca50 <_ZN8FFBWheel11send_reportEv+0x198>)
 800c902:	4618      	mov	r0, r3
 800c904:	f000 f9e8 	bl	800ccd8 <_Z4clipIliET_S0_T0_S1_>
 800c908:	4603      	mov	r3, r0
 800c90a:	b21a      	sxth	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8a3 2091 	strh.w	r2, [r3, #145]	; 0x91
	// Analog values read by DMA
	uint16_t axes = this->conf.axes;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800c918:	81fb      	strh	r3, [r7, #14]
	reportHID.Y 	=  	(axes & 0x01 << 1) ? ((adc_buf[0] & 0xFFF) << 4)	-0x7fff : 0;
 800c91a:	89fb      	ldrh	r3, [r7, #14]
 800c91c:	f003 0302 	and.w	r3, r3, #2
 800c920:	2b00      	cmp	r3, #0
 800c922:	d00e      	beq.n	800c942 <_ZN8FFBWheel11send_reportEv+0x8a>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	011b      	lsls	r3, r3, #4
 800c92e:	b29b      	uxth	r3, r3
 800c930:	f023 030f 	bic.w	r3, r3, #15
 800c934:	b29b      	uxth	r3, r3
 800c936:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c93a:	3b7f      	subs	r3, #127	; 0x7f
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	b21a      	sxth	r2, r3
 800c940:	e000      	b.n	800c944 <_ZN8FFBWheel11send_reportEv+0x8c>
 800c942:	2200      	movs	r2, #0
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8a3 2093 	strh.w	r2, [r3, #147]	; 0x93
	reportHID.Z		=  	(axes & 0x01 << 2) ? ((adc_buf[1] & 0xFFF) << 4)	-0x7fff : 0;
 800c94a:	89fb      	ldrh	r3, [r7, #14]
 800c94c:	f003 0304 	and.w	r3, r3, #4
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00e      	beq.n	800c972 <_ZN8FFBWheel11send_reportEv+0xba>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	011b      	lsls	r3, r3, #4
 800c95e:	b29b      	uxth	r3, r3
 800c960:	f023 030f 	bic.w	r3, r3, #15
 800c964:	b29b      	uxth	r3, r3
 800c966:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c96a:	3b7f      	subs	r3, #127	; 0x7f
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	b21a      	sxth	r2, r3
 800c970:	e000      	b.n	800c974 <_ZN8FFBWheel11send_reportEv+0xbc>
 800c972:	2200      	movs	r2, #0
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8a3 2095 	strh.w	r2, [r3, #149]	; 0x95
	reportHID.RX	=  	(axes & 0x01 << 3) ? ((adc_buf[2] & 0xFFF) << 4)	-0x7fff : 0;
 800c97a:	89fb      	ldrh	r3, [r7, #14]
 800c97c:	f003 0308 	and.w	r3, r3, #8
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00e      	beq.n	800c9a2 <_ZN8FFBWheel11send_reportEv+0xea>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	011b      	lsls	r3, r3, #4
 800c98e:	b29b      	uxth	r3, r3
 800c990:	f023 030f 	bic.w	r3, r3, #15
 800c994:	b29b      	uxth	r3, r3
 800c996:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c99a:	3b7f      	subs	r3, #127	; 0x7f
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	b21a      	sxth	r2, r3
 800c9a0:	e000      	b.n	800c9a4 <_ZN8FFBWheel11send_reportEv+0xec>
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8a3 2097 	strh.w	r2, [r3, #151]	; 0x97
	reportHID.RY	=	(axes & 0x01 << 4) ? ((adc_buf[3] & 0xFFF) << 4)	-0x7fff : 0;
 800c9aa:	89fb      	ldrh	r3, [r7, #14]
 800c9ac:	f003 0310 	and.w	r3, r3, #16
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00e      	beq.n	800c9d2 <_ZN8FFBWheel11send_reportEv+0x11a>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	011b      	lsls	r3, r3, #4
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	f023 030f 	bic.w	r3, r3, #15
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c9ca:	3b7f      	subs	r3, #127	; 0x7f
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	b21a      	sxth	r2, r3
 800c9d0:	e000      	b.n	800c9d4 <_ZN8FFBWheel11send_reportEv+0x11c>
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8a3 2099 	strh.w	r2, [r3, #153]	; 0x99
	reportHID.RZ	= 	(axes & 0x01 << 5) ? ((adc_buf[4] & 0xFFF) << 4)	-0x7fff : 0;
 800c9da:	89fb      	ldrh	r3, [r7, #14]
 800c9dc:	f003 0320 	and.w	r3, r3, #32
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00e      	beq.n	800ca02 <_ZN8FFBWheel11send_reportEv+0x14a>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	011b      	lsls	r3, r3, #4
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	f023 030f 	bic.w	r3, r3, #15
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800c9fa:	3b7f      	subs	r3, #127	; 0x7f
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	b21a      	sxth	r2, r3
 800ca00:	e000      	b.n	800ca04 <_ZN8FFBWheel11send_reportEv+0x14c>
 800ca02:	2200      	movs	r2, #0
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8a3 209b 	strh.w	r2, [r3, #155]	; 0x9b
	reportHID.Slider= 	(axes & 0x01 << 6) ? ((adc_buf[5] & 0xFFF) << 4)	-0x7fff : 0;
 800ca0a:	89fb      	ldrh	r3, [r7, #14]
 800ca0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00e      	beq.n	800ca32 <_ZN8FFBWheel11send_reportEv+0x17a>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	011b      	lsls	r3, r3, #4
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	f023 030f 	bic.w	r3, r3, #15
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800ca2a:	3b7f      	subs	r3, #127	; 0x7f
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	b21a      	sxth	r2, r3
 800ca30:	e000      	b.n	800ca34 <_ZN8FFBWheel11send_reportEv+0x17c>
 800ca32:	2200      	movs	r2, #0
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reinterpret_cast<uint8_t*>(&reportHID), sizeof(reportHID_t));
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	338c      	adds	r3, #140	; 0x8c
 800ca3e:	2213      	movs	r2, #19
 800ca40:	4619      	mov	r1, r3
 800ca42:	4804      	ldr	r0, [pc, #16]	; (800ca54 <_ZN8FFBWheel11send_reportEv+0x19c>)
 800ca44:	f008 fa34 	bl	8014eb0 <USBD_CUSTOM_HID_SendReport>

}
 800ca48:	bf00      	nop
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	ffff8001 	.word	0xffff8001
 800ca54:	20000918 	.word	0x20000918

0800ca58 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:

void FFBWheel::timerElapsed(TIM_HandleTypeDef* htim){
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
	if(htim == this->timer_update){
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca66:	683a      	ldr	r2, [r7, #0]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d102      	bne.n	800ca72 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef+0x1a>
		update_flag = true;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	739a      	strb	r2, [r3, #14]
	}
}
 800ca72:	bf00      	nop
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bc80      	pop	{r7}
 800ca7a:	4770      	bx	lr

0800ca7c <_ZThn4_N8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:
	void cdcRcv(char* Buf, uint32_t *Len);

	static FFBWheelConfig decodeConf();

	void adcUpd(volatile uint32_t* ADC_BUF);
	void timerElapsed(TIM_HandleTypeDef* htim);
 800ca7c:	f1a0 0004 	sub.w	r0, r0, #4
 800ca80:	f7ff bfea 	b.w	800ca58 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>

0800ca84 <_ZN8FFBWheel6cdcRcvEPcPm>:

void FFBWheel::cdcRcv(char* Buf, uint32_t *Len){
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
	if(this->parser.add(Buf, Len)){
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	3310      	adds	r3, #16
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	68b9      	ldr	r1, [r7, #8]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7fc f8fd 	bl	8008c98 <_ZN9CmdParser3addEPcPm>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d013      	beq.n	800cacc <_ZN8FFBWheel6cdcRcvEPcPm+0x48>
		executeCommands(this->parser.parse());
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f103 0210 	add.w	r2, r3, #16
 800caaa:	f107 0314 	add.w	r3, r7, #20
 800caae:	4611      	mov	r1, r2
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fc f953 	bl	8008d5c <_ZN9CmdParser5parseEv>
 800cab6:	f107 0314 	add.w	r3, r7, #20
 800caba:	4619      	mov	r1, r3
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f000 f9c3 	bl	800ce48 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>
 800cac2:	f107 0314 	add.w	r3, r7, #20
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 f91e 	bl	800cd08 <_ZNSt6vectorI13ParsedCommandSaIS0_EED1Ev>
	}
}
 800cacc:	bf00      	nop
 800cace:	3720      	adds	r7, #32
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <_ZN8FFBWheel7usbInitEv>:

void FFBWheel::usbInit(){
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
	usbInit_HID_Wheel();
 800cadc:	f001 fd14 	bl	800e508 <_Z17usbInit_HID_Wheelv>
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <_ZN8FFBWheel3SOFEv>:
void FFBWheel::SOF(){
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
	usb_update_flag = true;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	735a      	strb	r2, [r3, #13]
	// USB clocked update callback
}
 800caf6:	bf00      	nop
 800caf8:	370c      	adds	r7, #12
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bc80      	pop	{r7}
 800cafe:	4770      	bx	lr

0800cb00 <_ZN8FFBWheel10decodeConfEv>:

FFBWheelConfig FFBWheel::decodeConf(){
 800cb00:	b5b0      	push	{r4, r5, r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
	uint8_t len = sizeof(FFBWheelConfig);
 800cb08:	231e      	movs	r3, #30
 800cb0a:	75fb      	strb	r3, [r7, #23]
	len = len / 4 + (len % 4 != 0 ? 1 : 0);
 800cb0c:	7dfb      	ldrb	r3, [r7, #23]
 800cb0e:	089b      	lsrs	r3, r3, #2
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	7dfa      	ldrb	r2, [r7, #23]
 800cb14:	f002 0203 	and.w	r2, r2, #3
 800cb18:	2a00      	cmp	r2, #0
 800cb1a:	d001      	beq.n	800cb20 <_ZN8FFBWheel10decodeConfEv+0x20>
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	e000      	b.n	800cb22 <_ZN8FFBWheel10decodeConfEv+0x22>
 800cb20:	2200      	movs	r2, #0
 800cb22:	4413      	add	r3, r2
 800cb24:	75fb      	strb	r3, [r7, #23]
	uint32_t* buf = new uint32_t[len];
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
 800cb28:	4a15      	ldr	r2, [pc, #84]	; (800cb80 <_ZN8FFBWheel10decodeConfEv+0x80>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d801      	bhi.n	800cb32 <_ZN8FFBWheel10decodeConfEv+0x32>
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	e001      	b.n	800cb36 <_ZN8FFBWheel10decodeConfEv+0x36>
 800cb32:	f04f 33ff 	mov.w	r3, #4294967295
 800cb36:	4618      	mov	r0, r3
 800cb38:	f008 fbb8 	bl	80152ac <_Znaj>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	613b      	str	r3, [r7, #16]
	FFBWheelConfig* conf;

	EE_Reads(0x00, len, buf);
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	4619      	mov	r1, r3
 800cb48:	2000      	movs	r0, #0
 800cb4a:	f7f4 fb6b 	bl	8001224 <EE_Reads>

	conf = (FFBWheelConfig*)buf;
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	60fb      	str	r3, [r7, #12]
	return *conf;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	6814      	ldr	r4, [r2, #0]
 800cb58:	6850      	ldr	r0, [r2, #4]
 800cb5a:	6891      	ldr	r1, [r2, #8]
 800cb5c:	68d5      	ldr	r5, [r2, #12]
 800cb5e:	601c      	str	r4, [r3, #0]
 800cb60:	6058      	str	r0, [r3, #4]
 800cb62:	6099      	str	r1, [r3, #8]
 800cb64:	60dd      	str	r5, [r3, #12]
 800cb66:	6914      	ldr	r4, [r2, #16]
 800cb68:	6950      	ldr	r0, [r2, #20]
 800cb6a:	6991      	ldr	r1, [r2, #24]
 800cb6c:	611c      	str	r4, [r3, #16]
 800cb6e:	6158      	str	r0, [r3, #20]
 800cb70:	6199      	str	r1, [r3, #24]
 800cb72:	8b92      	ldrh	r2, [r2, #28]
 800cb74:	839a      	strh	r2, [r3, #28]
}
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bdb0      	pop	{r4, r5, r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	1ffffffe 	.word	0x1ffffffe

0800cb84 <_ZN8FFBWheel11initEncoderEv>:

void FFBWheel::initEncoder()
{
 800cb84:	b590      	push	{r4, r7, lr}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
	enc->setPpr(conf.encoderPPR);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb96:	4619      	mov	r1, r3
 800cb98:	4610      	mov	r0, r2
 800cb9a:	f7fe fc00 	bl	800b39e <_ZN12EncoderLocal6setPprEm>
	enc->maxAngle = conf.degreesOfRotation;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800cba8:	821a      	strh	r2, [r3, #16]
	enc->maxValue = (float)enc->maxAngle / 2 / 360 * enc->ppr;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbae:	8a1b      	ldrh	r3, [r3, #16]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7f4 f86f 	bl	8000c94 <__aeabi_ui2f>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7f4 f975 	bl	8000eac <__aeabi_fdiv>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	491d      	ldr	r1, [pc, #116]	; (800cc3c <_ZN8FFBWheel11initEncoderEv+0xb8>)
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7f4 f970 	bl	8000eac <__aeabi_fdiv>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	461c      	mov	r4, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f4 f860 	bl	8000c9c <__aeabi_i2f>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	4619      	mov	r1, r3
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f7f4 f8af 	bl	8000d44 <__aeabi_fmul>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	461a      	mov	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800cbee:	4610      	mov	r0, r2
 800cbf0:	f7f4 fa6e 	bl	80010d0 <__aeabi_f2iz>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	6163      	str	r3, [r4, #20]
	enc->minValue = -enc->maxValue;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbfc:	695a      	ldr	r2, [r3, #20]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc02:	4252      	negs	r2, r2
 800cc04:	619a      	str	r2, [r3, #24]
	enc->currentPosition = 0;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	61da      	str	r2, [r3, #28]
	enc->lastPosition = 0;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc12:	2200      	movs	r2, #0
 800cc14:	621a      	str	r2, [r3, #32]
	enc->correctPosition = 0;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	625a      	str	r2, [r3, #36]	; 0x24
	enc->lastEncoderTime = (uint32_t)HAL_GetTick();
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800cc22:	f7f5 fa69 	bl	80020f8 <HAL_GetTick>
 800cc26:	4603      	mov	r3, r0
 800cc28:	6463      	str	r3, [r4, #68]	; 0x44
	enc->lastVelocity = 0;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc2e:	2200      	movs	r2, #0
 800cc30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800cc32:	bf00      	nop
 800cc34:	370c      	adds	r7, #12
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd90      	pop	{r4, r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	43b40000 	.word	0x43b40000

0800cc40 <_Z4clipIlsET_S0_T0_S1_>:
		return 0;
	}
}

template<class T,class C>
T clip(T v, C l, C h)
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	807b      	strh	r3, [r7, #2]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	803b      	strh	r3, [r7, #0]
{
  return { v > h ? h : v < l ? l : v };
 800cc50:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	dd02      	ble.n	800cc60 <_Z4clipIlsET_S0_T0_S1_+0x20>
 800cc5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cc5e:	e005      	b.n	800cc6c <_Z4clipIlsET_S0_T0_S1_+0x2c>
 800cc60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4293      	cmp	r3, r2
 800cc68:	bfb8      	it	lt
 800cc6a:	4613      	movlt	r3, r2
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bc80      	pop	{r7}
 800cc74:	4770      	bx	lr

0800cc76 <_Z8cliptestIllEaT_T0_S1_>:
int8_t cliptest(T v, C l, C h)
 800cc76:	b480      	push	{r7}
 800cc78:	b085      	sub	sp, #20
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	60f8      	str	r0, [r7, #12]
 800cc7e:	60b9      	str	r1, [r7, #8]
 800cc80:	607a      	str	r2, [r7, #4]
	if(v > h){
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	dd01      	ble.n	800cc8e <_Z8cliptestIllEaT_T0_S1_+0x18>
		return 1;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e007      	b.n	800cc9e <_Z8cliptestIllEaT_T0_S1_+0x28>
	}else if(v < l){
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	da02      	bge.n	800cc9c <_Z8cliptestIllEaT_T0_S1_+0x26>
		return -1;
 800cc96:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9a:	e000      	b.n	800cc9e <_Z8cliptestIllEaT_T0_S1_+0x28>
		return 0;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3714      	adds	r7, #20
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bc80      	pop	{r7}
 800cca6:	4770      	bx	lr

0800cca8 <_Z4clipIllET_S0_T0_S1_>:
T clip(T v, C l, C h)
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
  return { v > h ? h : v < l ? l : v };
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	dc07      	bgt.n	800cccc <_Z4clipIllET_S0_T0_S1_+0x24>
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	da01      	bge.n	800ccc8 <_Z4clipIllET_S0_T0_S1_+0x20>
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	e002      	b.n	800ccce <_Z4clipIllET_S0_T0_S1_+0x26>
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	e000      	b.n	800ccce <_Z4clipIllET_S0_T0_S1_+0x26>
 800cccc:	687b      	ldr	r3, [r7, #4]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bc80      	pop	{r7}
 800ccd6:	4770      	bx	lr

0800ccd8 <_Z4clipIliET_S0_T0_S1_>:
T clip(T v, C l, C h)
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
  return { v > h ? h : v < l ? l : v };
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	dc07      	bgt.n	800ccfc <_Z4clipIliET_S0_T0_S1_+0x24>
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	da01      	bge.n	800ccf8 <_Z4clipIliET_S0_T0_S1_+0x20>
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	e002      	b.n	800ccfe <_Z4clipIliET_S0_T0_S1_+0x26>
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	e000      	b.n	800ccfe <_Z4clipIliET_S0_T0_S1_+0x26>
 800ccfc:	687b      	ldr	r3, [r7, #4]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bc80      	pop	{r7}
 800cd06:	4770      	bx	lr

0800cd08 <_ZNSt6vectorI13ParsedCommandSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800cd08:	b5b0      	push	{r4, r5, r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681c      	ldr	r4, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7fc fcc8 	bl	80096b0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800cd20:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cd22:	461a      	mov	r2, r3
 800cd24:	4629      	mov	r1, r5
 800cd26:	4620      	mov	r0, r4
 800cd28:	f7fc fccc 	bl	80096c4 <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 f812 	bl	800cd58 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4618      	mov	r0, r3
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bdb0      	pop	{r4, r5, r7, pc}

0800cd3e <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b082      	sub	sp, #8
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 f826 	bl	800cd98 <_ZNSaI13ParsedCommandED1Ev>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3708      	adds	r7, #8
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
	...

0800cd58 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6819      	ldr	r1, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800cd68:	461a      	mov	r2, r3
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	109b      	asrs	r3, r3, #2
 800cd72:	4a08      	ldr	r2, [pc, #32]	; (800cd94 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev+0x3c>)
 800cd74:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800cd78:	461a      	mov	r2, r3
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f7fc feac 	bl	8009ad8 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7ff ffdb 	bl	800cd3e <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implD1Ev>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	38e38e39 	.word	0x38e38e39

0800cd98 <_ZNSaI13ParsedCommandED1Ev>:
      ~allocator() throw() { }
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 f805 	bl	800cdb0 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandED1Ev>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bc80      	pop	{r7}
 800cdc2:	4770      	bx	lr

0800cdc4 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af02      	add	r7, sp, #8
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	4b04      	ldr	r3, [pc, #16]	; (800cde8 <_ZNSt7__cxx119to_stringEi+0x24>)
 800cdd6:	2210      	movs	r2, #16
 800cdd8:	4904      	ldr	r1, [pc, #16]	; (800cdec <_ZNSt7__cxx119to_stringEi+0x28>)
 800cdda:	f001 fa2d 	bl	800e238 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	080187d4 	.word	0x080187d4
 800cdec:	08018049 	.word	0x08018049

0800cdf0 <_ZNSt7__cxx119to_stringEl>:
					   4 * sizeof(unsigned),
					   "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af02      	add	r7, sp, #8
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
					   "%ld", __val); }
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	4b04      	ldr	r3, [pc, #16]	; (800ce14 <_ZNSt7__cxx119to_stringEl+0x24>)
 800ce02:	2210      	movs	r2, #16
 800ce04:	4904      	ldr	r1, [pc, #16]	; (800ce18 <_ZNSt7__cxx119to_stringEl+0x28>)
 800ce06:	f001 fa17 	bl	800e238 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	080187d8 	.word	0x080187d8
 800ce18:	08018049 	.word	0x08018049

0800ce1c <_ZNSt7__cxx119to_stringEm>:

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af02      	add	r7, sp, #8
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	4b04      	ldr	r3, [pc, #16]	; (800ce40 <_ZNSt7__cxx119to_stringEm+0x24>)
 800ce2e:	2210      	movs	r2, #16
 800ce30:	4904      	ldr	r1, [pc, #16]	; (800ce44 <_ZNSt7__cxx119to_stringEm+0x28>)
 800ce32:	f001 fa01 	bl	800e238 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	080187dc 	.word	0x080187dc
 800ce44:	08018049 	.word	0x08018049

0800ce48 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>:
		{128,0,0},
		{0,128,0},
		{0,0,128}
};

void FFBWheel::executeCommands(std::vector<ParsedCommand> commands){
 800ce48:	b590      	push	{r4, r7, lr}
 800ce4a:	b099      	sub	sp, #100	; 0x64
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
	std::string reply;
 800ce52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce56:	4618      	mov	r0, r3
 800ce58:	f008 fb48 	bl	80154ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	extern std::vector<CommandHandler*> cmdHandlers;
	for(ParsedCommand cmd : commands){
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce60:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ce62:	f7fc ff27 	bl	8009cb4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>
 800ce66:	4603      	mov	r3, r0
 800ce68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce6a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ce6c:	f7fc fca7 	bl	80097be <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>
 800ce70:	4603      	mov	r3, r0
 800ce72:	637b      	str	r3, [r7, #52]	; 0x34
 800ce74:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ce78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f001 fa12 	bl	800e2a8 <_ZN9__gnu_cxxneIP13ParsedCommandSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d07f      	beq.n	800cf8a <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x142>
 800ce8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f001 fa32 	bl	800e2f8 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEdeEv>
 800ce94:	4602      	mov	r2, r0
 800ce96:	f107 0308 	add.w	r3, r7, #8
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fc fe7c 	bl	8009b9a <_ZN13ParsedCommandC1ERKS_>
		if(!executeSysCommand(&cmd,&reply)){
 800cea2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cea6:	f107 0308 	add.w	r3, r7, #8
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f895 	bl	800cfdc <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	f083 0301 	eor.w	r3, r3, #1
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d03b      	beq.n	800cf36 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xee>
			// Call all command handlers
			for(CommandHandler* handler : cmdHandlers){
 800cebe:	4b46      	ldr	r3, [pc, #280]	; (800cfd8 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x190>)
 800cec0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cec2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cec4:	f7fd fcb6 	bl	800a834 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800cec8:	4603      	mov	r3, r0
 800ceca:	633b      	str	r3, [r7, #48]	; 0x30
 800cecc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cece:	f7fd fddb 	bl	800aa88 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800ced2:	4603      	mov	r3, r0
 800ced4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ced6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ceda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cede:	4611      	mov	r1, r2
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fd fe88 	bl	800abf6 <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d024      	beq.n	800cf36 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xee>
 800ceec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cef0:	4618      	mov	r0, r3
 800cef2:	f001 fa1b 	bl	800e32c <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 800cef6:	4603      	mov	r3, r0
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	657b      	str	r3, [r7, #84]	; 0x54
				if(handler->hasCommands())
 800cefc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3308      	adds	r3, #8
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cf06:	4798      	blx	r3
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00c      	beq.n	800cf28 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xe0>
					if(handler->command(&cmd,&reply))
 800cf0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3310      	adds	r3, #16
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cf1a:	f107 0108 	add.w	r1, r7, #8
 800cf1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cf20:	4798      	blx	r3
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d105      	bne.n	800cf34 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xec>
			for(CommandHandler* handler : cmdHandlers){
 800cf28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f001 f9ee 	bl	800e30e <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEppEv>
 800cf32:	e7d0      	b.n	800ced6 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x8e>
						break; // Stop after this class if finished flag is returned
 800cf34:	bf00      	nop
			}

		}
		if(!reply.empty() && reply.back()!='\n'){
 800cf36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f008 fb2f 	bl	801559e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800cf40:	4603      	mov	r3, r0
 800cf42:	f083 0301 	eor.w	r3, r3, #1
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00a      	beq.n	800cf62 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11a>
 800cf4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf50:	4618      	mov	r0, r3
 800cf52:	f008 fb2c 	bl	80155ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800cf56:	4603      	mov	r3, r0
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b0a      	cmp	r3, #10
 800cf5c:	d001      	beq.n	800cf62 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11a>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e000      	b.n	800cf64 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11c>
 800cf62:	2300      	movs	r3, #0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d005      	beq.n	800cf74 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x12c>
			reply+='\n';
 800cf68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf6c:	210a      	movs	r1, #10
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f008 fb40 	bl	80155f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	for(ParsedCommand cmd : commands){
 800cf74:	f107 0308 	add.w	r3, r7, #8
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7fb fee2 	bl	8008d42 <_ZN13ParsedCommandD1Ev>
 800cf7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf82:	4618      	mov	r0, r3
 800cf84:	f001 f9a8 	bl	800e2d8 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEppEv>
 800cf88:	e774      	b.n	800ce74 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x2c>
		}
	}
	if(reply.length()>0){
 800cf8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f008 fafe 	bl	8015590 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	bf14      	ite	ne
 800cf9a:	2301      	movne	r3, #1
 800cf9c:	2300      	moveq	r3, #0
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d010      	beq.n	800cfc6 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x17e>
		CDC_Transmit_FS(reply.c_str(), reply.length());
 800cfa4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f008 fb7d 	bl	80156a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800cfae:	4604      	mov	r4, r0
 800cfb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f008 faeb 	bl	8015590 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f006 f8af 	bl	8013124 <CDC_Transmit_FS>
	std::string reply;
 800cfc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f008 faaf 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800cfd0:	bf00      	nop
 800cfd2:	3764      	adds	r7, #100	; 0x64
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd90      	pop	{r4, r7, pc}
 800cfd8:	20000b58 	.word	0x20000b58

0800cfdc <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool FFBWheel::executeSysCommand(ParsedCommand* cmd,std::string* reply){
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
	bool flag = true;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	75fb      	strb	r3, [r7, #23]
	if(cmd->cmd == "help"){
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	491b      	ldr	r1, [pc, #108]	; (800d05c <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>)
 800cff0:	4618      	mov	r0, r3
 800cff2:	f001 f9a6 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00c      	beq.n	800d016 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
		*reply += parser.helpstring;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	332c      	adds	r3, #44	; 0x2c
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f008 fb22 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
		*reply += "Commands:format (Erase flash)";
 800d008:	4915      	ldr	r1, [pc, #84]	; (800d060 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>)
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f008 fb48 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		flag = false; // Continue to user commands
 800d010:	2300      	movs	r3, #0
 800d012:	75fb      	strb	r3, [r7, #23]
 800d014:	e01d      	b.n	800d052 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
	}else if(cmd->cmd == "format"){
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	4912      	ldr	r1, [pc, #72]	; (800d064 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>)
 800d01a:	4618      	mov	r0, r3
 800d01c:	f001 f991 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d013      	beq.n	800d04e <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x72>
		if(cmd->type == CMDtype::set && cmd->val==1){
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	6a1b      	ldr	r3, [r3, #32]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10a      	bne.n	800d044 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	69db      	ldr	r3, [r3, #28]
 800d032:	2b01      	cmp	r3, #1
 800d034:	d106      	bne.n	800d044 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
			HAL_FLASH_Unlock();
 800d036:	f7f5 ff87 	bl	8002f48 <HAL_FLASH_Unlock>
			EE_Format();
 800d03a:	f7f4 f8c9 	bl	80011d0 <EE_Format>
			HAL_FLASH_Lock();
 800d03e:	f7f5 ffa9 	bl	8002f94 <HAL_FLASH_Lock>
 800d042:	e006      	b.n	800d052 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
		}else{
			*reply += "format=1 will ERASE ALL stored variables. Be careful!";
 800d044:	4908      	ldr	r1, [pc, #32]	; (800d068 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f008 fb2a 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d04c:	e001      	b.n	800d052 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
		}
	}else{
		flag = false;
 800d04e:	2300      	movs	r3, #0
 800d050:	75fb      	strb	r3, [r7, #23]
	}
	return flag;
 800d052:	7dfb      	ldrb	r3, [r7, #23]
}
 800d054:	4618      	mov	r0, r3
 800d056:	3718      	adds	r7, #24
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	080187e0 	.word	0x080187e0
 800d060:	080187e8 	.word	0x080187e8
 800d064:	08018808 	.word	0x08018808
 800d068:	08018810 	.word	0x08018810

0800d06c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
volatile const SimDisplayPacket* telemetry;
bool FFBWheel::command(ParsedCommand* cmd,std::string* reply){
 800d06c:	b590      	push	{r4, r7, lr}
 800d06e:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
 800d072:	af00      	add	r7, sp, #0
 800d074:	f107 030c 	add.w	r3, r7, #12
 800d078:	6018      	str	r0, [r3, #0]
 800d07a:	f107 0308 	add.w	r3, r7, #8
 800d07e:	6019      	str	r1, [r3, #0]
 800d080:	1d3b      	adds	r3, r7, #4
 800d082:	601a      	str	r2, [r3, #0]
	bool flag = true;
 800d084:	2301      	movs	r3, #1
 800d086:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
	// ------------ General commands ----------------
	if(cmd->cmd == "save"){
 800d08a:	f107 0308 	add.w	r3, r7, #8
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	49b3      	ldr	r1, [pc, #716]	; (800d360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f4>)
 800d092:	4618      	mov	r0, r3
 800d094:	f001 f955 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00b      	beq.n	800d0b6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a>
		this->saveFlash();
 800d09e:	f107 030c 	add.w	r3, r7, #12
 800d0a2:	6818      	ldr	r0, [r3, #0]
 800d0a4:	f7ff f97c 	bl	800c3a0 <_ZN8FFBWheel9saveFlashEv>
		*reply+="OK";
 800d0a8:	1d3b      	adds	r3, r7, #4
 800d0aa:	49ae      	ldr	r1, [pc, #696]	; (800d364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d0ac:	6818      	ldr	r0, [r3, #0]
 800d0ae:	f008 faf7 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d0b2:	f001 b8ad 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
	}else if(cmd->cmd == "zeroenc"){
 800d0b6:	f107 0308 	add.w	r3, r7, #8
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	49aa      	ldr	r1, [pc, #680]	; (800d368 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2fc>)
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f001 f93f 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d015      	beq.n	800d0f6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
		if(cmd->type == CMDtype::get){
 800d0ca:	f107 0308 	add.w	r3, r7, #8
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	6a1b      	ldr	r3, [r3, #32]
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	f041 809c 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
			this->enc->setPos(0);
 800d0d8:	f107 030c 	add.w	r3, r7, #12
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe f8d9 	bl	800b29a <_ZN12EncoderLocal6setPosEl>
			*reply += "OK";
 800d0e8:	1d3b      	adds	r3, r7, #4
 800d0ea:	499e      	ldr	r1, [pc, #632]	; (800d364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	f008 fad7 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d0f2:	f001 b88d 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}
	}else if(cmd->cmd == "maxPower"){
 800d0f6:	f107 0308 	add.w	r3, r7, #8
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	499b      	ldr	r1, [pc, #620]	; (800d36c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x300>)
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 f91f 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d037      	beq.n	800d17a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
		if(cmd->type == CMDtype::get){
 800d10a:	f107 0308 	add.w	r3, r7, #8
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6a1b      	ldr	r3, [r3, #32]
 800d112:	2b02      	cmp	r3, #2
 800d114:	d119      	bne.n	800d14a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>
			*reply+=std::to_string(conf.maxpower);
 800d116:	f107 030c 	add.w	r3, r7, #12
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d120:	461a      	mov	r2, r3
 800d122:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d126:	4611      	mov	r1, r2
 800d128:	4618      	mov	r0, r3
 800d12a:	f7ff fe4b 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d12e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d132:	1d3b      	adds	r3, r7, #4
 800d134:	4611      	mov	r1, r2
 800d136:	6818      	ldr	r0, [r3, #0]
 800d138:	f008 fa88 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d13c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d140:	4618      	mov	r0, r3
 800d142:	f008 f9f4 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d146:	f001 b863 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}else if(cmd->type == CMDtype::set){
 800d14a:	f107 0308 	add.w	r3, r7, #8
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6a1b      	ldr	r3, [r3, #32]
 800d152:	2b00      	cmp	r3, #0
 800d154:	f041 805c 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
			this->conf.maxpower = cmd->val;
 800d158:	f107 0308 	add.w	r3, r7, #8
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	69db      	ldr	r3, [r3, #28]
 800d160:	b29a      	uxth	r2, r3
 800d162:	f107 030c 	add.w	r3, r7, #12
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			*reply += "OK";
 800d16c:	1d3b      	adds	r3, r7, #4
 800d16e:	497d      	ldr	r1, [pc, #500]	; (800d364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d170:	6818      	ldr	r0, [r3, #0]
 800d172:	f008 fa95 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d176:	f001 b84b 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}
	}else if(cmd->cmd == "degrees"){
 800d17a:	f107 0308 	add.w	r3, r7, #8
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	497b      	ldr	r1, [pc, #492]	; (800d370 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x304>)
 800d182:	4618      	mov	r0, r3
 800d184:	f001 f8dd 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d079      	beq.n	800d282 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x216>
		if(cmd->type == CMDtype::get){
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	6a1b      	ldr	r3, [r3, #32]
 800d196:	2b02      	cmp	r3, #2
 800d198:	d119      	bne.n	800d1ce <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x162>
			*reply+=std::to_string(this->conf.degreesOfRotation);
 800d19a:	f107 030c 	add.w	r3, r7, #12
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7ff fe09 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d1b2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d1b6:	1d3b      	adds	r3, r7, #4
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	6818      	ldr	r0, [r3, #0]
 800d1bc:	f008 fa46 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d1c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f008 f9b2 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d1ca:	f001 b821 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}else if(cmd->type == CMDtype::set){
 800d1ce:	f107 0308 	add.w	r3, r7, #8
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	6a1b      	ldr	r3, [r3, #32]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f041 801a 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
			this->conf.degreesOfRotation = cmd->val;
 800d1dc:	f107 0308 	add.w	r3, r7, #8
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	69db      	ldr	r3, [r3, #28]
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	f107 030c 	add.w	r3, r7, #12
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			enc->maxAngle = conf.degreesOfRotation;
 800d1f0:	f107 030c 	add.w	r3, r7, #12
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1f8:	f107 020c 	add.w	r2, r7, #12
 800d1fc:	6812      	ldr	r2, [r2, #0]
 800d1fe:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800d202:	821a      	strh	r2, [r3, #16]
			enc->maxValue = (float)enc->maxAngle / 2 / 360 * enc->ppr;
 800d204:	f107 030c 	add.w	r3, r7, #12
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d20c:	8a1b      	ldrh	r3, [r3, #16]
 800d20e:	4618      	mov	r0, r3
 800d210:	f7f3 fd40 	bl	8000c94 <__aeabi_ui2f>
 800d214:	4603      	mov	r3, r0
 800d216:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7f3 fe46 	bl	8000eac <__aeabi_fdiv>
 800d220:	4603      	mov	r3, r0
 800d222:	4954      	ldr	r1, [pc, #336]	; (800d374 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x308>)
 800d224:	4618      	mov	r0, r3
 800d226:	f7f3 fe41 	bl	8000eac <__aeabi_fdiv>
 800d22a:	4603      	mov	r3, r0
 800d22c:	461c      	mov	r4, r3
 800d22e:	f107 030c 	add.w	r3, r7, #12
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	4618      	mov	r0, r3
 800d23a:	f7f3 fd2f 	bl	8000c9c <__aeabi_i2f>
 800d23e:	4603      	mov	r3, r0
 800d240:	4619      	mov	r1, r3
 800d242:	4620      	mov	r0, r4
 800d244:	f7f3 fd7e 	bl	8000d44 <__aeabi_fmul>
 800d248:	4603      	mov	r3, r0
 800d24a:	461a      	mov	r2, r3
 800d24c:	f107 030c 	add.w	r3, r7, #12
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800d254:	4610      	mov	r0, r2
 800d256:	f7f3 ff3b 	bl	80010d0 <__aeabi_f2iz>
 800d25a:	4603      	mov	r3, r0
 800d25c:	6163      	str	r3, [r4, #20]
			enc->minValue = -enc->maxValue;
 800d25e:	f107 030c 	add.w	r3, r7, #12
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d266:	695a      	ldr	r2, [r3, #20]
 800d268:	f107 030c 	add.w	r3, r7, #12
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d270:	4252      	negs	r2, r2
 800d272:	619a      	str	r2, [r3, #24]
			*reply += "OK";
 800d274:	1d3b      	adds	r3, r7, #4
 800d276:	493b      	ldr	r1, [pc, #236]	; (800d364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d278:	6818      	ldr	r0, [r3, #0]
 800d27a:	f008 fa11 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d27e:	f000 bfc7 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}
	}else if(cmd->cmd == "axismask"){
 800d282:	f107 0308 	add.w	r3, r7, #8
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	493b      	ldr	r1, [pc, #236]	; (800d378 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30c>)
 800d28a:	4618      	mov	r0, r3
 800d28c:	f001 f859 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d037      	beq.n	800d306 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x29a>
		if(cmd->type == CMDtype::get){
 800d296:	f107 0308 	add.w	r3, r7, #8
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	6a1b      	ldr	r3, [r3, #32]
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	d119      	bne.n	800d2d6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26a>
			*reply+=std::to_string(this->conf.axes);
 800d2a2:	f107 030c 	add.w	r3, r7, #12
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d2b2:	4611      	mov	r1, r2
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff fd85 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d2ba:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d2be:	1d3b      	adds	r3, r7, #4
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	6818      	ldr	r0, [r3, #0]
 800d2c4:	f008 f9c2 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d2c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f008 f92e 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d2d2:	f000 bf9d 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}else if(cmd->type == CMDtype::set){
 800d2d6:	f107 0308 	add.w	r3, r7, #8
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6a1b      	ldr	r3, [r3, #32]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f040 8796 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
			this->conf.axes = cmd->val;
 800d2e4:	f107 0308 	add.w	r3, r7, #8
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	69db      	ldr	r3, [r3, #28]
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	f107 030c 	add.w	r3, r7, #12
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			*reply += "OK";
 800d2f8:	1d3b      	adds	r3, r7, #4
 800d2fa:	491a      	ldr	r1, [pc, #104]	; (800d364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800d2fc:	6818      	ldr	r0, [r3, #0]
 800d2fe:	f008 f9cf 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d302:	f000 bf85 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}
	}else if(cmd->cmd == "ppr"){
 800d306:	f107 0308 	add.w	r3, r7, #8
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	491b      	ldr	r1, [pc, #108]	; (800d37c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x310>)
 800d30e:	4618      	mov	r0, r3
 800d310:	f001 f817 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d062      	beq.n	800d3e0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x374>
		if(cmd->type == CMDtype::get){
 800d31a:	f107 0308 	add.w	r3, r7, #8
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	2b02      	cmp	r3, #2
 800d324:	d12c      	bne.n	800d380 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x314>
			*reply+=std::to_string(this->enc->getPpr());
 800d326:	f107 030c 	add.w	r3, r7, #12
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe f81f 	bl	800b372 <_ZN12EncoderLocal6getPprEv>
 800d334:	4602      	mov	r2, r0
 800d336:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d33a:	4611      	mov	r1, r2
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7ff fd6d 	bl	800ce1c <_ZNSt7__cxx119to_stringEm>
 800d342:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800d346:	1d3b      	adds	r3, r7, #4
 800d348:	4611      	mov	r1, r2
 800d34a:	6818      	ldr	r0, [r3, #0]
 800d34c:	f008 f97e 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d350:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800d354:	4618      	mov	r0, r3
 800d356:	f008 f8ea 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d35a:	f000 bf59 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
 800d35e:	bf00      	nop
 800d360:	08018848 	.word	0x08018848
 800d364:	08018850 	.word	0x08018850
 800d368:	08018854 	.word	0x08018854
 800d36c:	0801885c 	.word	0x0801885c
 800d370:	08018868 	.word	0x08018868
 800d374:	43b40000 	.word	0x43b40000
 800d378:	08018870 	.word	0x08018870
 800d37c:	0801887c 	.word	0x0801887c
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 800d380:	f107 0308 	add.w	r3, r7, #8
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6a1b      	ldr	r3, [r3, #32]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d122      	bne.n	800d3d2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x366>
 800d38c:	f107 030c 	add.w	r3, r7, #12
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d394:	2b00      	cmp	r3, #0
 800d396:	d01c      	beq.n	800d3d2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x366>
			this->conf.encoderPPR = cmd->val;
 800d398:	f107 0308 	add.w	r3, r7, #8
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	69db      	ldr	r3, [r3, #28]
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	f107 030c 	add.w	r3, r7, #12
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			this->enc->setPpr(cmd->val);
 800d3ac:	f107 030c 	add.w	r3, r7, #12
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800d3b4:	f107 0308 	add.w	r3, r7, #8
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	69db      	ldr	r3, [r3, #28]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	4610      	mov	r0, r2
 800d3c0:	f7fd ffed 	bl	800b39e <_ZN12EncoderLocal6setPprEm>
			*reply += "OK";
 800d3c4:	1d3b      	adds	r3, r7, #4
 800d3c6:	49c0      	ldr	r1, [pc, #768]	; (800d6c8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d3c8:	6818      	ldr	r0, [r3, #0]
 800d3ca:	f008 f969 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d3ce:	f000 bf1f 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}else{
			*reply += "Err. Setup enctype first";
 800d3d2:	1d3b      	adds	r3, r7, #4
 800d3d4:	49bd      	ldr	r1, [pc, #756]	; (800d6cc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x660>)
 800d3d6:	6818      	ldr	r0, [r3, #0]
 800d3d8:	f008 f962 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d3dc:	f000 bf18 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}
	}else if(cmd->cmd == "adcmax"){
 800d3e0:	f107 0308 	add.w	r3, r7, #8
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	49ba      	ldr	r1, [pc, #744]	; (800d6d0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x664>)
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f000 ffaa 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d037      	beq.n	800d464 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f8>
			if(cmd->type == CMDtype::get){
 800d3f4:	f107 0308 	add.w	r3, r7, #8
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6a1b      	ldr	r3, [r3, #32]
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d119      	bne.n	800d434 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c8>
				*reply+=std::to_string(this->conf.maxAdcCount);
 800d400:	f107 030c 	add.w	r3, r7, #12
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800d40a:	461a      	mov	r2, r3
 800d40c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d410:	4611      	mov	r1, r2
 800d412:	4618      	mov	r0, r3
 800d414:	f7ff fcd6 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d418:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800d41c:	1d3b      	adds	r3, r7, #4
 800d41e:	4611      	mov	r1, r2
 800d420:	6818      	ldr	r0, [r3, #0]
 800d422:	f008 f913 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d426:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d42a:	4618      	mov	r0, r3
 800d42c:	f008 f87f 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d430:	f000 beee 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
			}else if(cmd->type == CMDtype::set){
 800d434:	f107 0308 	add.w	r3, r7, #8
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6a1b      	ldr	r3, [r3, #32]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f040 86e7 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				this->conf.maxAdcCount = cmd->val;
 800d442:	f107 0308 	add.w	r3, r7, #8
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	69db      	ldr	r3, [r3, #28]
 800d44a:	b2da      	uxtb	r2, r3
 800d44c:	f107 030c 	add.w	r3, r7, #12
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
				*reply += "OK";
 800d456:	1d3b      	adds	r3, r7, #4
 800d458:	499b      	ldr	r1, [pc, #620]	; (800d6c8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d45a:	6818      	ldr	r0, [r3, #0]
 800d45c:	f008 f920 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d460:	f000 bed6 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
			}
	}else if(cmd->cmd == "inverted"){
 800d464:	f107 0308 	add.w	r3, r7, #8
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	499a      	ldr	r1, [pc, #616]	; (800d6d4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x668>)
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 ff68 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d037      	beq.n	800d4e8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x47c>
				if(cmd->type == CMDtype::get){
 800d478:	f107 0308 	add.w	r3, r7, #8
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	6a1b      	ldr	r3, [r3, #32]
 800d480:	2b02      	cmp	r3, #2
 800d482:	d119      	bne.n	800d4b8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44c>
					*reply+=std::to_string(this->conf.inverted);
 800d484:	f107 030c 	add.w	r3, r7, #12
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800d48e:	461a      	mov	r2, r3
 800d490:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff fc94 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d49c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800d4a0:	1d3b      	adds	r3, r7, #4
 800d4a2:	4611      	mov	r1, r2
 800d4a4:	6818      	ldr	r0, [r3, #0]
 800d4a6:	f008 f8d1 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d4aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f008 f83d 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d4b4:	f000 beac 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800d4b8:	f107 0308 	add.w	r3, r7, #8
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6a1b      	ldr	r3, [r3, #32]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f040 86a5 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.inverted = cmd->val;
 800d4c6:	f107 0308 	add.w	r3, r7, #8
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	69db      	ldr	r3, [r3, #28]
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	f107 030c 	add.w	r3, r7, #12
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
					*reply += "OK";
 800d4da:	1d3b      	adds	r3, r7, #4
 800d4dc:	497a      	ldr	r1, [pc, #488]	; (800d6c8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d4de:	6818      	ldr	r0, [r3, #0]
 800d4e0:	f008 f8de 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d4e4:	f000 be94 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}

	}else if(cmd->cmd == "constantGain"){
 800d4e8:	f107 0308 	add.w	r3, r7, #8
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	497a      	ldr	r1, [pc, #488]	; (800d6d8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x66c>)
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f000 ff26 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d037      	beq.n	800d56c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x500>
				if(cmd->type == CMDtype::get){
 800d4fc:	f107 0308 	add.w	r3, r7, #8
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	6a1b      	ldr	r3, [r3, #32]
 800d504:	2b02      	cmp	r3, #2
 800d506:	d119      	bne.n	800d53c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d0>
					*reply+=std::to_string(this->conf.constantGain);
 800d508:	f107 030c 	add.w	r3, r7, #12
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d512:	461a      	mov	r2, r3
 800d514:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d518:	4611      	mov	r1, r2
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7ff fc52 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d520:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800d524:	1d3b      	adds	r3, r7, #4
 800d526:	4611      	mov	r1, r2
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	f008 f88f 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d52e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d532:	4618      	mov	r0, r3
 800d534:	f007 fffb 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d538:	f000 be6a 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800d53c:	f107 0308 	add.w	r3, r7, #8
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	6a1b      	ldr	r3, [r3, #32]
 800d544:	2b00      	cmp	r3, #0
 800d546:	f040 8663 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.constantGain = cmd->val;
 800d54a:	f107 0308 	add.w	r3, r7, #8
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	69db      	ldr	r3, [r3, #28]
 800d552:	b2da      	uxtb	r2, r3
 800d554:	f107 030c 	add.w	r3, r7, #12
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
					*reply += "OK";
 800d55e:	1d3b      	adds	r3, r7, #4
 800d560:	4959      	ldr	r1, [pc, #356]	; (800d6c8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d562:	6818      	ldr	r0, [r3, #0]
 800d564:	f008 f89c 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d568:	f000 be52 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "rampGain"){
 800d56c:	f107 0308 	add.w	r3, r7, #8
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	495a      	ldr	r1, [pc, #360]	; (800d6dc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x670>)
 800d574:	4618      	mov	r0, r3
 800d576:	f000 fee4 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d037      	beq.n	800d5f0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x584>
				if(cmd->type == CMDtype::get){
 800d580:	f107 0308 	add.w	r3, r7, #8
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6a1b      	ldr	r3, [r3, #32]
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d119      	bne.n	800d5c0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x554>
					*reply+=std::to_string(this->conf.rampGain);
 800d58c:	f107 030c 	add.w	r3, r7, #12
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800d596:	461a      	mov	r2, r3
 800d598:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d59c:	4611      	mov	r1, r2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7ff fc10 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d5a4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800d5a8:	1d3b      	adds	r3, r7, #4
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	f008 f84d 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d5b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f007 ffb9 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d5bc:	f000 be28 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800d5c0:	f107 0308 	add.w	r3, r7, #8
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	f040 8621 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.rampGain = cmd->val;
 800d5ce:	f107 0308 	add.w	r3, r7, #8
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	b2da      	uxtb	r2, r3
 800d5d8:	f107 030c 	add.w	r3, r7, #12
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
					*reply += "OK";
 800d5e2:	1d3b      	adds	r3, r7, #4
 800d5e4:	4938      	ldr	r1, [pc, #224]	; (800d6c8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d5e6:	6818      	ldr	r0, [r3, #0]
 800d5e8:	f008 f85a 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d5ec:	f000 be10 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "squareGain"){
 800d5f0:	f107 0308 	add.w	r3, r7, #8
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	493a      	ldr	r1, [pc, #232]	; (800d6e0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x674>)
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f000 fea2 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d037      	beq.n	800d674 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x608>
				if(cmd->type == CMDtype::get){
 800d604:	f107 0308 	add.w	r3, r7, #8
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6a1b      	ldr	r3, [r3, #32]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d119      	bne.n	800d644 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5d8>
					*reply+=std::to_string(this->conf.squareGain);
 800d610:	f107 030c 	add.w	r3, r7, #12
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800d61a:	461a      	mov	r2, r3
 800d61c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d620:	4611      	mov	r1, r2
 800d622:	4618      	mov	r0, r3
 800d624:	f7ff fbce 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d628:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800d62c:	1d3b      	adds	r3, r7, #4
 800d62e:	4611      	mov	r1, r2
 800d630:	6818      	ldr	r0, [r3, #0]
 800d632:	f008 f80b 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d636:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800d63a:	4618      	mov	r0, r3
 800d63c:	f007 ff77 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d640:	f000 bde6 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800d644:	f107 0308 	add.w	r3, r7, #8
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6a1b      	ldr	r3, [r3, #32]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f040 85df 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.squareGain = cmd->val;
 800d652:	f107 0308 	add.w	r3, r7, #8
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	69db      	ldr	r3, [r3, #28]
 800d65a:	b2da      	uxtb	r2, r3
 800d65c:	f107 030c 	add.w	r3, r7, #12
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
					*reply += "OK";
 800d666:	1d3b      	adds	r3, r7, #4
 800d668:	4917      	ldr	r1, [pc, #92]	; (800d6c8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65c>)
 800d66a:	6818      	ldr	r0, [r3, #0]
 800d66c:	f008 f818 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d670:	f000 bdce 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "sinGain"){
 800d674:	f107 0308 	add.w	r3, r7, #8
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	491a      	ldr	r1, [pc, #104]	; (800d6e4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x678>)
 800d67c:	4618      	mov	r0, r3
 800d67e:	f000 fe60 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d682:	4603      	mov	r3, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d047      	beq.n	800d718 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6ac>
				if(cmd->type == CMDtype::get){
 800d688:	f107 0308 	add.w	r3, r7, #8
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	6a1b      	ldr	r3, [r3, #32]
 800d690:	2b02      	cmp	r3, #2
 800d692:	d129      	bne.n	800d6e8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x67c>
					*reply+=std::to_string(this->conf.sinGain);
 800d694:	f107 030c 	add.w	r3, r7, #12
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800d69e:	461a      	mov	r2, r3
 800d6a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7ff fb8c 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d6ac:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800d6b0:	1d3b      	adds	r3, r7, #4
 800d6b2:	4611      	mov	r1, r2
 800d6b4:	6818      	ldr	r0, [r3, #0]
 800d6b6:	f007 ffc9 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d6ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f007 ff35 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d6c4:	f000 bda4 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
 800d6c8:	08018850 	.word	0x08018850
 800d6cc:	08018880 	.word	0x08018880
 800d6d0:	0801889c 	.word	0x0801889c
 800d6d4:	080188a4 	.word	0x080188a4
 800d6d8:	080188b0 	.word	0x080188b0
 800d6dc:	080188c0 	.word	0x080188c0
 800d6e0:	080188cc 	.word	0x080188cc
 800d6e4:	080188d8 	.word	0x080188d8
				}else if(cmd->type == CMDtype::set){
 800d6e8:	f107 0308 	add.w	r3, r7, #8
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f040 858d 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.sinGain = cmd->val;
 800d6f6:	f107 0308 	add.w	r3, r7, #8
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	f107 030c 	add.w	r3, r7, #12
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
					*reply += "OK";
 800d70a:	1d3b      	adds	r3, r7, #4
 800d70c:	49c8      	ldr	r1, [pc, #800]	; (800da30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d70e:	6818      	ldr	r0, [r3, #0]
 800d710:	f007 ffc6 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d714:	f000 bd7c 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "triangleGain"){
 800d718:	f107 0308 	add.w	r3, r7, #8
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	49c5      	ldr	r1, [pc, #788]	; (800da34 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c8>)
 800d720:	4618      	mov	r0, r3
 800d722:	f000 fe0e 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d037      	beq.n	800d79c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x730>
				if(cmd->type == CMDtype::get){
 800d72c:	f107 0308 	add.w	r3, r7, #8
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6a1b      	ldr	r3, [r3, #32]
 800d734:	2b02      	cmp	r3, #2
 800d736:	d119      	bne.n	800d76c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x700>
					*reply+=std::to_string(this->conf.triangleGain);
 800d738:	f107 030c 	add.w	r3, r7, #12
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800d742:	461a      	mov	r2, r3
 800d744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d748:	4611      	mov	r1, r2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7ff fb3a 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d750:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d754:	1d3b      	adds	r3, r7, #4
 800d756:	4611      	mov	r1, r2
 800d758:	6818      	ldr	r0, [r3, #0]
 800d75a:	f007 ff77 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d75e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d762:	4618      	mov	r0, r3
 800d764:	f007 fee3 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d768:	f000 bd52 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800d76c:	f107 0308 	add.w	r3, r7, #8
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6a1b      	ldr	r3, [r3, #32]
 800d774:	2b00      	cmp	r3, #0
 800d776:	f040 854b 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.triangleGain = cmd->val;
 800d77a:	f107 0308 	add.w	r3, r7, #8
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	69db      	ldr	r3, [r3, #28]
 800d782:	b2da      	uxtb	r2, r3
 800d784:	f107 030c 	add.w	r3, r7, #12
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
					*reply += "OK";
 800d78e:	1d3b      	adds	r3, r7, #4
 800d790:	49a7      	ldr	r1, [pc, #668]	; (800da30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d792:	6818      	ldr	r0, [r3, #0]
 800d794:	f007 ff84 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d798:	f000 bd3a 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "sawToothDownGain"){
 800d79c:	f107 0308 	add.w	r3, r7, #8
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	49a5      	ldr	r1, [pc, #660]	; (800da38 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9cc>)
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f000 fdcc 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d037      	beq.n	800d820 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7b4>
				if(cmd->type == CMDtype::get){
 800d7b0:	f107 0308 	add.w	r3, r7, #8
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6a1b      	ldr	r3, [r3, #32]
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d119      	bne.n	800d7f0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x784>
					*reply+=std::to_string(this->conf.sawToothDownGain);
 800d7bc:	f107 030c 	add.w	r3, r7, #12
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d7cc:	4611      	mov	r1, r2
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7ff faf8 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d7d4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800d7d8:	1d3b      	adds	r3, r7, #4
 800d7da:	4611      	mov	r1, r2
 800d7dc:	6818      	ldr	r0, [r3, #0]
 800d7de:	f007 ff35 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d7e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f007 fea1 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d7ec:	f000 bd10 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800d7f0:	f107 0308 	add.w	r3, r7, #8
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6a1b      	ldr	r3, [r3, #32]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f040 8509 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.sawToothDownGain = cmd->val;
 800d7fe:	f107 0308 	add.w	r3, r7, #8
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	69db      	ldr	r3, [r3, #28]
 800d806:	b2da      	uxtb	r2, r3
 800d808:	f107 030c 	add.w	r3, r7, #12
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
					*reply += "OK";
 800d812:	1d3b      	adds	r3, r7, #4
 800d814:	4986      	ldr	r1, [pc, #536]	; (800da30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d816:	6818      	ldr	r0, [r3, #0]
 800d818:	f007 ff42 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d81c:	f000 bcf8 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "sawToothUpGain"){
 800d820:	f107 0308 	add.w	r3, r7, #8
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4985      	ldr	r1, [pc, #532]	; (800da3c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d0>)
 800d828:	4618      	mov	r0, r3
 800d82a:	f000 fd8a 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d037      	beq.n	800d8a4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x838>
				if(cmd->type == CMDtype::get){
 800d834:	f107 0308 	add.w	r3, r7, #8
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6a1b      	ldr	r3, [r3, #32]
 800d83c:	2b02      	cmp	r3, #2
 800d83e:	d119      	bne.n	800d874 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x808>
					*reply+=std::to_string(this->conf.sawToothUpGain);
 800d840:	f107 030c 	add.w	r3, r7, #12
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800d84a:	461a      	mov	r2, r3
 800d84c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800d850:	4611      	mov	r1, r2
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff fab6 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d858:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800d85c:	1d3b      	adds	r3, r7, #4
 800d85e:	4611      	mov	r1, r2
 800d860:	6818      	ldr	r0, [r3, #0]
 800d862:	f007 fef3 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d866:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800d86a:	4618      	mov	r0, r3
 800d86c:	f007 fe5f 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d870:	f000 bcce 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800d874:	f107 0308 	add.w	r3, r7, #8
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	6a1b      	ldr	r3, [r3, #32]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f040 84c7 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.sawToothUpGain = cmd->val;
 800d882:	f107 0308 	add.w	r3, r7, #8
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	69db      	ldr	r3, [r3, #28]
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	f107 030c 	add.w	r3, r7, #12
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
					*reply += "OK";
 800d896:	1d3b      	adds	r3, r7, #4
 800d898:	4965      	ldr	r1, [pc, #404]	; (800da30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d89a:	6818      	ldr	r0, [r3, #0]
 800d89c:	f007 ff00 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d8a0:	f000 bcb6 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "springGain"){
 800d8a4:	f107 0308 	add.w	r3, r7, #8
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4965      	ldr	r1, [pc, #404]	; (800da40 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d4>)
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 fd48 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d037      	beq.n	800d928 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8bc>
				if(cmd->type == CMDtype::get){
 800d8b8:	f107 0308 	add.w	r3, r7, #8
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	6a1b      	ldr	r3, [r3, #32]
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d119      	bne.n	800d8f8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88c>
					*reply+=std::to_string(this->conf.springGain);
 800d8c4:	f107 030c 	add.w	r3, r7, #12
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d8d4:	4611      	mov	r1, r2
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff fa74 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d8dc:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800d8e0:	1d3b      	adds	r3, r7, #4
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	6818      	ldr	r0, [r3, #0]
 800d8e6:	f007 feb1 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d8ea:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f007 fe1d 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d8f4:	f000 bc8c 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800d8f8:	f107 0308 	add.w	r3, r7, #8
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	6a1b      	ldr	r3, [r3, #32]
 800d900:	2b00      	cmp	r3, #0
 800d902:	f040 8485 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.springGain = cmd->val;
 800d906:	f107 0308 	add.w	r3, r7, #8
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	b2da      	uxtb	r2, r3
 800d910:	f107 030c 	add.w	r3, r7, #12
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
					*reply += "OK";
 800d91a:	1d3b      	adds	r3, r7, #4
 800d91c:	4944      	ldr	r1, [pc, #272]	; (800da30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d91e:	6818      	ldr	r0, [r3, #0]
 800d920:	f007 febe 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d924:	f000 bc74 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "damperGain"){
 800d928:	f107 0308 	add.w	r3, r7, #8
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4945      	ldr	r1, [pc, #276]	; (800da44 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d8>)
 800d930:	4618      	mov	r0, r3
 800d932:	f000 fd06 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d037      	beq.n	800d9ac <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x940>
				if(cmd->type == CMDtype::get){
 800d93c:	f107 0308 	add.w	r3, r7, #8
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	2b02      	cmp	r3, #2
 800d946:	d119      	bne.n	800d97c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x910>
					*reply+=std::to_string(this->conf.damperGain);
 800d948:	f107 030c 	add.w	r3, r7, #12
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d952:	461a      	mov	r2, r3
 800d954:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800d958:	4611      	mov	r1, r2
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7ff fa32 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d960:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800d964:	1d3b      	adds	r3, r7, #4
 800d966:	4611      	mov	r1, r2
 800d968:	6818      	ldr	r0, [r3, #0]
 800d96a:	f007 fe6f 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d96e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800d972:	4618      	mov	r0, r3
 800d974:	f007 fddb 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d978:	f000 bc4a 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800d97c:	f107 0308 	add.w	r3, r7, #8
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6a1b      	ldr	r3, [r3, #32]
 800d984:	2b00      	cmp	r3, #0
 800d986:	f040 8443 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.damperGain = cmd->val;
 800d98a:	f107 0308 	add.w	r3, r7, #8
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	69db      	ldr	r3, [r3, #28]
 800d992:	b2da      	uxtb	r2, r3
 800d994:	f107 030c 	add.w	r3, r7, #12
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
					*reply += "OK";
 800d99e:	1d3b      	adds	r3, r7, #4
 800d9a0:	4923      	ldr	r1, [pc, #140]	; (800da30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800d9a2:	6818      	ldr	r0, [r3, #0]
 800d9a4:	f007 fe7c 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800d9a8:	f000 bc32 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "inertiaGain"){
 800d9ac:	f107 0308 	add.w	r3, r7, #8
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4925      	ldr	r1, [pc, #148]	; (800da48 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9dc>)
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 fcc4 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d045      	beq.n	800da4c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e0>
				if(cmd->type == CMDtype::get){
 800d9c0:	f107 0308 	add.w	r3, r7, #8
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	6a1b      	ldr	r3, [r3, #32]
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	d119      	bne.n	800da00 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x994>
					*reply+=std::to_string(this->conf.inertiaGain);
 800d9cc:	f107 030c 	add.w	r3, r7, #12
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d9dc:	4611      	mov	r1, r2
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff f9f0 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800d9e4:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 800d9e8:	1d3b      	adds	r3, r7, #4
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	6818      	ldr	r0, [r3, #0]
 800d9ee:	f007 fe2d 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800d9f2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f007 fd99 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d9fc:	f000 bc08 	b.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800da00:	f107 0308 	add.w	r3, r7, #8
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	6a1b      	ldr	r3, [r3, #32]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f040 8401 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.inertiaGain = cmd->val;
 800da0e:	f107 0308 	add.w	r3, r7, #8
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	69db      	ldr	r3, [r3, #28]
 800da16:	b2da      	uxtb	r2, r3
 800da18:	f107 030c 	add.w	r3, r7, #12
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
					*reply += "OK";
 800da22:	1d3b      	adds	r3, r7, #4
 800da24:	4902      	ldr	r1, [pc, #8]	; (800da30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c4>)
 800da26:	6818      	ldr	r0, [r3, #0]
 800da28:	f007 fe3a 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800da2c:	e3f0      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
 800da2e:	bf00      	nop
 800da30:	08018850 	.word	0x08018850
 800da34:	080188e0 	.word	0x080188e0
 800da38:	080188f0 	.word	0x080188f0
 800da3c:	08018904 	.word	0x08018904
 800da40:	08018914 	.word	0x08018914
 800da44:	08018920 	.word	0x08018920
 800da48:	0801892c 	.word	0x0801892c
				}
	}else if(cmd->cmd == "frictionGain"){
 800da4c:	f107 0308 	add.w	r3, r7, #8
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	49be      	ldr	r1, [pc, #760]	; (800dd4c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce0>)
 800da54:	4618      	mov	r0, r3
 800da56:	f000 fc74 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d035      	beq.n	800dacc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa60>
				if(cmd->type == CMDtype::get){
 800da60:	f107 0308 	add.w	r3, r7, #8
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	6a1b      	ldr	r3, [r3, #32]
 800da68:	2b02      	cmp	r3, #2
 800da6a:	d118      	bne.n	800da9e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa32>
					*reply+=std::to_string(this->conf.frictionGain);
 800da6c:	f107 030c 	add.w	r3, r7, #12
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800da76:	461a      	mov	r2, r3
 800da78:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff f9a0 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800da84:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800da88:	1d3b      	adds	r3, r7, #4
 800da8a:	4611      	mov	r1, r2
 800da8c:	6818      	ldr	r0, [r3, #0]
 800da8e:	f007 fddd 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800da92:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800da96:	4618      	mov	r0, r3
 800da98:	f007 fd49 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800da9c:	e3b8      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800da9e:	f107 0308 	add.w	r3, r7, #8
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	6a1b      	ldr	r3, [r3, #32]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f040 83b2 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.frictionGain = cmd->val;
 800daac:	f107 0308 	add.w	r3, r7, #8
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	69db      	ldr	r3, [r3, #28]
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	f107 030c 	add.w	r3, r7, #12
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
					*reply += "OK";
 800dac0:	1d3b      	adds	r3, r7, #4
 800dac2:	49a3      	ldr	r1, [pc, #652]	; (800dd50 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dac4:	6818      	ldr	r0, [r3, #0]
 800dac6:	f007 fdeb 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800daca:	e3a1      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "endstopGain"){
 800dacc:	f107 0308 	add.w	r3, r7, #8
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	49a0      	ldr	r1, [pc, #640]	; (800dd54 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce8>)
 800dad4:	4618      	mov	r0, r3
 800dad6:	f000 fc34 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d035      	beq.n	800db4c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xae0>
				if(cmd->type == CMDtype::get){
 800dae0:	f107 0308 	add.w	r3, r7, #8
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	6a1b      	ldr	r3, [r3, #32]
 800dae8:	2b02      	cmp	r3, #2
 800daea:	d118      	bne.n	800db1e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xab2>
					*reply+=std::to_string(this->conf.endstop_gain);
 800daec:	f107 030c 	add.w	r3, r7, #12
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800daf6:	461a      	mov	r2, r3
 800daf8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800dafc:	4611      	mov	r1, r2
 800dafe:	4618      	mov	r0, r3
 800db00:	f7ff f960 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800db04:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800db08:	1d3b      	adds	r3, r7, #4
 800db0a:	4611      	mov	r1, r2
 800db0c:	6818      	ldr	r0, [r3, #0]
 800db0e:	f007 fd9d 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800db12:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800db16:	4618      	mov	r0, r3
 800db18:	f007 fd09 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800db1c:	e378      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800db1e:	f107 0308 	add.w	r3, r7, #8
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f040 8372 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.endstop_gain = cmd->val;
 800db2c:	f107 0308 	add.w	r3, r7, #8
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	69db      	ldr	r3, [r3, #28]
 800db34:	b2da      	uxtb	r2, r3
 800db36:	f107 030c 	add.w	r3, r7, #12
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
					*reply += "OK";
 800db40:	1d3b      	adds	r3, r7, #4
 800db42:	4983      	ldr	r1, [pc, #524]	; (800dd50 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800db44:	6818      	ldr	r0, [r3, #0]
 800db46:	f007 fdab 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800db4a:	e361      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "totalGain"){
 800db4c:	f107 0308 	add.w	r3, r7, #8
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4981      	ldr	r1, [pc, #516]	; (800dd58 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcec>)
 800db54:	4618      	mov	r0, r3
 800db56:	f000 fbf4 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d035      	beq.n	800dbcc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb60>
				if(cmd->type == CMDtype::get){
 800db60:	f107 0308 	add.w	r3, r7, #8
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6a1b      	ldr	r3, [r3, #32]
 800db68:	2b02      	cmp	r3, #2
 800db6a:	d118      	bne.n	800db9e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb32>
					*reply+=std::to_string(this->conf.totalGain);
 800db6c:	f107 030c 	add.w	r3, r7, #12
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800db76:	461a      	mov	r2, r3
 800db78:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800db7c:	4611      	mov	r1, r2
 800db7e:	4618      	mov	r0, r3
 800db80:	f7ff f920 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800db84:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800db88:	1d3b      	adds	r3, r7, #4
 800db8a:	4611      	mov	r1, r2
 800db8c:	6818      	ldr	r0, [r3, #0]
 800db8e:	f007 fd5d 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800db92:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800db96:	4618      	mov	r0, r3
 800db98:	f007 fcc9 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800db9c:	e338      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800db9e:	f107 0308 	add.w	r3, r7, #8
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6a1b      	ldr	r3, [r3, #32]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f040 8332 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.totalGain = cmd->val;
 800dbac:	f107 0308 	add.w	r3, r7, #8
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	f107 030c 	add.w	r3, r7, #12
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
					*reply += "OK";
 800dbc0:	1d3b      	adds	r3, r7, #4
 800dbc2:	4963      	ldr	r1, [pc, #396]	; (800dd50 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dbc4:	6818      	ldr	r0, [r3, #0]
 800dbc6:	f007 fd6b 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dbca:	e321      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "maxVelosity"){
 800dbcc:	f107 0308 	add.w	r3, r7, #8
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4962      	ldr	r1, [pc, #392]	; (800dd5c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf0>)
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f000 fbb4 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d035      	beq.n	800dc4c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbe0>
				if(cmd->type == CMDtype::get){
 800dbe0:	f107 0308 	add.w	r3, r7, #8
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	6a1b      	ldr	r3, [r3, #32]
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	d118      	bne.n	800dc1e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbb2>
					*reply+=std::to_string(this->conf.maxVelosity);
 800dbec:	f107 030c 	add.w	r3, r7, #12
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff f8e0 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800dc04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800dc08:	1d3b      	adds	r3, r7, #4
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	6818      	ldr	r0, [r3, #0]
 800dc0e:	f007 fd1d 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dc12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800dc16:	4618      	mov	r0, r3
 800dc18:	f007 fc89 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dc1c:	e2f8      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800dc1e:	f107 0308 	add.w	r3, r7, #8
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f040 82f2 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.maxVelosity = cmd->val;
 800dc2c:	f107 0308 	add.w	r3, r7, #8
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	69db      	ldr	r3, [r3, #28]
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
					*reply += "OK";
 800dc40:	1d3b      	adds	r3, r7, #4
 800dc42:	4943      	ldr	r1, [pc, #268]	; (800dd50 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dc44:	6818      	ldr	r0, [r3, #0]
 800dc46:	f007 fd2b 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dc4a:	e2e1      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "maxAcceleration"){
 800dc4c:	f107 0308 	add.w	r3, r7, #8
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4943      	ldr	r1, [pc, #268]	; (800dd60 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf4>)
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fb74 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d035      	beq.n	800dccc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc60>
				if(cmd->type == CMDtype::get){
 800dc60:	f107 0308 	add.w	r3, r7, #8
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	6a1b      	ldr	r3, [r3, #32]
 800dc68:	2b02      	cmp	r3, #2
 800dc6a:	d118      	bne.n	800dc9e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc32>
					*reply+=std::to_string(this->conf.maxAcceleration);
 800dc6c:	f107 030c 	add.w	r3, r7, #12
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800dc76:	461a      	mov	r2, r3
 800dc78:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800dc7c:	4611      	mov	r1, r2
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7ff f8a0 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800dc84:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800dc88:	1d3b      	adds	r3, r7, #4
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	6818      	ldr	r0, [r3, #0]
 800dc8e:	f007 fcdd 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dc92:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800dc96:	4618      	mov	r0, r3
 800dc98:	f007 fc49 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dc9c:	e2b8      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800dc9e:	f107 0308 	add.w	r3, r7, #8
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	6a1b      	ldr	r3, [r3, #32]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f040 82b2 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.maxAcceleration = cmd->val;
 800dcac:	f107 0308 	add.w	r3, r7, #8
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	69db      	ldr	r3, [r3, #28]
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	f107 030c 	add.w	r3, r7, #12
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
					*reply += "OK";
 800dcc0:	1d3b      	adds	r3, r7, #4
 800dcc2:	4923      	ldr	r1, [pc, #140]	; (800dd50 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dcc4:	6818      	ldr	r0, [r3, #0]
 800dcc6:	f007 fceb 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dcca:	e2a1      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}
	}else if(cmd->cmd == "maxPositionChange"){
 800dccc:	f107 0308 	add.w	r3, r7, #8
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4924      	ldr	r1, [pc, #144]	; (800dd64 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf8>)
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f000 fb34 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d043      	beq.n	800dd68 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcfc>
				if(cmd->type == CMDtype::get){
 800dce0:	f107 0308 	add.w	r3, r7, #8
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6a1b      	ldr	r3, [r3, #32]
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	d118      	bne.n	800dd1e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcb2>
					*reply+=std::to_string(this->conf.maxPositionChange);
 800dcec:	f107 030c 	add.w	r3, r7, #12
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7ff f860 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800dd04:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800dd08:	1d3b      	adds	r3, r7, #4
 800dd0a:	4611      	mov	r1, r2
 800dd0c:	6818      	ldr	r0, [r3, #0]
 800dd0e:	f007 fc9d 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800dd12:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800dd16:	4618      	mov	r0, r3
 800dd18:	f007 fc09 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dd1c:	e278      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800dd1e:	f107 0308 	add.w	r3, r7, #8
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	6a1b      	ldr	r3, [r3, #32]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f040 8272 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.maxPositionChange = cmd->val;
 800dd2c:	f107 0308 	add.w	r3, r7, #8
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	69db      	ldr	r3, [r3, #28]
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	f107 030c 	add.w	r3, r7, #12
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
					*reply += "OK";
 800dd40:	1d3b      	adds	r3, r7, #4
 800dd42:	4903      	ldr	r1, [pc, #12]	; (800dd50 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xce4>)
 800dd44:	6818      	ldr	r0, [r3, #0]
 800dd46:	f007 fcab 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dd4a:	e261      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
 800dd4c:	08018938 	.word	0x08018938
 800dd50:	08018850 	.word	0x08018850
 800dd54:	08018948 	.word	0x08018948
 800dd58:	08018954 	.word	0x08018954
 800dd5c:	08018960 	.word	0x08018960
 800dd60:	0801896c 	.word	0x0801896c
 800dd64:	0801897c 	.word	0x0801897c
				}
	}else if(cmd->cmd == "minPower"){
 800dd68:	f107 0308 	add.w	r3, r7, #8
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	49bf      	ldr	r1, [pc, #764]	; (800e06c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1000>)
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 fae6 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d035      	beq.n	800dde8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd7c>
				if(cmd->type == CMDtype::get){
 800dd7c:	f107 0308 	add.w	r3, r7, #8
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	6a1b      	ldr	r3, [r3, #32]
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d118      	bne.n	800ddba <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4e>
					*reply+=std::to_string(this->conf.minForce);
 800dd88:	f107 030c 	add.w	r3, r7, #12
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800dd92:	461a      	mov	r2, r3
 800dd94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800dd98:	4611      	mov	r1, r2
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7ff f812 	bl	800cdc4 <_ZNSt7__cxx119to_stringEi>
 800dda0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800dda4:	1d3b      	adds	r3, r7, #4
 800dda6:	4611      	mov	r1, r2
 800dda8:	6818      	ldr	r0, [r3, #0]
 800ddaa:	f007 fc4f 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800ddae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f007 fbbb 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ddb8:	e22a      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}else if(cmd->type == CMDtype::set){
 800ddba:	f107 0308 	add.w	r3, r7, #8
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6a1b      	ldr	r3, [r3, #32]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f040 8224 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
					this->conf.minForce = cmd->val;
 800ddc8:	f107 0308 	add.w	r3, r7, #8
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	69db      	ldr	r3, [r3, #28]
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	f107 030c 	add.w	r3, r7, #12
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
					*reply += "OK";
 800dddc:	1d3b      	adds	r3, r7, #4
 800ddde:	49a4      	ldr	r1, [pc, #656]	; (800e070 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1004>)
 800dde0:	6818      	ldr	r0, [r3, #0]
 800dde2:	f007 fc5d 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800dde6:	e213      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				}

	}else if(cmd->cmd == "pos"){
 800dde8:	f107 0308 	add.w	r3, r7, #8
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	49a1      	ldr	r1, [pc, #644]	; (800e074 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1008>)
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f000 faa6 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d044      	beq.n	800de86 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe1a>
		if(cmd->type == CMDtype::get){
 800ddfc:	f107 0308 	add.w	r3, r7, #8
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	6a1b      	ldr	r3, [r3, #32]
 800de04:	2b02      	cmp	r3, #2
 800de06:	d11a      	bne.n	800de3e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdd2>
			*reply+=std::to_string(this->enc->getPos());
 800de08:	f107 030c 	add.w	r3, r7, #12
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de10:	4618      	mov	r0, r3
 800de12:	f7fd fa2d 	bl	800b270 <_ZN12EncoderLocal6getPosEv>
 800de16:	4602      	mov	r2, r0
 800de18:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de1c:	4611      	mov	r1, r2
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fe ffe6 	bl	800cdf0 <_ZNSt7__cxx119to_stringEl>
 800de24:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800de28:	1d3b      	adds	r3, r7, #4
 800de2a:	4611      	mov	r1, r2
 800de2c:	6818      	ldr	r0, [r3, #0]
 800de2e:	f007 fc0d 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800de32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de36:	4618      	mov	r0, r3
 800de38:	f007 fb79 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800de3c:	e1e8      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 800de3e:	f107 0308 	add.w	r3, r7, #8
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	6a1b      	ldr	r3, [r3, #32]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d117      	bne.n	800de7a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0e>
 800de4a:	f107 030c 	add.w	r3, r7, #12
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de52:	2b00      	cmp	r3, #0
 800de54:	d011      	beq.n	800de7a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0e>
			this->enc->setPos(cmd->val);
 800de56:	f107 030c 	add.w	r3, r7, #12
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800de5e:	f107 0308 	add.w	r3, r7, #8
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	69db      	ldr	r3, [r3, #28]
 800de66:	4619      	mov	r1, r3
 800de68:	4610      	mov	r0, r2
 800de6a:	f7fd fa16 	bl	800b29a <_ZN12EncoderLocal6setPosEl>
			*reply += "OK";
 800de6e:	1d3b      	adds	r3, r7, #4
 800de70:	497f      	ldr	r1, [pc, #508]	; (800e070 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1004>)
 800de72:	6818      	ldr	r0, [r3, #0]
 800de74:	f007 fc14 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800de78:	e1ca      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}else{
			*reply += "Err. Setup enctype first";
 800de7a:	1d3b      	adds	r3, r7, #4
 800de7c:	497e      	ldr	r1, [pc, #504]	; (800e078 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x100c>)
 800de7e:	6818      	ldr	r0, [r3, #0]
 800de80:	f007 fc0e 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800de84:	e1c4      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}
	}else if(cmd->cmd == "all"){
 800de86:	f107 0308 	add.w	r3, r7, #8
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	497b      	ldr	r1, [pc, #492]	; (800e07c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1010>)
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 fa57 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d02a      	beq.n	800def0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe84>
		if(cmd->type == CMDtype::get){
 800de9a:	f107 0308 	add.w	r3, r7, #8
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	f040 81b4 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
			uint8_t* buf8 = (uint8_t*)&conf;
 800dea8:	f107 030c 	add.w	r3, r7, #12
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	3354      	adds	r3, #84	; 0x54
 800deb0:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
			uint8_t len = sizeof(FFBWheelConfig);
 800deb4:	231e      	movs	r3, #30
 800deb6:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
			for(uint8_t i = 0; i < len ;i++)
 800deba:	2300      	movs	r3, #0
 800debc:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
 800dec0:	f897 22ae 	ldrb.w	r2, [r7, #686]	; 0x2ae
 800dec4:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 800dec8:	429a      	cmp	r2, r3
 800deca:	f080 81a1 	bcs.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				*reply += (char)buf8[i];
 800dece:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 800ded2:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 800ded6:	4413      	add	r3, r2
 800ded8:	781a      	ldrb	r2, [r3, #0]
 800deda:	1d3b      	adds	r3, r7, #4
 800dedc:	4611      	mov	r1, r2
 800dede:	6818      	ldr	r0, [r3, #0]
 800dee0:	f007 fb88 	bl	80155f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			for(uint8_t i = 0; i < len ;i++)
 800dee4:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 800dee8:	3301      	adds	r3, #1
 800deea:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
 800deee:	e7e7      	b.n	800dec0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe54>
		}
	}else if(cmd->cmd == "hidrate" && cmd->type == CMDtype::get){
 800def0:	f107 0308 	add.w	r3, r7, #8
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4962      	ldr	r1, [pc, #392]	; (800e080 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1014>)
 800def8:	4618      	mov	r0, r3
 800defa:	f000 fa22 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d007      	beq.n	800df14 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea8>
 800df04:	f107 0308 	add.w	r3, r7, #8
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	6a1b      	ldr	r3, [r3, #32]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d101      	bne.n	800df14 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea8>
 800df10:	2301      	movs	r3, #1
 800df12:	e000      	b.n	800df16 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xeaa>
 800df14:	2300      	movs	r3, #0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d028      	beq.n	800df6c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf00>
		if(ffb->hid_out_period != 0){
 800df1a:	f107 030c 	add.w	r3, r7, #12
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d01b      	beq.n	800df60 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xef4>
			*reply+=std::to_string(1000/ffb->hid_out_period);
 800df28:	f107 030c 	add.w	r3, r7, #12
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df36:	fbb2 f2f3 	udiv	r2, r2, r3
 800df3a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800df3e:	4611      	mov	r1, r2
 800df40:	4618      	mov	r0, r3
 800df42:	f7fe ff6b 	bl	800ce1c <_ZNSt7__cxx119to_stringEm>
 800df46:	f507 7220 	add.w	r2, r7, #640	; 0x280
 800df4a:	1d3b      	adds	r3, r7, #4
 800df4c:	4611      	mov	r1, r2
 800df4e:	6818      	ldr	r0, [r3, #0]
 800df50:	f007 fb7c 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800df54:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800df58:	4618      	mov	r0, r3
 800df5a:	f007 fae8 	bl	801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800df5e:	e157      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}else{
			*reply+="0";
 800df60:	1d3b      	adds	r3, r7, #4
 800df62:	4948      	ldr	r1, [pc, #288]	; (800e084 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1018>)
 800df64:	6818      	ldr	r0, [r3, #0]
 800df66:	f007 fb9b 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800df6a:	e151      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}
	}else if(cmd->cmd == "led"){
 800df6c:	f107 0308 	add.w	r3, r7, #8
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4945      	ldr	r1, [pc, #276]	; (800e088 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x101c>)
 800df74:	4618      	mov	r0, r3
 800df76:	f000 f9e4 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d04d      	beq.n	800e01c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xfb0>
		if(cmd->type == CMDtype::set){
 800df80:	f107 0308 	add.w	r3, r7, #8
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	6a1b      	ldr	r3, [r3, #32]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f040 8141 	bne.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
			RGB rgb_array[16] = {0};
 800df8e:	f107 0310 	add.w	r3, r7, #16
 800df92:	4618      	mov	r0, r3
 800df94:	2330      	movs	r3, #48	; 0x30
 800df96:	461a      	mov	r2, r3
 800df98:	2100      	movs	r1, #0
 800df9a:	f009 fe94 	bl	8017cc6 <memset>
			for(uint8_t i = 0;i<LED_COUNT;i++)
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f887 32ad 	strb.w	r3, [r7, #685]	; 0x2ad
 800dfa4:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 800dfa8:	2b0f      	cmp	r3, #15
 800dfaa:	d82b      	bhi.n	800e004 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf98>
			{
				uint8_t tmp = (cmd->val >> (2*i)) & 0b11;
 800dfac:	f107 0308 	add.w	r3, r7, #8
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	69da      	ldr	r2, [r3, #28]
 800dfb4:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 800dfb8:	005b      	lsls	r3, r3, #1
 800dfba:	fa42 f303 	asr.w	r3, r2, r3
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	f003 0303 	and.w	r3, r3, #3
 800dfc4:	f887 32ab 	strb.w	r3, [r7, #683]	; 0x2ab
				if(tmp >=0 && tmp <=3)
 800dfc8:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	d813      	bhi.n	800dff8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf8c>
					rgb_array[i] = defaultRGB[tmp];
 800dfd0:	f897 22ab 	ldrb.w	r2, [r7, #683]	; 0x2ab
 800dfd4:	f897 12ad 	ldrb.w	r1, [r7, #685]	; 0x2ad
 800dfd8:	f107 0010 	add.w	r0, r7, #16
 800dfdc:	460b      	mov	r3, r1
 800dfde:	005b      	lsls	r3, r3, #1
 800dfe0:	440b      	add	r3, r1
 800dfe2:	4418      	add	r0, r3
 800dfe4:	4929      	ldr	r1, [pc, #164]	; (800e08c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1020>)
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	4413      	add	r3, r2
 800dfec:	18ca      	adds	r2, r1, r3
 800dfee:	4603      	mov	r3, r0
 800dff0:	8811      	ldrh	r1, [r2, #0]
 800dff2:	7892      	ldrb	r2, [r2, #2]
 800dff4:	8019      	strh	r1, [r3, #0]
 800dff6:	709a      	strb	r2, [r3, #2]
			for(uint8_t i = 0;i<LED_COUNT;i++)
 800dff8:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 800dffc:	3301      	adds	r3, #1
 800dffe:	f887 32ad 	strb.w	r3, [r7, #685]	; 0x2ad
 800e002:	e7cf      	b.n	800dfa4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf38>
			}
			setup_ws2812(rgb_array, LED_COUNT);
 800e004:	f107 0310 	add.w	r3, r7, #16
 800e008:	2110      	movs	r1, #16
 800e00a:	4618      	mov	r0, r3
 800e00c:	f004 fca0 	bl	8012950 <_Z12setup_ws2812P3RGBh>
			*reply+="OK";
 800e010:	1d3b      	adds	r3, r7, #4
 800e012:	4917      	ldr	r1, [pc, #92]	; (800e070 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1004>)
 800e014:	6818      	ldr	r0, [r3, #0]
 800e016:	f007 fb43 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800e01a:	e0f9      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}
	}else if(cmd->type == CMDtype::dash){
 800e01c:	f107 0308 	add.w	r3, r7, #8
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	6a1b      	ldr	r3, [r3, #32]
 800e024:	2b07      	cmp	r3, #7
 800e026:	f040 80dd 	bne.w	800e1e4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1178>
		flag = true;
 800e02a:	2301      	movs	r3, #1
 800e02c:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
		telemetry = (SimDisplayPacket*)(cmd->cmd.c_str());
 800e030:	f107 0308 	add.w	r3, r7, #8
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4618      	mov	r0, r3
 800e038:	f007 fb36 	bl	80156a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800e03c:	4602      	mov	r2, r0
 800e03e:	4b14      	ldr	r3, [pc, #80]	; (800e090 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1024>)
 800e040:	601a      	str	r2, [r3, #0]
		uint8_t rgb_array = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	f887 32ac 	strb.w	r3, [r7, #684]	; 0x2ac
		if (telemetry->status == SDP_STATUS_OFF)
 800e048:	4b11      	ldr	r3, [pc, #68]	; (800e090 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1024>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	785b      	ldrb	r3, [r3, #1]
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	2b00      	cmp	r3, #0
 800e052:	bf0c      	ite	eq
 800e054:	2301      	moveq	r3, #1
 800e056:	2300      	movne	r3, #0
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d01a      	beq.n	800e094 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1028>
			setup_rpm_ws2812(rgb_array);
 800e05e:	f897 32ac 	ldrb.w	r3, [r7, #684]	; 0x2ac
 800e062:	4618      	mov	r0, r3
 800e064:	f004 fc38 	bl	80128d8 <_Z16setup_rpm_ws2812h>
 800e068:	e0d2      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
 800e06a:	bf00      	nop
 800e06c:	08018990 	.word	0x08018990
 800e070:	08018850 	.word	0x08018850
 800e074:	0801899c 	.word	0x0801899c
 800e078:	08018880 	.word	0x08018880
 800e07c:	080189a0 	.word	0x080189a0
 800e080:	080189a4 	.word	0x080189a4
 800e084:	080189ac 	.word	0x080189ac
 800e088:	080189b0 	.word	0x080189b0
 800e08c:	20000010 	.word	0x20000010
 800e090:	20000b40 	.word	0x20000b40
		else if (telemetry->status == SDP_STATUS_LIVE && telemetry->rpm <= (telemetry->shftrpm*100/95))
 800e094:	4b62      	ldr	r3, [pc, #392]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	785b      	ldrb	r3, [r3, #1]
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	2b02      	cmp	r3, #2
 800e09e:	d117      	bne.n	800e0d0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1064>
 800e0a0:	4b5f      	ldr	r3, [pc, #380]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	885b      	ldrh	r3, [r3, #2]
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	4b5d      	ldr	r3, [pc, #372]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	88db      	ldrh	r3, [r3, #6]
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	2364      	movs	r3, #100	; 0x64
 800e0b6:	fb03 f302 	mul.w	r3, r3, r2
 800e0ba:	4a5a      	ldr	r2, [pc, #360]	; (800e224 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b8>)
 800e0bc:	fb82 0203 	smull	r0, r2, r2, r3
 800e0c0:	441a      	add	r2, r3
 800e0c2:	1192      	asrs	r2, r2, #6
 800e0c4:	17db      	asrs	r3, r3, #31
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	4299      	cmp	r1, r3
 800e0ca:	dc01      	bgt.n	800e0d0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1064>
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e000      	b.n	800e0d2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1066>
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f000 809c 	beq.w	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		{
			if(telemetry->rpm < telemetry->optrpm)
 800e0d8:	4b51      	ldr	r3, [pc, #324]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	885b      	ldrh	r3, [r3, #2]
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	4b4f      	ldr	r3, [pc, #316]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	889b      	ldrh	r3, [r3, #4]
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	bf34      	ite	cc
 800e0ec:	2301      	movcc	r3, #1
 800e0ee:	2300      	movcs	r3, #0
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d020      	beq.n	800e138 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10cc>
				rgb_array = std::max(0, telemetry->rpm - 1500) * 8 / (telemetry->optrpm - 1500);
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800e0fc:	4b48      	ldr	r3, [pc, #288]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	885b      	ldrh	r3, [r3, #2]
 800e102:	b29b      	uxth	r3, r3
 800e104:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800e108:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800e10c:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 800e110:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800e114:	4611      	mov	r1, r2
 800e116:	4618      	mov	r0, r3
 800e118:	f000 f926 	bl	800e368 <_ZSt3maxIiERKT_S2_S2_>
 800e11c:	4603      	mov	r3, r0
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	00da      	lsls	r2, r3, #3
 800e122:	4b3f      	ldr	r3, [pc, #252]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	889b      	ldrh	r3, [r3, #4]
 800e128:	b29b      	uxth	r3, r3
 800e12a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800e12e:	fb92 f3f3 	sdiv	r3, r2, r3
 800e132:	f887 32ac 	strb.w	r3, [r7, #684]	; 0x2ac
 800e136:	e04f      	b.n	800e1d8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x116c>
			else if(telemetry->rpm < telemetry->shftrpm)
 800e138:	4b39      	ldr	r3, [pc, #228]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	885b      	ldrh	r3, [r3, #2]
 800e13e:	b29a      	uxth	r2, r3
 800e140:	4b37      	ldr	r3, [pc, #220]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	88db      	ldrh	r3, [r3, #6]
 800e146:	b29b      	uxth	r3, r3
 800e148:	429a      	cmp	r2, r3
 800e14a:	bf34      	ite	cc
 800e14c:	2301      	movcc	r3, #1
 800e14e:	2300      	movcs	r3, #0
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d01b      	beq.n	800e18e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1122>
				rgb_array = 8 + (telemetry->rpm - telemetry->optrpm)*4/(telemetry->shftrpm - telemetry->optrpm);
 800e156:	4b32      	ldr	r3, [pc, #200]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	885b      	ldrh	r3, [r3, #2]
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	461a      	mov	r2, r3
 800e160:	4b2f      	ldr	r3, [pc, #188]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	889b      	ldrh	r3, [r3, #4]
 800e166:	b29b      	uxth	r3, r3
 800e168:	1ad3      	subs	r3, r2, r3
 800e16a:	009a      	lsls	r2, r3, #2
 800e16c:	4b2c      	ldr	r3, [pc, #176]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	88db      	ldrh	r3, [r3, #6]
 800e172:	b29b      	uxth	r3, r3
 800e174:	4619      	mov	r1, r3
 800e176:	4b2a      	ldr	r3, [pc, #168]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	889b      	ldrh	r3, [r3, #4]
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	1acb      	subs	r3, r1, r3
 800e180:	fb92 f3f3 	sdiv	r3, r2, r3
 800e184:	b2db      	uxtb	r3, r3
 800e186:	3308      	adds	r3, #8
 800e188:	f887 32ac 	strb.w	r3, [r7, #684]	; 0x2ac
 800e18c:	e024      	b.n	800e1d8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x116c>
			else
				rgb_array = 12 + (telemetry->rpm - telemetry->shftrpm)*4/((telemetry->shftrpm*100/95) - telemetry->shftrpm);
 800e18e:	4b24      	ldr	r3, [pc, #144]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	885b      	ldrh	r3, [r3, #2]
 800e194:	b29b      	uxth	r3, r3
 800e196:	461a      	mov	r2, r3
 800e198:	4b21      	ldr	r3, [pc, #132]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	88db      	ldrh	r3, [r3, #6]
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	009a      	lsls	r2, r3, #2
 800e1a4:	4b1e      	ldr	r3, [pc, #120]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	88db      	ldrh	r3, [r3, #6]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	2364      	movs	r3, #100	; 0x64
 800e1b0:	fb03 f301 	mul.w	r3, r3, r1
 800e1b4:	491b      	ldr	r1, [pc, #108]	; (800e224 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b8>)
 800e1b6:	fb81 0103 	smull	r0, r1, r1, r3
 800e1ba:	4419      	add	r1, r3
 800e1bc:	1189      	asrs	r1, r1, #6
 800e1be:	17db      	asrs	r3, r3, #31
 800e1c0:	1acb      	subs	r3, r1, r3
 800e1c2:	4917      	ldr	r1, [pc, #92]	; (800e220 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11b4>)
 800e1c4:	6809      	ldr	r1, [r1, #0]
 800e1c6:	88c9      	ldrh	r1, [r1, #6]
 800e1c8:	b289      	uxth	r1, r1
 800e1ca:	1a5b      	subs	r3, r3, r1
 800e1cc:	fb92 f3f3 	sdiv	r3, r2, r3
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	330c      	adds	r3, #12
 800e1d4:	f887 32ac 	strb.w	r3, [r7, #684]	; 0x2ac
			setup_rpm_ws2812(rgb_array);
 800e1d8:	f897 32ac 	ldrb.w	r3, [r7, #684]	; 0x2ac
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f004 fb7b 	bl	80128d8 <_Z16setup_rpm_ws2812h>
 800e1e2:	e015      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
		}
	}else if(cmd->cmd == "help"){
 800e1e4:	f107 0308 	add.w	r3, r7, #8
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	490f      	ldr	r1, [pc, #60]	; (800e228 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11bc>)
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f000 f8a8 	bl	800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d008      	beq.n	800e20a <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x119e>
		flag = false;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
		*reply += ""
 800e1fe:	1d3b      	adds	r3, r7, #4
 800e200:	490a      	ldr	r1, [pc, #40]	; (800e22c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11c0>)
 800e202:	6818      	ldr	r0, [r3, #0]
 800e204:	f007 fa4c 	bl	80156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800e208:	e002      	b.n	800e210 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a4>
				", save, zeroenc, maxPower, degrees, axismask, ppr, adcmax, inverted, constantGain, rampGain, squareGain, sinGain, triangleGain, sawToothDownGain, sawToothUpGain, springGain, damperGain, inertiaGain, frictionGain, endstopGain, totalGain, maxVelosity, maxAcceleration, maxPositionChange, minPower, pos, hidrate, led, all, help\n"; // TODO
	}else{
		flag = false;
 800e20a:	2300      	movs	r3, #0
 800e20c:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
	}


	return flag;
 800e210:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
}
 800e214:	4618      	mov	r0, r3
 800e216:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd90      	pop	{r4, r7, pc}
 800e21e:	bf00      	nop
 800e220:	20000b40 	.word	0x20000b40
 800e224:	ac769185 	.word	0xac769185
 800e228:	080187e0 	.word	0x080187e0
 800e22c:	080189b4 	.word	0x080189b4

0800e230 <_ZThn8_N8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	bool command(ParsedCommand* cmd,std::string* reply);
 800e230:	f1a0 0008 	sub.w	r0, r0, #8
 800e234:	f7fe bf1a 	b.w	800d06c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

0800e238 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800e238:	b408      	push	{r3}
 800e23a:	b590      	push	{r4, r7, lr}
 800e23c:	b088      	sub	sp, #32
 800e23e:	af00      	add	r7, sp, #0
 800e240:	60f8      	str	r0, [r7, #12]
 800e242:	60b9      	str	r1, [r7, #8]
 800e244:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3307      	adds	r3, #7
 800e24a:	3307      	adds	r3, #7
 800e24c:	08db      	lsrs	r3, r3, #3
 800e24e:	00db      	lsls	r3, r3, #3
 800e250:	ebad 0d03 	sub.w	sp, sp, r3
 800e254:	466b      	mov	r3, sp
 800e256:	3307      	adds	r3, #7
 800e258:	08db      	lsrs	r3, r3, #3
 800e25a:	00db      	lsls	r3, r3, #3
 800e25c:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800e25e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e262:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800e264:	68bc      	ldr	r4, [r7, #8]
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e26a:	6879      	ldr	r1, [r7, #4]
 800e26c:	69f8      	ldr	r0, [r7, #28]
 800e26e:	47a0      	blx	r4
 800e270:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	69fa      	ldr	r2, [r7, #28]
 800e276:	18d4      	adds	r4, r2, r3
 800e278:	f107 0314 	add.w	r3, r7, #20
 800e27c:	4618      	mov	r0, r3
 800e27e:	f007 f835 	bl	80152ec <_ZNSaIcEC1Ev>
 800e282:	f107 0314 	add.w	r3, r7, #20
 800e286:	4622      	mov	r2, r4
 800e288:	69f9      	ldr	r1, [r7, #28]
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f000 f87f 	bl	800e38e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 800e290:	f107 0314 	add.w	r3, r7, #20
 800e294:	4618      	mov	r0, r3
 800e296:	f007 f82a 	bl	80152ee <_ZNSaIcED1Ev>
    }
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	3720      	adds	r7, #32
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e2a4:	b001      	add	sp, #4
 800e2a6:	4770      	bx	lr

0800e2a8 <_ZN9__gnu_cxxneIP13ParsedCommandSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e2a8:	b590      	push	{r4, r7, lr}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7fb fd3e 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	681c      	ldr	r4, [r3, #0]
 800e2bc:	6838      	ldr	r0, [r7, #0]
 800e2be:	f7fb fd39 	bl	8009d34 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	429c      	cmp	r4, r3
 800e2c8:	bf14      	ite	ne
 800e2ca:	2301      	movne	r3, #1
 800e2cc:	2300      	moveq	r3, #0
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd90      	pop	{r4, r7, pc}

0800e2d8 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	601a      	str	r2, [r3, #0]
	return *this;
 800e2ec:	687b      	ldr	r3, [r7, #4]
      }
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	370c      	adds	r7, #12
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bc80      	pop	{r7}
 800e2f6:	4770      	bx	lr

0800e2f8 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	bc80      	pop	{r7}
 800e30c:	4770      	bx	lr

0800e30e <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e30e:	b480      	push	{r7}
 800e310:	b083      	sub	sp, #12
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	1d1a      	adds	r2, r3, #4
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	601a      	str	r2, [r3, #0]
	return *this;
 800e320:	687b      	ldr	r3, [r7, #4]
      }
 800e322:	4618      	mov	r0, r3
 800e324:	370c      	adds	r7, #12
 800e326:	46bd      	mov	sp, r7
 800e328:	bc80      	pop	{r7}
 800e32a:	4770      	bx	lr

0800e32c <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4618      	mov	r0, r3
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bc80      	pop	{r7}
 800e340:	4770      	bx	lr

0800e342 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800e342:	b580      	push	{r7, lr}
 800e344:	b082      	sub	sp, #8
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f007 f9c1 	bl	80156d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	bf0c      	ite	eq
 800e35a:	2301      	moveq	r3, #1
 800e35c:	2300      	movne	r3, #0
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	4618      	mov	r0, r3
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	da01      	bge.n	800e382 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	e000      	b.n	800e384 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800e382:	687b      	ldr	r3, [r7, #4]
    }
 800e384:	4618      	mov	r0, r3
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	bc80      	pop	{r7}
 800e38c:	4770      	bx	lr

0800e38e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800e38e:	b590      	push	{r4, r7, lr}
 800e390:	b085      	sub	sp, #20
 800e392:	af00      	add	r7, sp, #0
 800e394:	60f8      	str	r0, [r7, #12]
 800e396:	60b9      	str	r1, [r7, #8]
 800e398:	607a      	str	r2, [r7, #4]
 800e39a:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800e39c:	68fc      	ldr	r4, [r7, #12]
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f006 ffe5 	bl	801536e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f007 f9a6 	bl	80156fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	68b9      	ldr	r1, [r7, #8]
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f000 f805 	bl	800e3c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3714      	adds	r7, #20
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd90      	pop	{r4, r7, pc}

0800e3c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b086      	sub	sp, #24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	68b9      	ldr	r1, [r7, #8]
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f000 f804 	bl	800e3e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800e3da:	bf00      	nop
 800e3dc:	3718      	adds	r7, #24
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800e3e2:	b590      	push	{r4, r7, lr}
 800e3e4:	b087      	sub	sp, #28
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	60f8      	str	r0, [r7, #12]
 800e3ea:	60b9      	str	r1, [r7, #8]
 800e3ec:	607a      	str	r2, [r7, #4]
 800e3ee:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800e3f0:	4623      	mov	r3, r4
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	68b9      	ldr	r1, [r7, #8]
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 f804 	bl	800e404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800e3fc:	bf00      	nop
 800e3fe:	371c      	adds	r7, #28
 800e400:	46bd      	mov	sp, r7
 800e402:	bd90      	pop	{r4, r7, pc}

0800e404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
 800e410:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800e412:	68b8      	ldr	r0, [r7, #8]
 800e414:	f000 f83e 	bl	800e494 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d005      	beq.n	800e42a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800e41e:	68ba      	ldr	r2, [r7, #8]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	429a      	cmp	r2, r3
 800e424:	d001      	beq.n	800e42a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800e426:	2301      	movs	r3, #1
 800e428:	e000      	b.n	800e42c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800e42a:	2300      	movs	r3, #0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800e430:	4817      	ldr	r0, [pc, #92]	; (800e490 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800e432:	f006 ff60 	bl	80152f6 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800e436:	6879      	ldr	r1, [r7, #4]
 800e438:	68b8      	ldr	r0, [r7, #8]
 800e43a:	f000 f843 	bl	800e4c4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800e43e:	4603      	mov	r3, r0
 800e440:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	2b0f      	cmp	r3, #15
 800e446:	d910      	bls.n	800e46a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800e448:	f107 0314 	add.w	r3, r7, #20
 800e44c:	2200      	movs	r2, #0
 800e44e:	4619      	mov	r1, r3
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f006 ff95 	bl	8015380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e456:	4603      	mov	r3, r0
 800e458:	4619      	mov	r1, r3
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f006 ff83 	bl	8015366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	4619      	mov	r1, r3
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f006 ff84 	bl	8015372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f006 ff7d 	bl	801536a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800e470:	4603      	mov	r3, r0
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	68b9      	ldr	r1, [r7, #8]
 800e476:	4618      	mov	r0, r3
 800e478:	f006 ffc7 	bl	801540a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	4619      	mov	r1, r3
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f006 ff78 	bl	8015376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800e486:	bf00      	nop
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	08018afc 	.word	0x08018afc

0800e494 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	bf0c      	ite	eq
 800e4a2:	2301      	moveq	r3, #1
 800e4a4:	2300      	movne	r3, #0
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bc80      	pop	{r7}
 800e4b0:	4770      	bx	lr

0800e4b2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800e4b2:	b480      	push	{r7}
 800e4b4:	b083      	sub	sp, #12
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	370c      	adds	r7, #12
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bc80      	pop	{r7}
 800e4c2:	4770      	bx	lr

0800e4c4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800e4c4:	b5b0      	push	{r4, r5, r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800e4ce:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800e4d0:	1d3b      	adds	r3, r7, #4
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7ff ffed 	bl	800e4b2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800e4d8:	462a      	mov	r2, r5
 800e4da:	6839      	ldr	r1, [r7, #0]
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f000 f805 	bl	800e4ec <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800e4e2:	4603      	mov	r3, r0
    }
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bdb0      	pop	{r4, r5, r7, pc}

0800e4ec <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e4f8:	68ba      	ldr	r2, [r7, #8]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	1ad3      	subs	r3, r2, r3
    }
 800e4fe:	4618      	mov	r0, r3
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	bc80      	pop	{r7}
 800e506:	4770      	bx	lr

0800e508 <_Z17usbInit_HID_Wheelv>:
#include "usbd_desc.h"

extern USBD_HandleTypeDef hUsbDeviceFS;
USBD_ClassTypeDef* handles[2];

void usbInit_HID_Wheel(){
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
	handles[CDC_IDX] = &USBD_CDC;
 800e50e:	4b24      	ldr	r3, [pc, #144]	; (800e5a0 <_Z17usbInit_HID_Wheelv+0x98>)
 800e510:	4a24      	ldr	r2, [pc, #144]	; (800e5a4 <_Z17usbInit_HID_Wheelv+0x9c>)
 800e512:	601a      	str	r2, [r3, #0]
	handles[HID_IDX] = &USBD_CUSTOM_HID;
 800e514:	4b22      	ldr	r3, [pc, #136]	; (800e5a0 <_Z17usbInit_HID_Wheelv+0x98>)
 800e516:	4a24      	ldr	r2, [pc, #144]	; (800e5a8 <_Z17usbInit_HID_Wheelv+0xa0>)
 800e518:	605a      	str	r2, [r3, #4]

	// Base Descriptor
	USB_ConfigDescType base_desc = {
 800e51a:	4a24      	ldr	r2, [pc, #144]	; (800e5ac <_Z17usbInit_HID_Wheelv+0xa4>)
 800e51c:	1d3b      	adds	r3, r7, #4
 800e51e:	ca07      	ldmia	r2, {r0, r1, r2}
 800e520:	c303      	stmia	r3!, {r0, r1}
 800e522:	701a      	strb	r2, [r3, #0]
		0xC0,   /* bmAttributes: self powered */
		0x32,   /* MaxPower 100 mA */

	};

	USBD_Init(&hUsbDeviceFS, &FS_Desc_Composite, DEVICE_FS);
 800e524:	2200      	movs	r2, #0
 800e526:	4922      	ldr	r1, [pc, #136]	; (800e5b0 <_Z17usbInit_HID_Wheelv+0xa8>)
 800e528:	4822      	ldr	r0, [pc, #136]	; (800e5b4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e52a:	f005 fb3b 	bl	8013ba4 <USBD_Init>

	// Add descriptors and class functions to composite device
	USBD_Composite_Set_Classes(handles,2,&base_desc);
 800e52e:	1d3b      	adds	r3, r7, #4
 800e530:	461a      	mov	r2, r3
 800e532:	2102      	movs	r1, #2
 800e534:	481a      	ldr	r0, [pc, #104]	; (800e5a0 <_Z17usbInit_HID_Wheelv+0x98>)
 800e536:	f004 fee3 	bl	8013300 <USBD_Composite_Set_Classes>

	// Define endpoints

	//HID
	USBD_Composite_EPIN_To_Class(CUSTOM_HID_EPIN_ADDR, HID_IDX);
 800e53a:	2101      	movs	r1, #1
 800e53c:	2083      	movs	r0, #131	; 0x83
 800e53e:	f004 fe63 	bl	8013208 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPOUT_To_Class(CUSTOM_HID_EPOUT_ADDR, HID_IDX);
 800e542:	2101      	movs	r1, #1
 800e544:	2002      	movs	r0, #2
 800e546:	f004 fe75 	bl	8013234 <USBD_Composite_EPOUT_To_Class>
	USBD_Composite_InterfaceToClass(HID_INTERFACE,HID_IDX);
 800e54a:	2101      	movs	r1, #1
 800e54c:	2002      	movs	r0, #2
 800e54e:	f005 f8a1 	bl	8013694 <USBD_Composite_InterfaceToClass>

	// CDC
	USBD_Composite_EPIN_To_Class(CDC_CMD_EP, CDC_IDX);
 800e552:	2100      	movs	r1, #0
 800e554:	2082      	movs	r0, #130	; 0x82
 800e556:	f004 fe57 	bl	8013208 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_IN_EP, CDC_IDX);
 800e55a:	2100      	movs	r1, #0
 800e55c:	2081      	movs	r0, #129	; 0x81
 800e55e:	f004 fe53 	bl	8013208 <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_OUT_EP, CDC_IDX);
 800e562:	2100      	movs	r1, #0
 800e564:	2001      	movs	r0, #1
 800e566:	f004 fe4f 	bl	8013208 <USBD_Composite_EPIN_To_Class>

	USBD_Composite_InterfaceToClass(CDC_INTERFACE,CDC_IDX);
 800e56a:	2100      	movs	r1, #0
 800e56c:	2000      	movs	r0, #0
 800e56e:	f005 f891 	bl	8013694 <USBD_Composite_InterfaceToClass>
	USBD_Composite_InterfaceToClass(CDC_INTERFACE_DATA,CDC_IDX);
 800e572:	2100      	movs	r1, #0
 800e574:	2001      	movs	r0, #1
 800e576:	f005 f88d 	bl	8013694 <USBD_Composite_InterfaceToClass>


	USBD_RegisterClass(&hUsbDeviceFS, &USBD_Composite);
 800e57a:	490f      	ldr	r1, [pc, #60]	; (800e5b8 <_Z17usbInit_HID_Wheelv+0xb0>)
 800e57c:	480d      	ldr	r0, [pc, #52]	; (800e5b4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e57e:	f005 fb3c 	bl	8013bfa <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800e582:	490e      	ldr	r1, [pc, #56]	; (800e5bc <_Z17usbInit_HID_Wheelv+0xb4>)
 800e584:	480b      	ldr	r0, [pc, #44]	; (800e5b4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e586:	f004 fc6b 	bl	8012e60 <USBD_CDC_RegisterInterface>
	USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 800e58a:	490d      	ldr	r1, [pc, #52]	; (800e5c0 <_Z17usbInit_HID_Wheelv+0xb8>)
 800e58c:	4809      	ldr	r0, [pc, #36]	; (800e5b4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e58e:	f006 fd43 	bl	8015018 <USBD_CUSTOM_HID_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800e592:	4808      	ldr	r0, [pc, #32]	; (800e5b4 <_Z17usbInit_HID_Wheelv+0xac>)
 800e594:	f005 fb4a 	bl	8013c2c <USBD_Start>
}
 800e598:	bf00      	nop
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20000b44 	.word	0x20000b44
 800e5a4:	2000002c 	.word	0x2000002c
 800e5a8:	2000061c 	.word	0x2000061c
 800e5ac:	08018b28 	.word	0x08018b28
 800e5b0:	200006f0 	.word	0x200006f0
 800e5b4:	20000918 	.word	0x20000918
 800e5b8:	200000c0 	.word	0x200000c0
 800e5bc:	200000b0 	.word	0x200000b0
 800e5c0:	20000608 	.word	0x20000608

0800e5c4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	370c      	adds	r7, #12
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bc80      	pop	{r7}
 800e5da:	4770      	bx	lr

0800e5dc <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f007 f995 	bl	8015914 <cosf>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f007 fbc7 	bl	8015d90 <expf>
 800e602:	4603      	mov	r3, r0
 800e604:	4618      	mov	r0, r3
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <_ZN7FiltersC1Ev>:
 *      Author: kks19
 */

#include <Filters.h>

Filters::Filters()
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
{
	// TODO Auto-generated constructor stub

}
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4618      	mov	r0, r3
 800e618:	370c      	adds	r7, #12
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bc80      	pop	{r7}
 800e61e:	4770      	bx	lr

0800e620 <_ZN7FiltersC1Eff5ORDER4TYPE>:

Filters::Filters(float hz_, float ts_, ORDER od_, TYPE ty_) :
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
 800e62c:	70fb      	strb	r3, [r7, #3]
  ts( ts_ ),
  hz( hz_ ),
  od( od_ ),
  ty( ty_ )
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	601a      	str	r2, [r3, #0]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	605a      	str	r2, [r3, #4]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	78fa      	ldrb	r2, [r7, #3]
 800e63e:	721a      	strb	r2, [r3, #8]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	7e3a      	ldrb	r2, [r7, #24]
 800e644:	725a      	strb	r2, [r3, #9]
{
  init();
 800e646:	2101      	movs	r1, #1
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f000 f80f 	bl	800e66c <_ZN7Filters4initEh>
}
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <_ZN7FiltersD1Ev>:

Filters::~Filters()
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
{
	// TODO Auto-generated destructor stub
}
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4618      	mov	r0, r3
 800e664:	370c      	adds	r7, #12
 800e666:	46bd      	mov	sp, r7
 800e668:	bc80      	pop	{r7}
 800e66a:	4770      	bx	lr

0800e66c <_ZN7Filters4initEh>:

void Filters::init(uint8_t doFlush) {
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	460b      	mov	r3, r1
 800e676:	70fb      	strb	r3, [r7, #3]
  if(doFlush) flush();
 800e678:	78fb      	ldrb	r3, [r7, #3]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d002      	beq.n	800e684 <_ZN7Filters4initEh+0x18>
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f840 	bl	800e704 <_ZN7Filters5flushEv>
  f_err  = false;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  f_warn = false;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  switch ((uint8_t)ty) {
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7a5b      	ldrb	r3, [r3, #9]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <_ZN7Filters4initEh+0x36>
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d004      	beq.n	800e6aa <_ZN7Filters4initEh+0x3e>
      break;
    case (uint8_t)TYPE::HIGHPASS :
      initHighPass();
      break;
  }
}
 800e6a0:	e007      	b.n	800e6b2 <_ZN7Filters4initEh+0x46>
      initLowPass();
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 fa1c 	bl	800eae0 <_ZN7Filters11initLowPassEv>
      break;
 800e6a8:	e003      	b.n	800e6b2 <_ZN7Filters4initEh+0x46>
      initHighPass();
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fe70 	bl	800f390 <_ZN7Filters12initHighPassEv>
      break;
 800e6b0:	bf00      	nop
}
 800e6b2:	bf00      	nop
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <_ZN7Filters8filterInEf>:

float Filters::filterIn(float input) {
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b082      	sub	sp, #8
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	6039      	str	r1, [r7, #0]
  if(f_err) return 0.0;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d002      	beq.n	800e6d4 <_ZN7Filters8filterInEf+0x1a>
 800e6ce:	f04f 0300 	mov.w	r3, #0
 800e6d2:	e013      	b.n	800e6fc <_ZN7Filters8filterInEf+0x42>

  switch ((uint8_t)ty) {
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	7a5b      	ldrb	r3, [r3, #9]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d002      	beq.n	800e6e2 <_ZN7Filters8filterInEf+0x28>
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d006      	beq.n	800e6ee <_ZN7Filters8filterInEf+0x34>
 800e6e0:	e00b      	b.n	800e6fa <_ZN7Filters8filterInEf+0x40>
    case (uint8_t)TYPE::LOWPASS :
      return computeLowPass(input);
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 f82f 	bl	800e748 <_ZN7Filters14computeLowPassEf>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	e006      	b.n	800e6fc <_ZN7Filters8filterInEf+0x42>
      break;
    case (uint8_t)TYPE::HIGHPASS :
      return computeHighPass(input);
 800e6ee:	6839      	ldr	r1, [r7, #0]
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 f93f 	bl	800e974 <_ZN7Filters15computeHighPassEf>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	e000      	b.n	800e6fc <_ZN7Filters8filterInEf+0x42>
      break;
    default:
      return input;
 800e6fa:	683b      	ldr	r3, [r7, #0]
  }
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3708      	adds	r7, #8
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <_ZN7Filters5flushEv>:

void Filters::flush() {
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  for(uint8_t i=0; i<MAX_ORDER; i++) {
 800e70c:	2300      	movs	r3, #0
 800e70e:	73fb      	strb	r3, [r7, #15]
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	2b04      	cmp	r3, #4
 800e714:	d812      	bhi.n	800e73c <_ZN7Filters5flushEv+0x38>
    u[i] = 0.0;
 800e716:	7bfa      	ldrb	r2, [r7, #15]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	321e      	adds	r2, #30
 800e71c:	f04f 0100 	mov.w	r1, #0
 800e720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    y[i] = 0.0;
 800e724:	7bfb      	ldrb	r3, [r7, #15]
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	3318      	adds	r3, #24
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	4413      	add	r3, r2
 800e72e:	f04f 0200 	mov.w	r2, #0
 800e732:	605a      	str	r2, [r3, #4]
  for(uint8_t i=0; i<MAX_ORDER; i++) {
 800e734:	7bfb      	ldrb	r3, [r7, #15]
 800e736:	3301      	adds	r3, #1
 800e738:	73fb      	strb	r3, [r7, #15]
 800e73a:	e7e9      	b.n	800e710 <_ZN7Filters5flushEv+0xc>
  }
}
 800e73c:	bf00      	nop
 800e73e:	3714      	adds	r7, #20
 800e740:	46bd      	mov	sp, r7
 800e742:	bc80      	pop	{r7}
 800e744:	4770      	bx	lr
	...

0800e748 <_ZN7Filters14computeLowPassEf>:

// PRIVATE METHODS  * * * * * * * * * * * * * * * * * * * *

inline float Filters::computeLowPass(float input) {
 800e748:	b590      	push	{r4, r7, lr}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 800e752:	2304      	movs	r3, #4
 800e754:	73fb      	strb	r3, [r7, #15]
 800e756:	7bfb      	ldrb	r3, [r7, #15]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d01c      	beq.n	800e796 <_ZN7Filters14computeLowPassEf+0x4e>
    y[i] = y[i-1];
 800e75c:	7bfb      	ldrb	r3, [r7, #15]
 800e75e:	3b01      	subs	r3, #1
 800e760:	7bf8      	ldrb	r0, [r7, #15]
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	3318      	adds	r3, #24
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	4413      	add	r3, r2
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	6879      	ldr	r1, [r7, #4]
 800e76e:	f100 0318 	add.w	r3, r0, #24
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	440b      	add	r3, r1
 800e776:	605a      	str	r2, [r3, #4]
    u[i] = u[i-1];
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	1e59      	subs	r1, r3, #1
 800e77c:	7bfa      	ldrb	r2, [r7, #15]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	311e      	adds	r1, #30
 800e782:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	321e      	adds	r2, #30
 800e78a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	3b01      	subs	r3, #1
 800e792:	73fb      	strb	r3, [r7, #15]
 800e794:	e7df      	b.n	800e756 <_ZN7Filters14computeLowPassEf+0xe>
  }

  switch((uint8_t)od) {
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	7a1b      	ldrb	r3, [r3, #8]
 800e79a:	2b03      	cmp	r3, #3
 800e79c:	f200 80dd 	bhi.w	800e95a <_ZN7Filters14computeLowPassEf+0x212>
 800e7a0:	a201      	add	r2, pc, #4	; (adr r2, 800e7a8 <_ZN7Filters14computeLowPassEf+0x60>)
 800e7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a6:	bf00      	nop
 800e7a8:	0800e7b9 	.word	0x0800e7b9
 800e7ac:	0800e7ed 	.word	0x0800e7ed
 800e7b0:	0800e849 	.word	0x0800e849
 800e7b4:	0800e8c3 	.word	0x0800e8c3
    case (uint8_t)ORDER::OD1:
        y[0] = k1*y[1] + k0*input;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	4610      	mov	r0, r2
 800e7c4:	f7f2 fabe 	bl	8000d44 <__aeabi_fmul>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	461c      	mov	r4, r3
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d0:	6839      	ldr	r1, [r7, #0]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7f2 fab6 	bl	8000d44 <__aeabi_fmul>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	4619      	mov	r1, r3
 800e7dc:	4620      	mov	r0, r4
 800e7de:	f7f2 f9a9 	bl	8000b34 <__addsf3>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800e7ea:	e0ba      	b.n	800e962 <_ZN7Filters14computeLowPassEf+0x21a>
    case (uint8_t)ORDER::OD2:
        y[0] = k1*y[1] - k2*y[2] + (k0*input)/KM;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	f7f2 faa4 	bl	8000d44 <__aeabi_fmul>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	461c      	mov	r4, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e808:	4619      	mov	r1, r3
 800e80a:	4610      	mov	r0, r2
 800e80c:	f7f2 fa9a 	bl	8000d44 <__aeabi_fmul>
 800e810:	4603      	mov	r3, r0
 800e812:	4619      	mov	r1, r3
 800e814:	4620      	mov	r0, r4
 800e816:	f7f2 f98b 	bl	8000b30 <__aeabi_fsub>
 800e81a:	4603      	mov	r3, r0
 800e81c:	461c      	mov	r4, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e822:	6839      	ldr	r1, [r7, #0]
 800e824:	4618      	mov	r0, r3
 800e826:	f7f2 fa8d 	bl	8000d44 <__aeabi_fmul>
 800e82a:	4603      	mov	r3, r0
 800e82c:	4950      	ldr	r1, [pc, #320]	; (800e970 <_ZN7Filters14computeLowPassEf+0x228>)
 800e82e:	4618      	mov	r0, r3
 800e830:	f7f2 fb3c 	bl	8000eac <__aeabi_fdiv>
 800e834:	4603      	mov	r3, r0
 800e836:	4619      	mov	r1, r3
 800e838:	4620      	mov	r0, r4
 800e83a:	f7f2 f97b 	bl	8000b34 <__addsf3>
 800e83e:	4603      	mov	r3, r0
 800e840:	461a      	mov	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800e846:	e08c      	b.n	800e962 <_ZN7Filters14computeLowPassEf+0x21a>
    case (uint8_t)ORDER::OD3:
        y[0] = k1*y[1] - k2*y[2] + k3*y[3] + (k0*input)/KM;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e850:	4619      	mov	r1, r3
 800e852:	4610      	mov	r0, r2
 800e854:	f7f2 fa76 	bl	8000d44 <__aeabi_fmul>
 800e858:	4603      	mov	r3, r0
 800e85a:	461c      	mov	r4, r3
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e864:	4619      	mov	r1, r3
 800e866:	4610      	mov	r0, r2
 800e868:	f7f2 fa6c 	bl	8000d44 <__aeabi_fmul>
 800e86c:	4603      	mov	r3, r0
 800e86e:	4619      	mov	r1, r3
 800e870:	4620      	mov	r0, r4
 800e872:	f7f2 f95d 	bl	8000b30 <__aeabi_fsub>
 800e876:	4603      	mov	r3, r0
 800e878:	461c      	mov	r4, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e882:	4619      	mov	r1, r3
 800e884:	4610      	mov	r0, r2
 800e886:	f7f2 fa5d 	bl	8000d44 <__aeabi_fmul>
 800e88a:	4603      	mov	r3, r0
 800e88c:	4619      	mov	r1, r3
 800e88e:	4620      	mov	r0, r4
 800e890:	f7f2 f950 	bl	8000b34 <__addsf3>
 800e894:	4603      	mov	r3, r0
 800e896:	461c      	mov	r4, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7f2 fa50 	bl	8000d44 <__aeabi_fmul>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	4932      	ldr	r1, [pc, #200]	; (800e970 <_ZN7Filters14computeLowPassEf+0x228>)
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7f2 faff 	bl	8000eac <__aeabi_fdiv>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f7f2 f93e 	bl	8000b34 <__addsf3>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800e8c0:	e04f      	b.n	800e962 <_ZN7Filters14computeLowPassEf+0x21a>
    case (uint8_t)ORDER::OD4:
        y[0] = k1*y[1] - k2*y[2] + k3*y[3] - k4*y[4] + (k0*input)/KM;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	f7f2 fa39 	bl	8000d44 <__aeabi_fmul>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	461c      	mov	r4, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	f7f2 fa2f 	bl	8000d44 <__aeabi_fmul>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f7f2 f920 	bl	8000b30 <__aeabi_fsub>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	461c      	mov	r4, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	4610      	mov	r0, r2
 800e900:	f7f2 fa20 	bl	8000d44 <__aeabi_fmul>
 800e904:	4603      	mov	r3, r0
 800e906:	4619      	mov	r1, r3
 800e908:	4620      	mov	r0, r4
 800e90a:	f7f2 f913 	bl	8000b34 <__addsf3>
 800e90e:	4603      	mov	r3, r0
 800e910:	461c      	mov	r4, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e91a:	4619      	mov	r1, r3
 800e91c:	4610      	mov	r0, r2
 800e91e:	f7f2 fa11 	bl	8000d44 <__aeabi_fmul>
 800e922:	4603      	mov	r3, r0
 800e924:	4619      	mov	r1, r3
 800e926:	4620      	mov	r0, r4
 800e928:	f7f2 f902 	bl	8000b30 <__aeabi_fsub>
 800e92c:	4603      	mov	r3, r0
 800e92e:	461c      	mov	r4, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e934:	6839      	ldr	r1, [r7, #0]
 800e936:	4618      	mov	r0, r3
 800e938:	f7f2 fa04 	bl	8000d44 <__aeabi_fmul>
 800e93c:	4603      	mov	r3, r0
 800e93e:	490c      	ldr	r1, [pc, #48]	; (800e970 <_ZN7Filters14computeLowPassEf+0x228>)
 800e940:	4618      	mov	r0, r3
 800e942:	f7f2 fab3 	bl	8000eac <__aeabi_fdiv>
 800e946:	4603      	mov	r3, r0
 800e948:	4619      	mov	r1, r3
 800e94a:	4620      	mov	r0, r4
 800e94c:	f7f2 f8f2 	bl	8000b34 <__addsf3>
 800e950:	4603      	mov	r3, r0
 800e952:	461a      	mov	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800e958:	e003      	b.n	800e962 <_ZN7Filters14computeLowPassEf+0x21a>
    default:
        y[0] = input;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	683a      	ldr	r2, [r7, #0]
 800e95e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800e960:	bf00      	nop
  }
  return y[0];
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 800e966:	4618      	mov	r0, r3
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd90      	pop	{r4, r7, pc}
 800e96e:	bf00      	nop
 800e970:	42c80000 	.word	0x42c80000

0800e974 <_ZN7Filters15computeHighPassEf>:

inline float Filters::computeHighPass(float input) {
 800e974:	b590      	push	{r4, r7, lr}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 800e97e:	2304      	movs	r3, #4
 800e980:	73fb      	strb	r3, [r7, #15]
 800e982:	7bfb      	ldrb	r3, [r7, #15]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d01c      	beq.n	800e9c2 <_ZN7Filters15computeHighPassEf+0x4e>
    y[i] = y[i-1];
 800e988:	7bfb      	ldrb	r3, [r7, #15]
 800e98a:	3b01      	subs	r3, #1
 800e98c:	7bf8      	ldrb	r0, [r7, #15]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	3318      	adds	r3, #24
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	4413      	add	r3, r2
 800e996:	685a      	ldr	r2, [r3, #4]
 800e998:	6879      	ldr	r1, [r7, #4]
 800e99a:	f100 0318 	add.w	r3, r0, #24
 800e99e:	009b      	lsls	r3, r3, #2
 800e9a0:	440b      	add	r3, r1
 800e9a2:	605a      	str	r2, [r3, #4]
    u[i] = u[i-1];
 800e9a4:	7bfb      	ldrb	r3, [r7, #15]
 800e9a6:	1e59      	subs	r1, r3, #1
 800e9a8:	7bfa      	ldrb	r2, [r7, #15]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	311e      	adds	r1, #30
 800e9ae:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	321e      	adds	r2, #30
 800e9b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(uint8_t i=MAX_ORDER-1; i>0; i--) {
 800e9ba:	7bfb      	ldrb	r3, [r7, #15]
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	73fb      	strb	r3, [r7, #15]
 800e9c0:	e7df      	b.n	800e982 <_ZN7Filters15computeHighPassEf+0xe>
  }
  u[0] = input;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	683a      	ldr	r2, [r7, #0]
 800e9c6:	679a      	str	r2, [r3, #120]	; 0x78

  switch((uint8_t)od) {
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	7a1b      	ldrb	r3, [r3, #8]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d004      	beq.n	800e9da <_ZN7Filters15computeHighPassEf+0x66>
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	db77      	blt.n	800eac4 <_ZN7Filters15computeHighPassEf+0x150>
 800e9d4:	2b03      	cmp	r3, #3
 800e9d6:	dc75      	bgt.n	800eac4 <_ZN7Filters15computeHighPassEf+0x150>
 800e9d8:	e02a      	b.n	800ea30 <_ZN7Filters15computeHighPassEf+0xbc>
    case (uint8_t)ORDER::OD1:
        y[0] = k1*y[1] + j0*u[0] + j1*u[1];
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	f7f2 f9ad 	bl	8000d44 <__aeabi_fmul>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	461c      	mov	r4, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	f7f2 f9a3 	bl	8000d44 <__aeabi_fmul>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	4619      	mov	r1, r3
 800ea02:	4620      	mov	r0, r4
 800ea04:	f7f2 f896 	bl	8000b34 <__addsf3>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	461c      	mov	r4, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea14:	4619      	mov	r1, r3
 800ea16:	4610      	mov	r0, r2
 800ea18:	f7f2 f994 	bl	8000d44 <__aeabi_fmul>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4620      	mov	r0, r4
 800ea22:	f7f2 f887 	bl	8000b34 <__addsf3>
 800ea26:	4603      	mov	r3, r0
 800ea28:	461a      	mov	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800ea2e:	e04e      	b.n	800eace <_ZN7Filters15computeHighPassEf+0x15a>
    case (uint8_t)ORDER::OD2:
    case (uint8_t)ORDER::OD3:
    case (uint8_t)ORDER::OD4:
        y[0] = k1*y[1] + k2*y[2] + j0*u[0] + j1*u[1] + j2*u[2];
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4610      	mov	r0, r2
 800ea3c:	f7f2 f982 	bl	8000d44 <__aeabi_fmul>
 800ea40:	4603      	mov	r3, r0
 800ea42:	461c      	mov	r4, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	4610      	mov	r0, r2
 800ea50:	f7f2 f978 	bl	8000d44 <__aeabi_fmul>
 800ea54:	4603      	mov	r3, r0
 800ea56:	4619      	mov	r1, r3
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f7f2 f86b 	bl	8000b34 <__addsf3>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	461c      	mov	r4, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	f7f2 f969 	bl	8000d44 <__aeabi_fmul>
 800ea72:	4603      	mov	r3, r0
 800ea74:	4619      	mov	r1, r3
 800ea76:	4620      	mov	r0, r4
 800ea78:	f7f2 f85c 	bl	8000b34 <__addsf3>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	461c      	mov	r4, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	f7f2 f95a 	bl	8000d44 <__aeabi_fmul>
 800ea90:	4603      	mov	r3, r0
 800ea92:	4619      	mov	r1, r3
 800ea94:	4620      	mov	r0, r4
 800ea96:	f7f2 f84d 	bl	8000b34 <__addsf3>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	461c      	mov	r4, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f7f2 f94a 	bl	8000d44 <__aeabi_fmul>
 800eab0:	4603      	mov	r3, r0
 800eab2:	4619      	mov	r1, r3
 800eab4:	4620      	mov	r0, r4
 800eab6:	f7f2 f83d 	bl	8000b34 <__addsf3>
 800eaba:	4603      	mov	r3, r0
 800eabc:	461a      	mov	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800eac2:	e004      	b.n	800eace <_ZN7Filters15computeHighPassEf+0x15a>
    default:
        y[0] = u[0];
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800eacc:	bf00      	nop
  }
  return y[0];
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3714      	adds	r7, #20
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd90      	pop	{r4, r7, pc}
 800eada:	0000      	movs	r0, r0
 800eadc:	0000      	movs	r0, r0
	...

0800eae0 <_ZN7Filters11initLowPassEv>:


inline void  Filters::initLowPass() {
 800eae0:	b5b0      	push	{r4, r5, r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  switch((uint8_t)od) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	7a1b      	ldrb	r3, [r3, #8]
 800eaec:	2b03      	cmp	r3, #3
 800eaee:	f200 8444 	bhi.w	800f37a <_ZN7Filters11initLowPassEv+0x89a>
 800eaf2:	a201      	add	r2, pc, #4	; (adr r2, 800eaf8 <_ZN7Filters11initLowPassEv+0x18>)
 800eaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf8:	0800eb09 	.word	0x0800eb09
 800eafc:	0800eb6b 	.word	0x0800eb6b
 800eb00:	0800ed05 	.word	0x0800ed05
 800eb04:	0800efcd 	.word	0x0800efcd
    case (uint8_t)ORDER::OD1:
        a  = 2.0*PI*hz;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7f1 fc8b 	bl	8000428 <__aeabi_f2d>
 800eb12:	a375      	add	r3, pc, #468	; (adr r3, 800ece8 <_ZN7Filters11initLowPassEv+0x208>)
 800eb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb18:	f7f1 fcde 	bl	80004d8 <__aeabi_dmul>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	460c      	mov	r4, r1
 800eb20:	4618      	mov	r0, r3
 800eb22:	4621      	mov	r1, r4
 800eb24:	f7f1 ffb0 	bl	8000a88 <__aeabi_d2f>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	60da      	str	r2, [r3, #12]
        k1 = exp(-a*ts);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	f7f2 f901 	bl	8000d44 <__aeabi_fmul>
 800eb42:	4603      	mov	r3, r0
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fd55 	bl	800e5f4 <_ZSt3expf>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	645a      	str	r2, [r3, #68]	; 0x44
        k0 = 1.0 - k1;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb54:	4619      	mov	r1, r3
 800eb56:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800eb5a:	f7f1 ffe9 	bl	8000b30 <__aeabi_fsub>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	461a      	mov	r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800eb66:	f000 bc08 	b.w	800f37a <_ZN7Filters11initLowPassEv+0x89a>
    case (uint8_t)ORDER::OD2:
        a  = -PI*hz*SQRT2;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	4960      	ldr	r1, [pc, #384]	; (800ecf0 <_ZN7Filters11initLowPassEv+0x210>)
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7f2 f8e7 	bl	8000d44 <__aeabi_fmul>
 800eb76:	4603      	mov	r3, r0
 800eb78:	495e      	ldr	r1, [pc, #376]	; (800ecf4 <_ZN7Filters11initLowPassEv+0x214>)
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7f2 f8e2 	bl	8000d44 <__aeabi_fmul>
 800eb80:	4603      	mov	r3, r0
 800eb82:	461a      	mov	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	60da      	str	r2, [r3, #12]
        b  =  PI*hz*SQRT2;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	495a      	ldr	r1, [pc, #360]	; (800ecf8 <_ZN7Filters11initLowPassEv+0x218>)
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7f2 f8d8 	bl	8000d44 <__aeabi_fmul>
 800eb94:	4603      	mov	r3, r0
 800eb96:	4957      	ldr	r1, [pc, #348]	; (800ecf4 <_ZN7Filters11initLowPassEv+0x214>)
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7f2 f8d3 	bl	8000d44 <__aeabi_fmul>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	461a      	mov	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	611a      	str	r2, [r3, #16]
        k2 = ap(exp(2.0*ts*a));
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7f1 fc3c 	bl	8000428 <__aeabi_f2d>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	f7f1 fada 	bl	800016c <__adddf3>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	460c      	mov	r4, r1
 800ebbc:	4625      	mov	r5, r4
 800ebbe:	461c      	mov	r4, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7f1 fc2f 	bl	8000428 <__aeabi_f2d>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	460b      	mov	r3, r1
 800ebce:	4620      	mov	r0, r4
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	f7f1 fc81 	bl	80004d8 <__aeabi_dmul>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	460c      	mov	r4, r1
 800ebda:	4618      	mov	r0, r3
 800ebdc:	4621      	mov	r1, r4
 800ebde:	f006 ff03 	bl	80159e8 <exp>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	4621      	mov	r1, r4
 800ebea:	f7f1 ff4d 	bl	8000a88 <__aeabi_d2f>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 fcf0 	bl	800f5d8 <_ZN7Filters2apEf>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	649a      	str	r2, [r3, #72]	; 0x48
        k1 = ap(2.0*exp(a*ts)*cos(b*ts));
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	68da      	ldr	r2, [r3, #12]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4619      	mov	r1, r3
 800ec08:	4610      	mov	r0, r2
 800ec0a:	f7f2 f89b 	bl	8000d44 <__aeabi_fmul>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7ff fcef 	bl	800e5f4 <_ZSt3expf>
 800ec16:	4603      	mov	r3, r0
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7f1 fc05 	bl	8000428 <__aeabi_f2d>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	f7f1 faa3 	bl	800016c <__adddf3>
 800ec26:	4603      	mov	r3, r0
 800ec28:	460c      	mov	r4, r1
 800ec2a:	4625      	mov	r5, r4
 800ec2c:	461c      	mov	r4, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	691a      	ldr	r2, [r3, #16]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4619      	mov	r1, r3
 800ec38:	4610      	mov	r0, r2
 800ec3a:	f7f2 f883 	bl	8000d44 <__aeabi_fmul>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7ff fccb 	bl	800e5dc <_ZSt3cosf>
 800ec46:	4603      	mov	r3, r0
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7f1 fbed 	bl	8000428 <__aeabi_f2d>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4620      	mov	r0, r4
 800ec54:	4629      	mov	r1, r5
 800ec56:	f7f1 fc3f 	bl	80004d8 <__aeabi_dmul>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	460c      	mov	r4, r1
 800ec5e:	4618      	mov	r0, r3
 800ec60:	4621      	mov	r1, r4
 800ec62:	f7f1 ff11 	bl	8000a88 <__aeabi_d2f>
 800ec66:	4603      	mov	r3, r0
 800ec68:	4619      	mov	r1, r3
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 fcb4 	bl	800f5d8 <_ZN7Filters2apEf>
 800ec70:	4602      	mov	r2, r0
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	645a      	str	r2, [r3, #68]	; 0x44
        k0 = ap(1.0*KM - k1*KM + k2*KM);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec7a:	4920      	ldr	r1, [pc, #128]	; (800ecfc <_ZN7Filters11initLowPassEv+0x21c>)
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7f2 f861 	bl	8000d44 <__aeabi_fmul>
 800ec82:	4603      	mov	r3, r0
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7f1 fbcf 	bl	8000428 <__aeabi_f2d>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	460c      	mov	r4, r1
 800ec8e:	461a      	mov	r2, r3
 800ec90:	4623      	mov	r3, r4
 800ec92:	f04f 0000 	mov.w	r0, #0
 800ec96:	491a      	ldr	r1, [pc, #104]	; (800ed00 <_ZN7Filters11initLowPassEv+0x220>)
 800ec98:	f7f1 fa66 	bl	8000168 <__aeabi_dsub>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	460c      	mov	r4, r1
 800eca0:	4625      	mov	r5, r4
 800eca2:	461c      	mov	r4, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eca8:	4914      	ldr	r1, [pc, #80]	; (800ecfc <_ZN7Filters11initLowPassEv+0x21c>)
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7f2 f84a 	bl	8000d44 <__aeabi_fmul>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7f1 fbb8 	bl	8000428 <__aeabi_f2d>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	4629      	mov	r1, r5
 800ecc0:	f7f1 fa54 	bl	800016c <__adddf3>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	4618      	mov	r0, r3
 800ecca:	4621      	mov	r1, r4
 800eccc:	f7f1 fedc 	bl	8000a88 <__aeabi_d2f>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 fc7f 	bl	800f5d8 <_ZN7Filters2apEf>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800ece0:	e34b      	b.n	800f37a <_ZN7Filters11initLowPassEv+0x89a>
 800ece2:	bf00      	nop
 800ece4:	f3af 8000 	nop.w
 800ece8:	60000000 	.word	0x60000000
 800ecec:	401921fb 	.word	0x401921fb
 800ecf0:	c0490fdb 	.word	0xc0490fdb
 800ecf4:	3fb504f3 	.word	0x3fb504f3
 800ecf8:	40490fdb 	.word	0x40490fdb
 800ecfc:	42c80000 	.word	0x42c80000
 800ed00:	40590000 	.word	0x40590000
    case (uint8_t)ORDER::OD3:
        a  = -PI*hz;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	49ab      	ldr	r1, [pc, #684]	; (800efb8 <_ZN7Filters11initLowPassEv+0x4d8>)
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7f2 f81a 	bl	8000d44 <__aeabi_fmul>
 800ed10:	4603      	mov	r3, r0
 800ed12:	461a      	mov	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	60da      	str	r2, [r3, #12]
        b  =  PI*hz*SQRT3;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	49a7      	ldr	r1, [pc, #668]	; (800efbc <_ZN7Filters11initLowPassEv+0x4dc>)
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7f2 f810 	bl	8000d44 <__aeabi_fmul>
 800ed24:	4603      	mov	r3, r0
 800ed26:	49a6      	ldr	r1, [pc, #664]	; (800efc0 <_ZN7Filters11initLowPassEv+0x4e0>)
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7f2 f80b 	bl	8000d44 <__aeabi_fmul>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	461a      	mov	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	611a      	str	r2, [r3, #16]
        c  =  2.0*PI*hz;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7f1 fb74 	bl	8000428 <__aeabi_f2d>
 800ed40:	a39b      	add	r3, pc, #620	; (adr r3, 800efb0 <_ZN7Filters11initLowPassEv+0x4d0>)
 800ed42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed46:	f7f1 fbc7 	bl	80004d8 <__aeabi_dmul>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	460c      	mov	r4, r1
 800ed4e:	4618      	mov	r0, r3
 800ed50:	4621      	mov	r1, r4
 800ed52:	f7f1 fe99 	bl	8000a88 <__aeabi_d2f>
 800ed56:	4602      	mov	r2, r0
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	615a      	str	r2, [r3, #20]
        b3 = exp(-c*ts);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	695b      	ldr	r3, [r3, #20]
 800ed60:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4619      	mov	r1, r3
 800ed6a:	4610      	mov	r0, r2
 800ed6c:	f7f1 ffea 	bl	8000d44 <__aeabi_fmul>
 800ed70:	4603      	mov	r3, r0
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7ff fc3e 	bl	800e5f4 <_ZSt3expf>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	62da      	str	r2, [r3, #44]	; 0x2c
        b2 = exp(2.0*ts*a);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7f1 fb50 	bl	8000428 <__aeabi_f2d>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	f7f1 f9ee 	bl	800016c <__adddf3>
 800ed90:	4603      	mov	r3, r0
 800ed92:	460c      	mov	r4, r1
 800ed94:	4625      	mov	r5, r4
 800ed96:	461c      	mov	r4, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7f1 fb43 	bl	8000428 <__aeabi_f2d>
 800eda2:	4602      	mov	r2, r0
 800eda4:	460b      	mov	r3, r1
 800eda6:	4620      	mov	r0, r4
 800eda8:	4629      	mov	r1, r5
 800edaa:	f7f1 fb95 	bl	80004d8 <__aeabi_dmul>
 800edae:	4603      	mov	r3, r0
 800edb0:	460c      	mov	r4, r1
 800edb2:	4618      	mov	r0, r3
 800edb4:	4621      	mov	r1, r4
 800edb6:	f006 fe17 	bl	80159e8 <exp>
 800edba:	4603      	mov	r3, r0
 800edbc:	460c      	mov	r4, r1
 800edbe:	4618      	mov	r0, r3
 800edc0:	4621      	mov	r1, r4
 800edc2:	f7f1 fe61 	bl	8000a88 <__aeabi_d2f>
 800edc6:	4602      	mov	r2, r0
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	629a      	str	r2, [r3, #40]	; 0x28
        b1 = 2.0*exp(a*ts)*cos(b*ts);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	68da      	ldr	r2, [r3, #12]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4619      	mov	r1, r3
 800edd6:	4610      	mov	r0, r2
 800edd8:	f7f1 ffb4 	bl	8000d44 <__aeabi_fmul>
 800eddc:	4603      	mov	r3, r0
 800edde:	4618      	mov	r0, r3
 800ede0:	f7ff fc08 	bl	800e5f4 <_ZSt3expf>
 800ede4:	4603      	mov	r3, r0
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7f1 fb1e 	bl	8000428 <__aeabi_f2d>
 800edec:	4602      	mov	r2, r0
 800edee:	460b      	mov	r3, r1
 800edf0:	f7f1 f9bc 	bl	800016c <__adddf3>
 800edf4:	4603      	mov	r3, r0
 800edf6:	460c      	mov	r4, r1
 800edf8:	4625      	mov	r5, r4
 800edfa:	461c      	mov	r4, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	691a      	ldr	r2, [r3, #16]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4619      	mov	r1, r3
 800ee06:	4610      	mov	r0, r2
 800ee08:	f7f1 ff9c 	bl	8000d44 <__aeabi_fmul>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7ff fbe4 	bl	800e5dc <_ZSt3cosf>
 800ee14:	4603      	mov	r3, r0
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7f1 fb06 	bl	8000428 <__aeabi_f2d>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	460b      	mov	r3, r1
 800ee20:	4620      	mov	r0, r4
 800ee22:	4629      	mov	r1, r5
 800ee24:	f7f1 fb58 	bl	80004d8 <__aeabi_dmul>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	460c      	mov	r4, r1
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	4621      	mov	r1, r4
 800ee30:	f7f1 fe2a 	bl	8000a88 <__aeabi_d2f>
 800ee34:	4602      	mov	r2, r0
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	625a      	str	r2, [r3, #36]	; 0x24
        k3 = ap(b2*b3);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee42:	4619      	mov	r1, r3
 800ee44:	4610      	mov	r0, r2
 800ee46:	f7f1 ff7d 	bl	8000d44 <__aeabi_fmul>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 fbc2 	bl	800f5d8 <_ZN7Filters2apEf>
 800ee54:	4602      	mov	r2, r0
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	64da      	str	r2, [r3, #76]	; 0x4c
        k2 = ap(b2 + b1*b3);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	4619      	mov	r1, r3
 800ee68:	4610      	mov	r0, r2
 800ee6a:	f7f1 ff6b 	bl	8000d44 <__aeabi_fmul>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	4619      	mov	r1, r3
 800ee72:	4620      	mov	r0, r4
 800ee74:	f7f1 fe5e 	bl	8000b34 <__addsf3>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 fbab 	bl	800f5d8 <_ZN7Filters2apEf>
 800ee82:	4602      	mov	r2, r0
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	649a      	str	r2, [r3, #72]	; 0x48
        k1 = ap(b1 + b3);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee90:	4619      	mov	r1, r3
 800ee92:	4610      	mov	r0, r2
 800ee94:	f7f1 fe4e 	bl	8000b34 <__addsf3>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 fb9b 	bl	800f5d8 <_ZN7Filters2apEf>
 800eea2:	4602      	mov	r2, r0
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	645a      	str	r2, [r3, #68]	; 0x44
        k0 = ap(1.0*KM - b1*KM + b2*KM -b3*KM + b1*KM*b3 - b2*KM*b3);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeac:	4945      	ldr	r1, [pc, #276]	; (800efc4 <_ZN7Filters11initLowPassEv+0x4e4>)
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f1 ff48 	bl	8000d44 <__aeabi_fmul>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7f1 fab6 	bl	8000428 <__aeabi_f2d>
 800eebc:	4603      	mov	r3, r0
 800eebe:	460c      	mov	r4, r1
 800eec0:	461a      	mov	r2, r3
 800eec2:	4623      	mov	r3, r4
 800eec4:	f04f 0000 	mov.w	r0, #0
 800eec8:	493f      	ldr	r1, [pc, #252]	; (800efc8 <_ZN7Filters11initLowPassEv+0x4e8>)
 800eeca:	f7f1 f94d 	bl	8000168 <__aeabi_dsub>
 800eece:	4603      	mov	r3, r0
 800eed0:	460c      	mov	r4, r1
 800eed2:	4625      	mov	r5, r4
 800eed4:	461c      	mov	r4, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeda:	493a      	ldr	r1, [pc, #232]	; (800efc4 <_ZN7Filters11initLowPassEv+0x4e4>)
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f1 ff31 	bl	8000d44 <__aeabi_fmul>
 800eee2:	4603      	mov	r3, r0
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7f1 fa9f 	bl	8000428 <__aeabi_f2d>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	4620      	mov	r0, r4
 800eef0:	4629      	mov	r1, r5
 800eef2:	f7f1 f93b 	bl	800016c <__adddf3>
 800eef6:	4603      	mov	r3, r0
 800eef8:	460c      	mov	r4, r1
 800eefa:	4625      	mov	r5, r4
 800eefc:	461c      	mov	r4, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef02:	4930      	ldr	r1, [pc, #192]	; (800efc4 <_ZN7Filters11initLowPassEv+0x4e4>)
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7f1 ff1d 	bl	8000d44 <__aeabi_fmul>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7f1 fa8b 	bl	8000428 <__aeabi_f2d>
 800ef12:	4602      	mov	r2, r0
 800ef14:	460b      	mov	r3, r1
 800ef16:	4620      	mov	r0, r4
 800ef18:	4629      	mov	r1, r5
 800ef1a:	f7f1 f925 	bl	8000168 <__aeabi_dsub>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	460c      	mov	r4, r1
 800ef22:	4625      	mov	r5, r4
 800ef24:	461c      	mov	r4, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef2a:	4926      	ldr	r1, [pc, #152]	; (800efc4 <_ZN7Filters11initLowPassEv+0x4e4>)
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7f1 ff09 	bl	8000d44 <__aeabi_fmul>
 800ef32:	4603      	mov	r3, r0
 800ef34:	461a      	mov	r2, r3
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	f7f1 ff01 	bl	8000d44 <__aeabi_fmul>
 800ef42:	4603      	mov	r3, r0
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7f1 fa6f 	bl	8000428 <__aeabi_f2d>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	4620      	mov	r0, r4
 800ef50:	4629      	mov	r1, r5
 800ef52:	f7f1 f90b 	bl	800016c <__adddf3>
 800ef56:	4603      	mov	r3, r0
 800ef58:	460c      	mov	r4, r1
 800ef5a:	4625      	mov	r5, r4
 800ef5c:	461c      	mov	r4, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef62:	4918      	ldr	r1, [pc, #96]	; (800efc4 <_ZN7Filters11initLowPassEv+0x4e4>)
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7f1 feed 	bl	8000d44 <__aeabi_fmul>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef72:	4619      	mov	r1, r3
 800ef74:	4610      	mov	r0, r2
 800ef76:	f7f1 fee5 	bl	8000d44 <__aeabi_fmul>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7f1 fa53 	bl	8000428 <__aeabi_f2d>
 800ef82:	4602      	mov	r2, r0
 800ef84:	460b      	mov	r3, r1
 800ef86:	4620      	mov	r0, r4
 800ef88:	4629      	mov	r1, r5
 800ef8a:	f7f1 f8ed 	bl	8000168 <__aeabi_dsub>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	460c      	mov	r4, r1
 800ef92:	4618      	mov	r0, r3
 800ef94:	4621      	mov	r1, r4
 800ef96:	f7f1 fd77 	bl	8000a88 <__aeabi_d2f>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 fb1a 	bl	800f5d8 <_ZN7Filters2apEf>
 800efa4:	4602      	mov	r2, r0
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800efaa:	e1e6      	b.n	800f37a <_ZN7Filters11initLowPassEv+0x89a>
 800efac:	f3af 8000 	nop.w
 800efb0:	60000000 	.word	0x60000000
 800efb4:	401921fb 	.word	0x401921fb
 800efb8:	c0490fdb 	.word	0xc0490fdb
 800efbc:	40490fdb 	.word	0x40490fdb
 800efc0:	3fddb3d7 	.word	0x3fddb3d7
 800efc4:	42c80000 	.word	0x42c80000
 800efc8:	40590000 	.word	0x40590000
    case (uint8_t)ORDER::OD4:
        a  = -0.3827*2.0*PI*hz;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7f1 fa29 	bl	8000428 <__aeabi_f2d>
 800efd6:	a3b0      	add	r3, pc, #704	; (adr r3, 800f298 <_ZN7Filters11initLowPassEv+0x7b8>)
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	f7f1 fa7c 	bl	80004d8 <__aeabi_dmul>
 800efe0:	4603      	mov	r3, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	4618      	mov	r0, r3
 800efe6:	4621      	mov	r1, r4
 800efe8:	f7f1 fd4e 	bl	8000a88 <__aeabi_d2f>
 800efec:	4602      	mov	r2, r0
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	60da      	str	r2, [r3, #12]
        b  =  0.9238*2.0*PI*hz;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7f1 fa16 	bl	8000428 <__aeabi_f2d>
 800effc:	a3a8      	add	r3, pc, #672	; (adr r3, 800f2a0 <_ZN7Filters11initLowPassEv+0x7c0>)
 800effe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f002:	f7f1 fa69 	bl	80004d8 <__aeabi_dmul>
 800f006:	4603      	mov	r3, r0
 800f008:	460c      	mov	r4, r1
 800f00a:	4618      	mov	r0, r3
 800f00c:	4621      	mov	r1, r4
 800f00e:	f7f1 fd3b 	bl	8000a88 <__aeabi_d2f>
 800f012:	4602      	mov	r2, r0
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	611a      	str	r2, [r3, #16]
        c  = -0.9238*2.0*PI*hz;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7f1 fa03 	bl	8000428 <__aeabi_f2d>
 800f022:	a3a1      	add	r3, pc, #644	; (adr r3, 800f2a8 <_ZN7Filters11initLowPassEv+0x7c8>)
 800f024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f028:	f7f1 fa56 	bl	80004d8 <__aeabi_dmul>
 800f02c:	4603      	mov	r3, r0
 800f02e:	460c      	mov	r4, r1
 800f030:	4618      	mov	r0, r3
 800f032:	4621      	mov	r1, r4
 800f034:	f7f1 fd28 	bl	8000a88 <__aeabi_d2f>
 800f038:	4602      	mov	r2, r0
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	615a      	str	r2, [r3, #20]
        d  =  0.3827*2.0*PI*hz;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	4618      	mov	r0, r3
 800f044:	f7f1 f9f0 	bl	8000428 <__aeabi_f2d>
 800f048:	a399      	add	r3, pc, #612	; (adr r3, 800f2b0 <_ZN7Filters11initLowPassEv+0x7d0>)
 800f04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04e:	f7f1 fa43 	bl	80004d8 <__aeabi_dmul>
 800f052:	4603      	mov	r3, r0
 800f054:	460c      	mov	r4, r1
 800f056:	4618      	mov	r0, r3
 800f058:	4621      	mov	r1, r4
 800f05a:	f7f1 fd15 	bl	8000a88 <__aeabi_d2f>
 800f05e:	4602      	mov	r2, r0
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	619a      	str	r2, [r3, #24]
        b4 = exp(2.0*ts*c);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7f1 f9dd 	bl	8000428 <__aeabi_f2d>
 800f06e:	4602      	mov	r2, r0
 800f070:	460b      	mov	r3, r1
 800f072:	f7f1 f87b 	bl	800016c <__adddf3>
 800f076:	4603      	mov	r3, r0
 800f078:	460c      	mov	r4, r1
 800f07a:	4625      	mov	r5, r4
 800f07c:	461c      	mov	r4, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	695b      	ldr	r3, [r3, #20]
 800f082:	4618      	mov	r0, r3
 800f084:	f7f1 f9d0 	bl	8000428 <__aeabi_f2d>
 800f088:	4602      	mov	r2, r0
 800f08a:	460b      	mov	r3, r1
 800f08c:	4620      	mov	r0, r4
 800f08e:	4629      	mov	r1, r5
 800f090:	f7f1 fa22 	bl	80004d8 <__aeabi_dmul>
 800f094:	4603      	mov	r3, r0
 800f096:	460c      	mov	r4, r1
 800f098:	4618      	mov	r0, r3
 800f09a:	4621      	mov	r1, r4
 800f09c:	f006 fca4 	bl	80159e8 <exp>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	4621      	mov	r1, r4
 800f0a8:	f7f1 fcee 	bl	8000a88 <__aeabi_d2f>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	631a      	str	r2, [r3, #48]	; 0x30
        b3 = 2.0*exp(c*ts)*cos(d*ts);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	695a      	ldr	r2, [r3, #20]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4610      	mov	r0, r2
 800f0be:	f7f1 fe41 	bl	8000d44 <__aeabi_fmul>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7ff fa95 	bl	800e5f4 <_ZSt3expf>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7f1 f9ab 	bl	8000428 <__aeabi_f2d>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	f7f1 f849 	bl	800016c <__adddf3>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	460c      	mov	r4, r1
 800f0de:	4625      	mov	r5, r4
 800f0e0:	461c      	mov	r4, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	699a      	ldr	r2, [r3, #24]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	4610      	mov	r0, r2
 800f0ee:	f7f1 fe29 	bl	8000d44 <__aeabi_fmul>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7ff fa71 	bl	800e5dc <_ZSt3cosf>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7f1 f993 	bl	8000428 <__aeabi_f2d>
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	4620      	mov	r0, r4
 800f108:	4629      	mov	r1, r5
 800f10a:	f7f1 f9e5 	bl	80004d8 <__aeabi_dmul>
 800f10e:	4603      	mov	r3, r0
 800f110:	460c      	mov	r4, r1
 800f112:	4618      	mov	r0, r3
 800f114:	4621      	mov	r1, r4
 800f116:	f7f1 fcb7 	bl	8000a88 <__aeabi_d2f>
 800f11a:	4602      	mov	r2, r0
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	62da      	str	r2, [r3, #44]	; 0x2c
        b2 = exp(2.0*ts*a);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4618      	mov	r0, r3
 800f126:	f7f1 f97f 	bl	8000428 <__aeabi_f2d>
 800f12a:	4602      	mov	r2, r0
 800f12c:	460b      	mov	r3, r1
 800f12e:	f7f1 f81d 	bl	800016c <__adddf3>
 800f132:	4603      	mov	r3, r0
 800f134:	460c      	mov	r4, r1
 800f136:	4625      	mov	r5, r4
 800f138:	461c      	mov	r4, r3
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	4618      	mov	r0, r3
 800f140:	f7f1 f972 	bl	8000428 <__aeabi_f2d>
 800f144:	4602      	mov	r2, r0
 800f146:	460b      	mov	r3, r1
 800f148:	4620      	mov	r0, r4
 800f14a:	4629      	mov	r1, r5
 800f14c:	f7f1 f9c4 	bl	80004d8 <__aeabi_dmul>
 800f150:	4603      	mov	r3, r0
 800f152:	460c      	mov	r4, r1
 800f154:	4618      	mov	r0, r3
 800f156:	4621      	mov	r1, r4
 800f158:	f006 fc46 	bl	80159e8 <exp>
 800f15c:	4603      	mov	r3, r0
 800f15e:	460c      	mov	r4, r1
 800f160:	4618      	mov	r0, r3
 800f162:	4621      	mov	r1, r4
 800f164:	f7f1 fc90 	bl	8000a88 <__aeabi_d2f>
 800f168:	4602      	mov	r2, r0
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	629a      	str	r2, [r3, #40]	; 0x28
        b1 = 2.0*exp(a*ts)*cos(b*ts);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	68da      	ldr	r2, [r3, #12]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4619      	mov	r1, r3
 800f178:	4610      	mov	r0, r2
 800f17a:	f7f1 fde3 	bl	8000d44 <__aeabi_fmul>
 800f17e:	4603      	mov	r3, r0
 800f180:	4618      	mov	r0, r3
 800f182:	f7ff fa37 	bl	800e5f4 <_ZSt3expf>
 800f186:	4603      	mov	r3, r0
 800f188:	4618      	mov	r0, r3
 800f18a:	f7f1 f94d 	bl	8000428 <__aeabi_f2d>
 800f18e:	4602      	mov	r2, r0
 800f190:	460b      	mov	r3, r1
 800f192:	f7f0 ffeb 	bl	800016c <__adddf3>
 800f196:	4603      	mov	r3, r0
 800f198:	460c      	mov	r4, r1
 800f19a:	4625      	mov	r5, r4
 800f19c:	461c      	mov	r4, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	691a      	ldr	r2, [r3, #16]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	f7f1 fdcb 	bl	8000d44 <__aeabi_fmul>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7ff fa13 	bl	800e5dc <_ZSt3cosf>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7f1 f935 	bl	8000428 <__aeabi_f2d>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	4629      	mov	r1, r5
 800f1c6:	f7f1 f987 	bl	80004d8 <__aeabi_dmul>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	460c      	mov	r4, r1
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	4621      	mov	r1, r4
 800f1d2:	f7f1 fc59 	bl	8000a88 <__aeabi_d2f>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	625a      	str	r2, [r3, #36]	; 0x24
        k4 = ap(b2*b4);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	f7f1 fdac 	bl	8000d44 <__aeabi_fmul>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 f9f1 	bl	800f5d8 <_ZN7Filters2apEf>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	651a      	str	r2, [r3, #80]	; 0x50
        k3 = ap(b1*b4 + b2*b3);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f204:	4619      	mov	r1, r3
 800f206:	4610      	mov	r0, r2
 800f208:	f7f1 fd9c 	bl	8000d44 <__aeabi_fmul>
 800f20c:	4603      	mov	r3, r0
 800f20e:	461c      	mov	r4, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f218:	4619      	mov	r1, r3
 800f21a:	4610      	mov	r0, r2
 800f21c:	f7f1 fd92 	bl	8000d44 <__aeabi_fmul>
 800f220:	4603      	mov	r3, r0
 800f222:	4619      	mov	r1, r3
 800f224:	4620      	mov	r0, r4
 800f226:	f7f1 fc85 	bl	8000b34 <__addsf3>
 800f22a:	4603      	mov	r3, r0
 800f22c:	4619      	mov	r1, r3
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 f9d2 	bl	800f5d8 <_ZN7Filters2apEf>
 800f234:	4602      	mov	r2, r0
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	64da      	str	r2, [r3, #76]	; 0x4c
        k2 = ap(b4 + b1*b3 + b2);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f246:	4619      	mov	r1, r3
 800f248:	4610      	mov	r0, r2
 800f24a:	f7f1 fd7b 	bl	8000d44 <__aeabi_fmul>
 800f24e:	4603      	mov	r3, r0
 800f250:	4619      	mov	r1, r3
 800f252:	4620      	mov	r0, r4
 800f254:	f7f1 fc6e 	bl	8000b34 <__addsf3>
 800f258:	4603      	mov	r3, r0
 800f25a:	461a      	mov	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f260:	4619      	mov	r1, r3
 800f262:	4610      	mov	r0, r2
 800f264:	f7f1 fc66 	bl	8000b34 <__addsf3>
 800f268:	4603      	mov	r3, r0
 800f26a:	4619      	mov	r1, r3
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 f9b3 	bl	800f5d8 <_ZN7Filters2apEf>
 800f272:	4602      	mov	r2, r0
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	649a      	str	r2, [r3, #72]	; 0x48
        k1 = ap(b1 + b3);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f280:	4619      	mov	r1, r3
 800f282:	4610      	mov	r0, r2
 800f284:	f7f1 fc56 	bl	8000b34 <__addsf3>
 800f288:	4603      	mov	r3, r0
 800f28a:	4619      	mov	r1, r3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 f9a3 	bl	800f5d8 <_ZN7Filters2apEf>
 800f292:	e011      	b.n	800f2b8 <_ZN7Filters11initLowPassEv+0x7d8>
 800f294:	f3af 8000 	nop.w
 800f298:	dc9374bc 	.word	0xdc9374bc
 800f29c:	c0033c91 	.word	0xc0033c91
 800f2a0:	67126e97 	.word	0x67126e97
 800f2a4:	401737b6 	.word	0x401737b6
 800f2a8:	67126e97 	.word	0x67126e97
 800f2ac:	c01737b6 	.word	0xc01737b6
 800f2b0:	dc9374bc 	.word	0xdc9374bc
 800f2b4:	40033c91 	.word	0x40033c91
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	645a      	str	r2, [r3, #68]	; 0x44
        k0 = ap(1.0*KM - k1*KM + k2*KM - k3*KM + k4*KM);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2c2:	4930      	ldr	r1, [pc, #192]	; (800f384 <_ZN7Filters11initLowPassEv+0x8a4>)
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7f1 fd3d 	bl	8000d44 <__aeabi_fmul>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7f1 f8ab 	bl	8000428 <__aeabi_f2d>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	4623      	mov	r3, r4
 800f2da:	f04f 0000 	mov.w	r0, #0
 800f2de:	492a      	ldr	r1, [pc, #168]	; (800f388 <_ZN7Filters11initLowPassEv+0x8a8>)
 800f2e0:	f7f0 ff42 	bl	8000168 <__aeabi_dsub>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	4625      	mov	r5, r4
 800f2ea:	461c      	mov	r4, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2f0:	4924      	ldr	r1, [pc, #144]	; (800f384 <_ZN7Filters11initLowPassEv+0x8a4>)
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7f1 fd26 	bl	8000d44 <__aeabi_fmul>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7f1 f894 	bl	8000428 <__aeabi_f2d>
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	4620      	mov	r0, r4
 800f306:	4629      	mov	r1, r5
 800f308:	f7f0 ff30 	bl	800016c <__adddf3>
 800f30c:	4603      	mov	r3, r0
 800f30e:	460c      	mov	r4, r1
 800f310:	4625      	mov	r5, r4
 800f312:	461c      	mov	r4, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f318:	491a      	ldr	r1, [pc, #104]	; (800f384 <_ZN7Filters11initLowPassEv+0x8a4>)
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7f1 fd12 	bl	8000d44 <__aeabi_fmul>
 800f320:	4603      	mov	r3, r0
 800f322:	4618      	mov	r0, r3
 800f324:	f7f1 f880 	bl	8000428 <__aeabi_f2d>
 800f328:	4602      	mov	r2, r0
 800f32a:	460b      	mov	r3, r1
 800f32c:	4620      	mov	r0, r4
 800f32e:	4629      	mov	r1, r5
 800f330:	f7f0 ff1a 	bl	8000168 <__aeabi_dsub>
 800f334:	4603      	mov	r3, r0
 800f336:	460c      	mov	r4, r1
 800f338:	4625      	mov	r5, r4
 800f33a:	461c      	mov	r4, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f340:	4910      	ldr	r1, [pc, #64]	; (800f384 <_ZN7Filters11initLowPassEv+0x8a4>)
 800f342:	4618      	mov	r0, r3
 800f344:	f7f1 fcfe 	bl	8000d44 <__aeabi_fmul>
 800f348:	4603      	mov	r3, r0
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7f1 f86c 	bl	8000428 <__aeabi_f2d>
 800f350:	4602      	mov	r2, r0
 800f352:	460b      	mov	r3, r1
 800f354:	4620      	mov	r0, r4
 800f356:	4629      	mov	r1, r5
 800f358:	f7f0 ff08 	bl	800016c <__adddf3>
 800f35c:	4603      	mov	r3, r0
 800f35e:	460c      	mov	r4, r1
 800f360:	4618      	mov	r0, r3
 800f362:	4621      	mov	r1, r4
 800f364:	f7f1 fb90 	bl	8000a88 <__aeabi_d2f>
 800f368:	4603      	mov	r3, r0
 800f36a:	4619      	mov	r1, r3
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f933 	bl	800f5d8 <_ZN7Filters2apEf>
 800f372:	4602      	mov	r2, r0
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800f378:	bf00      	nop
  }
}
 800f37a:	bf00      	nop
 800f37c:	3708      	adds	r7, #8
 800f37e:	46bd      	mov	sp, r7
 800f380:	bdb0      	pop	{r4, r5, r7, pc}
 800f382:	bf00      	nop
 800f384:	42c80000 	.word	0x42c80000
 800f388:	40590000 	.word	0x40590000
 800f38c:	00000000 	.word	0x00000000

0800f390 <_ZN7Filters12initHighPassEv>:

// a0..aN Terms are the TF's denominator coeffs;
// b0..bN Terms are the TF's numerator coeffs;
// k0..kN Terms multiply the diff. equation state terms (y) with 0 to N delays, respectively
// j0..jN Terms multiply the diff. equation input terms (u) with 0 to N delays, respectively
inline void  Filters::initHighPass() {
 800f390:	b5b0      	push	{r4, r5, r7, lr}
 800f392:	b086      	sub	sp, #24
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  // Bilinear transformation
  float k  = 2.0/ts;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4619      	mov	r1, r3
 800f39e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800f3a2:	f7f1 fd83 	bl	8000eac <__aeabi_fdiv>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	617b      	str	r3, [r7, #20]
  float w0 = 2.0*PI*hz;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7f1 f83a 	bl	8000428 <__aeabi_f2d>
 800f3b4:	a386      	add	r3, pc, #536	; (adr r3, 800f5d0 <_ZN7Filters12initHighPassEv+0x240>)
 800f3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ba:	f7f1 f88d 	bl	80004d8 <__aeabi_dmul>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	460c      	mov	r4, r1
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	f7f1 fb5f 	bl	8000a88 <__aeabi_d2f>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	613b      	str	r3, [r7, #16]

  switch((uint8_t)od) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	7a1b      	ldrb	r3, [r3, #8]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d006      	beq.n	800f3e4 <_ZN7Filters12initHighPassEv+0x54>
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f2c0 80f6 	blt.w	800f5c8 <_ZN7Filters12initHighPassEv+0x238>
 800f3dc:	2b03      	cmp	r3, #3
 800f3de:	f300 80f3 	bgt.w	800f5c8 <_ZN7Filters12initHighPassEv+0x238>
 800f3e2:	e03e      	b.n	800f462 <_ZN7Filters12initHighPassEv+0xd2>
      case (uint8_t)ORDER::OD1:
          // TF Terms
          b0 =  k;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	697a      	ldr	r2, [r7, #20]
 800f3e8:	621a      	str	r2, [r3, #32]
          b1 = -k;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	625a      	str	r2, [r3, #36]	; 0x24
          a0 = (w0 + k);
 800f3f4:	6979      	ldr	r1, [r7, #20]
 800f3f6:	6938      	ldr	r0, [r7, #16]
 800f3f8:	f7f1 fb9c 	bl	8000b34 <__addsf3>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	461a      	mov	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	635a      	str	r2, [r3, #52]	; 0x34
          a1 = (w0 - k);
 800f404:	6979      	ldr	r1, [r7, #20]
 800f406:	6938      	ldr	r0, [r7, #16]
 800f408:	f7f1 fb92 	bl	8000b30 <__aeabi_fsub>
 800f40c:	4603      	mov	r3, r0
 800f40e:	461a      	mov	r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	639a      	str	r2, [r3, #56]	; 0x38
          // Diff equation terms
          j0 =  b0/a0;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6a1a      	ldr	r2, [r3, #32]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f41c:	4619      	mov	r1, r3
 800f41e:	4610      	mov	r0, r2
 800f420:	f7f1 fd44 	bl	8000eac <__aeabi_fdiv>
 800f424:	4603      	mov	r3, r0
 800f426:	461a      	mov	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	659a      	str	r2, [r3, #88]	; 0x58
          j1 =  b1/a0;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f434:	4619      	mov	r1, r3
 800f436:	4610      	mov	r0, r2
 800f438:	f7f1 fd38 	bl	8000eac <__aeabi_fdiv>
 800f43c:	4603      	mov	r3, r0
 800f43e:	461a      	mov	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	65da      	str	r2, [r3, #92]	; 0x5c
          k1 = -a1/a0;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f448:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f450:	4619      	mov	r1, r3
 800f452:	4610      	mov	r0, r2
 800f454:	f7f1 fd2a 	bl	8000eac <__aeabi_fdiv>
 800f458:	4603      	mov	r3, r0
 800f45a:	461a      	mov	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800f460:	e0b2      	b.n	800f5c8 <_ZN7Filters12initHighPassEv+0x238>
      case (uint8_t)ORDER::OD2:
      case (uint8_t)ORDER::OD3:
      case (uint8_t)ORDER::OD4:
          float_t w0sq = pow(w0, 2.0);
 800f462:	f04f 0200 	mov.w	r2, #0
 800f466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f46a:	6938      	ldr	r0, [r7, #16]
 800f46c:	f000 f900 	bl	800f670 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800f470:	4603      	mov	r3, r0
 800f472:	460c      	mov	r4, r1
 800f474:	4618      	mov	r0, r3
 800f476:	4621      	mov	r1, r4
 800f478:	f7f1 fb06 	bl	8000a88 <__aeabi_d2f>
 800f47c:	4603      	mov	r3, r0
 800f47e:	60fb      	str	r3, [r7, #12]
          float_t ksq  = pow(k,  2.0);
 800f480:	f04f 0200 	mov.w	r2, #0
 800f484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f488:	6978      	ldr	r0, [r7, #20]
 800f48a:	f000 f8f1 	bl	800f670 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800f48e:	4603      	mov	r3, r0
 800f490:	460c      	mov	r4, r1
 800f492:	4618      	mov	r0, r3
 800f494:	4621      	mov	r1, r4
 800f496:	f7f1 faf7 	bl	8000a88 <__aeabi_d2f>
 800f49a:	4603      	mov	r3, r0
 800f49c:	60bb      	str	r3, [r7, #8]
          // TF Terms
          b0 = ksq;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	68ba      	ldr	r2, [r7, #8]
 800f4a2:	621a      	str	r2, [r3, #32]
          b1 = -2.0*ksq;
 800f4a4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800f4a8:	68b8      	ldr	r0, [r7, #8]
 800f4aa:	f7f1 fc4b 	bl	8000d44 <__aeabi_fmul>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	625a      	str	r2, [r3, #36]	; 0x24
          b2 = ksq;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	68ba      	ldr	r2, [r7, #8]
 800f4ba:	629a      	str	r2, [r3, #40]	; 0x28
          a0 = w0sq + k*w0 + ksq;
 800f4bc:	6939      	ldr	r1, [r7, #16]
 800f4be:	6978      	ldr	r0, [r7, #20]
 800f4c0:	f7f1 fc40 	bl	8000d44 <__aeabi_fmul>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	68f9      	ldr	r1, [r7, #12]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7f1 fb33 	bl	8000b34 <__addsf3>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	68b9      	ldr	r1, [r7, #8]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7f1 fb2e 	bl	8000b34 <__addsf3>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	461a      	mov	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	635a      	str	r2, [r3, #52]	; 0x34
          a1 = 2.0*w0sq - 2.0*ksq;
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f7f0 ffa1 	bl	8000428 <__aeabi_f2d>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	f7f0 fe3f 	bl	800016c <__adddf3>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	4625      	mov	r5, r4
 800f4f4:	461c      	mov	r4, r3
 800f4f6:	68b8      	ldr	r0, [r7, #8]
 800f4f8:	f7f0 ff96 	bl	8000428 <__aeabi_f2d>
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	460b      	mov	r3, r1
 800f500:	f7f0 fe34 	bl	800016c <__adddf3>
 800f504:	4602      	mov	r2, r0
 800f506:	460b      	mov	r3, r1
 800f508:	4620      	mov	r0, r4
 800f50a:	4629      	mov	r1, r5
 800f50c:	f7f0 fe2c 	bl	8000168 <__aeabi_dsub>
 800f510:	4603      	mov	r3, r0
 800f512:	460c      	mov	r4, r1
 800f514:	4618      	mov	r0, r3
 800f516:	4621      	mov	r1, r4
 800f518:	f7f1 fab6 	bl	8000a88 <__aeabi_d2f>
 800f51c:	4602      	mov	r2, r0
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	639a      	str	r2, [r3, #56]	; 0x38
          a2 = w0sq - k*w0 + ksq;
 800f522:	6939      	ldr	r1, [r7, #16]
 800f524:	6978      	ldr	r0, [r7, #20]
 800f526:	f7f1 fc0d 	bl	8000d44 <__aeabi_fmul>
 800f52a:	4603      	mov	r3, r0
 800f52c:	4619      	mov	r1, r3
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f7f1 fafe 	bl	8000b30 <__aeabi_fsub>
 800f534:	4603      	mov	r3, r0
 800f536:	68b9      	ldr	r1, [r7, #8]
 800f538:	4618      	mov	r0, r3
 800f53a:	f7f1 fafb 	bl	8000b34 <__addsf3>
 800f53e:	4603      	mov	r3, r0
 800f540:	461a      	mov	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	63da      	str	r2, [r3, #60]	; 0x3c
          // Diff equation terms
          j0 = b0/a0;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6a1a      	ldr	r2, [r3, #32]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f54e:	4619      	mov	r1, r3
 800f550:	4610      	mov	r0, r2
 800f552:	f7f1 fcab 	bl	8000eac <__aeabi_fdiv>
 800f556:	4603      	mov	r3, r0
 800f558:	461a      	mov	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	659a      	str	r2, [r3, #88]	; 0x58
          j1 = b1/a0;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f566:	4619      	mov	r1, r3
 800f568:	4610      	mov	r0, r2
 800f56a:	f7f1 fc9f 	bl	8000eac <__aeabi_fdiv>
 800f56e:	4603      	mov	r3, r0
 800f570:	461a      	mov	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	65da      	str	r2, [r3, #92]	; 0x5c
          j2 = b2/a0;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f57e:	4619      	mov	r1, r3
 800f580:	4610      	mov	r0, r2
 800f582:	f7f1 fc93 	bl	8000eac <__aeabi_fdiv>
 800f586:	4603      	mov	r3, r0
 800f588:	461a      	mov	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	661a      	str	r2, [r3, #96]	; 0x60
          k1 = -a1/a0;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f592:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f59a:	4619      	mov	r1, r3
 800f59c:	4610      	mov	r0, r2
 800f59e:	f7f1 fc85 	bl	8000eac <__aeabi_fdiv>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	645a      	str	r2, [r3, #68]	; 0x44
          k2 = -a2/a0;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ae:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	4610      	mov	r0, r2
 800f5ba:	f7f1 fc77 	bl	8000eac <__aeabi_fdiv>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800f5c6:	bf00      	nop
      }
}
 800f5c8:	bf00      	nop
 800f5ca:	3718      	adds	r7, #24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bdb0      	pop	{r4, r5, r7, pc}
 800f5d0:	60000000 	.word	0x60000000
 800f5d4:	401921fb 	.word	0x401921fb

0800f5d8 <_ZN7Filters2apEf>:

float Filters::ap(float p) {
 800f5d8:	b5b0      	push	{r4, r5, r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  f_err  = f_err  | (abs(p) <= EPSILON );
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800f5e8:	b25c      	sxtb	r4, r3
 800f5ea:	6838      	ldr	r0, [r7, #0]
 800f5ec:	f7fe ffea 	bl	800e5c4 <_ZSt3absf>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	461d      	mov	r5, r3
 800f5f6:	491c      	ldr	r1, [pc, #112]	; (800f668 <_ZN7Filters2apEf+0x90>)
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	f7f1 fd4b 	bl	8001094 <__aeabi_fcmple>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d101      	bne.n	800f608 <_ZN7Filters2apEf+0x30>
 800f604:	2300      	movs	r3, #0
 800f606:	461d      	mov	r5, r3
 800f608:	b2eb      	uxtb	r3, r5
 800f60a:	b25b      	sxtb	r3, r3
 800f60c:	4323      	orrs	r3, r4
 800f60e:	b25b      	sxtb	r3, r3
 800f610:	b2da      	uxtb	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  f_warn = f_warn | (abs(p) <= WEPSILON);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800f61e:	b25c      	sxtb	r4, r3
 800f620:	6838      	ldr	r0, [r7, #0]
 800f622:	f7fe ffcf 	bl	800e5c4 <_ZSt3absf>
 800f626:	4602      	mov	r2, r0
 800f628:	2301      	movs	r3, #1
 800f62a:	461d      	mov	r5, r3
 800f62c:	490f      	ldr	r1, [pc, #60]	; (800f66c <_ZN7Filters2apEf+0x94>)
 800f62e:	4610      	mov	r0, r2
 800f630:	f7f1 fd30 	bl	8001094 <__aeabi_fcmple>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d101      	bne.n	800f63e <_ZN7Filters2apEf+0x66>
 800f63a:	2300      	movs	r3, #0
 800f63c:	461d      	mov	r5, r3
 800f63e:	b2eb      	uxtb	r3, r5
 800f640:	b25b      	sxtb	r3, r3
 800f642:	4323      	orrs	r3, r4
 800f644:	b25b      	sxtb	r3, r3
 800f646:	b2da      	uxtb	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  return (f_err) ? 0.0 : p;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800f654:	2b00      	cmp	r3, #0
 800f656:	d101      	bne.n	800f65c <_ZN7Filters2apEf+0x84>
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	e001      	b.n	800f660 <_ZN7Filters2apEf+0x88>
 800f65c:	f04f 0300 	mov.w	r3, #0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bdb0      	pop	{r4, r5, r7, pc}
 800f668:	3727c5ac 	.word	0x3727c5ac
 800f66c:	38d1b717 	.word	0x38d1b717

0800f670 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800f670:	b590      	push	{r4, r7, lr}
 800f672:	b085      	sub	sp, #20
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	e9c7 2300 	strd	r2, r3, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f7f0 fed3 	bl	8000428 <__aeabi_f2d>
 800f682:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f686:	f006 fa27 	bl	8015ad8 <pow>
 800f68a:	4603      	mov	r3, r0
 800f68c:	460c      	mov	r4, r1
    }
 800f68e:	4618      	mov	r0, r3
 800f690:	4621      	mov	r1, r4
 800f692:	3714      	adds	r7, #20
 800f694:	46bd      	mov	sp, r7
 800f696:	bd90      	pop	{r4, r7, pc}

0800f698 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f006 f96b 	bl	801597c <sinf>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3708      	adds	r7, #8
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <_ZN28FFB_BlockLoad_Feature_Data_tC1Ev>:
	{ // FFB: PID Block Load Feature Report
	uint8_t	reportId = HID_ID_BLKLDREP;	// =2
	uint8_t effectBlockIndex;	// 1..40
	uint8_t	loadStatus;	// 1=Success,2=Full,3=Error
	uint16_t	ramPoolAvailable;	// =0 or 0xFFFF?
} __attribute__((packed)) FFB_BlockLoad_Feature_Data_t;
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2212      	movs	r2, #18
 800f6bc:	701a      	strb	r2, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bc80      	pop	{r7}
 800f6c8:	4770      	bx	lr

0800f6ca <_ZN26FFB_PIDPool_Feature_Data_tC1Ev>:
	{ // FFB: PID Pool Feature Report
	uint8_t	reportId = HID_ID_POOLREP;
	uint16_t	ramPoolSize = MAX_EFFECTS;
	uint8_t		maxSimultaneousEffects = MAX_EFFECTS;
	uint8_t		memoryManagement = 3;	// Bits: 0=DeviceManagedPool, 1=SharedParameterBlocks
} __attribute__((packed)) FFB_PIDPool_Feature_Data_t;
 800f6ca:	b480      	push	{r7}
 800f6cc:	b083      	sub	sp, #12
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2213      	movs	r2, #19
 800f6d6:	701a      	strb	r2, [r3, #0]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800f6e0:	705a      	strb	r2, [r3, #1]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	709a      	strb	r2, [r3, #2]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2228      	movs	r2, #40	; 0x28
 800f6ea:	70da      	strb	r2, [r3, #3]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2203      	movs	r2, #3
 800f6f0:	711a      	strb	r2, [r3, #4]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bc80      	pop	{r7}
 800f6fc:	4770      	bx	lr

0800f6fe <_ZN18reportFFB_status_tC1Ev>:
} __attribute__((packed)) reportFFB_status_t;
 800f6fe:	b480      	push	{r7}
 800f700:	b083      	sub	sp, #12
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2202      	movs	r2, #2
 800f70a:	701a      	strb	r2, [r3, #0]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	705a      	strb	r2, [r3, #1]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	220a      	movs	r2, #10
 800f716:	709a      	strb	r2, [r3, #2]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4618      	mov	r0, r3
 800f71c:	370c      	adds	r7, #12
 800f71e:	46bd      	mov	sp, r7
 800f720:	bc80      	pop	{r7}
 800f722:	4770      	bx	lr

0800f724 <_ZN10FFB_EffectC1Ev>:
	uint16_t duration=0,fadeTime=0,attackTime=0, elapsedTime = 0;	// ms
	uint64_t startTime = 0;
	uint16_t samplePeriod = 0;
	uint8_t axis = 0;
	uint16_t	deadBand = 0;
} FFB_Effect;
 800f724:	b490      	push	{r4, r7}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	701a      	strb	r2, [r3, #0]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	705a      	strb	r2, [r3, #1]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	22ff      	movs	r2, #255	; 0xff
 800f73c:	709a      	strb	r2, [r3, #2]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2200      	movs	r2, #0
 800f742:	811a      	strh	r2, [r3, #8]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	815a      	strh	r2, [r3, #10]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2200      	movs	r2, #0
 800f74e:	819a      	strh	r2, [r3, #12]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2200      	movs	r2, #0
 800f754:	81da      	strh	r2, [r3, #14]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2200      	movs	r2, #0
 800f75a:	821a      	strh	r2, [r3, #16]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	825a      	strh	r2, [r3, #18]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	829a      	strh	r2, [r3, #20]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	759a      	strb	r2, [r3, #22]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2200      	movs	r2, #0
 800f772:	75da      	strb	r2, [r3, #23]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2200      	movs	r2, #0
 800f778:	831a      	strh	r2, [r3, #24]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2200      	movs	r2, #0
 800f77e:	835a      	strh	r2, [r3, #26]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	839a      	strh	r2, [r3, #28]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	621a      	str	r2, [r3, #32]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	849a      	strh	r2, [r3, #36]	; 0x24
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	84da      	strh	r2, [r3, #38]	; 0x26
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2200      	movs	r2, #0
 800f79c:	851a      	strh	r2, [r3, #40]	; 0x28
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	859a      	strh	r2, [r3, #44]	; 0x2c
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	85da      	strh	r2, [r3, #46]	; 0x2e
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	f04f 0300 	mov.w	r3, #0
 800f7b6:	f04f 0400 	mov.w	r4, #0
 800f7ba:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	871a      	strh	r2, [r3, #56]	; 0x38
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	879a      	strh	r2, [r3, #60]	; 0x3c
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bc90      	pop	{r4, r7}
 800f7dc:	4770      	bx	lr
	...

0800f7e0 <_ZN6HidFFBC1Ev>:
#include "HidFFB.h"
#include "math.h"

HidFFB::HidFFB() {
 800f7e0:	b5b0      	push	{r4, r5, r7, lr}
 800f7e2:	b0f0      	sub	sp, #448	; 0x1c0
 800f7e4:	af02      	add	r7, sp, #8
 800f7e6:	1d3b      	adds	r3, r7, #4
 800f7e8:	6018      	str	r0, [r3, #0]
 800f7ea:	1d3b      	adds	r3, r7, #4
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f002 fb4e 	bl	8011e90 <_ZN13UsbHidHandlerC1Ev>
 800f7f4:	4a67      	ldr	r2, [pc, #412]	; (800f994 <_ZN6HidFFBC1Ev+0x1b4>)
 800f7f6:	1d3b      	adds	r3, r7, #4
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	601a      	str	r2, [r3, #0]
 800f7fc:	1d3b      	adds	r3, r7, #4
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2201      	movs	r2, #1
 800f802:	711a      	strb	r2, [r3, #4]
 800f804:	1d3b      	adds	r3, r7, #4
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	2200      	movs	r2, #0
 800f80a:	609a      	str	r2, [r3, #8]
 800f80c:	1d3b      	adds	r3, r7, #4
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2200      	movs	r2, #0
 800f812:	731a      	strb	r2, [r3, #12]
 800f814:	1d3b      	adds	r3, r7, #4
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2200      	movs	r2, #0
 800f81a:	81da      	strh	r2, [r3, #14]
 800f81c:	1d3b      	adds	r3, r7, #4
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2200      	movs	r2, #0
 800f822:	741a      	strb	r2, [r3, #16]
 800f824:	1d3b      	adds	r3, r7, #4
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2200      	movs	r2, #0
 800f82a:	825a      	strh	r2, [r3, #18]
 800f82c:	1d3b      	adds	r3, r7, #4
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	22ff      	movs	r2, #255	; 0xff
 800f832:	751a      	strb	r2, [r3, #20]
 800f834:	1d3b      	adds	r3, r7, #4
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2200      	movs	r2, #0
 800f83a:	755a      	strb	r2, [r3, #21]
 800f83c:	1d3b      	adds	r3, r7, #4
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	3316      	adds	r3, #22
 800f842:	4618      	mov	r0, r3
 800f844:	f7ff ff34 	bl	800f6b0 <_ZN28FFB_BlockLoad_Feature_Data_tC1Ev>
 800f848:	1d3b      	adds	r3, r7, #4
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	331b      	adds	r3, #27
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff ff3b 	bl	800f6ca <_ZN26FFB_PIDPool_Feature_Data_tC1Ev>
 800f854:	1d3b      	adds	r3, r7, #4
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	3324      	adds	r3, #36	; 0x24
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7ff ff4f 	bl	800f6fe <_ZN18reportFFB_status_tC1Ev>
 800f860:	1d3b      	adds	r3, r7, #4
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	3328      	adds	r3, #40	; 0x28
 800f866:	2427      	movs	r4, #39	; 0x27
 800f868:	461d      	mov	r5, r3
 800f86a:	2c00      	cmp	r4, #0
 800f86c:	db05      	blt.n	800f87a <_ZN6HidFFBC1Ev+0x9a>
 800f86e:	4628      	mov	r0, r5
 800f870:	f7ff ff58 	bl	800f724 <_ZN10FFB_EffectC1Ev>
 800f874:	3540      	adds	r5, #64	; 0x40
 800f876:	3c01      	subs	r4, #1
 800f878:	e7f7      	b.n	800f86a <_ZN6HidFFBC1Ev+0x8a>
 800f87a:	1d3b      	adds	r3, r7, #4
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2200      	movs	r2, #0
 800f880:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
 800f884:	1d3b      	adds	r3, r7, #4
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	4a43      	ldr	r2, [pc, #268]	; (800f998 <_ZN6HidFFBC1Ev+0x1b8>)
 800f88a:	f8c3 2a2c 	str.w	r2, [r3, #2604]	; 0xa2c
 800f88e:	1d3b      	adds	r3, r7, #4
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	4a42      	ldr	r2, [pc, #264]	; (800f99c <_ZN6HidFFBC1Ev+0x1bc>)
 800f894:	f8c3 2a30 	str.w	r2, [r3, #2608]	; 0xa30
 800f898:	1d3b      	adds	r3, r7, #4
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fe feb3 	bl	800e60c <_ZN7FiltersC1Ev>
 800f8a6:	1d3b      	adds	r3, r7, #4
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fe feac 	bl	800e60c <_ZN7FiltersC1Ev>
 800f8b4:	1d3b      	adds	r3, r7, #4
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7fe fea5 	bl	800e60c <_ZN7FiltersC1Ev>
	damperFilter = Filters(cutoff_freq_damper, sampling_time_damper, ORDER::OD1);
 800f8c2:	1d3b      	adds	r3, r7, #4
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	; 0xa2c
 800f8ca:	1d3b      	adds	r3, r7, #4
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f8d3 2a30 	ldr.w	r2, [r3, #2608]	; 0xa30
 800f8d2:	f107 0008 	add.w	r0, r7, #8
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	9300      	str	r3, [sp, #0]
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f7fe fea0 	bl	800e620 <_ZN7FiltersC1Eff5ORDER4TYPE>
 800f8e0:	1d3b      	adds	r3, r7, #4
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f107 0208 	add.w	r2, r7, #8
 800f8e8:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 800f8ec:	4611      	mov	r1, r2
 800f8ee:	228e      	movs	r2, #142	; 0x8e
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f008 f9c4 	bl	8017c7e <memcpy>
 800f8f6:	f107 0308 	add.w	r3, r7, #8
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fe feac 	bl	800e658 <_ZN7FiltersD1Ev>
	interiaFilter = Filters(cutoff_freq_damper, sampling_time_damper, ORDER::OD1);
 800f900:	1d3b      	adds	r3, r7, #4
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	; 0xa2c
 800f908:	1d3b      	adds	r3, r7, #4
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f8d3 2a30 	ldr.w	r2, [r3, #2608]	; 0xa30
 800f910:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800f914:	2300      	movs	r3, #0
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	2300      	movs	r3, #0
 800f91a:	f7fe fe81 	bl	800e620 <_ZN7FiltersC1Eff5ORDER4TYPE>
 800f91e:	1d3b      	adds	r3, r7, #4
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800f926:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 800f92a:	4611      	mov	r1, r2
 800f92c:	228e      	movs	r2, #142	; 0x8e
 800f92e:	4618      	mov	r0, r3
 800f930:	f008 f9a5 	bl	8017c7e <memcpy>
 800f934:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fe fe8d 	bl	800e658 <_ZN7FiltersD1Ev>
	frictionFilter = Filters(cutoff_freq_damper, sampling_time_damper, ORDER::OD1);
 800f93e:	1d3b      	adds	r3, r7, #4
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	; 0xa2c
 800f946:	1d3b      	adds	r3, r7, #4
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f8d3 2a30 	ldr.w	r2, [r3, #2608]	; 0xa30
 800f94e:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800f952:	2300      	movs	r3, #0
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	2300      	movs	r3, #0
 800f958:	f7fe fe62 	bl	800e620 <_ZN7FiltersC1Eff5ORDER4TYPE>
 800f95c:	1d3b      	adds	r3, r7, #4
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 800f964:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800f968:	228e      	movs	r2, #142	; 0x8e
 800f96a:	4618      	mov	r0, r3
 800f96c:	f008 f987 	bl	8017c7e <memcpy>
 800f970:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe fe6f 	bl	800e658 <_ZN7FiltersD1Ev>

	this->registerHidCallback();
 800f97a:	1d3b      	adds	r3, r7, #4
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4618      	mov	r0, r3
 800f980:	f002 face 	bl	8011f20 <_ZN13UsbHidHandler19registerHidCallbackEv>
}
 800f984:	1d3b      	adds	r3, r7, #4
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4618      	mov	r0, r3
 800f98a:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bdb0      	pop	{r4, r5, r7, pc}
 800f992:	bf00      	nop
 800f994:	08018c9c 	.word	0x08018c9c
 800f998:	40a00000 	.word	0x40a00000
 800f99c:	3a83126f 	.word	0x3a83126f

0800f9a0 <_ZN6HidFFBD1Ev>:

HidFFB::~HidFFB() {
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	4a0e      	ldr	r2, [pc, #56]	; (800f9e4 <_ZN6HidFFBD1Ev+0x44>)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fe fe4f 	bl	800e658 <_ZN7FiltersD1Ev>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7fe fe49 	bl	800e658 <_ZN7FiltersD1Ev>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7fe fe43 	bl	800e658 <_ZN7FiltersD1Ev>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f002 fa6b 	bl	8011eb0 <_ZN13UsbHidHandlerD1Ev>

}
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3708      	adds	r7, #8
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	08018c9c 	.word	0x08018c9c

0800f9e8 <_ZN6HidFFBD0Ev>:
HidFFB::~HidFFB() {
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
}
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7ff ffd5 	bl	800f9a0 <_ZN6HidFFBD1Ev>
 800f9f6:	f640 31e8 	movw	r1, #3048	; 0xbe8
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f005 fc58 	bl	80152b0 <_ZdlPvj>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4618      	mov	r0, r3
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
	...

0800fa0c <_ZN6HidFFB6hidOutEPh>:


void HidFFB::hidOut(uint8_t* report){
 800fa0c:	b590      	push	{r4, r7, lr}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
	hid_out_period = HAL_GetTick() - lastOut; // For measuring update rate
 800fa16:	f7f2 fb6f 	bl	80020f8 <HAL_GetTick>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 3a28 	ldr.w	r3, [r3, #2600]	; 0xa28
 800fa22:	1ad2      	subs	r2, r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	609a      	str	r2, [r3, #8]
	lastOut = HAL_GetTick();
 800fa28:	f7f2 fb66 	bl	80020f8 <HAL_GetTick>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8c3 2a28 	str.w	r2, [r3, #2600]	; 0xa28
	// FFB Output Message
	report[0] -= FFB_ID_OFFSET;// if offset id was set correct this
 800fa34:	683a      	ldr	r2, [r7, #0]
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	7812      	ldrb	r2, [r2, #0]
 800fa3a:	701a      	strb	r2, [r3, #0]
	uint8_t event_idx = report[0];
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	73fb      	strb	r3, [r7, #15]


	// -------- Out Reports --------
	switch(event_idx){
 800fa42:	7bfb      	ldrb	r3, [r7, #15]
 800fa44:	3b01      	subs	r3, #1
 800fa46:	2b10      	cmp	r3, #16
 800fa48:	f200 809c 	bhi.w	800fb84 <_ZN6HidFFB6hidOutEPh+0x178>
 800fa4c:	a201      	add	r2, pc, #4	; (adr r2, 800fa54 <_ZN6HidFFB6hidOutEPh+0x48>)
 800fa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa52:	bf00      	nop
 800fa54:	0800faa5 	.word	0x0800faa5
 800fa58:	0800facb 	.word	0x0800facb
 800fa5c:	0800fad7 	.word	0x0800fad7
 800fa60:	0800fae3 	.word	0x0800fae3
 800fa64:	0800faef 	.word	0x0800faef
 800fa68:	0800fafb 	.word	0x0800fafb
 800fa6c:	0800fb85 	.word	0x0800fb85
 800fa70:	0800fb85 	.word	0x0800fb85
 800fa74:	0800fb85 	.word	0x0800fb85
 800fa78:	0800fb07 	.word	0x0800fb07
 800fa7c:	0800fb6f 	.word	0x0800fb6f
 800fa80:	0800fab1 	.word	0x0800fab1
 800fa84:	0800fac1 	.word	0x0800fac1
 800fa88:	0800fb85 	.word	0x0800fb85
 800fa8c:	0800fb85 	.word	0x0800fb85
 800fa90:	0800fb85 	.word	0x0800fb85
 800fa94:	0800fa99 	.word	0x0800fa99
	case HID_ID_NEWEFREP: //add Effect Report. Feature
		new_effect((FFB_CreateNewEffect_Feature_Data_t*)(report));
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f000 f94a 	bl	800fd36 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>
		break;
 800faa2:	e070      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_EFFREP: // Set Effect
		set_effect((FFB_SetEffect_t*)(report));
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	4619      	mov	r1, r3
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 f993 	bl	800fdd4 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>
		break;
 800faae:	e06a      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_CTRLREP: // Control report. 1=Enable Actuators, 2=Disable Actuators, 4=Stop All Effects, 8=Reset, 16=Pause, 32=Continue
		ffb_control(report[1]);
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	3301      	adds	r3, #1
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	4619      	mov	r1, r3
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 f8b6 	bl	800fc2a <_ZN6HidFFB11ffb_controlEh>
		break;
 800fabe:	e062      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_GAINREP:
		gain = report[1];
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	785a      	ldrb	r2, [r3, #1]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	751a      	strb	r2, [r3, #20]
		break;
 800fac8:	e05d      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_ENVREP:
		set_envelope((FFB_SetEnvelope_Data_t*)(report));
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	4619      	mov	r1, r3
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f9dc 	bl	800fe8c <_ZN6HidFFB12set_envelopeEP22FFB_SetEnvelope_Data_t>
		break;
 800fad4:	e057      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_CONDREP: // Condition
		set_condition((FFB_SetCondition_Data_t*)report);
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	4619      	mov	r1, r3
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 fa1c 	bl	800ff18 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>
		break;
 800fae0:	e051      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_PRIDREP: // Periodic
		set_periodic((FFB_SetPeriodic_Data_t*)report);
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	4619      	mov	r1, r3
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f000 fa51 	bl	800ff8e <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>
		break;
 800faec:	e04b      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_CONSTREP: // Constant
		set_constant_effect((FFB_SetConstantForce_Data_t*)report);
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	4619      	mov	r1, r3
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 f908 	bl	800fd08 <_ZN6HidFFB19set_constant_effectEP27FFB_SetConstantForce_Data_t>
		break;
 800faf8:	e045      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	case HID_ID_RAMPREP: // Ramp
		set_ramp_effect((FFB_SetRampForce_Data_t*)report);
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	4619      	mov	r1, r3
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f9ec 	bl	800fedc <_ZN6HidFFB15set_ramp_effectEP23FFB_SetRampForce_Data_t>
		break;
 800fb04:	e03f      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
		//TODO
		break;
	case HID_ID_EFOPREP: //Effect operation
	{
		// Start or stop effect
		uint8_t id = report[1]-1;
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	73bb      	strb	r3, [r7, #14]
		if(report[2] == 3){
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	3302      	adds	r3, #2
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	2b03      	cmp	r3, #3
 800fb18:	d107      	bne.n	800fb2a <_ZN6HidFFB6hidOutEPh+0x11e>
			effects[id].state = 0; //Stop
 800fb1a:	7bbb      	ldrb	r3, [r7, #14]
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	019b      	lsls	r3, r3, #6
 800fb20:	4413      	add	r3, r2
 800fb22:	3328      	adds	r3, #40	; 0x28
 800fb24:	2200      	movs	r2, #0
 800fb26:	701a      	strb	r2, [r3, #0]
			effects[id].state = 1; //Start
			effects[id].counter = 0; // When an effect was stopped reset all parameters that could cause jerking
			effects[id].elapsedTime = 0;
			effects[id].startTime = HAL_GetTick();
		}
		break;
 800fb28:	e02d      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
			effects[id].state = 1; //Start
 800fb2a:	7bbb      	ldrb	r3, [r7, #14]
 800fb2c:	687a      	ldr	r2, [r7, #4]
 800fb2e:	019b      	lsls	r3, r3, #6
 800fb30:	4413      	add	r3, r2
 800fb32:	3328      	adds	r3, #40	; 0x28
 800fb34:	2201      	movs	r2, #1
 800fb36:	701a      	strb	r2, [r3, #0]
			effects[id].counter = 0; // When an effect was stopped reset all parameters that could cause jerking
 800fb38:	7bbb      	ldrb	r3, [r7, #14]
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	019b      	lsls	r3, r3, #6
 800fb3e:	4413      	add	r3, r2
 800fb40:	334c      	adds	r3, #76	; 0x4c
 800fb42:	2200      	movs	r2, #0
 800fb44:	801a      	strh	r2, [r3, #0]
			effects[id].elapsedTime = 0;
 800fb46:	7bbb      	ldrb	r3, [r7, #14]
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	019b      	lsls	r3, r3, #6
 800fb4c:	4413      	add	r3, r2
 800fb4e:	3356      	adds	r3, #86	; 0x56
 800fb50:	2200      	movs	r2, #0
 800fb52:	801a      	strh	r2, [r3, #0]
			effects[id].startTime = HAL_GetTick();
 800fb54:	f7f2 fad0 	bl	80020f8 <HAL_GetTick>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	7bba      	ldrb	r2, [r7, #14]
 800fb5c:	f04f 0400 	mov.w	r4, #0
 800fb60:	6879      	ldr	r1, [r7, #4]
 800fb62:	0192      	lsls	r2, r2, #6
 800fb64:	440a      	add	r2, r1
 800fb66:	3258      	adds	r2, #88	; 0x58
 800fb68:	e9c2 3400 	strd	r3, r4, [r2]
		break;
 800fb6c:	e00b      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	}
	case HID_ID_BLKFRREP: // Free a block
	{
		free_effect(report[1]-1);
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	3301      	adds	r3, #1
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	3b01      	subs	r3, #1
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 f807 	bl	800fb90 <_ZN6HidFFB11free_effectEt>
		break;
 800fb82:	e000      	b.n	800fb86 <_ZN6HidFFB6hidOutEPh+0x17a>
	}

	default:
		break;
 800fb84:	bf00      	nop
	}

}
 800fb86:	bf00      	nop
 800fb88:	3714      	adds	r7, #20
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd90      	pop	{r4, r7, pc}
 800fb8e:	bf00      	nop

0800fb90 <_ZN6HidFFB11free_effectEt>:

void HidFFB::free_effect(uint16_t idx){
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	807b      	strh	r3, [r7, #2]
	if(idx < MAX_EFFECTS)
 800fb9c:	887b      	ldrh	r3, [r7, #2]
 800fb9e:	2b27      	cmp	r3, #39	; 0x27
 800fba0:	d806      	bhi.n	800fbb0 <_ZN6HidFFB11free_effectEt+0x20>
		effects[idx].type=FFB_EFFECT_NONE;
 800fba2:	887b      	ldrh	r3, [r7, #2]
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	019b      	lsls	r3, r3, #6
 800fba8:	4413      	add	r3, r2
 800fbaa:	3329      	adds	r3, #41	; 0x29
 800fbac:	2200      	movs	r2, #0
 800fbae:	701a      	strb	r2, [r3, #0]
}
 800fbb0:	bf00      	nop
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bc80      	pop	{r7}
 800fbb8:	4770      	bx	lr

0800fbba <_ZN6HidFFB6hidGetEhtPPh>:


void HidFFB::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){
 800fbba:	b480      	push	{r7}
 800fbbc:	b085      	sub	sp, #20
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	60f8      	str	r0, [r7, #12]
 800fbc2:	607b      	str	r3, [r7, #4]
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	72fb      	strb	r3, [r7, #11]
 800fbc8:	4613      	mov	r3, r2
 800fbca:	813b      	strh	r3, [r7, #8]
	// Feature gets go here

	id = id - FFB_ID_OFFSET;

	switch(id){
 800fbcc:	7afb      	ldrb	r3, [r7, #11]
 800fbce:	2b12      	cmp	r3, #18
 800fbd0:	d002      	beq.n	800fbd8 <_ZN6HidFFB6hidGetEhtPPh+0x1e>
 800fbd2:	2b13      	cmp	r3, #19
 800fbd4:	d006      	beq.n	800fbe4 <_ZN6HidFFB6hidGetEhtPPh+0x2a>
		break;
	case HID_ID_POOLREP:
		*return_buf = (uint8_t*)(&this->pool_report);
		break;
	}
}
 800fbd6:	e00b      	b.n	800fbf0 <_ZN6HidFFB6hidGetEhtPPh+0x36>
		*return_buf = (uint8_t*)(&this->blockLoad_report);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f103 0216 	add.w	r2, r3, #22
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	601a      	str	r2, [r3, #0]
		break;
 800fbe2:	e005      	b.n	800fbf0 <_ZN6HidFFB6hidGetEhtPPh+0x36>
		*return_buf = (uint8_t*)(&this->pool_report);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f103 021b 	add.w	r2, r3, #27
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	601a      	str	r2, [r3, #0]
		break;
 800fbee:	bf00      	nop
}
 800fbf0:	bf00      	nop
 800fbf2:	3714      	adds	r7, #20
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bc80      	pop	{r7}
 800fbf8:	4770      	bx	lr

0800fbfa <_ZN6HidFFB9start_FFBEv>:

void HidFFB::start_FFB(){
 800fbfa:	b480      	push	{r7}
 800fbfc:	b083      	sub	sp, #12
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
	ffb_active = true;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2201      	movs	r2, #1
 800fc06:	755a      	strb	r2, [r3, #21]


}
 800fc08:	bf00      	nop
 800fc0a:	370c      	adds	r7, #12
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bc80      	pop	{r7}
 800fc10:	4770      	bx	lr

0800fc12 <_ZN6HidFFB8stop_FFBEv>:
void HidFFB::stop_FFB(){
 800fc12:	b480      	push	{r7}
 800fc14:	b083      	sub	sp, #12
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
	ffb_active = false;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	755a      	strb	r2, [r3, #21]


	//TODO Callbacks?
}
 800fc20:	bf00      	nop
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bc80      	pop	{r7}
 800fc28:	4770      	bx	lr

0800fc2a <_ZN6HidFFB11ffb_controlEh>:

void HidFFB::ffb_control(uint8_t cmd){
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b082      	sub	sp, #8
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
 800fc32:	460b      	mov	r3, r1
 800fc34:	70fb      	strb	r3, [r7, #3]
	if(cmd & 0x01){ //enable
 800fc36:	78fb      	ldrb	r3, [r7, #3]
 800fc38:	f003 0301 	and.w	r3, r3, #1
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d002      	beq.n	800fc46 <_ZN6HidFFB11ffb_controlEh+0x1c>
		start_FFB();
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7ff ffda 	bl	800fbfa <_ZN6HidFFB9start_FFBEv>
	}if(cmd & 0x02){ //disable
 800fc46:	78fb      	ldrb	r3, [r7, #3]
 800fc48:	f003 0302 	and.w	r3, r3, #2
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d002      	beq.n	800fc56 <_ZN6HidFFB11ffb_controlEh+0x2c>
		ffb_active = false;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	755a      	strb	r2, [r3, #21]
	}if(cmd & 0x04){ //stop TODO Some games send wrong commands?
 800fc56:	78fb      	ldrb	r3, [r7, #3]
 800fc58:	f003 0304 	and.w	r3, r3, #4
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d002      	beq.n	800fc66 <_ZN6HidFFB11ffb_controlEh+0x3c>
		stop_FFB();
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7ff ffd6 	bl	800fc12 <_ZN6HidFFB8stop_FFBEv>
		//start_FFB();
	}if(cmd & 0x08){ //reset
 800fc66:	78fb      	ldrb	r3, [r7, #3]
 800fc68:	f003 0308 	and.w	r3, r3, #8
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d005      	beq.n	800fc7c <_ZN6HidFFB11ffb_controlEh+0x52>
		//ffb_active = true;
		stop_FFB();
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7ff ffce 	bl	800fc12 <_ZN6HidFFB8stop_FFBEv>
		reset_ffb();
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f9d3 	bl	8010022 <_ZN6HidFFB9reset_ffbEv>
		// reset effects
	}if(cmd & 0x10){ //pause
 800fc7c:	78fb      	ldrb	r3, [r7, #3]
 800fc7e:	f003 0310 	and.w	r3, r3, #16
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d002      	beq.n	800fc8c <_ZN6HidFFB11ffb_controlEh+0x62>
		ffb_active = false;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	755a      	strb	r2, [r3, #21]
	}if(cmd & 0x20){ //continue
 800fc8c:	78fb      	ldrb	r3, [r7, #3]
 800fc8e:	f003 0320 	and.w	r3, r3, #32
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d002      	beq.n	800fc9c <_ZN6HidFFB11ffb_controlEh+0x72>
		ffb_active = true;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	755a      	strb	r2, [r3, #21]
	}
	Bchg(this->reportFFBStatus.status,HID_ENABLE_ACTUATORS & ffb_active);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fca2:	461a      	mov	r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	7d5b      	ldrb	r3, [r3, #21]
 800fca8:	f003 0302 	and.w	r3, r3, #2
 800fcac:	401a      	ands	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	7d5b      	ldrb	r3, [r3, #21]
 800fcb2:	f003 0302 	and.w	r3, r3, #2
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d112      	bne.n	800fce0 <_ZN6HidFFB11ffb_controlEh+0xb6>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fcc0:	b25a      	sxtb	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	7d5b      	ldrb	r3, [r3, #21]
 800fcc6:	f003 0302 	and.w	r3, r3, #2
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	43db      	mvns	r3, r3
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	b25b      	sxtb	r3, r3
 800fcd2:	4013      	ands	r3, r2
 800fcd4:	b25b      	sxtb	r3, r3
 800fcd6:	b2da      	uxtb	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800fcde:	e00f      	b.n	800fd00 <_ZN6HidFFB11ffb_controlEh+0xd6>
	Bchg(this->reportFFBStatus.status,HID_ENABLE_ACTUATORS & ffb_active);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fce6:	b25a      	sxtb	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	7d5b      	ldrb	r3, [r3, #21]
 800fcec:	b25b      	sxtb	r3, r3
 800fcee:	f003 0302 	and.w	r3, r3, #2
 800fcf2:	b25b      	sxtb	r3, r3
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	b25b      	sxtb	r3, r3
 800fcf8:	b2da      	uxtb	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800fd00:	bf00      	nop
 800fd02:	3708      	adds	r7, #8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <_ZN6HidFFB19set_constant_effectEP27FFB_SetConstantForce_Data_t>:


void HidFFB::set_constant_effect(FFB_SetConstantForce_Data_t* effect){
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
	effects[effect->effectBlockIndex-1].magnitude = effect->magnitude;
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	785b      	ldrb	r3, [r3, #1]
 800fd16:	3b01      	subs	r3, #1
 800fd18:	683a      	ldr	r2, [r7, #0]
 800fd1a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800fd1e:	b211      	sxth	r1, r2
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	019b      	lsls	r3, r3, #6
 800fd24:	4413      	add	r3, r2
 800fd26:	3338      	adds	r3, #56	; 0x38
 800fd28:	460a      	mov	r2, r1
 800fd2a:	801a      	strh	r2, [r3, #0]
}
 800fd2c:	bf00      	nop
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bc80      	pop	{r7}
 800fd34:	4770      	bx	lr

0800fd36 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>:

void HidFFB::new_effect(FFB_CreateNewEffect_Feature_Data_t* effect){
 800fd36:	b5b0      	push	{r4, r5, r7, lr}
 800fd38:	b094      	sub	sp, #80	; 0x50
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
 800fd3e:	6039      	str	r1, [r7, #0]
	// Allocates a new effect

	uint8_t index = find_free_effect(effect->effectType); // next effect
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	785b      	ldrb	r3, [r3, #1]
 800fd44:	4619      	mov	r1, r3
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 f94a 	bl	800ffe0 <_ZN6HidFFB16find_free_effectEh>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(index == 0){
 800fd52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d103      	bne.n	800fd62 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0x2c>
		blockLoad_report.loadStatus = 2;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2202      	movs	r2, #2
 800fd5e:	761a      	strb	r2, [r3, #24]
 800fd60:	e035      	b.n	800fdce <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0x98>
		return;
	}

	FFB_Effect new_effect;
 800fd62:	f107 0308 	add.w	r3, r7, #8
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7ff fcdc 	bl	800f724 <_ZN10FFB_EffectC1Ev>
	new_effect.type = effect->effectType;
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	785b      	ldrb	r3, [r3, #1]
 800fd70:	727b      	strb	r3, [r7, #9]

	effects[index-1] = new_effect;
 800fd72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fd76:	3b01      	subs	r3, #1
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	019b      	lsls	r3, r3, #6
 800fd7c:	4413      	add	r3, r2
 800fd7e:	3328      	adds	r3, #40	; 0x28
 800fd80:	461d      	mov	r5, r3
 800fd82:	f107 0408 	add.w	r4, r7, #8
 800fd86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fd8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fd8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fd92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fd96:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	// Set block load report
	reportFFBStatus.effectBlockIndex = index;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fda0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	blockLoad_report.effectBlockIndex = index;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fdaa:	75da      	strb	r2, [r3, #23]
	used_effects++;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	8a5b      	ldrh	r3, [r3, #18]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	825a      	strh	r2, [r3, #18]
	blockLoad_report.ramPoolAvailable = MAX_EFFECTS-used_effects;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	8a5b      	ldrh	r3, [r3, #18]
 800fdbc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800fdc0:	b29a      	uxth	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8a3 2019 	strh.w	r2, [r3, #25]
	blockLoad_report.loadStatus = 1;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	761a      	strb	r2, [r3, #24]


}
 800fdce:	3750      	adds	r7, #80	; 0x50
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bdb0      	pop	{r4, r5, r7, pc}

0800fdd4 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>:
void HidFFB::set_effect(FFB_SetEffect_t* effect){
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
	uint8_t index = effect->effectBlockIndex;
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	785b      	ldrb	r3, [r3, #1]
 800fde2:	73fb      	strb	r3, [r7, #15]
	if(index > MAX_EFFECTS || index == 0)
 800fde4:	7bfb      	ldrb	r3, [r7, #15]
 800fde6:	2b28      	cmp	r3, #40	; 0x28
 800fde8:	d84c      	bhi.n	800fe84 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xb0>
 800fdea:	7bfb      	ldrb	r3, [r7, #15]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d049      	beq.n	800fe84 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xb0>
		return;

	FFB_Effect* effect_p = &effects[index-1];
 800fdf0:	7bfb      	ldrb	r3, [r7, #15]
 800fdf2:	3b01      	subs	r3, #1
 800fdf4:	019b      	lsls	r3, r3, #6
 800fdf6:	3328      	adds	r3, #40	; 0x28
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	4413      	add	r3, r2
 800fdfc:	60bb      	str	r3, [r7, #8]
	effect_p->gain = effect->gain;
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	7a5a      	ldrb	r2, [r3, #9]
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	709a      	strb	r2, [r3, #2]
	effect_p->type = effect->effectType;
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	789a      	ldrb	r2, [r3, #2]
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	705a      	strb	r2, [r3, #1]
	effect_p->samplePeriod = effect->samplePeriod;
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	871a      	strh	r2, [r3, #56]	; 0x38
	if(effect->enableAxis & 0x4){
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	7adb      	ldrb	r3, [r3, #11]
 800fe1e:	f003 0304 	and.w	r3, r3, #4
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d004      	beq.n	800fe30 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x5c>
		// All axes
		effect_p->axis = 0x7;
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	2207      	movs	r2, #7
 800fe2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800fe2e:	e004      	b.n	800fe3a <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x66>
	}else{
		effect_p->axis = effect->enableAxis;
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	7ada      	ldrb	r2, [r3, #11]
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}
	if(effect_p->type != effect->effectType){
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	785a      	ldrb	r2, [r3, #1]
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	789b      	ldrb	r3, [r3, #2]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d005      	beq.n	800fe52 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x7e>
		effect_p->counter = 0;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	849a      	strh	r2, [r3, #36]	; 0x24
		effect_p->last_value = 0;
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	621a      	str	r2, [r3, #32]
	}

	effect_p->duration = effect->duration;
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	851a      	strh	r2, [r3, #40]	; 0x28
	effect_p->directionX = effect->directionX;
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	7b1a      	ldrb	r2, [r3, #12]
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	759a      	strb	r2, [r3, #22]
	effect_p->directionY = effect->directionY;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	7b5a      	ldrb	r2, [r3, #13]
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	75da      	strb	r2, [r3, #23]

	if(!ffb_active)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	7d5b      	ldrb	r3, [r3, #21]
 800fe72:	f083 0301 	eor.w	r3, r3, #1
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d004      	beq.n	800fe86 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xb2>
		start_FFB();
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f7ff febc 	bl	800fbfa <_ZN6HidFFB9start_FFBEv>
 800fe82:	e000      	b.n	800fe86 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xb2>
		return;
 800fe84:	bf00      	nop
}
 800fe86:	3710      	adds	r7, #16
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <_ZN6HidFFB12set_envelopeEP22FFB_SetEnvelope_Data_t>:

void HidFFB::set_envelope(FFB_SetEnvelope_Data_t *envelop)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b085      	sub	sp, #20
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect = &effects[envelop->effectBlockIndex-1];
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	785b      	ldrb	r3, [r3, #1]
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	019b      	lsls	r3, r3, #6
 800fe9e:	3328      	adds	r3, #40	; 0x28
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	4413      	add	r3, r2
 800fea4:	60fb      	str	r3, [r7, #12]

	effect->attackLevel = envelop->attackLevel;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	885b      	ldrh	r3, [r3, #2]
 800feaa:	b29b      	uxth	r3, r3
 800feac:	b21a      	sxth	r2, r3
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	809a      	strh	r2, [r3, #4]
	effect->fadeLevel = envelop->fadeLevel;
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	889b      	ldrh	r3, [r3, #4]
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	b21a      	sxth	r2, r3
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	80da      	strh	r2, [r3, #6]
	effect->attackTime = envelop->attackTime;
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	88db      	ldrh	r3, [r3, #6]
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	859a      	strh	r2, [r3, #44]	; 0x2c
	effect->fadeTime = envelop->fadeTime;
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	891b      	ldrh	r3, [r3, #8]
 800fecc:	b29a      	uxth	r2, r3
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fed2:	bf00      	nop
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bc80      	pop	{r7}
 800feda:	4770      	bx	lr

0800fedc <_ZN6HidFFB15set_ramp_effectEP23FFB_SetRampForce_Data_t>:

void HidFFB::set_ramp_effect(FFB_SetRampForce_Data_t *effect)
{
 800fedc:	b480      	push	{r7}
 800fede:	b085      	sub	sp, #20
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect_p = &effects[effect->effectBlockIndex-1];
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	785b      	ldrb	r3, [r3, #1]
 800feea:	3b01      	subs	r3, #1
 800feec:	019b      	lsls	r3, r3, #6
 800feee:	3328      	adds	r3, #40	; 0x28
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	4413      	add	r3, r2
 800fef4:	60fb      	str	r3, [r7, #12]

	effect_p->startMagnitude = effect->startMagnitude;
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fefc:	b21a      	sxth	r2, r3
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	825a      	strh	r2, [r3, #18]
	effect_p->endMagnitude = effect->endMagnitude;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ff08:	b21a      	sxth	r2, r3
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	829a      	strh	r2, [r3, #20]
}
 800ff0e:	bf00      	nop
 800ff10:	3714      	adds	r7, #20
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bc80      	pop	{r7}
 800ff16:	4770      	bx	lr

0800ff18 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>:


void HidFFB::set_condition(FFB_SetCondition_Data_t* cond){
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
	if(cond->parameterBlockOffset != 0) //TODO if more axes are needed. Only X Axis is implemented now for the wheel.
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	789b      	ldrb	r3, [r3, #2]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d12c      	bne.n	800ff84 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x6c>
		return;

	FFB_Effect* effect = &effects[cond->effectBlockIndex-1];
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	785b      	ldrb	r3, [r3, #1]
 800ff2e:	3b01      	subs	r3, #1
 800ff30:	019b      	lsls	r3, r3, #6
 800ff32:	3328      	adds	r3, #40	; 0x28
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	4413      	add	r3, r2
 800ff38:	60fb      	str	r3, [r7, #12]

	effect->offset = cond->cpOffset;
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ff40:	b21a      	sxth	r2, r3
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	835a      	strh	r2, [r3, #26]
	effect->negativeCoefficient  = cond->negativeCoefficient;
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 800ff4c:	b21a      	sxth	r2, r3
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	815a      	strh	r2, [r3, #10]
	effect->positiveCoefficient = cond->positiveCoefficient;
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800ff58:	b21a      	sxth	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	811a      	strh	r2, [r3, #8]
	effect->negativeSaturation = cond->negativeSaturation;
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	81da      	strh	r2, [r3, #14]
	effect->positiveSaturation = cond->positiveSaturation;
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	819a      	strh	r2, [r3, #12]
	effect->deadBand = cond->deadBand;
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800ff7c:	b29a      	uxth	r2, r3
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	879a      	strh	r2, [r3, #60]	; 0x3c
 800ff82:	e000      	b.n	800ff86 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x6e>
		return;
 800ff84:	bf00      	nop
}
 800ff86:	3714      	adds	r7, #20
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bc80      	pop	{r7}
 800ff8c:	4770      	bx	lr

0800ff8e <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>:

void HidFFB::set_periodic(FFB_SetPeriodic_Data_t* report){
 800ff8e:	b480      	push	{r7}
 800ff90:	b085      	sub	sp, #20
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
 800ff96:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect = &effects[report->effectBlockIndex-1];
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	785b      	ldrb	r3, [r3, #1]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	019b      	lsls	r3, r3, #6
 800ffa0:	3328      	adds	r3, #40	; 0x28
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	4413      	add	r3, r2
 800ffa6:	60fb      	str	r3, [r7, #12]

	effect->period = report->period;
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	891b      	ldrh	r3, [r3, #8]
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	84da      	strh	r2, [r3, #38]	; 0x26
	effect->magnitude = report->magnitude;
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	885b      	ldrh	r3, [r3, #2]
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	b21a      	sxth	r2, r3
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	821a      	strh	r2, [r3, #16]
	effect->offset = report->offset;
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ffc4:	b21a      	sxth	r2, r3
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	835a      	strh	r2, [r3, #26]
	effect->phase = report->phase;
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	88db      	ldrh	r3, [r3, #6]
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	b21a      	sxth	r2, r3
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	831a      	strh	r2, [r3, #24]
	//effect->counter = 0;
}
 800ffd6:	bf00      	nop
 800ffd8:	3714      	adds	r7, #20
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bc80      	pop	{r7}
 800ffde:	4770      	bx	lr

0800ffe0 <_ZN6HidFFB16find_free_effectEh>:

uint8_t HidFFB::find_free_effect(uint8_t type){ //Will return the first effect index which is empty or the same type
 800ffe0:	b480      	push	{r7}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 800ffec:	2300      	movs	r3, #0
 800ffee:	73fb      	strb	r3, [r7, #15]
 800fff0:	7bfb      	ldrb	r3, [r7, #15]
 800fff2:	2b27      	cmp	r3, #39	; 0x27
 800fff4:	d80f      	bhi.n	8010016 <_ZN6HidFFB16find_free_effectEh+0x36>
		if(effects[i].type == FFB_EFFECT_NONE){
 800fff6:	7bfb      	ldrb	r3, [r7, #15]
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	019b      	lsls	r3, r3, #6
 800fffc:	4413      	add	r3, r2
 800fffe:	3329      	adds	r3, #41	; 0x29
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d103      	bne.n	801000e <_ZN6HidFFB16find_free_effectEh+0x2e>
			return(i+1);
 8010006:	7bfb      	ldrb	r3, [r7, #15]
 8010008:	3301      	adds	r3, #1
 801000a:	b2db      	uxtb	r3, r3
 801000c:	e004      	b.n	8010018 <_ZN6HidFFB16find_free_effectEh+0x38>
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 801000e:	7bfb      	ldrb	r3, [r7, #15]
 8010010:	3301      	adds	r3, #1
 8010012:	73fb      	strb	r3, [r7, #15]
 8010014:	e7ec      	b.n	800fff0 <_ZN6HidFFB16find_free_effectEh+0x10>
		}
	}
	return 0;
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3714      	adds	r7, #20
 801001c:	46bd      	mov	sp, r7
 801001e:	bc80      	pop	{r7}
 8010020:	4770      	bx	lr

08010022 <_ZN6HidFFB9reset_ffbEv>:



void HidFFB::reset_ffb(){
 8010022:	b580      	push	{r7, lr}
 8010024:	b084      	sub	sp, #16
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 801002a:	2300      	movs	r3, #0
 801002c:	73fb      	strb	r3, [r7, #15]
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	2b27      	cmp	r3, #39	; 0x27
 8010032:	d809      	bhi.n	8010048 <_ZN6HidFFB9reset_ffbEv+0x26>
		free_effect(i);
 8010034:	7bfb      	ldrb	r3, [r7, #15]
 8010036:	b29b      	uxth	r3, r3
 8010038:	4619      	mov	r1, r3
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f7ff fda8 	bl	800fb90 <_ZN6HidFFB11free_effectEt>
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 8010040:	7bfb      	ldrb	r3, [r7, #15]
 8010042:	3301      	adds	r3, #1
 8010044:	73fb      	strb	r3, [r7, #15]
 8010046:	e7f2      	b.n	801002e <_ZN6HidFFB9reset_ffbEv+0xc>
	}
	this->reportFFBStatus.effectBlockIndex = 1;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2201      	movs	r2, #1
 801004c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	this->reportFFBStatus.status = (HID_ACTUATOR_POWER) | (HID_ENABLE_ACTUATORS);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	220a      	movs	r2, #10
 8010054:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	used_effects = 0;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2200      	movs	r2, #0
 801005c:	825a      	strh	r2, [r3, #18]
}
 801005e:	bf00      	nop
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
	...

08010068 <_ZN6HidFFB23ConstantForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::ConstantForceCalculator(FFB_Effect *effect)
{
 8010068:	b590      	push	{r4, r7, lr}
 801006a:	b085      	sub	sp, #20
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
	float tempforce = (float)effect->magnitude * effect->gain / 255;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010078:	4618      	mov	r0, r3
 801007a:	f7f0 fe0f 	bl	8000c9c <__aeabi_i2f>
 801007e:	4604      	mov	r4, r0
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	789b      	ldrb	r3, [r3, #2]
 8010084:	4618      	mov	r0, r3
 8010086:	f7f0 fe09 	bl	8000c9c <__aeabi_i2f>
 801008a:	4603      	mov	r3, r0
 801008c:	4619      	mov	r1, r3
 801008e:	4620      	mov	r0, r4
 8010090:	f7f0 fe58 	bl	8000d44 <__aeabi_fmul>
 8010094:	4603      	mov	r3, r0
 8010096:	4907      	ldr	r1, [pc, #28]	; (80100b4 <_ZN6HidFFB23ConstantForceCalculatorEP10FFB_Effect+0x4c>)
 8010098:	4618      	mov	r0, r3
 801009a:	f7f0 ff07 	bl	8000eac <__aeabi_fdiv>
 801009e:	4603      	mov	r3, r0
 80100a0:	60fb      	str	r3, [r7, #12]
	return (int32_t)tempforce;
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f7f1 f814 	bl	80010d0 <__aeabi_f2iz>
 80100a8:	4603      	mov	r3, r0
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3714      	adds	r7, #20
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd90      	pop	{r4, r7, pc}
 80100b2:	bf00      	nop
 80100b4:	437f0000 	.word	0x437f0000

080100b8 <_ZN6HidFFB19RampForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::RampForceCalculator(FFB_Effect* effect)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
	int32_t rampForce = effect->startMagnitude + effect->elapsedTime * (effect->endMagnitude - effect->startMagnitude) / effect->duration;
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80100c8:	4619      	mov	r1, r3
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80100ce:	461a      	mov	r2, r3
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80100d6:	4618      	mov	r0, r3
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80100de:	1ac3      	subs	r3, r0, r3
 80100e0:	fb03 f302 	mul.w	r3, r3, r2
 80100e4:	683a      	ldr	r2, [r7, #0]
 80100e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80100e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80100ec:	440b      	add	r3, r1
 80100ee:	60fb      	str	r3, [r7, #12]
	return rampForce;
 80100f0:	68fb      	ldr	r3, [r7, #12]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3714      	adds	r7, #20
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bc80      	pop	{r7}
 80100fa:	4770      	bx	lr
 80100fc:	0000      	movs	r0, r0
	...

08010100 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal>:

int32_t HidFFB::calculateEffects(EncoderLocal* encoder){
 8010100:	b5b0      	push	{r4, r5, r7, lr}
 8010102:	b086      	sub	sp, #24
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
	if(!ffb_active){
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	7d5b      	ldrb	r3, [r3, #21]
 801010e:	f083 0301 	eor.w	r3, r3, #1
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b00      	cmp	r3, #0
 8010116:	d010      	beq.n	801013a <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x3a>
		if(idlecenter){
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	791b      	ldrb	r3, [r3, #4]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d00a      	beq.n	8010136 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x36>
			return clip<int32_t,int32_t>(-encoder->currentPosition,-5000,5000);
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	69db      	ldr	r3, [r3, #28]
 8010124:	425b      	negs	r3, r3
 8010126:	f241 3288 	movw	r2, #5000	; 0x1388
 801012a:	49c1      	ldr	r1, [pc, #772]	; (8010430 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x330>)
 801012c:	4618      	mov	r0, r3
 801012e:	f7fc fdbb 	bl	800cca8 <_Z4clipIllET_S0_T0_S1_>
 8010132:	4603      	mov	r3, r0
 8010134:	e3af      	b.n	8010896 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x796>
		}else{
			return 0;
 8010136:	2300      	movs	r3, #0
 8010138:	e3ad      	b.n	8010896 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x796>
		}
	}

	int32_t result_torque = 0;
 801013a:	2300      	movs	r3, #0
 801013c:	617b      	str	r3, [r7, #20]

	for(uint8_t i = 0;i<MAX_EFFECTS;i++){
 801013e:	2300      	movs	r3, #0
 8010140:	74fb      	strb	r3, [r7, #19]
 8010142:	7cfb      	ldrb	r3, [r7, #19]
 8010144:	2b27      	cmp	r3, #39	; 0x27
 8010146:	f200 8397 	bhi.w	8010878 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x778>
		FFB_Effect* effect = &effects[i];
 801014a:	7cfb      	ldrb	r3, [r7, #19]
 801014c:	019b      	lsls	r3, r3, #6
 801014e:	3328      	adds	r3, #40	; 0x28
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	4413      	add	r3, r2
 8010154:	60fb      	str	r3, [r7, #12]
		// Filter out inactive effects
		if(effect->state == 0 || !(0x01 & effect->axis))
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	b2db      	uxtb	r3, r3
 801015c:	2b00      	cmp	r3, #0
 801015e:	d006      	beq.n	801016e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x6e>
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010166:	f003 0301 	and.w	r3, r3, #1
 801016a:	2b00      	cmp	r3, #0
 801016c:	d101      	bne.n	8010172 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x72>
 801016e:	2301      	movs	r3, #1
 8010170:	e000      	b.n	8010174 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x74>
 8010172:	2300      	movs	r3, #0
 8010174:	2b00      	cmp	r3, #0
 8010176:	f040 837a 	bne.w	801086e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x76e>
			continue;

		switch(effect->type){
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	785b      	ldrb	r3, [r3, #1]
 801017e:	3b01      	subs	r3, #1
 8010180:	2b0a      	cmp	r3, #10
 8010182:	f200 8349 	bhi.w	8010818 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x718>
 8010186:	a201      	add	r2, pc, #4	; (adr r2, 801018c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x8c>)
 8010188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801018c:	080101b9 	.word	0x080101b9
 8010190:	08010231 	.word	0x08010231
 8010194:	08010335 	.word	0x08010335
 8010198:	080103ad 	.word	0x080103ad
 801019c:	08010439 	.word	0x08010439
 80101a0:	08010529 	.word	0x08010529
 80101a4:	080104b1 	.word	0x080104b1
 80101a8:	080102a9 	.word	0x080102a9
 80101ac:	080105a1 	.word	0x080105a1
 80101b0:	0801062d 	.word	0x0801062d
 80101b4:	0801078d 	.word	0x0801078d
		case FFB_EFFECT_CONSTANT:
			result_torque -= ConstantForceCalculator(effect) * (((float)conf->constantGain * 50.0) / 255.0);
 80101b8:	68f9      	ldr	r1, [r7, #12]
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7ff ff54 	bl	8010068 <_ZN6HidFFB23ConstantForceCalculatorEP10FFB_Effect>
 80101c0:	4603      	mov	r3, r0
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7f0 f91e 	bl	8000404 <__aeabi_i2d>
 80101c8:	4604      	mov	r4, r0
 80101ca:	460d      	mov	r5, r1
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6a1b      	ldr	r3, [r3, #32]
 80101d0:	7b5b      	ldrb	r3, [r3, #13]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7f0 fd5e 	bl	8000c94 <__aeabi_ui2f>
 80101d8:	4603      	mov	r3, r0
 80101da:	4618      	mov	r0, r3
 80101dc:	f7f0 f924 	bl	8000428 <__aeabi_f2d>
 80101e0:	f04f 0200 	mov.w	r2, #0
 80101e4:	4b93      	ldr	r3, [pc, #588]	; (8010434 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 80101e6:	f7f0 f977 	bl	80004d8 <__aeabi_dmul>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	4610      	mov	r0, r2
 80101f0:	4619      	mov	r1, r3
 80101f2:	a38d      	add	r3, pc, #564	; (adr r3, 8010428 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 80101f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f8:	f7f0 fa98 	bl	800072c <__aeabi_ddiv>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	4620      	mov	r0, r4
 8010202:	4629      	mov	r1, r5
 8010204:	f7f0 f968 	bl	80004d8 <__aeabi_dmul>
 8010208:	4603      	mov	r3, r0
 801020a:	460c      	mov	r4, r1
 801020c:	4625      	mov	r5, r4
 801020e:	461c      	mov	r4, r3
 8010210:	6978      	ldr	r0, [r7, #20]
 8010212:	f7f0 f8f7 	bl	8000404 <__aeabi_i2d>
 8010216:	4622      	mov	r2, r4
 8010218:	462b      	mov	r3, r5
 801021a:	f7ef ffa5 	bl	8000168 <__aeabi_dsub>
 801021e:	4603      	mov	r3, r0
 8010220:	460c      	mov	r4, r1
 8010222:	4618      	mov	r0, r3
 8010224:	4621      	mov	r1, r4
 8010226:	f7f0 fc07 	bl	8000a38 <__aeabi_d2iz>
 801022a:	4603      	mov	r3, r0
 801022c:	617b      	str	r3, [r7, #20]
			break;
 801022e:	e2f6      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
	    case FFB_EFFECT_RAMP:
	    	result_torque -= RampForceCalculator(effect) * (((float)conf->rampGain * 50.0) / 255.0);
 8010230:	68f9      	ldr	r1, [r7, #12]
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f7ff ff40 	bl	80100b8 <_ZN6HidFFB19RampForceCalculatorEP10FFB_Effect>
 8010238:	4603      	mov	r3, r0
 801023a:	4618      	mov	r0, r3
 801023c:	f7f0 f8e2 	bl	8000404 <__aeabi_i2d>
 8010240:	4604      	mov	r4, r0
 8010242:	460d      	mov	r5, r1
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6a1b      	ldr	r3, [r3, #32]
 8010248:	7b9b      	ldrb	r3, [r3, #14]
 801024a:	4618      	mov	r0, r3
 801024c:	f7f0 fd22 	bl	8000c94 <__aeabi_ui2f>
 8010250:	4603      	mov	r3, r0
 8010252:	4618      	mov	r0, r3
 8010254:	f7f0 f8e8 	bl	8000428 <__aeabi_f2d>
 8010258:	f04f 0200 	mov.w	r2, #0
 801025c:	4b75      	ldr	r3, [pc, #468]	; (8010434 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 801025e:	f7f0 f93b 	bl	80004d8 <__aeabi_dmul>
 8010262:	4602      	mov	r2, r0
 8010264:	460b      	mov	r3, r1
 8010266:	4610      	mov	r0, r2
 8010268:	4619      	mov	r1, r3
 801026a:	a36f      	add	r3, pc, #444	; (adr r3, 8010428 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 801026c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010270:	f7f0 fa5c 	bl	800072c <__aeabi_ddiv>
 8010274:	4602      	mov	r2, r0
 8010276:	460b      	mov	r3, r1
 8010278:	4620      	mov	r0, r4
 801027a:	4629      	mov	r1, r5
 801027c:	f7f0 f92c 	bl	80004d8 <__aeabi_dmul>
 8010280:	4603      	mov	r3, r0
 8010282:	460c      	mov	r4, r1
 8010284:	4625      	mov	r5, r4
 8010286:	461c      	mov	r4, r3
 8010288:	6978      	ldr	r0, [r7, #20]
 801028a:	f7f0 f8bb 	bl	8000404 <__aeabi_i2d>
 801028e:	4622      	mov	r2, r4
 8010290:	462b      	mov	r3, r5
 8010292:	f7ef ff69 	bl	8000168 <__aeabi_dsub>
 8010296:	4603      	mov	r3, r0
 8010298:	460c      	mov	r4, r1
 801029a:	4618      	mov	r0, r3
 801029c:	4621      	mov	r1, r4
 801029e:	f7f0 fbcb 	bl	8000a38 <__aeabi_d2iz>
 80102a2:	4603      	mov	r3, r0
 80102a4:	617b      	str	r3, [r7, #20]
	        break;
 80102a6:	e2ba      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_SPRING:
			result_torque -= ConditionForceCalculator(effect, NormalizeRange(encoder->currentPosition, encoder->maxValue)) * (((float)conf->springGain * 50.0) / 255.0);
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	69d9      	ldr	r1, [r3, #28]
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	695b      	ldr	r3, [r3, #20]
 80102b0:	461a      	mov	r2, r3
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 fece 	bl	8011054 <_ZN6HidFFB14NormalizeRangeEll>
 80102b8:	4603      	mov	r3, r0
 80102ba:	461a      	mov	r2, r3
 80102bc:	68f9      	ldr	r1, [r7, #12]
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f000 fd72 	bl	8010da8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 80102c4:	4603      	mov	r3, r0
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f0 f89c 	bl	8000404 <__aeabi_i2d>
 80102cc:	4604      	mov	r4, r0
 80102ce:	460d      	mov	r5, r1
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6a1b      	ldr	r3, [r3, #32]
 80102d4:	7d1b      	ldrb	r3, [r3, #20]
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7f0 fcdc 	bl	8000c94 <__aeabi_ui2f>
 80102dc:	4603      	mov	r3, r0
 80102de:	4618      	mov	r0, r3
 80102e0:	f7f0 f8a2 	bl	8000428 <__aeabi_f2d>
 80102e4:	f04f 0200 	mov.w	r2, #0
 80102e8:	4b52      	ldr	r3, [pc, #328]	; (8010434 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 80102ea:	f7f0 f8f5 	bl	80004d8 <__aeabi_dmul>
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	4610      	mov	r0, r2
 80102f4:	4619      	mov	r1, r3
 80102f6:	a34c      	add	r3, pc, #304	; (adr r3, 8010428 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 80102f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fc:	f7f0 fa16 	bl	800072c <__aeabi_ddiv>
 8010300:	4602      	mov	r2, r0
 8010302:	460b      	mov	r3, r1
 8010304:	4620      	mov	r0, r4
 8010306:	4629      	mov	r1, r5
 8010308:	f7f0 f8e6 	bl	80004d8 <__aeabi_dmul>
 801030c:	4603      	mov	r3, r0
 801030e:	460c      	mov	r4, r1
 8010310:	4625      	mov	r5, r4
 8010312:	461c      	mov	r4, r3
 8010314:	6978      	ldr	r0, [r7, #20]
 8010316:	f7f0 f875 	bl	8000404 <__aeabi_i2d>
 801031a:	4622      	mov	r2, r4
 801031c:	462b      	mov	r3, r5
 801031e:	f7ef ff23 	bl	8000168 <__aeabi_dsub>
 8010322:	4603      	mov	r3, r0
 8010324:	460c      	mov	r4, r1
 8010326:	4618      	mov	r0, r3
 8010328:	4621      	mov	r1, r4
 801032a:	f7f0 fb85 	bl	8000a38 <__aeabi_d2iz>
 801032e:	4603      	mov	r3, r0
 8010330:	617b      	str	r3, [r7, #20]
			break;
 8010332:	e274      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_SQUARE:
			result_torque -= SquareForceCalculator(effect) * (((float)conf->squareGain * 50.0) / 255.0);
 8010334:	68f9      	ldr	r1, [r7, #12]
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 faba 	bl	80108b0 <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect>
 801033c:	4603      	mov	r3, r0
 801033e:	4618      	mov	r0, r3
 8010340:	f7f0 f860 	bl	8000404 <__aeabi_i2d>
 8010344:	4604      	mov	r4, r0
 8010346:	460d      	mov	r5, r1
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6a1b      	ldr	r3, [r3, #32]
 801034c:	7bdb      	ldrb	r3, [r3, #15]
 801034e:	4618      	mov	r0, r3
 8010350:	f7f0 fca0 	bl	8000c94 <__aeabi_ui2f>
 8010354:	4603      	mov	r3, r0
 8010356:	4618      	mov	r0, r3
 8010358:	f7f0 f866 	bl	8000428 <__aeabi_f2d>
 801035c:	f04f 0200 	mov.w	r2, #0
 8010360:	4b34      	ldr	r3, [pc, #208]	; (8010434 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 8010362:	f7f0 f8b9 	bl	80004d8 <__aeabi_dmul>
 8010366:	4602      	mov	r2, r0
 8010368:	460b      	mov	r3, r1
 801036a:	4610      	mov	r0, r2
 801036c:	4619      	mov	r1, r3
 801036e:	a32e      	add	r3, pc, #184	; (adr r3, 8010428 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 8010370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010374:	f7f0 f9da 	bl	800072c <__aeabi_ddiv>
 8010378:	4602      	mov	r2, r0
 801037a:	460b      	mov	r3, r1
 801037c:	4620      	mov	r0, r4
 801037e:	4629      	mov	r1, r5
 8010380:	f7f0 f8aa 	bl	80004d8 <__aeabi_dmul>
 8010384:	4603      	mov	r3, r0
 8010386:	460c      	mov	r4, r1
 8010388:	4625      	mov	r5, r4
 801038a:	461c      	mov	r4, r3
 801038c:	6978      	ldr	r0, [r7, #20]
 801038e:	f7f0 f839 	bl	8000404 <__aeabi_i2d>
 8010392:	4622      	mov	r2, r4
 8010394:	462b      	mov	r3, r5
 8010396:	f7ef fee7 	bl	8000168 <__aeabi_dsub>
 801039a:	4603      	mov	r3, r0
 801039c:	460c      	mov	r4, r1
 801039e:	4618      	mov	r0, r3
 80103a0:	4621      	mov	r1, r4
 80103a2:	f7f0 fb49 	bl	8000a38 <__aeabi_d2iz>
 80103a6:	4603      	mov	r3, r0
 80103a8:	617b      	str	r3, [r7, #20]
			break;
 80103aa:	e238      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_SINE:
			result_torque -= SinForceCalculator(effect) * (((float)conf->sinGain * 50.0) / 255.0);
 80103ac:	68f9      	ldr	r1, [r7, #12]
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 faca 	bl	8010948 <_ZN6HidFFB18SinForceCalculatorEP10FFB_Effect>
 80103b4:	4603      	mov	r3, r0
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7f0 f824 	bl	8000404 <__aeabi_i2d>
 80103bc:	4604      	mov	r4, r0
 80103be:	460d      	mov	r5, r1
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6a1b      	ldr	r3, [r3, #32]
 80103c4:	7c1b      	ldrb	r3, [r3, #16]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7f0 fc64 	bl	8000c94 <__aeabi_ui2f>
 80103cc:	4603      	mov	r3, r0
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7f0 f82a 	bl	8000428 <__aeabi_f2d>
 80103d4:	f04f 0200 	mov.w	r2, #0
 80103d8:	4b16      	ldr	r3, [pc, #88]	; (8010434 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x334>)
 80103da:	f7f0 f87d 	bl	80004d8 <__aeabi_dmul>
 80103de:	4602      	mov	r2, r0
 80103e0:	460b      	mov	r3, r1
 80103e2:	4610      	mov	r0, r2
 80103e4:	4619      	mov	r1, r3
 80103e6:	a310      	add	r3, pc, #64	; (adr r3, 8010428 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x328>)
 80103e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ec:	f7f0 f99e 	bl	800072c <__aeabi_ddiv>
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	4620      	mov	r0, r4
 80103f6:	4629      	mov	r1, r5
 80103f8:	f7f0 f86e 	bl	80004d8 <__aeabi_dmul>
 80103fc:	4603      	mov	r3, r0
 80103fe:	460c      	mov	r4, r1
 8010400:	4625      	mov	r5, r4
 8010402:	461c      	mov	r4, r3
 8010404:	6978      	ldr	r0, [r7, #20]
 8010406:	f7ef fffd 	bl	8000404 <__aeabi_i2d>
 801040a:	4622      	mov	r2, r4
 801040c:	462b      	mov	r3, r5
 801040e:	f7ef feab 	bl	8000168 <__aeabi_dsub>
 8010412:	4603      	mov	r3, r0
 8010414:	460c      	mov	r4, r1
 8010416:	4618      	mov	r0, r3
 8010418:	4621      	mov	r1, r4
 801041a:	f7f0 fb0d 	bl	8000a38 <__aeabi_d2iz>
 801041e:	4603      	mov	r3, r0
 8010420:	617b      	str	r3, [r7, #20]
			break;
 8010422:	e1fc      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
 8010424:	f3af 8000 	nop.w
 8010428:	00000000 	.word	0x00000000
 801042c:	406fe000 	.word	0x406fe000
 8010430:	ffffec78 	.word	0xffffec78
 8010434:	40490000 	.word	0x40490000
        case FFB_EFFECT_TRIANGLE:
        	result_torque -= TriangleForceCalculator(effect) * (((float)conf->triangleGain * 50.0) / 255.0);
 8010438:	68f9      	ldr	r1, [r7, #12]
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 faee 	bl	8010a1c <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect>
 8010440:	4603      	mov	r3, r0
 8010442:	4618      	mov	r0, r3
 8010444:	f7ef ffde 	bl	8000404 <__aeabi_i2d>
 8010448:	4604      	mov	r4, r0
 801044a:	460d      	mov	r5, r1
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6a1b      	ldr	r3, [r3, #32]
 8010450:	7c5b      	ldrb	r3, [r3, #17]
 8010452:	4618      	mov	r0, r3
 8010454:	f7f0 fc1e 	bl	8000c94 <__aeabi_ui2f>
 8010458:	4603      	mov	r3, r0
 801045a:	4618      	mov	r0, r3
 801045c:	f7ef ffe4 	bl	8000428 <__aeabi_f2d>
 8010460:	f04f 0200 	mov.w	r2, #0
 8010464:	4bc8      	ldr	r3, [pc, #800]	; (8010788 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 8010466:	f7f0 f837 	bl	80004d8 <__aeabi_dmul>
 801046a:	4602      	mov	r2, r0
 801046c:	460b      	mov	r3, r1
 801046e:	4610      	mov	r0, r2
 8010470:	4619      	mov	r1, r3
 8010472:	a3c3      	add	r3, pc, #780	; (adr r3, 8010780 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 8010474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010478:	f7f0 f958 	bl	800072c <__aeabi_ddiv>
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	4620      	mov	r0, r4
 8010482:	4629      	mov	r1, r5
 8010484:	f7f0 f828 	bl	80004d8 <__aeabi_dmul>
 8010488:	4603      	mov	r3, r0
 801048a:	460c      	mov	r4, r1
 801048c:	4625      	mov	r5, r4
 801048e:	461c      	mov	r4, r3
 8010490:	6978      	ldr	r0, [r7, #20]
 8010492:	f7ef ffb7 	bl	8000404 <__aeabi_i2d>
 8010496:	4622      	mov	r2, r4
 8010498:	462b      	mov	r3, r5
 801049a:	f7ef fe65 	bl	8000168 <__aeabi_dsub>
 801049e:	4603      	mov	r3, r0
 80104a0:	460c      	mov	r4, r1
 80104a2:	4618      	mov	r0, r3
 80104a4:	4621      	mov	r1, r4
 80104a6:	f7f0 fac7 	bl	8000a38 <__aeabi_d2iz>
 80104aa:	4603      	mov	r3, r0
 80104ac:	617b      	str	r3, [r7, #20]
        	break;
 80104ae:	e1b6      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
        case FFB_EFFECT_SAWTOOTHDOWN:
        	result_torque -= SawtoothDownForceCalculator(effect) * (((float)conf->sawToothDownGain * 50.0) / 255.0);
 80104b0:	68f9      	ldr	r1, [r7, #12]
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 fb56 	bl	8010b64 <_ZN6HidFFB27SawtoothDownForceCalculatorEP10FFB_Effect>
 80104b8:	4603      	mov	r3, r0
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7ef ffa2 	bl	8000404 <__aeabi_i2d>
 80104c0:	4604      	mov	r4, r0
 80104c2:	460d      	mov	r5, r1
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6a1b      	ldr	r3, [r3, #32]
 80104c8:	7c9b      	ldrb	r3, [r3, #18]
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7f0 fbe2 	bl	8000c94 <__aeabi_ui2f>
 80104d0:	4603      	mov	r3, r0
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7ef ffa8 	bl	8000428 <__aeabi_f2d>
 80104d8:	f04f 0200 	mov.w	r2, #0
 80104dc:	4baa      	ldr	r3, [pc, #680]	; (8010788 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 80104de:	f7ef fffb 	bl	80004d8 <__aeabi_dmul>
 80104e2:	4602      	mov	r2, r0
 80104e4:	460b      	mov	r3, r1
 80104e6:	4610      	mov	r0, r2
 80104e8:	4619      	mov	r1, r3
 80104ea:	a3a5      	add	r3, pc, #660	; (adr r3, 8010780 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 80104ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f0:	f7f0 f91c 	bl	800072c <__aeabi_ddiv>
 80104f4:	4602      	mov	r2, r0
 80104f6:	460b      	mov	r3, r1
 80104f8:	4620      	mov	r0, r4
 80104fa:	4629      	mov	r1, r5
 80104fc:	f7ef ffec 	bl	80004d8 <__aeabi_dmul>
 8010500:	4603      	mov	r3, r0
 8010502:	460c      	mov	r4, r1
 8010504:	4625      	mov	r5, r4
 8010506:	461c      	mov	r4, r3
 8010508:	6978      	ldr	r0, [r7, #20]
 801050a:	f7ef ff7b 	bl	8000404 <__aeabi_i2d>
 801050e:	4622      	mov	r2, r4
 8010510:	462b      	mov	r3, r5
 8010512:	f7ef fe29 	bl	8000168 <__aeabi_dsub>
 8010516:	4603      	mov	r3, r0
 8010518:	460c      	mov	r4, r1
 801051a:	4618      	mov	r0, r3
 801051c:	4621      	mov	r1, r4
 801051e:	f7f0 fa8b 	bl	8000a38 <__aeabi_d2iz>
 8010522:	4603      	mov	r3, r0
 8010524:	617b      	str	r3, [r7, #20]
        	break;
 8010526:	e17a      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
        case FFB_EFFECT_SAWTOOTHUP:
        	result_torque -= SawtoothUpForceCalculator(effect) * (((float)conf->sawToothUpGain * 50.0) / 255.0);
 8010528:	68f9      	ldr	r1, [r7, #12]
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f000 fbb6 	bl	8010c9c <_ZN6HidFFB25SawtoothUpForceCalculatorEP10FFB_Effect>
 8010530:	4603      	mov	r3, r0
 8010532:	4618      	mov	r0, r3
 8010534:	f7ef ff66 	bl	8000404 <__aeabi_i2d>
 8010538:	4604      	mov	r4, r0
 801053a:	460d      	mov	r5, r1
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6a1b      	ldr	r3, [r3, #32]
 8010540:	7cdb      	ldrb	r3, [r3, #19]
 8010542:	4618      	mov	r0, r3
 8010544:	f7f0 fba6 	bl	8000c94 <__aeabi_ui2f>
 8010548:	4603      	mov	r3, r0
 801054a:	4618      	mov	r0, r3
 801054c:	f7ef ff6c 	bl	8000428 <__aeabi_f2d>
 8010550:	f04f 0200 	mov.w	r2, #0
 8010554:	4b8c      	ldr	r3, [pc, #560]	; (8010788 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 8010556:	f7ef ffbf 	bl	80004d8 <__aeabi_dmul>
 801055a:	4602      	mov	r2, r0
 801055c:	460b      	mov	r3, r1
 801055e:	4610      	mov	r0, r2
 8010560:	4619      	mov	r1, r3
 8010562:	a387      	add	r3, pc, #540	; (adr r3, 8010780 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 8010564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010568:	f7f0 f8e0 	bl	800072c <__aeabi_ddiv>
 801056c:	4602      	mov	r2, r0
 801056e:	460b      	mov	r3, r1
 8010570:	4620      	mov	r0, r4
 8010572:	4629      	mov	r1, r5
 8010574:	f7ef ffb0 	bl	80004d8 <__aeabi_dmul>
 8010578:	4603      	mov	r3, r0
 801057a:	460c      	mov	r4, r1
 801057c:	4625      	mov	r5, r4
 801057e:	461c      	mov	r4, r3
 8010580:	6978      	ldr	r0, [r7, #20]
 8010582:	f7ef ff3f 	bl	8000404 <__aeabi_i2d>
 8010586:	4622      	mov	r2, r4
 8010588:	462b      	mov	r3, r5
 801058a:	f7ef fded 	bl	8000168 <__aeabi_dsub>
 801058e:	4603      	mov	r3, r0
 8010590:	460c      	mov	r4, r1
 8010592:	4618      	mov	r0, r3
 8010594:	4621      	mov	r1, r4
 8010596:	f7f0 fa4f 	bl	8000a38 <__aeabi_d2iz>
 801059a:	4603      	mov	r3, r0
 801059c:	617b      	str	r3, [r7, #20]
          	break;
 801059e:	e13e      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_DAMPER:
			result_torque -= ConditionForceCalculator(effect, NormalizeRange(encoder->currentVelocity, encoder->maxVelocity)) * (((float)conf->damperGain * 50.0) / 255.0);
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105a8:	461a      	mov	r2, r3
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fd52 	bl	8011054 <_ZN6HidFFB14NormalizeRangeEll>
 80105b0:	4603      	mov	r3, r0
 80105b2:	461a      	mov	r2, r3
 80105b4:	68f9      	ldr	r1, [r7, #12]
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 fbf6 	bl	8010da8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 80105bc:	4603      	mov	r3, r0
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ef ff20 	bl	8000404 <__aeabi_i2d>
 80105c4:	4604      	mov	r4, r0
 80105c6:	460d      	mov	r5, r1
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6a1b      	ldr	r3, [r3, #32]
 80105cc:	7d5b      	ldrb	r3, [r3, #21]
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7f0 fb60 	bl	8000c94 <__aeabi_ui2f>
 80105d4:	4603      	mov	r3, r0
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7ef ff26 	bl	8000428 <__aeabi_f2d>
 80105dc:	f04f 0200 	mov.w	r2, #0
 80105e0:	4b69      	ldr	r3, [pc, #420]	; (8010788 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 80105e2:	f7ef ff79 	bl	80004d8 <__aeabi_dmul>
 80105e6:	4602      	mov	r2, r0
 80105e8:	460b      	mov	r3, r1
 80105ea:	4610      	mov	r0, r2
 80105ec:	4619      	mov	r1, r3
 80105ee:	a364      	add	r3, pc, #400	; (adr r3, 8010780 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 80105f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f4:	f7f0 f89a 	bl	800072c <__aeabi_ddiv>
 80105f8:	4602      	mov	r2, r0
 80105fa:	460b      	mov	r3, r1
 80105fc:	4620      	mov	r0, r4
 80105fe:	4629      	mov	r1, r5
 8010600:	f7ef ff6a 	bl	80004d8 <__aeabi_dmul>
 8010604:	4603      	mov	r3, r0
 8010606:	460c      	mov	r4, r1
 8010608:	4625      	mov	r5, r4
 801060a:	461c      	mov	r4, r3
 801060c:	6978      	ldr	r0, [r7, #20]
 801060e:	f7ef fef9 	bl	8000404 <__aeabi_i2d>
 8010612:	4622      	mov	r2, r4
 8010614:	462b      	mov	r3, r5
 8010616:	f7ef fda7 	bl	8000168 <__aeabi_dsub>
 801061a:	4603      	mov	r3, r0
 801061c:	460c      	mov	r4, r1
 801061e:	4618      	mov	r0, r3
 8010620:	4621      	mov	r1, r4
 8010622:	f7f0 fa09 	bl	8000a38 <__aeabi_d2iz>
 8010626:	4603      	mov	r3, r0
 8010628:	617b      	str	r3, [r7, #20]
		    break;
 801062a:	e0f8      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		case FFB_EFFECT_INERTIA:
	        if ( encoder->currentAcceleration < 0 and encoder->positionChange < 0) {
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010630:	2b00      	cmp	r3, #0
 8010632:	da4d      	bge.n	80106d0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x5d0>
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010638:	2b00      	cmp	r3, #0
 801063a:	da49      	bge.n	80106d0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x5d0>
	        	result_torque -= ConditionForceCalculator(effect, abs(NormalizeRange(encoder->currentAcceleration, encoder->maxAcceleration))) * (((float)conf->inertiaGain * 50.0) / 255.0);
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010644:	461a      	mov	r2, r3
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 fd04 	bl	8011054 <_ZN6HidFFB14NormalizeRangeEll>
 801064c:	4603      	mov	r3, r0
 801064e:	4618      	mov	r0, r3
 8010650:	f7fd ffb8 	bl	800e5c4 <_ZSt3absf>
 8010654:	4603      	mov	r3, r0
 8010656:	461a      	mov	r2, r3
 8010658:	68f9      	ldr	r1, [r7, #12]
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 fba4 	bl	8010da8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 8010660:	4603      	mov	r3, r0
 8010662:	4618      	mov	r0, r3
 8010664:	f7ef fece 	bl	8000404 <__aeabi_i2d>
 8010668:	4604      	mov	r4, r0
 801066a:	460d      	mov	r5, r1
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6a1b      	ldr	r3, [r3, #32]
 8010670:	7d9b      	ldrb	r3, [r3, #22]
 8010672:	4618      	mov	r0, r3
 8010674:	f7f0 fb0e 	bl	8000c94 <__aeabi_ui2f>
 8010678:	4603      	mov	r3, r0
 801067a:	4618      	mov	r0, r3
 801067c:	f7ef fed4 	bl	8000428 <__aeabi_f2d>
 8010680:	f04f 0200 	mov.w	r2, #0
 8010684:	4b40      	ldr	r3, [pc, #256]	; (8010788 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 8010686:	f7ef ff27 	bl	80004d8 <__aeabi_dmul>
 801068a:	4602      	mov	r2, r0
 801068c:	460b      	mov	r3, r1
 801068e:	4610      	mov	r0, r2
 8010690:	4619      	mov	r1, r3
 8010692:	a33b      	add	r3, pc, #236	; (adr r3, 8010780 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	f7f0 f848 	bl	800072c <__aeabi_ddiv>
 801069c:	4602      	mov	r2, r0
 801069e:	460b      	mov	r3, r1
 80106a0:	4620      	mov	r0, r4
 80106a2:	4629      	mov	r1, r5
 80106a4:	f7ef ff18 	bl	80004d8 <__aeabi_dmul>
 80106a8:	4603      	mov	r3, r0
 80106aa:	460c      	mov	r4, r1
 80106ac:	4625      	mov	r5, r4
 80106ae:	461c      	mov	r4, r3
 80106b0:	6978      	ldr	r0, [r7, #20]
 80106b2:	f7ef fea7 	bl	8000404 <__aeabi_i2d>
 80106b6:	4622      	mov	r2, r4
 80106b8:	462b      	mov	r3, r5
 80106ba:	f7ef fd55 	bl	8000168 <__aeabi_dsub>
 80106be:	4603      	mov	r3, r0
 80106c0:	460c      	mov	r4, r1
 80106c2:	4618      	mov	r0, r3
 80106c4:	4621      	mov	r1, r4
 80106c6:	f7f0 f9b7 	bl	8000a38 <__aeabi_d2iz>
 80106ca:	4603      	mov	r3, r0
 80106cc:	617b      	str	r3, [r7, #20]
	        } else if ( encoder->currentAcceleration < 0 and encoder->positionChange > 0) {
	        	result_torque += ConditionForceCalculator(effect, abs(NormalizeRange(encoder->currentAcceleration, encoder->maxAcceleration))) * (((float)conf->inertiaGain * 50.0) / 255.0);
	        }
			break;
 80106ce:	e0a5      	b.n	801081c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71c>
	        } else if ( encoder->currentAcceleration < 0 and encoder->positionChange > 0) {
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f280 80a1 	bge.w	801081c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71c>
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106de:	2b00      	cmp	r3, #0
 80106e0:	f340 809c 	ble.w	801081c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71c>
	        	result_torque += ConditionForceCalculator(effect, abs(NormalizeRange(encoder->currentAcceleration, encoder->maxAcceleration))) * (((float)conf->inertiaGain * 50.0) / 255.0);
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ec:	461a      	mov	r2, r3
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 fcb0 	bl	8011054 <_ZN6HidFFB14NormalizeRangeEll>
 80106f4:	4603      	mov	r3, r0
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fd ff64 	bl	800e5c4 <_ZSt3absf>
 80106fc:	4603      	mov	r3, r0
 80106fe:	461a      	mov	r2, r3
 8010700:	68f9      	ldr	r1, [r7, #12]
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 fb50 	bl	8010da8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 8010708:	4603      	mov	r3, r0
 801070a:	4618      	mov	r0, r3
 801070c:	f7ef fe7a 	bl	8000404 <__aeabi_i2d>
 8010710:	4604      	mov	r4, r0
 8010712:	460d      	mov	r5, r1
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6a1b      	ldr	r3, [r3, #32]
 8010718:	7d9b      	ldrb	r3, [r3, #22]
 801071a:	4618      	mov	r0, r3
 801071c:	f7f0 faba 	bl	8000c94 <__aeabi_ui2f>
 8010720:	4603      	mov	r3, r0
 8010722:	4618      	mov	r0, r3
 8010724:	f7ef fe80 	bl	8000428 <__aeabi_f2d>
 8010728:	f04f 0200 	mov.w	r2, #0
 801072c:	4b16      	ldr	r3, [pc, #88]	; (8010788 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x688>)
 801072e:	f7ef fed3 	bl	80004d8 <__aeabi_dmul>
 8010732:	4602      	mov	r2, r0
 8010734:	460b      	mov	r3, r1
 8010736:	4610      	mov	r0, r2
 8010738:	4619      	mov	r1, r3
 801073a:	a311      	add	r3, pc, #68	; (adr r3, 8010780 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x680>)
 801073c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010740:	f7ef fff4 	bl	800072c <__aeabi_ddiv>
 8010744:	4602      	mov	r2, r0
 8010746:	460b      	mov	r3, r1
 8010748:	4620      	mov	r0, r4
 801074a:	4629      	mov	r1, r5
 801074c:	f7ef fec4 	bl	80004d8 <__aeabi_dmul>
 8010750:	4603      	mov	r3, r0
 8010752:	460c      	mov	r4, r1
 8010754:	4625      	mov	r5, r4
 8010756:	461c      	mov	r4, r3
 8010758:	6978      	ldr	r0, [r7, #20]
 801075a:	f7ef fe53 	bl	8000404 <__aeabi_i2d>
 801075e:	4602      	mov	r2, r0
 8010760:	460b      	mov	r3, r1
 8010762:	4620      	mov	r0, r4
 8010764:	4629      	mov	r1, r5
 8010766:	f7ef fd01 	bl	800016c <__adddf3>
 801076a:	4603      	mov	r3, r0
 801076c:	460c      	mov	r4, r1
 801076e:	4618      	mov	r0, r3
 8010770:	4621      	mov	r1, r4
 8010772:	f7f0 f961 	bl	8000a38 <__aeabi_d2iz>
 8010776:	4603      	mov	r3, r0
 8010778:	617b      	str	r3, [r7, #20]
			break;
 801077a:	e04f      	b.n	801081c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71c>
 801077c:	f3af 8000 	nop.w
 8010780:	00000000 	.word	0x00000000
 8010784:	406fe000 	.word	0x406fe000
 8010788:	40490000 	.word	0x40490000
		case FFB_EFFECT_FRICTION:
			result_torque -= ConditionForceCalculator(effect, NormalizeRange(encoder->positionChange, encoder->maxPositionChange)) * (((float)conf->frictionGain * 50.0) / 255.0);
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010794:	461a      	mov	r2, r3
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f000 fc5c 	bl	8011054 <_ZN6HidFFB14NormalizeRangeEll>
 801079c:	4603      	mov	r3, r0
 801079e:	461a      	mov	r2, r3
 80107a0:	68f9      	ldr	r1, [r7, #12]
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 fb00 	bl	8010da8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>
 80107a8:	4603      	mov	r3, r0
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7ef fe2a 	bl	8000404 <__aeabi_i2d>
 80107b0:	4604      	mov	r4, r0
 80107b2:	460d      	mov	r5, r1
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6a1b      	ldr	r3, [r3, #32]
 80107b8:	7ddb      	ldrb	r3, [r3, #23]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7f0 fa6a 	bl	8000c94 <__aeabi_ui2f>
 80107c0:	4603      	mov	r3, r0
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ef fe30 	bl	8000428 <__aeabi_f2d>
 80107c8:	f04f 0200 	mov.w	r2, #0
 80107cc:	4b36      	ldr	r3, [pc, #216]	; (80108a8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x7a8>)
 80107ce:	f7ef fe83 	bl	80004d8 <__aeabi_dmul>
 80107d2:	4602      	mov	r2, r0
 80107d4:	460b      	mov	r3, r1
 80107d6:	4610      	mov	r0, r2
 80107d8:	4619      	mov	r1, r3
 80107da:	a331      	add	r3, pc, #196	; (adr r3, 80108a0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x7a0>)
 80107dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e0:	f7ef ffa4 	bl	800072c <__aeabi_ddiv>
 80107e4:	4602      	mov	r2, r0
 80107e6:	460b      	mov	r3, r1
 80107e8:	4620      	mov	r0, r4
 80107ea:	4629      	mov	r1, r5
 80107ec:	f7ef fe74 	bl	80004d8 <__aeabi_dmul>
 80107f0:	4603      	mov	r3, r0
 80107f2:	460c      	mov	r4, r1
 80107f4:	4625      	mov	r5, r4
 80107f6:	461c      	mov	r4, r3
 80107f8:	6978      	ldr	r0, [r7, #20]
 80107fa:	f7ef fe03 	bl	8000404 <__aeabi_i2d>
 80107fe:	4622      	mov	r2, r4
 8010800:	462b      	mov	r3, r5
 8010802:	f7ef fcb1 	bl	8000168 <__aeabi_dsub>
 8010806:	4603      	mov	r3, r0
 8010808:	460c      	mov	r4, r1
 801080a:	4618      	mov	r0, r3
 801080c:	4621      	mov	r1, r4
 801080e:	f7f0 f913 	bl	8000a38 <__aeabi_d2iz>
 8010812:	4603      	mov	r3, r0
 8010814:	617b      	str	r3, [r7, #20]
			break;
 8010816:	e002      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
		default:
			break;
 8010818:	bf00      	nop
 801081a:	e000      	b.n	801081e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x71e>
			break;
 801081c:	bf00      	nop
		}
		effect->elapsedTime = (uint64_t)HAL_GetTick() - effect->startTime;
 801081e:	f7f1 fc6b 	bl	80020f8 <HAL_GetTick>
 8010822:	4603      	mov	r3, r0
 8010824:	b29a      	uxth	r2, r3
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801082c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8010830:	b29b      	uxth	r3, r3
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	b29a      	uxth	r2, r3
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	85da      	strh	r2, [r3, #46]	; 0x2e
		if(effect->counter++ > effect->duration){
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801083e:	1c5a      	adds	r2, r3, #1
 8010840:	b291      	uxth	r1, r2
 8010842:	68fa      	ldr	r2, [r7, #12]
 8010844:	8491      	strh	r1, [r2, #36]	; 0x24
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801084a:	4293      	cmp	r3, r2
 801084c:	bf8c      	ite	hi
 801084e:	2301      	movhi	r3, #1
 8010850:	2300      	movls	r3, #0
 8010852:	b2db      	uxtb	r3, r3
 8010854:	2b00      	cmp	r3, #0
 8010856:	d002      	beq.n	801085e <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x75e>
			effect->state = 0;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2200      	movs	r2, #0
 801085c:	701a      	strb	r2, [r3, #0]
		}
		result_torque =  clip(result_torque, -0x7fff, 0x7fff);
 801085e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010862:	4912      	ldr	r1, [pc, #72]	; (80108ac <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x7ac>)
 8010864:	6978      	ldr	r0, [r7, #20]
 8010866:	f7fc fa37 	bl	800ccd8 <_Z4clipIliET_S0_T0_S1_>
 801086a:	6178      	str	r0, [r7, #20]
 801086c:	e000      	b.n	8010870 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x770>
			continue;
 801086e:	bf00      	nop
	for(uint8_t i = 0;i<MAX_EFFECTS;i++){
 8010870:	7cfb      	ldrb	r3, [r7, #19]
 8010872:	3301      	adds	r3, #1
 8010874:	74fb      	strb	r3, [r7, #19]
 8010876:	e464      	b.n	8010142 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x42>
	}
	result_torque = (result_torque * (gain+1)) >> 8; // Apply global gain
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	7d1b      	ldrb	r3, [r3, #20]
 801087c:	3301      	adds	r3, #1
 801087e:	697a      	ldr	r2, [r7, #20]
 8010880:	fb02 f303 	mul.w	r3, r2, r3
 8010884:	121b      	asrs	r3, r3, #8
 8010886:	617b      	str	r3, [r7, #20]
	return clip(result_torque, -0x7fff, 0x7fff);
 8010888:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801088c:	4907      	ldr	r1, [pc, #28]	; (80108ac <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x7ac>)
 801088e:	6978      	ldr	r0, [r7, #20]
 8010890:	f7fc fa22 	bl	800ccd8 <_Z4clipIliET_S0_T0_S1_>
 8010894:	4603      	mov	r3, r0
}
 8010896:	4618      	mov	r0, r3
 8010898:	3718      	adds	r7, #24
 801089a:	46bd      	mov	sp, r7
 801089c:	bdb0      	pop	{r4, r5, r7, pc}
 801089e:	bf00      	nop
 80108a0:	00000000 	.word	0x00000000
 80108a4:	406fe000 	.word	0x406fe000
 80108a8:	40490000 	.word	0x40490000
 80108ac:	ffff8001 	.word	0xffff8001

080108b0 <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::SquareForceCalculator(FFB_Effect *effect)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b08e      	sub	sp, #56	; 0x38
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
	 int32_t offset = effect->offset * 2;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80108c0:	005b      	lsls	r3, r3, #1
 80108c2:	633b      	str	r3, [r7, #48]	; 0x30
	  uint32_t magnitude = effect->magnitude;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80108ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint32_t elapsedTime = effect->elapsedTime;
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80108d0:	62bb      	str	r3, [r7, #40]	; 0x28
	  uint32_t phase = effect->phase;
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80108d8:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t period = effect->period;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80108de:	623b      	str	r3, [r7, #32]

	  int32_t maxMagnitude = offset + magnitude;
 80108e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e4:	4413      	add	r3, r2
 80108e6:	61fb      	str	r3, [r7, #28]
	  int32_t minMagnitude = offset - magnitude;
 80108e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ec:	1ad3      	subs	r3, r2, r3
 80108ee:	61bb      	str	r3, [r7, #24]
	  uint32_t phasetime = (phase * period) / 255;
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	6a3a      	ldr	r2, [r7, #32]
 80108f4:	fb02 f303 	mul.w	r3, r2, r3
 80108f8:	4a12      	ldr	r2, [pc, #72]	; (8010944 <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect+0x94>)
 80108fa:	fba2 2303 	umull	r2, r3, r2, r3
 80108fe:	09db      	lsrs	r3, r3, #7
 8010900:	617b      	str	r3, [r7, #20]
	  uint32_t timeTemp = elapsedTime + phasetime;
 8010902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	4413      	add	r3, r2
 8010908:	613b      	str	r3, [r7, #16]
	  uint32_t reminder = timeTemp % period;
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	6a3a      	ldr	r2, [r7, #32]
 801090e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010912:	6a39      	ldr	r1, [r7, #32]
 8010914:	fb01 f202 	mul.w	r2, r1, r2
 8010918:	1a9b      	subs	r3, r3, r2
 801091a:	60fb      	str	r3, [r7, #12]
	  int32_t tempforce;
	  if (reminder > (period / 2)) tempforce = minMagnitude;
 801091c:	6a3b      	ldr	r3, [r7, #32]
 801091e:	085b      	lsrs	r3, r3, #1
 8010920:	68fa      	ldr	r2, [r7, #12]
 8010922:	429a      	cmp	r2, r3
 8010924:	d902      	bls.n	801092c <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect+0x7c>
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	637b      	str	r3, [r7, #52]	; 0x34
 801092a:	e001      	b.n	8010930 <_ZN6HidFFB21SquareForceCalculatorEP10FFB_Effect+0x80>
	  else tempforce = maxMagnitude;
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	637b      	str	r3, [r7, #52]	; 0x34
	  return ApplyEnvelope(effect, tempforce);
 8010930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010932:	6839      	ldr	r1, [r7, #0]
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f000 fb0d 	bl	8010f54 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 801093a:	4603      	mov	r3, r0
}
 801093c:	4618      	mov	r0, r3
 801093e:	3738      	adds	r7, #56	; 0x38
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	80808081 	.word	0x80808081

08010948 <_ZN6HidFFB18SinForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::SinForceCalculator(FFB_Effect *effect)
{
 8010948:	b590      	push	{r4, r7, lr}
 801094a:	b08b      	sub	sp, #44	; 0x2c
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
	float offset = effect->offset * 2;
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	4618      	mov	r0, r3
 801095c:	f7f0 f99e 	bl	8000c9c <__aeabi_i2f>
 8010960:	4603      	mov	r3, r0
 8010962:	627b      	str	r3, [r7, #36]	; 0x24
	float magnitude = effect->magnitude;
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801096a:	4618      	mov	r0, r3
 801096c:	f7f0 f996 	bl	8000c9c <__aeabi_i2f>
 8010970:	4603      	mov	r3, r0
 8010972:	623b      	str	r3, [r7, #32]
	float phase = effect->phase;
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801097a:	4618      	mov	r0, r3
 801097c:	f7f0 f98e 	bl	8000c9c <__aeabi_i2f>
 8010980:	4603      	mov	r3, r0
 8010982:	61fb      	str	r3, [r7, #28]
	float timeTemp = effect->elapsedTime;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010988:	4618      	mov	r0, r3
 801098a:	f7f0 f983 	bl	8000c94 <__aeabi_ui2f>
 801098e:	4603      	mov	r3, r0
 8010990:	61bb      	str	r3, [r7, #24]
	float period = effect->period;
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010996:	4618      	mov	r0, r3
 8010998:	f7f0 f97c 	bl	8000c94 <__aeabi_ui2f>
 801099c:	4603      	mov	r3, r0
 801099e:	617b      	str	r3, [r7, #20]
	float angle = ((timeTemp / period) * 2 * (float)3.14159265359 + (float)(phase / 36000));
 80109a0:	6979      	ldr	r1, [r7, #20]
 80109a2:	69b8      	ldr	r0, [r7, #24]
 80109a4:	f7f0 fa82 	bl	8000eac <__aeabi_fdiv>
 80109a8:	4603      	mov	r3, r0
 80109aa:	4619      	mov	r1, r3
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7f0 f8c1 	bl	8000b34 <__addsf3>
 80109b2:	4603      	mov	r3, r0
 80109b4:	4917      	ldr	r1, [pc, #92]	; (8010a14 <_ZN6HidFFB18SinForceCalculatorEP10FFB_Effect+0xcc>)
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7f0 f9c4 	bl	8000d44 <__aeabi_fmul>
 80109bc:	4603      	mov	r3, r0
 80109be:	461c      	mov	r4, r3
 80109c0:	4915      	ldr	r1, [pc, #84]	; (8010a18 <_ZN6HidFFB18SinForceCalculatorEP10FFB_Effect+0xd0>)
 80109c2:	69f8      	ldr	r0, [r7, #28]
 80109c4:	f7f0 fa72 	bl	8000eac <__aeabi_fdiv>
 80109c8:	4603      	mov	r3, r0
 80109ca:	4619      	mov	r1, r3
 80109cc:	4620      	mov	r0, r4
 80109ce:	f7f0 f8b1 	bl	8000b34 <__addsf3>
 80109d2:	4603      	mov	r3, r0
 80109d4:	613b      	str	r3, [r7, #16]
	float sine = sin(angle);
 80109d6:	6938      	ldr	r0, [r7, #16]
 80109d8:	f7fe fe5e 	bl	800f698 <_ZSt3sinf>
 80109dc:	60f8      	str	r0, [r7, #12]
	float tempforce = sine * magnitude;
 80109de:	6a39      	ldr	r1, [r7, #32]
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f7f0 f9af 	bl	8000d44 <__aeabi_fmul>
 80109e6:	4603      	mov	r3, r0
 80109e8:	60bb      	str	r3, [r7, #8]
	tempforce += offset;
 80109ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109ec:	68b8      	ldr	r0, [r7, #8]
 80109ee:	f7f0 f8a1 	bl	8000b34 <__addsf3>
 80109f2:	4603      	mov	r3, r0
 80109f4:	60bb      	str	r3, [r7, #8]
	return ApplyEnvelope(effect, tempforce);
 80109f6:	68b8      	ldr	r0, [r7, #8]
 80109f8:	f7f0 fb6a 	bl	80010d0 <__aeabi_f2iz>
 80109fc:	4603      	mov	r3, r0
 80109fe:	461a      	mov	r2, r3
 8010a00:	6839      	ldr	r1, [r7, #0]
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 faa6 	bl	8010f54 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 8010a08:	4603      	mov	r3, r0
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	372c      	adds	r7, #44	; 0x2c
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd90      	pop	{r4, r7, pc}
 8010a12:	bf00      	nop
 8010a14:	40490fdb 	.word	0x40490fdb
 8010a18:	470ca000 	.word	0x470ca000

08010a1c <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::TriangleForceCalculator(FFB_Effect *effect)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b090      	sub	sp, #64	; 0x40
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
	  float offset = effect->offset * 2;
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8010a2c:	005b      	lsls	r3, r3, #1
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7f0 f934 	bl	8000c9c <__aeabi_i2f>
 8010a34:	4603      	mov	r3, r0
 8010a36:	63bb      	str	r3, [r7, #56]	; 0x38
	  float magnitude = effect->magnitude;
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7f0 f92c 	bl	8000c9c <__aeabi_i2f>
 8010a44:	4603      	mov	r3, r0
 8010a46:	637b      	str	r3, [r7, #52]	; 0x34
	  float elapsedTime = effect->elapsedTime;
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7f0 f921 	bl	8000c94 <__aeabi_ui2f>
 8010a52:	4603      	mov	r3, r0
 8010a54:	633b      	str	r3, [r7, #48]	; 0x30
	  uint32_t phase = effect->phase;
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint32_t period = effect->period;
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a62:	62bb      	str	r3, [r7, #40]	; 0x28
	  float periodF = effect->period;
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7f0 f913 	bl	8000c94 <__aeabi_ui2f>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	627b      	str	r3, [r7, #36]	; 0x24

	  float maxMagnitude = offset + magnitude;
 8010a72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010a74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a76:	f7f0 f85d 	bl	8000b34 <__addsf3>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	623b      	str	r3, [r7, #32]
	  float minMagnitude = offset - magnitude;
 8010a7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010a80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a82:	f7f0 f855 	bl	8000b30 <__aeabi_fsub>
 8010a86:	4603      	mov	r3, r0
 8010a88:	61fb      	str	r3, [r7, #28]
	  uint32_t phasetime = (phase * period) / 255;
 8010a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a8e:	fb02 f303 	mul.w	r3, r2, r3
 8010a92:	4a33      	ldr	r2, [pc, #204]	; (8010b60 <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect+0x144>)
 8010a94:	fba2 2303 	umull	r2, r3, r2, r3
 8010a98:	09db      	lsrs	r3, r3, #7
 8010a9a:	61bb      	str	r3, [r7, #24]
	  uint32_t timeTemp = elapsedTime + phasetime;
 8010a9c:	69b8      	ldr	r0, [r7, #24]
 8010a9e:	f7f0 f8f9 	bl	8000c94 <__aeabi_ui2f>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7f0 f844 	bl	8000b34 <__addsf3>
 8010aac:	4603      	mov	r3, r0
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7f0 fb34 	bl	800111c <__aeabi_f2uiz>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	617b      	str	r3, [r7, #20]
	  float reminder = timeTemp % period;
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010abc:	fbb3 f2f2 	udiv	r2, r3, r2
 8010ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ac2:	fb01 f202 	mul.w	r2, r1, r2
 8010ac6:	1a9b      	subs	r3, r3, r2
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7f0 f8e3 	bl	8000c94 <__aeabi_ui2f>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	613b      	str	r3, [r7, #16]
	  float slope = ((maxMagnitude - minMagnitude) * 2) / periodF;
 8010ad2:	69f9      	ldr	r1, [r7, #28]
 8010ad4:	6a38      	ldr	r0, [r7, #32]
 8010ad6:	f7f0 f82b 	bl	8000b30 <__aeabi_fsub>
 8010ada:	4603      	mov	r3, r0
 8010adc:	4619      	mov	r1, r3
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7f0 f828 	bl	8000b34 <__addsf3>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7f0 f9df 	bl	8000eac <__aeabi_fdiv>
 8010aee:	4603      	mov	r3, r0
 8010af0:	60fb      	str	r3, [r7, #12]
	  float tempforce = 0;
 8010af2:	f04f 0300 	mov.w	r3, #0
 8010af6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (reminder > (periodF / 2)) tempforce = slope * (periodF - reminder);
 8010af8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010afe:	f7f0 f9d5 	bl	8000eac <__aeabi_fdiv>
 8010b02:	4603      	mov	r3, r0
 8010b04:	4619      	mov	r1, r3
 8010b06:	6938      	ldr	r0, [r7, #16]
 8010b08:	f7f0 fad8 	bl	80010bc <__aeabi_fcmpgt>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d00b      	beq.n	8010b2a <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect+0x10e>
 8010b12:	6939      	ldr	r1, [r7, #16]
 8010b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b16:	f7f0 f80b 	bl	8000b30 <__aeabi_fsub>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f7f0 f910 	bl	8000d44 <__aeabi_fmul>
 8010b24:	4603      	mov	r3, r0
 8010b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b28:	e005      	b.n	8010b36 <_ZN6HidFFB23TriangleForceCalculatorEP10FFB_Effect+0x11a>
	  else tempforce = slope * reminder;
 8010b2a:	6939      	ldr	r1, [r7, #16]
 8010b2c:	68f8      	ldr	r0, [r7, #12]
 8010b2e:	f7f0 f909 	bl	8000d44 <__aeabi_fmul>
 8010b32:	4603      	mov	r3, r0
 8010b34:	63fb      	str	r3, [r7, #60]	; 0x3c
	  tempforce += minMagnitude;
 8010b36:	69f9      	ldr	r1, [r7, #28]
 8010b38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b3a:	f7ef fffb 	bl	8000b34 <__addsf3>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	63fb      	str	r3, [r7, #60]	; 0x3c
	  return ApplyEnvelope(effect, tempforce);
 8010b42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b44:	f7f0 fac4 	bl	80010d0 <__aeabi_f2iz>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	6839      	ldr	r1, [r7, #0]
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 fa00 	bl	8010f54 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 8010b54:	4603      	mov	r3, r0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3740      	adds	r7, #64	; 0x40
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	80808081 	.word	0x80808081

08010b64 <_ZN6HidFFB27SawtoothDownForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::SawtoothDownForceCalculator(FFB_Effect *effect)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b090      	sub	sp, #64	; 0x40
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
	  float offset = effect->offset * 2;
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8010b74:	005b      	lsls	r3, r3, #1
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7f0 f890 	bl	8000c9c <__aeabi_i2f>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float magnitude = effect->magnitude;
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7f0 f888 	bl	8000c9c <__aeabi_i2f>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	63bb      	str	r3, [r7, #56]	; 0x38
	  float elapsedTime = effect->elapsedTime;
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7f0 f87d 	bl	8000c94 <__aeabi_ui2f>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	637b      	str	r3, [r7, #52]	; 0x34
	  float phase = effect->phase;
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7f0 f879 	bl	8000c9c <__aeabi_i2f>
 8010baa:	4603      	mov	r3, r0
 8010bac:	633b      	str	r3, [r7, #48]	; 0x30
	  uint32_t period = effect->period;
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float periodF = effect->period;
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7f0 f86b 	bl	8000c94 <__aeabi_ui2f>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	62bb      	str	r3, [r7, #40]	; 0x28

	  float maxMagnitude = offset + magnitude;
 8010bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010bc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bc6:	f7ef ffb5 	bl	8000b34 <__addsf3>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	627b      	str	r3, [r7, #36]	; 0x24
	  float minMagnitude = offset - magnitude;
 8010bce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010bd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bd2:	f7ef ffad 	bl	8000b30 <__aeabi_fsub>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	623b      	str	r3, [r7, #32]
	  int32_t phasetime = (phase * period) / 255;
 8010bda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bdc:	f7f0 f85a 	bl	8000c94 <__aeabi_ui2f>
 8010be0:	4603      	mov	r3, r0
 8010be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7f0 f8ad 	bl	8000d44 <__aeabi_fmul>
 8010bea:	4603      	mov	r3, r0
 8010bec:	492a      	ldr	r1, [pc, #168]	; (8010c98 <_ZN6HidFFB27SawtoothDownForceCalculatorEP10FFB_Effect+0x134>)
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7f0 f95c 	bl	8000eac <__aeabi_fdiv>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7f0 fa6a 	bl	80010d0 <__aeabi_f2iz>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	61fb      	str	r3, [r7, #28]
	  uint32_t timeTemp = elapsedTime + phasetime;
 8010c00:	69f8      	ldr	r0, [r7, #28]
 8010c02:	f7f0 f84b 	bl	8000c9c <__aeabi_i2f>
 8010c06:	4603      	mov	r3, r0
 8010c08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7ef ff92 	bl	8000b34 <__addsf3>
 8010c10:	4603      	mov	r3, r0
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7f0 fa82 	bl	800111c <__aeabi_f2uiz>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	61bb      	str	r3, [r7, #24]
	  float reminder = timeTemp % period;
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c20:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c26:	fb01 f202 	mul.w	r2, r1, r2
 8010c2a:	1a9b      	subs	r3, r3, r2
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7f0 f831 	bl	8000c94 <__aeabi_ui2f>
 8010c32:	4603      	mov	r3, r0
 8010c34:	617b      	str	r3, [r7, #20]
	  float slope = (maxMagnitude - minMagnitude) / periodF;
 8010c36:	6a39      	ldr	r1, [r7, #32]
 8010c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c3a:	f7ef ff79 	bl	8000b30 <__aeabi_fsub>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7f0 f932 	bl	8000eac <__aeabi_fdiv>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	613b      	str	r3, [r7, #16]
	  float tempforce = 0;
 8010c4c:	f04f 0300 	mov.w	r3, #0
 8010c50:	60fb      	str	r3, [r7, #12]
	  tempforce = slope * (period - reminder);
 8010c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c54:	f7f0 f81e 	bl	8000c94 <__aeabi_ui2f>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	6979      	ldr	r1, [r7, #20]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ef ff67 	bl	8000b30 <__aeabi_fsub>
 8010c62:	4603      	mov	r3, r0
 8010c64:	4619      	mov	r1, r3
 8010c66:	6938      	ldr	r0, [r7, #16]
 8010c68:	f7f0 f86c 	bl	8000d44 <__aeabi_fmul>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	60fb      	str	r3, [r7, #12]
	  tempforce += minMagnitude;
 8010c70:	6a39      	ldr	r1, [r7, #32]
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	f7ef ff5e 	bl	8000b34 <__addsf3>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	60fb      	str	r3, [r7, #12]
	  return ApplyEnvelope(effect, tempforce);
 8010c7c:	68f8      	ldr	r0, [r7, #12]
 8010c7e:	f7f0 fa27 	bl	80010d0 <__aeabi_f2iz>
 8010c82:	4603      	mov	r3, r0
 8010c84:	461a      	mov	r2, r3
 8010c86:	6839      	ldr	r1, [r7, #0]
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f000 f963 	bl	8010f54 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 8010c8e:	4603      	mov	r3, r0
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3740      	adds	r7, #64	; 0x40
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	437f0000 	.word	0x437f0000

08010c9c <_ZN6HidFFB25SawtoothUpForceCalculatorEP10FFB_Effect>:

int32_t HidFFB::SawtoothUpForceCalculator(FFB_Effect *effect)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b090      	sub	sp, #64	; 0x40
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
	  float offset = effect->offset * 2;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8010cac:	005b      	lsls	r3, r3, #1
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7ef fff4 	bl	8000c9c <__aeabi_i2f>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float magnitude = effect->magnitude;
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7ef ffec 	bl	8000c9c <__aeabi_i2f>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	63bb      	str	r3, [r7, #56]	; 0x38
	  float elapsedTime = effect->elapsedTime;
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7ef ffe1 	bl	8000c94 <__aeabi_ui2f>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	637b      	str	r3, [r7, #52]	; 0x34
	  uint32_t phase = effect->phase;
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010cdc:	633b      	str	r3, [r7, #48]	; 0x30
	  uint32_t period = effect->period;
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float periodF = effect->period;
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7ef ffd3 	bl	8000c94 <__aeabi_ui2f>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	62bb      	str	r3, [r7, #40]	; 0x28

	  float maxMagnitude = offset + magnitude;
 8010cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cf4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cf6:	f7ef ff1d 	bl	8000b34 <__addsf3>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24
	  float minMagnitude = offset - magnitude;
 8010cfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d02:	f7ef ff15 	bl	8000b30 <__aeabi_fsub>
 8010d06:	4603      	mov	r3, r0
 8010d08:	623b      	str	r3, [r7, #32]
	  int32_t phasetime = (phase * period) / 255;
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d0e:	fb02 f303 	mul.w	r3, r2, r3
 8010d12:	4a24      	ldr	r2, [pc, #144]	; (8010da4 <_ZN6HidFFB25SawtoothUpForceCalculatorEP10FFB_Effect+0x108>)
 8010d14:	fba2 2303 	umull	r2, r3, r2, r3
 8010d18:	09db      	lsrs	r3, r3, #7
 8010d1a:	61fb      	str	r3, [r7, #28]
	  uint32_t timeTemp = elapsedTime + phasetime;
 8010d1c:	69f8      	ldr	r0, [r7, #28]
 8010d1e:	f7ef ffbd 	bl	8000c9c <__aeabi_i2f>
 8010d22:	4603      	mov	r3, r0
 8010d24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7ef ff04 	bl	8000b34 <__addsf3>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f0 f9f4 	bl	800111c <__aeabi_f2uiz>
 8010d34:	4603      	mov	r3, r0
 8010d36:	61bb      	str	r3, [r7, #24]
	  float reminder = timeTemp % period;
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d42:	fb01 f202 	mul.w	r2, r1, r2
 8010d46:	1a9b      	subs	r3, r3, r2
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ef ffa3 	bl	8000c94 <__aeabi_ui2f>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	617b      	str	r3, [r7, #20]
	  float slope = (maxMagnitude - minMagnitude) / periodF;
 8010d52:	6a39      	ldr	r1, [r7, #32]
 8010d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d56:	f7ef feeb 	bl	8000b30 <__aeabi_fsub>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7f0 f8a4 	bl	8000eac <__aeabi_fdiv>
 8010d64:	4603      	mov	r3, r0
 8010d66:	613b      	str	r3, [r7, #16]
	  float tempforce = 0;
 8010d68:	f04f 0300 	mov.w	r3, #0
 8010d6c:	60fb      	str	r3, [r7, #12]
	  tempforce = slope * reminder;
 8010d6e:	6979      	ldr	r1, [r7, #20]
 8010d70:	6938      	ldr	r0, [r7, #16]
 8010d72:	f7ef ffe7 	bl	8000d44 <__aeabi_fmul>
 8010d76:	4603      	mov	r3, r0
 8010d78:	60fb      	str	r3, [r7, #12]
	  tempforce += minMagnitude;
 8010d7a:	6a39      	ldr	r1, [r7, #32]
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f7ef fed9 	bl	8000b34 <__addsf3>
 8010d82:	4603      	mov	r3, r0
 8010d84:	60fb      	str	r3, [r7, #12]
	  return ApplyEnvelope(effect, tempforce);
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	f7f0 f9a2 	bl	80010d0 <__aeabi_f2iz>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	461a      	mov	r2, r3
 8010d90:	6839      	ldr	r1, [r7, #0]
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f000 f8de 	bl	8010f54 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>
 8010d98:	4603      	mov	r3, r0
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3740      	adds	r7, #64	; 0x40
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	80808081 	.word	0x80808081

08010da8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf>:

int32_t HidFFB::ConditionForceCalculator(FFB_Effect *effect, float metric)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b08a      	sub	sp, #40	; 0x28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	607a      	str	r2, [r7, #4]
	  float deadBand = effect->deadBand;
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7ef ff6b 	bl	8000c94 <__aeabi_ui2f>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	623b      	str	r3, [r7, #32]
	  float cpOffset = effect->cpOffset;
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7ef ff67 	bl	8000c9c <__aeabi_i2f>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	61fb      	str	r3, [r7, #28]
	  float negativeCoefficient = -effect->negativeCoefficient;
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010dd8:	425b      	negs	r3, r3
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7ef ff5e 	bl	8000c9c <__aeabi_i2f>
 8010de0:	4603      	mov	r3, r0
 8010de2:	61bb      	str	r3, [r7, #24]
	  float positiveSaturation = effect->positiveSaturation;
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	899b      	ldrh	r3, [r3, #12]
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7ef ff53 	bl	8000c94 <__aeabi_ui2f>
 8010dee:	4603      	mov	r3, r0
 8010df0:	617b      	str	r3, [r7, #20]
	  float positiveCoefficient = effect->positiveCoefficient;
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7ef ff4f 	bl	8000c9c <__aeabi_i2f>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	613b      	str	r3, [r7, #16]
	  float  tempForce = 0;
 8010e02:	f04f 0300 	mov.w	r3, #0
 8010e06:	627b      	str	r3, [r7, #36]	; 0x24
	  if (metric < (cpOffset - deadBand)) {
 8010e08:	6a39      	ldr	r1, [r7, #32]
 8010e0a:	69f8      	ldr	r0, [r7, #28]
 8010e0c:	f7ef fe90 	bl	8000b30 <__aeabi_fsub>
 8010e10:	4603      	mov	r3, r0
 8010e12:	4619      	mov	r1, r3
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7f0 f933 	bl	8001080 <__aeabi_fcmplt>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d015      	beq.n	8010e4c <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xa4>
	    tempForce = ((float)1.00 * (cpOffset - deadBand) / 10000 - metric) * negativeCoefficient;
 8010e20:	6a39      	ldr	r1, [r7, #32]
 8010e22:	69f8      	ldr	r0, [r7, #28]
 8010e24:	f7ef fe84 	bl	8000b30 <__aeabi_fsub>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	493d      	ldr	r1, [pc, #244]	; (8010f20 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x178>)
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7f0 f83d 	bl	8000eac <__aeabi_fdiv>
 8010e32:	4603      	mov	r3, r0
 8010e34:	6879      	ldr	r1, [r7, #4]
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7ef fe7a 	bl	8000b30 <__aeabi_fsub>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	4619      	mov	r1, r3
 8010e40:	69b8      	ldr	r0, [r7, #24]
 8010e42:	f7ef ff7f 	bl	8000d44 <__aeabi_fmul>
 8010e46:	4603      	mov	r3, r0
 8010e48:	627b      	str	r3, [r7, #36]	; 0x24
 8010e4a:	e02b      	b.n	8010ea4 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xfc>
	  }
	  else if (metric > (cpOffset + deadBand)) {
 8010e4c:	6a39      	ldr	r1, [r7, #32]
 8010e4e:	69f8      	ldr	r0, [r7, #28]
 8010e50:	f7ef fe70 	bl	8000b34 <__addsf3>
 8010e54:	4603      	mov	r3, r0
 8010e56:	4619      	mov	r1, r3
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7f0 f92f 	bl	80010bc <__aeabi_fcmpgt>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d01f      	beq.n	8010ea4 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xfc>
	    tempForce = (metric - (float)1.00 * (cpOffset + deadBand) / 10000) * positiveCoefficient;
 8010e64:	6a39      	ldr	r1, [r7, #32]
 8010e66:	69f8      	ldr	r0, [r7, #28]
 8010e68:	f7ef fe64 	bl	8000b34 <__addsf3>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	492c      	ldr	r1, [pc, #176]	; (8010f20 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x178>)
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7f0 f81b 	bl	8000eac <__aeabi_fdiv>
 8010e76:	4603      	mov	r3, r0
 8010e78:	4619      	mov	r1, r3
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f7ef fe58 	bl	8000b30 <__aeabi_fsub>
 8010e80:	4603      	mov	r3, r0
 8010e82:	4619      	mov	r1, r3
 8010e84:	6938      	ldr	r0, [r7, #16]
 8010e86:	f7ef ff5d 	bl	8000d44 <__aeabi_fmul>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	627b      	str	r3, [r7, #36]	; 0x24
	    tempForce = (tempForce > positiveSaturation ? positiveSaturation : tempForce);
 8010e8e:	6979      	ldr	r1, [r7, #20]
 8010e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e92:	f7f0 f913 	bl	80010bc <__aeabi_fcmpgt>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d001      	beq.n	8010ea0 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xf8>
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	e000      	b.n	8010ea2 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0xfa>
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea2:	627b      	str	r3, [r7, #36]	; 0x24
	  }
	  tempForce = tempForce * effect->gain / 255;
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	789b      	ldrb	r3, [r3, #2]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7ef fef7 	bl	8000c9c <__aeabi_i2f>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7ef ff46 	bl	8000d44 <__aeabi_fmul>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	491a      	ldr	r1, [pc, #104]	; (8010f24 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x17c>)
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ef fff5 	bl	8000eac <__aeabi_fdiv>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	627b      	str	r3, [r7, #36]	; 0x24
	  switch (effect->type) {
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	785b      	ldrb	r3, [r3, #1]
 8010eca:	2b0a      	cmp	r3, #10
 8010ecc:	d00d      	beq.n	8010eea <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x142>
 8010ece:	2b0b      	cmp	r3, #11
 8010ed0:	d014      	beq.n	8010efc <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x154>
 8010ed2:	2b09      	cmp	r3, #9
 8010ed4:	d000      	beq.n	8010ed8 <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x130>
	      break;
	    case FFB_EFFECT_FRICTION:
	      tempForce = frictionFilter.filterIn(tempForce);
	      break;
	    default:
	      break;
 8010ed6:	e01a      	b.n	8010f0e <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x166>
	      tempForce = damperFilter.filterIn(tempForce);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 8010ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fd fbea 	bl	800e6ba <_ZN7Filters8filterInEf>
 8010ee6:	6278      	str	r0, [r7, #36]	; 0x24
	      break;
 8010ee8:	e011      	b.n	8010f0e <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x166>
	      tempForce = interiaFilter.filterIn(tempForce);
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8010ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fd fbe1 	bl	800e6ba <_ZN7Filters8filterInEf>
 8010ef8:	6278      	str	r0, [r7, #36]	; 0x24
	      break;
 8010efa:	e008      	b.n	8010f0e <_ZN6HidFFB24ConditionForceCalculatorEP10FFB_Effectf+0x166>
	      tempForce = frictionFilter.filterIn(tempForce);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8010f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fd fbd8 	bl	800e6ba <_ZN7Filters8filterInEf>
 8010f0a:	6278      	str	r0, [r7, #36]	; 0x24
	      break;
 8010f0c:	bf00      	nop
	  }

	  return (int32_t) tempForce;
 8010f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f10:	f7f0 f8de 	bl	80010d0 <__aeabi_f2iz>
 8010f14:	4603      	mov	r3, r0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3728      	adds	r7, #40	; 0x28
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	461c4000 	.word	0x461c4000
 8010f24:	437f0000 	.word	0x437f0000

08010f28 <_ZN6HidFFB9ApplyGainEmh>:

int32_t HidFFB::ApplyGain(uint32_t value, uint8_t gain)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b085      	sub	sp, #20
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	4613      	mov	r3, r2
 8010f34:	71fb      	strb	r3, [r7, #7]
	  return ((value * gain) / 255);
 8010f36:	79fb      	ldrb	r3, [r7, #7]
 8010f38:	68ba      	ldr	r2, [r7, #8]
 8010f3a:	fb02 f303 	mul.w	r3, r2, r3
 8010f3e:	4a04      	ldr	r2, [pc, #16]	; (8010f50 <_ZN6HidFFB9ApplyGainEmh+0x28>)
 8010f40:	fba2 2303 	umull	r2, r3, r2, r3
 8010f44:	09db      	lsrs	r3, r3, #7
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3714      	adds	r7, #20
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bc80      	pop	{r7}
 8010f4e:	4770      	bx	lr
 8010f50:	80808081 	.word	0x80808081

08010f54 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl>:

int32_t HidFFB::ApplyEnvelope(FFB_Effect* effect, int32_t value)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b08e      	sub	sp, #56	; 0x38
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	607a      	str	r2, [r7, #4]
	  int32_t magnitude = ApplyGain(effect->magnitude, effect->gain);
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010f66:	4619      	mov	r1, r3
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	789b      	ldrb	r3, [r3, #2]
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	f7ff ffda 	bl	8010f28 <_ZN6HidFFB9ApplyGainEmh>
 8010f74:	6338      	str	r0, [r7, #48]	; 0x30
	  int32_t attackLevel = ApplyGain(effect->attackLevel, effect->gain);
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	789b      	ldrb	r3, [r3, #2]
 8010f82:	461a      	mov	r2, r3
 8010f84:	68f8      	ldr	r0, [r7, #12]
 8010f86:	f7ff ffcf 	bl	8010f28 <_ZN6HidFFB9ApplyGainEmh>
 8010f8a:	62f8      	str	r0, [r7, #44]	; 0x2c
	  int32_t fadeLevel = ApplyGain(effect->fadeLevel, effect->gain);
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010f92:	4619      	mov	r1, r3
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	789b      	ldrb	r3, [r3, #2]
 8010f98:	461a      	mov	r2, r3
 8010f9a:	68f8      	ldr	r0, [r7, #12]
 8010f9c:	f7ff ffc4 	bl	8010f28 <_ZN6HidFFB9ApplyGainEmh>
 8010fa0:	62b8      	str	r0, [r7, #40]	; 0x28
	  int32_t newValue = magnitude;
 8010fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa4:	637b      	str	r3, [r7, #52]	; 0x34
	  int32_t attackTime = effect->attackTime;
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010faa:	627b      	str	r3, [r7, #36]	; 0x24
	  int32_t fadeTime = effect->fadeTime;
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010fb0:	623b      	str	r3, [r7, #32]
	  int32_t elapsedTime = effect->elapsedTime;
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010fb6:	61fb      	str	r3, [r7, #28]
	  int32_t duration = effect->duration;
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010fbc:	61bb      	str	r3, [r7, #24]

	  if (elapsedTime < attackTime)
 8010fbe:	69fa      	ldr	r2, [r7, #28]
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	da0f      	bge.n	8010fe6 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl+0x92>
	  {
	    newValue = (magnitude - attackLevel) * elapsedTime;
 8010fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	1ad2      	subs	r2, r2, r3
 8010fcc:	69fb      	ldr	r3, [r7, #28]
 8010fce:	fb02 f303 	mul.w	r3, r2, r3
 8010fd2:	637b      	str	r3, [r7, #52]	; 0x34
	    newValue /= attackTime;
 8010fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8010fdc:	637b      	str	r3, [r7, #52]	; 0x34
	    newValue += attackLevel;
 8010fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe2:	4413      	add	r3, r2
 8010fe4:	637b      	str	r3, [r7, #52]	; 0x34
	  }
	  if (elapsedTime > (duration - fadeTime))
 8010fe6:	69ba      	ldr	r2, [r7, #24]
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	69fa      	ldr	r2, [r7, #28]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	dd11      	ble.n	8011016 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl+0xc2>
	  {
	    newValue = (magnitude - fadeLevel) * (duration - elapsedTime);
 8010ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff6:	1ad3      	subs	r3, r2, r3
 8010ff8:	69b9      	ldr	r1, [r7, #24]
 8010ffa:	69fa      	ldr	r2, [r7, #28]
 8010ffc:	1a8a      	subs	r2, r1, r2
 8010ffe:	fb02 f303 	mul.w	r3, r2, r3
 8011002:	637b      	str	r3, [r7, #52]	; 0x34
	    newValue /= fadeTime;
 8011004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011006:	6a3b      	ldr	r3, [r7, #32]
 8011008:	fb92 f3f3 	sdiv	r3, r2, r3
 801100c:	637b      	str	r3, [r7, #52]	; 0x34
	    newValue += fadeLevel;
 801100e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	4413      	add	r3, r2
 8011014:	637b      	str	r3, [r7, #52]	; 0x34
	  }
	  float scale = (float)value / (int32_t)0x7fff;
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ef fe40 	bl	8000c9c <__aeabi_i2f>
 801101c:	4603      	mov	r3, r0
 801101e:	490c      	ldr	r1, [pc, #48]	; (8011050 <_ZN6HidFFB13ApplyEnvelopeEP10FFB_Effectl+0xfc>)
 8011020:	4618      	mov	r0, r3
 8011022:	f7ef ff43 	bl	8000eac <__aeabi_fdiv>
 8011026:	4603      	mov	r3, r0
 8011028:	617b      	str	r3, [r7, #20]
	  float fvalue = scale * newValue;
 801102a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801102c:	f7ef fe36 	bl	8000c9c <__aeabi_i2f>
 8011030:	4603      	mov	r3, r0
 8011032:	4619      	mov	r1, r3
 8011034:	6978      	ldr	r0, [r7, #20]
 8011036:	f7ef fe85 	bl	8000d44 <__aeabi_fmul>
 801103a:	4603      	mov	r3, r0
 801103c:	613b      	str	r3, [r7, #16]

	  return (int32_t)fvalue;
 801103e:	6938      	ldr	r0, [r7, #16]
 8011040:	f7f0 f846 	bl	80010d0 <__aeabi_f2iz>
 8011044:	4603      	mov	r3, r0
}
 8011046:	4618      	mov	r0, r3
 8011048:	3738      	adds	r7, #56	; 0x38
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	46fffe00 	.word	0x46fffe00

08011054 <_ZN6HidFFB14NormalizeRangeEll>:

float HidFFB::NormalizeRange(int32_t x, int32_t maxValue)
{
 8011054:	b5b0      	push	{r4, r5, r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	607a      	str	r2, [r7, #4]
	  return (float)x * 1.00 / maxValue;
 8011060:	68b8      	ldr	r0, [r7, #8]
 8011062:	f7ef fe1b 	bl	8000c9c <__aeabi_i2f>
 8011066:	4603      	mov	r3, r0
 8011068:	4618      	mov	r0, r3
 801106a:	f7ef f9dd 	bl	8000428 <__aeabi_f2d>
 801106e:	4604      	mov	r4, r0
 8011070:	460d      	mov	r5, r1
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f7ef f9c6 	bl	8000404 <__aeabi_i2d>
 8011078:	4602      	mov	r2, r0
 801107a:	460b      	mov	r3, r1
 801107c:	4620      	mov	r0, r4
 801107e:	4629      	mov	r1, r5
 8011080:	f7ef fb54 	bl	800072c <__aeabi_ddiv>
 8011084:	4603      	mov	r3, r0
 8011086:	460c      	mov	r4, r1
 8011088:	4618      	mov	r0, r3
 801108a:	4621      	mov	r1, r4
 801108c:	f7ef fcfc 	bl	8000a88 <__aeabi_d2f>
 8011090:	4603      	mov	r3, r0
}
 8011092:	4618      	mov	r0, r3
 8011094:	3710      	adds	r7, #16
 8011096:	46bd      	mov	sp, r7
 8011098:	bdb0      	pop	{r4, r5, r7, pc}

0801109a <_ZN6HidFFB10set_configEP14FFBWheelConfig>:

void HidFFB::set_config(FFBWheelConfig *conf)
{
 801109a:	b480      	push	{r7}
 801109c:	b083      	sub	sp, #12
 801109e:	af00      	add	r7, sp, #0
 80110a0:	6078      	str	r0, [r7, #4]
 80110a2:	6039      	str	r1, [r7, #0]
	this->conf = conf;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	683a      	ldr	r2, [r7, #0]
 80110a8:	621a      	str	r2, [r3, #32]
}
 80110aa:	bf00      	nop
 80110ac:	370c      	adds	r7, #12
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bc80      	pop	{r7}
 80110b2:	4770      	bx	lr

080110b4 <_ZN12LocalButtonsC1Ev>:
 *      Author: Yannick
 */

#include <LocalButtons.h>

LocalButtons::LocalButtons() {
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af02      	add	r7, sp, #8
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	4a18      	ldr	r2, [pc, #96]	; (8011120 <_ZN12LocalButtonsC1Ev+0x6c>)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2201      	movs	r2, #1
 80110c6:	809a      	strh	r2, [r3, #4]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2201      	movs	r2, #1
 80110cc:	80da      	strh	r2, [r3, #6]
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2208      	movs	r2, #8
 80110d2:	811a      	strh	r2, [r3, #8]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	4a13      	ldr	r2, [pc, #76]	; (8011124 <_ZN12LocalButtonsC1Ev+0x70>)
 80110d8:	60da      	str	r2, [r3, #12]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2227      	movs	r2, #39	; 0x27
 80110de:	74da      	strb	r2, [r3, #19]
	//Initialize I2C buttons
	button_buf[0] = 0xff;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	22ff      	movs	r2, #255	; 0xff
 80110e4:	741a      	strb	r2, [r3, #16]
	button_buf[1] = 0xff;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	22ff      	movs	r2, #255	; 0xff
 80110ea:	745a      	strb	r2, [r3, #17]

	I2C_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f103 0210 	add.w	r2, r3, #16
 80110f2:	230a      	movs	r3, #10
 80110f4:	9300      	str	r3, [sp, #0]
 80110f6:	2302      	movs	r3, #2
 80110f8:	214e      	movs	r1, #78	; 0x4e
 80110fa:	480b      	ldr	r0, [pc, #44]	; (8011128 <_ZN12LocalButtonsC1Ev+0x74>)
 80110fc:	f7f2 fb96 	bl	800382c <HAL_I2C_Master_Transmit>
 8011100:	4603      	mov	r3, r0
 8011102:	461a      	mov	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	751a      	strb	r2, [r3, #20]
	if ( I2C_status != HAL_OK ) {
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d001      	beq.n	8011114 <_ZN12LocalButtonsC1Ev+0x60>
		pulseSysLed();
 8011110:	f001 fb26 	bl	8012760 <_Z11pulseSysLedv>
	}

}
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	4618      	mov	r0, r3
 8011118:	3708      	adds	r7, #8
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	08018cb4 	.word	0x08018cb4
 8011124:	40010c00 	.word	0x40010c00
 8011128:	20001594 	.word	0x20001594

0801112c <_ZN12LocalButtonsD1Ev>:

LocalButtons::~LocalButtons() {
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	4a04      	ldr	r2, [pc, #16]	; (8011148 <_ZN12LocalButtonsD1Ev+0x1c>)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4618      	mov	r0, r3
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	bc80      	pop	{r7}
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop
 8011148:	08018cb4 	.word	0x08018cb4

0801114c <_ZN12LocalButtonsD0Ev>:
LocalButtons::~LocalButtons() {
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
}
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7ff ffe9 	bl	801112c <_ZN12LocalButtonsD1Ev>
 801115a:	2118      	movs	r1, #24
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f004 f8a7 	bl	80152b0 <_ZdlPvj>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	4618      	mov	r0, r3
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <_ZN12LocalButtons11readButtonsEPm>:


void LocalButtons::readButtons(uint32_t* buf){
 801116c:	b580      	push	{r7, lr}
 801116e:	b086      	sub	sp, #24
 8011170:	af02      	add	r7, sp, #8
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6039      	str	r1, [r7, #0]
	I2C_status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(0x27<<1), button_buf, 2, 10);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f103 0210 	add.w	r2, r3, #16
 801117c:	230a      	movs	r3, #10
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	2302      	movs	r3, #2
 8011182:	214e      	movs	r1, #78	; 0x4e
 8011184:	482b      	ldr	r0, [pc, #172]	; (8011234 <_ZN12LocalButtons11readButtonsEPm+0xc8>)
 8011186:	f7f2 fc4f 	bl	8003a28 <HAL_I2C_Master_Receive>
 801118a:	4603      	mov	r3, r0
 801118c:	461a      	mov	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	751a      	strb	r2, [r3, #20]
	if(I2C_status == HAL_OK)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	7d1b      	ldrb	r3, [r3, #20]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d11e      	bne.n	80111d8 <_ZN12LocalButtons11readButtonsEPm+0x6c>
	{
		button_buf[0]=~button_buf[0];
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	7c1b      	ldrb	r3, [r3, #16]
 801119e:	43db      	mvns	r3, r3
 80111a0:	b2da      	uxtb	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	741a      	strb	r2, [r3, #16]
		button_buf[1]=~button_buf[1];
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	7c5b      	ldrb	r3, [r3, #17]
 80111aa:	43db      	mvns	r3, r3
 80111ac:	b2da      	uxtb	r2, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	745a      	strb	r2, [r3, #17]
		*buf |= button_buf[0];
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	7c12      	ldrb	r2, [r2, #16]
 80111ba:	431a      	orrs	r2, r3
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	601a      	str	r2, [r3, #0]
		*buf <<= 8;
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	021a      	lsls	r2, r3, #8
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	601a      	str	r2, [r3, #0]
		*buf |= button_buf[1];
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	7c52      	ldrb	r2, [r2, #17]
 80111d2:	431a      	orrs	r2, r3
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	601a      	str	r2, [r3, #0]
	}
	uint8_t buttons = this->nButtons;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	88db      	ldrh	r3, [r3, #6]
 80111dc:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0;i<buttons;i++){
 80111de:	2300      	movs	r3, #0
 80111e0:	73fb      	strb	r3, [r7, #15]
 80111e2:	7bfa      	ldrb	r2, [r7, #15]
 80111e4:	7bbb      	ldrb	r3, [r7, #14]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d220      	bcs.n	801122c <_ZN12LocalButtons11readButtonsEPm+0xc0>
		*buf |= !HAL_GPIO_ReadPin(button_ports[i],button_pins[i]) << (i + 16);
 80111ea:	7bfb      	ldrb	r3, [r7, #15]
 80111ec:	687a      	ldr	r2, [r7, #4]
 80111ee:	3302      	adds	r3, #2
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	4413      	add	r3, r2
 80111f4:	6858      	ldr	r0, [r3, #4]
 80111f6:	7bfa      	ldrb	r2, [r7, #15]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3204      	adds	r2, #4
 80111fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011200:	4619      	mov	r1, r3
 8011202:	f7f2 f98b 	bl	800351c <HAL_GPIO_ReadPin>
 8011206:	4603      	mov	r3, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	bf0c      	ite	eq
 801120c:	2301      	moveq	r3, #1
 801120e:	2300      	movne	r3, #0
 8011210:	b2db      	uxtb	r3, r3
 8011212:	461a      	mov	r2, r3
 8011214:	7bfb      	ldrb	r3, [r7, #15]
 8011216:	3310      	adds	r3, #16
 8011218:	409a      	lsls	r2, r3
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	431a      	orrs	r2, r3
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0;i<buttons;i++){
 8011224:	7bfb      	ldrb	r3, [r7, #15]
 8011226:	3301      	adds	r3, #1
 8011228:	73fb      	strb	r3, [r7, #15]
 801122a:	e7da      	b.n	80111e2 <_ZN12LocalButtons11readButtonsEPm+0x76>
	}
}
 801122c:	bf00      	nop
 801122e:	3710      	adds	r7, #16
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	20001594 	.word	0x20001594

08011238 <_ZN12MotorBTS79604turnEs>:
#include <MotorBTS7960.h>

void MotorBTS7960::turn(int16_t power){
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	460b      	mov	r3, r1
 8011242:	807b      	strh	r3, [r7, #2]
	if(!active)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	7a1b      	ldrb	r3, [r3, #8]
 8011248:	f083 0301 	eor.w	r3, r3, #1
 801124c:	b2db      	uxtb	r3, r3
 801124e:	2b00      	cmp	r3, #0
 8011250:	d12b      	bne.n	80112aa <_ZN12MotorBTS79604turnEs+0x72>
		return;

	int32_t val = (uint32_t)((abs(power) * period)/0x7fff);
 8011252:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011256:	2b00      	cmp	r3, #0
 8011258:	bfb8      	it	lt
 801125a:	425b      	neglt	r3, r3
 801125c:	461a      	mov	r2, r3
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	fb03 f202 	mul.w	r2, r3, r2
 8011266:	4b13      	ldr	r3, [pc, #76]	; (80112b4 <_ZN12MotorBTS79604turnEs+0x7c>)
 8011268:	fba3 1302 	umull	r1, r3, r3, r2
 801126c:	1ad2      	subs	r2, r2, r3
 801126e:	0852      	lsrs	r2, r2, #1
 8011270:	4413      	add	r3, r2
 8011272:	0b9b      	lsrs	r3, r3, #14
 8011274:	60fb      	str	r3, [r7, #12]

	if(power < 0){
 8011276:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801127a:	2b00      	cmp	r3, #0
 801127c:	da0a      	bge.n	8011294 <_ZN12MotorBTS79604turnEs+0x5c>
		timer->Instance->CCR1 = 0;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	695b      	ldr	r3, [r3, #20]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	2200      	movs	r2, #0
 8011286:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR2 = val;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	695b      	ldr	r3, [r3, #20]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	68fa      	ldr	r2, [r7, #12]
 8011290:	639a      	str	r2, [r3, #56]	; 0x38
 8011292:	e00b      	b.n	80112ac <_ZN12MotorBTS79604turnEs+0x74>
	}else{
		timer->Instance->CCR1 = val;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	695b      	ldr	r3, [r3, #20]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR2 = 0;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	695b      	ldr	r3, [r3, #20]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	2200      	movs	r2, #0
 80112a6:	639a      	str	r2, [r3, #56]	; 0x38
 80112a8:	e000      	b.n	80112ac <_ZN12MotorBTS79604turnEs+0x74>
		return;
 80112aa:	bf00      	nop
	}

}
 80112ac:	3714      	adds	r7, #20
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bc80      	pop	{r7}
 80112b2:	4770      	bx	lr
 80112b4:	00020005 	.word	0x00020005

080112b8 <_ZN12MotorBTS7960C1Ev>:

MotorBTS7960::MotorBTS7960() {
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	4a18      	ldr	r2, [pc, #96]	; (8011324 <_ZN12MotorBTS7960C1Ev+0x6c>)
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	601a      	str	r2, [r3, #0]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f640 620f 	movw	r2, #3599	; 0xe0f
 80112cc:	605a      	str	r2, [r3, #4]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2200      	movs	r2, #0
 80112d2:	721a      	strb	r2, [r3, #8]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	60da      	str	r2, [r3, #12]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2204      	movs	r2, #4
 80112de:	611a      	str	r2, [r3, #16]
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	4a11      	ldr	r2, [pc, #68]	; (8011328 <_ZN12MotorBTS7960C1Ev+0x70>)
 80112e4:	615a      	str	r2, [r3, #20]
	timer->Instance->CCR1 = 0;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	695b      	ldr	r3, [r3, #20]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	2200      	movs	r2, #0
 80112ee:	635a      	str	r2, [r3, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	695b      	ldr	r3, [r3, #20]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2200      	movs	r2, #0
 80112f8:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(timer, channel1);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	695a      	ldr	r2, [r3, #20]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	4619      	mov	r1, r3
 8011304:	4610      	mov	r0, r2
 8011306:	f7f4 fce7 	bl	8005cd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, channel2);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	695a      	ldr	r2, [r3, #20]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	691b      	ldr	r3, [r3, #16]
 8011312:	4619      	mov	r1, r3
 8011314:	4610      	mov	r0, r2
 8011316:	f7f4 fcdf 	bl	8005cd8 <HAL_TIM_PWM_Start>
}
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	4618      	mov	r0, r3
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	08018cc4 	.word	0x08018cc4
 8011328:	2000169c 	.word	0x2000169c

0801132c <_ZN12MotorBTS7960D1Ev>:

MotorBTS7960::~MotorBTS7960() {
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	4a0b      	ldr	r2, [pc, #44]	; (8011364 <_ZN12MotorBTS7960D1Ev+0x38>)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(timer, channel1);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	695a      	ldr	r2, [r3, #20]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	4619      	mov	r1, r3
 8011344:	4610      	mov	r0, r2
 8011346:	f7f4 fcf9 	bl	8005d3c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer, channel2);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	695a      	ldr	r2, [r3, #20]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	691b      	ldr	r3, [r3, #16]
 8011352:	4619      	mov	r1, r3
 8011354:	4610      	mov	r0, r2
 8011356:	f7f4 fcf1 	bl	8005d3c <HAL_TIM_PWM_Stop>
}
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	08018cc4 	.word	0x08018cc4

08011368 <_ZN12MotorBTS7960D0Ev>:
MotorBTS7960::~MotorBTS7960() {
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
}
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f7ff ffdb 	bl	801132c <_ZN12MotorBTS7960D1Ev>
 8011376:	2118      	movs	r1, #24
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f003 ff99 	bl	80152b0 <_ZdlPvj>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	4618      	mov	r0, r3
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <_ZN12MotorBTS79605startEv>:


void MotorBTS7960::start(){
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
	active = true;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2201      	movs	r2, #1
 8011394:	721a      	strb	r2, [r3, #8]
}
 8011396:	bf00      	nop
 8011398:	370c      	adds	r7, #12
 801139a:	46bd      	mov	sp, r7
 801139c:	bc80      	pop	{r7}
 801139e:	4770      	bx	lr

080113a0 <_ZN12MotorBTS79604stopEv>:

void MotorBTS7960::stop(){
 80113a0:	b480      	push	{r7}
 80113a2:	b083      	sub	sp, #12
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
	active = false;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2200      	movs	r2, #0
 80113ac:	721a      	strb	r2, [r3, #8]
	timer->Instance->CCR1 = 0;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	695b      	ldr	r3, [r3, #20]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2200      	movs	r2, #0
 80113b6:	635a      	str	r2, [r3, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	695b      	ldr	r3, [r3, #20]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	2200      	movs	r2, #0
 80113c0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80113c2:	bf00      	nop
 80113c4:	370c      	adds	r7, #12
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bc80      	pop	{r7}
 80113ca:	4770      	bx	lr

080113cc <_ZN12TimerHandlerC1Ev>:
#include "TimerHandler.h"

TimerHandler::TimerHandler() {
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	4a07      	ldr	r2, [pc, #28]	; (80113f4 <_ZN12TimerHandlerC1Ev+0x28>)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	601a      	str	r2, [r3, #0]
	extern std::vector<TimerHandler*> timerHandlers;
	timerHandlers.push_back(this);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	60fb      	str	r3, [r7, #12]
 80113de:	f107 030c 	add.w	r3, r7, #12
 80113e2:	4619      	mov	r1, r3
 80113e4:	4804      	ldr	r0, [pc, #16]	; (80113f8 <_ZN12TimerHandlerC1Ev+0x2c>)
 80113e6:	f000 f879 	bl	80114dc <_ZNSt6vectorIP12TimerHandlerSaIS1_EE9push_backEOS1_>

}
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4618      	mov	r0, r3
 80113ee:	3710      	adds	r7, #16
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	08018cd4 	.word	0x08018cd4
 80113f8:	20000b6c 	.word	0x20000b6c

080113fc <_ZN12TimerHandlerD1Ev>:

TimerHandler::~TimerHandler() {
 80113fc:	b590      	push	{r4, r7, lr}
 80113fe:	b087      	sub	sp, #28
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	4a21      	ldr	r2, [pc, #132]	; (801148c <_ZN12TimerHandlerD1Ev+0x90>)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	601a      	str	r2, [r3, #0]
	extern std::vector<TimerHandler*> timerHandlers;
	for (uint8_t i = 0; i < timerHandlers.size(); i++){
 801140a:	2300      	movs	r3, #0
 801140c:	75fb      	strb	r3, [r7, #23]
 801140e:	7dfc      	ldrb	r4, [r7, #23]
 8011410:	481f      	ldr	r0, [pc, #124]	; (8011490 <_ZN12TimerHandlerD1Ev+0x94>)
 8011412:	f000 f874 	bl	80114fe <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011416:	4603      	mov	r3, r0
 8011418:	429c      	cmp	r4, r3
 801141a:	bf34      	ite	cc
 801141c:	2301      	movcc	r3, #1
 801141e:	2300      	movcs	r3, #0
 8011420:	b2db      	uxtb	r3, r3
 8011422:	2b00      	cmp	r3, #0
 8011424:	d02d      	beq.n	8011482 <_ZN12TimerHandlerD1Ev+0x86>
		if(timerHandlers[i] == this){
 8011426:	7dfb      	ldrb	r3, [r7, #23]
 8011428:	4619      	mov	r1, r3
 801142a:	4819      	ldr	r0, [pc, #100]	; (8011490 <_ZN12TimerHandlerD1Ev+0x94>)
 801142c:	f000 f877 	bl	801151e <_ZNSt6vectorIP12TimerHandlerSaIS1_EEixEj>
 8011430:	4603      	mov	r3, r0
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	429a      	cmp	r2, r3
 8011438:	bf0c      	ite	eq
 801143a:	2301      	moveq	r3, #1
 801143c:	2300      	movne	r3, #0
 801143e:	b2db      	uxtb	r3, r3
 8011440:	2b00      	cmp	r3, #0
 8011442:	d01a      	beq.n	801147a <_ZN12TimerHandlerD1Ev+0x7e>
			timerHandlers.erase(timerHandlers.begin()+i);
 8011444:	4812      	ldr	r0, [pc, #72]	; (8011490 <_ZN12TimerHandlerD1Ev+0x94>)
 8011446:	f000 f879 	bl	801153c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 801144a:	4603      	mov	r3, r0
 801144c:	613b      	str	r3, [r7, #16]
 801144e:	7dfa      	ldrb	r2, [r7, #23]
 8011450:	f107 0310 	add.w	r3, r7, #16
 8011454:	4611      	mov	r1, r2
 8011456:	4618      	mov	r0, r3
 8011458:	f000 f880 	bl	801155c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 801145c:	4603      	mov	r3, r0
 801145e:	60fb      	str	r3, [r7, #12]
 8011460:	f107 020c 	add.w	r2, r7, #12
 8011464:	f107 0308 	add.w	r3, r7, #8
 8011468:	4611      	mov	r1, r2
 801146a:	4618      	mov	r0, r3
 801146c:	f000 f88e 	bl	801158c <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 8011470:	68b9      	ldr	r1, [r7, #8]
 8011472:	4807      	ldr	r0, [pc, #28]	; (8011490 <_ZN12TimerHandlerD1Ev+0x94>)
 8011474:	f000 f89b 	bl	80115ae <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 8011478:	e003      	b.n	8011482 <_ZN12TimerHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < timerHandlers.size(); i++){
 801147a:	7dfb      	ldrb	r3, [r7, #23]
 801147c:	3301      	adds	r3, #1
 801147e:	75fb      	strb	r3, [r7, #23]
 8011480:	e7c5      	b.n	801140e <_ZN12TimerHandlerD1Ev+0x12>
		}
	}
}
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4618      	mov	r0, r3
 8011486:	371c      	adds	r7, #28
 8011488:	46bd      	mov	sp, r7
 801148a:	bd90      	pop	{r4, r7, pc}
 801148c:	08018cd4 	.word	0x08018cd4
 8011490:	20000b6c 	.word	0x20000b6c

08011494 <_ZN12TimerHandlerD0Ev>:
TimerHandler::~TimerHandler() {
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
}
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f7ff ffad 	bl	80113fc <_ZN12TimerHandlerD1Ev>
 80114a2:	2104      	movs	r1, #4
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f003 ff03 	bl	80152b0 <_ZdlPvj>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4618      	mov	r0, r3
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <_ZN12TimerHandler12timerElapsedEP17TIM_HandleTypeDef>:

void TimerHandler::timerElapsed(TIM_HandleTypeDef* htim){
 80114b4:	b480      	push	{r7}
 80114b6:	b083      	sub	sp, #12
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]

}
 80114be:	bf00      	nop
 80114c0:	370c      	adds	r7, #12
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bc80      	pop	{r7}
 80114c6:	4770      	bx	lr

080114c8 <_ZSt4moveIRP12TimerHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	4618      	mov	r0, r3
 80114d4:	370c      	adds	r7, #12
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bc80      	pop	{r7}
 80114da:	4770      	bx	lr

080114dc <_ZNSt6vectorIP12TimerHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80114e6:	6838      	ldr	r0, [r7, #0]
 80114e8:	f7ff ffee 	bl	80114c8 <_ZSt4moveIRP12TimerHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80114ec:	4603      	mov	r3, r0
 80114ee:	4619      	mov	r1, r3
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f000 f88d 	bl	8011610 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 80114f6:	bf00      	nop
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}

080114fe <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80114fe:	b480      	push	{r7}
 8011500:	b083      	sub	sp, #12
 8011502:	af00      	add	r7, sp, #0
 8011504:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	461a      	mov	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	1ad3      	subs	r3, r2, r3
 8011512:	109b      	asrs	r3, r3, #2
 8011514:	4618      	mov	r0, r3
 8011516:	370c      	adds	r7, #12
 8011518:	46bd      	mov	sp, r7
 801151a:	bc80      	pop	{r7}
 801151c:	4770      	bx	lr

0801151e <_ZNSt6vectorIP12TimerHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 801151e:	b480      	push	{r7}
 8011520:	b083      	sub	sp, #12
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
 8011526:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	009b      	lsls	r3, r3, #2
 8011530:	4413      	add	r3, r2
      }
 8011532:	4618      	mov	r0, r3
 8011534:	370c      	adds	r7, #12
 8011536:	46bd      	mov	sp, r7
 8011538:	bc80      	pop	{r7}
 801153a:	4770      	bx	lr

0801153c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801153c:	b580      	push	{r7, lr}
 801153e:	b084      	sub	sp, #16
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	f107 030c 	add.w	r3, r7, #12
 801154a:	4611      	mov	r1, r2
 801154c:	4618      	mov	r0, r3
 801154e:	f000 f88d 	bl	801166c <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	4618      	mov	r0, r3
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	4413      	add	r3, r2
 8011570:	60fb      	str	r3, [r7, #12]
 8011572:	f107 020c 	add.w	r2, r7, #12
 8011576:	f107 0308 	add.w	r3, r7, #8
 801157a:	4611      	mov	r1, r2
 801157c:	4618      	mov	r0, r3
 801157e:	f000 f875 	bl	801166c <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	4618      	mov	r0, r3
 8011586:	3710      	adds	r7, #16
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8011596:	6838      	ldr	r0, [r7, #0]
 8011598:	f000 f877 	bl	801168a <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 801159c:	4603      	mov	r3, r0
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	601a      	str	r2, [r3, #0]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4618      	mov	r0, r3
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}

080115ae <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 80115ae:	b580      	push	{r7, lr}
 80115b0:	b084      	sub	sp, #16
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
 80115b6:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7ff ffbf 	bl	801153c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 80115be:	4603      	mov	r3, r0
 80115c0:	60bb      	str	r3, [r7, #8]
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f000 f86b 	bl	801169e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE6cbeginEv>
 80115c8:	4603      	mov	r3, r0
 80115ca:	60fb      	str	r3, [r7, #12]
 80115cc:	f107 020c 	add.w	r2, r7, #12
 80115d0:	463b      	mov	r3, r7
 80115d2:	4611      	mov	r1, r2
 80115d4:	4618      	mov	r0, r3
 80115d6:	f000 f876 	bl	80116c6 <_ZN9__gnu_cxxmiIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 80115da:	4602      	mov	r2, r0
 80115dc:	f107 0308 	add.w	r3, r7, #8
 80115e0:	4611      	mov	r1, r2
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7ff ffba 	bl	801155c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 80115e8:	4603      	mov	r3, r0
 80115ea:	4619      	mov	r1, r3
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f000 f880 	bl	80116f2 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 80115f2:	4603      	mov	r3, r0
 80115f4:	4618      	mov	r0, r3
 80115f6:	3710      	adds	r7, #16
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80115fc:	b480      	push	{r7}
 80115fe:	b083      	sub	sp, #12
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	4618      	mov	r0, r3
 8011608:	370c      	adds	r7, #12
 801160a:	46bd      	mov	sp, r7
 801160c:	bc80      	pop	{r7}
 801160e:	4770      	bx	lr

08011610 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8011610:	b5b0      	push	{r4, r5, r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	685a      	ldr	r2, [r3, #4]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	429a      	cmp	r2, r3
 8011624:	d011      	beq.n	801164a <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011626:	687c      	ldr	r4, [r7, #4]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	685d      	ldr	r5, [r3, #4]
 801162c:	6838      	ldr	r0, [r7, #0]
 801162e:	f7ff ffe5 	bl	80115fc <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011632:	4603      	mov	r3, r0
 8011634:	461a      	mov	r2, r3
 8011636:	4629      	mov	r1, r5
 8011638:	4620      	mov	r0, r4
 801163a:	f000 f896 	bl	801176a <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	1d1a      	adds	r2, r3, #4
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	605a      	str	r2, [r3, #4]
      }
 8011648:	e00c      	b.n	8011664 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 f8a0 	bl	8011790 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 8011650:	4604      	mov	r4, r0
 8011652:	6838      	ldr	r0, [r7, #0]
 8011654:	f7ff ffd2 	bl	80115fc <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011658:	4603      	mov	r3, r0
 801165a:	461a      	mov	r2, r3
 801165c:	4621      	mov	r1, r4
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f000 f8a8 	bl	80117b4 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8011664:	bf00      	nop
 8011666:	3708      	adds	r7, #8
 8011668:	46bd      	mov	sp, r7
 801166a:	bdb0      	pop	{r4, r5, r7, pc}

0801166c <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	601a      	str	r2, [r3, #0]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4618      	mov	r0, r3
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	bc80      	pop	{r7}
 8011688:	4770      	bx	lr

0801168a <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801168a:	b480      	push	{r7}
 801168c:	b083      	sub	sp, #12
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	4618      	mov	r0, r3
 8011696:	370c      	adds	r7, #12
 8011698:	46bd      	mov	sp, r7
 801169a:	bc80      	pop	{r7}
 801169c:	4770      	bx	lr

0801169e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 801169e:	b580      	push	{r7, lr}
 80116a0:	b084      	sub	sp, #16
 80116a2:	af00      	add	r7, sp, #0
 80116a4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	60fb      	str	r3, [r7, #12]
 80116ac:	f107 020c 	add.w	r2, r7, #12
 80116b0:	f107 0308 	add.w	r3, r7, #8
 80116b4:	4611      	mov	r1, r2
 80116b6:	4618      	mov	r0, r3
 80116b8:	f000 f908 	bl	80118cc <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	4618      	mov	r0, r3
 80116c0:	3710      	adds	r7, #16
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}

080116c6 <_ZN9__gnu_cxxmiIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80116c6:	b590      	push	{r4, r7, lr}
 80116c8:	b083      	sub	sp, #12
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
 80116ce:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f000 f90a 	bl	80118ea <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80116d6:	4603      	mov	r3, r0
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	461c      	mov	r4, r3
 80116dc:	6838      	ldr	r0, [r7, #0]
 80116de:	f000 f904 	bl	80118ea <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80116e2:	4603      	mov	r3, r0
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	1ae3      	subs	r3, r4, r3
 80116e8:	109b      	asrs	r3, r3, #2
 80116ea:	4618      	mov	r0, r3
 80116ec:	370c      	adds	r7, #12
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd90      	pop	{r4, r7, pc}

080116f2 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 80116f2:	b590      	push	{r4, r7, lr}
 80116f4:	b085      	sub	sp, #20
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 80116fc:	463b      	mov	r3, r7
 80116fe:	2101      	movs	r1, #1
 8011700:	4618      	mov	r0, r3
 8011702:	f7ff ff2b 	bl	801155c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8011706:	4603      	mov	r3, r0
 8011708:	60bb      	str	r3, [r7, #8]
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 f840 	bl	8011790 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 8011710:	4603      	mov	r3, r0
 8011712:	60fb      	str	r3, [r7, #12]
 8011714:	f107 020c 	add.w	r2, r7, #12
 8011718:	f107 0308 	add.w	r3, r7, #8
 801171c:	4611      	mov	r1, r2
 801171e:	4618      	mov	r0, r3
 8011720:	f000 f8ed 	bl	80118fe <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d00e      	beq.n	8011748 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 801172a:	463b      	mov	r3, r7
 801172c:	2101      	movs	r1, #1
 801172e:	4618      	mov	r0, r3
 8011730:	f7ff ff14 	bl	801155c <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8011734:	4604      	mov	r4, r0
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f000 f82a 	bl	8011790 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 801173c:	4603      	mov	r3, r0
 801173e:	683a      	ldr	r2, [r7, #0]
 8011740:	4619      	mov	r1, r3
 8011742:	4620      	mov	r0, r4
 8011744:	f000 f8f3 	bl	801192e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	1f1a      	subs	r2, r3, #4
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	4619      	mov	r1, r3
 801175a:	4610      	mov	r0, r2
 801175c:	f000 f8ff 	bl	801195e <_ZNSt16allocator_traitsISaIP12TimerHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 8011760:	683b      	ldr	r3, [r7, #0]
    }
 8011762:	4618      	mov	r0, r3
 8011764:	3714      	adds	r7, #20
 8011766:	46bd      	mov	sp, r7
 8011768:	bd90      	pop	{r4, r7, pc}

0801176a <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 801176a:	b580      	push	{r7, lr}
 801176c:	b084      	sub	sp, #16
 801176e:	af00      	add	r7, sp, #0
 8011770:	60f8      	str	r0, [r7, #12]
 8011772:	60b9      	str	r1, [r7, #8]
 8011774:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f7ff ff40 	bl	80115fc <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 801177c:	4603      	mov	r3, r0
 801177e:	461a      	mov	r2, r3
 8011780:	68b9      	ldr	r1, [r7, #8]
 8011782:	68f8      	ldr	r0, [r7, #12]
 8011784:	f000 f8f8 	bl	8011978 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 8011788:	bf00      	nop
 801178a:	3710      	adds	r7, #16
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	1d1a      	adds	r2, r3, #4
 801179c:	f107 030c 	add.w	r3, r7, #12
 80117a0:	4611      	mov	r1, r2
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7ff ff62 	bl	801166c <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	4618      	mov	r0, r3
 80117ac:	3710      	adds	r7, #16
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
	...

080117b4 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80117b4:	b5b0      	push	{r4, r5, r7, lr}
 80117b6:	b08a      	sub	sp, #40	; 0x28
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	60f8      	str	r0, [r7, #12]
 80117bc:	60b9      	str	r1, [r7, #8]
 80117be:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80117c0:	4a41      	ldr	r2, [pc, #260]	; (80118c8 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 80117c2:	2101      	movs	r1, #1
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f000 f8ef 	bl	80119a8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc>
 80117ca:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f7ff feb5 	bl	801153c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 80117d2:	4603      	mov	r3, r0
 80117d4:	617b      	str	r3, [r7, #20]
 80117d6:	f107 0214 	add.w	r2, r7, #20
 80117da:	f107 0308 	add.w	r3, r7, #8
 80117de:	4611      	mov	r1, r2
 80117e0:	4618      	mov	r0, r3
 80117e2:	f000 f929 	bl	8011a38 <_ZN9__gnu_cxxmiIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80117e6:	4603      	mov	r3, r0
 80117e8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117ee:	4618      	mov	r0, r3
 80117f0:	f000 f938 	bl	8011a64 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj>
 80117f4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80117fa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80117fc:	6a3b      	ldr	r3, [r7, #32]
 80117fe:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011800:	69fa      	ldr	r2, [r7, #28]
 8011802:	18d5      	adds	r5, r2, r3
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f7ff fef9 	bl	80115fc <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 801180a:	4603      	mov	r3, r0
 801180c:	461a      	mov	r2, r3
 801180e:	4629      	mov	r1, r5
 8011810:	4620      	mov	r0, r4
 8011812:	f7ff ffaa 	bl	801176a <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011816:	2300      	movs	r3, #0
 8011818:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	681c      	ldr	r4, [r3, #0]
 801181e:	f107 0308 	add.w	r3, r7, #8
 8011822:	4618      	mov	r0, r3
 8011824:	f7ff ff31 	bl	801168a <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011828:	4603      	mov	r3, r0
 801182a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	4618      	mov	r0, r3
 8011830:	f000 f92c 	bl	8011a8c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011834:	4603      	mov	r3, r0
	  __new_finish
 8011836:	69fa      	ldr	r2, [r7, #28]
 8011838:	4629      	mov	r1, r5
 801183a:	4620      	mov	r0, r4
 801183c:	f000 f930 	bl	8011aa0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8011840:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8011842:	69bb      	ldr	r3, [r7, #24]
 8011844:	3304      	adds	r3, #4
 8011846:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8011848:	f107 0308 	add.w	r3, r7, #8
 801184c:	4618      	mov	r0, r3
 801184e:	f7ff ff1c 	bl	801168a <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011852:	4603      	mov	r3, r0
 8011854:	681c      	ldr	r4, [r3, #0]
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	4618      	mov	r0, r3
 801185e:	f000 f915 	bl	8011a8c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011862:	4603      	mov	r3, r0
	  __new_finish
 8011864:	69ba      	ldr	r2, [r7, #24]
 8011866:	4629      	mov	r1, r5
 8011868:	4620      	mov	r0, r4
 801186a:	f000 f919 	bl	8011aa0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 801186e:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	681c      	ldr	r4, [r3, #0]
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	4618      	mov	r0, r3
 801187c:	f000 f906 	bl	8011a8c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011880:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011882:	461a      	mov	r2, r3
 8011884:	4629      	mov	r1, r5
 8011886:	4620      	mov	r0, r4
 8011888:	f000 f923 	bl	8011ad2 <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8011896:	461a      	mov	r2, r3
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	1ad3      	subs	r3, r2, r3
 801189e:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80118a0:	461a      	mov	r2, r3
 80118a2:	f000 f924 	bl	8011aee <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	69fa      	ldr	r2, [r7, #28]
 80118aa:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	69ba      	ldr	r2, [r7, #24]
 80118b0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80118b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	69fa      	ldr	r2, [r7, #28]
 80118b8:	441a      	add	r2, r3
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	609a      	str	r2, [r3, #8]
    }
 80118be:	bf00      	nop
 80118c0:	3728      	adds	r7, #40	; 0x28
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bdb0      	pop	{r4, r5, r7, pc}
 80118c6:	bf00      	nop
 80118c8:	08018b34 	.word	0x08018b34

080118cc <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	601a      	str	r2, [r3, #0]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	4618      	mov	r0, r3
 80118e2:	370c      	adds	r7, #12
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bc80      	pop	{r7}
 80118e8:	4770      	bx	lr

080118ea <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80118ea:	b480      	push	{r7}
 80118ec:	b083      	sub	sp, #12
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	4618      	mov	r0, r3
 80118f6:	370c      	adds	r7, #12
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bc80      	pop	{r7}
 80118fc:	4770      	bx	lr

080118fe <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80118fe:	b590      	push	{r4, r7, lr}
 8011900:	b083      	sub	sp, #12
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
 8011906:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f7ff febe 	bl	801168a <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 801190e:	4603      	mov	r3, r0
 8011910:	681c      	ldr	r4, [r3, #0]
 8011912:	6838      	ldr	r0, [r7, #0]
 8011914:	f7ff feb9 	bl	801168a <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011918:	4603      	mov	r3, r0
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	429c      	cmp	r4, r3
 801191e:	bf14      	ite	ne
 8011920:	2301      	movne	r3, #1
 8011922:	2300      	moveq	r3, #0
 8011924:	b2db      	uxtb	r3, r3
 8011926:	4618      	mov	r0, r3
 8011928:	370c      	adds	r7, #12
 801192a:	46bd      	mov	sp, r7
 801192c:	bd90      	pop	{r4, r7, pc}

0801192e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 801192e:	b590      	push	{r4, r7, lr}
 8011930:	b085      	sub	sp, #20
 8011932:	af00      	add	r7, sp, #0
 8011934:	60f8      	str	r0, [r7, #12]
 8011936:	60b9      	str	r1, [r7, #8]
 8011938:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 801193a:	68f8      	ldr	r0, [r7, #12]
 801193c:	f000 f8ea 	bl	8011b14 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8011940:	4604      	mov	r4, r0
 8011942:	68b8      	ldr	r0, [r7, #8]
 8011944:	f000 f8e6 	bl	8011b14 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8011948:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	4619      	mov	r1, r3
 801194e:	4620      	mov	r0, r4
 8011950:	f000 f8ea 	bl	8011b28 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8011954:	4603      	mov	r3, r0
    }
 8011956:	4618      	mov	r0, r3
 8011958:	3714      	adds	r7, #20
 801195a:	46bd      	mov	sp, r7
 801195c:	bd90      	pop	{r4, r7, pc}

0801195e <_ZNSt16allocator_traitsISaIP12TimerHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 801195e:	b580      	push	{r7, lr}
 8011960:	b082      	sub	sp, #8
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
 8011966:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8011968:	6839      	ldr	r1, [r7, #0]
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 f902 	bl	8011b74 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE7destroyIS2_EEvPT_>
 8011970:	bf00      	nop
 8011972:	3708      	adds	r7, #8
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011978:	b590      	push	{r4, r7, lr}
 801197a:	b085      	sub	sp, #20
 801197c:	af00      	add	r7, sp, #0
 801197e:	60f8      	str	r0, [r7, #12]
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f7ff fe39 	bl	80115fc <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 801198a:	4603      	mov	r3, r0
 801198c:	681c      	ldr	r4, [r3, #0]
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	4619      	mov	r1, r3
 8011992:	2004      	movs	r0, #4
 8011994:	f7f6 fb94 	bl	80080c0 <_ZnwjPv>
 8011998:	4603      	mov	r3, r0
 801199a:	2b00      	cmp	r3, #0
 801199c:	d000      	beq.n	80119a0 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 801199e:	601c      	str	r4, [r3, #0]
 80119a0:	bf00      	nop
 80119a2:	3714      	adds	r7, #20
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd90      	pop	{r4, r7, pc}

080119a8 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80119a8:	b590      	push	{r4, r7, lr}
 80119aa:	b087      	sub	sp, #28
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	60b9      	str	r1, [r7, #8]
 80119b2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80119b4:	68f8      	ldr	r0, [r7, #12]
 80119b6:	f000 f8e7 	bl	8011b88 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 80119ba:	4604      	mov	r4, r0
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f7ff fd9e 	bl	80114fe <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 80119c2:	4603      	mov	r3, r0
 80119c4:	1ae2      	subs	r2, r4, r3
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	bf34      	ite	cc
 80119cc:	2301      	movcc	r3, #1
 80119ce:	2300      	movcs	r3, #0
 80119d0:	b2db      	uxtb	r3, r3
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d003      	beq.n	80119de <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	4618      	mov	r0, r3
 80119da:	f003 fc92 	bl	8015302 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80119de:	68f8      	ldr	r0, [r7, #12]
 80119e0:	f7ff fd8d 	bl	80114fe <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 80119e4:	4604      	mov	r4, r0
 80119e6:	68f8      	ldr	r0, [r7, #12]
 80119e8:	f7ff fd89 	bl	80114fe <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 80119ec:	4603      	mov	r3, r0
 80119ee:	613b      	str	r3, [r7, #16]
 80119f0:	f107 0208 	add.w	r2, r7, #8
 80119f4:	f107 0310 	add.w	r3, r7, #16
 80119f8:	4611      	mov	r1, r2
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7f6 ff5b 	bl	80088b6 <_ZSt3maxIjERKT_S2_S2_>
 8011a00:	4603      	mov	r3, r0
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4423      	add	r3, r4
 8011a06:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011a08:	68f8      	ldr	r0, [r7, #12]
 8011a0a:	f7ff fd78 	bl	80114fe <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d306      	bcc.n	8011a24 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x7c>
 8011a16:	68f8      	ldr	r0, [r7, #12]
 8011a18:	f000 f8b6 	bl	8011b88 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d904      	bls.n	8011a2e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011a24:	68f8      	ldr	r0, [r7, #12]
 8011a26:	f000 f8af 	bl	8011b88 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	e000      	b.n	8011a30 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x88>
 8011a2e:	697b      	ldr	r3, [r7, #20]
      }
 8011a30:	4618      	mov	r0, r3
 8011a32:	371c      	adds	r7, #28
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd90      	pop	{r4, r7, pc}

08011a38 <_ZN9__gnu_cxxmiIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011a38:	b590      	push	{r4, r7, lr}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7ff fe21 	bl	801168a <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	461c      	mov	r4, r3
 8011a4e:	6838      	ldr	r0, [r7, #0]
 8011a50:	f7ff fe1b 	bl	801168a <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011a54:	4603      	mov	r3, r0
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	1ae3      	subs	r3, r4, r3
 8011a5a:	109b      	asrs	r3, r3, #2
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	370c      	adds	r7, #12
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd90      	pop	{r4, r7, pc}

08011a64 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d006      	beq.n	8011a82 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj+0x1e>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6839      	ldr	r1, [r7, #0]
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f000 f896 	bl	8011baa <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8allocateERS2_j>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	e000      	b.n	8011a84 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj+0x20>
 8011a82:	2300      	movs	r3, #0
      }
 8011a84:	4618      	mov	r0, r3
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	4618      	mov	r0, r3
 8011a98:	370c      	adds	r7, #12
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bc80      	pop	{r7}
 8011a9e:	4770      	bx	lr

08011aa0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8011aa0:	b590      	push	{r4, r7, lr}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	607a      	str	r2, [r7, #4]
 8011aac:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8011aae:	68f8      	ldr	r0, [r7, #12]
 8011ab0:	f000 f88a 	bl	8011bc8 <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	68b8      	ldr	r0, [r7, #8]
 8011ab8:	f000 f886 	bl	8011bc8 <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>
 8011abc:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	687a      	ldr	r2, [r7, #4]
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f000 f88f 	bl	8011be6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12TimerHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8011ac8:	4603      	mov	r3, r0
    }
 8011aca:	4618      	mov	r0, r3
 8011acc:	3714      	adds	r7, #20
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd90      	pop	{r4, r7, pc}

08011ad2 <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8011ad2:	b580      	push	{r7, lr}
 8011ad4:	b084      	sub	sp, #16
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	60f8      	str	r0, [r7, #12]
 8011ada:	60b9      	str	r1, [r7, #8]
 8011adc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8011ade:	68b9      	ldr	r1, [r7, #8]
 8011ae0:	68f8      	ldr	r0, [r7, #12]
 8011ae2:	f000 f891 	bl	8011c08 <_ZSt8_DestroyIPP12TimerHandlerEvT_S3_>
    }
 8011ae6:	bf00      	nop
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b084      	sub	sp, #16
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	60f8      	str	r0, [r7, #12]
 8011af6:	60b9      	str	r1, [r7, #8]
 8011af8:	607a      	str	r2, [r7, #4]
	if (__p)
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d005      	beq.n	8011b0c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	68b9      	ldr	r1, [r7, #8]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f000 f88b 	bl	8011c22 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE10deallocateERS2_PS1_j>
      }
 8011b0c:	bf00      	nop
 8011b0e:	3710      	adds	r7, #16
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	4618      	mov	r0, r3
 8011b20:	370c      	adds	r7, #12
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bc80      	pop	{r7}
 8011b26:	4770      	bx	lr

08011b28 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011b28:	b5b0      	push	{r4, r5, r7, lr}
 8011b2a:	b086      	sub	sp, #24
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8011b34:	68f8      	ldr	r0, [r7, #12]
 8011b36:	f000 f883 	bl	8011c40 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	68b8      	ldr	r0, [r7, #8]
 8011b3e:	f000 f87f 	bl	8011c40 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011b42:	4605      	mov	r5, r0
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 f87b 	bl	8011c40 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	4629      	mov	r1, r5
 8011b50:	4620      	mov	r0, r4
 8011b52:	f000 f883 	bl	8011c5c <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8011b56:	4603      	mov	r3, r0
 8011b58:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8011b5a:	f107 0214 	add.w	r2, r7, #20
 8011b5e:	f107 0310 	add.w	r3, r7, #16
 8011b62:	4611      	mov	r1, r2
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff fd81 	bl	801166c <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011b6a:	693b      	ldr	r3, [r7, #16]
    }
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3718      	adds	r7, #24
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bdb0      	pop	{r4, r5, r7, pc}

08011b74 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8011b74:	b480      	push	{r7}
 8011b76:	b083      	sub	sp, #12
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
 8011b7e:	bf00      	nop
 8011b80:	370c      	adds	r7, #12
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bc80      	pop	{r7}
 8011b86:	4770      	bx	lr

08011b88 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	4618      	mov	r0, r3
 8011b94:	f000 f880 	bl	8011c98 <_ZNKSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f000 f870 	bl	8011c80 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8max_sizeERKS2_>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3708      	adds	r7, #8
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b082      	sub	sp, #8
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	6078      	str	r0, [r7, #4]
 8011bb2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	6839      	ldr	r1, [r7, #0]
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f000 f877 	bl	8011cac <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3708      	adds	r7, #8
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8011bd0:	f107 030c 	add.w	r3, r7, #12
 8011bd4:	6879      	ldr	r1, [r7, #4]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f000 f886 	bl	8011ce8 <_ZNSt13move_iteratorIPP12TimerHandlerEC1ES2_>
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}

08011be6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12TimerHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8011be6:	b580      	push	{r7, lr}
 8011be8:	b084      	sub	sp, #16
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	60f8      	str	r0, [r7, #12]
 8011bee:	60b9      	str	r1, [r7, #8]
 8011bf0:	607a      	str	r2, [r7, #4]
 8011bf2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	68b9      	ldr	r1, [r7, #8]
 8011bf8:	68f8      	ldr	r0, [r7, #12]
 8011bfa:	f000 f883 	bl	8011d04 <_ZSt18uninitialized_copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	4618      	mov	r0, r3
 8011c02:	3710      	adds	r7, #16
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}

08011c08 <_ZSt8_DestroyIPP12TimerHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8011c12:	6839      	ldr	r1, [r7, #0]
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f000 f887 	bl	8011d28 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12TimerHandlerEEvT_S5_>
    }
 8011c1a:	bf00      	nop
 8011c1c:	3708      	adds	r7, #8
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b084      	sub	sp, #16
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	60f8      	str	r0, [r7, #12]
 8011c2a:	60b9      	str	r1, [r7, #8]
 8011c2c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	68b9      	ldr	r1, [r7, #8]
 8011c32:	68f8      	ldr	r0, [r7, #12]
 8011c34:	f000 f882 	bl	8011d3c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE10deallocateEPS2_j>
 8011c38:	bf00      	nop
 8011c3a:	3710      	adds	r7, #16
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8011c48:	1d3b      	adds	r3, r7, #4
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7ff fd1d 	bl	801168a <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011c50:	4603      	mov	r3, r0
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4618      	mov	r0, r3
 8011c56:	3708      	adds	r7, #8
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}

08011c5c <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b086      	sub	sp, #24
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8011c68:	2301      	movs	r3, #1
 8011c6a:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	68b9      	ldr	r1, [r7, #8]
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f000 f870 	bl	8011d56 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_>
 8011c76:	4603      	mov	r3, r0
    }
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3718      	adds	r7, #24
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}

08011c80 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 f881 	bl	8011d90 <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	4618      	mov	r0, r3
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <_ZNKSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	370c      	adds	r7, #12
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bc80      	pop	{r7}
 8011caa:	4770      	bx	lr

08011cac <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	60f8      	str	r0, [r7, #12]
 8011cb4:	60b9      	str	r1, [r7, #8]
 8011cb6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f000 f869 	bl	8011d90 <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	bf8c      	ite	hi
 8011cc6:	2301      	movhi	r3, #1
 8011cc8:	2300      	movls	r3, #0
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8011cd0:	f003 fb0e 	bl	80152f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f003 faeb 	bl	80152b4 <_Znwj>
 8011cde:	4603      	mov	r3, r0
      }
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3710      	adds	r7, #16
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <_ZNSt13move_iteratorIPP12TimerHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	683a      	ldr	r2, [r7, #0]
 8011cf6:	601a      	str	r2, [r3, #0]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	370c      	adds	r7, #12
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bc80      	pop	{r7}
 8011d02:	4770      	bx	lr

08011d04 <_ZSt18uninitialized_copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b086      	sub	sp, #24
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011d10:	2301      	movs	r3, #1
 8011d12:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	68b9      	ldr	r1, [r7, #8]
 8011d18:	68f8      	ldr	r0, [r7, #12]
 8011d1a:	f000 f844 	bl	8011da6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12TimerHandlerES5_EET0_T_S8_S7_>
 8011d1e:	4603      	mov	r3, r0
    }
 8011d20:	4618      	mov	r0, r3
 8011d22:	3718      	adds	r7, #24
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12TimerHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]
 8011d32:	bf00      	nop
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bc80      	pop	{r7}
 8011d3a:	4770      	bx	lr

08011d3c <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8011d48:	68b8      	ldr	r0, [r7, #8]
 8011d4a:	f003 facd 	bl	80152e8 <_ZdlPv>
      }
 8011d4e:	bf00      	nop
 8011d50:	3710      	adds	r7, #16
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}

08011d56 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011d56:	b580      	push	{r7, lr}
 8011d58:	b086      	sub	sp, #24
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	60f8      	str	r0, [r7, #12]
 8011d5e:	60b9      	str	r1, [r7, #8]
 8011d60:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011d62:	68ba      	ldr	r2, [r7, #8]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	1ad3      	subs	r3, r2, r3
 8011d68:	109b      	asrs	r3, r3, #2
 8011d6a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d006      	beq.n	8011d80 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	461a      	mov	r2, r3
 8011d78:	68f9      	ldr	r1, [r7, #12]
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f005 ff8a 	bl	8017c94 <memmove>
	  return __result + _Num;
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	4413      	add	r3, r2
	}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3718      	adds	r7, #24
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8011d90:	b480      	push	{r7}
 8011d92:	b083      	sub	sp, #12
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8011d98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	370c      	adds	r7, #12
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bc80      	pop	{r7}
 8011da4:	4770      	bx	lr

08011da6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12TimerHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8011da6:	b580      	push	{r7, lr}
 8011da8:	b084      	sub	sp, #16
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	60f8      	str	r0, [r7, #12]
 8011dae:	60b9      	str	r1, [r7, #8]
 8011db0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	68b9      	ldr	r1, [r7, #8]
 8011db6:	68f8      	ldr	r0, [r7, #12]
 8011db8:	f000 f805 	bl	8011dc6 <_ZSt4copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3710      	adds	r7, #16
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}

08011dc6 <_ZSt4copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8011dc6:	b590      	push	{r4, r7, lr}
 8011dc8:	b085      	sub	sp, #20
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	60f8      	str	r0, [r7, #12]
 8011dce:	60b9      	str	r1, [r7, #8]
 8011dd0:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8011dd2:	68f8      	ldr	r0, [r7, #12]
 8011dd4:	f000 f80f 	bl	8011df6 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011dd8:	4604      	mov	r4, r0
 8011dda:	68b8      	ldr	r0, [r7, #8]
 8011ddc:	f000 f80b 	bl	8011df6 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011de0:	4603      	mov	r3, r0
	       __result));
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	4619      	mov	r1, r3
 8011de6:	4620      	mov	r0, r4
 8011de8:	f000 f816 	bl	8011e18 <_ZSt14__copy_move_a2ILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8011dec:	4603      	mov	r3, r0
    }
 8011dee:	4618      	mov	r0, r3
 8011df0:	3714      	adds	r7, #20
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd90      	pop	{r4, r7, pc}

08011df6 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b082      	sub	sp, #8
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8011dfe:	1d3b      	adds	r3, r7, #4
 8011e00:	4618      	mov	r0, r3
 8011e02:	f000 f825 	bl	8011e50 <_ZNKSt13move_iteratorIPP12TimerHandlerE4baseEv>
 8011e06:	4603      	mov	r3, r0
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f000 f82c 	bl	8011e66 <_ZSt12__miter_baseIPP12TimerHandlerET_S3_>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	4618      	mov	r0, r3
 8011e12:	3708      	adds	r7, #8
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <_ZSt14__copy_move_a2ILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011e18:	b5b0      	push	{r4, r5, r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	f000 f828 	bl	8011e7a <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011e2a:	4604      	mov	r4, r0
 8011e2c:	68b8      	ldr	r0, [r7, #8]
 8011e2e:	f000 f824 	bl	8011e7a <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011e32:	4605      	mov	r5, r0
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 f820 	bl	8011e7a <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011e3a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	4629      	mov	r1, r5
 8011e40:	4620      	mov	r0, r4
 8011e42:	f7ff ff0b 	bl	8011c5c <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8011e46:	4603      	mov	r3, r0
    }
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3710      	adds	r7, #16
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bdb0      	pop	{r4, r5, r7, pc}

08011e50 <_ZNKSt13move_iteratorIPP12TimerHandlerE4baseEv>:
      base() const
 8011e50:	b480      	push	{r7}
 8011e52:	b083      	sub	sp, #12
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	370c      	adds	r7, #12
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bc80      	pop	{r7}
 8011e64:	4770      	bx	lr

08011e66 <_ZSt12__miter_baseIPP12TimerHandlerET_S3_>:
    __miter_base(_Iterator __it)
 8011e66:	b480      	push	{r7}
 8011e68:	b083      	sub	sp, #12
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	4618      	mov	r0, r3
 8011e72:	370c      	adds	r7, #12
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bc80      	pop	{r7}
 8011e78:	4770      	bx	lr

08011e7a <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>:
    __niter_base(_Iterator __it)
 8011e7a:	b480      	push	{r7}
 8011e7c:	b083      	sub	sp, #12
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	4618      	mov	r0, r3
 8011e86:	370c      	adds	r7, #12
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bc80      	pop	{r7}
 8011e8c:	4770      	bx	lr
	...

08011e90 <_ZN13UsbHidHandlerC1Ev>:
 */

#include "UsbHidHandler.h"
#include "global_callbacks.h"

UsbHidHandler::UsbHidHandler() {
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	4a04      	ldr	r2, [pc, #16]	; (8011eac <_ZN13UsbHidHandlerC1Ev+0x1c>)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	601a      	str	r2, [r3, #0]
	// Don't auto register. Call registerCallback()
	// There should only be one hid handler for now
}
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	370c      	adds	r7, #12
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bc80      	pop	{r7}
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop
 8011eac:	08018ce8 	.word	0x08018ce8

08011eb0 <_ZN13UsbHidHandlerD1Ev>:

UsbHidHandler::~UsbHidHandler() {
 8011eb0:	b480      	push	{r7}
 8011eb2:	b083      	sub	sp, #12
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	4a04      	ldr	r2, [pc, #16]	; (8011ecc <_ZN13UsbHidHandlerD1Ev+0x1c>)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bc80      	pop	{r7}
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop
 8011ecc:	08018ce8 	.word	0x08018ce8

08011ed0 <_ZN13UsbHidHandlerD0Ev>:
UsbHidHandler::~UsbHidHandler() {
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
}
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f7ff ffe9 	bl	8011eb0 <_ZN13UsbHidHandlerD1Ev>
 8011ede:	2104      	movs	r1, #4
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f003 f9e5 	bl	80152b0 <_ZdlPvj>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3708      	adds	r7, #8
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}

08011ef0 <_ZN13UsbHidHandler6hidGetEhtPPh>:



void UsbHidHandler::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){
 8011ef0:	b480      	push	{r7}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	607b      	str	r3, [r7, #4]
 8011efa:	460b      	mov	r3, r1
 8011efc:	72fb      	strb	r3, [r7, #11]
 8011efe:	4613      	mov	r3, r2
 8011f00:	813b      	strh	r3, [r7, #8]

}
 8011f02:	bf00      	nop
 8011f04:	3714      	adds	r7, #20
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bc80      	pop	{r7}
 8011f0a:	4770      	bx	lr

08011f0c <_ZN13UsbHidHandler6hidOutEPh>:

void UsbHidHandler::hidOut(uint8_t* report){
 8011f0c:	b480      	push	{r7}
 8011f0e:	b083      	sub	sp, #12
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]

}
 8011f16:	bf00      	nop
 8011f18:	370c      	adds	r7, #12
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bc80      	pop	{r7}
 8011f1e:	4770      	bx	lr

08011f20 <_ZN13UsbHidHandler19registerHidCallbackEv>:

void UsbHidHandler::registerHidCallback(){
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
	extern UsbHidHandler* globalHidHandler;
	globalHidHandler = this;
 8011f28:	4a03      	ldr	r2, [pc, #12]	; (8011f38 <_ZN13UsbHidHandler19registerHidCallbackEv+0x18>)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6013      	str	r3, [r2, #0]
}
 8011f2e:	bf00      	nop
 8011f30:	370c      	adds	r7, #12
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bc80      	pop	{r7}
 8011f36:	4770      	bx	lr
 8011f38:	20000b84 	.word	0x20000b84

08011f3c <HAL_ADC_ConvCpltCallback>:
std::vector<CommandHandler*> cmdHandlers;

volatile uint32_t ADC_BUF[ADC_CHANNELS] = {0};


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b086      	sub	sp, #24
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
		for(AdcHandler* c : adcHandlers){
 8011f44:	4b17      	ldr	r3, [pc, #92]	; (8011fa4 <HAL_ADC_ConvCpltCallback+0x68>)
 8011f46:	617b      	str	r3, [r7, #20]
 8011f48:	6978      	ldr	r0, [r7, #20]
 8011f4a:	f7f6 f97d 	bl	8008248 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	60fb      	str	r3, [r7, #12]
 8011f52:	6978      	ldr	r0, [r7, #20]
 8011f54:	f7f6 faa2 	bl	800849c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	60bb      	str	r3, [r7, #8]
 8011f5c:	f107 0208 	add.w	r2, r7, #8
 8011f60:	f107 030c 	add.w	r3, r7, #12
 8011f64:	4611      	mov	r1, r2
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7f6 fb4f 	bl	800860a <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d014      	beq.n	8011f9c <HAL_ADC_ConvCpltCallback+0x60>
 8011f72:	f107 030c 	add.w	r3, r7, #12
 8011f76:	4618      	mov	r0, r3
 8011f78:	f000 f913 	bl	80121a2 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	613b      	str	r3, [r7, #16]
			c->adcUpd(ADC_BUF);
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	3308      	adds	r3, #8
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4907      	ldr	r1, [pc, #28]	; (8011fa8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8011f8c:	6938      	ldr	r0, [r7, #16]
 8011f8e:	4798      	blx	r3
		for(AdcHandler* c : adcHandlers){
 8011f90:	f107 030c 	add.w	r3, r7, #12
 8011f94:	4618      	mov	r0, r3
 8011f96:	f000 f8f5 	bl	8012184 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEppEv>
 8011f9a:	e7df      	b.n	8011f5c <HAL_ADC_ConvCpltCallback+0x20>
		}
}
 8011f9c:	bf00      	nop
 8011f9e:	3718      	adds	r7, #24
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}
 8011fa4:	20000b4c 	.word	0x20000b4c
 8011fa8:	20000b64 	.word	0x20000b64

08011fac <HAL_TIM_PeriodElapsedCallback>:

std::vector<TimerHandler*> timerHandlers;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b086      	sub	sp, #24
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
	for(TimerHandler* c : timerHandlers){
 8011fb4:	4b17      	ldr	r3, [pc, #92]	; (8012014 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8011fb6:	617b      	str	r3, [r7, #20]
 8011fb8:	6978      	ldr	r0, [r7, #20]
 8011fba:	f7ff fabf 	bl	801153c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	60fb      	str	r3, [r7, #12]
 8011fc2:	6978      	ldr	r0, [r7, #20]
 8011fc4:	f7ff fbe4 	bl	8011790 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	60bb      	str	r3, [r7, #8]
 8011fcc:	f107 0208 	add.w	r2, r7, #8
 8011fd0:	f107 030c 	add.w	r3, r7, #12
 8011fd4:	4611      	mov	r1, r2
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7ff fc91 	bl	80118fe <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d014      	beq.n	801200c <HAL_TIM_PeriodElapsedCallback+0x60>
 8011fe2:	f107 030c 	add.w	r3, r7, #12
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f000 f902 	bl	80121f0 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 8011fec:	4603      	mov	r3, r0
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	613b      	str	r3, [r7, #16]
			c->timerElapsed(htim);
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	3308      	adds	r3, #8
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	6879      	ldr	r1, [r7, #4]
 8011ffc:	6938      	ldr	r0, [r7, #16]
 8011ffe:	4798      	blx	r3
	for(TimerHandler* c : timerHandlers){
 8012000:	f107 030c 	add.w	r3, r7, #12
 8012004:	4618      	mov	r0, r3
 8012006:	f000 f8e4 	bl	80121d2 <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEppEv>
 801200a:	e7df      	b.n	8011fcc <HAL_TIM_PeriodElapsedCallback+0x20>
		}
}
 801200c:	bf00      	nop
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	20000b6c 	.word	0x20000b6c

08012018 <HAL_GPIO_EXTI_Callback>:

std::vector<ExtiHandler*> extiHandlers;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8012018:	b580      	push	{r7, lr}
 801201a:	b086      	sub	sp, #24
 801201c:	af00      	add	r7, sp, #0
 801201e:	4603      	mov	r3, r0
 8012020:	80fb      	strh	r3, [r7, #6]
	for(ExtiHandler* c : extiHandlers){
 8012022:	4b18      	ldr	r3, [pc, #96]	; (8012084 <HAL_GPIO_EXTI_Callback+0x6c>)
 8012024:	617b      	str	r3, [r7, #20]
 8012026:	6978      	ldr	r0, [r7, #20]
 8012028:	f7f9 fa7f 	bl	800b52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 801202c:	4603      	mov	r3, r0
 801202e:	60fb      	str	r3, [r7, #12]
 8012030:	6978      	ldr	r0, [r7, #20]
 8012032:	f7f9 fba4 	bl	800b77e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 8012036:	4603      	mov	r3, r0
 8012038:	60bb      	str	r3, [r7, #8]
 801203a:	f107 0208 	add.w	r2, r7, #8
 801203e:	f107 030c 	add.w	r3, r7, #12
 8012042:	4611      	mov	r1, r2
 8012044:	4618      	mov	r0, r3
 8012046:	f7f9 fc50 	bl	800b8ea <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	d015      	beq.n	801207c <HAL_GPIO_EXTI_Callback+0x64>
 8012050:	f107 030c 	add.w	r3, r7, #12
 8012054:	4618      	mov	r0, r3
 8012056:	f000 f8f2 	bl	801223e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 801205a:	4603      	mov	r3, r0
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	613b      	str	r3, [r7, #16]
		c->exti(GPIO_Pin);
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	3308      	adds	r3, #8
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	88fa      	ldrh	r2, [r7, #6]
 801206a:	4611      	mov	r1, r2
 801206c:	6938      	ldr	r0, [r7, #16]
 801206e:	4798      	blx	r3
	for(ExtiHandler* c : extiHandlers){
 8012070:	f107 030c 	add.w	r3, r7, #12
 8012074:	4618      	mov	r0, r3
 8012076:	f000 f8d3 	bl	8012220 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEppEv>
 801207a:	e7de      	b.n	801203a <HAL_GPIO_EXTI_Callback+0x22>
	}
}
 801207c:	bf00      	nop
 801207e:	3718      	adds	r7, #24
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}
 8012084:	20000b78 	.word	0x20000b78

08012088 <CDC_Callback>:

void CDC_Callback(uint8_t* Buf, uint32_t *Len){
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //DEBUG
 8012092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012096:	4809      	ldr	r0, [pc, #36]	; (80120bc <CDC_Callback+0x34>)
 8012098:	f7f1 fa6f 	bl	800357a <HAL_GPIO_TogglePin>
	if(mainclass!=nullptr)
 801209c:	4b08      	ldr	r3, [pc, #32]	; (80120c0 <CDC_Callback+0x38>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d006      	beq.n	80120b2 <CDC_Callback+0x2a>
		mainclass->cdcRcv((char*)Buf,Len);
 80120a4:	4b06      	ldr	r3, [pc, #24]	; (80120c0 <CDC_Callback+0x38>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	683a      	ldr	r2, [r7, #0]
 80120aa:	6879      	ldr	r1, [r7, #4]
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7fa fce9 	bl	800ca84 <_ZN8FFBWheel6cdcRcvEPcPm>
}
 80120b2:	bf00      	nop
 80120b4:	3708      	adds	r7, #8
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	bf00      	nop
 80120bc:	40011000 	.word	0x40011000
 80120c0:	20000914 	.word	0x20000914

080120c4 <USBD_OutEvent_HID>:

UsbHidHandler* globalHidHandler = nullptr;
void USBD_OutEvent_HID(uint8_t* report){
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
	if(globalHidHandler!=nullptr)
 80120cc:	4b08      	ldr	r3, [pc, #32]	; (80120f0 <USBD_OutEvent_HID+0x2c>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d009      	beq.n	80120e8 <USBD_OutEvent_HID+0x24>
			globalHidHandler->hidOut(report);
 80120d4:	4b06      	ldr	r3, [pc, #24]	; (80120f0 <USBD_OutEvent_HID+0x2c>)
 80120d6:	681a      	ldr	r2, [r3, #0]
 80120d8:	4b05      	ldr	r3, [pc, #20]	; (80120f0 <USBD_OutEvent_HID+0x2c>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	3308      	adds	r3, #8
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	6879      	ldr	r1, [r7, #4]
 80120e4:	4610      	mov	r0, r2
 80120e6:	4798      	blx	r3
}
 80120e8:	bf00      	nop
 80120ea:	3708      	adds	r7, #8
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	20000b84 	.word	0x20000b84

080120f4 <USBD_GetEvent_HID>:
void USBD_GetEvent_HID(uint8_t id,uint16_t len,uint8_t** return_buf){
 80120f4:	b590      	push	{r4, r7, lr}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	4603      	mov	r3, r0
 80120fc:	603a      	str	r2, [r7, #0]
 80120fe:	71fb      	strb	r3, [r7, #7]
 8012100:	460b      	mov	r3, r1
 8012102:	80bb      	strh	r3, [r7, #4]
	if(globalHidHandler!=nullptr)
 8012104:	4b09      	ldr	r3, [pc, #36]	; (801212c <USBD_GetEvent_HID+0x38>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00a      	beq.n	8012122 <USBD_GetEvent_HID+0x2e>
		globalHidHandler->hidGet(id, len, return_buf);
 801210c:	4b07      	ldr	r3, [pc, #28]	; (801212c <USBD_GetEvent_HID+0x38>)
 801210e:	6818      	ldr	r0, [r3, #0]
 8012110:	4b06      	ldr	r3, [pc, #24]	; (801212c <USBD_GetEvent_HID+0x38>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	330c      	adds	r3, #12
 8012118:	681c      	ldr	r4, [r3, #0]
 801211a:	88ba      	ldrh	r2, [r7, #4]
 801211c:	79f9      	ldrb	r1, [r7, #7]
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	47a0      	blx	r4
}
 8012122:	bf00      	nop
 8012124:	370c      	adds	r7, #12
 8012126:	46bd      	mov	sp, r7
 8012128:	bd90      	pop	{r4, r7, pc}
 801212a:	bf00      	nop
 801212c:	20000b84 	.word	0x20000b84

08012130 <USB_SOF>:

void USB_SOF(){
 8012130:	b580      	push	{r7, lr}
 8012132:	af00      	add	r7, sp, #0
	if(mainclass!=nullptr)
 8012134:	4b05      	ldr	r3, [pc, #20]	; (801214c <USB_SOF+0x1c>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d004      	beq.n	8012146 <USB_SOF+0x16>
		mainclass->SOF();
 801213c:	4b03      	ldr	r3, [pc, #12]	; (801214c <USB_SOF+0x1c>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4618      	mov	r0, r3
 8012142:	f7fa fcd1 	bl	800cae8 <_ZN8FFBWheel3SOFEv>
}
 8012146:	bf00      	nop
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	20000914 	.word	0x20000914

08012150 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEC1Ev>:
      vector()
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	4618      	mov	r0, r3
 801215c:	f000 f886 	bl	801226c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EEC1Ev>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	4618      	mov	r0, r3
 8012164:	3708      	adds	r7, #8
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}

0801216a <_ZNSt6vectorIP14CommandHandlerSaIS1_EEC1Ev>:
      vector()
 801216a:	b580      	push	{r7, lr}
 801216c:	b082      	sub	sp, #8
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	4618      	mov	r0, r3
 8012176:	f000 f8ac 	bl	80122d2 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EEC1Ev>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	4618      	mov	r0, r3
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
	++_M_current;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	1d1a      	adds	r2, r3, #4
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	601a      	str	r2, [r3, #0]
	return *this;
 8012196:	687b      	ldr	r3, [r7, #4]
      }
 8012198:	4618      	mov	r0, r3
 801219a:	370c      	adds	r7, #12
 801219c:	46bd      	mov	sp, r7
 801219e:	bc80      	pop	{r7}
 80121a0:	4770      	bx	lr

080121a2 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80121a2:	b480      	push	{r7}
 80121a4:	b083      	sub	sp, #12
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	4618      	mov	r0, r3
 80121b0:	370c      	adds	r7, #12
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bc80      	pop	{r7}
 80121b6:	4770      	bx	lr

080121b8 <_ZNSt6vectorIP12TimerHandlerSaIS1_EEC1Ev>:
      vector()
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	4618      	mov	r0, r3
 80121c4:	f000 f8b8 	bl	8012338 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EEC1Ev>
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	4618      	mov	r0, r3
 80121cc:	3708      	adds	r7, #8
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80121d2:	b480      	push	{r7}
 80121d4:	b083      	sub	sp, #12
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
	++_M_current;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	1d1a      	adds	r2, r3, #4
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	601a      	str	r2, [r3, #0]
	return *this;
 80121e4:	687b      	ldr	r3, [r7, #4]
      }
 80121e6:	4618      	mov	r0, r3
 80121e8:	370c      	adds	r7, #12
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bc80      	pop	{r7}
 80121ee:	4770      	bx	lr

080121f0 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80121f0:	b480      	push	{r7}
 80121f2:	b083      	sub	sp, #12
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	4618      	mov	r0, r3
 80121fe:	370c      	adds	r7, #12
 8012200:	46bd      	mov	sp, r7
 8012202:	bc80      	pop	{r7}
 8012204:	4770      	bx	lr

08012206 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEC1Ev>:
      vector()
 8012206:	b580      	push	{r7, lr}
 8012208:	b082      	sub	sp, #8
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	4618      	mov	r0, r3
 8012212:	f000 f8c4 	bl	801239e <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EEC1Ev>
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	4618      	mov	r0, r3
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
	++_M_current;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	1d1a      	adds	r2, r3, #4
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	601a      	str	r2, [r3, #0]
	return *this;
 8012232:	687b      	ldr	r3, [r7, #4]
      }
 8012234:	4618      	mov	r0, r3
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	bc80      	pop	{r7}
 801223c:	4770      	bx	lr

0801223e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801223e:	b480      	push	{r7}
 8012240:	b083      	sub	sp, #12
 8012242:	af00      	add	r7, sp, #0
 8012244:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4618      	mov	r0, r3
 801224c:	370c      	adds	r7, #12
 801224e:	46bd      	mov	sp, r7
 8012250:	bc80      	pop	{r7}
 8012252:	4770      	bx	lr

08012254 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f000 f8da 	bl	8012416 <_ZNSaIP10AdcHandlerED1Ev>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	4618      	mov	r0, r3
 8012266:	3708      	adds	r7, #8
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	4618      	mov	r0, r3
 8012278:	f000 f8b8 	bl	80123ec <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implC1Ev>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	4618      	mov	r0, r3
 8012280:	3708      	adds	r7, #8
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}

08012286 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8012286:	b580      	push	{r7, lr}
 8012288:	b082      	sub	sp, #8
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6819      	ldr	r1, [r3, #0]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8012296:	461a      	mov	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	1ad3      	subs	r3, r2, r3
 801229e:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80122a0:	461a      	mov	r2, r3
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7f6 faa9 	bl	80087fa <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7ff ffd2 	bl	8012254 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implD1Ev>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	4618      	mov	r0, r3
 80122b4:	3708      	adds	r7, #8
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b082      	sub	sp, #8
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 f8c8 	bl	8012458 <_ZNSaIP14CommandHandlerED1Ev>
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	4618      	mov	r0, r3
 80122cc:	3708      	adds	r7, #8
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}

080122d2 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b082      	sub	sp, #8
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	4618      	mov	r0, r3
 80122de:	f000 f8a6 	bl	801242e <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implC1Ev>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	4618      	mov	r0, r3
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6819      	ldr	r1, [r3, #0]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80122fc:	461a      	mov	r2, r3
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	1ad3      	subs	r3, r2, r3
 8012304:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8012306:	461a      	mov	r2, r3
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f7f8 fd6c 	bl	800ade6 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	4618      	mov	r0, r3
 8012312:	f7ff ffd2 	bl	80122ba <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implD1Ev>
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	4618      	mov	r0, r3
 801231a:	3708      	adds	r7, #8
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 f8b6 	bl	801249a <_ZNSaIP12TimerHandlerED1Ev>
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	4618      	mov	r0, r3
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	4618      	mov	r0, r3
 8012344:	f000 f894 	bl	8012470 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implC1Ev>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	3708      	adds	r7, #8
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}

08012352 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8012352:	b580      	push	{r7, lr}
 8012354:	b082      	sub	sp, #8
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6819      	ldr	r1, [r3, #0]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8012362:	461a      	mov	r2, r3
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	1ad3      	subs	r3, r2, r3
 801236a:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 801236c:	461a      	mov	r2, r3
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f7ff fbbd 	bl	8011aee <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	4618      	mov	r0, r3
 8012378:	f7ff ffd2 	bl	8012320 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implD1Ev>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	4618      	mov	r0, r3
 8012380:	3708      	adds	r7, #8
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}

08012386 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8012386:	b580      	push	{r7, lr}
 8012388:	b082      	sub	sp, #8
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f000 f8a4 	bl	80124dc <_ZNSaIP11ExtiHandlerED1Ev>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	4618      	mov	r0, r3
 8012398:	3708      	adds	r7, #8
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}

0801239e <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EEC1Ev>:
      _Vector_base()
 801239e:	b580      	push	{r7, lr}
 80123a0:	b082      	sub	sp, #8
 80123a2:	af00      	add	r7, sp, #0
 80123a4:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4618      	mov	r0, r3
 80123aa:	f000 f882 	bl	80124b2 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implC1Ev>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4618      	mov	r0, r3
 80123b2:	3708      	adds	r7, #8
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6819      	ldr	r1, [r3, #0]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80123c8:	461a      	mov	r2, r3
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	1ad3      	subs	r3, r2, r3
 80123d0:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80123d2:	461a      	mov	r2, r3
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7f9 fb80 	bl	800bada <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	4618      	mov	r0, r3
 80123de:	f7ff ffd2 	bl	8012386 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implD1Ev>
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	4618      	mov	r0, r3
 80123e6:	3708      	adds	r7, #8
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f000 f87d 	bl	80124f4 <_ZNSaIP10AdcHandlerEC1Ev>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	601a      	str	r2, [r3, #0]
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	605a      	str	r2, [r3, #4]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2200      	movs	r2, #0
 801240a:	609a      	str	r2, [r3, #8]
	{ }
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	4618      	mov	r0, r3
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <_ZNSaIP10AdcHandlerED1Ev>:
 8012416:	b580      	push	{r7, lr}
 8012418:	b082      	sub	sp, #8
 801241a:	af00      	add	r7, sp, #0
 801241c:	6078      	str	r0, [r7, #4]
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 f874 	bl	801250c <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerED1Ev>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4618      	mov	r0, r3
 8012428:	3708      	adds	r7, #8
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 801242e:	b580      	push	{r7, lr}
 8012430:	b082      	sub	sp, #8
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 f872 	bl	8012520 <_ZNSaIP14CommandHandlerEC1Ev>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2200      	movs	r2, #0
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2200      	movs	r2, #0
 8012446:	605a      	str	r2, [r3, #4]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2200      	movs	r2, #0
 801244c:	609a      	str	r2, [r3, #8]
	{ }
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4618      	mov	r0, r3
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <_ZNSaIP14CommandHandlerED1Ev>:
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f000 f869 	bl	8012538 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerED1Ev>
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	4618      	mov	r0, r3
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 f867 	bl	801254c <_ZNSaIP12TimerHandlerEC1Ev>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2200      	movs	r2, #0
 8012482:	601a      	str	r2, [r3, #0]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	605a      	str	r2, [r3, #4]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2200      	movs	r2, #0
 801248e:	609a      	str	r2, [r3, #8]
	{ }
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	4618      	mov	r0, r3
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}

0801249a <_ZNSaIP12TimerHandlerED1Ev>:
 801249a:	b580      	push	{r7, lr}
 801249c:	b082      	sub	sp, #8
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f000 f85e 	bl	8012564 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerED1Ev>
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	4618      	mov	r0, r3
 80124ac:	3708      	adds	r7, #8
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}

080124b2 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b082      	sub	sp, #8
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 f85c 	bl	8012578 <_ZNSaIP11ExtiHandlerEC1Ev>
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2200      	movs	r2, #0
 80124c4:	601a      	str	r2, [r3, #0]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2200      	movs	r2, #0
 80124ca:	605a      	str	r2, [r3, #4]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2200      	movs	r2, #0
 80124d0:	609a      	str	r2, [r3, #8]
	{ }
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4618      	mov	r0, r3
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <_ZNSaIP11ExtiHandlerED1Ev>:
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f000 f853 	bl	8012590 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerED1Ev>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	4618      	mov	r0, r3
 80124ee:	3708      	adds	r7, #8
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}

080124f4 <_ZNSaIP10AdcHandlerEC1Ev>:
      allocator() throw() { }
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f000 f851 	bl	80125a4 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerEC1Ev>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	4618      	mov	r0, r3
 8012506:	3708      	adds	r7, #8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801250c:	b480      	push	{r7}
 801250e:	b083      	sub	sp, #12
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	4618      	mov	r0, r3
 8012518:	370c      	adds	r7, #12
 801251a:	46bd      	mov	sp, r7
 801251c:	bc80      	pop	{r7}
 801251e:	4770      	bx	lr

08012520 <_ZNSaIP14CommandHandlerEC1Ev>:
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f000 f845 	bl	80125b8 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerEC1Ev>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	4618      	mov	r0, r3
 8012532:	3708      	adds	r7, #8
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerED1Ev>:
 8012538:	b480      	push	{r7}
 801253a:	b083      	sub	sp, #12
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4618      	mov	r0, r3
 8012544:	370c      	adds	r7, #12
 8012546:	46bd      	mov	sp, r7
 8012548:	bc80      	pop	{r7}
 801254a:	4770      	bx	lr

0801254c <_ZNSaIP12TimerHandlerEC1Ev>:
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f000 f839 	bl	80125cc <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerEC1Ev>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4618      	mov	r0, r3
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerED1Ev>:
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	4618      	mov	r0, r3
 8012570:	370c      	adds	r7, #12
 8012572:	46bd      	mov	sp, r7
 8012574:	bc80      	pop	{r7}
 8012576:	4770      	bx	lr

08012578 <_ZNSaIP11ExtiHandlerEC1Ev>:
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 f82d 	bl	80125e0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerEC1Ev>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4618      	mov	r0, r3
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerED1Ev>:
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	4618      	mov	r0, r3
 801259c:	370c      	adds	r7, #12
 801259e:	46bd      	mov	sp, r7
 80125a0:	bc80      	pop	{r7}
 80125a2:	4770      	bx	lr

080125a4 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80125a4:	b480      	push	{r7}
 80125a6:	b083      	sub	sp, #12
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	4618      	mov	r0, r3
 80125b0:	370c      	adds	r7, #12
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bc80      	pop	{r7}
 80125b6:	4770      	bx	lr

080125b8 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerEC1Ev>:
 80125b8:	b480      	push	{r7}
 80125ba:	b083      	sub	sp, #12
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	4618      	mov	r0, r3
 80125c4:	370c      	adds	r7, #12
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bc80      	pop	{r7}
 80125ca:	4770      	bx	lr

080125cc <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerEC1Ev>:
 80125cc:	b480      	push	{r7}
 80125ce:	b083      	sub	sp, #12
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	4618      	mov	r0, r3
 80125d8:	370c      	adds	r7, #12
 80125da:	46bd      	mov	sp, r7
 80125dc:	bc80      	pop	{r7}
 80125de:	4770      	bx	lr

080125e0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerEC1Ev>:
 80125e0:	b480      	push	{r7}
 80125e2:	b083      	sub	sp, #12
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4618      	mov	r0, r3
 80125ec:	370c      	adds	r7, #12
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bc80      	pop	{r7}
 80125f2:	4770      	bx	lr

080125f4 <_Z41__static_initialization_and_destruction_0ii>:
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2b01      	cmp	r3, #1
 8012602:	d110      	bne.n	8012626 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801260a:	4293      	cmp	r3, r2
 801260c:	d10b      	bne.n	8012626 <_Z41__static_initialization_and_destruction_0ii+0x32>
std::vector<AdcHandler*> adcHandlers;
 801260e:	4812      	ldr	r0, [pc, #72]	; (8012658 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8012610:	f7ff fd9e 	bl	8012150 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEC1Ev>
std::vector<CommandHandler*> cmdHandlers;
 8012614:	4811      	ldr	r0, [pc, #68]	; (801265c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012616:	f7ff fda8 	bl	801216a <_ZNSt6vectorIP14CommandHandlerSaIS1_EEC1Ev>
std::vector<TimerHandler*> timerHandlers;
 801261a:	4811      	ldr	r0, [pc, #68]	; (8012660 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801261c:	f7ff fdcc 	bl	80121b8 <_ZNSt6vectorIP12TimerHandlerSaIS1_EEC1Ev>
std::vector<ExtiHandler*> extiHandlers;
 8012620:	4810      	ldr	r0, [pc, #64]	; (8012664 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8012622:	f7ff fdf0 	bl	8012206 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEC1Ev>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d110      	bne.n	801264e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012632:	4293      	cmp	r3, r2
 8012634:	d10b      	bne.n	801264e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8012636:	480b      	ldr	r0, [pc, #44]	; (8012664 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8012638:	f000 f816 	bl	8012668 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EED1Ev>
std::vector<TimerHandler*> timerHandlers;
 801263c:	4808      	ldr	r0, [pc, #32]	; (8012660 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801263e:	f000 f82e 	bl	801269e <_ZNSt6vectorIP12TimerHandlerSaIS1_EED1Ev>
std::vector<CommandHandler*> cmdHandlers;
 8012642:	4806      	ldr	r0, [pc, #24]	; (801265c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012644:	f000 f846 	bl	80126d4 <_ZNSt6vectorIP14CommandHandlerSaIS1_EED1Ev>
std::vector<AdcHandler*> adcHandlers;
 8012648:	4803      	ldr	r0, [pc, #12]	; (8012658 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801264a:	f000 f85e 	bl	801270a <_ZNSt6vectorIP10AdcHandlerSaIS1_EED1Ev>
}
 801264e:	bf00      	nop
 8012650:	3708      	adds	r7, #8
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	20000b4c 	.word	0x20000b4c
 801265c:	20000b58 	.word	0x20000b58
 8012660:	20000b6c 	.word	0x20000b6c
 8012664:	20000b78 	.word	0x20000b78

08012668 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8012668:	b5b0      	push	{r4, r5, r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681c      	ldr	r4, [r3, #0]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4618      	mov	r0, r3
 801267c:	f7f9 f9fc 	bl	800ba78 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012680:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012682:	461a      	mov	r2, r3
 8012684:	4629      	mov	r1, r5
 8012686:	4620      	mov	r0, r4
 8012688:	f7f9 fa19 	bl	800babe <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	4618      	mov	r0, r3
 8012690:	f7ff fe92 	bl	80123b8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EED1Ev>
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	4618      	mov	r0, r3
 8012698:	3708      	adds	r7, #8
 801269a:	46bd      	mov	sp, r7
 801269c:	bdb0      	pop	{r4, r5, r7, pc}

0801269e <_ZNSt6vectorIP12TimerHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801269e:	b5b0      	push	{r4, r5, r7, lr}
 80126a0:	b082      	sub	sp, #8
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681c      	ldr	r4, [r3, #0]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7ff f9eb 	bl	8011a8c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80126b6:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80126b8:	461a      	mov	r2, r3
 80126ba:	4629      	mov	r1, r5
 80126bc:	4620      	mov	r0, r4
 80126be:	f7ff fa08 	bl	8011ad2 <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7ff fe44 	bl	8012352 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EED1Ev>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	4618      	mov	r0, r3
 80126ce:	3708      	adds	r7, #8
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bdb0      	pop	{r4, r5, r7, pc}

080126d4 <_ZNSt6vectorIP14CommandHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80126d4:	b5b0      	push	{r4, r5, r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681c      	ldr	r4, [r3, #0]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7f8 fb4c 	bl	800ad84 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80126ec:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80126ee:	461a      	mov	r2, r3
 80126f0:	4629      	mov	r1, r5
 80126f2:	4620      	mov	r0, r4
 80126f4:	f7f8 fb69 	bl	800adca <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7ff fdf6 	bl	80122ec <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EED1Ev>
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	4618      	mov	r0, r3
 8012704:	3708      	adds	r7, #8
 8012706:	46bd      	mov	sp, r7
 8012708:	bdb0      	pop	{r4, r5, r7, pc}

0801270a <_ZNSt6vectorIP10AdcHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801270a:	b5b0      	push	{r4, r5, r7, lr}
 801270c:	b082      	sub	sp, #8
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681c      	ldr	r4, [r3, #0]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4618      	mov	r0, r3
 801271e:	f7f6 f83b 	bl	8008798 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012722:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012724:	461a      	mov	r2, r3
 8012726:	4629      	mov	r1, r5
 8012728:	4620      	mov	r0, r4
 801272a:	f7f6 f858 	bl	80087de <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	4618      	mov	r0, r3
 8012732:	f7ff fda8 	bl	8012286 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EED1Ev>
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4618      	mov	r0, r3
 801273a:	3708      	adds	r7, #8
 801273c:	46bd      	mov	sp, r7
 801273e:	bdb0      	pop	{r4, r5, r7, pc}

08012740 <_GLOBAL__sub_I_adcHandlers>:
 8012740:	b580      	push	{r7, lr}
 8012742:	af00      	add	r7, sp, #0
 8012744:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012748:	2001      	movs	r0, #1
 801274a:	f7ff ff53 	bl	80125f4 <_Z41__static_initialization_and_destruction_0ii>
 801274e:	bd80      	pop	{r7, pc}

08012750 <_GLOBAL__sub_D_adcHandlers>:
 8012750:	b580      	push	{r7, lr}
 8012752:	af00      	add	r7, sp, #0
 8012754:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012758:	2000      	movs	r0, #0
 801275a:	f7ff ff4b 	bl	80125f4 <_Z41__static_initialization_and_destruction_0ii>
 801275e:	bd80      	pop	{r7, pc}

08012760 <_Z11pulseSysLedv>:
#include "ledEffects.h"
#include "main.h"

uint32_t sysledtick=0;

void pulseSysLed(){
 8012760:	b580      	push	{r7, lr}
 8012762:	af00      	add	r7, sp, #0
	sysledtick = HAL_GetTick();
 8012764:	f7ef fcc8 	bl	80020f8 <HAL_GetTick>
 8012768:	4602      	mov	r2, r0
 801276a:	4b05      	ldr	r3, [pc, #20]	; (8012780 <_Z11pulseSysLedv+0x20>)
 801276c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801276e:	2201      	movs	r2, #1
 8012770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012774:	4803      	ldr	r0, [pc, #12]	; (8012784 <_Z11pulseSysLedv+0x24>)
 8012776:	f7f0 fee8 	bl	800354a <HAL_GPIO_WritePin>
}
 801277a:	bf00      	nop
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	20000b88 	.word	0x20000b88
 8012784:	40011000 	.word	0x40011000

08012788 <_Z10updateLedsv>:

void updateLeds(){
 8012788:	b580      	push	{r7, lr}
 801278a:	af00      	add	r7, sp, #0
	if(sysledtick!=0 && HAL_GetTick() > sysledtick+35){
 801278c:	4b0d      	ldr	r3, [pc, #52]	; (80127c4 <_Z10updateLedsv+0x3c>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d009      	beq.n	80127a8 <_Z10updateLedsv+0x20>
 8012794:	f7ef fcb0 	bl	80020f8 <HAL_GetTick>
 8012798:	4602      	mov	r2, r0
 801279a:	4b0a      	ldr	r3, [pc, #40]	; (80127c4 <_Z10updateLedsv+0x3c>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	3323      	adds	r3, #35	; 0x23
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d901      	bls.n	80127a8 <_Z10updateLedsv+0x20>
 80127a4:	2301      	movs	r3, #1
 80127a6:	e000      	b.n	80127aa <_Z10updateLedsv+0x22>
 80127a8:	2300      	movs	r3, #0
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d008      	beq.n	80127c0 <_Z10updateLedsv+0x38>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80127ae:	2200      	movs	r2, #0
 80127b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80127b4:	4804      	ldr	r0, [pc, #16]	; (80127c8 <_Z10updateLedsv+0x40>)
 80127b6:	f7f0 fec8 	bl	800354a <HAL_GPIO_WritePin>
		sysledtick = 0;
 80127ba:	4b02      	ldr	r3, [pc, #8]	; (80127c4 <_Z10updateLedsv+0x3c>)
 80127bc:	2200      	movs	r2, #0
 80127be:	601a      	str	r2, [r3, #0]
	}
}
 80127c0:	bf00      	nop
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	20000b88 	.word	0x20000b88
 80127c8:	40011000 	.word	0x40011000

080127cc <_Z11ws2812_initv>:
		{0, 0, bright},
		{0, 0, bright}
};

void ws2812_init(void)
{
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 80127d2:	2330      	movs	r3, #48	; 0x30
 80127d4:	607b      	str	r3, [r7, #4]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 80127dc:	da08      	bge.n	80127f0 <_Z11ws2812_initv+0x24>
	  BUF_DMA[i] = LOW;
 80127de:	4a07      	ldr	r2, [pc, #28]	; (80127fc <_Z11ws2812_initv+0x30>)
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	211a      	movs	r1, #26
 80127e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	3301      	adds	r3, #1
 80127ec:	607b      	str	r3, [r7, #4]
 80127ee:	e7f2      	b.n	80127d6 <_Z11ws2812_initv+0xa>
}
 80127f0:	bf00      	nop
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bc80      	pop	{r7}
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop
 80127fc:	20000b8c 	.word	0x20000b8c

08012800 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>:

void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8012800:	b490      	push	{r4, r7}
 8012802:	b084      	sub	sp, #16
 8012804:	af00      	add	r7, sp, #0
 8012806:	4604      	mov	r4, r0
 8012808:	4608      	mov	r0, r1
 801280a:	4611      	mov	r1, r2
 801280c:	461a      	mov	r2, r3
 801280e:	4623      	mov	r3, r4
 8012810:	71fb      	strb	r3, [r7, #7]
 8012812:	4603      	mov	r3, r0
 8012814:	71bb      	strb	r3, [r7, #6]
 8012816:	460b      	mov	r3, r1
 8012818:	717b      	strb	r3, [r7, #5]
 801281a:	4613      	mov	r3, r2
 801281c:	807b      	strh	r3, [r7, #2]
  for(uint16_t i = 0; i < 8; i++)
 801281e:	2300      	movs	r3, #0
 8012820:	81fb      	strh	r3, [r7, #14]
 8012822:	89fb      	ldrh	r3, [r7, #14]
 8012824:	2b07      	cmp	r3, #7
 8012826:	d850      	bhi.n	80128ca <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xca>
  {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = BitIsSet(Rpixel,(7-i)) ? HIGH : LOW;
 8012828:	79fa      	ldrb	r2, [r7, #7]
 801282a:	89fb      	ldrh	r3, [r7, #14]
 801282c:	f1c3 0307 	rsb	r3, r3, #7
 8012830:	fa42 f303 	asr.w	r3, r2, r3
 8012834:	f003 0301 	and.w	r3, r3, #1
 8012838:	2b00      	cmp	r3, #0
 801283a:	d001      	beq.n	8012840 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x40>
 801283c:	2141      	movs	r1, #65	; 0x41
 801283e:	e000      	b.n	8012842 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x42>
 8012840:	211a      	movs	r1, #26
 8012842:	887a      	ldrh	r2, [r7, #2]
 8012844:	4613      	mov	r3, r2
 8012846:	005b      	lsls	r3, r3, #1
 8012848:	4413      	add	r3, r2
 801284a:	00db      	lsls	r3, r3, #3
 801284c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012850:	89fb      	ldrh	r3, [r7, #14]
 8012852:	4413      	add	r3, r2
 8012854:	4a1f      	ldr	r2, [pc, #124]	; (80128d4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 8012856:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      BUF_DMA[DELAY_LEN+posX*24+i+8] = BitIsSet(Gpixel,(7-i)) ? HIGH : LOW;
 801285a:	79ba      	ldrb	r2, [r7, #6]
 801285c:	89fb      	ldrh	r3, [r7, #14]
 801285e:	f1c3 0307 	rsb	r3, r3, #7
 8012862:	fa42 f303 	asr.w	r3, r2, r3
 8012866:	f003 0301 	and.w	r3, r3, #1
 801286a:	2b00      	cmp	r3, #0
 801286c:	d001      	beq.n	8012872 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x72>
 801286e:	2141      	movs	r1, #65	; 0x41
 8012870:	e000      	b.n	8012874 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x74>
 8012872:	211a      	movs	r1, #26
 8012874:	887a      	ldrh	r2, [r7, #2]
 8012876:	4613      	mov	r3, r2
 8012878:	005b      	lsls	r3, r3, #1
 801287a:	4413      	add	r3, r2
 801287c:	00db      	lsls	r3, r3, #3
 801287e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012882:	89fb      	ldrh	r3, [r7, #14]
 8012884:	4413      	add	r3, r2
 8012886:	3308      	adds	r3, #8
 8012888:	4a12      	ldr	r2, [pc, #72]	; (80128d4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 801288a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      BUF_DMA[DELAY_LEN+posX*24+i+16] = BitIsSet(Bpixel,(7-i)) ? HIGH : LOW;
 801288e:	797a      	ldrb	r2, [r7, #5]
 8012890:	89fb      	ldrh	r3, [r7, #14]
 8012892:	f1c3 0307 	rsb	r3, r3, #7
 8012896:	fa42 f303 	asr.w	r3, r2, r3
 801289a:	f003 0301 	and.w	r3, r3, #1
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d001      	beq.n	80128a6 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xa6>
 80128a2:	2141      	movs	r1, #65	; 0x41
 80128a4:	e000      	b.n	80128a8 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xa8>
 80128a6:	211a      	movs	r1, #26
 80128a8:	887a      	ldrh	r2, [r7, #2]
 80128aa:	4613      	mov	r3, r2
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	4413      	add	r3, r2
 80128b0:	00db      	lsls	r3, r3, #3
 80128b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80128b6:	89fb      	ldrh	r3, [r7, #14]
 80128b8:	4413      	add	r3, r2
 80128ba:	3310      	adds	r3, #16
 80128bc:	4a05      	ldr	r2, [pc, #20]	; (80128d4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 80128be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint16_t i = 0; i < 8; i++)
 80128c2:	89fb      	ldrh	r3, [r7, #14]
 80128c4:	3301      	adds	r3, #1
 80128c6:	81fb      	strh	r3, [r7, #14]
 80128c8:	e7ab      	b.n	8012822 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x22>
  }
}
 80128ca:	bf00      	nop
 80128cc:	3710      	adds	r7, #16
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bc90      	pop	{r4, r7}
 80128d2:	4770      	bx	lr
 80128d4:	20000b8c 	.word	0x20000b8c

080128d8 <_Z16setup_rpm_ws2812h>:

void setup_rpm_ws2812(uint8_t rgb_array)
{
 80128d8:	b590      	push	{r4, r7, lr}
 80128da:	b085      	sub	sp, #20
 80128dc:	af00      	add	r7, sp, #0
 80128de:	4603      	mov	r3, r0
 80128e0:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i < LED_COUNT; i++)
 80128e2:	2300      	movs	r3, #0
 80128e4:	81fb      	strh	r3, [r7, #14]
 80128e6:	89fb      	ldrh	r3, [r7, #14]
 80128e8:	2b0f      	cmp	r3, #15
 80128ea:	d82a      	bhi.n	8012942 <_Z16setup_rpm_ws2812h+0x6a>
	{
		if(i < rgb_array)
 80128ec:	79fb      	ldrb	r3, [r7, #7]
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	89fa      	ldrh	r2, [r7, #14]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d21b      	bcs.n	801292e <_Z16setup_rpm_ws2812h+0x56>
			ws2812_pixel_rgb_to_buf_dma(LED_RPM[i].R, LED_RPM[i].G, LED_RPM[i].B, i);
 80128f6:	89fa      	ldrh	r2, [r7, #14]
 80128f8:	4914      	ldr	r1, [pc, #80]	; (801294c <_Z16setup_rpm_ws2812h+0x74>)
 80128fa:	4613      	mov	r3, r2
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	4413      	add	r3, r2
 8012900:	440b      	add	r3, r1
 8012902:	7818      	ldrb	r0, [r3, #0]
 8012904:	89fa      	ldrh	r2, [r7, #14]
 8012906:	4911      	ldr	r1, [pc, #68]	; (801294c <_Z16setup_rpm_ws2812h+0x74>)
 8012908:	4613      	mov	r3, r2
 801290a:	005b      	lsls	r3, r3, #1
 801290c:	4413      	add	r3, r2
 801290e:	440b      	add	r3, r1
 8012910:	3301      	adds	r3, #1
 8012912:	781c      	ldrb	r4, [r3, #0]
 8012914:	89fa      	ldrh	r2, [r7, #14]
 8012916:	490d      	ldr	r1, [pc, #52]	; (801294c <_Z16setup_rpm_ws2812h+0x74>)
 8012918:	4613      	mov	r3, r2
 801291a:	005b      	lsls	r3, r3, #1
 801291c:	4413      	add	r3, r2
 801291e:	440b      	add	r3, r1
 8012920:	3302      	adds	r3, #2
 8012922:	781a      	ldrb	r2, [r3, #0]
 8012924:	89fb      	ldrh	r3, [r7, #14]
 8012926:	4621      	mov	r1, r4
 8012928:	f7ff ff6a 	bl	8012800 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
 801292c:	e005      	b.n	801293a <_Z16setup_rpm_ws2812h+0x62>
		else
			ws2812_pixel_rgb_to_buf_dma(0, 0, 0, i);
 801292e:	89fb      	ldrh	r3, [r7, #14]
 8012930:	2200      	movs	r2, #0
 8012932:	2100      	movs	r1, #0
 8012934:	2000      	movs	r0, #0
 8012936:	f7ff ff63 	bl	8012800 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
	for(uint16_t i = 0; i < LED_COUNT; i++)
 801293a:	89fb      	ldrh	r3, [r7, #14]
 801293c:	3301      	adds	r3, #1
 801293e:	81fb      	strh	r3, [r7, #14]
 8012940:	e7d1      	b.n	80128e6 <_Z16setup_rpm_ws2812h+0xe>
	}
}
 8012942:	bf00      	nop
 8012944:	3714      	adds	r7, #20
 8012946:	46bd      	mov	sp, r7
 8012948:	bd90      	pop	{r4, r7, pc}
 801294a:	bf00      	nop
 801294c:	2000127c 	.word	0x2000127c

08012950 <_Z12setup_ws2812P3RGBh>:

void setup_ws2812(RGB* rgb_array, uint8_t size)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	460b      	mov	r3, r1
 801295a:	70fb      	strb	r3, [r7, #3]
	for(uint16_t i = 0; i < size; i++)
 801295c:	2300      	movs	r3, #0
 801295e:	81fb      	strh	r3, [r7, #14]
 8012960:	78fb      	ldrb	r3, [r7, #3]
 8012962:	b29b      	uxth	r3, r3
 8012964:	89fa      	ldrh	r2, [r7, #14]
 8012966:	429a      	cmp	r2, r3
 8012968:	d21b      	bcs.n	80129a2 <_Z12setup_ws2812P3RGBh+0x52>
	{
		ws2812_pixel_rgb_to_buf_dma(rgb_array[i].R, rgb_array[i].G, rgb_array[i].B, i);
 801296a:	89fa      	ldrh	r2, [r7, #14]
 801296c:	4613      	mov	r3, r2
 801296e:	005b      	lsls	r3, r3, #1
 8012970:	4413      	add	r3, r2
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	4413      	add	r3, r2
 8012976:	7818      	ldrb	r0, [r3, #0]
 8012978:	89fa      	ldrh	r2, [r7, #14]
 801297a:	4613      	mov	r3, r2
 801297c:	005b      	lsls	r3, r3, #1
 801297e:	4413      	add	r3, r2
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	4413      	add	r3, r2
 8012984:	7859      	ldrb	r1, [r3, #1]
 8012986:	89fa      	ldrh	r2, [r7, #14]
 8012988:	4613      	mov	r3, r2
 801298a:	005b      	lsls	r3, r3, #1
 801298c:	4413      	add	r3, r2
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	4413      	add	r3, r2
 8012992:	789a      	ldrb	r2, [r3, #2]
 8012994:	89fb      	ldrh	r3, [r7, #14]
 8012996:	f7ff ff33 	bl	8012800 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
	for(uint16_t i = 0; i < size; i++)
 801299a:	89fb      	ldrh	r3, [r7, #14]
 801299c:	3301      	adds	r3, #1
 801299e:	81fb      	strh	r3, [r7, #14]
 80129a0:	e7de      	b.n	8012960 <_Z12setup_ws2812P3RGBh+0x10>
	}
}
 80129a2:	bf00      	nop
 80129a4:	3710      	adds	r7, #16
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
	...

080129ac <_Z41__static_initialization_and_destruction_0ii>:
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2b01      	cmp	r3, #1
 80129ba:	d159      	bne.n	8012a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129c2:	4293      	cmp	r3, r2
 80129c4:	d154      	bne.n	8012a70 <_Z41__static_initialization_and_destruction_0ii+0xc4>
};
 80129c6:	4b2d      	ldr	r3, [pc, #180]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80129c8:	781a      	ldrb	r2, [r3, #0]
 80129ca:	4b2d      	ldr	r3, [pc, #180]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80129cc:	705a      	strb	r2, [r3, #1]
 80129ce:	4b2b      	ldr	r3, [pc, #172]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80129d0:	781a      	ldrb	r2, [r3, #0]
 80129d2:	4b2b      	ldr	r3, [pc, #172]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80129d4:	711a      	strb	r2, [r3, #4]
 80129d6:	4b29      	ldr	r3, [pc, #164]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80129d8:	781a      	ldrb	r2, [r3, #0]
 80129da:	4b29      	ldr	r3, [pc, #164]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80129dc:	71da      	strb	r2, [r3, #7]
 80129de:	4b27      	ldr	r3, [pc, #156]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80129e0:	781a      	ldrb	r2, [r3, #0]
 80129e2:	4b27      	ldr	r3, [pc, #156]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80129e4:	729a      	strb	r2, [r3, #10]
 80129e6:	4b25      	ldr	r3, [pc, #148]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80129e8:	781a      	ldrb	r2, [r3, #0]
 80129ea:	4b25      	ldr	r3, [pc, #148]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80129ec:	731a      	strb	r2, [r3, #12]
 80129ee:	4b23      	ldr	r3, [pc, #140]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80129f0:	781a      	ldrb	r2, [r3, #0]
 80129f2:	4b23      	ldr	r3, [pc, #140]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80129f4:	735a      	strb	r2, [r3, #13]
 80129f6:	4b21      	ldr	r3, [pc, #132]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80129f8:	781a      	ldrb	r2, [r3, #0]
 80129fa:	4b21      	ldr	r3, [pc, #132]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80129fc:	73da      	strb	r2, [r3, #15]
 80129fe:	4b1f      	ldr	r3, [pc, #124]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a00:	781a      	ldrb	r2, [r3, #0]
 8012a02:	4b1f      	ldr	r3, [pc, #124]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a04:	741a      	strb	r2, [r3, #16]
 8012a06:	4b1d      	ldr	r3, [pc, #116]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a08:	781a      	ldrb	r2, [r3, #0]
 8012a0a:	4b1d      	ldr	r3, [pc, #116]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a0c:	749a      	strb	r2, [r3, #18]
 8012a0e:	4b1b      	ldr	r3, [pc, #108]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a10:	781a      	ldrb	r2, [r3, #0]
 8012a12:	4b1b      	ldr	r3, [pc, #108]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a14:	74da      	strb	r2, [r3, #19]
 8012a16:	4b19      	ldr	r3, [pc, #100]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a18:	781a      	ldrb	r2, [r3, #0]
 8012a1a:	4b19      	ldr	r3, [pc, #100]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a1c:	755a      	strb	r2, [r3, #21]
 8012a1e:	4b17      	ldr	r3, [pc, #92]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a20:	781a      	ldrb	r2, [r3, #0]
 8012a22:	4b17      	ldr	r3, [pc, #92]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a24:	759a      	strb	r2, [r3, #22]
 8012a26:	4b15      	ldr	r3, [pc, #84]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a28:	781a      	ldrb	r2, [r3, #0]
 8012a2a:	4b15      	ldr	r3, [pc, #84]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a2c:	761a      	strb	r2, [r3, #24]
 8012a2e:	4b13      	ldr	r3, [pc, #76]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a30:	781a      	ldrb	r2, [r3, #0]
 8012a32:	4b13      	ldr	r3, [pc, #76]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a34:	76da      	strb	r2, [r3, #27]
 8012a36:	4b11      	ldr	r3, [pc, #68]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a38:	781a      	ldrb	r2, [r3, #0]
 8012a3a:	4b11      	ldr	r3, [pc, #68]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a3c:	779a      	strb	r2, [r3, #30]
 8012a3e:	4b0f      	ldr	r3, [pc, #60]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a40:	781a      	ldrb	r2, [r3, #0]
 8012a42:	4b0f      	ldr	r3, [pc, #60]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8012a48:	4b0c      	ldr	r3, [pc, #48]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a4a:	781a      	ldrb	r2, [r3, #0]
 8012a4c:	4b0c      	ldr	r3, [pc, #48]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012a52:	4b0a      	ldr	r3, [pc, #40]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a54:	781a      	ldrb	r2, [r3, #0]
 8012a56:	4b0a      	ldr	r3, [pc, #40]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8012a5c:	4b07      	ldr	r3, [pc, #28]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a5e:	781a      	ldrb	r2, [r3, #0]
 8012a60:	4b07      	ldr	r3, [pc, #28]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012a66:	4b05      	ldr	r3, [pc, #20]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012a68:	781a      	ldrb	r2, [r3, #0]
 8012a6a:	4b05      	ldr	r3, [pc, #20]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012a6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8012a70:	bf00      	nop
 8012a72:	370c      	adds	r7, #12
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bc80      	pop	{r7}
 8012a78:	4770      	bx	lr
 8012a7a:	bf00      	nop
 8012a7c:	2000001c 	.word	0x2000001c
 8012a80:	2000127c 	.word	0x2000127c

08012a84 <_GLOBAL__sub_I_BUF_DMA>:
 8012a84:	b580      	push	{r7, lr}
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012a8c:	2001      	movs	r0, #1
 8012a8e:	f7ff ff8d 	bl	80129ac <_Z41__static_initialization_and_destruction_0ii>
 8012a92:	bd80      	pop	{r7, pc}

08012a94 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	460b      	mov	r3, r1
 8012a9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	73fb      	strb	r3, [r7, #15]

  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	7c1b      	ldrb	r3, [r3, #16]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d10c      	bne.n	8012ac6 <USBD_CDC_Init+0x32>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8012aac:	2340      	movs	r3, #64	; 0x40
 8012aae:	2202      	movs	r2, #2
 8012ab0:	2181      	movs	r1, #129	; 0x81
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f000 ff1f 	bl	80138f6 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8012ab8:	2340      	movs	r3, #64	; 0x40
 8012aba:	2202      	movs	r2, #2
 8012abc:	2101      	movs	r1, #1
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f000 ff19 	bl	80138f6 <USBD_LL_OpenEP>
 8012ac4:	e00b      	b.n	8012ade <USBD_CDC_Init+0x4a>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8012ac6:	2340      	movs	r3, #64	; 0x40
 8012ac8:	2202      	movs	r2, #2
 8012aca:	2181      	movs	r1, #129	; 0x81
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 ff12 	bl	80138f6 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8012ad2:	2340      	movs	r3, #64	; 0x40
 8012ad4:	2202      	movs	r2, #2
 8012ad6:	2101      	movs	r1, #1
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f000 ff0c 	bl	80138f6 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8012ade:	2308      	movs	r3, #8
 8012ae0:	2203      	movs	r2, #3
 8012ae2:	2182      	movs	r1, #130	; 0x82
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f000 ff06 	bl	80138f6 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  hcdc = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8012aea:	205a      	movs	r0, #90	; 0x5a
 8012aec:	f005 f89a 	bl	8017c24 <malloc>
 8012af0:	4603      	mov	r3, r0
 8012af2:	461a      	mov	r2, r3
 8012af4:	4b2c      	ldr	r3, [pc, #176]	; (8012ba8 <USBD_CDC_Init+0x114>)
 8012af6:	601a      	str	r2, [r3, #0]
  pdev->pClassData = hcdc;
 8012af8:	4b2b      	ldr	r3, [pc, #172]	; (8012ba8 <USBD_CDC_Init+0x114>)
 8012afa:	681a      	ldr	r2, [r3, #0]
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(hcdc == NULL)
 8012b02:	4b29      	ldr	r3, [pc, #164]	; (8012ba8 <USBD_CDC_Init+0x114>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d102      	bne.n	8012b10 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	73fb      	strb	r3, [r7, #15]
 8012b0e:	e046      	b.n	8012b9e <USBD_CDC_Init+0x10a>
  else
  {

    
    /* Init  physical Interface components */
    fops_cdc_p->Init();
 8012b10:	4b26      	ldr	r3, [pc, #152]	; (8012bac <USBD_CDC_Init+0x118>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8012b18:	4b23      	ldr	r3, [pc, #140]	; (8012ba8 <USBD_CDC_Init+0x114>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8012b20:	2200      	movs	r2, #0
 8012b22:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8012b26:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012b30:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8012b34:	2200      	movs	r2, #0
 8012b36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012b3a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8012b3e:	2200      	movs	r2, #0
 8012b40:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    hcdc->RxState =0;
 8012b44:	4b18      	ldr	r3, [pc, #96]	; (8012ba8 <USBD_CDC_Init+0x114>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8012b52:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8012b56:	2200      	movs	r2, #0
 8012b58:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8012b5c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8012b60:	2200      	movs	r2, #0
 8012b62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8012b66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	7c1b      	ldrb	r3, [r3, #16]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d109      	bne.n	8012b8c <USBD_CDC_Init+0xf8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8012b78:	4b0b      	ldr	r3, [pc, #44]	; (8012ba8 <USBD_CDC_Init+0x114>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8012b7c:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8012b80:	2340      	movs	r3, #64	; 0x40
 8012b82:	2101      	movs	r1, #1
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f000 ffa0 	bl	8013aca <USBD_LL_PrepareReceive>
 8012b8a:	e008      	b.n	8012b9e <USBD_CDC_Init+0x10a>
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8012b8c:	4b06      	ldr	r3, [pc, #24]	; (8012ba8 <USBD_CDC_Init+0x114>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8012b90:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8012b94:	2340      	movs	r3, #64	; 0x40
 8012b96:	2101      	movs	r1, #1
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f000 ff96 	bl	8013aca <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8012b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3710      	adds	r7, #16
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	200019b0 	.word	0x200019b0
 8012bac:	200019b4 	.word	0x200019b4

08012bb0 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8012bc0:	2181      	movs	r1, #129	; 0x81
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f000 febd 	bl	8013942 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8012bc8:	2101      	movs	r1, #1
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f000 feb9 	bl	8013942 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8012bd0:	2182      	movs	r1, #130	; 0x82
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f000 feb5 	bl	8013942 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(hcdc != NULL)
 8012bd8:	4b0a      	ldr	r3, [pc, #40]	; (8012c04 <USBD_CDC_DeInit+0x54>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d00b      	beq.n	8012bf8 <USBD_CDC_DeInit+0x48>
  {
    fops_cdc_p->DeInit();
 8012be0:	4b09      	ldr	r3, [pc, #36]	; (8012c08 <USBD_CDC_DeInit+0x58>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	4798      	blx	r3
    USBD_free(hcdc);
 8012be8:	4b06      	ldr	r3, [pc, #24]	; (8012c04 <USBD_CDC_DeInit+0x54>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	4618      	mov	r0, r3
 8012bee:	f005 f821 	bl	8017c34 <free>
    hcdc = NULL;
 8012bf2:	4b04      	ldr	r3, [pc, #16]	; (8012c04 <USBD_CDC_DeInit+0x54>)
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8012bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	200019b0 	.word	0x200019b0
 8012c08:	200019b4 	.word	0x200019b4

08012c0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]

  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d040      	beq.n	8012ca4 <USBD_CDC_Setup+0x98>
 8012c22:	2b20      	cmp	r3, #32
 8012c24:	d000      	beq.n	8012c28 <USBD_CDC_Setup+0x1c>
*/
	  break;
    }
 
  default: 
    break;
 8012c26:	e04c      	b.n	8012cc2 <USBD_CDC_Setup+0xb6>
    if (req->wLength)
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	88db      	ldrh	r3, [r3, #6]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d030      	beq.n	8012c92 <USBD_CDC_Setup+0x86>
      if (req->bmRequest & 0x80)
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	b25b      	sxtb	r3, r3
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	da14      	bge.n	8012c64 <USBD_CDC_Setup+0x58>
        fops_cdc_p->Control(req->bRequest, (uint8_t *)hcdc->data,req->wLength);
 8012c3a:	4b25      	ldr	r3, [pc, #148]	; (8012cd0 <USBD_CDC_Setup+0xc4>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	689b      	ldr	r3, [r3, #8]
 8012c40:	683a      	ldr	r2, [r7, #0]
 8012c42:	7850      	ldrb	r0, [r2, #1]
 8012c44:	4a23      	ldr	r2, [pc, #140]	; (8012cd4 <USBD_CDC_Setup+0xc8>)
 8012c46:	6812      	ldr	r2, [r2, #0]
 8012c48:	4611      	mov	r1, r2
 8012c4a:	683a      	ldr	r2, [r7, #0]
 8012c4c:	88d2      	ldrh	r2, [r2, #6]
 8012c4e:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8012c50:	4b20      	ldr	r3, [pc, #128]	; (8012cd4 <USBD_CDC_Setup+0xc8>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4619      	mov	r1, r3
          USBD_CtlSendData (pdev, 
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	88db      	ldrh	r3, [r3, #6]
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f002 faa1 	bl	80151a4 <USBD_CtlSendData>
    break;
 8012c62:	e02f      	b.n	8012cc4 <USBD_CDC_Setup+0xb8>
        hcdc->CmdOpCode = req->bRequest;
 8012c64:	4b1b      	ldr	r3, [pc, #108]	; (8012cd4 <USBD_CDC_Setup+0xc8>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	683a      	ldr	r2, [r7, #0]
 8012c6a:	7852      	ldrb	r2, [r2, #1]
 8012c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hcdc->CmdLength = req->wLength;
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	88da      	ldrh	r2, [r3, #6]
 8012c74:	4b17      	ldr	r3, [pc, #92]	; (8012cd4 <USBD_CDC_Setup+0xc8>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	b2d2      	uxtb	r2, r2
 8012c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                           (uint8_t *)hcdc->data,
 8012c7e:	4b15      	ldr	r3, [pc, #84]	; (8012cd4 <USBD_CDC_Setup+0xc8>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	4619      	mov	r1, r3
        USBD_CtlPrepareRx (pdev, 
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	88db      	ldrh	r3, [r3, #6]
 8012c88:	461a      	mov	r2, r3
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f002 fab8 	bl	8015200 <USBD_CtlPrepareRx>
    break;
 8012c90:	e018      	b.n	8012cc4 <USBD_CDC_Setup+0xb8>
      fops_cdc_p->Control(req->bRequest, (uint8_t*)req,0);
 8012c92:	4b0f      	ldr	r3, [pc, #60]	; (8012cd0 <USBD_CDC_Setup+0xc4>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	689b      	ldr	r3, [r3, #8]
 8012c98:	683a      	ldr	r2, [r7, #0]
 8012c9a:	7850      	ldrb	r0, [r2, #1]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	6839      	ldr	r1, [r7, #0]
 8012ca0:	4798      	blx	r3
    break;
 8012ca2:	e00f      	b.n	8012cc4 <USBD_CDC_Setup+0xb8>
    switch (req->bRequest)
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	785b      	ldrb	r3, [r3, #1]
 8012ca8:	2b0a      	cmp	r3, #10
 8012caa:	d003      	beq.n	8012cb4 <USBD_CDC_Setup+0xa8>
 8012cac:	2b0b      	cmp	r3, #11
 8012cae:	d007      	beq.n	8012cc0 <USBD_CDC_Setup+0xb4>
 8012cb0:	2b06      	cmp	r3, #6
	  break;
 8012cb2:	e006      	b.n	8012cc2 <USBD_CDC_Setup+0xb6>
      USBD_CtlSendData (pdev,
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	4908      	ldr	r1, [pc, #32]	; (8012cd8 <USBD_CDC_Setup+0xcc>)
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f002 fa73 	bl	80151a4 <USBD_CtlSendData>
      break;
 8012cbe:	e000      	b.n	8012cc2 <USBD_CDC_Setup+0xb6>
      break;
 8012cc0:	bf00      	nop
    break;
 8012cc2:	bf00      	nop
  }
  return USBD_OK;
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3708      	adds	r7, #8
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	200019b4 	.word	0x200019b4
 8012cd4:	200019b0 	.word	0x200019b0
 8012cd8:	200012ac 	.word	0x200012ac

08012cdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b083      	sub	sp, #12
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	460b      	mov	r3, r1
 8012ce6:	70fb      	strb	r3, [r7, #3]

  
  if(hcdc != NULL)
 8012ce8:	4b10      	ldr	r3, [pc, #64]	; (8012d2c <USBD_CDC_DataIn+0x50>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d017      	beq.n	8012d20 <USBD_CDC_DataIn+0x44>
  {
    
    hcdc->TxState = 0;
 8012cf0:	4b0e      	ldr	r3, [pc, #56]	; (8012d2c <USBD_CDC_DataIn+0x50>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8012cfe:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8012d02:	2200      	movs	r2, #0
 8012d04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012d08:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012d12:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8012d16:	2200      	movs	r2, #0
 8012d18:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    return USBD_OK;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	e000      	b.n	8012d22 <USBD_CDC_DataIn+0x46>
  }
  else
  {
    return USBD_FAIL;
 8012d20:	2302      	movs	r3, #2
  }
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	370c      	adds	r7, #12
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bc80      	pop	{r7}
 8012d2a:	4770      	bx	lr
 8012d2c:	200019b0 	.word	0x200019b0

08012d30 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8012d30:	b590      	push	{r4, r7, lr}
 8012d32:	b083      	sub	sp, #12
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	460b      	mov	r3, r1
 8012d3a:	70fb      	strb	r3, [r7, #3]

  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8012d3c:	4b10      	ldr	r3, [pc, #64]	; (8012d80 <USBD_CDC_DataOut+0x50>)
 8012d3e:	681c      	ldr	r4, [r3, #0]
 8012d40:	78fb      	ldrb	r3, [r7, #3]
 8012d42:	4619      	mov	r1, r3
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f000 fee3 	bl	8013b10 <USBD_LL_GetRxDataSize>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	f8c4 304a 	str.w	r3, [r4, #74]	; 0x4a
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(hcdc != NULL)
 8012d50:	4b0b      	ldr	r3, [pc, #44]	; (8012d80 <USBD_CDC_DataOut+0x50>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d00d      	beq.n	8012d74 <USBD_CDC_DataOut+0x44>
  {
    fops_cdc_p->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012d58:	4b0a      	ldr	r3, [pc, #40]	; (8012d84 <USBD_CDC_DataOut+0x54>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	4a08      	ldr	r2, [pc, #32]	; (8012d80 <USBD_CDC_DataOut+0x50>)
 8012d60:	6812      	ldr	r2, [r2, #0]
 8012d62:	f8d2 0042 	ldr.w	r0, [r2, #66]	; 0x42
 8012d66:	4a06      	ldr	r2, [pc, #24]	; (8012d80 <USBD_CDC_DataOut+0x50>)
 8012d68:	6812      	ldr	r2, [r2, #0]
 8012d6a:	324a      	adds	r2, #74	; 0x4a
 8012d6c:	4611      	mov	r1, r2
 8012d6e:	4798      	blx	r3

    return USBD_OK;
 8012d70:	2300      	movs	r3, #0
 8012d72:	e000      	b.n	8012d76 <USBD_CDC_DataOut+0x46>
  }
  else
  {
    return USBD_FAIL;
 8012d74:	2302      	movs	r3, #2
  }
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	370c      	adds	r7, #12
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd90      	pop	{r4, r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	200019b0 	.word	0x200019b0
 8012d84:	200019b4 	.word	0x200019b4

08012d88 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]

  
  if((fops_cdc_p != NULL) && (hcdc->CmdOpCode != 0xFF))
 8012d90:	4b11      	ldr	r3, [pc, #68]	; (8012dd8 <USBD_CDC_EP0_RxReady+0x50>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d01a      	beq.n	8012dce <USBD_CDC_EP0_RxReady+0x46>
 8012d98:	4b10      	ldr	r3, [pc, #64]	; (8012ddc <USBD_CDC_EP0_RxReady+0x54>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012da0:	2bff      	cmp	r3, #255	; 0xff
 8012da2:	d014      	beq.n	8012dce <USBD_CDC_EP0_RxReady+0x46>
  {
    fops_cdc_p->Control(hcdc->CmdOpCode,
 8012da4:	4b0c      	ldr	r3, [pc, #48]	; (8012dd8 <USBD_CDC_EP0_RxReady+0x50>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	689b      	ldr	r3, [r3, #8]
 8012daa:	4a0c      	ldr	r2, [pc, #48]	; (8012ddc <USBD_CDC_EP0_RxReady+0x54>)
 8012dac:	6812      	ldr	r2, [r2, #0]
 8012dae:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                      (uint8_t *)hcdc->data,
 8012db2:	4a0a      	ldr	r2, [pc, #40]	; (8012ddc <USBD_CDC_EP0_RxReady+0x54>)
 8012db4:	6812      	ldr	r2, [r2, #0]
 8012db6:	4611      	mov	r1, r2
                                                      hcdc->CmdLength);
 8012db8:	4a08      	ldr	r2, [pc, #32]	; (8012ddc <USBD_CDC_EP0_RxReady+0x54>)
 8012dba:	6812      	ldr	r2, [r2, #0]
 8012dbc:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    fops_cdc_p->Control(hcdc->CmdOpCode,
 8012dc0:	b292      	uxth	r2, r2
 8012dc2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8012dc4:	4b05      	ldr	r3, [pc, #20]	; (8012ddc <USBD_CDC_EP0_RxReady+0x54>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	22ff      	movs	r2, #255	; 0xff
 8012dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
  }
  return USBD_OK;
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	200019b4 	.word	0x200019b4
 8012ddc:	200019b0 	.word	0x200019b0

08012de0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8012de0:	b480      	push	{r7}
 8012de2:	b083      	sub	sp, #12
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	224b      	movs	r2, #75	; 0x4b
 8012dec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012dee:	4b03      	ldr	r3, [pc, #12]	; (8012dfc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	370c      	adds	r7, #12
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bc80      	pop	{r7}
 8012df8:	4770      	bx	lr
 8012dfa:	bf00      	nop
 8012dfc:	20000064 	.word	0x20000064

08012e00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b083      	sub	sp, #12
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	224b      	movs	r2, #75	; 0x4b
 8012e0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012e0e:	4b03      	ldr	r3, [pc, #12]	; (8012e1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	370c      	adds	r7, #12
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bc80      	pop	{r7}
 8012e18:	4770      	bx	lr
 8012e1a:	bf00      	nop
 8012e1c:	20000064 	.word	0x20000064

08012e20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8012e20:	b480      	push	{r7}
 8012e22:	b083      	sub	sp, #12
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	224b      	movs	r2, #75	; 0x4b
 8012e2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012e2e:	4b03      	ldr	r3, [pc, #12]	; (8012e3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bc80      	pop	{r7}
 8012e38:	4770      	bx	lr
 8012e3a:	bf00      	nop
 8012e3c:	20000064 	.word	0x20000064

08012e40 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	220a      	movs	r2, #10
 8012e4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8012e4e:	4b03      	ldr	r3, [pc, #12]	; (8012e5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	370c      	adds	r7, #12
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bc80      	pop	{r7}
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop
 8012e5c:	20000020 	.word	0x20000020

08012e60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8012e60:	b480      	push	{r7}
 8012e62:	b085      	sub	sp, #20
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8012e6a:	2302      	movs	r3, #2
 8012e6c:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d008      	beq.n	8012e86 <USBD_CDC_RegisterInterface+0x26>
  {
    fops_cdc_p= fops;
 8012e74:	4a07      	ldr	r2, [pc, #28]	; (8012e94 <USBD_CDC_RegisterInterface+0x34>)
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	6013      	str	r3, [r2, #0]
    pdev->pUserData = fops;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	683a      	ldr	r2, [r7, #0]
 8012e7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8012e82:	2300      	movs	r3, #0
 8012e84:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8012e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3714      	adds	r7, #20
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bc80      	pop	{r7}
 8012e90:	4770      	bx	lr
 8012e92:	bf00      	nop
 8012e94:	200019b4 	.word	0x200019b4

08012e98 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	80fb      	strh	r3, [r7, #6]

  
  hcdc->TxBuffer = pbuff;
 8012ea6:	4b08      	ldr	r3, [pc, #32]	; (8012ec8 <USBD_CDC_SetTxBuffer+0x30>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	68ba      	ldr	r2, [r7, #8]
 8012eac:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46
  hcdc->TxLength = length;  
 8012eb0:	4b05      	ldr	r3, [pc, #20]	; (8012ec8 <USBD_CDC_SetTxBuffer+0x30>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	88fa      	ldrh	r2, [r7, #6]
 8012eb6:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
  
  return USBD_OK;  
 8012eba:	2300      	movs	r3, #0
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3714      	adds	r7, #20
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bc80      	pop	{r7}
 8012ec4:	4770      	bx	lr
 8012ec6:	bf00      	nop
 8012ec8:	200019b0 	.word	0x200019b0

08012ecc <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8012ecc:	b480      	push	{r7}
 8012ece:	b083      	sub	sp, #12
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
  
  hcdc->RxBuffer = pbuff;
 8012ed6:	4b05      	ldr	r3, [pc, #20]	; (8012eec <USBD_CDC_SetRxBuffer+0x20>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	683a      	ldr	r2, [r7, #0]
 8012edc:	f8c3 2042 	str.w	r2, [r3, #66]	; 0x42
  
  return USBD_OK;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	370c      	adds	r7, #12
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bc80      	pop	{r7}
 8012eea:	4770      	bx	lr
 8012eec:	200019b0 	.word	0x200019b0

08012ef0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]

  if(hcdc != NULL)
 8012ef8:	4b1b      	ldr	r3, [pc, #108]	; (8012f68 <USBD_CDC_TransmitPacket+0x78>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d02e      	beq.n	8012f5e <USBD_CDC_TransmitPacket+0x6e>
  {
    if(hcdc->TxState == 0)
 8012f00:	4b19      	ldr	r3, [pc, #100]	; (8012f68 <USBD_CDC_TransmitPacket+0x78>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d126      	bne.n	8012f5a <USBD_CDC_TransmitPacket+0x6a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8012f0c:	4b16      	ldr	r3, [pc, #88]	; (8012f68 <USBD_CDC_TransmitPacket+0x78>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8012f14:	2200      	movs	r2, #0
 8012f16:	f042 0201 	orr.w	r2, r2, #1
 8012f1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8012f1e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8012f22:	2200      	movs	r2, #0
 8012f24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012f28:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012f32:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8012f36:	2200      	movs	r2, #0
 8012f38:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
                       CDC_IN_EP,
                       hcdc->TxBuffer,
 8012f3c:	4b0a      	ldr	r3, [pc, #40]	; (8012f68 <USBD_CDC_TransmitPacket+0x78>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
      USBD_LL_Transmit(pdev,
 8012f40:	f8d3 2046 	ldr.w	r2, [r3, #70]	; 0x46
                       hcdc->TxLength);
 8012f44:	4b08      	ldr	r3, [pc, #32]	; (8012f68 <USBD_CDC_TransmitPacket+0x78>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	f8d3 304e 	ldr.w	r3, [r3, #78]	; 0x4e
      USBD_LL_Transmit(pdev,
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	2181      	movs	r1, #129	; 0x81
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f000 fd97 	bl	8013a84 <USBD_LL_Transmit>
      
      return USBD_OK;
 8012f56:	2300      	movs	r3, #0
 8012f58:	e002      	b.n	8012f60 <USBD_CDC_TransmitPacket+0x70>
    }
    else
    {

      return USBD_BUSY;
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	e000      	b.n	8012f60 <USBD_CDC_TransmitPacket+0x70>
    }
  }
  else
  {
    return USBD_FAIL;
 8012f5e:	2302      	movs	r3, #2
  }
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3708      	adds	r7, #8
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}
 8012f68:	200019b0 	.word	0x200019b0

08012f6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]

  
  /* Suspend or Resume USB Out process */
  if(hcdc != NULL)
 8012f74:	4b10      	ldr	r3, [pc, #64]	; (8012fb8 <USBD_CDC_ReceivePacket+0x4c>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d018      	beq.n	8012fae <USBD_CDC_ReceivePacket+0x42>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	7c1b      	ldrb	r3, [r3, #16]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d109      	bne.n	8012f98 <USBD_CDC_ReceivePacket+0x2c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8012f84:	4b0c      	ldr	r3, [pc, #48]	; (8012fb8 <USBD_CDC_ReceivePacket+0x4c>)
 8012f86:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8012f88:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8012f8c:	2340      	movs	r3, #64	; 0x40
 8012f8e:	2101      	movs	r1, #1
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f000 fd9a 	bl	8013aca <USBD_LL_PrepareReceive>
 8012f96:	e008      	b.n	8012faa <USBD_CDC_ReceivePacket+0x3e>
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8012f98:	4b07      	ldr	r3, [pc, #28]	; (8012fb8 <USBD_CDC_ReceivePacket+0x4c>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8012f9c:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8012fa0:	2340      	movs	r3, #64	; 0x40
 8012fa2:	2101      	movs	r1, #1
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f000 fd90 	bl	8013aca <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8012faa:	2300      	movs	r3, #0
 8012fac:	e000      	b.n	8012fb0 <USBD_CDC_ReceivePacket+0x44>
  }
  else
  {
    return USBD_FAIL;
 8012fae:	2302      	movs	r3, #2
  }
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3708      	adds	r7, #8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	200019b0 	.word	0x200019b0

08012fbc <CDC_Init_FS>:
  CDC_Receive_FS
};


static int8_t CDC_Init_FS(void)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	4905      	ldr	r1, [pc, #20]	; (8012fd8 <CDC_Init_FS+0x1c>)
 8012fc4:	4805      	ldr	r0, [pc, #20]	; (8012fdc <CDC_Init_FS+0x20>)
 8012fc6:	f7ff ff67 	bl	8012e98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012fca:	4905      	ldr	r1, [pc, #20]	; (8012fe0 <CDC_Init_FS+0x24>)
 8012fcc:	4803      	ldr	r0, [pc, #12]	; (8012fdc <CDC_Init_FS+0x20>)
 8012fce:	f7ff ff7d 	bl	8012ecc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012fd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	200012f0 	.word	0x200012f0
 8012fdc:	20000918 	.word	0x20000918
 8012fe0:	200012b0 	.word	0x200012b0

08012fe4 <CDC_DeInit_FS>:


static int8_t CDC_DeInit_FS(void)
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012fe8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bc80      	pop	{r7}
 8012ff0:	4770      	bx	lr
	...

08012ff4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b085      	sub	sp, #20
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	6039      	str	r1, [r7, #0]
 8012ffe:	71fb      	strb	r3, [r7, #7]
 8013000:	4613      	mov	r3, r2
 8013002:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013004:	79fb      	ldrb	r3, [r7, #7]
 8013006:	2b23      	cmp	r3, #35	; 0x23
 8013008:	d867      	bhi.n	80130da <CDC_Control_FS+0xe6>
 801300a:	a201      	add	r2, pc, #4	; (adr r2, 8013010 <CDC_Control_FS+0x1c>)
 801300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013010:	080130db 	.word	0x080130db
 8013014:	080130db 	.word	0x080130db
 8013018:	080130db 	.word	0x080130db
 801301c:	080130db 	.word	0x080130db
 8013020:	080130db 	.word	0x080130db
 8013024:	080130db 	.word	0x080130db
 8013028:	080130db 	.word	0x080130db
 801302c:	080130db 	.word	0x080130db
 8013030:	080130db 	.word	0x080130db
 8013034:	080130db 	.word	0x080130db
 8013038:	080130db 	.word	0x080130db
 801303c:	080130db 	.word	0x080130db
 8013040:	080130db 	.word	0x080130db
 8013044:	080130db 	.word	0x080130db
 8013048:	080130db 	.word	0x080130db
 801304c:	080130db 	.word	0x080130db
 8013050:	080130db 	.word	0x080130db
 8013054:	080130db 	.word	0x080130db
 8013058:	080130db 	.word	0x080130db
 801305c:	080130db 	.word	0x080130db
 8013060:	080130db 	.word	0x080130db
 8013064:	080130db 	.word	0x080130db
 8013068:	080130db 	.word	0x080130db
 801306c:	080130db 	.word	0x080130db
 8013070:	080130db 	.word	0x080130db
 8013074:	080130db 	.word	0x080130db
 8013078:	080130db 	.word	0x080130db
 801307c:	080130db 	.word	0x080130db
 8013080:	080130db 	.word	0x080130db
 8013084:	080130db 	.word	0x080130db
 8013088:	080130db 	.word	0x080130db
 801308c:	080130db 	.word	0x080130db
 8013090:	080130a1 	.word	0x080130a1
 8013094:	080130b3 	.word	0x080130b3
 8013098:	080130c5 	.word	0x080130c5
 801309c:	080130db 	.word	0x080130db
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&line_coding,pbuf,sizeof(USBD_CDC_LineCodingTypeDef));
 80130a0:	4b11      	ldr	r3, [pc, #68]	; (80130e8 <CDC_Control_FS+0xf4>)
 80130a2:	683a      	ldr	r2, [r7, #0]
 80130a4:	6811      	ldr	r1, [r2, #0]
 80130a6:	6019      	str	r1, [r3, #0]
 80130a8:	8891      	ldrh	r1, [r2, #4]
 80130aa:	7992      	ldrb	r2, [r2, #6]
 80130ac:	8099      	strh	r1, [r3, #4]
 80130ae:	719a      	strb	r2, [r3, #6]
	break;
 80130b0:	e014      	b.n	80130dc <CDC_Control_FS+0xe8>

    case CDC_GET_LINE_CODING:
	    memcpy(pbuf,&line_coding,sizeof(USBD_CDC_LineCodingTypeDef));
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	4a0c      	ldr	r2, [pc, #48]	; (80130e8 <CDC_Control_FS+0xf4>)
 80130b6:	6811      	ldr	r1, [r2, #0]
 80130b8:	6019      	str	r1, [r3, #0]
 80130ba:	8891      	ldrh	r1, [r2, #4]
 80130bc:	7992      	ldrb	r2, [r2, #6]
 80130be:	8099      	strh	r1, [r3, #4]
 80130c0:	719a      	strb	r2, [r3, #6]
	break;
 80130c2:	e00b      	b.n	80130dc <CDC_Control_FS+0xe8>

    case CDC_SET_CONTROL_LINE_STATE:
    {
    	// DTR
    	USBD_SetupReqTypedef* req = (USBD_SetupReqTypedef*)pbuf;
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	60fb      	str	r3, [r7, #12]
    	cdc_dtr = (req->wValue & 0x0001);
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	885b      	ldrh	r3, [r3, #2]
 80130cc:	b2db      	uxtb	r3, r3
 80130ce:	f003 0301 	and.w	r3, r3, #1
 80130d2:	b2da      	uxtb	r2, r3
 80130d4:	4b05      	ldr	r3, [pc, #20]	; (80130ec <CDC_Control_FS+0xf8>)
 80130d6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80130d8:	e000      	b.n	80130dc <CDC_Control_FS+0xe8>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80130da:	bf00      	nop
  }

  return (USBD_OK);
 80130dc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3714      	adds	r7, #20
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bc80      	pop	{r7}
 80130e6:	4770      	bx	lr
 80130e8:	200019b8 	.word	0x200019b8
 80130ec:	200014f0 	.word	0x200014f0

080130f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b082      	sub	sp, #8
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  //memcpy(Buf,UserRxBufferFS, length);
	//_write(0,(char*)UserRxBufferFS,*Len);
  CDC_Callback(Buf, Len);
 80130fa:	6839      	ldr	r1, [r7, #0]
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7fe ffc3 	bl	8012088 <CDC_Callback>
  //CDC_Transmit_FS(UserRxBufferFS, *Len); //ECHO

	// Prepare next receive
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS); //next buffer
 8013102:	4906      	ldr	r1, [pc, #24]	; (801311c <CDC_Receive_FS+0x2c>)
 8013104:	4806      	ldr	r0, [pc, #24]	; (8013120 <CDC_Receive_FS+0x30>)
 8013106:	f7ff fee1 	bl	8012ecc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801310a:	4805      	ldr	r0, [pc, #20]	; (8013120 <CDC_Receive_FS+0x30>)
 801310c:	f7ff ff2e 	bl	8012f6c <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 8013110:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013112:	4618      	mov	r0, r3
 8013114:	3708      	adds	r7, #8
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	200012b0 	.word	0x200012b0
 8013120:	20000918 	.word	0x20000918

08013124 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(const char* Buf, uint16_t Len)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	460b      	mov	r3, r1
 801312e:	807b      	strh	r3, [r7, #2]

  /* USER CODE BEGIN 7 */
  if(hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8013130:	4b13      	ldr	r3, [pc, #76]	; (8013180 <CDC_Transmit_FS+0x5c>)
 8013132:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8013136:	2b03      	cmp	r3, #3
 8013138:	d001      	beq.n	801313e <CDC_Transmit_FS+0x1a>
	  return USBD_FAIL;
 801313a:	2302      	movs	r3, #2
 801313c:	e01c      	b.n	8013178 <CDC_Transmit_FS+0x54>
  uint8_t result = USBD_OK;
 801313e:	2300      	movs	r3, #0
 8013140:	73fb      	strb	r3, [r7, #15]
  uint32_t size = sizeof(uint8_t) * Len;
 8013142:	887b      	ldrh	r3, [r7, #2]
 8013144:	60bb      	str	r3, [r7, #8]
//  uint32_t additional_length = 0;

//  if(hcdc->TxState != 0)
//	  additional_length = hcdc->TxLength;

  size = size < APP_TX_DATA_SIZE ? size : APP_TX_DATA_SIZE;
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801314c:	bf28      	it	cs
 801314e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013152:	60bb      	str	r3, [r7, #8]

  memcpy(UserTxBufferFS, Buf, size);
 8013154:	68ba      	ldr	r2, [r7, #8]
 8013156:	6879      	ldr	r1, [r7, #4]
 8013158:	480a      	ldr	r0, [pc, #40]	; (8013184 <CDC_Transmit_FS+0x60>)
 801315a:	f004 fd90 	bl	8017c7e <memcpy>


  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, size);
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	b29b      	uxth	r3, r3
 8013162:	461a      	mov	r2, r3
 8013164:	4907      	ldr	r1, [pc, #28]	; (8013184 <CDC_Transmit_FS+0x60>)
 8013166:	4806      	ldr	r0, [pc, #24]	; (8013180 <CDC_Transmit_FS+0x5c>)
 8013168:	f7ff fe96 	bl	8012e98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801316c:	4804      	ldr	r0, [pc, #16]	; (8013180 <CDC_Transmit_FS+0x5c>)
 801316e:	f7ff febf 	bl	8012ef0 <USBD_CDC_TransmitPacket>
 8013172:	4603      	mov	r3, r0
 8013174:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013176:	7bfb      	ldrb	r3, [r7, #15]
}
 8013178:	4618      	mov	r0, r3
 801317a:	3710      	adds	r7, #16
 801317c:	46bd      	mov	sp, r7
 801317e:	bd80      	pop	{r7, pc}
 8013180:	20000918 	.word	0x20000918
 8013184:	200012f0 	.word	0x200012f0

08013188 <USBD_Composite_IsoINIncomplete>:
uint8_t config_descriptor_buf[CONFIG_DESC_BUF_SIZE];

uint16_t descriptor_size;


static uint8_t USBD_Composite_IsoINIncomplete  (USBD_HandleTypeDef *pdev , uint8_t epnum){
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	460b      	mov	r3, r1
 8013192:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	370c      	adds	r7, #12
 801319a:	46bd      	mov	sp, r7
 801319c:	bc80      	pop	{r7}
 801319e:	4770      	bx	lr

080131a0 <USBD_Composite_IsoOUTIncomplete>:

static uint8_t USBD_Composite_IsoOUTIncomplete  (USBD_HandleTypeDef *pdev , uint8_t epnum){
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
 80131a8:	460b      	mov	r3, r1
 80131aa:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 80131ac:	2300      	movs	r3, #0
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	370c      	adds	r7, #12
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bc80      	pop	{r7}
 80131b6:	4770      	bx	lr

080131b8 <USBD_Composite_SOF>:
static uint8_t  USBD_Composite_SOF (USBD_HandleTypeDef *pdev){
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
	for(int cls = 0; cls < classes; cls++) {
 80131c0:	2300      	movs	r3, #0
 80131c2:	60fb      	str	r3, [r7, #12]
 80131c4:	e010      	b.n	80131e8 <USBD_Composite_SOF+0x30>
		if(USBD_Classes[cls]->SOF){
 80131c6:	4a0e      	ldr	r2, [pc, #56]	; (8013200 <USBD_Composite_SOF+0x48>)
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131ce:	69db      	ldr	r3, [r3, #28]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d006      	beq.n	80131e2 <USBD_Composite_SOF+0x2a>
			USBD_Classes[cls]->SOF(pdev);
 80131d4:	4a0a      	ldr	r2, [pc, #40]	; (8013200 <USBD_Composite_SOF+0x48>)
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131dc:	69db      	ldr	r3, [r3, #28]
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	4798      	blx	r3
	for(int cls = 0; cls < classes; cls++) {
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	3301      	adds	r3, #1
 80131e6:	60fb      	str	r3, [r7, #12]
 80131e8:	4b06      	ldr	r3, [pc, #24]	; (8013204 <USBD_Composite_SOF+0x4c>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	429a      	cmp	r2, r3
 80131f0:	dbe9      	blt.n	80131c6 <USBD_Composite_SOF+0xe>
		}
	}
	USB_SOF();
 80131f2:	f7fe ff9d 	bl	8012130 <USB_SOF>
	return USBD_OK;
 80131f6:	2300      	movs	r3, #0
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3710      	adds	r7, #16
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	200014f8 	.word	0x200014f8
 8013204:	200014f4 	.word	0x200014f4

08013208 <USBD_Composite_EPIN_To_Class>:

void USBD_Composite_EPIN_To_Class(uint8_t ep,uint8_t classid){
 8013208:	b480      	push	{r7}
 801320a:	b083      	sub	sp, #12
 801320c:	af00      	add	r7, sp, #0
 801320e:	4603      	mov	r3, r0
 8013210:	460a      	mov	r2, r1
 8013212:	71fb      	strb	r3, [r7, #7]
 8013214:	4613      	mov	r3, r2
 8013216:	71bb      	strb	r3, [r7, #6]
	in_endpoint_to_class[ep & 0x7F] = classid;
 8013218:	79fb      	ldrb	r3, [r7, #7]
 801321a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801321e:	79ba      	ldrb	r2, [r7, #6]
 8013220:	4903      	ldr	r1, [pc, #12]	; (8013230 <USBD_Composite_EPIN_To_Class+0x28>)
 8013222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013226:	bf00      	nop
 8013228:	370c      	adds	r7, #12
 801322a:	46bd      	mov	sp, r7
 801322c:	bc80      	pop	{r7}
 801322e:	4770      	bx	lr
 8013230:	20001f60 	.word	0x20001f60

08013234 <USBD_Composite_EPOUT_To_Class>:

void USBD_Composite_EPOUT_To_Class(uint8_t ep,uint8_t classid){
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
 801323a:	4603      	mov	r3, r0
 801323c:	460a      	mov	r2, r1
 801323e:	71fb      	strb	r3, [r7, #7]
 8013240:	4613      	mov	r3, r2
 8013242:	71bb      	strb	r3, [r7, #6]
	out_endpoint_to_class[ep & 0x7F] = classid;
 8013244:	79fb      	ldrb	r3, [r7, #7]
 8013246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801324a:	79ba      	ldrb	r2, [r7, #6]
 801324c:	4903      	ldr	r1, [pc, #12]	; (801325c <USBD_Composite_EPOUT_To_Class+0x28>)
 801324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013252:	bf00      	nop
 8013254:	370c      	adds	r7, #12
 8013256:	46bd      	mov	sp, r7
 8013258:	bc80      	pop	{r7}
 801325a:	4770      	bx	lr
 801325c:	20001f20 	.word	0x20001f20

08013260 <USBD_InitCompositeDescriptor>:
void USBD_Composite_Set_Descriptor(uint8_t *descriptor, uint16_t size) {
    config_descriptor = descriptor;
    descriptor_size = size;
}

void USBD_InitCompositeDescriptor(USB_ConfigDescType* base_desc){
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0;i<CONFIG_DESC_BUF_SIZE;i++){
 8013268:	2300      	movs	r3, #0
 801326a:	81fb      	strh	r3, [r7, #14]
 801326c:	e006      	b.n	801327c <USBD_InitCompositeDescriptor+0x1c>
		config_descriptor_buf[i] = 0;
 801326e:	89fb      	ldrh	r3, [r7, #14]
 8013270:	4a0b      	ldr	r2, [pc, #44]	; (80132a0 <USBD_InitCompositeDescriptor+0x40>)
 8013272:	2100      	movs	r1, #0
 8013274:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i<CONFIG_DESC_BUF_SIZE;i++){
 8013276:	89fb      	ldrh	r3, [r7, #14]
 8013278:	3301      	adds	r3, #1
 801327a:	81fb      	strh	r3, [r7, #14]
 801327c:	89fb      	ldrh	r3, [r7, #14]
 801327e:	2bff      	cmp	r3, #255	; 0xff
 8013280:	d9f5      	bls.n	801326e <USBD_InitCompositeDescriptor+0xe>
	}
	memcpy(config_descriptor_buf,base_desc,sizeof(USB_ConfigDescType));
 8013282:	2209      	movs	r2, #9
 8013284:	6879      	ldr	r1, [r7, #4]
 8013286:	4806      	ldr	r0, [pc, #24]	; (80132a0 <USBD_InitCompositeDescriptor+0x40>)
 8013288:	f004 fcf9 	bl	8017c7e <memcpy>
	descriptor_size = sizeof(USB_ConfigDescType);
 801328c:	4b05      	ldr	r3, [pc, #20]	; (80132a4 <USBD_InitCompositeDescriptor+0x44>)
 801328e:	2209      	movs	r2, #9
 8013290:	801a      	strh	r2, [r3, #0]
	config_descriptor = (uint8_t*)&config_descriptor_buf;
 8013292:	4b05      	ldr	r3, [pc, #20]	; (80132a8 <USBD_InitCompositeDescriptor+0x48>)
 8013294:	4a02      	ldr	r2, [pc, #8]	; (80132a0 <USBD_InitCompositeDescriptor+0x40>)
 8013296:	601a      	str	r2, [r3, #0]
}
 8013298:	bf00      	nop
 801329a:	3710      	adds	r7, #16
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}
 80132a0:	20001e20 	.word	0x20001e20
 80132a4:	200019c0 	.word	0x200019c0
 80132a8:	200019c4 	.word	0x200019c4

080132ac <USBD_AddToCompositeDescriptor>:

void USBD_AddToCompositeDescriptor(uint8_t* dev, uint16_t len){
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b084      	sub	sp, #16
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	460b      	mov	r3, r1
 80132b6:	807b      	strh	r3, [r7, #2]
	uint16_t len_base = *dev; // first element contains size of header
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	81fb      	strh	r3, [r7, #14]
	memcpy(&config_descriptor_buf[descriptor_size],dev+len_base,len-len_base);
 80132be:	4b0e      	ldr	r3, [pc, #56]	; (80132f8 <USBD_AddToCompositeDescriptor+0x4c>)
 80132c0:	881b      	ldrh	r3, [r3, #0]
 80132c2:	461a      	mov	r2, r3
 80132c4:	4b0d      	ldr	r3, [pc, #52]	; (80132fc <USBD_AddToCompositeDescriptor+0x50>)
 80132c6:	18d0      	adds	r0, r2, r3
 80132c8:	89fb      	ldrh	r3, [r7, #14]
 80132ca:	687a      	ldr	r2, [r7, #4]
 80132cc:	18d1      	adds	r1, r2, r3
 80132ce:	887a      	ldrh	r2, [r7, #2]
 80132d0:	89fb      	ldrh	r3, [r7, #14]
 80132d2:	1ad3      	subs	r3, r2, r3
 80132d4:	461a      	mov	r2, r3
 80132d6:	f004 fcd2 	bl	8017c7e <memcpy>
	descriptor_size+=len-len_base;
 80132da:	887a      	ldrh	r2, [r7, #2]
 80132dc:	89fb      	ldrh	r3, [r7, #14]
 80132de:	1ad3      	subs	r3, r2, r3
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	4b05      	ldr	r3, [pc, #20]	; (80132f8 <USBD_AddToCompositeDescriptor+0x4c>)
 80132e4:	881b      	ldrh	r3, [r3, #0]
 80132e6:	4413      	add	r3, r2
 80132e8:	b29a      	uxth	r2, r3
 80132ea:	4b03      	ldr	r3, [pc, #12]	; (80132f8 <USBD_AddToCompositeDescriptor+0x4c>)
 80132ec:	801a      	strh	r2, [r3, #0]
}
 80132ee:	bf00      	nop
 80132f0:	3710      	adds	r7, #16
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	200019c0 	.word	0x200019c0
 80132fc:	20001e20 	.word	0x20001e20

08013300 <USBD_Composite_Set_Classes>:


void USBD_Composite_Set_Classes(USBD_ClassTypeDef* class[],uint8_t num,USB_ConfigDescType* base_desc) {
 8013300:	b580      	push	{r7, lr}
 8013302:	b088      	sub	sp, #32
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	460b      	mov	r3, r1
 801330a:	607a      	str	r2, [r7, #4]
 801330c:	72fb      	strb	r3, [r7, #11]
	uint16_t size = 0;
 801330e:	2300      	movs	r3, #0
 8013310:	83fb      	strh	r3, [r7, #30]
	// Count length of descriptors
	for(uint8_t i = 0;i<num;i++){
 8013312:	2300      	movs	r3, #0
 8013314:	777b      	strb	r3, [r7, #29]
 8013316:	e018      	b.n	801334a <USBD_Composite_Set_Classes+0x4a>
		uint16_t ts = 0;
 8013318:	2300      	movs	r3, #0
 801331a:	827b      	strh	r3, [r7, #18]
		uint8_t* d = class[i]->GetFSConfigDescriptor(&ts);
 801331c:	7f7b      	ldrb	r3, [r7, #29]
 801331e:	009b      	lsls	r3, r3, #2
 8013320:	68fa      	ldr	r2, [r7, #12]
 8013322:	4413      	add	r3, r2
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013328:	f107 0212 	add.w	r2, r7, #18
 801332c:	4610      	mov	r0, r2
 801332e:	4798      	blx	r3
 8013330:	6178      	str	r0, [r7, #20]
		size += (ts - *d);
 8013332:	8a7a      	ldrh	r2, [r7, #18]
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	b29b      	uxth	r3, r3
 801333a:	1ad3      	subs	r3, r2, r3
 801333c:	b29a      	uxth	r2, r3
 801333e:	8bfb      	ldrh	r3, [r7, #30]
 8013340:	4413      	add	r3, r2
 8013342:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 0;i<num;i++){
 8013344:	7f7b      	ldrb	r3, [r7, #29]
 8013346:	3301      	adds	r3, #1
 8013348:	777b      	strb	r3, [r7, #29]
 801334a:	7f7a      	ldrb	r2, [r7, #29]
 801334c:	7afb      	ldrb	r3, [r7, #11]
 801334e:	429a      	cmp	r2, r3
 8013350:	d3e2      	bcc.n	8013318 <USBD_Composite_Set_Classes+0x18>
	}
	// Assign length to base descriptor
	base_desc->wTotalLength = size+sizeof(USB_ConfigDescType);
 8013352:	8bfb      	ldrh	r3, [r7, #30]
 8013354:	3309      	adds	r3, #9
 8013356:	b29a      	uxth	r2, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	805a      	strh	r2, [r3, #2]
	USBD_InitCompositeDescriptor(base_desc);
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f7ff ff7f 	bl	8013260 <USBD_InitCompositeDescriptor>

	// Copy class descriptors into composite descriptor
	for(uint8_t i = 0;i<num;i++){
 8013362:	2300      	movs	r3, #0
 8013364:	773b      	strb	r3, [r7, #28]
 8013366:	e01c      	b.n	80133a2 <USBD_Composite_Set_Classes+0xa2>
		uint16_t size = 0;
 8013368:	2300      	movs	r3, #0
 801336a:	823b      	strh	r3, [r7, #16]
		USBD_Classes[i] = class[i];
 801336c:	7f3b      	ldrb	r3, [r7, #28]
 801336e:	009b      	lsls	r3, r3, #2
 8013370:	68fa      	ldr	r2, [r7, #12]
 8013372:	441a      	add	r2, r3
 8013374:	7f3b      	ldrb	r3, [r7, #28]
 8013376:	6812      	ldr	r2, [r2, #0]
 8013378:	490f      	ldr	r1, [pc, #60]	; (80133b8 <USBD_Composite_Set_Classes+0xb8>)
 801337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint8_t* desc = USBD_Classes[i]->GetFSConfigDescriptor(&size);
 801337e:	7f3b      	ldrb	r3, [r7, #28]
 8013380:	4a0d      	ldr	r2, [pc, #52]	; (80133b8 <USBD_Composite_Set_Classes+0xb8>)
 8013382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013388:	f107 0210 	add.w	r2, r7, #16
 801338c:	4610      	mov	r0, r2
 801338e:	4798      	blx	r3
 8013390:	61b8      	str	r0, [r7, #24]
		USBD_AddToCompositeDescriptor(desc, size);
 8013392:	8a3b      	ldrh	r3, [r7, #16]
 8013394:	4619      	mov	r1, r3
 8013396:	69b8      	ldr	r0, [r7, #24]
 8013398:	f7ff ff88 	bl	80132ac <USBD_AddToCompositeDescriptor>
	for(uint8_t i = 0;i<num;i++){
 801339c:	7f3b      	ldrb	r3, [r7, #28]
 801339e:	3301      	adds	r3, #1
 80133a0:	773b      	strb	r3, [r7, #28]
 80133a2:	7f3a      	ldrb	r2, [r7, #28]
 80133a4:	7afb      	ldrb	r3, [r7, #11]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d3de      	bcc.n	8013368 <USBD_Composite_Set_Classes+0x68>
	}

	classes = num;
 80133aa:	7afb      	ldrb	r3, [r7, #11]
 80133ac:	4a03      	ldr	r2, [pc, #12]	; (80133bc <USBD_Composite_Set_Classes+0xbc>)
 80133ae:	6013      	str	r3, [r2, #0]
}
 80133b0:	bf00      	nop
 80133b2:	3720      	adds	r7, #32
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}
 80133b8:	200014f8 	.word	0x200014f8
 80133bc:	200014f4 	.word	0x200014f4

080133c0 <USBD_Composite_Init>:

static uint8_t USBD_Composite_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	460b      	mov	r3, r1
 80133ca:	70fb      	strb	r3, [r7, #3]
  for(int cls = 0; cls < classes; cls++) {
 80133cc:	2300      	movs	r3, #0
 80133ce:	60fb      	str	r3, [r7, #12]
 80133d0:	e012      	b.n	80133f8 <USBD_Composite_Init+0x38>
	  uint8_t ret = USBD_Classes[cls]->Init(pdev, cfgidx);
 80133d2:	4a0e      	ldr	r2, [pc, #56]	; (801340c <USBD_Composite_Init+0x4c>)
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	78fa      	ldrb	r2, [r7, #3]
 80133de:	4611      	mov	r1, r2
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	4798      	blx	r3
 80133e4:	4603      	mov	r3, r0
 80133e6:	72fb      	strb	r3, [r7, #11]
      if (ret != USBD_OK) {
 80133e8:	7afb      	ldrb	r3, [r7, #11]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d001      	beq.n	80133f2 <USBD_Composite_Init+0x32>
          return USBD_FAIL;
 80133ee:	2302      	movs	r3, #2
 80133f0:	e008      	b.n	8013404 <USBD_Composite_Init+0x44>
  for(int cls = 0; cls < classes; cls++) {
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	3301      	adds	r3, #1
 80133f6:	60fb      	str	r3, [r7, #12]
 80133f8:	4b05      	ldr	r3, [pc, #20]	; (8013410 <USBD_Composite_Init+0x50>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	68fa      	ldr	r2, [r7, #12]
 80133fe:	429a      	cmp	r2, r3
 8013400:	dbe7      	blt.n	80133d2 <USBD_Composite_Init+0x12>
      }

  }

  return USBD_OK;
 8013402:	2300      	movs	r3, #0
}
 8013404:	4618      	mov	r0, r3
 8013406:	3710      	adds	r7, #16
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	200014f8 	.word	0x200014f8
 8013410:	200014f4 	.word	0x200014f4

08013414 <USBD_Composite_DeInit>:

static uint8_t  USBD_Composite_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	460b      	mov	r3, r1
 801341e:	70fb      	strb	r3, [r7, #3]
  for(int cls = 0; cls < classes; cls++) {
 8013420:	2300      	movs	r3, #0
 8013422:	60fb      	str	r3, [r7, #12]
 8013424:	e012      	b.n	801344c <USBD_Composite_DeInit+0x38>
	  uint8_t ret = USBD_Classes[cls]->DeInit(pdev, cfgidx);
 8013426:	4a0e      	ldr	r2, [pc, #56]	; (8013460 <USBD_Composite_DeInit+0x4c>)
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	78fa      	ldrb	r2, [r7, #3]
 8013432:	4611      	mov	r1, r2
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	4798      	blx	r3
 8013438:	4603      	mov	r3, r0
 801343a:	72fb      	strb	r3, [r7, #11]
      if (ret != USBD_OK) {
 801343c:	7afb      	ldrb	r3, [r7, #11]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d001      	beq.n	8013446 <USBD_Composite_DeInit+0x32>
          return USBD_FAIL;
 8013442:	2302      	movs	r3, #2
 8013444:	e008      	b.n	8013458 <USBD_Composite_DeInit+0x44>
  for(int cls = 0; cls < classes; cls++) {
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	3301      	adds	r3, #1
 801344a:	60fb      	str	r3, [r7, #12]
 801344c:	4b05      	ldr	r3, [pc, #20]	; (8013464 <USBD_Composite_DeInit+0x50>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	68fa      	ldr	r2, [r7, #12]
 8013452:	429a      	cmp	r2, r3
 8013454:	dbe7      	blt.n	8013426 <USBD_Composite_DeInit+0x12>
      }
  }

  return USBD_OK;
 8013456:	2300      	movs	r3, #0
}
 8013458:	4618      	mov	r0, r3
 801345a:	3710      	adds	r7, #16
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}
 8013460:	200014f8 	.word	0x200014f8
 8013464:	200014f4 	.word	0x200014f4

08013468 <USBD_Composite_Setup>:

static uint8_t USBD_Composite_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6039      	str	r1, [r7, #0]
  uint8_t idx = interface_to_class[req->wIndex & 0x7F];
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	889b      	ldrh	r3, [r3, #4]
 8013476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801347a:	4a21      	ldr	r2, [pc, #132]	; (8013500 <USBD_Composite_Setup+0x98>)
 801347c:	5cd3      	ldrb	r3, [r2, r3]
 801347e:	72fb      	strb	r3, [r7, #11]

  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013488:	2b00      	cmp	r3, #0
 801348a:	d00b      	beq.n	80134a4 <USBD_Composite_Setup+0x3c>
 801348c:	2b20      	cmp	r3, #32
 801348e:	d132      	bne.n	80134f6 <USBD_Composite_Setup+0x8e>
    case USB_REQ_TYPE_CLASS:
    	//TODO Correct class ids?
    	return USBD_Classes[idx]->Setup(pdev, req);
 8013490:	7afb      	ldrb	r3, [r7, #11]
 8013492:	4a1c      	ldr	r2, [pc, #112]	; (8013504 <USBD_Composite_Setup+0x9c>)
 8013494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013498:	689b      	ldr	r3, [r3, #8]
 801349a:	6839      	ldr	r1, [r7, #0]
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	4798      	blx	r3
 80134a0:	4603      	mov	r3, r0
 80134a2:	e029      	b.n	80134f8 <USBD_Composite_Setup+0x90>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest) {
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	785b      	ldrb	r3, [r3, #1]
 80134a8:	2b06      	cmp	r3, #6
 80134aa:	d11a      	bne.n	80134e2 <USBD_Composite_Setup+0x7a>

        case USB_REQ_GET_DESCRIPTOR :

          for(int cls = 0; cls < classes; cls++) {
 80134ac:	2300      	movs	r3, #0
 80134ae:	60fb      	str	r3, [r7, #12]
 80134b0:	e011      	b.n	80134d6 <USBD_Composite_Setup+0x6e>
        	  uint8_t ret = USBD_Classes[cls]->Setup(pdev, req);
 80134b2:	4a14      	ldr	r2, [pc, #80]	; (8013504 <USBD_Composite_Setup+0x9c>)
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134ba:	689b      	ldr	r3, [r3, #8]
 80134bc:	6839      	ldr	r1, [r7, #0]
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	4798      	blx	r3
 80134c2:	4603      	mov	r3, r0
 80134c4:	72bb      	strb	r3, [r7, #10]
            if (ret != USBD_OK) {
 80134c6:	7abb      	ldrb	r3, [r7, #10]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d001      	beq.n	80134d0 <USBD_Composite_Setup+0x68>
              return USBD_FAIL;
 80134cc:	2302      	movs	r3, #2
 80134ce:	e013      	b.n	80134f8 <USBD_Composite_Setup+0x90>
          for(int cls = 0; cls < classes; cls++) {
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	3301      	adds	r3, #1
 80134d4:	60fb      	str	r3, [r7, #12]
 80134d6:	4b0c      	ldr	r3, [pc, #48]	; (8013508 <USBD_Composite_Setup+0xa0>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	68fa      	ldr	r2, [r7, #12]
 80134dc:	429a      	cmp	r2, r3
 80134de:	dbe8      	blt.n	80134b2 <USBD_Composite_Setup+0x4a>
            }
          }

        break;
 80134e0:	e009      	b.n	80134f6 <USBD_Composite_Setup+0x8e>

		case USB_REQ_GET_INTERFACE :
		case USB_REQ_SET_INTERFACE :
		default:

			return USBD_Classes[idx]->Setup(pdev, req);
 80134e2:	7afb      	ldrb	r3, [r7, #11]
 80134e4:	4a07      	ldr	r2, [pc, #28]	; (8013504 <USBD_Composite_Setup+0x9c>)
 80134e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134ea:	689b      	ldr	r3, [r3, #8]
 80134ec:	6839      	ldr	r1, [r7, #0]
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	4798      	blx	r3
 80134f2:	4603      	mov	r3, r0
 80134f4:	e000      	b.n	80134f8 <USBD_Composite_Setup+0x90>
		  }
  }
  return USBD_OK;
 80134f6:	2300      	movs	r3, #0
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	3710      	adds	r7, #16
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	200000f8 	.word	0x200000f8
 8013504:	200014f8 	.word	0x200014f8
 8013508:	200014f4 	.word	0x200014f4

0801350c <USBD_Composite_DataIn>:

static uint8_t USBD_Composite_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum) {
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	460b      	mov	r3, r1
 8013516:	70fb      	strb	r3, [r7, #3]
  int class_index;

  class_index = in_endpoint_to_class[epnum];
 8013518:	78fb      	ldrb	r3, [r7, #3]
 801351a:	4a0a      	ldr	r2, [pc, #40]	; (8013544 <USBD_Composite_DataIn+0x38>)
 801351c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013520:	60fb      	str	r3, [r7, #12]
  uint8_t ret = USBD_Classes[class_index]->DataIn(pdev, epnum);
 8013522:	4a09      	ldr	r2, [pc, #36]	; (8013548 <USBD_Composite_DataIn+0x3c>)
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801352a:	695b      	ldr	r3, [r3, #20]
 801352c:	78fa      	ldrb	r2, [r7, #3]
 801352e:	4611      	mov	r1, r2
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	4798      	blx	r3
 8013534:	4603      	mov	r3, r0
 8013536:	72fb      	strb	r3, [r7, #11]
  return ret;
 8013538:	7afb      	ldrb	r3, [r7, #11]
}
 801353a:	4618      	mov	r0, r3
 801353c:	3710      	adds	r7, #16
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
 8013542:	bf00      	nop
 8013544:	20001f60 	.word	0x20001f60
 8013548:	200014f8 	.word	0x200014f8

0801354c <USBD_Composite_DataOut>:

static uint8_t USBD_Composite_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum) {
 801354c:	b580      	push	{r7, lr}
 801354e:	b084      	sub	sp, #16
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	460b      	mov	r3, r1
 8013556:	70fb      	strb	r3, [r7, #3]
  int class_index;

  class_index = out_endpoint_to_class[epnum];
 8013558:	78fb      	ldrb	r3, [r7, #3]
 801355a:	4a0a      	ldr	r2, [pc, #40]	; (8013584 <USBD_Composite_DataOut+0x38>)
 801355c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013560:	60fb      	str	r3, [r7, #12]

  uint8_t ret = USBD_Classes[class_index]->DataOut(pdev, epnum);
 8013562:	4a09      	ldr	r2, [pc, #36]	; (8013588 <USBD_Composite_DataOut+0x3c>)
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801356a:	699b      	ldr	r3, [r3, #24]
 801356c:	78fa      	ldrb	r2, [r7, #3]
 801356e:	4611      	mov	r1, r2
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	4798      	blx	r3
 8013574:	4603      	mov	r3, r0
 8013576:	72fb      	strb	r3, [r7, #11]
  return ret;
 8013578:	7afb      	ldrb	r3, [r7, #11]

}
 801357a:	4618      	mov	r0, r3
 801357c:	3710      	adds	r7, #16
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	20001f20 	.word	0x20001f20
 8013588:	200014f8 	.word	0x200014f8

0801358c <USBD_Composite_EP0_RxReady>:

static uint8_t USBD_Composite_EP0_RxReady (USBD_HandleTypeDef *pdev) {
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
  for(int cls = 0; cls < classes; cls++) {
 8013594:	2300      	movs	r3, #0
 8013596:	60fb      	str	r3, [r7, #12]
 8013598:	e017      	b.n	80135ca <USBD_Composite_EP0_RxReady+0x3e>
    if (USBD_Classes[cls]->EP0_RxReady != NULL) {
 801359a:	4a11      	ldr	r2, [pc, #68]	; (80135e0 <USBD_Composite_EP0_RxReady+0x54>)
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135a2:	691b      	ldr	r3, [r3, #16]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d00d      	beq.n	80135c4 <USBD_Composite_EP0_RxReady+0x38>
    	uint8_t ret = USBD_Classes[cls]->EP0_RxReady(pdev);
 80135a8:	4a0d      	ldr	r2, [pc, #52]	; (80135e0 <USBD_Composite_EP0_RxReady+0x54>)
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135b0:	691b      	ldr	r3, [r3, #16]
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	4798      	blx	r3
 80135b6:	4603      	mov	r3, r0
 80135b8:	72fb      	strb	r3, [r7, #11]
        if (ret != USBD_OK) {
 80135ba:	7afb      	ldrb	r3, [r7, #11]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d001      	beq.n	80135c4 <USBD_Composite_EP0_RxReady+0x38>
        	return USBD_FAIL;
 80135c0:	2302      	movs	r3, #2
 80135c2:	e008      	b.n	80135d6 <USBD_Composite_EP0_RxReady+0x4a>
  for(int cls = 0; cls < classes; cls++) {
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	3301      	adds	r3, #1
 80135c8:	60fb      	str	r3, [r7, #12]
 80135ca:	4b06      	ldr	r3, [pc, #24]	; (80135e4 <USBD_Composite_EP0_RxReady+0x58>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	68fa      	ldr	r2, [r7, #12]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	dbe2      	blt.n	801359a <USBD_Composite_EP0_RxReady+0xe>
      }
    }
  }
  return USBD_OK;
 80135d4:	2300      	movs	r3, #0
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	3710      	adds	r7, #16
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}
 80135de:	bf00      	nop
 80135e0:	200014f8 	.word	0x200014f8
 80135e4:	200014f4 	.word	0x200014f4

080135e8 <USBD_Composite_EP0_TxSent>:

static uint8_t USBD_Composite_EP0_TxSent (USBD_HandleTypeDef *pdev){
 80135e8:	b480      	push	{r7}
 80135ea:	b083      	sub	sp, #12
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
	return USBD_OK;
 80135f0:	2300      	movs	r3, #0
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	370c      	adds	r7, #12
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bc80      	pop	{r7}
 80135fa:	4770      	bx	lr

080135fc <USBD_Composite_GetFSCfgDesc>:

static uint8_t  *USBD_Composite_GetFSCfgDesc (uint16_t *length) {
 80135fc:	b480      	push	{r7}
 80135fe:	b083      	sub	sp, #12
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 8013604:	4b05      	ldr	r3, [pc, #20]	; (801361c <USBD_Composite_GetFSCfgDesc+0x20>)
 8013606:	881a      	ldrh	r2, [r3, #0]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 801360c:	4b04      	ldr	r3, [pc, #16]	; (8013620 <USBD_Composite_GetFSCfgDesc+0x24>)
 801360e:	681b      	ldr	r3, [r3, #0]
}
 8013610:	4618      	mov	r0, r3
 8013612:	370c      	adds	r7, #12
 8013614:	46bd      	mov	sp, r7
 8013616:	bc80      	pop	{r7}
 8013618:	4770      	bx	lr
 801361a:	bf00      	nop
 801361c:	200019c0 	.word	0x200019c0
 8013620:	200019c4 	.word	0x200019c4

08013624 <USBD_Composite_GetHSCfgDesc>:

static uint8_t  *USBD_Composite_GetHSCfgDesc (uint16_t *length) {
 8013624:	b480      	push	{r7}
 8013626:	b083      	sub	sp, #12
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 801362c:	4b05      	ldr	r3, [pc, #20]	; (8013644 <USBD_Composite_GetHSCfgDesc+0x20>)
 801362e:	881a      	ldrh	r2, [r3, #0]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 8013634:	4b04      	ldr	r3, [pc, #16]	; (8013648 <USBD_Composite_GetHSCfgDesc+0x24>)
 8013636:	681b      	ldr	r3, [r3, #0]
}
 8013638:	4618      	mov	r0, r3
 801363a:	370c      	adds	r7, #12
 801363c:	46bd      	mov	sp, r7
 801363e:	bc80      	pop	{r7}
 8013640:	4770      	bx	lr
 8013642:	bf00      	nop
 8013644:	200019c0 	.word	0x200019c0
 8013648:	200019c4 	.word	0x200019c4

0801364c <USBD_Composite_GetOtherSpeedCfgDesc>:

static uint8_t  *USBD_Composite_GetOtherSpeedCfgDesc (uint16_t *length) {
 801364c:	b480      	push	{r7}
 801364e:	b083      	sub	sp, #12
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 8013654:	4b05      	ldr	r3, [pc, #20]	; (801366c <USBD_Composite_GetOtherSpeedCfgDesc+0x20>)
 8013656:	881a      	ldrh	r2, [r3, #0]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 801365c:	4b04      	ldr	r3, [pc, #16]	; (8013670 <USBD_Composite_GetOtherSpeedCfgDesc+0x24>)
 801365e:	681b      	ldr	r3, [r3, #0]
}
 8013660:	4618      	mov	r0, r3
 8013662:	370c      	adds	r7, #12
 8013664:	46bd      	mov	sp, r7
 8013666:	bc80      	pop	{r7}
 8013668:	4770      	bx	lr
 801366a:	bf00      	nop
 801366c:	200019c0 	.word	0x200019c0
 8013670:	200019c4 	.word	0x200019c4

08013674 <USBD_Composite_GetDeviceQualifierDescriptor>:
  0x40,
  0x01,
  0x00,
};

uint8_t  *USBD_Composite_GetDeviceQualifierDescriptor (uint16_t *length) {
 8013674:	b480      	push	{r7}
 8013676:	b083      	sub	sp, #12
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Composite_DeviceQualifierDesc);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	220a      	movs	r2, #10
 8013680:	801a      	strh	r2, [r3, #0]
  return USBD_Composite_DeviceQualifierDesc;
 8013682:	4b03      	ldr	r3, [pc, #12]	; (8013690 <USBD_Composite_GetDeviceQualifierDescriptor+0x1c>)
}
 8013684:	4618      	mov	r0, r3
 8013686:	370c      	adds	r7, #12
 8013688:	46bd      	mov	sp, r7
 801368a:	bc80      	pop	{r7}
 801368c:	4770      	bx	lr
 801368e:	bf00      	nop
 8013690:	20000108 	.word	0x20000108

08013694 <USBD_Composite_InterfaceToClass>:


void USBD_Composite_InterfaceToClass(uint8_t ifid, uint8_t clsid){
 8013694:	b480      	push	{r7}
 8013696:	b083      	sub	sp, #12
 8013698:	af00      	add	r7, sp, #0
 801369a:	4603      	mov	r3, r0
 801369c:	460a      	mov	r2, r1
 801369e:	71fb      	strb	r3, [r7, #7]
 80136a0:	4613      	mov	r3, r2
 80136a2:	71bb      	strb	r3, [r7, #6]
	interface_to_class[ifid] = clsid;
 80136a4:	79fb      	ldrb	r3, [r7, #7]
 80136a6:	4904      	ldr	r1, [pc, #16]	; (80136b8 <USBD_Composite_InterfaceToClass+0x24>)
 80136a8:	79ba      	ldrb	r2, [r7, #6]
 80136aa:	54ca      	strb	r2, [r1, r3]
}
 80136ac:	bf00      	nop
 80136ae:	370c      	adds	r7, #12
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bc80      	pop	{r7}
 80136b4:	4770      	bx	lr
 80136b6:	bf00      	nop
 80136b8:	200000f8 	.word	0x200000f8

080136bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80136d0:	4619      	mov	r1, r3
 80136d2:	4610      	mov	r0, r2
 80136d4:	f000 faf2 	bl	8013cbc <USBD_LL_SetupStage>
}
 80136d8:	bf00      	nop
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b082      	sub	sp, #8
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	460b      	mov	r3, r1
 80136ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80136f2:	78fb      	ldrb	r3, [r7, #3]
 80136f4:	687a      	ldr	r2, [r7, #4]
 80136f6:	015b      	lsls	r3, r3, #5
 80136f8:	4413      	add	r3, r2
 80136fa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	78fb      	ldrb	r3, [r7, #3]
 8013702:	4619      	mov	r1, r3
 8013704:	f000 fb25 	bl	8013d52 <USBD_LL_DataOutStage>
}
 8013708:	bf00      	nop
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}

08013710 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	460b      	mov	r3, r1
 801371a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8013722:	78fb      	ldrb	r3, [r7, #3]
 8013724:	687a      	ldr	r2, [r7, #4]
 8013726:	015b      	lsls	r3, r3, #5
 8013728:	4413      	add	r3, r2
 801372a:	333c      	adds	r3, #60	; 0x3c
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	78fb      	ldrb	r3, [r7, #3]
 8013730:	4619      	mov	r1, r3
 8013732:	f000 fb7f 	bl	8013e34 <USBD_LL_DataInStage>
}
 8013736:	bf00      	nop
 8013738:	3708      	adds	r7, #8
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801373e:	b580      	push	{r7, lr}
 8013740:	b082      	sub	sp, #8
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801374c:	4618      	mov	r0, r3
 801374e:	f000 fc88 	bl	8014062 <USBD_LL_SOF>
}
 8013752:	bf00      	nop
 8013754:	3708      	adds	r7, #8
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}

0801375a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801375a:	b580      	push	{r7, lr}
 801375c:	b084      	sub	sp, #16
 801375e:	af00      	add	r7, sp, #0
 8013760:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013762:	2301      	movs	r3, #1
 8013764:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	689b      	ldr	r3, [r3, #8]
 801376a:	2b02      	cmp	r3, #2
 801376c:	d001      	beq.n	8013772 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801376e:	f7ee f925 	bl	80019bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013778:	7bfa      	ldrb	r2, [r7, #15]
 801377a:	4611      	mov	r1, r2
 801377c:	4618      	mov	r0, r3
 801377e:	f000 fc38 	bl	8013ff2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013788:	4618      	mov	r0, r3
 801378a:	f000 fbf8 	bl	8013f7e <USBD_LL_Reset>
}
 801378e:	bf00      	nop
 8013790:	3710      	adds	r7, #16
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
	...

08013798 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80137a6:	4618      	mov	r0, r3
 80137a8:	f000 fc32 	bl	8014010 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	699b      	ldr	r3, [r3, #24]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d005      	beq.n	80137c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80137b4:	4b04      	ldr	r3, [pc, #16]	; (80137c8 <HAL_PCD_SuspendCallback+0x30>)
 80137b6:	691b      	ldr	r3, [r3, #16]
 80137b8:	4a03      	ldr	r2, [pc, #12]	; (80137c8 <HAL_PCD_SuspendCallback+0x30>)
 80137ba:	f043 0306 	orr.w	r3, r3, #6
 80137be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80137c0:	bf00      	nop
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	e000ed00 	.word	0xe000ed00

080137cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80137da:	4618      	mov	r0, r3
 80137dc:	f000 fc2c 	bl	8014038 <USBD_LL_Resume>
}
 80137e0:	bf00      	nop
 80137e2:	3708      	adds	r7, #8
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80137f0:	4a31      	ldr	r2, [pc, #196]	; (80138b8 <USBD_LL_Init+0xd0>)
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	4a2f      	ldr	r2, [pc, #188]	; (80138b8 <USBD_LL_Init+0xd0>)
 80137fc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8013800:	4b2d      	ldr	r3, [pc, #180]	; (80138b8 <USBD_LL_Init+0xd0>)
 8013802:	4a2e      	ldr	r2, [pc, #184]	; (80138bc <USBD_LL_Init+0xd4>)
 8013804:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013806:	4b2c      	ldr	r3, [pc, #176]	; (80138b8 <USBD_LL_Init+0xd0>)
 8013808:	2208      	movs	r2, #8
 801380a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801380c:	4b2a      	ldr	r3, [pc, #168]	; (80138b8 <USBD_LL_Init+0xd0>)
 801380e:	2202      	movs	r2, #2
 8013810:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013812:	4b29      	ldr	r3, [pc, #164]	; (80138b8 <USBD_LL_Init+0xd0>)
 8013814:	2200      	movs	r2, #0
 8013816:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013818:	4b27      	ldr	r3, [pc, #156]	; (80138b8 <USBD_LL_Init+0xd0>)
 801381a:	2200      	movs	r2, #0
 801381c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801381e:	4b26      	ldr	r3, [pc, #152]	; (80138b8 <USBD_LL_Init+0xd0>)
 8013820:	2200      	movs	r2, #0
 8013822:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013824:	4824      	ldr	r0, [pc, #144]	; (80138b8 <USBD_LL_Init+0xd0>)
 8013826:	f7f0 fe35 	bl	8004494 <HAL_PCD_Init>
 801382a:	4603      	mov	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	d001      	beq.n	8013834 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8013830:	f7ee f8c4 	bl	80019bc <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);*/


  //CDC ENDPOINTS
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x38);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801383a:	2338      	movs	r3, #56	; 0x38
 801383c:	2200      	movs	r2, #0
 801383e:	2100      	movs	r1, #0
 8013840:	f7f1 fcce 	bl	80051e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x88);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801384a:	2388      	movs	r3, #136	; 0x88
 801384c:	2200      	movs	r2, #0
 801384e:	2180      	movs	r1, #128	; 0x80
 8013850:	f7f1 fcc6 	bl	80051e0 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xF0);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801385a:	23f0      	movs	r3, #240	; 0xf0
 801385c:	2200      	movs	r2, #0
 801385e:	2181      	movs	r1, #129	; 0x81
 8013860:	f7f1 fcbe 	bl	80051e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x140);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801386a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801386e:	2200      	movs	r2, #0
 8013870:	2101      	movs	r1, #1
 8013872:	f7f1 fcb5 	bl	80051e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x130);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801387c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8013880:	2200      	movs	r2, #0
 8013882:	2182      	movs	r1, #130	; 0x82
 8013884:	f7f1 fcac 	bl	80051e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x83 , PCD_SNG_BUF, 0x180);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801388e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8013892:	2200      	movs	r2, #0
 8013894:	2183      	movs	r1, #131	; 0x83
 8013896:	f7f1 fca3 	bl	80051e0 <HAL_PCDEx_PMAConfig>
   HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x02 , PCD_SNG_BUF, 0x1D0);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80138a0:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80138a4:	2200      	movs	r2, #0
 80138a6:	2102      	movs	r1, #2
 80138a8:	f7f1 fc9a 	bl	80051e0 <HAL_PCDEx_PMAConfig>

  return USBD_OK;
 80138ac:	2300      	movs	r3, #0
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3708      	adds	r7, #8
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
 80138b6:	bf00      	nop
 80138b8:	2000171c 	.word	0x2000171c
 80138bc:	40005c00 	.word	0x40005c00

080138c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138c8:	2300      	movs	r3, #0
 80138ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138cc:	2300      	movs	r3, #0
 80138ce:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7f0 febd 	bl	8004656 <HAL_PCD_Start>
 80138dc:	4603      	mov	r3, r0
 80138de:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80138e0:	7bfb      	ldrb	r3, [r7, #15]
 80138e2:	4618      	mov	r0, r3
 80138e4:	f000 f932 	bl	8013b4c <USBD_Get_USB_Status>
 80138e8:	4603      	mov	r3, r0
 80138ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80138ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3710      	adds	r7, #16
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}

080138f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b084      	sub	sp, #16
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	6078      	str	r0, [r7, #4]
 80138fe:	4608      	mov	r0, r1
 8013900:	4611      	mov	r1, r2
 8013902:	461a      	mov	r2, r3
 8013904:	4603      	mov	r3, r0
 8013906:	70fb      	strb	r3, [r7, #3]
 8013908:	460b      	mov	r3, r1
 801390a:	70bb      	strb	r3, [r7, #2]
 801390c:	4613      	mov	r3, r2
 801390e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013910:	2300      	movs	r3, #0
 8013912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013914:	2300      	movs	r3, #0
 8013916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801391e:	78bb      	ldrb	r3, [r7, #2]
 8013920:	883a      	ldrh	r2, [r7, #0]
 8013922:	78f9      	ldrb	r1, [r7, #3]
 8013924:	f7f0 fff0 	bl	8004908 <HAL_PCD_EP_Open>
 8013928:	4603      	mov	r3, r0
 801392a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801392c:	7bfb      	ldrb	r3, [r7, #15]
 801392e:	4618      	mov	r0, r3
 8013930:	f000 f90c 	bl	8013b4c <USBD_Get_USB_Status>
 8013934:	4603      	mov	r3, r0
 8013936:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8013938:	7bbb      	ldrb	r3, [r7, #14]
}
 801393a:	4618      	mov	r0, r3
 801393c:	3710      	adds	r7, #16
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}

08013942 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013942:	b580      	push	{r7, lr}
 8013944:	b084      	sub	sp, #16
 8013946:	af00      	add	r7, sp, #0
 8013948:	6078      	str	r0, [r7, #4]
 801394a:	460b      	mov	r3, r1
 801394c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801394e:	2300      	movs	r3, #0
 8013950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013952:	2300      	movs	r3, #0
 8013954:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801395c:	78fa      	ldrb	r2, [r7, #3]
 801395e:	4611      	mov	r1, r2
 8013960:	4618      	mov	r0, r3
 8013962:	f7f1 f831 	bl	80049c8 <HAL_PCD_EP_Close>
 8013966:	4603      	mov	r3, r0
 8013968:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 801396a:	7bfb      	ldrb	r3, [r7, #15]
 801396c:	4618      	mov	r0, r3
 801396e:	f000 f8ed 	bl	8013b4c <USBD_Get_USB_Status>
 8013972:	4603      	mov	r3, r0
 8013974:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8013976:	7bbb      	ldrb	r3, [r7, #14]
}
 8013978:	4618      	mov	r0, r3
 801397a:	3710      	adds	r7, #16
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	460b      	mov	r3, r1
 801398a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801398c:	2300      	movs	r3, #0
 801398e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013990:	2300      	movs	r3, #0
 8013992:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801399a:	78fa      	ldrb	r2, [r7, #3]
 801399c:	4611      	mov	r1, r2
 801399e:	4618      	mov	r0, r3
 80139a0:	f7f1 f8db 	bl	8004b5a <HAL_PCD_EP_SetStall>
 80139a4:	4603      	mov	r3, r0
 80139a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139a8:	7bfb      	ldrb	r3, [r7, #15]
 80139aa:	4618      	mov	r0, r3
 80139ac:	f000 f8ce 	bl	8013b4c <USBD_Get_USB_Status>
 80139b0:	4603      	mov	r3, r0
 80139b2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80139b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3710      	adds	r7, #16
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}

080139be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139be:	b580      	push	{r7, lr}
 80139c0:	b084      	sub	sp, #16
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
 80139c6:	460b      	mov	r3, r1
 80139c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139ca:	2300      	movs	r3, #0
 80139cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139ce:	2300      	movs	r3, #0
 80139d0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80139d8:	78fa      	ldrb	r2, [r7, #3]
 80139da:	4611      	mov	r1, r2
 80139dc:	4618      	mov	r0, r3
 80139de:	f7f1 f916 	bl	8004c0e <HAL_PCD_EP_ClrStall>
 80139e2:	4603      	mov	r3, r0
 80139e4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80139e6:	7bfb      	ldrb	r3, [r7, #15]
 80139e8:	4618      	mov	r0, r3
 80139ea:	f000 f8af 	bl	8013b4c <USBD_Get_USB_Status>
 80139ee:	4603      	mov	r3, r0
 80139f0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80139f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3710      	adds	r7, #16
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139fc:	b480      	push	{r7}
 80139fe:	b085      	sub	sp, #20
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	460b      	mov	r3, r1
 8013a06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013a0e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8013a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	da08      	bge.n	8013a2a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8013a18:	78fb      	ldrb	r3, [r7, #3]
 8013a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	015b      	lsls	r3, r3, #5
 8013a22:	4413      	add	r3, r2
 8013a24:	332a      	adds	r3, #42	; 0x2a
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	e008      	b.n	8013a3c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8013a2a:	78fb      	ldrb	r3, [r7, #3]
 8013a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a30:	68fa      	ldr	r2, [r7, #12]
 8013a32:	015b      	lsls	r3, r3, #5
 8013a34:	4413      	add	r3, r2
 8013a36:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8013a3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3714      	adds	r7, #20
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bc80      	pop	{r7}
 8013a44:	4770      	bx	lr

08013a46 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b084      	sub	sp, #16
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	6078      	str	r0, [r7, #4]
 8013a4e:	460b      	mov	r3, r1
 8013a50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a52:	2300      	movs	r3, #0
 8013a54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a56:	2300      	movs	r3, #0
 8013a58:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013a60:	78fa      	ldrb	r2, [r7, #3]
 8013a62:	4611      	mov	r1, r2
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7f0 ff2a 	bl	80048be <HAL_PCD_SetAddress>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a6e:	7bfb      	ldrb	r3, [r7, #15]
 8013a70:	4618      	mov	r0, r3
 8013a72:	f000 f86b 	bl	8013b4c <USBD_Get_USB_Status>
 8013a76:	4603      	mov	r3, r0
 8013a78:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8013a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3710      	adds	r7, #16
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}

08013a84 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b086      	sub	sp, #24
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	60f8      	str	r0, [r7, #12]
 8013a8c:	607a      	str	r2, [r7, #4]
 8013a8e:	461a      	mov	r2, r3
 8013a90:	460b      	mov	r3, r1
 8013a92:	72fb      	strb	r3, [r7, #11]
 8013a94:	4613      	mov	r3, r2
 8013a96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013aa6:	893b      	ldrh	r3, [r7, #8]
 8013aa8:	7af9      	ldrb	r1, [r7, #11]
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	f7f1 f81c 	bl	8004ae8 <HAL_PCD_EP_Transmit>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ab4:	7dfb      	ldrb	r3, [r7, #23]
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f000 f848 	bl	8013b4c <USBD_Get_USB_Status>
 8013abc:	4603      	mov	r3, r0
 8013abe:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8013ac0:	7dbb      	ldrb	r3, [r7, #22]
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3718      	adds	r7, #24
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b086      	sub	sp, #24
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	60f8      	str	r0, [r7, #12]
 8013ad2:	607a      	str	r2, [r7, #4]
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	72fb      	strb	r3, [r7, #11]
 8013ada:	4613      	mov	r3, r2
 8013adc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013aec:	893b      	ldrh	r3, [r7, #8]
 8013aee:	7af9      	ldrb	r1, [r7, #11]
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	f7f0 ffab 	bl	8004a4c <HAL_PCD_EP_Receive>
 8013af6:	4603      	mov	r3, r0
 8013af8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013afa:	7dfb      	ldrb	r3, [r7, #23]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f000 f825 	bl	8013b4c <USBD_Get_USB_Status>
 8013b02:	4603      	mov	r3, r0
 8013b04:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8013b06:	7dbb      	ldrb	r3, [r7, #22]
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3718      	adds	r7, #24
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	460b      	mov	r3, r1
 8013b1a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013b22:	78fa      	ldrb	r2, [r7, #3]
 8013b24:	4611      	mov	r1, r2
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7f0 ffca 	bl	8004ac0 <HAL_PCD_EP_GetRxCount>
 8013b2c:	4603      	mov	r3, r0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3708      	adds	r7, #8
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}

08013b36 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b36:	b480      	push	{r7}
 8013b38:	b083      	sub	sp, #12
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	6078      	str	r0, [r7, #4]
 8013b3e:	460b      	mov	r3, r1
 8013b40:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8013b42:	bf00      	nop
 8013b44:	370c      	adds	r7, #12
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bc80      	pop	{r7}
 8013b4a:	4770      	bx	lr

08013b4c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b085      	sub	sp, #20
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	4603      	mov	r3, r0
 8013b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b56:	2300      	movs	r3, #0
 8013b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013b5a:	79fb      	ldrb	r3, [r7, #7]
 8013b5c:	2b03      	cmp	r3, #3
 8013b5e:	d817      	bhi.n	8013b90 <USBD_Get_USB_Status+0x44>
 8013b60:	a201      	add	r2, pc, #4	; (adr r2, 8013b68 <USBD_Get_USB_Status+0x1c>)
 8013b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b66:	bf00      	nop
 8013b68:	08013b79 	.word	0x08013b79
 8013b6c:	08013b7f 	.word	0x08013b7f
 8013b70:	08013b85 	.word	0x08013b85
 8013b74:	08013b8b 	.word	0x08013b8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8013b7c:	e00b      	b.n	8013b96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013b7e:	2302      	movs	r3, #2
 8013b80:	73fb      	strb	r3, [r7, #15]
    break;
 8013b82:	e008      	b.n	8013b96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013b84:	2301      	movs	r3, #1
 8013b86:	73fb      	strb	r3, [r7, #15]
    break;
 8013b88:	e005      	b.n	8013b96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013b8a:	2302      	movs	r3, #2
 8013b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8013b8e:	e002      	b.n	8013b96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013b90:	2302      	movs	r3, #2
 8013b92:	73fb      	strb	r3, [r7, #15]
    break;
 8013b94:	bf00      	nop
  }
  return usb_status;
 8013b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3714      	adds	r7, #20
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bc80      	pop	{r7}
 8013ba0:	4770      	bx	lr
 8013ba2:	bf00      	nop

08013ba4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	4613      	mov	r3, r2
 8013bb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d101      	bne.n	8013bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013bb8:	2302      	movs	r3, #2
 8013bba:	e01a      	b.n	8013bf2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d003      	beq.n	8013bce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d003      	beq.n	8013bdc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	68ba      	ldr	r2, [r7, #8]
 8013bd8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2201      	movs	r2, #1
 8013be0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	79fa      	ldrb	r2, [r7, #7]
 8013be8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013bea:	68f8      	ldr	r0, [r7, #12]
 8013bec:	f7ff fdfc 	bl	80137e8 <USBD_LL_Init>

  return USBD_OK;
 8013bf0:	2300      	movs	r3, #0
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	3710      	adds	r7, #16
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013bfa:	b480      	push	{r7}
 8013bfc:	b085      	sub	sp, #20
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
 8013c02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013c04:	2300      	movs	r3, #0
 8013c06:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d006      	beq.n	8013c1c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	683a      	ldr	r2, [r7, #0]
 8013c12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8013c16:	2300      	movs	r3, #0
 8013c18:	73fb      	strb	r3, [r7, #15]
 8013c1a:	e001      	b.n	8013c20 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8013c1c:	2302      	movs	r3, #2
 8013c1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3714      	adds	r7, #20
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bc80      	pop	{r7}
 8013c2a:	4770      	bx	lr

08013c2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f7ff fe43 	bl	80138c0 <USBD_LL_Start>

  return USBD_OK;
 8013c3a:	2300      	movs	r3, #0
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3708      	adds	r7, #8
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}

08013c44 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013c44:	b480      	push	{r7}
 8013c46:	b083      	sub	sp, #12
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013c4c:	2300      	movs	r3, #0
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	370c      	adds	r7, #12
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bc80      	pop	{r7}
 8013c56:	4770      	bx	lr

08013c58 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b084      	sub	sp, #16
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	460b      	mov	r3, r1
 8013c62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013c64:	2302      	movs	r3, #2
 8013c66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d00c      	beq.n	8013c8c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	78fa      	ldrb	r2, [r7, #3]
 8013c7c:	4611      	mov	r1, r2
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	4798      	blx	r3
 8013c82:	4603      	mov	r3, r0
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d101      	bne.n	8013c8c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3710      	adds	r7, #16
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bd80      	pop	{r7, pc}

08013c96 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013c96:	b580      	push	{r7, lr}
 8013c98:	b082      	sub	sp, #8
 8013c9a:	af00      	add	r7, sp, #0
 8013c9c:	6078      	str	r0, [r7, #4]
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	78fa      	ldrb	r2, [r7, #3]
 8013cac:	4611      	mov	r1, r2
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	4798      	blx	r3

  return USBD_OK;
 8013cb2:	2300      	movs	r3, #0
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}

08013cbc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013ccc:	6839      	ldr	r1, [r7, #0]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f000 fe8c 	bl	80149ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  pdev->ep0_data_len = pdev->request.wLength;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

  switch (pdev->request.bmRequest & 0x1FU)
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8013cf0:	f003 031f 	and.w	r3, r3, #31
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d00c      	beq.n	8013d12 <USBD_LL_SetupStage+0x56>
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	d302      	bcc.n	8013d02 <USBD_LL_SetupStage+0x46>
 8013cfc:	2b02      	cmp	r3, #2
 8013cfe:	d010      	beq.n	8013d22 <USBD_LL_SetupStage+0x66>
 8013d00:	e017      	b.n	8013d32 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013d08:	4619      	mov	r1, r3
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f000 f9c4 	bl	8014098 <USBD_StdDevReq>
      break;
 8013d10:	e01a      	b.n	8013d48 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013d18:	4619      	mov	r1, r3
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 fa26 	bl	801416c <USBD_StdItfReq>
      break;
 8013d20:	e012      	b.n	8013d48 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013d28:	4619      	mov	r1, r3
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f000 fa64 	bl	80141f8 <USBD_StdEPReq>
      break;
 8013d30:	e00a      	b.n	8013d48 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8013d38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	4619      	mov	r1, r3
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f7ff fe1d 	bl	8013980 <USBD_LL_StallEP>
      break;
 8013d46:	bf00      	nop
  }

  return USBD_OK;
 8013d48:	2300      	movs	r3, #0
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3708      	adds	r7, #8
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}

08013d52 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013d52:	b580      	push	{r7, lr}
 8013d54:	b086      	sub	sp, #24
 8013d56:	af00      	add	r7, sp, #0
 8013d58:	60f8      	str	r0, [r7, #12]
 8013d5a:	460b      	mov	r3, r1
 8013d5c:	607a      	str	r2, [r7, #4]
 8013d5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013d60:	7afb      	ldrb	r3, [r7, #11]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d14b      	bne.n	8013dfe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8013d6c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013d74:	2b03      	cmp	r3, #3
 8013d76:	d134      	bne.n	8013de2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	689a      	ldr	r2, [r3, #8]
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	68db      	ldr	r3, [r3, #12]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d919      	bls.n	8013db8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	689a      	ldr	r2, [r3, #8]
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	1ad2      	subs	r2, r2, r3
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	609a      	str	r2, [r3, #8]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	689a      	ldr	r2, [r3, #8]
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d203      	bcs.n	8013da6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013d9e:	697b      	ldr	r3, [r7, #20]
 8013da0:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueRx(pdev, pdata,
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	e002      	b.n	8013dac <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	461a      	mov	r2, r3
 8013dae:	6879      	ldr	r1, [r7, #4]
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	f001 fa43 	bl	801523c <USBD_CtlContinueRx>
 8013db6:	e038      	b.n	8013e2a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013dbe:	691b      	ldr	r3, [r3, #16]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d00a      	beq.n	8013dda <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013dca:	2b03      	cmp	r3, #3
 8013dcc:	d105      	bne.n	8013dda <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013dd4:	691b      	ldr	r3, [r3, #16]
 8013dd6:	68f8      	ldr	r0, [r7, #12]
 8013dd8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013dda:	68f8      	ldr	r0, [r7, #12]
 8013ddc:	f001 fa40 	bl	8015260 <USBD_CtlSendStatus>
 8013de0:	e023      	b.n	8013e2a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013de8:	2b05      	cmp	r3, #5
 8013dea:	d11e      	bne.n	8013e2a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2200      	movs	r2, #0
 8013df0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        USBD_LL_StallEP(pdev, 0U);
 8013df4:	2100      	movs	r1, #0
 8013df6:	68f8      	ldr	r0, [r7, #12]
 8013df8:	f7ff fdc2 	bl	8013980 <USBD_LL_StallEP>
 8013dfc:	e015      	b.n	8013e2a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013e04:	699b      	ldr	r3, [r3, #24]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d00d      	beq.n	8013e26 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if ((pdev->pClass->DataOut != NULL) &&
 8013e10:	2b03      	cmp	r3, #3
 8013e12:	d108      	bne.n	8013e26 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013e1a:	699b      	ldr	r3, [r3, #24]
 8013e1c:	7afa      	ldrb	r2, [r7, #11]
 8013e1e:	4611      	mov	r1, r2
 8013e20:	68f8      	ldr	r0, [r7, #12]
 8013e22:	4798      	blx	r3
 8013e24:	e001      	b.n	8013e2a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013e26:	2302      	movs	r3, #2
 8013e28:	e000      	b.n	8013e2c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013e2a:	2300      	movs	r3, #0
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3718      	adds	r7, #24
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b086      	sub	sp, #24
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	60f8      	str	r0, [r7, #12]
 8013e3c:	460b      	mov	r3, r1
 8013e3e:	607a      	str	r2, [r7, #4]
 8013e40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013e42:	7afb      	ldrb	r3, [r7, #11]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d17f      	bne.n	8013f48 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	3314      	adds	r3, #20
 8013e4c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013e54:	2b02      	cmp	r3, #2
 8013e56:	d15c      	bne.n	8013f12 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	689a      	ldr	r2, [r3, #8]
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d915      	bls.n	8013e90 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	689a      	ldr	r2, [r3, #8]
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	68db      	ldr	r3, [r3, #12]
 8013e6c:	1ad2      	subs	r2, r2, r3
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	609a      	str	r2, [r3, #8]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	689b      	ldr	r3, [r3, #8]
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	461a      	mov	r2, r3
 8013e7a:	6879      	ldr	r1, [r7, #4]
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f001 f9ad 	bl	80151dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e82:	2300      	movs	r3, #0
 8013e84:	2200      	movs	r2, #0
 8013e86:	2100      	movs	r1, #0
 8013e88:	68f8      	ldr	r0, [r7, #12]
 8013e8a:	f7ff fe1e 	bl	8013aca <USBD_LL_PrepareReceive>
 8013e8e:	e04e      	b.n	8013f2e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	685b      	ldr	r3, [r3, #4]
 8013e94:	697a      	ldr	r2, [r7, #20]
 8013e96:	68d2      	ldr	r2, [r2, #12]
 8013e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e9c:	fb02 f201 	mul.w	r2, r2, r1
 8013ea0:	1a9b      	subs	r3, r3, r2
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d11c      	bne.n	8013ee0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	685a      	ldr	r2, [r3, #4]
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	68db      	ldr	r3, [r3, #12]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d316      	bcc.n	8013ee0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	685a      	ldr	r2, [r3, #4]
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
            (pep->total_length >= pep->maxpacket) &&
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d20f      	bcs.n	8013ee0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	2100      	movs	r1, #0
 8013ec4:	68f8      	ldr	r0, [r7, #12]
 8013ec6:	f001 f989 	bl	80151dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	2100      	movs	r1, #0
 8013ed8:	68f8      	ldr	r0, [r7, #12]
 8013eda:	f7ff fdf6 	bl	8013aca <USBD_LL_PrepareReceive>
 8013ede:	e026      	b.n	8013f2e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d00a      	beq.n	8013f02 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013ef2:	2b03      	cmp	r3, #3
 8013ef4:	d105      	bne.n	8013f02 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013efc:	68db      	ldr	r3, [r3, #12]
 8013efe:	68f8      	ldr	r0, [r7, #12]
 8013f00:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8013f02:	2180      	movs	r1, #128	; 0x80
 8013f04:	68f8      	ldr	r0, [r7, #12]
 8013f06:	f7ff fd3b 	bl	8013980 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8013f0a:	68f8      	ldr	r0, [r7, #12]
 8013f0c:	f001 f9bb 	bl	8015286 <USBD_CtlReceiveStatus>
 8013f10:	e00d      	b.n	8013f2e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013f18:	2b04      	cmp	r3, #4
 8013f1a:	d004      	beq.n	8013f26 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d103      	bne.n	8013f2e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8013f26:	2180      	movs	r1, #128	; 0x80
 8013f28:	68f8      	ldr	r0, [r7, #12]
 8013f2a:	f7ff fd29 	bl	8013980 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013f34:	2b01      	cmp	r3, #1
 8013f36:	d11d      	bne.n	8013f74 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013f38:	68f8      	ldr	r0, [r7, #12]
 8013f3a:	f7ff fe83 	bl	8013c44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2200      	movs	r2, #0
 8013f42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8013f46:	e015      	b.n	8013f74 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f4e:	695b      	ldr	r3, [r3, #20]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d00d      	beq.n	8013f70 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if ((pdev->pClass->DataIn != NULL) &&
 8013f5a:	2b03      	cmp	r3, #3
 8013f5c:	d108      	bne.n	8013f70 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f64:	695b      	ldr	r3, [r3, #20]
 8013f66:	7afa      	ldrb	r2, [r7, #11]
 8013f68:	4611      	mov	r1, r2
 8013f6a:	68f8      	ldr	r0, [r7, #12]
 8013f6c:	4798      	blx	r3
 8013f6e:	e001      	b.n	8013f74 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013f70:	2302      	movs	r3, #2
 8013f72:	e000      	b.n	8013f76 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8013f74:	2300      	movs	r3, #0
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3718      	adds	r7, #24
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}

08013f7e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013f7e:	b580      	push	{r7, lr}
 8013f80:	b082      	sub	sp, #8
 8013f82:	af00      	add	r7, sp, #0
 8013f84:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f86:	2340      	movs	r3, #64	; 0x40
 8013f88:	2200      	movs	r2, #0
 8013f8a:	2100      	movs	r1, #0
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f7ff fcb2 	bl	80138f6 <USBD_LL_OpenEP>

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2240      	movs	r2, #64	; 0x40
 8013f96:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f9a:	2340      	movs	r3, #64	; 0x40
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	2180      	movs	r1, #128	; 0x80
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f7ff fca8 	bl	80138f6 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	2240      	movs	r2, #64	; 0x40
 8013faa:	621a      	str	r2, [r3, #32]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2201      	movs	r2, #1
 8013fb0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->ep0_state = USBD_EP0_IDLE;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->dev_config = 0U;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  if (pdev->pClassData)
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d009      	beq.n	8013fe8 <USBD_LL_Reset+0x6a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	687a      	ldr	r2, [r7, #4]
 8013fde:	6852      	ldr	r2, [r2, #4]
 8013fe0:	b2d2      	uxtb	r2, r2
 8013fe2:	4611      	mov	r1, r2
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	4798      	blx	r3
  }

  return USBD_OK;
 8013fe8:	2300      	movs	r3, #0
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}

08013ff2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013ff2:	b480      	push	{r7}
 8013ff4:	b083      	sub	sp, #12
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	6078      	str	r0, [r7, #4]
 8013ffa:	460b      	mov	r3, r1
 8013ffc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	78fa      	ldrb	r2, [r7, #3]
 8014002:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014004:	2300      	movs	r3, #0
}
 8014006:	4618      	mov	r0, r3
 8014008:	370c      	adds	r7, #12
 801400a:	46bd      	mov	sp, r7
 801400c:	bc80      	pop	{r7}
 801400e:	4770      	bx	lr

08014010 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2204      	movs	r2, #4
 8014028:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc

  return USBD_OK;
 801402c:	2300      	movs	r3, #0
}
 801402e:	4618      	mov	r0, r3
 8014030:	370c      	adds	r7, #12
 8014032:	46bd      	mov	sp, r7
 8014034:	bc80      	pop	{r7}
 8014036:	4770      	bx	lr

08014038 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014038:	b480      	push	{r7}
 801403a:	b083      	sub	sp, #12
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014046:	2b04      	cmp	r3, #4
 8014048:	d105      	bne.n	8014056 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  }

  return USBD_OK;
 8014056:	2300      	movs	r3, #0
}
 8014058:	4618      	mov	r0, r3
 801405a:	370c      	adds	r7, #12
 801405c:	46bd      	mov	sp, r7
 801405e:	bc80      	pop	{r7}
 8014060:	4770      	bx	lr

08014062 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014062:	b580      	push	{r7, lr}
 8014064:	b082      	sub	sp, #8
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014070:	2b03      	cmp	r3, #3
 8014072:	d10b      	bne.n	801408c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801407a:	69db      	ldr	r3, [r3, #28]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d005      	beq.n	801408c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014086:	69db      	ldr	r3, [r3, #28]
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801408c:	2300      	movs	r3, #0
}
 801408e:	4618      	mov	r0, r3
 8014090:	3708      	adds	r7, #8
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
	...

08014098 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b084      	sub	sp, #16
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
 80140a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140a2:	2300      	movs	r3, #0
 80140a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140ae:	2b20      	cmp	r3, #32
 80140b0:	d004      	beq.n	80140bc <USBD_StdDevReq+0x24>
 80140b2:	2b40      	cmp	r3, #64	; 0x40
 80140b4:	d002      	beq.n	80140bc <USBD_StdDevReq+0x24>
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d008      	beq.n	80140cc <USBD_StdDevReq+0x34>
 80140ba:	e04c      	b.n	8014156 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80140c2:	689b      	ldr	r3, [r3, #8]
 80140c4:	6839      	ldr	r1, [r7, #0]
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	4798      	blx	r3
      break;
 80140ca:	e049      	b.n	8014160 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	785b      	ldrb	r3, [r3, #1]
 80140d0:	2b09      	cmp	r3, #9
 80140d2:	d83a      	bhi.n	801414a <USBD_StdDevReq+0xb2>
 80140d4:	a201      	add	r2, pc, #4	; (adr r2, 80140dc <USBD_StdDevReq+0x44>)
 80140d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140da:	bf00      	nop
 80140dc:	0801412d 	.word	0x0801412d
 80140e0:	08014141 	.word	0x08014141
 80140e4:	0801414b 	.word	0x0801414b
 80140e8:	08014137 	.word	0x08014137
 80140ec:	0801414b 	.word	0x0801414b
 80140f0:	0801410f 	.word	0x0801410f
 80140f4:	08014105 	.word	0x08014105
 80140f8:	0801414b 	.word	0x0801414b
 80140fc:	08014123 	.word	0x08014123
 8014100:	08014119 	.word	0x08014119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014104:	6839      	ldr	r1, [r7, #0]
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 f99c 	bl	8014444 <USBD_GetDescriptor>
          break;
 801410c:	e022      	b.n	8014154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801410e:	6839      	ldr	r1, [r7, #0]
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f000 faff 	bl	8014714 <USBD_SetAddress>
          break;
 8014116:	e01d      	b.n	8014154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8014118:	6839      	ldr	r1, [r7, #0]
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fb3c 	bl	8014798 <USBD_SetConfig>
          break;
 8014120:	e018      	b.n	8014154 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014122:	6839      	ldr	r1, [r7, #0]
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f000 fbc5 	bl	80148b4 <USBD_GetConfig>
          break;
 801412a:	e013      	b.n	8014154 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801412c:	6839      	ldr	r1, [r7, #0]
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f000 fbf4 	bl	801491c <USBD_GetStatus>
          break;
 8014134:	e00e      	b.n	8014154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014136:	6839      	ldr	r1, [r7, #0]
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f000 fc22 	bl	8014982 <USBD_SetFeature>
          break;
 801413e:	e009      	b.n	8014154 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014140:	6839      	ldr	r1, [r7, #0]
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f000 fc31 	bl	80149aa <USBD_ClrFeature>
          break;
 8014148:	e004      	b.n	8014154 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fc89 	bl	8014a64 <USBD_CtlError>
          break;
 8014152:	bf00      	nop
      }
      break;
 8014154:	e004      	b.n	8014160 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8014156:	6839      	ldr	r1, [r7, #0]
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f000 fc83 	bl	8014a64 <USBD_CtlError>
      break;
 801415e:	bf00      	nop
  }

  return ret;
 8014160:	7bfb      	ldrb	r3, [r7, #15]
}
 8014162:	4618      	mov	r0, r3
 8014164:	3710      	adds	r7, #16
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop

0801416c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b084      	sub	sp, #16
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
 8014174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014176:	2300      	movs	r3, #0
 8014178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014182:	2b20      	cmp	r3, #32
 8014184:	d003      	beq.n	801418e <USBD_StdItfReq+0x22>
 8014186:	2b40      	cmp	r3, #64	; 0x40
 8014188:	d001      	beq.n	801418e <USBD_StdItfReq+0x22>
 801418a:	2b00      	cmp	r3, #0
 801418c:	d12a      	bne.n	80141e4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014194:	3b01      	subs	r3, #1
 8014196:	2b02      	cmp	r3, #2
 8014198:	d81d      	bhi.n	80141d6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	889b      	ldrh	r3, [r3, #4]
 801419e:	b2db      	uxtb	r3, r3
 80141a0:	2b03      	cmp	r3, #3
 80141a2:	d813      	bhi.n	80141cc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80141aa:	689b      	ldr	r3, [r3, #8]
 80141ac:	6839      	ldr	r1, [r7, #0]
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	4798      	blx	r3
 80141b2:	4603      	mov	r3, r0
 80141b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	88db      	ldrh	r3, [r3, #6]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d110      	bne.n	80141e0 <USBD_StdItfReq+0x74>
 80141be:	7bfb      	ldrb	r3, [r7, #15]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10d      	bne.n	80141e0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	f001 f84b 	bl	8015260 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80141ca:	e009      	b.n	80141e0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80141cc:	6839      	ldr	r1, [r7, #0]
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f000 fc48 	bl	8014a64 <USBD_CtlError>
          break;
 80141d4:	e004      	b.n	80141e0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80141d6:	6839      	ldr	r1, [r7, #0]
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f000 fc43 	bl	8014a64 <USBD_CtlError>
          break;
 80141de:	e000      	b.n	80141e2 <USBD_StdItfReq+0x76>
          break;
 80141e0:	bf00      	nop
      }
      break;
 80141e2:	e004      	b.n	80141ee <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80141e4:	6839      	ldr	r1, [r7, #0]
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f000 fc3c 	bl	8014a64 <USBD_CtlError>
      break;
 80141ec:	bf00      	nop
  }

  return USBD_OK;
 80141ee:	2300      	movs	r3, #0
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3710      	adds	r7, #16
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b084      	sub	sp, #16
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014202:	2300      	movs	r3, #0
 8014204:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	889b      	ldrh	r3, [r3, #4]
 801420a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014214:	2b20      	cmp	r3, #32
 8014216:	d004      	beq.n	8014222 <USBD_StdEPReq+0x2a>
 8014218:	2b40      	cmp	r3, #64	; 0x40
 801421a:	d002      	beq.n	8014222 <USBD_StdEPReq+0x2a>
 801421c:	2b00      	cmp	r3, #0
 801421e:	d008      	beq.n	8014232 <USBD_StdEPReq+0x3a>
 8014220:	e106      	b.n	8014430 <USBD_StdEPReq+0x238>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014228:	689b      	ldr	r3, [r3, #8]
 801422a:	6839      	ldr	r1, [r7, #0]
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	4798      	blx	r3
      break;
 8014230:	e103      	b.n	801443a <USBD_StdEPReq+0x242>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801423a:	2b20      	cmp	r3, #32
 801423c:	d10a      	bne.n	8014254 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014244:	689b      	ldr	r3, [r3, #8]
 8014246:	6839      	ldr	r1, [r7, #0]
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	4798      	blx	r3
 801424c:	4603      	mov	r3, r0
 801424e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8014250:	7bfb      	ldrb	r3, [r7, #15]
 8014252:	e0f3      	b.n	801443c <USBD_StdEPReq+0x244>
      }

      switch (req->bRequest)
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	785b      	ldrb	r3, [r3, #1]
 8014258:	2b01      	cmp	r3, #1
 801425a:	d03e      	beq.n	80142da <USBD_StdEPReq+0xe2>
 801425c:	2b03      	cmp	r3, #3
 801425e:	d002      	beq.n	8014266 <USBD_StdEPReq+0x6e>
 8014260:	2b00      	cmp	r3, #0
 8014262:	d070      	beq.n	8014346 <USBD_StdEPReq+0x14e>
 8014264:	e0de      	b.n	8014424 <USBD_StdEPReq+0x22c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801426c:	2b02      	cmp	r3, #2
 801426e:	d002      	beq.n	8014276 <USBD_StdEPReq+0x7e>
 8014270:	2b03      	cmp	r3, #3
 8014272:	d015      	beq.n	80142a0 <USBD_StdEPReq+0xa8>
 8014274:	e02b      	b.n	80142ce <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014276:	7bbb      	ldrb	r3, [r7, #14]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d00c      	beq.n	8014296 <USBD_StdEPReq+0x9e>
 801427c:	7bbb      	ldrb	r3, [r7, #14]
 801427e:	2b80      	cmp	r3, #128	; 0x80
 8014280:	d009      	beq.n	8014296 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014282:	7bbb      	ldrb	r3, [r7, #14]
 8014284:	4619      	mov	r1, r3
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f7ff fb7a 	bl	8013980 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801428c:	2180      	movs	r1, #128	; 0x80
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7ff fb76 	bl	8013980 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014294:	e020      	b.n	80142d8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8014296:	6839      	ldr	r1, [r7, #0]
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f000 fbe3 	bl	8014a64 <USBD_CtlError>
              break;
 801429e:	e01b      	b.n	80142d8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	885b      	ldrh	r3, [r3, #2]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d10e      	bne.n	80142c6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80142a8:	7bbb      	ldrb	r3, [r7, #14]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d00b      	beq.n	80142c6 <USBD_StdEPReq+0xce>
 80142ae:	7bbb      	ldrb	r3, [r7, #14]
 80142b0:	2b80      	cmp	r3, #128	; 0x80
 80142b2:	d008      	beq.n	80142c6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	88db      	ldrh	r3, [r3, #6]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d104      	bne.n	80142c6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80142bc:	7bbb      	ldrb	r3, [r7, #14]
 80142be:	4619      	mov	r1, r3
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f7ff fb5d 	bl	8013980 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f000 ffca 	bl	8015260 <USBD_CtlSendStatus>

              break;
 80142cc:	e004      	b.n	80142d8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80142ce:	6839      	ldr	r1, [r7, #0]
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f000 fbc7 	bl	8014a64 <USBD_CtlError>
              break;
 80142d6:	bf00      	nop
          }
          break;
 80142d8:	e0a9      	b.n	801442e <USBD_StdEPReq+0x236>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80142e0:	2b02      	cmp	r3, #2
 80142e2:	d002      	beq.n	80142ea <USBD_StdEPReq+0xf2>
 80142e4:	2b03      	cmp	r3, #3
 80142e6:	d015      	beq.n	8014314 <USBD_StdEPReq+0x11c>
 80142e8:	e026      	b.n	8014338 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142ea:	7bbb      	ldrb	r3, [r7, #14]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d00c      	beq.n	801430a <USBD_StdEPReq+0x112>
 80142f0:	7bbb      	ldrb	r3, [r7, #14]
 80142f2:	2b80      	cmp	r3, #128	; 0x80
 80142f4:	d009      	beq.n	801430a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80142f6:	7bbb      	ldrb	r3, [r7, #14]
 80142f8:	4619      	mov	r1, r3
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f7ff fb40 	bl	8013980 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014300:	2180      	movs	r1, #128	; 0x80
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ff fb3c 	bl	8013980 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014308:	e01c      	b.n	8014344 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801430a:	6839      	ldr	r1, [r7, #0]
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f000 fba9 	bl	8014a64 <USBD_CtlError>
              break;
 8014312:	e017      	b.n	8014344 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	885b      	ldrh	r3, [r3, #2]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d112      	bne.n	8014342 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801431c:	7bbb      	ldrb	r3, [r7, #14]
 801431e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014322:	2b00      	cmp	r3, #0
 8014324:	d004      	beq.n	8014330 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8014326:	7bbb      	ldrb	r3, [r7, #14]
 8014328:	4619      	mov	r1, r3
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f7ff fb47 	bl	80139be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f000 ff95 	bl	8015260 <USBD_CtlSendStatus>
              }
              break;
 8014336:	e004      	b.n	8014342 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8014338:	6839      	ldr	r1, [r7, #0]
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f000 fb92 	bl	8014a64 <USBD_CtlError>
              break;
 8014340:	e000      	b.n	8014344 <USBD_StdEPReq+0x14c>
              break;
 8014342:	bf00      	nop
          }
          break;
 8014344:	e073      	b.n	801442e <USBD_StdEPReq+0x236>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801434c:	2b02      	cmp	r3, #2
 801434e:	d002      	beq.n	8014356 <USBD_StdEPReq+0x15e>
 8014350:	2b03      	cmp	r3, #3
 8014352:	d02b      	beq.n	80143ac <USBD_StdEPReq+0x1b4>
 8014354:	e060      	b.n	8014418 <USBD_StdEPReq+0x220>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014356:	7bbb      	ldrb	r3, [r7, #14]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d007      	beq.n	801436c <USBD_StdEPReq+0x174>
 801435c:	7bbb      	ldrb	r3, [r7, #14]
 801435e:	2b80      	cmp	r3, #128	; 0x80
 8014360:	d004      	beq.n	801436c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8014362:	6839      	ldr	r1, [r7, #0]
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f000 fb7d 	bl	8014a64 <USBD_CtlError>
                break;
 801436a:	e05a      	b.n	8014422 <USBD_StdEPReq+0x22a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801436c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014370:	2b00      	cmp	r3, #0
 8014372:	da08      	bge.n	8014386 <USBD_StdEPReq+0x18e>
 8014374:	7bbb      	ldrb	r3, [r7, #14]
 8014376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801437a:	3301      	adds	r3, #1
 801437c:	011b      	lsls	r3, r3, #4
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	4413      	add	r3, r2
 8014382:	3304      	adds	r3, #4
 8014384:	e007      	b.n	8014396 <USBD_StdEPReq+0x19e>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014386:	7bbb      	ldrb	r3, [r7, #14]
 8014388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801438c:	3310      	adds	r3, #16
 801438e:	011b      	lsls	r3, r3, #4
 8014390:	687a      	ldr	r2, [r7, #4]
 8014392:	4413      	add	r3, r2
 8014394:	3304      	adds	r3, #4
 8014396:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	2200      	movs	r2, #0
 801439c:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	2202      	movs	r2, #2
 80143a2:	4619      	mov	r1, r3
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f000 fefd 	bl	80151a4 <USBD_CtlSendData>
              break;
 80143aa:	e03a      	b.n	8014422 <USBD_StdEPReq+0x22a>

            case USBD_STATE_CONFIGURED:

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	da08      	bge.n	80143c6 <USBD_StdEPReq+0x1ce>
 80143b4:	7bbb      	ldrb	r3, [r7, #14]
 80143b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143ba:	3301      	adds	r3, #1
 80143bc:	011b      	lsls	r3, r3, #4
 80143be:	687a      	ldr	r2, [r7, #4]
 80143c0:	4413      	add	r3, r2
 80143c2:	3304      	adds	r3, #4
 80143c4:	e007      	b.n	80143d6 <USBD_StdEPReq+0x1de>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80143c6:	7bbb      	ldrb	r3, [r7, #14]
 80143c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143cc:	3310      	adds	r3, #16
 80143ce:	011b      	lsls	r3, r3, #4
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	4413      	add	r3, r2
 80143d4:	3304      	adds	r3, #4
 80143d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80143d8:	7bbb      	ldrb	r3, [r7, #14]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d002      	beq.n	80143e4 <USBD_StdEPReq+0x1ec>
 80143de:	7bbb      	ldrb	r3, [r7, #14]
 80143e0:	2b80      	cmp	r3, #128	; 0x80
 80143e2:	d103      	bne.n	80143ec <USBD_StdEPReq+0x1f4>
              {
                pep->status = 0x0000U;
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	2200      	movs	r2, #0
 80143e8:	601a      	str	r2, [r3, #0]
 80143ea:	e00e      	b.n	801440a <USBD_StdEPReq+0x212>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80143ec:	7bbb      	ldrb	r3, [r7, #14]
 80143ee:	4619      	mov	r1, r3
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f7ff fb03 	bl	80139fc <USBD_LL_IsStallEP>
 80143f6:	4603      	mov	r3, r0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d003      	beq.n	8014404 <USBD_StdEPReq+0x20c>
              {
                pep->status = 0x0001U;
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	2201      	movs	r2, #1
 8014400:	601a      	str	r2, [r3, #0]
 8014402:	e002      	b.n	801440a <USBD_StdEPReq+0x212>
              }
              else
              {
                pep->status = 0x0000U;
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	2200      	movs	r2, #0
 8014408:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	2202      	movs	r2, #2
 801440e:	4619      	mov	r1, r3
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f000 fec7 	bl	80151a4 <USBD_CtlSendData>
              break;
 8014416:	e004      	b.n	8014422 <USBD_StdEPReq+0x22a>

            default:
              USBD_CtlError(pdev, req);
 8014418:	6839      	ldr	r1, [r7, #0]
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f000 fb22 	bl	8014a64 <USBD_CtlError>
              break;
 8014420:	bf00      	nop
          }
          break;
 8014422:	e004      	b.n	801442e <USBD_StdEPReq+0x236>

        default:
          USBD_CtlError(pdev, req);
 8014424:	6839      	ldr	r1, [r7, #0]
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f000 fb1c 	bl	8014a64 <USBD_CtlError>
          break;
 801442c:	bf00      	nop
      }
      break;
 801442e:	e004      	b.n	801443a <USBD_StdEPReq+0x242>

    default:
      USBD_CtlError(pdev, req);
 8014430:	6839      	ldr	r1, [r7, #0]
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f000 fb16 	bl	8014a64 <USBD_CtlError>
      break;
 8014438:	bf00      	nop
  }

  return ret;
 801443a:	7bfb      	ldrb	r3, [r7, #15]
}
 801443c:	4618      	mov	r0, r3
 801443e:	3710      	adds	r7, #16
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801444e:	2300      	movs	r3, #0
 8014450:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014452:	2300      	movs	r3, #0
 8014454:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014456:	2300      	movs	r3, #0
 8014458:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	885b      	ldrh	r3, [r3, #2]
 801445e:	0a1b      	lsrs	r3, r3, #8
 8014460:	b29b      	uxth	r3, r3
 8014462:	3b01      	subs	r3, #1
 8014464:	2b06      	cmp	r3, #6
 8014466:	f200 8128 	bhi.w	80146ba <USBD_GetDescriptor+0x276>
 801446a:	a201      	add	r2, pc, #4	; (adr r2, 8014470 <USBD_GetDescriptor+0x2c>)
 801446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014470:	0801448d 	.word	0x0801448d
 8014474:	080144a5 	.word	0x080144a5
 8014478:	080144e5 	.word	0x080144e5
 801447c:	080146bb 	.word	0x080146bb
 8014480:	080146bb 	.word	0x080146bb
 8014484:	0801465b 	.word	0x0801465b
 8014488:	08014687 	.word	0x08014687
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	687a      	ldr	r2, [r7, #4]
 8014496:	7c12      	ldrb	r2, [r2, #16]
 8014498:	f107 0108 	add.w	r1, r7, #8
 801449c:	4610      	mov	r0, r2
 801449e:	4798      	blx	r3
 80144a0:	60f8      	str	r0, [r7, #12]
      break;
 80144a2:	e112      	b.n	80146ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	7c1b      	ldrb	r3, [r3, #16]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d10d      	bne.n	80144c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80144b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144b4:	f107 0208 	add.w	r2, r7, #8
 80144b8:	4610      	mov	r0, r2
 80144ba:	4798      	blx	r3
 80144bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	3301      	adds	r3, #1
 80144c2:	2202      	movs	r2, #2
 80144c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80144c6:	e100      	b.n	80146ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80144ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144d0:	f107 0208 	add.w	r2, r7, #8
 80144d4:	4610      	mov	r0, r2
 80144d6:	4798      	blx	r3
 80144d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	3301      	adds	r3, #1
 80144de:	2202      	movs	r2, #2
 80144e0:	701a      	strb	r2, [r3, #0]
      break;
 80144e2:	e0f2      	b.n	80146ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	885b      	ldrh	r3, [r3, #2]
 80144e8:	b2db      	uxtb	r3, r3
 80144ea:	2b05      	cmp	r3, #5
 80144ec:	f200 80ac 	bhi.w	8014648 <USBD_GetDescriptor+0x204>
 80144f0:	a201      	add	r2, pc, #4	; (adr r2, 80144f8 <USBD_GetDescriptor+0xb4>)
 80144f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144f6:	bf00      	nop
 80144f8:	08014511 	.word	0x08014511
 80144fc:	08014545 	.word	0x08014545
 8014500:	08014579 	.word	0x08014579
 8014504:	080145ad 	.word	0x080145ad
 8014508:	080145e1 	.word	0x080145e1
 801450c:	08014615 	.word	0x08014615
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d00b      	beq.n	8014534 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	7c12      	ldrb	r2, [r2, #16]
 8014528:	f107 0108 	add.w	r1, r7, #8
 801452c:	4610      	mov	r0, r2
 801452e:	4798      	blx	r3
 8014530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014532:	e091      	b.n	8014658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f000 fa94 	bl	8014a64 <USBD_CtlError>
            err++;
 801453c:	7afb      	ldrb	r3, [r7, #11]
 801453e:	3301      	adds	r3, #1
 8014540:	72fb      	strb	r3, [r7, #11]
          break;
 8014542:	e089      	b.n	8014658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801454a:	689b      	ldr	r3, [r3, #8]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d00b      	beq.n	8014568 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014556:	689b      	ldr	r3, [r3, #8]
 8014558:	687a      	ldr	r2, [r7, #4]
 801455a:	7c12      	ldrb	r2, [r2, #16]
 801455c:	f107 0108 	add.w	r1, r7, #8
 8014560:	4610      	mov	r0, r2
 8014562:	4798      	blx	r3
 8014564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014566:	e077      	b.n	8014658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014568:	6839      	ldr	r1, [r7, #0]
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 fa7a 	bl	8014a64 <USBD_CtlError>
            err++;
 8014570:	7afb      	ldrb	r3, [r7, #11]
 8014572:	3301      	adds	r3, #1
 8014574:	72fb      	strb	r3, [r7, #11]
          break;
 8014576:	e06f      	b.n	8014658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801457e:	68db      	ldr	r3, [r3, #12]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d00b      	beq.n	801459c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801458a:	68db      	ldr	r3, [r3, #12]
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	7c12      	ldrb	r2, [r2, #16]
 8014590:	f107 0108 	add.w	r1, r7, #8
 8014594:	4610      	mov	r0, r2
 8014596:	4798      	blx	r3
 8014598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801459a:	e05d      	b.n	8014658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801459c:	6839      	ldr	r1, [r7, #0]
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 fa60 	bl	8014a64 <USBD_CtlError>
            err++;
 80145a4:	7afb      	ldrb	r3, [r7, #11]
 80145a6:	3301      	adds	r3, #1
 80145a8:	72fb      	strb	r3, [r7, #11]
          break;
 80145aa:	e055      	b.n	8014658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80145b2:	691b      	ldr	r3, [r3, #16]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d00b      	beq.n	80145d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80145be:	691b      	ldr	r3, [r3, #16]
 80145c0:	687a      	ldr	r2, [r7, #4]
 80145c2:	7c12      	ldrb	r2, [r2, #16]
 80145c4:	f107 0108 	add.w	r1, r7, #8
 80145c8:	4610      	mov	r0, r2
 80145ca:	4798      	blx	r3
 80145cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145ce:	e043      	b.n	8014658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80145d0:	6839      	ldr	r1, [r7, #0]
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f000 fa46 	bl	8014a64 <USBD_CtlError>
            err++;
 80145d8:	7afb      	ldrb	r3, [r7, #11]
 80145da:	3301      	adds	r3, #1
 80145dc:	72fb      	strb	r3, [r7, #11]
          break;
 80145de:	e03b      	b.n	8014658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80145e6:	695b      	ldr	r3, [r3, #20]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d00b      	beq.n	8014604 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80145f2:	695b      	ldr	r3, [r3, #20]
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	7c12      	ldrb	r2, [r2, #16]
 80145f8:	f107 0108 	add.w	r1, r7, #8
 80145fc:	4610      	mov	r0, r2
 80145fe:	4798      	blx	r3
 8014600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014602:	e029      	b.n	8014658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014604:	6839      	ldr	r1, [r7, #0]
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f000 fa2c 	bl	8014a64 <USBD_CtlError>
            err++;
 801460c:	7afb      	ldrb	r3, [r7, #11]
 801460e:	3301      	adds	r3, #1
 8014610:	72fb      	strb	r3, [r7, #11]
          break;
 8014612:	e021      	b.n	8014658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801461a:	699b      	ldr	r3, [r3, #24]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d00b      	beq.n	8014638 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014626:	699b      	ldr	r3, [r3, #24]
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	7c12      	ldrb	r2, [r2, #16]
 801462c:	f107 0108 	add.w	r1, r7, #8
 8014630:	4610      	mov	r0, r2
 8014632:	4798      	blx	r3
 8014634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014636:	e00f      	b.n	8014658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014638:	6839      	ldr	r1, [r7, #0]
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f000 fa12 	bl	8014a64 <USBD_CtlError>
            err++;
 8014640:	7afb      	ldrb	r3, [r7, #11]
 8014642:	3301      	adds	r3, #1
 8014644:	72fb      	strb	r3, [r7, #11]
          break;
 8014646:	e007      	b.n	8014658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014648:	6839      	ldr	r1, [r7, #0]
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f000 fa0a 	bl	8014a64 <USBD_CtlError>
          err++;
 8014650:	7afb      	ldrb	r3, [r7, #11]
 8014652:	3301      	adds	r3, #1
 8014654:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8014656:	e038      	b.n	80146ca <USBD_GetDescriptor+0x286>
 8014658:	e037      	b.n	80146ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	7c1b      	ldrb	r3, [r3, #16]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d109      	bne.n	8014676 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801466a:	f107 0208 	add.w	r2, r7, #8
 801466e:	4610      	mov	r0, r2
 8014670:	4798      	blx	r3
 8014672:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014674:	e029      	b.n	80146ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014676:	6839      	ldr	r1, [r7, #0]
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f000 f9f3 	bl	8014a64 <USBD_CtlError>
        err++;
 801467e:	7afb      	ldrb	r3, [r7, #11]
 8014680:	3301      	adds	r3, #1
 8014682:	72fb      	strb	r3, [r7, #11]
      break;
 8014684:	e021      	b.n	80146ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	7c1b      	ldrb	r3, [r3, #16]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d10d      	bne.n	80146aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014696:	f107 0208 	add.w	r2, r7, #8
 801469a:	4610      	mov	r0, r2
 801469c:	4798      	blx	r3
 801469e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	3301      	adds	r3, #1
 80146a4:	2207      	movs	r2, #7
 80146a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80146a8:	e00f      	b.n	80146ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80146aa:	6839      	ldr	r1, [r7, #0]
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f000 f9d9 	bl	8014a64 <USBD_CtlError>
        err++;
 80146b2:	7afb      	ldrb	r3, [r7, #11]
 80146b4:	3301      	adds	r3, #1
 80146b6:	72fb      	strb	r3, [r7, #11]
      break;
 80146b8:	e007      	b.n	80146ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80146ba:	6839      	ldr	r1, [r7, #0]
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f000 f9d1 	bl	8014a64 <USBD_CtlError>
      err++;
 80146c2:	7afb      	ldrb	r3, [r7, #11]
 80146c4:	3301      	adds	r3, #1
 80146c6:	72fb      	strb	r3, [r7, #11]
      break;
 80146c8:	bf00      	nop
  }

  if (err != 0U)
 80146ca:	7afb      	ldrb	r3, [r7, #11]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d11c      	bne.n	801470a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80146d0:	893b      	ldrh	r3, [r7, #8]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d011      	beq.n	80146fa <USBD_GetDescriptor+0x2b6>
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	88db      	ldrh	r3, [r3, #6]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d00d      	beq.n	80146fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	88da      	ldrh	r2, [r3, #6]
 80146e2:	893b      	ldrh	r3, [r7, #8]
 80146e4:	4293      	cmp	r3, r2
 80146e6:	bf28      	it	cs
 80146e8:	4613      	movcs	r3, r2
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80146ee:	893b      	ldrh	r3, [r7, #8]
 80146f0:	461a      	mov	r2, r3
 80146f2:	68f9      	ldr	r1, [r7, #12]
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f000 fd55 	bl	80151a4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	88db      	ldrh	r3, [r3, #6]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d104      	bne.n	801470c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f000 fdac 	bl	8015260 <USBD_CtlSendStatus>
 8014708:	e000      	b.n	801470c <USBD_GetDescriptor+0x2c8>
    return;
 801470a:	bf00      	nop
    }
  }
}
 801470c:	3710      	adds	r7, #16
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}
 8014712:	bf00      	nop

08014714 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b084      	sub	sp, #16
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	889b      	ldrh	r3, [r3, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d130      	bne.n	8014788 <USBD_SetAddress+0x74>
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	88db      	ldrh	r3, [r3, #6]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d12c      	bne.n	8014788 <USBD_SetAddress+0x74>
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	885b      	ldrh	r3, [r3, #2]
 8014732:	2b7f      	cmp	r3, #127	; 0x7f
 8014734:	d828      	bhi.n	8014788 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	885b      	ldrh	r3, [r3, #2]
 801473a:	b2db      	uxtb	r3, r3
 801473c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014740:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014748:	2b03      	cmp	r3, #3
 801474a:	d104      	bne.n	8014756 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801474c:	6839      	ldr	r1, [r7, #0]
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f000 f988 	bl	8014a64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014754:	e01c      	b.n	8014790 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	7bfa      	ldrb	r2, [r7, #15]
 801475a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801475e:	7bfb      	ldrb	r3, [r7, #15]
 8014760:	4619      	mov	r1, r3
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f7ff f96f 	bl	8013a46 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f000 fd79 	bl	8015260 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801476e:	7bfb      	ldrb	r3, [r7, #15]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d004      	beq.n	801477e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2202      	movs	r2, #2
 8014778:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801477c:	e008      	b.n	8014790 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2201      	movs	r2, #1
 8014782:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014786:	e003      	b.n	8014790 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014788:	6839      	ldr	r1, [r7, #0]
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 f96a 	bl	8014a64 <USBD_CtlError>
  }
}
 8014790:	bf00      	nop
 8014792:	3710      	adds	r7, #16
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}

08014798 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b082      	sub	sp, #8
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	885b      	ldrh	r3, [r3, #2]
 80147a6:	b2da      	uxtb	r2, r3
 80147a8:	4b41      	ldr	r3, [pc, #260]	; (80148b0 <USBD_SetConfig+0x118>)
 80147aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80147ac:	4b40      	ldr	r3, [pc, #256]	; (80148b0 <USBD_SetConfig+0x118>)
 80147ae:	781b      	ldrb	r3, [r3, #0]
 80147b0:	2b01      	cmp	r3, #1
 80147b2:	d904      	bls.n	80147be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80147b4:	6839      	ldr	r1, [r7, #0]
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f000 f954 	bl	8014a64 <USBD_CtlError>
 80147bc:	e075      	b.n	80148aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80147c4:	2b02      	cmp	r3, #2
 80147c6:	d002      	beq.n	80147ce <USBD_SetConfig+0x36>
 80147c8:	2b03      	cmp	r3, #3
 80147ca:	d023      	beq.n	8014814 <USBD_SetConfig+0x7c>
 80147cc:	e062      	b.n	8014894 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80147ce:	4b38      	ldr	r3, [pc, #224]	; (80148b0 <USBD_SetConfig+0x118>)
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d01a      	beq.n	801480c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80147d6:	4b36      	ldr	r3, [pc, #216]	; (80148b0 <USBD_SetConfig+0x118>)
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	461a      	mov	r2, r3
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2203      	movs	r2, #3
 80147e4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80147e8:	4b31      	ldr	r3, [pc, #196]	; (80148b0 <USBD_SetConfig+0x118>)
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	4619      	mov	r1, r3
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f7ff fa32 	bl	8013c58 <USBD_SetClassConfig>
 80147f4:	4603      	mov	r3, r0
 80147f6:	2b02      	cmp	r3, #2
 80147f8:	d104      	bne.n	8014804 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80147fa:	6839      	ldr	r1, [r7, #0]
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f000 f931 	bl	8014a64 <USBD_CtlError>
            return;
 8014802:	e052      	b.n	80148aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f000 fd2b 	bl	8015260 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801480a:	e04e      	b.n	80148aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 fd27 	bl	8015260 <USBD_CtlSendStatus>
        break;
 8014812:	e04a      	b.n	80148aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014814:	4b26      	ldr	r3, [pc, #152]	; (80148b0 <USBD_SetConfig+0x118>)
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d112      	bne.n	8014842 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2202      	movs	r2, #2
 8014820:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
          pdev->dev_config = cfgidx;
 8014824:	4b22      	ldr	r3, [pc, #136]	; (80148b0 <USBD_SetConfig+0x118>)
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	461a      	mov	r2, r3
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801482e:	4b20      	ldr	r3, [pc, #128]	; (80148b0 <USBD_SetConfig+0x118>)
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	4619      	mov	r1, r3
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f7ff fa2e 	bl	8013c96 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f000 fd10 	bl	8015260 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014840:	e033      	b.n	80148aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8014842:	4b1b      	ldr	r3, [pc, #108]	; (80148b0 <USBD_SetConfig+0x118>)
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	461a      	mov	r2, r3
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	429a      	cmp	r2, r3
 801484e:	d01d      	beq.n	801488c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	685b      	ldr	r3, [r3, #4]
 8014854:	b2db      	uxtb	r3, r3
 8014856:	4619      	mov	r1, r3
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f7ff fa1c 	bl	8013c96 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801485e:	4b14      	ldr	r3, [pc, #80]	; (80148b0 <USBD_SetConfig+0x118>)
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	461a      	mov	r2, r3
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014868:	4b11      	ldr	r3, [pc, #68]	; (80148b0 <USBD_SetConfig+0x118>)
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	4619      	mov	r1, r3
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f7ff f9f2 	bl	8013c58 <USBD_SetClassConfig>
 8014874:	4603      	mov	r3, r0
 8014876:	2b02      	cmp	r3, #2
 8014878:	d104      	bne.n	8014884 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801487a:	6839      	ldr	r1, [r7, #0]
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f000 f8f1 	bl	8014a64 <USBD_CtlError>
            return;
 8014882:	e012      	b.n	80148aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f000 fceb 	bl	8015260 <USBD_CtlSendStatus>
        break;
 801488a:	e00e      	b.n	80148aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 fce7 	bl	8015260 <USBD_CtlSendStatus>
        break;
 8014892:	e00a      	b.n	80148aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 f8e4 	bl	8014a64 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801489c:	4b04      	ldr	r3, [pc, #16]	; (80148b0 <USBD_SetConfig+0x118>)
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	4619      	mov	r1, r3
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f7ff f9f7 	bl	8013c96 <USBD_ClrClassConfig>
        break;
 80148a8:	bf00      	nop
    }
  }
}
 80148aa:	3708      	adds	r7, #8
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	20001500 	.word	0x20001500

080148b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	88db      	ldrh	r3, [r3, #6]
 80148c2:	2b01      	cmp	r3, #1
 80148c4:	d004      	beq.n	80148d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80148c6:	6839      	ldr	r1, [r7, #0]
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f000 f8cb 	bl	8014a64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80148ce:	e021      	b.n	8014914 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80148d6:	2b01      	cmp	r3, #1
 80148d8:	db17      	blt.n	801490a <USBD_GetConfig+0x56>
 80148da:	2b02      	cmp	r3, #2
 80148dc:	dd02      	ble.n	80148e4 <USBD_GetConfig+0x30>
 80148de:	2b03      	cmp	r3, #3
 80148e0:	d00b      	beq.n	80148fa <USBD_GetConfig+0x46>
 80148e2:	e012      	b.n	801490a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2200      	movs	r2, #0
 80148e8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	3308      	adds	r3, #8
 80148ee:	2201      	movs	r2, #1
 80148f0:	4619      	mov	r1, r3
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f000 fc56 	bl	80151a4 <USBD_CtlSendData>
        break;
 80148f8:	e00c      	b.n	8014914 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	3304      	adds	r3, #4
 80148fe:	2201      	movs	r2, #1
 8014900:	4619      	mov	r1, r3
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f000 fc4e 	bl	80151a4 <USBD_CtlSendData>
        break;
 8014908:	e004      	b.n	8014914 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801490a:	6839      	ldr	r1, [r7, #0]
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f000 f8a9 	bl	8014a64 <USBD_CtlError>
        break;
 8014912:	bf00      	nop
}
 8014914:	bf00      	nop
 8014916:	3708      	adds	r7, #8
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801492c:	3b01      	subs	r3, #1
 801492e:	2b02      	cmp	r3, #2
 8014930:	d81e      	bhi.n	8014970 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	88db      	ldrh	r3, [r3, #6]
 8014936:	2b02      	cmp	r3, #2
 8014938:	d004      	beq.n	8014944 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801493a:	6839      	ldr	r1, [r7, #0]
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f000 f891 	bl	8014a64 <USBD_CtlError>
        break;
 8014942:	e01a      	b.n	801497a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2201      	movs	r2, #1
 8014948:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014950:	2b00      	cmp	r3, #0
 8014952:	d005      	beq.n	8014960 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	68db      	ldr	r3, [r3, #12]
 8014958:	f043 0202 	orr.w	r2, r3, #2
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	330c      	adds	r3, #12
 8014964:	2202      	movs	r2, #2
 8014966:	4619      	mov	r1, r3
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f000 fc1b 	bl	80151a4 <USBD_CtlSendData>
      break;
 801496e:	e004      	b.n	801497a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8014970:	6839      	ldr	r1, [r7, #0]
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f000 f876 	bl	8014a64 <USBD_CtlError>
      break;
 8014978:	bf00      	nop
  }
}
 801497a:	bf00      	nop
 801497c:	3708      	adds	r7, #8
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}

08014982 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014982:	b580      	push	{r7, lr}
 8014984:	b082      	sub	sp, #8
 8014986:	af00      	add	r7, sp, #0
 8014988:	6078      	str	r0, [r7, #4]
 801498a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	885b      	ldrh	r3, [r3, #2]
 8014990:	2b01      	cmp	r3, #1
 8014992:	d106      	bne.n	80149a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2201      	movs	r2, #1
 8014998:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    USBD_CtlSendStatus(pdev);
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f000 fc5f 	bl	8015260 <USBD_CtlSendStatus>
  }
}
 80149a2:	bf00      	nop
 80149a4:	3708      	adds	r7, #8
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}

080149aa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80149aa:	b580      	push	{r7, lr}
 80149ac:	b082      	sub	sp, #8
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	6078      	str	r0, [r7, #4]
 80149b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80149ba:	3b01      	subs	r3, #1
 80149bc:	2b02      	cmp	r3, #2
 80149be:	d80b      	bhi.n	80149d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	885b      	ldrh	r3, [r3, #2]
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d10c      	bne.n	80149e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2200      	movs	r2, #0
 80149cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        USBD_CtlSendStatus(pdev);
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 fc45 	bl	8015260 <USBD_CtlSendStatus>
      }
      break;
 80149d6:	e004      	b.n	80149e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80149d8:	6839      	ldr	r1, [r7, #0]
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f000 f842 	bl	8014a64 <USBD_CtlError>
      break;
 80149e0:	e000      	b.n	80149e4 <USBD_ClrFeature+0x3a>
      break;
 80149e2:	bf00      	nop
  }
}
 80149e4:	bf00      	nop
 80149e6:	3708      	adds	r7, #8
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}

080149ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80149ec:	b480      	push	{r7}
 80149ee:	b083      	sub	sp, #12
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	781a      	ldrb	r2, [r3, #0]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	785a      	ldrb	r2, [r3, #1]
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	3302      	adds	r3, #2
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	3303      	adds	r3, #3
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	021b      	lsls	r3, r3, #8
 8014a18:	b29b      	uxth	r3, r3
 8014a1a:	4413      	add	r3, r2
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	3304      	adds	r3, #4
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	b29a      	uxth	r2, r3
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	3305      	adds	r3, #5
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	021b      	lsls	r3, r3, #8
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	4413      	add	r3, r2
 8014a38:	b29a      	uxth	r2, r3
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	3306      	adds	r3, #6
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	b29a      	uxth	r2, r3
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	3307      	adds	r3, #7
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	021b      	lsls	r3, r3, #8
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	4413      	add	r3, r2
 8014a54:	b29a      	uxth	r2, r3
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	80da      	strh	r2, [r3, #6]

}
 8014a5a:	bf00      	nop
 8014a5c:	370c      	adds	r7, #12
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bc80      	pop	{r7}
 8014a62:	4770      	bx	lr

08014a64 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014a6e:	2180      	movs	r1, #128	; 0x80
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f7fe ff85 	bl	8013980 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014a76:	2100      	movs	r1, #0
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f7fe ff81 	bl	8013980 <USBD_LL_StallEP>
}
 8014a7e:	bf00      	nop
 8014a80:	3708      	adds	r7, #8
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}

08014a86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014a86:	b580      	push	{r7, lr}
 8014a88:	b086      	sub	sp, #24
 8014a8a:	af00      	add	r7, sp, #0
 8014a8c:	60f8      	str	r0, [r7, #12]
 8014a8e:	60b9      	str	r1, [r7, #8]
 8014a90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014a92:	2300      	movs	r3, #0
 8014a94:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d032      	beq.n	8014b02 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f000 f834 	bl	8014b0a <USBD_GetLen>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	005b      	lsls	r3, r3, #1
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8014ab0:	7dfb      	ldrb	r3, [r7, #23]
 8014ab2:	1c5a      	adds	r2, r3, #1
 8014ab4:	75fa      	strb	r2, [r7, #23]
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	4413      	add	r3, r2
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	7812      	ldrb	r2, [r2, #0]
 8014ac0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014ac2:	7dfb      	ldrb	r3, [r7, #23]
 8014ac4:	1c5a      	adds	r2, r3, #1
 8014ac6:	75fa      	strb	r2, [r7, #23]
 8014ac8:	461a      	mov	r2, r3
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	4413      	add	r3, r2
 8014ace:	2203      	movs	r2, #3
 8014ad0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8014ad2:	e012      	b.n	8014afa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	1c5a      	adds	r2, r3, #1
 8014ad8:	60fa      	str	r2, [r7, #12]
 8014ada:	7dfa      	ldrb	r2, [r7, #23]
 8014adc:	1c51      	adds	r1, r2, #1
 8014ade:	75f9      	strb	r1, [r7, #23]
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	440a      	add	r2, r1
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8014aea:	7dfb      	ldrb	r3, [r7, #23]
 8014aec:	1c5a      	adds	r2, r3, #1
 8014aee:	75fa      	strb	r2, [r7, #23]
 8014af0:	461a      	mov	r2, r3
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	4413      	add	r3, r2
 8014af6:	2200      	movs	r2, #0
 8014af8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	781b      	ldrb	r3, [r3, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d1e8      	bne.n	8014ad4 <USBD_GetString+0x4e>
    }
  }
}
 8014b02:	bf00      	nop
 8014b04:	3718      	adds	r7, #24
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014b0a:	b480      	push	{r7}
 8014b0c:	b085      	sub	sp, #20
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014b12:	2300      	movs	r3, #0
 8014b14:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014b16:	e005      	b.n	8014b24 <USBD_GetLen+0x1a>
  {
    len++;
 8014b18:	7bfb      	ldrb	r3, [r7, #15]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	3301      	adds	r3, #1
 8014b22:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d1f5      	bne.n	8014b18 <USBD_GetLen+0xe>
  }

  return len;
 8014b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3714      	adds	r7, #20
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bc80      	pop	{r7}
 8014b36:	4770      	bx	lr

08014b38 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8014b38:	b480      	push	{r7}
 8014b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014b3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bc80      	pop	{r7}
 8014b44:	4770      	bx	lr

08014b46 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8014b46:	b480      	push	{r7}
 8014b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8014b4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bc80      	pop	{r7}
 8014b52:	4770      	bx	lr

08014b54 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* report)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b082      	sub	sp, #8
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
	 USBD_OutEvent_HID(report);
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f7fd fab1 	bl	80120c4 <USBD_OutEvent_HID>
 /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8014b62:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	3708      	adds	r7, #8
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}

08014b6c <CUSTOM_HID_GetEvent_FS>:

/* USER CODE BEGIN 7 */
static int8_t CUSTOM_HID_GetEvent_FS(USBD_SetupReqTypedef* req,uint8_t** return_buf)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_GetEvent_HID((req->wValue & 0xff),req->wLength,return_buf);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	885b      	ldrh	r3, [r3, #2]
 8014b7a:	b2d8      	uxtb	r0, r3
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	88db      	ldrh	r3, [r3, #6]
 8014b80:	683a      	ldr	r2, [r7, #0]
 8014b82:	4619      	mov	r1, r3
 8014b84:	f7fd fab6 	bl	80120f4 <USBD_GetEvent_HID>
  return (USBD_OK);
 8014b88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3708      	adds	r7, #8
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}

08014b92 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8014b92:	b580      	push	{r7, lr}
 8014b94:	b084      	sub	sp, #16
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	6078      	str	r0, [r7, #4]
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8014ba2:	2340      	movs	r3, #64	; 0x40
 8014ba4:	2203      	movs	r2, #3
 8014ba6:	2183      	movs	r1, #131	; 0x83
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f7fe fea4 	bl	80138f6 <USBD_LL_OpenEP>
		  	  	 USBD_EP_TYPE_INTR,
				 CUSTOM_HID_EPIN_SIZE);


  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8014bae:	2340      	movs	r3, #64	; 0x40
 8014bb0:	2203      	movs	r2, #3
 8014bb2:	2102      	movs	r1, #2
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f7fe fe9e 	bl	80138f6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);



  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8014bba:	f44f 7005 	mov.w	r0, #532	; 0x214
 8014bbe:	f003 f831 	bl	8017c24 <malloc>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->pClassData == NULL)
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d102      	bne.n	8014bdc <USBD_CUSTOM_HID_Init+0x4a>
  {
    ret = 1U;
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	73fb      	strb	r3, [r7, #15]
 8014bda:	e013      	b.n	8014c04 <USBD_CUSTOM_HID_Init+0x72>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014be2:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	2200      	movs	r2, #0
 8014be8:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8014bf6:	68ba      	ldr	r2, [r7, #8]
 8014bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014bfc:	2102      	movs	r1, #2
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f7fe ff63 	bl	8013aca <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8014c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3710      	adds	r7, #16
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}

08014c0e <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8014c0e:	b580      	push	{r7, lr}
 8014c10:	b082      	sub	sp, #8
 8014c12:	af00      	add	r7, sp, #0
 8014c14:	6078      	str	r0, [r7, #4]
 8014c16:	460b      	mov	r3, r1
 8014c18:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8014c1a:	2183      	movs	r1, #131	; 0x83
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f7fe fe90 	bl	8013942 <USBD_LL_CloseEP>


  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8014c22:	2102      	movs	r1, #2
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f7fe fe8c 	bl	8013942 <USBD_LL_CloseEP>


  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d00e      	beq.n	8014c52 <USBD_CUSTOM_HID_DeInit+0x44>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014c3a:	689b      	ldr	r3, [r3, #8]
 8014c3c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014c44:	4618      	mov	r0, r3
 8014c46:	f002 fff5 	bl	8017c34 <free>
    pdev->pClassData = NULL;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  return USBD_OK;
 8014c52:	2300      	movs	r3, #0
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3708      	adds	r7, #8
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b088      	sub	sp, #32
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014c6c:	613b      	str	r3, [r7, #16]

  uint8_t* get_feature_return_buf;
  uint16_t len = 0U;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8014c72:	2300      	movs	r3, #0
 8014c74:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8014c76:	2300      	movs	r3, #0
 8014c78:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d076      	beq.n	8014d78 <USBD_CUSTOM_HID_Setup+0x11c>
 8014c8a:	2b20      	cmp	r3, #32
 8014c8c:	f040 8102 	bne.w	8014e94 <USBD_CUSTOM_HID_Setup+0x238>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	785b      	ldrb	r3, [r3, #1]
 8014c94:	3b01      	subs	r3, #1
 8014c96:	2b0a      	cmp	r3, #10
 8014c98:	d866      	bhi.n	8014d68 <USBD_CUSTOM_HID_Setup+0x10c>
 8014c9a:	a201      	add	r2, pc, #4	; (adr r2, 8014ca0 <USBD_CUSTOM_HID_Setup+0x44>)
 8014c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ca0:	08014d2d 	.word	0x08014d2d
 8014ca4:	08014d03 	.word	0x08014d03
 8014ca8:	08014cdd 	.word	0x08014cdd
 8014cac:	08014d69 	.word	0x08014d69
 8014cb0:	08014d69 	.word	0x08014d69
 8014cb4:	08014d69 	.word	0x08014d69
 8014cb8:	08014d69 	.word	0x08014d69
 8014cbc:	08014d69 	.word	0x08014d69
 8014cc0:	08014d15 	.word	0x08014d15
 8014cc4:	08014cef 	.word	0x08014cef
 8014cc8:	08014ccd 	.word	0x08014ccd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	885b      	ldrh	r3, [r3, #2]
 8014cd0:	b2db      	uxtb	r3, r3
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
          break;
 8014cda:	e04c      	b.n	8014d76 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014ce2:	2201      	movs	r2, #1
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f000 fa5c 	bl	80151a4 <USBD_CtlSendData>
          break;
 8014cec:	e043      	b.n	8014d76 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	885b      	ldrh	r3, [r3, #2]
 8014cf2:	0a1b      	lsrs	r3, r3, #8
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	b2db      	uxtb	r3, r3
 8014cf8:	461a      	mov	r2, r3
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
          break;
 8014d00:	e039      	b.n	8014d76 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014d08:	2201      	movs	r2, #1
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f000 fa49 	bl	80151a4 <USBD_CtlSendData>
          break;
 8014d12:	e030      	b.n	8014d76 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	2201      	movs	r2, #1
 8014d18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8014d1c:	6939      	ldr	r1, [r7, #16]
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	88db      	ldrh	r3, [r3, #6]
 8014d22:	461a      	mov	r2, r3
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f000 fa6b 	bl	8015200 <USBD_CtlPrepareRx>
          break;
 8014d2a:	e024      	b.n	8014d76 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_REPORT: //TODO: check get reports
          get_feature_return_buf = 0;
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	60fb      	str	r3, [r7, #12]
          ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->GetEvent(req, &get_feature_return_buf);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014d36:	691b      	ldr	r3, [r3, #16]
 8014d38:	f107 020c 	add.w	r2, r7, #12
 8014d3c:	4611      	mov	r1, r2
 8014d3e:	6838      	ldr	r0, [r7, #0]
 8014d40:	4798      	blx	r3
          // user must set return buffer in callback now
          if(get_feature_return_buf == 0){
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d105      	bne.n	8014d54 <USBD_CUSTOM_HID_Setup+0xf8>
        	  USBD_CtlError (pdev, req);
 8014d48:	6839      	ldr	r1, [r7, #0]
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f7ff fe8a 	bl	8014a64 <USBD_CtlError>
        	  return USBD_FAIL;
 8014d50:	2302      	movs	r3, #2
 8014d52:	e0a7      	b.n	8014ea4 <USBD_CUSTOM_HID_Setup+0x248>
           }else{
        	   USBD_CtlSendData (pdev, get_feature_return_buf, (uint8_t)(req->wLength));
 8014d54:	68f9      	ldr	r1, [r7, #12]
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	88db      	ldrh	r3, [r3, #6]
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	b29b      	uxth	r3, r3
 8014d5e:	461a      	mov	r2, r3
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f000 fa1f 	bl	80151a4 <USBD_CtlSendData>
            }

          break;
 8014d66:	e006      	b.n	8014d76 <USBD_CUSTOM_HID_Setup+0x11a>
        default:
          USBD_CtlError(pdev, req);
 8014d68:	6839      	ldr	r1, [r7, #0]
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f7ff fe7a 	bl	8014a64 <USBD_CtlError>
          ret = USBD_FAIL;
 8014d70:	2302      	movs	r3, #2
 8014d72:	75fb      	strb	r3, [r7, #23]
          break;
 8014d74:	bf00      	nop
      }
      break;
 8014d76:	e094      	b.n	8014ea2 <USBD_CUSTOM_HID_Setup+0x246>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	785b      	ldrb	r3, [r3, #1]
 8014d7c:	2b0b      	cmp	r3, #11
 8014d7e:	f200 8081 	bhi.w	8014e84 <USBD_CUSTOM_HID_Setup+0x228>
 8014d82:	a201      	add	r2, pc, #4	; (adr r2, 8014d88 <USBD_CUSTOM_HID_Setup+0x12c>)
 8014d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d88:	08014db9 	.word	0x08014db9
 8014d8c:	08014e85 	.word	0x08014e85
 8014d90:	08014e85 	.word	0x08014e85
 8014d94:	08014e85 	.word	0x08014e85
 8014d98:	08014e85 	.word	0x08014e85
 8014d9c:	08014e85 	.word	0x08014e85
 8014da0:	08014de1 	.word	0x08014de1
 8014da4:	08014e85 	.word	0x08014e85
 8014da8:	08014e85 	.word	0x08014e85
 8014dac:	08014e85 	.word	0x08014e85
 8014db0:	08014e33 	.word	0x08014e33
 8014db4:	08014e5d 	.word	0x08014e5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014dbe:	2b03      	cmp	r3, #3
 8014dc0:	d107      	bne.n	8014dd2 <USBD_CUSTOM_HID_Setup+0x176>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8014dc2:	f107 030a 	add.w	r3, r7, #10
 8014dc6:	2202      	movs	r2, #2
 8014dc8:	4619      	mov	r1, r3
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f000 f9ea 	bl	80151a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014dd0:	e05f      	b.n	8014e92 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 8014dd2:	6839      	ldr	r1, [r7, #0]
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f7ff fe45 	bl	8014a64 <USBD_CtlError>
            ret = USBD_FAIL;
 8014dda:	2302      	movs	r3, #2
 8014ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8014dde:	e058      	b.n	8014e92 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	885b      	ldrh	r3, [r3, #2]
 8014de4:	0a1b      	lsrs	r3, r3, #8
 8014de6:	b29b      	uxth	r3, r3
 8014de8:	2b22      	cmp	r3, #34	; 0x22
 8014dea:	d10d      	bne.n	8014e08 <USBD_CUSTOM_HID_Setup+0x1ac>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	88db      	ldrh	r3, [r3, #6]
 8014df0:	f240 42f3 	movw	r2, #1267	; 0x4f3
 8014df4:	4293      	cmp	r3, r2
 8014df6:	bf28      	it	cs
 8014df8:	4613      	movcs	r3, r2
 8014dfa:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	61bb      	str	r3, [r7, #24]
 8014e06:	e00d      	b.n	8014e24 <USBD_CUSTOM_HID_Setup+0x1c8>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	885b      	ldrh	r3, [r3, #2]
 8014e0c:	0a1b      	lsrs	r3, r3, #8
 8014e0e:	b29b      	uxth	r3, r3
 8014e10:	2b21      	cmp	r3, #33	; 0x21
 8014e12:	d107      	bne.n	8014e24 <USBD_CUSTOM_HID_Setup+0x1c8>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8014e14:	4b25      	ldr	r3, [pc, #148]	; (8014eac <USBD_CUSTOM_HID_Setup+0x250>)
 8014e16:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	88db      	ldrh	r3, [r3, #6]
 8014e1c:	2b09      	cmp	r3, #9
 8014e1e:	bf28      	it	cs
 8014e20:	2309      	movcs	r3, #9
 8014e22:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8014e24:	8bfb      	ldrh	r3, [r7, #30]
 8014e26:	461a      	mov	r2, r3
 8014e28:	69b9      	ldr	r1, [r7, #24]
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f000 f9ba 	bl	80151a4 <USBD_CtlSendData>
          break;
 8014e30:	e02f      	b.n	8014e92 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014e38:	2b03      	cmp	r3, #3
 8014e3a:	d108      	bne.n	8014e4e <USBD_CUSTOM_HID_Setup+0x1f2>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8014e3c:	693b      	ldr	r3, [r7, #16]
 8014e3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014e42:	2201      	movs	r2, #1
 8014e44:	4619      	mov	r1, r3
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f000 f9ac 	bl	80151a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014e4c:	e021      	b.n	8014e92 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 8014e4e:	6839      	ldr	r1, [r7, #0]
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7ff fe07 	bl	8014a64 <USBD_CtlError>
            ret = USBD_FAIL;
 8014e56:	2302      	movs	r3, #2
 8014e58:	75fb      	strb	r3, [r7, #23]
          break;
 8014e5a:	e01a      	b.n	8014e92 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014e62:	2b03      	cmp	r3, #3
 8014e64:	d107      	bne.n	8014e76 <USBD_CUSTOM_HID_Setup+0x21a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	885b      	ldrh	r3, [r3, #2]
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014e74:	e00d      	b.n	8014e92 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 8014e76:	6839      	ldr	r1, [r7, #0]
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f7ff fdf3 	bl	8014a64 <USBD_CtlError>
            ret = USBD_FAIL;
 8014e7e:	2302      	movs	r3, #2
 8014e80:	75fb      	strb	r3, [r7, #23]
          break;
 8014e82:	e006      	b.n	8014e92 <USBD_CUSTOM_HID_Setup+0x236>

        default:
          USBD_CtlError(pdev, req);
 8014e84:	6839      	ldr	r1, [r7, #0]
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f7ff fdec 	bl	8014a64 <USBD_CtlError>
          ret = USBD_FAIL;
 8014e8c:	2302      	movs	r3, #2
 8014e8e:	75fb      	strb	r3, [r7, #23]
          break;
 8014e90:	bf00      	nop
      }
      break;
 8014e92:	e006      	b.n	8014ea2 <USBD_CUSTOM_HID_Setup+0x246>

    default:
      USBD_CtlError(pdev, req);
 8014e94:	6839      	ldr	r1, [r7, #0]
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f7ff fde4 	bl	8014a64 <USBD_CtlError>
      ret = USBD_FAIL;
 8014e9c:	2302      	movs	r3, #2
 8014e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8014ea0:	bf00      	nop
  }
  return ret;
 8014ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3720      	adds	r7, #32
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	200006d8 	.word	0x200006d8

08014eb0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b086      	sub	sp, #24
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	4613      	mov	r3, r2
 8014ebc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014ec4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014ecc:	2b03      	cmp	r3, #3
 8014ece:	d111      	bne.n	8014ef4 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d10a      	bne.n	8014ef0 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	2201      	movs	r2, #1
 8014ede:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8014ee2:	88fb      	ldrh	r3, [r7, #6]
 8014ee4:	68ba      	ldr	r2, [r7, #8]
 8014ee6:	2183      	movs	r1, #131	; 0x83
 8014ee8:	68f8      	ldr	r0, [r7, #12]
 8014eea:	f7fe fdcb 	bl	8013a84 <USBD_LL_Transmit>
 8014eee:	e001      	b.n	8014ef4 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	e000      	b.n	8014ef6 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8014ef4:	2300      	movs	r3, #0
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3718      	adds	r7, #24
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}
	...

08014f00 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8014f00:	b480      	push	{r7}
 8014f02:	b083      	sub	sp, #12
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2229      	movs	r2, #41	; 0x29
 8014f0c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8014f0e:	4b03      	ldr	r3, [pc, #12]	; (8014f1c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8014f10:	4618      	mov	r0, r3
 8014f12:	370c      	adds	r7, #12
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bc80      	pop	{r7}
 8014f18:	4770      	bx	lr
 8014f1a:	bf00      	nop
 8014f1c:	20000654 	.word	0x20000654

08014f20 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8014f20:	b480      	push	{r7}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2229      	movs	r2, #41	; 0x29
 8014f2c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8014f2e:	4b03      	ldr	r3, [pc, #12]	; (8014f3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	370c      	adds	r7, #12
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bc80      	pop	{r7}
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	20000680 	.word	0x20000680

08014f40 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014f40:	b480      	push	{r7}
 8014f42:	b083      	sub	sp, #12
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2229      	movs	r2, #41	; 0x29
 8014f4c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8014f4e:	4b03      	ldr	r3, [pc, #12]	; (8014f5c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	370c      	adds	r7, #12
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bc80      	pop	{r7}
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop
 8014f5c:	200006ac 	.word	0x200006ac

08014f60 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8014f60:	b480      	push	{r7}
 8014f62:	b083      	sub	sp, #12
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	460b      	mov	r3, r1
 8014f6a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014f72:	2200      	movs	r2, #0
 8014f74:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8014f78:	2300      	movs	r3, #0
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	370c      	adds	r7, #12
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bc80      	pop	{r7}
 8014f82:	4770      	bx	lr

08014f84 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014f96:	60fb      	str	r3, [r7, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],hhid->Report_buf[1]);

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	68fa      	ldr	r2, [r7, #12]
 8014fa2:	4610      	mov	r0, r2
 8014fa4:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8014fa6:	68fa      	ldr	r2, [r7, #12]
 8014fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014fac:	2102      	movs	r1, #2
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f7fe fd8b 	bl	8013aca <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8014fb4:	2300      	movs	r3, #0
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	3710      	adds	r7, #16
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}

08014fbe <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014fbe:	b580      	push	{r7, lr}
 8014fc0:	b084      	sub	sp, #16
 8014fc2:	af00      	add	r7, sp, #0
 8014fc4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014fcc:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8014fd4:	2b01      	cmp	r3, #1
 8014fd6:	d10a      	bne.n	8014fee <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	68fa      	ldr	r2, [r7, #12]
 8014fe2:	4610      	mov	r0, r2
 8014fe4:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  }

  return USBD_OK;
 8014fee:	2300      	movs	r3, #0
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3710      	adds	r7, #16
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	b083      	sub	sp, #12
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	220a      	movs	r2, #10
 8015004:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8015006:	4b03      	ldr	r3, [pc, #12]	; (8015014 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8015008:	4618      	mov	r0, r3
 801500a:	370c      	adds	r7, #12
 801500c:	46bd      	mov	sp, r7
 801500e:	bc80      	pop	{r7}
 8015010:	4770      	bx	lr
 8015012:	bf00      	nop
 8015014:	200006e4 	.word	0x200006e4

08015018 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8015018:	b480      	push	{r7}
 801501a:	b085      	sub	sp, #20
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8015022:	2302      	movs	r3, #2
 8015024:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d005      	beq.n	8015038 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	683a      	ldr	r2, [r7, #0]
 8015030:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;
 8015034:	2300      	movs	r3, #0
 8015036:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015038:	7bfb      	ldrb	r3, [r7, #15]
}
 801503a:	4618      	mov	r0, r3
 801503c:	3714      	adds	r7, #20
 801503e:	46bd      	mov	sp, r7
 8015040:	bc80      	pop	{r7}
 8015042:	4770      	bx	lr

08015044 <USBD_FS_DeviceDescriptor_Composite>:
    USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
    USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
  } ;

uint8_t * USBD_FS_DeviceDescriptor_Composite(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015044:	b480      	push	{r7}
 8015046:	b083      	sub	sp, #12
 8015048:	af00      	add	r7, sp, #0
 801504a:	4603      	mov	r3, r0
 801504c:	6039      	str	r1, [r7, #0]
 801504e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc_Composite);
 8015050:	683b      	ldr	r3, [r7, #0]
 8015052:	2212      	movs	r2, #18
 8015054:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc_Composite;
 8015056:	4b03      	ldr	r3, [pc, #12]	; (8015064 <USBD_FS_DeviceDescriptor_Composite+0x20>)
}
 8015058:	4618      	mov	r0, r3
 801505a:	370c      	adds	r7, #12
 801505c:	46bd      	mov	sp, r7
 801505e:	bc80      	pop	{r7}
 8015060:	4770      	bx	lr
 8015062:	bf00      	nop
 8015064:	2000070c 	.word	0x2000070c

08015068 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015068:	b480      	push	{r7}
 801506a:	b083      	sub	sp, #12
 801506c:	af00      	add	r7, sp, #0
 801506e:	4603      	mov	r3, r0
 8015070:	6039      	str	r1, [r7, #0]
 8015072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	2204      	movs	r2, #4
 8015078:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801507a:	4b03      	ldr	r3, [pc, #12]	; (8015088 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801507c:	4618      	mov	r0, r3
 801507e:	370c      	adds	r7, #12
 8015080:	46bd      	mov	sp, r7
 8015082:	bc80      	pop	{r7}
 8015084:	4770      	bx	lr
 8015086:	bf00      	nop
 8015088:	20000720 	.word	0x20000720

0801508c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	4603      	mov	r3, r0
 8015094:	6039      	str	r1, [r7, #0]
 8015096:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015098:	79fb      	ldrb	r3, [r7, #7]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d105      	bne.n	80150aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801509e:	683a      	ldr	r2, [r7, #0]
 80150a0:	4907      	ldr	r1, [pc, #28]	; (80150c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80150a2:	4808      	ldr	r0, [pc, #32]	; (80150c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80150a4:	f7ff fcef 	bl	8014a86 <USBD_GetString>
 80150a8:	e004      	b.n	80150b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80150aa:	683a      	ldr	r2, [r7, #0]
 80150ac:	4904      	ldr	r1, [pc, #16]	; (80150c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80150ae:	4805      	ldr	r0, [pc, #20]	; (80150c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80150b0:	f7ff fce9 	bl	8014a86 <USBD_GetString>
  }
  return USBD_StrDesc;
 80150b4:	4b02      	ldr	r3, [pc, #8]	; (80150c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3708      	adds	r7, #8
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	20001fa0 	.word	0x20001fa0
 80150c4:	08018b50 	.word	0x08018b50

080150c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	4603      	mov	r3, r0
 80150d0:	6039      	str	r1, [r7, #0]
 80150d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80150d4:	683a      	ldr	r2, [r7, #0]
 80150d6:	4904      	ldr	r1, [pc, #16]	; (80150e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80150d8:	4804      	ldr	r0, [pc, #16]	; (80150ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80150da:	f7ff fcd4 	bl	8014a86 <USBD_GetString>
  return USBD_StrDesc;
 80150de:	4b02      	ldr	r3, [pc, #8]	; (80150e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3708      	adds	r7, #8
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	20001fa0 	.word	0x20001fa0
 80150ec:	08018b5c 	.word	0x08018b5c

080150f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	4603      	mov	r3, r0
 80150f8:	6039      	str	r1, [r7, #0]
 80150fa:	71fb      	strb	r3, [r7, #7]
	if(speed == USBD_SPEED_HIGH)
 80150fc:	79fb      	ldrb	r3, [r7, #7]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d105      	bne.n	801510e <USBD_FS_SerialStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8015102:	683a      	ldr	r2, [r7, #0]
 8015104:	4907      	ldr	r1, [pc, #28]	; (8015124 <USBD_FS_SerialStrDescriptor+0x34>)
 8015106:	4808      	ldr	r0, [pc, #32]	; (8015128 <USBD_FS_SerialStrDescriptor+0x38>)
 8015108:	f7ff fcbd 	bl	8014a86 <USBD_GetString>
 801510c:	e004      	b.n	8015118 <USBD_FS_SerialStrDescriptor+0x28>
	}
	else
	{
	    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 801510e:	683a      	ldr	r2, [r7, #0]
 8015110:	4904      	ldr	r1, [pc, #16]	; (8015124 <USBD_FS_SerialStrDescriptor+0x34>)
 8015112:	4805      	ldr	r0, [pc, #20]	; (8015128 <USBD_FS_SerialStrDescriptor+0x38>)
 8015114:	f7ff fcb7 	bl	8014a86 <USBD_GetString>
	}
	return USBD_StrDesc;
 8015118:	4b02      	ldr	r3, [pc, #8]	; (8015124 <USBD_FS_SerialStrDescriptor+0x34>)
}
 801511a:	4618      	mov	r0, r3
 801511c:	3708      	adds	r7, #8
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	bf00      	nop
 8015124:	20001fa0 	.word	0x20001fa0
 8015128:	08018b6c 	.word	0x08018b6c

0801512c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
 8015132:	4603      	mov	r3, r0
 8015134:	6039      	str	r1, [r7, #0]
 8015136:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015138:	79fb      	ldrb	r3, [r7, #7]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d105      	bne.n	801514a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801513e:	683a      	ldr	r2, [r7, #0]
 8015140:	4907      	ldr	r1, [pc, #28]	; (8015160 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015142:	4808      	ldr	r0, [pc, #32]	; (8015164 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015144:	f7ff fc9f 	bl	8014a86 <USBD_GetString>
 8015148:	e004      	b.n	8015154 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801514a:	683a      	ldr	r2, [r7, #0]
 801514c:	4904      	ldr	r1, [pc, #16]	; (8015160 <USBD_FS_ConfigStrDescriptor+0x34>)
 801514e:	4805      	ldr	r0, [pc, #20]	; (8015164 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015150:	f7ff fc99 	bl	8014a86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015154:	4b02      	ldr	r3, [pc, #8]	; (8015160 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015156:	4618      	mov	r0, r3
 8015158:	3708      	adds	r7, #8
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	20001fa0 	.word	0x20001fa0
 8015164:	08018b7c 	.word	0x08018b7c

08015168 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	4603      	mov	r3, r0
 8015170:	6039      	str	r1, [r7, #0]
 8015172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015174:	79fb      	ldrb	r3, [r7, #7]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d105      	bne.n	8015186 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801517a:	683a      	ldr	r2, [r7, #0]
 801517c:	4907      	ldr	r1, [pc, #28]	; (801519c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801517e:	4808      	ldr	r0, [pc, #32]	; (80151a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015180:	f7ff fc81 	bl	8014a86 <USBD_GetString>
 8015184:	e004      	b.n	8015190 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015186:	683a      	ldr	r2, [r7, #0]
 8015188:	4904      	ldr	r1, [pc, #16]	; (801519c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801518a:	4805      	ldr	r0, [pc, #20]	; (80151a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801518c:	f7ff fc7b 	bl	8014a86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015190:	4b02      	ldr	r3, [pc, #8]	; (801519c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015192:	4618      	mov	r0, r3
 8015194:	3708      	adds	r7, #8
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	20001fa0 	.word	0x20001fa0
 80151a0:	08018b8c 	.word	0x08018b8c

080151a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b084      	sub	sp, #16
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	60f8      	str	r0, [r7, #12]
 80151ac:	60b9      	str	r1, [r7, #8]
 80151ae:	4613      	mov	r3, r2
 80151b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	2202      	movs	r2, #2
 80151b6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80151ba:	88fa      	ldrh	r2, [r7, #6]
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 80151c0:	88fa      	ldrh	r2, [r7, #6]
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80151c6:	88fb      	ldrh	r3, [r7, #6]
 80151c8:	68ba      	ldr	r2, [r7, #8]
 80151ca:	2100      	movs	r1, #0
 80151cc:	68f8      	ldr	r0, [r7, #12]
 80151ce:	f7fe fc59 	bl	8013a84 <USBD_LL_Transmit>

  return USBD_OK;
 80151d2:	2300      	movs	r3, #0
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3710      	adds	r7, #16
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}

080151dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b084      	sub	sp, #16
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	60f8      	str	r0, [r7, #12]
 80151e4:	60b9      	str	r1, [r7, #8]
 80151e6:	4613      	mov	r3, r2
 80151e8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80151ea:	88fb      	ldrh	r3, [r7, #6]
 80151ec:	68ba      	ldr	r2, [r7, #8]
 80151ee:	2100      	movs	r1, #0
 80151f0:	68f8      	ldr	r0, [r7, #12]
 80151f2:	f7fe fc47 	bl	8013a84 <USBD_LL_Transmit>

  return USBD_OK;
 80151f6:	2300      	movs	r3, #0
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	3710      	adds	r7, #16
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}

08015200 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	4613      	mov	r3, r2
 801520c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	2203      	movs	r2, #3
 8015212:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8015216:	88fa      	ldrh	r2, [r7, #6]
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 801521e:	88fa      	ldrh	r2, [r7, #6]
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015226:	88fb      	ldrh	r3, [r7, #6]
 8015228:	68ba      	ldr	r2, [r7, #8]
 801522a:	2100      	movs	r1, #0
 801522c:	68f8      	ldr	r0, [r7, #12]
 801522e:	f7fe fc4c 	bl	8013aca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015232:	2300      	movs	r3, #0
}
 8015234:	4618      	mov	r0, r3
 8015236:	3710      	adds	r7, #16
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}

0801523c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b084      	sub	sp, #16
 8015240:	af00      	add	r7, sp, #0
 8015242:	60f8      	str	r0, [r7, #12]
 8015244:	60b9      	str	r1, [r7, #8]
 8015246:	4613      	mov	r3, r2
 8015248:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801524a:	88fb      	ldrh	r3, [r7, #6]
 801524c:	68ba      	ldr	r2, [r7, #8]
 801524e:	2100      	movs	r1, #0
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	f7fe fc3a 	bl	8013aca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015256:	2300      	movs	r3, #0
}
 8015258:	4618      	mov	r0, r3
 801525a:	3710      	adds	r7, #16
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}

08015260 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b082      	sub	sp, #8
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2204      	movs	r2, #4
 801526c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015270:	2300      	movs	r3, #0
 8015272:	2200      	movs	r2, #0
 8015274:	2100      	movs	r1, #0
 8015276:	6878      	ldr	r0, [r7, #4]
 8015278:	f7fe fc04 	bl	8013a84 <USBD_LL_Transmit>

  return USBD_OK;
 801527c:	2300      	movs	r3, #0
}
 801527e:	4618      	mov	r0, r3
 8015280:	3708      	adds	r7, #8
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}

08015286 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015286:	b580      	push	{r7, lr}
 8015288:	b082      	sub	sp, #8
 801528a:	af00      	add	r7, sp, #0
 801528c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	2205      	movs	r2, #5
 8015292:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015296:	2300      	movs	r3, #0
 8015298:	2200      	movs	r2, #0
 801529a:	2100      	movs	r1, #0
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7fe fc14 	bl	8013aca <USBD_LL_PrepareReceive>

  return USBD_OK;
 80152a2:	2300      	movs	r3, #0
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	3708      	adds	r7, #8
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}

080152ac <_Znaj>:
 80152ac:	f000 b802 	b.w	80152b4 <_Znwj>

080152b0 <_ZdlPvj>:
 80152b0:	f000 b81a 	b.w	80152e8 <_ZdlPv>

080152b4 <_Znwj>:
 80152b4:	b510      	push	{r4, lr}
 80152b6:	2800      	cmp	r0, #0
 80152b8:	bf14      	ite	ne
 80152ba:	4604      	movne	r4, r0
 80152bc:	2401      	moveq	r4, #1
 80152be:	4620      	mov	r0, r4
 80152c0:	f002 fcb0 	bl	8017c24 <malloc>
 80152c4:	b930      	cbnz	r0, 80152d4 <_Znwj+0x20>
 80152c6:	f000 f807 	bl	80152d8 <_ZSt15get_new_handlerv>
 80152ca:	b908      	cbnz	r0, 80152d0 <_Znwj+0x1c>
 80152cc:	f002 fc79 	bl	8017bc2 <abort>
 80152d0:	4780      	blx	r0
 80152d2:	e7f4      	b.n	80152be <_Znwj+0xa>
 80152d4:	bd10      	pop	{r4, pc}
	...

080152d8 <_ZSt15get_new_handlerv>:
 80152d8:	4b02      	ldr	r3, [pc, #8]	; (80152e4 <_ZSt15get_new_handlerv+0xc>)
 80152da:	6818      	ldr	r0, [r3, #0]
 80152dc:	f3bf 8f5b 	dmb	ish
 80152e0:	4770      	bx	lr
 80152e2:	bf00      	nop
 80152e4:	20001504 	.word	0x20001504

080152e8 <_ZdlPv>:
 80152e8:	f002 bca4 	b.w	8017c34 <free>

080152ec <_ZNSaIcEC1Ev>:
 80152ec:	4770      	bx	lr

080152ee <_ZNSaIcED1Ev>:
 80152ee:	4770      	bx	lr

080152f0 <_ZSt17__throw_bad_allocv>:
 80152f0:	b508      	push	{r3, lr}
 80152f2:	f002 fc66 	bl	8017bc2 <abort>

080152f6 <_ZSt19__throw_logic_errorPKc>:
 80152f6:	b508      	push	{r3, lr}
 80152f8:	f002 fc63 	bl	8017bc2 <abort>

080152fc <_ZSt24__throw_invalid_argumentPKc>:
 80152fc:	b508      	push	{r3, lr}
 80152fe:	f002 fc60 	bl	8017bc2 <abort>

08015302 <_ZSt20__throw_length_errorPKc>:
 8015302:	b508      	push	{r3, lr}
 8015304:	f002 fc5d 	bl	8017bc2 <abort>

08015308 <_ZSt20__throw_out_of_rangePKc>:
 8015308:	b508      	push	{r3, lr}
 801530a:	f002 fc5a 	bl	8017bc2 <abort>

0801530e <_ZSt24__throw_out_of_range_fmtPKcz>:
 801530e:	b40f      	push	{r0, r1, r2, r3}
 8015310:	b580      	push	{r7, lr}
 8015312:	b082      	sub	sp, #8
 8015314:	af00      	add	r7, sp, #0
 8015316:	f107 0410 	add.w	r4, r7, #16
 801531a:	f854 5b04 	ldr.w	r5, [r4], #4
 801531e:	4628      	mov	r0, r5
 8015320:	f7ea ff16 	bl	8000150 <strlen>
 8015324:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8015328:	f023 0307 	bic.w	r3, r3, #7
 801532c:	ebad 0d03 	sub.w	sp, sp, r3
 8015330:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8015334:	4623      	mov	r3, r4
 8015336:	462a      	mov	r2, r5
 8015338:	4668      	mov	r0, sp
 801533a:	607c      	str	r4, [r7, #4]
 801533c:	f000 faa8 	bl	8015890 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8015340:	f002 fc3f 	bl	8017bc2 <abort>

08015344 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8015344:	b10a      	cbz	r2, 801534a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8015346:	f002 bc8b 	b.w	8017c60 <memcmp>
 801534a:	4610      	mov	r0, r2
 801534c:	4770      	bx	lr

0801534e <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 801534e:	4613      	mov	r3, r2
 8015350:	460a      	mov	r2, r1
 8015352:	b111      	cbz	r1, 801535a <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8015354:	7819      	ldrb	r1, [r3, #0]
 8015356:	f002 bc75 	b.w	8017c44 <memchr>
 801535a:	4608      	mov	r0, r1
 801535c:	4770      	bx	lr

0801535e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801535e:	b10a      	cbz	r2, 8015364 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8015360:	f002 bc8d 	b.w	8017c7e <memcpy>
 8015364:	4770      	bx	lr

08015366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8015366:	6001      	str	r1, [r0, #0]
 8015368:	4770      	bx	lr

0801536a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801536a:	6800      	ldr	r0, [r0, #0]
 801536c:	4770      	bx	lr

0801536e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801536e:	3008      	adds	r0, #8
 8015370:	4770      	bx	lr

08015372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8015372:	6081      	str	r1, [r0, #8]
 8015374:	4770      	bx	lr

08015376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8015376:	2200      	movs	r2, #0
 8015378:	6803      	ldr	r3, [r0, #0]
 801537a:	6041      	str	r1, [r0, #4]
 801537c:	545a      	strb	r2, [r3, r1]
 801537e:	4770      	bx	lr

08015380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8015380:	b508      	push	{r3, lr}
 8015382:	680b      	ldr	r3, [r1, #0]
 8015384:	2b00      	cmp	r3, #0
 8015386:	da02      	bge.n	801538e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8015388:	4809      	ldr	r0, [pc, #36]	; (80153b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 801538a:	f7ff ffba 	bl	8015302 <_ZSt20__throw_length_errorPKc>
 801538e:	4293      	cmp	r3, r2
 8015390:	d908      	bls.n	80153a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8015392:	0052      	lsls	r2, r2, #1
 8015394:	4293      	cmp	r3, r2
 8015396:	d205      	bcs.n	80153a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8015398:	2a00      	cmp	r2, #0
 801539a:	bfb6      	itet	lt
 801539c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80153a0:	600a      	strge	r2, [r1, #0]
 80153a2:	600b      	strlt	r3, [r1, #0]
 80153a4:	6808      	ldr	r0, [r1, #0]
 80153a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80153aa:	3001      	adds	r0, #1
 80153ac:	f7ff bf82 	b.w	80152b4 <_Znwj>
 80153b0:	08018d83 	.word	0x08018d83

080153b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80153b4:	4603      	mov	r3, r0
 80153b6:	f853 0b08 	ldr.w	r0, [r3], #8
 80153ba:	4298      	cmp	r0, r3
 80153bc:	d001      	beq.n	80153c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80153be:	f7ff bf93 	b.w	80152e8 <_ZdlPv>
 80153c2:	4770      	bx	lr

080153c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80153c4:	b510      	push	{r4, lr}
 80153c6:	6843      	ldr	r3, [r0, #4]
 80153c8:	4614      	mov	r4, r2
 80153ca:	4299      	cmp	r1, r3
 80153cc:	d904      	bls.n	80153d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 80153ce:	460a      	mov	r2, r1
 80153d0:	4802      	ldr	r0, [pc, #8]	; (80153dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80153d2:	4621      	mov	r1, r4
 80153d4:	f7ff ff9b 	bl	801530e <_ZSt24__throw_out_of_range_fmtPKcz>
 80153d8:	4608      	mov	r0, r1
 80153da:	bd10      	pop	{r4, pc}
 80153dc:	08018d0d 	.word	0x08018d0d

080153e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80153e0:	b508      	push	{r3, lr}
 80153e2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80153e6:	6840      	ldr	r0, [r0, #4]
 80153e8:	3901      	subs	r1, #1
 80153ea:	1a09      	subs	r1, r1, r0
 80153ec:	4291      	cmp	r1, r2
 80153ee:	d202      	bcs.n	80153f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7ff ff86 	bl	8015302 <_ZSt20__throw_length_errorPKc>
 80153f6:	bd08      	pop	{r3, pc}

080153f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80153f8:	2a01      	cmp	r2, #1
 80153fa:	b510      	push	{r4, lr}
 80153fc:	d102      	bne.n	8015404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80153fe:	780a      	ldrb	r2, [r1, #0]
 8015400:	7002      	strb	r2, [r0, #0]
 8015402:	bd10      	pop	{r4, pc}
 8015404:	f7ff ffab 	bl	801535e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8015408:	e7fb      	b.n	8015402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801540a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801540a:	b508      	push	{r3, lr}
 801540c:	1a52      	subs	r2, r2, r1
 801540e:	f7ff fff3 	bl	80153f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015412:	bd08      	pop	{r3, pc}

08015414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8015414:	b508      	push	{r3, lr}
 8015416:	1a52      	subs	r2, r2, r1
 8015418:	f7ff ffee 	bl	80153f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801541c:	bd08      	pop	{r3, pc}

0801541e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801541e:	4288      	cmp	r0, r1
 8015420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015422:	4604      	mov	r4, r0
 8015424:	460e      	mov	r6, r1
 8015426:	d020      	beq.n	801546a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8015428:	6802      	ldr	r2, [r0, #0]
 801542a:	f100 0308 	add.w	r3, r0, #8
 801542e:	429a      	cmp	r2, r3
 8015430:	bf08      	it	eq
 8015432:	220f      	moveq	r2, #15
 8015434:	684d      	ldr	r5, [r1, #4]
 8015436:	bf18      	it	ne
 8015438:	6882      	ldrne	r2, [r0, #8]
 801543a:	42aa      	cmp	r2, r5
 801543c:	d20b      	bcs.n	8015456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 801543e:	a902      	add	r1, sp, #8
 8015440:	f841 5d04 	str.w	r5, [r1, #-4]!
 8015444:	f7ff ff9c 	bl	8015380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015448:	4607      	mov	r7, r0
 801544a:	4620      	mov	r0, r4
 801544c:	f7ff ffb2 	bl	80153b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015450:	9b01      	ldr	r3, [sp, #4]
 8015452:	6027      	str	r7, [r4, #0]
 8015454:	60a3      	str	r3, [r4, #8]
 8015456:	b125      	cbz	r5, 8015462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8015458:	462a      	mov	r2, r5
 801545a:	6831      	ldr	r1, [r6, #0]
 801545c:	6820      	ldr	r0, [r4, #0]
 801545e:	f7ff ffcb 	bl	80153f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015462:	2200      	movs	r2, #0
 8015464:	6823      	ldr	r3, [r4, #0]
 8015466:	6065      	str	r5, [r4, #4]
 8015468:	555a      	strb	r2, [r3, r5]
 801546a:	b003      	add	sp, #12
 801546c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801546e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801546e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015472:	4616      	mov	r6, r2
 8015474:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8015478:	6842      	ldr	r2, [r0, #4]
 801547a:	469a      	mov	sl, r3
 801547c:	eba8 0306 	sub.w	r3, r8, r6
 8015480:	1a57      	subs	r7, r2, r1
 8015482:	4413      	add	r3, r2
 8015484:	6802      	ldr	r2, [r0, #0]
 8015486:	9301      	str	r3, [sp, #4]
 8015488:	f100 0308 	add.w	r3, r0, #8
 801548c:	429a      	cmp	r2, r3
 801548e:	460d      	mov	r5, r1
 8015490:	bf14      	ite	ne
 8015492:	6882      	ldrne	r2, [r0, #8]
 8015494:	220f      	moveq	r2, #15
 8015496:	a901      	add	r1, sp, #4
 8015498:	4604      	mov	r4, r0
 801549a:	f7ff ff71 	bl	8015380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801549e:	1bbf      	subs	r7, r7, r6
 80154a0:	4681      	mov	r9, r0
 80154a2:	b11d      	cbz	r5, 80154ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80154a4:	462a      	mov	r2, r5
 80154a6:	6821      	ldr	r1, [r4, #0]
 80154a8:	f7ff ffa6 	bl	80153f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80154ac:	f1ba 0f00 	cmp.w	sl, #0
 80154b0:	d008      	beq.n	80154c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80154b2:	f1b8 0f00 	cmp.w	r8, #0
 80154b6:	d005      	beq.n	80154c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80154b8:	4642      	mov	r2, r8
 80154ba:	4651      	mov	r1, sl
 80154bc:	eb09 0005 	add.w	r0, r9, r5
 80154c0:	f7ff ff9a 	bl	80153f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80154c4:	b147      	cbz	r7, 80154d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 80154c6:	6821      	ldr	r1, [r4, #0]
 80154c8:	442e      	add	r6, r5
 80154ca:	eb05 0008 	add.w	r0, r5, r8
 80154ce:	463a      	mov	r2, r7
 80154d0:	4431      	add	r1, r6
 80154d2:	4448      	add	r0, r9
 80154d4:	f7ff ff90 	bl	80153f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80154d8:	4620      	mov	r0, r4
 80154da:	f7ff ff6b 	bl	80153b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80154de:	9b01      	ldr	r3, [sp, #4]
 80154e0:	f8c4 9000 	str.w	r9, [r4]
 80154e4:	60a3      	str	r3, [r4, #8]
 80154e6:	b002      	add	sp, #8
 80154e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080154ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80154ec:	f100 0208 	add.w	r2, r0, #8
 80154f0:	6002      	str	r2, [r0, #0]
 80154f2:	2200      	movs	r2, #0
 80154f4:	6042      	str	r2, [r0, #4]
 80154f6:	7202      	strb	r2, [r0, #8]
 80154f8:	4770      	bx	lr

080154fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80154fa:	b570      	push	{r4, r5, r6, lr}
 80154fc:	4604      	mov	r4, r0
 80154fe:	460e      	mov	r6, r1
 8015500:	3008      	adds	r0, #8
 8015502:	6020      	str	r0, [r4, #0]
 8015504:	f856 3b08 	ldr.w	r3, [r6], #8
 8015508:	460d      	mov	r5, r1
 801550a:	429e      	cmp	r6, r3
 801550c:	d10b      	bne.n	8015526 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 801550e:	2210      	movs	r2, #16
 8015510:	4631      	mov	r1, r6
 8015512:	f7ff ff24 	bl	801535e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8015516:	686b      	ldr	r3, [r5, #4]
 8015518:	4620      	mov	r0, r4
 801551a:	6063      	str	r3, [r4, #4]
 801551c:	2300      	movs	r3, #0
 801551e:	602e      	str	r6, [r5, #0]
 8015520:	606b      	str	r3, [r5, #4]
 8015522:	722b      	strb	r3, [r5, #8]
 8015524:	bd70      	pop	{r4, r5, r6, pc}
 8015526:	6023      	str	r3, [r4, #0]
 8015528:	688b      	ldr	r3, [r1, #8]
 801552a:	60a3      	str	r3, [r4, #8]
 801552c:	e7f3      	b.n	8015516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0801552e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801552e:	b510      	push	{r4, lr}
 8015530:	4604      	mov	r4, r0
 8015532:	f7ff ff3f 	bl	80153b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015536:	4620      	mov	r0, r4
 8015538:	bd10      	pop	{r4, pc}

0801553a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 801553a:	b510      	push	{r4, lr}
 801553c:	4604      	mov	r4, r0
 801553e:	f7ff ff6e 	bl	801541e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8015542:	4620      	mov	r0, r4
 8015544:	bd10      	pop	{r4, pc}

08015546 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8015546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015548:	460b      	mov	r3, r1
 801554a:	4606      	mov	r6, r0
 801554c:	f853 7b08 	ldr.w	r7, [r3], #8
 8015550:	4605      	mov	r5, r0
 8015552:	42bb      	cmp	r3, r7
 8015554:	460c      	mov	r4, r1
 8015556:	f856 2b08 	ldr.w	r2, [r6], #8
 801555a:	d016      	beq.n	801558a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 801555c:	4296      	cmp	r6, r2
 801555e:	bf08      	it	eq
 8015560:	2200      	moveq	r2, #0
 8015562:	6007      	str	r7, [r0, #0]
 8015564:	6849      	ldr	r1, [r1, #4]
 8015566:	bf18      	it	ne
 8015568:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 801556c:	6041      	str	r1, [r0, #4]
 801556e:	68a1      	ldr	r1, [r4, #8]
 8015570:	6081      	str	r1, [r0, #8]
 8015572:	b142      	cbz	r2, 8015586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8015574:	6022      	str	r2, [r4, #0]
 8015576:	f8c4 c008 	str.w	ip, [r4, #8]
 801557a:	2300      	movs	r3, #0
 801557c:	6822      	ldr	r2, [r4, #0]
 801557e:	6063      	str	r3, [r4, #4]
 8015580:	7013      	strb	r3, [r2, #0]
 8015582:	4628      	mov	r0, r5
 8015584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015586:	6023      	str	r3, [r4, #0]
 8015588:	e7f7      	b.n	801557a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 801558a:	f7ff ff48 	bl	801541e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801558e:	e7f4      	b.n	801557a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08015590 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8015590:	6840      	ldr	r0, [r0, #4]
 8015592:	4770      	bx	lr

08015594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8015594:	2300      	movs	r3, #0
 8015596:	6802      	ldr	r2, [r0, #0]
 8015598:	6043      	str	r3, [r0, #4]
 801559a:	7013      	strb	r3, [r2, #0]
 801559c:	4770      	bx	lr

0801559e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 801559e:	6840      	ldr	r0, [r0, #4]
 80155a0:	fab0 f080 	clz	r0, r0
 80155a4:	0940      	lsrs	r0, r0, #5
 80155a6:	4770      	bx	lr

080155a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80155a8:	6800      	ldr	r0, [r0, #0]
 80155aa:	4408      	add	r0, r1
 80155ac:	4770      	bx	lr

080155ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 80155ae:	6843      	ldr	r3, [r0, #4]
 80155b0:	6800      	ldr	r0, [r0, #0]
 80155b2:	3b01      	subs	r3, #1
 80155b4:	4418      	add	r0, r3
 80155b6:	4770      	bx	lr

080155b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80155b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155ba:	6802      	ldr	r2, [r0, #0]
 80155bc:	f100 0308 	add.w	r3, r0, #8
 80155c0:	429a      	cmp	r2, r3
 80155c2:	bf08      	it	eq
 80155c4:	230f      	moveq	r3, #15
 80155c6:	6846      	ldr	r6, [r0, #4]
 80155c8:	bf18      	it	ne
 80155ca:	6883      	ldrne	r3, [r0, #8]
 80155cc:	1c75      	adds	r5, r6, #1
 80155ce:	429d      	cmp	r5, r3
 80155d0:	4604      	mov	r4, r0
 80155d2:	460f      	mov	r7, r1
 80155d4:	d906      	bls.n	80155e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 80155d6:	2301      	movs	r3, #1
 80155d8:	9300      	str	r3, [sp, #0]
 80155da:	2300      	movs	r3, #0
 80155dc:	4631      	mov	r1, r6
 80155de:	461a      	mov	r2, r3
 80155e0:	f7ff ff45 	bl	801546e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80155e4:	2200      	movs	r2, #0
 80155e6:	6823      	ldr	r3, [r4, #0]
 80155e8:	559f      	strb	r7, [r3, r6]
 80155ea:	6823      	ldr	r3, [r4, #0]
 80155ec:	6065      	str	r5, [r4, #4]
 80155ee:	555a      	strb	r2, [r3, r5]
 80155f0:	b003      	add	sp, #12
 80155f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080155f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 80155f4:	b510      	push	{r4, lr}
 80155f6:	4604      	mov	r4, r0
 80155f8:	f7ff ffde 	bl	80155b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 80155fc:	4620      	mov	r0, r4
 80155fe:	bd10      	pop	{r4, pc}

08015600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8015600:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015602:	4604      	mov	r4, r0
 8015604:	4626      	mov	r6, r4
 8015606:	f856 3b08 	ldr.w	r3, [r6], #8
 801560a:	6840      	ldr	r0, [r0, #4]
 801560c:	42b3      	cmp	r3, r6
 801560e:	bf0c      	ite	eq
 8015610:	260f      	moveq	r6, #15
 8015612:	68a6      	ldrne	r6, [r4, #8]
 8015614:	1885      	adds	r5, r0, r2
 8015616:	42b5      	cmp	r5, r6
 8015618:	d80a      	bhi.n	8015630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 801561a:	b112      	cbz	r2, 8015622 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 801561c:	4418      	add	r0, r3
 801561e:	f7ff feeb 	bl	80153f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015622:	2200      	movs	r2, #0
 8015624:	4620      	mov	r0, r4
 8015626:	6823      	ldr	r3, [r4, #0]
 8015628:	6065      	str	r5, [r4, #4]
 801562a:	555a      	strb	r2, [r3, r5]
 801562c:	b002      	add	sp, #8
 801562e:	bd70      	pop	{r4, r5, r6, pc}
 8015630:	9200      	str	r2, [sp, #0]
 8015632:	460b      	mov	r3, r1
 8015634:	2200      	movs	r2, #0
 8015636:	4601      	mov	r1, r0
 8015638:	4620      	mov	r0, r4
 801563a:	f7ff ff18 	bl	801546e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801563e:	e7f0      	b.n	8015622 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08015640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8015640:	b508      	push	{r3, lr}
 8015642:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015646:	f7ff ffdb 	bl	8015600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801564a:	bd08      	pop	{r3, pc}

0801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 801564c:	b508      	push	{r3, lr}
 801564e:	f7ff fff7 	bl	8015640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8015652:	bd08      	pop	{r3, pc}

08015654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8015654:	b570      	push	{r4, r5, r6, lr}
 8015656:	4604      	mov	r4, r0
 8015658:	460d      	mov	r5, r1
 801565a:	4616      	mov	r6, r2
 801565c:	4b04      	ldr	r3, [pc, #16]	; (8015670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 801565e:	2100      	movs	r1, #0
 8015660:	f7ff febe 	bl	80153e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8015664:	4632      	mov	r2, r6
 8015666:	4629      	mov	r1, r5
 8015668:	4620      	mov	r0, r4
 801566a:	f7ff ffc9 	bl	8015600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801566e:	bd70      	pop	{r4, r5, r6, pc}
 8015670:	08018d6e 	.word	0x08018d6e

08015674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8015674:	b570      	push	{r4, r5, r6, lr}
 8015676:	4604      	mov	r4, r0
 8015678:	4608      	mov	r0, r1
 801567a:	460d      	mov	r5, r1
 801567c:	f7ea fd68 	bl	8000150 <strlen>
 8015680:	4606      	mov	r6, r0
 8015682:	4602      	mov	r2, r0
 8015684:	4b05      	ldr	r3, [pc, #20]	; (801569c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8015686:	4620      	mov	r0, r4
 8015688:	2100      	movs	r1, #0
 801568a:	f7ff fea9 	bl	80153e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801568e:	4632      	mov	r2, r6
 8015690:	4629      	mov	r1, r5
 8015692:	4620      	mov	r0, r4
 8015694:	f7ff ffb4 	bl	8015600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8015698:	bd70      	pop	{r4, r5, r6, pc}
 801569a:	bf00      	nop
 801569c:	08018d6e 	.word	0x08018d6e

080156a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 80156a0:	b508      	push	{r3, lr}
 80156a2:	f7ff ffe7 	bl	8015674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80156a6:	bd08      	pop	{r3, pc}

080156a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80156a8:	6800      	ldr	r0, [r0, #0]
 80156aa:	4770      	bx	lr

080156ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 80156ac:	b513      	push	{r0, r1, r4, lr}
 80156ae:	f88d 1007 	strb.w	r1, [sp, #7]
 80156b2:	6841      	ldr	r1, [r0, #4]
 80156b4:	4613      	mov	r3, r2
 80156b6:	428a      	cmp	r2, r1
 80156b8:	d20a      	bcs.n	80156d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80156ba:	6804      	ldr	r4, [r0, #0]
 80156bc:	f10d 0207 	add.w	r2, sp, #7
 80156c0:	1ac9      	subs	r1, r1, r3
 80156c2:	18e0      	adds	r0, r4, r3
 80156c4:	f7ff fe43 	bl	801534e <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 80156c8:	b110      	cbz	r0, 80156d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80156ca:	1b00      	subs	r0, r0, r4
 80156cc:	b002      	add	sp, #8
 80156ce:	bd10      	pop	{r4, pc}
 80156d0:	f04f 30ff 	mov.w	r0, #4294967295
 80156d4:	e7fa      	b.n	80156cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

080156d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80156d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156d8:	4606      	mov	r6, r0
 80156da:	6845      	ldr	r5, [r0, #4]
 80156dc:	4608      	mov	r0, r1
 80156de:	460f      	mov	r7, r1
 80156e0:	f7ea fd36 	bl	8000150 <strlen>
 80156e4:	4285      	cmp	r5, r0
 80156e6:	4604      	mov	r4, r0
 80156e8:	462a      	mov	r2, r5
 80156ea:	4639      	mov	r1, r7
 80156ec:	bf28      	it	cs
 80156ee:	4602      	movcs	r2, r0
 80156f0:	6830      	ldr	r0, [r6, #0]
 80156f2:	f7ff fe27 	bl	8015344 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80156f6:	b900      	cbnz	r0, 80156fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80156f8:	1b28      	subs	r0, r5, r4
 80156fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80156fc:	6001      	str	r1, [r0, #0]
 80156fe:	4770      	bx	lr

08015700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8015700:	b510      	push	{r4, lr}
 8015702:	4604      	mov	r4, r0
 8015704:	f100 0208 	add.w	r2, r0, #8
 8015708:	6002      	str	r2, [r0, #0]
 801570a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801570e:	f04f 0300 	mov.w	r3, #0
 8015712:	440a      	add	r2, r1
 8015714:	f7f8 fe76 	bl	800e404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8015718:	4620      	mov	r0, r4
 801571a:	bd10      	pop	{r4, pc}

0801571c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801571c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801571e:	4604      	mov	r4, r0
 8015720:	4616      	mov	r6, r2
 8015722:	460d      	mov	r5, r1
 8015724:	b919      	cbnz	r1, 801572e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015726:	b112      	cbz	r2, 801572e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015728:	480d      	ldr	r0, [pc, #52]	; (8015760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801572a:	f7ff fde4 	bl	80152f6 <_ZSt19__throw_logic_errorPKc>
 801572e:	1b73      	subs	r3, r6, r5
 8015730:	2b0f      	cmp	r3, #15
 8015732:	9301      	str	r3, [sp, #4]
 8015734:	d907      	bls.n	8015746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8015736:	2200      	movs	r2, #0
 8015738:	a901      	add	r1, sp, #4
 801573a:	4620      	mov	r0, r4
 801573c:	f7ff fe20 	bl	8015380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015740:	9b01      	ldr	r3, [sp, #4]
 8015742:	6020      	str	r0, [r4, #0]
 8015744:	60a3      	str	r3, [r4, #8]
 8015746:	4632      	mov	r2, r6
 8015748:	4629      	mov	r1, r5
 801574a:	6820      	ldr	r0, [r4, #0]
 801574c:	f7ff fe62 	bl	8015414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8015750:	2100      	movs	r1, #0
 8015752:	9b01      	ldr	r3, [sp, #4]
 8015754:	6822      	ldr	r2, [r4, #0]
 8015756:	6063      	str	r3, [r4, #4]
 8015758:	54d1      	strb	r1, [r2, r3]
 801575a:	b002      	add	sp, #8
 801575c:	bd70      	pop	{r4, r5, r6, pc}
 801575e:	bf00      	nop
 8015760:	08018d44 	.word	0x08018d44

08015764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8015764:	b538      	push	{r3, r4, r5, lr}
 8015766:	f100 0308 	add.w	r3, r0, #8
 801576a:	4604      	mov	r4, r0
 801576c:	6003      	str	r3, [r0, #0]
 801576e:	460d      	mov	r5, r1
 8015770:	b159      	cbz	r1, 801578a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8015772:	4608      	mov	r0, r1
 8015774:	f7ea fcec 	bl	8000150 <strlen>
 8015778:	182a      	adds	r2, r5, r0
 801577a:	4620      	mov	r0, r4
 801577c:	f04f 0300 	mov.w	r3, #0
 8015780:	4629      	mov	r1, r5
 8015782:	f7ff ffcb 	bl	801571c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8015786:	4620      	mov	r0, r4
 8015788:	bd38      	pop	{r3, r4, r5, pc}
 801578a:	f04f 32ff 	mov.w	r2, #4294967295
 801578e:	e7f4      	b.n	801577a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08015790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8015790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015792:	460d      	mov	r5, r1
 8015794:	4616      	mov	r6, r2
 8015796:	461f      	mov	r7, r3
 8015798:	f100 0308 	add.w	r3, r0, #8
 801579c:	4604      	mov	r4, r0
 801579e:	6003      	str	r3, [r0, #0]
 80157a0:	4631      	mov	r1, r6
 80157a2:	4a09      	ldr	r2, [pc, #36]	; (80157c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
 80157a4:	4628      	mov	r0, r5
 80157a6:	f7ff fe0d 	bl	80153c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80157aa:	6829      	ldr	r1, [r5, #0]
 80157ac:	686a      	ldr	r2, [r5, #4]
 80157ae:	4401      	add	r1, r0
 80157b0:	1b92      	subs	r2, r2, r6
 80157b2:	4620      	mov	r0, r4
 80157b4:	f04f 0300 	mov.w	r3, #0
 80157b8:	42ba      	cmp	r2, r7
 80157ba:	bf94      	ite	ls
 80157bc:	188a      	addls	r2, r1, r2
 80157be:	19ca      	addhi	r2, r1, r7
 80157c0:	f7ff ffac 	bl	801571c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80157c4:	4620      	mov	r0, r4
 80157c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157c8:	08018d9b 	.word	0x08018d9b

080157cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80157cc:	b570      	push	{r4, r5, r6, lr}
 80157ce:	460d      	mov	r5, r1
 80157d0:	4604      	mov	r4, r0
 80157d2:	4611      	mov	r1, r2
 80157d4:	4628      	mov	r0, r5
 80157d6:	4a06      	ldr	r2, [pc, #24]	; (80157f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 80157d8:	461e      	mov	r6, r3
 80157da:	f7ff fdf3 	bl	80153c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80157de:	4633      	mov	r3, r6
 80157e0:	4602      	mov	r2, r0
 80157e2:	4629      	mov	r1, r5
 80157e4:	4620      	mov	r0, r4
 80157e6:	f7ff ffd3 	bl	8015790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 80157ea:	4620      	mov	r0, r4
 80157ec:	bd70      	pop	{r4, r5, r6, pc}
 80157ee:	bf00      	nop
 80157f0:	08018cf8 	.word	0x08018cf8

080157f4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b09c      	sub	sp, #112	; 0x70
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	1a0e      	subs	r6, r1, r0
 80157fc:	4680      	mov	r8, r0
 80157fe:	2269      	movs	r2, #105	; 0x69
 8015800:	490e      	ldr	r1, [pc, #56]	; (801583c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8015802:	1d38      	adds	r0, r7, #4
 8015804:	f002 fa3b 	bl	8017c7e <memcpy>
 8015808:	f106 0377 	add.w	r3, r6, #119	; 0x77
 801580c:	f023 0307 	bic.w	r3, r3, #7
 8015810:	ebad 0d03 	sub.w	sp, sp, r3
 8015814:	466c      	mov	r4, sp
 8015816:	2268      	movs	r2, #104	; 0x68
 8015818:	1d39      	adds	r1, r7, #4
 801581a:	4620      	mov	r0, r4
 801581c:	f002 fa2f 	bl	8017c7e <memcpy>
 8015820:	4632      	mov	r2, r6
 8015822:	4641      	mov	r1, r8
 8015824:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015828:	f002 fa29 	bl	8017c7e <memcpy>
 801582c:	2300      	movs	r3, #0
 801582e:	1c75      	adds	r5, r6, #1
 8015830:	4425      	add	r5, r4
 8015832:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8015836:	4620      	mov	r0, r4
 8015838:	f7ff fd5d 	bl	80152f6 <_ZSt19__throw_logic_errorPKc>
 801583c:	08018dc1 	.word	0x08018dc1

08015840 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8015840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015842:	af00      	add	r7, sp, #0
 8015844:	b086      	sub	sp, #24
 8015846:	466d      	mov	r5, sp
 8015848:	f105 040c 	add.w	r4, r5, #12
 801584c:	4623      	mov	r3, r4
 801584e:	f04f 0c0a 	mov.w	ip, #10
 8015852:	f8df e038 	ldr.w	lr, [pc, #56]	; 801588c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8015856:	fbb2 f6fc 	udiv	r6, r2, ip
 801585a:	fb0c 2216 	mls	r2, ip, r6, r2
 801585e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8015862:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8015866:	4632      	mov	r2, r6
 8015868:	2e00      	cmp	r6, #0
 801586a:	d1f4      	bne.n	8015856 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 801586c:	1ae4      	subs	r4, r4, r3
 801586e:	428c      	cmp	r4, r1
 8015870:	d808      	bhi.n	8015884 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8015872:	f1c4 010c 	rsb	r1, r4, #12
 8015876:	4622      	mov	r2, r4
 8015878:	4429      	add	r1, r5
 801587a:	f002 fa00 	bl	8017c7e <memcpy>
 801587e:	4620      	mov	r0, r4
 8015880:	46bd      	mov	sp, r7
 8015882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015884:	f04f 34ff 	mov.w	r4, #4294967295
 8015888:	e7f9      	b.n	801587e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 801588a:	bf00      	nop
 801588c:	08018db6 	.word	0x08018db6

08015890 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8015890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015894:	4606      	mov	r6, r0
 8015896:	4615      	mov	r5, r2
 8015898:	4604      	mov	r4, r0
 801589a:	3901      	subs	r1, #1
 801589c:	1847      	adds	r7, r0, r1
 801589e:	782a      	ldrb	r2, [r5, #0]
 80158a0:	b39a      	cbz	r2, 801590a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80158a2:	42bc      	cmp	r4, r7
 80158a4:	d22d      	bcs.n	8015902 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80158a6:	2a25      	cmp	r2, #37	; 0x25
 80158a8:	d107      	bne.n	80158ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80158aa:	786a      	ldrb	r2, [r5, #1]
 80158ac:	2a73      	cmp	r2, #115	; 0x73
 80158ae:	d00a      	beq.n	80158c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80158b0:	2a7a      	cmp	r2, #122	; 0x7a
 80158b2:	d013      	beq.n	80158dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80158b4:	2a25      	cmp	r2, #37	; 0x25
 80158b6:	d100      	bne.n	80158ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80158b8:	3501      	adds	r5, #1
 80158ba:	782a      	ldrb	r2, [r5, #0]
 80158bc:	3401      	adds	r4, #1
 80158be:	f804 2c01 	strb.w	r2, [r4, #-1]
 80158c2:	3501      	adds	r5, #1
 80158c4:	e7eb      	b.n	801589e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80158c6:	1d19      	adds	r1, r3, #4
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	3b01      	subs	r3, #1
 80158cc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80158d0:	b1a2      	cbz	r2, 80158fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 80158d2:	42bc      	cmp	r4, r7
 80158d4:	d015      	beq.n	8015902 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80158d6:	f804 2b01 	strb.w	r2, [r4], #1
 80158da:	e7f7      	b.n	80158cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80158dc:	78aa      	ldrb	r2, [r5, #2]
 80158de:	2a75      	cmp	r2, #117	; 0x75
 80158e0:	d1eb      	bne.n	80158ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80158e2:	681a      	ldr	r2, [r3, #0]
 80158e4:	1b39      	subs	r1, r7, r4
 80158e6:	4620      	mov	r0, r4
 80158e8:	f103 0804 	add.w	r8, r3, #4
 80158ec:	f7ff ffa8 	bl	8015840 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80158f0:	2800      	cmp	r0, #0
 80158f2:	dd06      	ble.n	8015902 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80158f4:	4404      	add	r4, r0
 80158f6:	3503      	adds	r5, #3
 80158f8:	4643      	mov	r3, r8
 80158fa:	e7d0      	b.n	801589e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80158fc:	3502      	adds	r5, #2
 80158fe:	460b      	mov	r3, r1
 8015900:	e7cd      	b.n	801589e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8015902:	4621      	mov	r1, r4
 8015904:	4630      	mov	r0, r6
 8015906:	f7ff ff75 	bl	80157f4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801590a:	7022      	strb	r2, [r4, #0]
 801590c:	1ba0      	subs	r0, r4, r6
 801590e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015914 <cosf>:
 8015914:	b507      	push	{r0, r1, r2, lr}
 8015916:	4a18      	ldr	r2, [pc, #96]	; (8015978 <cosf+0x64>)
 8015918:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801591c:	4293      	cmp	r3, r2
 801591e:	4601      	mov	r1, r0
 8015920:	dc03      	bgt.n	801592a <cosf+0x16>
 8015922:	2100      	movs	r1, #0
 8015924:	f001 fc08 	bl	8017138 <__kernel_cosf>
 8015928:	e004      	b.n	8015934 <cosf+0x20>
 801592a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801592e:	db04      	blt.n	801593a <cosf+0x26>
 8015930:	f7eb f8fe 	bl	8000b30 <__aeabi_fsub>
 8015934:	b003      	add	sp, #12
 8015936:	f85d fb04 	ldr.w	pc, [sp], #4
 801593a:	4669      	mov	r1, sp
 801593c:	f001 faa4 	bl	8016e88 <__ieee754_rem_pio2f>
 8015940:	f000 0203 	and.w	r2, r0, #3
 8015944:	2a01      	cmp	r2, #1
 8015946:	d005      	beq.n	8015954 <cosf+0x40>
 8015948:	2a02      	cmp	r2, #2
 801594a:	d00a      	beq.n	8015962 <cosf+0x4e>
 801594c:	b972      	cbnz	r2, 801596c <cosf+0x58>
 801594e:	9901      	ldr	r1, [sp, #4]
 8015950:	9800      	ldr	r0, [sp, #0]
 8015952:	e7e7      	b.n	8015924 <cosf+0x10>
 8015954:	9901      	ldr	r1, [sp, #4]
 8015956:	9800      	ldr	r0, [sp, #0]
 8015958:	f001 ff0c 	bl	8017774 <__kernel_sinf>
 801595c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015960:	e7e8      	b.n	8015934 <cosf+0x20>
 8015962:	9901      	ldr	r1, [sp, #4]
 8015964:	9800      	ldr	r0, [sp, #0]
 8015966:	f001 fbe7 	bl	8017138 <__kernel_cosf>
 801596a:	e7f7      	b.n	801595c <cosf+0x48>
 801596c:	2201      	movs	r2, #1
 801596e:	9901      	ldr	r1, [sp, #4]
 8015970:	9800      	ldr	r0, [sp, #0]
 8015972:	f001 feff 	bl	8017774 <__kernel_sinf>
 8015976:	e7dd      	b.n	8015934 <cosf+0x20>
 8015978:	3f490fd8 	.word	0x3f490fd8

0801597c <sinf>:
 801597c:	b507      	push	{r0, r1, r2, lr}
 801597e:	4a19      	ldr	r2, [pc, #100]	; (80159e4 <sinf+0x68>)
 8015980:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015984:	4293      	cmp	r3, r2
 8015986:	4601      	mov	r1, r0
 8015988:	dc04      	bgt.n	8015994 <sinf+0x18>
 801598a:	2200      	movs	r2, #0
 801598c:	2100      	movs	r1, #0
 801598e:	f001 fef1 	bl	8017774 <__kernel_sinf>
 8015992:	e004      	b.n	801599e <sinf+0x22>
 8015994:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015998:	db04      	blt.n	80159a4 <sinf+0x28>
 801599a:	f7eb f8c9 	bl	8000b30 <__aeabi_fsub>
 801599e:	b003      	add	sp, #12
 80159a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80159a4:	4669      	mov	r1, sp
 80159a6:	f001 fa6f 	bl	8016e88 <__ieee754_rem_pio2f>
 80159aa:	f000 0003 	and.w	r0, r0, #3
 80159ae:	2801      	cmp	r0, #1
 80159b0:	d006      	beq.n	80159c0 <sinf+0x44>
 80159b2:	2802      	cmp	r0, #2
 80159b4:	d009      	beq.n	80159ca <sinf+0x4e>
 80159b6:	b980      	cbnz	r0, 80159da <sinf+0x5e>
 80159b8:	2201      	movs	r2, #1
 80159ba:	9901      	ldr	r1, [sp, #4]
 80159bc:	9800      	ldr	r0, [sp, #0]
 80159be:	e7e6      	b.n	801598e <sinf+0x12>
 80159c0:	9901      	ldr	r1, [sp, #4]
 80159c2:	9800      	ldr	r0, [sp, #0]
 80159c4:	f001 fbb8 	bl	8017138 <__kernel_cosf>
 80159c8:	e7e9      	b.n	801599e <sinf+0x22>
 80159ca:	2201      	movs	r2, #1
 80159cc:	9901      	ldr	r1, [sp, #4]
 80159ce:	9800      	ldr	r0, [sp, #0]
 80159d0:	f001 fed0 	bl	8017774 <__kernel_sinf>
 80159d4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80159d8:	e7e1      	b.n	801599e <sinf+0x22>
 80159da:	9901      	ldr	r1, [sp, #4]
 80159dc:	9800      	ldr	r0, [sp, #0]
 80159de:	f001 fbab 	bl	8017138 <__kernel_cosf>
 80159e2:	e7f7      	b.n	80159d4 <sinf+0x58>
 80159e4:	3f490fd8 	.word	0x3f490fd8

080159e8 <exp>:
 80159e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159ec:	b08b      	sub	sp, #44	; 0x2c
 80159ee:	4604      	mov	r4, r0
 80159f0:	460d      	mov	r5, r1
 80159f2:	f000 fa3d 	bl	8015e70 <__ieee754_exp>
 80159f6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8015ad4 <exp+0xec>
 80159fa:	4606      	mov	r6, r0
 80159fc:	f998 3000 	ldrsb.w	r3, [r8]
 8015a00:	460f      	mov	r7, r1
 8015a02:	3301      	adds	r3, #1
 8015a04:	d02c      	beq.n	8015a60 <exp+0x78>
 8015a06:	4620      	mov	r0, r4
 8015a08:	4629      	mov	r1, r5
 8015a0a:	f001 ff2d 	bl	8017868 <finite>
 8015a0e:	b338      	cbz	r0, 8015a60 <exp+0x78>
 8015a10:	a329      	add	r3, pc, #164	; (adr r3, 8015ab8 <exp+0xd0>)
 8015a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a16:	4620      	mov	r0, r4
 8015a18:	4629      	mov	r1, r5
 8015a1a:	f7ea ffed 	bl	80009f8 <__aeabi_dcmpgt>
 8015a1e:	4681      	mov	r9, r0
 8015a20:	2800      	cmp	r0, #0
 8015a22:	d02d      	beq.n	8015a80 <exp+0x98>
 8015a24:	2303      	movs	r3, #3
 8015a26:	9300      	str	r3, [sp, #0]
 8015a28:	4b27      	ldr	r3, [pc, #156]	; (8015ac8 <exp+0xe0>)
 8015a2a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015a2e:	9301      	str	r3, [sp, #4]
 8015a30:	2300      	movs	r3, #0
 8015a32:	9308      	str	r3, [sp, #32]
 8015a34:	f998 3000 	ldrsb.w	r3, [r8]
 8015a38:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015a3c:	b9ab      	cbnz	r3, 8015a6a <exp+0x82>
 8015a3e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015a42:	4b22      	ldr	r3, [pc, #136]	; (8015acc <exp+0xe4>)
 8015a44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a48:	4668      	mov	r0, sp
 8015a4a:	f001 ff13 	bl	8017874 <matherr>
 8015a4e:	b190      	cbz	r0, 8015a76 <exp+0x8e>
 8015a50:	9b08      	ldr	r3, [sp, #32]
 8015a52:	b11b      	cbz	r3, 8015a5c <exp+0x74>
 8015a54:	f002 f8bc 	bl	8017bd0 <__errno>
 8015a58:	9b08      	ldr	r3, [sp, #32]
 8015a5a:	6003      	str	r3, [r0, #0]
 8015a5c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8015a60:	4630      	mov	r0, r6
 8015a62:	4639      	mov	r1, r7
 8015a64:	b00b      	add	sp, #44	; 0x2c
 8015a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a6a:	2000      	movs	r0, #0
 8015a6c:	4918      	ldr	r1, [pc, #96]	; (8015ad0 <exp+0xe8>)
 8015a6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015a72:	2b02      	cmp	r3, #2
 8015a74:	d1e8      	bne.n	8015a48 <exp+0x60>
 8015a76:	f002 f8ab 	bl	8017bd0 <__errno>
 8015a7a:	2322      	movs	r3, #34	; 0x22
 8015a7c:	6003      	str	r3, [r0, #0]
 8015a7e:	e7e7      	b.n	8015a50 <exp+0x68>
 8015a80:	a30f      	add	r3, pc, #60	; (adr r3, 8015ac0 <exp+0xd8>)
 8015a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a86:	4620      	mov	r0, r4
 8015a88:	4629      	mov	r1, r5
 8015a8a:	f7ea ff97 	bl	80009bc <__aeabi_dcmplt>
 8015a8e:	2800      	cmp	r0, #0
 8015a90:	d0e6      	beq.n	8015a60 <exp+0x78>
 8015a92:	2304      	movs	r3, #4
 8015a94:	9300      	str	r3, [sp, #0]
 8015a96:	4b0c      	ldr	r3, [pc, #48]	; (8015ac8 <exp+0xe0>)
 8015a98:	2200      	movs	r2, #0
 8015a9a:	9301      	str	r3, [sp, #4]
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	f8cd 9020 	str.w	r9, [sp, #32]
 8015aa2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015aa6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015aaa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015aae:	f998 3000 	ldrsb.w	r3, [r8]
 8015ab2:	e7de      	b.n	8015a72 <exp+0x8a>
 8015ab4:	f3af 8000 	nop.w
 8015ab8:	fefa39ef 	.word	0xfefa39ef
 8015abc:	40862e42 	.word	0x40862e42
 8015ac0:	d52d3051 	.word	0xd52d3051
 8015ac4:	c0874910 	.word	0xc0874910
 8015ac8:	08018e2a 	.word	0x08018e2a
 8015acc:	47efffff 	.word	0x47efffff
 8015ad0:	7ff00000 	.word	0x7ff00000
 8015ad4:	20000724 	.word	0x20000724

08015ad8 <pow>:
 8015ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015adc:	b08f      	sub	sp, #60	; 0x3c
 8015ade:	461d      	mov	r5, r3
 8015ae0:	4680      	mov	r8, r0
 8015ae2:	4689      	mov	r9, r1
 8015ae4:	4614      	mov	r4, r2
 8015ae6:	f000 fb2b 	bl	8016140 <__ieee754_pow>
 8015aea:	4fa1      	ldr	r7, [pc, #644]	; (8015d70 <pow+0x298>)
 8015aec:	e9cd 0100 	strd	r0, r1, [sp]
 8015af0:	f997 3000 	ldrsb.w	r3, [r7]
 8015af4:	463e      	mov	r6, r7
 8015af6:	9302      	str	r3, [sp, #8]
 8015af8:	3301      	adds	r3, #1
 8015afa:	d05f      	beq.n	8015bbc <pow+0xe4>
 8015afc:	4622      	mov	r2, r4
 8015afe:	462b      	mov	r3, r5
 8015b00:	4620      	mov	r0, r4
 8015b02:	4629      	mov	r1, r5
 8015b04:	f7ea ff82 	bl	8000a0c <__aeabi_dcmpun>
 8015b08:	4682      	mov	sl, r0
 8015b0a:	2800      	cmp	r0, #0
 8015b0c:	d156      	bne.n	8015bbc <pow+0xe4>
 8015b0e:	4642      	mov	r2, r8
 8015b10:	464b      	mov	r3, r9
 8015b12:	4640      	mov	r0, r8
 8015b14:	4649      	mov	r1, r9
 8015b16:	f7ea ff79 	bl	8000a0c <__aeabi_dcmpun>
 8015b1a:	9003      	str	r0, [sp, #12]
 8015b1c:	b1e8      	cbz	r0, 8015b5a <pow+0x82>
 8015b1e:	2200      	movs	r2, #0
 8015b20:	2300      	movs	r3, #0
 8015b22:	4620      	mov	r0, r4
 8015b24:	4629      	mov	r1, r5
 8015b26:	f7ea ff3f 	bl	80009a8 <__aeabi_dcmpeq>
 8015b2a:	2800      	cmp	r0, #0
 8015b2c:	d046      	beq.n	8015bbc <pow+0xe4>
 8015b2e:	2301      	movs	r3, #1
 8015b30:	2200      	movs	r2, #0
 8015b32:	9304      	str	r3, [sp, #16]
 8015b34:	4b8f      	ldr	r3, [pc, #572]	; (8015d74 <pow+0x29c>)
 8015b36:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8015b3a:	9305      	str	r3, [sp, #20]
 8015b3c:	4b8e      	ldr	r3, [pc, #568]	; (8015d78 <pow+0x2a0>)
 8015b3e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015b42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015b46:	9b02      	ldr	r3, [sp, #8]
 8015b48:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015b4c:	2b02      	cmp	r3, #2
 8015b4e:	d031      	beq.n	8015bb4 <pow+0xdc>
 8015b50:	a804      	add	r0, sp, #16
 8015b52:	f001 fe8f 	bl	8017874 <matherr>
 8015b56:	bb38      	cbnz	r0, 8015ba8 <pow+0xd0>
 8015b58:	e058      	b.n	8015c0c <pow+0x134>
 8015b5a:	f04f 0a00 	mov.w	sl, #0
 8015b5e:	f04f 0b00 	mov.w	fp, #0
 8015b62:	4652      	mov	r2, sl
 8015b64:	465b      	mov	r3, fp
 8015b66:	4640      	mov	r0, r8
 8015b68:	4649      	mov	r1, r9
 8015b6a:	f7ea ff1d 	bl	80009a8 <__aeabi_dcmpeq>
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	d051      	beq.n	8015c16 <pow+0x13e>
 8015b72:	4652      	mov	r2, sl
 8015b74:	465b      	mov	r3, fp
 8015b76:	4620      	mov	r0, r4
 8015b78:	4629      	mov	r1, r5
 8015b7a:	f7ea ff15 	bl	80009a8 <__aeabi_dcmpeq>
 8015b7e:	4606      	mov	r6, r0
 8015b80:	b308      	cbz	r0, 8015bc6 <pow+0xee>
 8015b82:	2301      	movs	r3, #1
 8015b84:	9304      	str	r3, [sp, #16]
 8015b86:	4b7b      	ldr	r3, [pc, #492]	; (8015d74 <pow+0x29c>)
 8015b88:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015b8c:	9305      	str	r3, [sp, #20]
 8015b8e:	9b03      	ldr	r3, [sp, #12]
 8015b90:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015b94:	930c      	str	r3, [sp, #48]	; 0x30
 8015b96:	9b02      	ldr	r3, [sp, #8]
 8015b98:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d0d7      	beq.n	8015b50 <pow+0x78>
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	4b75      	ldr	r3, [pc, #468]	; (8015d78 <pow+0x2a0>)
 8015ba4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015baa:	b11b      	cbz	r3, 8015bb4 <pow+0xdc>
 8015bac:	f002 f810 	bl	8017bd0 <__errno>
 8015bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bb2:	6003      	str	r3, [r0, #0]
 8015bb4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8015bb8:	e9cd 3400 	strd	r3, r4, [sp]
 8015bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bc0:	b00f      	add	sp, #60	; 0x3c
 8015bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	4629      	mov	r1, r5
 8015bca:	f001 fe4d 	bl	8017868 <finite>
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d0f4      	beq.n	8015bbc <pow+0xe4>
 8015bd2:	4652      	mov	r2, sl
 8015bd4:	465b      	mov	r3, fp
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	4629      	mov	r1, r5
 8015bda:	f7ea feef 	bl	80009bc <__aeabi_dcmplt>
 8015bde:	2800      	cmp	r0, #0
 8015be0:	d0ec      	beq.n	8015bbc <pow+0xe4>
 8015be2:	2301      	movs	r3, #1
 8015be4:	9304      	str	r3, [sp, #16]
 8015be6:	4b63      	ldr	r3, [pc, #396]	; (8015d74 <pow+0x29c>)
 8015be8:	960c      	str	r6, [sp, #48]	; 0x30
 8015bea:	9305      	str	r3, [sp, #20]
 8015bec:	f997 3000 	ldrsb.w	r3, [r7]
 8015bf0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015bf4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015bf8:	b913      	cbnz	r3, 8015c00 <pow+0x128>
 8015bfa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015bfe:	e7a7      	b.n	8015b50 <pow+0x78>
 8015c00:	2000      	movs	r0, #0
 8015c02:	495e      	ldr	r1, [pc, #376]	; (8015d7c <pow+0x2a4>)
 8015c04:	2b02      	cmp	r3, #2
 8015c06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015c0a:	d1a1      	bne.n	8015b50 <pow+0x78>
 8015c0c:	f001 ffe0 	bl	8017bd0 <__errno>
 8015c10:	2321      	movs	r3, #33	; 0x21
 8015c12:	6003      	str	r3, [r0, #0]
 8015c14:	e7c8      	b.n	8015ba8 <pow+0xd0>
 8015c16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c1a:	f001 fe25 	bl	8017868 <finite>
 8015c1e:	9002      	str	r0, [sp, #8]
 8015c20:	2800      	cmp	r0, #0
 8015c22:	d177      	bne.n	8015d14 <pow+0x23c>
 8015c24:	4640      	mov	r0, r8
 8015c26:	4649      	mov	r1, r9
 8015c28:	f001 fe1e 	bl	8017868 <finite>
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	d071      	beq.n	8015d14 <pow+0x23c>
 8015c30:	4620      	mov	r0, r4
 8015c32:	4629      	mov	r1, r5
 8015c34:	f001 fe18 	bl	8017868 <finite>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	d06b      	beq.n	8015d14 <pow+0x23c>
 8015c3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c40:	4619      	mov	r1, r3
 8015c42:	4610      	mov	r0, r2
 8015c44:	f7ea fee2 	bl	8000a0c <__aeabi_dcmpun>
 8015c48:	f997 7000 	ldrsb.w	r7, [r7]
 8015c4c:	4b49      	ldr	r3, [pc, #292]	; (8015d74 <pow+0x29c>)
 8015c4e:	b1a0      	cbz	r0, 8015c7a <pow+0x1a2>
 8015c50:	2201      	movs	r2, #1
 8015c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015c56:	9b02      	ldr	r3, [sp, #8]
 8015c58:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8015c5e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015c62:	2f00      	cmp	r7, #0
 8015c64:	d0c9      	beq.n	8015bfa <pow+0x122>
 8015c66:	4652      	mov	r2, sl
 8015c68:	465b      	mov	r3, fp
 8015c6a:	4650      	mov	r0, sl
 8015c6c:	4659      	mov	r1, fp
 8015c6e:	f7ea fd5d 	bl	800072c <__aeabi_ddiv>
 8015c72:	2f02      	cmp	r7, #2
 8015c74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015c78:	e7c7      	b.n	8015c0a <pow+0x132>
 8015c7a:	2203      	movs	r2, #3
 8015c7c:	900c      	str	r0, [sp, #48]	; 0x30
 8015c7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015c82:	4620      	mov	r0, r4
 8015c84:	4629      	mov	r1, r5
 8015c86:	2200      	movs	r2, #0
 8015c88:	4b3d      	ldr	r3, [pc, #244]	; (8015d80 <pow+0x2a8>)
 8015c8a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015c8e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015c92:	f7ea fc21 	bl	80004d8 <__aeabi_dmul>
 8015c96:	4604      	mov	r4, r0
 8015c98:	460d      	mov	r5, r1
 8015c9a:	bb17      	cbnz	r7, 8015ce2 <pow+0x20a>
 8015c9c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015ca0:	4b38      	ldr	r3, [pc, #224]	; (8015d84 <pow+0x2ac>)
 8015ca2:	4640      	mov	r0, r8
 8015ca4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015ca8:	4649      	mov	r1, r9
 8015caa:	4652      	mov	r2, sl
 8015cac:	465b      	mov	r3, fp
 8015cae:	f7ea fe85 	bl	80009bc <__aeabi_dcmplt>
 8015cb2:	2800      	cmp	r0, #0
 8015cb4:	d054      	beq.n	8015d60 <pow+0x288>
 8015cb6:	4620      	mov	r0, r4
 8015cb8:	4629      	mov	r1, r5
 8015cba:	f001 fde3 	bl	8017884 <rint>
 8015cbe:	4622      	mov	r2, r4
 8015cc0:	462b      	mov	r3, r5
 8015cc2:	f7ea fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8015cc6:	b920      	cbnz	r0, 8015cd2 <pow+0x1fa>
 8015cc8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015ccc:	4b2e      	ldr	r3, [pc, #184]	; (8015d88 <pow+0x2b0>)
 8015cce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015cd2:	f996 3000 	ldrsb.w	r3, [r6]
 8015cd6:	2b02      	cmp	r3, #2
 8015cd8:	d142      	bne.n	8015d60 <pow+0x288>
 8015cda:	f001 ff79 	bl	8017bd0 <__errno>
 8015cde:	2322      	movs	r3, #34	; 0x22
 8015ce0:	e797      	b.n	8015c12 <pow+0x13a>
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	4b29      	ldr	r3, [pc, #164]	; (8015d8c <pow+0x2b4>)
 8015ce6:	4640      	mov	r0, r8
 8015ce8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015cec:	4649      	mov	r1, r9
 8015cee:	4652      	mov	r2, sl
 8015cf0:	465b      	mov	r3, fp
 8015cf2:	f7ea fe63 	bl	80009bc <__aeabi_dcmplt>
 8015cf6:	2800      	cmp	r0, #0
 8015cf8:	d0eb      	beq.n	8015cd2 <pow+0x1fa>
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	4629      	mov	r1, r5
 8015cfe:	f001 fdc1 	bl	8017884 <rint>
 8015d02:	4622      	mov	r2, r4
 8015d04:	462b      	mov	r3, r5
 8015d06:	f7ea fe4f 	bl	80009a8 <__aeabi_dcmpeq>
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	d1e1      	bne.n	8015cd2 <pow+0x1fa>
 8015d0e:	2200      	movs	r2, #0
 8015d10:	4b1a      	ldr	r3, [pc, #104]	; (8015d7c <pow+0x2a4>)
 8015d12:	e7dc      	b.n	8015cce <pow+0x1f6>
 8015d14:	2200      	movs	r2, #0
 8015d16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	f7ea fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8015d20:	2800      	cmp	r0, #0
 8015d22:	f43f af4b 	beq.w	8015bbc <pow+0xe4>
 8015d26:	4640      	mov	r0, r8
 8015d28:	4649      	mov	r1, r9
 8015d2a:	f001 fd9d 	bl	8017868 <finite>
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	f43f af44 	beq.w	8015bbc <pow+0xe4>
 8015d34:	4620      	mov	r0, r4
 8015d36:	4629      	mov	r1, r5
 8015d38:	f001 fd96 	bl	8017868 <finite>
 8015d3c:	2800      	cmp	r0, #0
 8015d3e:	f43f af3d 	beq.w	8015bbc <pow+0xe4>
 8015d42:	2304      	movs	r3, #4
 8015d44:	9304      	str	r3, [sp, #16]
 8015d46:	4b0b      	ldr	r3, [pc, #44]	; (8015d74 <pow+0x29c>)
 8015d48:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015d4c:	9305      	str	r3, [sp, #20]
 8015d4e:	2300      	movs	r3, #0
 8015d50:	2400      	movs	r4, #0
 8015d52:	930c      	str	r3, [sp, #48]	; 0x30
 8015d54:	2300      	movs	r3, #0
 8015d56:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015d5a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8015d5e:	e7b8      	b.n	8015cd2 <pow+0x1fa>
 8015d60:	a804      	add	r0, sp, #16
 8015d62:	f001 fd87 	bl	8017874 <matherr>
 8015d66:	2800      	cmp	r0, #0
 8015d68:	f47f af1e 	bne.w	8015ba8 <pow+0xd0>
 8015d6c:	e7b5      	b.n	8015cda <pow+0x202>
 8015d6e:	bf00      	nop
 8015d70:	20000724 	.word	0x20000724
 8015d74:	08018e2e 	.word	0x08018e2e
 8015d78:	3ff00000 	.word	0x3ff00000
 8015d7c:	fff00000 	.word	0xfff00000
 8015d80:	3fe00000 	.word	0x3fe00000
 8015d84:	47efffff 	.word	0x47efffff
 8015d88:	c7efffff 	.word	0xc7efffff
 8015d8c:	7ff00000 	.word	0x7ff00000

08015d90 <expf>:
 8015d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d92:	b08b      	sub	sp, #44	; 0x2c
 8015d94:	4604      	mov	r4, r0
 8015d96:	f000 ff89 	bl	8016cac <__ieee754_expf>
 8015d9a:	4e2e      	ldr	r6, [pc, #184]	; (8015e54 <expf+0xc4>)
 8015d9c:	4605      	mov	r5, r0
 8015d9e:	f996 3000 	ldrsb.w	r3, [r6]
 8015da2:	3301      	adds	r3, #1
 8015da4:	d02f      	beq.n	8015e06 <expf+0x76>
 8015da6:	4620      	mov	r0, r4
 8015da8:	f001 fe67 	bl	8017a7a <finitef>
 8015dac:	2800      	cmp	r0, #0
 8015dae:	d02a      	beq.n	8015e06 <expf+0x76>
 8015db0:	4929      	ldr	r1, [pc, #164]	; (8015e58 <expf+0xc8>)
 8015db2:	4620      	mov	r0, r4
 8015db4:	f7eb f982 	bl	80010bc <__aeabi_fcmpgt>
 8015db8:	4607      	mov	r7, r0
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	d031      	beq.n	8015e22 <expf+0x92>
 8015dbe:	2303      	movs	r3, #3
 8015dc0:	9300      	str	r3, [sp, #0]
 8015dc2:	4b26      	ldr	r3, [pc, #152]	; (8015e5c <expf+0xcc>)
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	9301      	str	r3, [sp, #4]
 8015dc8:	2300      	movs	r3, #0
 8015dca:	9308      	str	r3, [sp, #32]
 8015dcc:	f7ea fb2c 	bl	8000428 <__aeabi_f2d>
 8015dd0:	f996 3000 	ldrsb.w	r3, [r6]
 8015dd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015dd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ddc:	b9b3      	cbnz	r3, 8015e0c <expf+0x7c>
 8015dde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015de2:	4b1f      	ldr	r3, [pc, #124]	; (8015e60 <expf+0xd0>)
 8015de4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015de8:	4668      	mov	r0, sp
 8015dea:	f001 fd43 	bl	8017874 <matherr>
 8015dee:	b198      	cbz	r0, 8015e18 <expf+0x88>
 8015df0:	9b08      	ldr	r3, [sp, #32]
 8015df2:	b11b      	cbz	r3, 8015dfc <expf+0x6c>
 8015df4:	f001 feec 	bl	8017bd0 <__errno>
 8015df8:	9b08      	ldr	r3, [sp, #32]
 8015dfa:	6003      	str	r3, [r0, #0]
 8015dfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e00:	f7ea fe42 	bl	8000a88 <__aeabi_d2f>
 8015e04:	4605      	mov	r5, r0
 8015e06:	4628      	mov	r0, r5
 8015e08:	b00b      	add	sp, #44	; 0x2c
 8015e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e0c:	2000      	movs	r0, #0
 8015e0e:	4915      	ldr	r1, [pc, #84]	; (8015e64 <expf+0xd4>)
 8015e10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015e14:	2b02      	cmp	r3, #2
 8015e16:	d1e7      	bne.n	8015de8 <expf+0x58>
 8015e18:	f001 feda 	bl	8017bd0 <__errno>
 8015e1c:	2322      	movs	r3, #34	; 0x22
 8015e1e:	6003      	str	r3, [r0, #0]
 8015e20:	e7e6      	b.n	8015df0 <expf+0x60>
 8015e22:	4911      	ldr	r1, [pc, #68]	; (8015e68 <expf+0xd8>)
 8015e24:	4620      	mov	r0, r4
 8015e26:	f7eb f92b 	bl	8001080 <__aeabi_fcmplt>
 8015e2a:	2800      	cmp	r0, #0
 8015e2c:	d0eb      	beq.n	8015e06 <expf+0x76>
 8015e2e:	2304      	movs	r3, #4
 8015e30:	9300      	str	r3, [sp, #0]
 8015e32:	4b0a      	ldr	r3, [pc, #40]	; (8015e5c <expf+0xcc>)
 8015e34:	4620      	mov	r0, r4
 8015e36:	9301      	str	r3, [sp, #4]
 8015e38:	9708      	str	r7, [sp, #32]
 8015e3a:	f7ea faf5 	bl	8000428 <__aeabi_f2d>
 8015e3e:	2300      	movs	r3, #0
 8015e40:	2200      	movs	r2, #0
 8015e42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e4e:	f996 3000 	ldrsb.w	r3, [r6]
 8015e52:	e7df      	b.n	8015e14 <expf+0x84>
 8015e54:	20000724 	.word	0x20000724
 8015e58:	42b17180 	.word	0x42b17180
 8015e5c:	08018e32 	.word	0x08018e32
 8015e60:	47efffff 	.word	0x47efffff
 8015e64:	7ff00000 	.word	0x7ff00000
 8015e68:	c2cff1b5 	.word	0xc2cff1b5
 8015e6c:	00000000 	.word	0x00000000

08015e70 <__ieee754_exp>:
 8015e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e74:	4aa8      	ldr	r2, [pc, #672]	; (8016118 <__ieee754_exp+0x2a8>)
 8015e76:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015e7a:	4296      	cmp	r6, r2
 8015e7c:	4605      	mov	r5, r0
 8015e7e:	460c      	mov	r4, r1
 8015e80:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8015e84:	d92c      	bls.n	8015ee0 <__ieee754_exp+0x70>
 8015e86:	4aa5      	ldr	r2, [pc, #660]	; (801611c <__ieee754_exp+0x2ac>)
 8015e88:	4296      	cmp	r6, r2
 8015e8a:	d910      	bls.n	8015eae <__ieee754_exp+0x3e>
 8015e8c:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8015e90:	4303      	orrs	r3, r0
 8015e92:	4602      	mov	r2, r0
 8015e94:	d005      	beq.n	8015ea2 <__ieee754_exp+0x32>
 8015e96:	460b      	mov	r3, r1
 8015e98:	f7ea f968 	bl	800016c <__adddf3>
 8015e9c:	4605      	mov	r5, r0
 8015e9e:	460c      	mov	r4, r1
 8015ea0:	e000      	b.n	8015ea4 <__ieee754_exp+0x34>
 8015ea2:	b9d7      	cbnz	r7, 8015eda <__ieee754_exp+0x6a>
 8015ea4:	4628      	mov	r0, r5
 8015ea6:	4621      	mov	r1, r4
 8015ea8:	b004      	add	sp, #16
 8015eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eae:	a384      	add	r3, pc, #528	; (adr r3, 80160c0 <__ieee754_exp+0x250>)
 8015eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eb4:	f7ea fda0 	bl	80009f8 <__aeabi_dcmpgt>
 8015eb8:	b138      	cbz	r0, 8015eca <__ieee754_exp+0x5a>
 8015eba:	a383      	add	r3, pc, #524	; (adr r3, 80160c8 <__ieee754_exp+0x258>)
 8015ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ec0:	4610      	mov	r0, r2
 8015ec2:	4619      	mov	r1, r3
 8015ec4:	f7ea fb08 	bl	80004d8 <__aeabi_dmul>
 8015ec8:	e7e8      	b.n	8015e9c <__ieee754_exp+0x2c>
 8015eca:	a381      	add	r3, pc, #516	; (adr r3, 80160d0 <__ieee754_exp+0x260>)
 8015ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	4621      	mov	r1, r4
 8015ed4:	f7ea fd72 	bl	80009bc <__aeabi_dcmplt>
 8015ed8:	b130      	cbz	r0, 8015ee8 <__ieee754_exp+0x78>
 8015eda:	2500      	movs	r5, #0
 8015edc:	462c      	mov	r4, r5
 8015ede:	e7e1      	b.n	8015ea4 <__ieee754_exp+0x34>
 8015ee0:	4b8f      	ldr	r3, [pc, #572]	; (8016120 <__ieee754_exp+0x2b0>)
 8015ee2:	429e      	cmp	r6, r3
 8015ee4:	f240 80a6 	bls.w	8016034 <__ieee754_exp+0x1c4>
 8015ee8:	4b8e      	ldr	r3, [pc, #568]	; (8016124 <__ieee754_exp+0x2b4>)
 8015eea:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8015eee:	429e      	cmp	r6, r3
 8015ef0:	d875      	bhi.n	8015fde <__ieee754_exp+0x16e>
 8015ef2:	4b8d      	ldr	r3, [pc, #564]	; (8016128 <__ieee754_exp+0x2b8>)
 8015ef4:	4628      	mov	r0, r5
 8015ef6:	4443      	add	r3, r8
 8015ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015efc:	4621      	mov	r1, r4
 8015efe:	f7ea f933 	bl	8000168 <__aeabi_dsub>
 8015f02:	4e8a      	ldr	r6, [pc, #552]	; (801612c <__ieee754_exp+0x2bc>)
 8015f04:	e9cd 0100 	strd	r0, r1, [sp]
 8015f08:	f1c7 0a01 	rsb	sl, r7, #1
 8015f0c:	4446      	add	r6, r8
 8015f0e:	ebaa 0a07 	sub.w	sl, sl, r7
 8015f12:	e9d6 8900 	ldrd	r8, r9, [r6]
 8015f16:	4642      	mov	r2, r8
 8015f18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f1c:	464b      	mov	r3, r9
 8015f1e:	f7ea f923 	bl	8000168 <__aeabi_dsub>
 8015f22:	4605      	mov	r5, r0
 8015f24:	460c      	mov	r4, r1
 8015f26:	462a      	mov	r2, r5
 8015f28:	4623      	mov	r3, r4
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	4621      	mov	r1, r4
 8015f2e:	f7ea fad3 	bl	80004d8 <__aeabi_dmul>
 8015f32:	a369      	add	r3, pc, #420	; (adr r3, 80160d8 <__ieee754_exp+0x268>)
 8015f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f38:	4606      	mov	r6, r0
 8015f3a:	460f      	mov	r7, r1
 8015f3c:	f7ea facc 	bl	80004d8 <__aeabi_dmul>
 8015f40:	a367      	add	r3, pc, #412	; (adr r3, 80160e0 <__ieee754_exp+0x270>)
 8015f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f46:	f7ea f90f 	bl	8000168 <__aeabi_dsub>
 8015f4a:	4632      	mov	r2, r6
 8015f4c:	463b      	mov	r3, r7
 8015f4e:	f7ea fac3 	bl	80004d8 <__aeabi_dmul>
 8015f52:	a365      	add	r3, pc, #404	; (adr r3, 80160e8 <__ieee754_exp+0x278>)
 8015f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f58:	f7ea f908 	bl	800016c <__adddf3>
 8015f5c:	4632      	mov	r2, r6
 8015f5e:	463b      	mov	r3, r7
 8015f60:	f7ea faba 	bl	80004d8 <__aeabi_dmul>
 8015f64:	a362      	add	r3, pc, #392	; (adr r3, 80160f0 <__ieee754_exp+0x280>)
 8015f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f6a:	f7ea f8fd 	bl	8000168 <__aeabi_dsub>
 8015f6e:	4632      	mov	r2, r6
 8015f70:	463b      	mov	r3, r7
 8015f72:	f7ea fab1 	bl	80004d8 <__aeabi_dmul>
 8015f76:	a360      	add	r3, pc, #384	; (adr r3, 80160f8 <__ieee754_exp+0x288>)
 8015f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7c:	f7ea f8f6 	bl	800016c <__adddf3>
 8015f80:	4632      	mov	r2, r6
 8015f82:	463b      	mov	r3, r7
 8015f84:	f7ea faa8 	bl	80004d8 <__aeabi_dmul>
 8015f88:	4602      	mov	r2, r0
 8015f8a:	460b      	mov	r3, r1
 8015f8c:	4628      	mov	r0, r5
 8015f8e:	4621      	mov	r1, r4
 8015f90:	f7ea f8ea 	bl	8000168 <__aeabi_dsub>
 8015f94:	4602      	mov	r2, r0
 8015f96:	460b      	mov	r3, r1
 8015f98:	4606      	mov	r6, r0
 8015f9a:	460f      	mov	r7, r1
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	4621      	mov	r1, r4
 8015fa0:	f7ea fa9a 	bl	80004d8 <__aeabi_dmul>
 8015fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fa8:	f1ba 0f00 	cmp.w	sl, #0
 8015fac:	d159      	bne.n	8016062 <__ieee754_exp+0x1f2>
 8015fae:	2200      	movs	r2, #0
 8015fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	4639      	mov	r1, r7
 8015fb8:	f7ea f8d6 	bl	8000168 <__aeabi_dsub>
 8015fbc:	4602      	mov	r2, r0
 8015fbe:	460b      	mov	r3, r1
 8015fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015fc4:	f7ea fbb2 	bl	800072c <__aeabi_ddiv>
 8015fc8:	462a      	mov	r2, r5
 8015fca:	4623      	mov	r3, r4
 8015fcc:	f7ea f8cc 	bl	8000168 <__aeabi_dsub>
 8015fd0:	4602      	mov	r2, r0
 8015fd2:	460b      	mov	r3, r1
 8015fd4:	2000      	movs	r0, #0
 8015fd6:	4956      	ldr	r1, [pc, #344]	; (8016130 <__ieee754_exp+0x2c0>)
 8015fd8:	f7ea f8c6 	bl	8000168 <__aeabi_dsub>
 8015fdc:	e75e      	b.n	8015e9c <__ieee754_exp+0x2c>
 8015fde:	4e55      	ldr	r6, [pc, #340]	; (8016134 <__ieee754_exp+0x2c4>)
 8015fe0:	a347      	add	r3, pc, #284	; (adr r3, 8016100 <__ieee754_exp+0x290>)
 8015fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe6:	4446      	add	r6, r8
 8015fe8:	4628      	mov	r0, r5
 8015fea:	4621      	mov	r1, r4
 8015fec:	f7ea fa74 	bl	80004d8 <__aeabi_dmul>
 8015ff0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015ff4:	f7ea f8ba 	bl	800016c <__adddf3>
 8015ff8:	f7ea fd1e 	bl	8000a38 <__aeabi_d2iz>
 8015ffc:	4682      	mov	sl, r0
 8015ffe:	f7ea fa01 	bl	8000404 <__aeabi_i2d>
 8016002:	a341      	add	r3, pc, #260	; (adr r3, 8016108 <__ieee754_exp+0x298>)
 8016004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016008:	4606      	mov	r6, r0
 801600a:	460f      	mov	r7, r1
 801600c:	f7ea fa64 	bl	80004d8 <__aeabi_dmul>
 8016010:	4602      	mov	r2, r0
 8016012:	460b      	mov	r3, r1
 8016014:	4628      	mov	r0, r5
 8016016:	4621      	mov	r1, r4
 8016018:	f7ea f8a6 	bl	8000168 <__aeabi_dsub>
 801601c:	a33c      	add	r3, pc, #240	; (adr r3, 8016110 <__ieee754_exp+0x2a0>)
 801601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016022:	e9cd 0100 	strd	r0, r1, [sp]
 8016026:	4630      	mov	r0, r6
 8016028:	4639      	mov	r1, r7
 801602a:	f7ea fa55 	bl	80004d8 <__aeabi_dmul>
 801602e:	4680      	mov	r8, r0
 8016030:	4689      	mov	r9, r1
 8016032:	e770      	b.n	8015f16 <__ieee754_exp+0xa6>
 8016034:	4b40      	ldr	r3, [pc, #256]	; (8016138 <__ieee754_exp+0x2c8>)
 8016036:	429e      	cmp	r6, r3
 8016038:	d80e      	bhi.n	8016058 <__ieee754_exp+0x1e8>
 801603a:	a323      	add	r3, pc, #140	; (adr r3, 80160c8 <__ieee754_exp+0x258>)
 801603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016040:	f7ea f894 	bl	800016c <__adddf3>
 8016044:	2200      	movs	r2, #0
 8016046:	4b3a      	ldr	r3, [pc, #232]	; (8016130 <__ieee754_exp+0x2c0>)
 8016048:	f7ea fcd6 	bl	80009f8 <__aeabi_dcmpgt>
 801604c:	b138      	cbz	r0, 801605e <__ieee754_exp+0x1ee>
 801604e:	2200      	movs	r2, #0
 8016050:	4b37      	ldr	r3, [pc, #220]	; (8016130 <__ieee754_exp+0x2c0>)
 8016052:	4628      	mov	r0, r5
 8016054:	4621      	mov	r1, r4
 8016056:	e71f      	b.n	8015e98 <__ieee754_exp+0x28>
 8016058:	f04f 0a00 	mov.w	sl, #0
 801605c:	e763      	b.n	8015f26 <__ieee754_exp+0xb6>
 801605e:	4682      	mov	sl, r0
 8016060:	e761      	b.n	8015f26 <__ieee754_exp+0xb6>
 8016062:	4632      	mov	r2, r6
 8016064:	463b      	mov	r3, r7
 8016066:	2000      	movs	r0, #0
 8016068:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801606c:	f7ea f87c 	bl	8000168 <__aeabi_dsub>
 8016070:	4602      	mov	r2, r0
 8016072:	460b      	mov	r3, r1
 8016074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016078:	f7ea fb58 	bl	800072c <__aeabi_ddiv>
 801607c:	4602      	mov	r2, r0
 801607e:	460b      	mov	r3, r1
 8016080:	4640      	mov	r0, r8
 8016082:	4649      	mov	r1, r9
 8016084:	f7ea f870 	bl	8000168 <__aeabi_dsub>
 8016088:	e9dd 2300 	ldrd	r2, r3, [sp]
 801608c:	f7ea f86c 	bl	8000168 <__aeabi_dsub>
 8016090:	4602      	mov	r2, r0
 8016092:	460b      	mov	r3, r1
 8016094:	2000      	movs	r0, #0
 8016096:	4926      	ldr	r1, [pc, #152]	; (8016130 <__ieee754_exp+0x2c0>)
 8016098:	f7ea f866 	bl	8000168 <__aeabi_dsub>
 801609c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80160a0:	4592      	cmp	sl, r2
 80160a2:	db02      	blt.n	80160aa <__ieee754_exp+0x23a>
 80160a4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80160a8:	e6f8      	b.n	8015e9c <__ieee754_exp+0x2c>
 80160aa:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80160ae:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80160b2:	2200      	movs	r2, #0
 80160b4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80160b8:	e704      	b.n	8015ec4 <__ieee754_exp+0x54>
 80160ba:	bf00      	nop
 80160bc:	f3af 8000 	nop.w
 80160c0:	fefa39ef 	.word	0xfefa39ef
 80160c4:	40862e42 	.word	0x40862e42
 80160c8:	8800759c 	.word	0x8800759c
 80160cc:	7e37e43c 	.word	0x7e37e43c
 80160d0:	d52d3051 	.word	0xd52d3051
 80160d4:	c0874910 	.word	0xc0874910
 80160d8:	72bea4d0 	.word	0x72bea4d0
 80160dc:	3e663769 	.word	0x3e663769
 80160e0:	c5d26bf1 	.word	0xc5d26bf1
 80160e4:	3ebbbd41 	.word	0x3ebbbd41
 80160e8:	af25de2c 	.word	0xaf25de2c
 80160ec:	3f11566a 	.word	0x3f11566a
 80160f0:	16bebd93 	.word	0x16bebd93
 80160f4:	3f66c16c 	.word	0x3f66c16c
 80160f8:	5555553e 	.word	0x5555553e
 80160fc:	3fc55555 	.word	0x3fc55555
 8016100:	652b82fe 	.word	0x652b82fe
 8016104:	3ff71547 	.word	0x3ff71547
 8016108:	fee00000 	.word	0xfee00000
 801610c:	3fe62e42 	.word	0x3fe62e42
 8016110:	35793c76 	.word	0x35793c76
 8016114:	3dea39ef 	.word	0x3dea39ef
 8016118:	40862e41 	.word	0x40862e41
 801611c:	7fefffff 	.word	0x7fefffff
 8016120:	3fd62e42 	.word	0x3fd62e42
 8016124:	3ff0a2b1 	.word	0x3ff0a2b1
 8016128:	08018e48 	.word	0x08018e48
 801612c:	08018e58 	.word	0x08018e58
 8016130:	3ff00000 	.word	0x3ff00000
 8016134:	08018e38 	.word	0x08018e38
 8016138:	3e2fffff 	.word	0x3e2fffff
 801613c:	00000000 	.word	0x00000000

08016140 <__ieee754_pow>:
 8016140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016144:	b091      	sub	sp, #68	; 0x44
 8016146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801614a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 801614e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016152:	ea55 0302 	orrs.w	r3, r5, r2
 8016156:	4607      	mov	r7, r0
 8016158:	4688      	mov	r8, r1
 801615a:	f000 84b7 	beq.w	8016acc <__ieee754_pow+0x98c>
 801615e:	4b80      	ldr	r3, [pc, #512]	; (8016360 <__ieee754_pow+0x220>)
 8016160:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8016164:	429c      	cmp	r4, r3
 8016166:	4689      	mov	r9, r1
 8016168:	4682      	mov	sl, r0
 801616a:	dc09      	bgt.n	8016180 <__ieee754_pow+0x40>
 801616c:	d103      	bne.n	8016176 <__ieee754_pow+0x36>
 801616e:	b938      	cbnz	r0, 8016180 <__ieee754_pow+0x40>
 8016170:	42a5      	cmp	r5, r4
 8016172:	dc0d      	bgt.n	8016190 <__ieee754_pow+0x50>
 8016174:	e001      	b.n	801617a <__ieee754_pow+0x3a>
 8016176:	429d      	cmp	r5, r3
 8016178:	dc02      	bgt.n	8016180 <__ieee754_pow+0x40>
 801617a:	429d      	cmp	r5, r3
 801617c:	d10e      	bne.n	801619c <__ieee754_pow+0x5c>
 801617e:	b16a      	cbz	r2, 801619c <__ieee754_pow+0x5c>
 8016180:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016184:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016188:	ea54 030a 	orrs.w	r3, r4, sl
 801618c:	f000 849e 	beq.w	8016acc <__ieee754_pow+0x98c>
 8016190:	4874      	ldr	r0, [pc, #464]	; (8016364 <__ieee754_pow+0x224>)
 8016192:	b011      	add	sp, #68	; 0x44
 8016194:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016198:	f001 bb6e 	b.w	8017878 <nan>
 801619c:	f1b9 0f00 	cmp.w	r9, #0
 80161a0:	da53      	bge.n	801624a <__ieee754_pow+0x10a>
 80161a2:	4b71      	ldr	r3, [pc, #452]	; (8016368 <__ieee754_pow+0x228>)
 80161a4:	429d      	cmp	r5, r3
 80161a6:	dc4e      	bgt.n	8016246 <__ieee754_pow+0x106>
 80161a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80161ac:	429d      	cmp	r5, r3
 80161ae:	dd4c      	ble.n	801624a <__ieee754_pow+0x10a>
 80161b0:	152b      	asrs	r3, r5, #20
 80161b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80161b6:	2b14      	cmp	r3, #20
 80161b8:	dd28      	ble.n	801620c <__ieee754_pow+0xcc>
 80161ba:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80161be:	fa22 f103 	lsr.w	r1, r2, r3
 80161c2:	fa01 f303 	lsl.w	r3, r1, r3
 80161c6:	4293      	cmp	r3, r2
 80161c8:	d13f      	bne.n	801624a <__ieee754_pow+0x10a>
 80161ca:	f001 0101 	and.w	r1, r1, #1
 80161ce:	f1c1 0302 	rsb	r3, r1, #2
 80161d2:	9300      	str	r3, [sp, #0]
 80161d4:	2a00      	cmp	r2, #0
 80161d6:	d15c      	bne.n	8016292 <__ieee754_pow+0x152>
 80161d8:	4b61      	ldr	r3, [pc, #388]	; (8016360 <__ieee754_pow+0x220>)
 80161da:	429d      	cmp	r5, r3
 80161dc:	d126      	bne.n	801622c <__ieee754_pow+0xec>
 80161de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80161e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80161e6:	ea53 030a 	orrs.w	r3, r3, sl
 80161ea:	f000 846f 	beq.w	8016acc <__ieee754_pow+0x98c>
 80161ee:	4b5f      	ldr	r3, [pc, #380]	; (801636c <__ieee754_pow+0x22c>)
 80161f0:	429c      	cmp	r4, r3
 80161f2:	dd2c      	ble.n	801624e <__ieee754_pow+0x10e>
 80161f4:	2e00      	cmp	r6, #0
 80161f6:	f280 846f 	bge.w	8016ad8 <__ieee754_pow+0x998>
 80161fa:	f04f 0b00 	mov.w	fp, #0
 80161fe:	f04f 0c00 	mov.w	ip, #0
 8016202:	4658      	mov	r0, fp
 8016204:	4661      	mov	r1, ip
 8016206:	b011      	add	sp, #68	; 0x44
 8016208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801620c:	2a00      	cmp	r2, #0
 801620e:	d13e      	bne.n	801628e <__ieee754_pow+0x14e>
 8016210:	f1c3 0314 	rsb	r3, r3, #20
 8016214:	fa45 f103 	asr.w	r1, r5, r3
 8016218:	fa01 f303 	lsl.w	r3, r1, r3
 801621c:	42ab      	cmp	r3, r5
 801621e:	f040 8463 	bne.w	8016ae8 <__ieee754_pow+0x9a8>
 8016222:	f001 0101 	and.w	r1, r1, #1
 8016226:	f1c1 0302 	rsb	r3, r1, #2
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	4b50      	ldr	r3, [pc, #320]	; (8016370 <__ieee754_pow+0x230>)
 801622e:	429d      	cmp	r5, r3
 8016230:	d114      	bne.n	801625c <__ieee754_pow+0x11c>
 8016232:	2e00      	cmp	r6, #0
 8016234:	f280 8454 	bge.w	8016ae0 <__ieee754_pow+0x9a0>
 8016238:	463a      	mov	r2, r7
 801623a:	4643      	mov	r3, r8
 801623c:	2000      	movs	r0, #0
 801623e:	494c      	ldr	r1, [pc, #304]	; (8016370 <__ieee754_pow+0x230>)
 8016240:	f7ea fa74 	bl	800072c <__aeabi_ddiv>
 8016244:	e013      	b.n	801626e <__ieee754_pow+0x12e>
 8016246:	2302      	movs	r3, #2
 8016248:	e7c3      	b.n	80161d2 <__ieee754_pow+0x92>
 801624a:	2300      	movs	r3, #0
 801624c:	e7c1      	b.n	80161d2 <__ieee754_pow+0x92>
 801624e:	2e00      	cmp	r6, #0
 8016250:	dad3      	bge.n	80161fa <__ieee754_pow+0xba>
 8016252:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8016256:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 801625a:	e7d2      	b.n	8016202 <__ieee754_pow+0xc2>
 801625c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8016260:	d108      	bne.n	8016274 <__ieee754_pow+0x134>
 8016262:	463a      	mov	r2, r7
 8016264:	4643      	mov	r3, r8
 8016266:	4638      	mov	r0, r7
 8016268:	4641      	mov	r1, r8
 801626a:	f7ea f935 	bl	80004d8 <__aeabi_dmul>
 801626e:	4683      	mov	fp, r0
 8016270:	468c      	mov	ip, r1
 8016272:	e7c6      	b.n	8016202 <__ieee754_pow+0xc2>
 8016274:	4b3f      	ldr	r3, [pc, #252]	; (8016374 <__ieee754_pow+0x234>)
 8016276:	429e      	cmp	r6, r3
 8016278:	d10b      	bne.n	8016292 <__ieee754_pow+0x152>
 801627a:	f1b9 0f00 	cmp.w	r9, #0
 801627e:	db08      	blt.n	8016292 <__ieee754_pow+0x152>
 8016280:	4638      	mov	r0, r7
 8016282:	4641      	mov	r1, r8
 8016284:	b011      	add	sp, #68	; 0x44
 8016286:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801628a:	f000 bc63 	b.w	8016b54 <__ieee754_sqrt>
 801628e:	2300      	movs	r3, #0
 8016290:	9300      	str	r3, [sp, #0]
 8016292:	4638      	mov	r0, r7
 8016294:	4641      	mov	r1, r8
 8016296:	f001 fae3 	bl	8017860 <fabs>
 801629a:	4683      	mov	fp, r0
 801629c:	468c      	mov	ip, r1
 801629e:	f1ba 0f00 	cmp.w	sl, #0
 80162a2:	d12b      	bne.n	80162fc <__ieee754_pow+0x1bc>
 80162a4:	b124      	cbz	r4, 80162b0 <__ieee754_pow+0x170>
 80162a6:	4b32      	ldr	r3, [pc, #200]	; (8016370 <__ieee754_pow+0x230>)
 80162a8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80162ac:	429a      	cmp	r2, r3
 80162ae:	d125      	bne.n	80162fc <__ieee754_pow+0x1bc>
 80162b0:	2e00      	cmp	r6, #0
 80162b2:	da07      	bge.n	80162c4 <__ieee754_pow+0x184>
 80162b4:	465a      	mov	r2, fp
 80162b6:	4663      	mov	r3, ip
 80162b8:	2000      	movs	r0, #0
 80162ba:	492d      	ldr	r1, [pc, #180]	; (8016370 <__ieee754_pow+0x230>)
 80162bc:	f7ea fa36 	bl	800072c <__aeabi_ddiv>
 80162c0:	4683      	mov	fp, r0
 80162c2:	468c      	mov	ip, r1
 80162c4:	f1b9 0f00 	cmp.w	r9, #0
 80162c8:	da9b      	bge.n	8016202 <__ieee754_pow+0xc2>
 80162ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80162ce:	9b00      	ldr	r3, [sp, #0]
 80162d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80162d4:	4323      	orrs	r3, r4
 80162d6:	d108      	bne.n	80162ea <__ieee754_pow+0x1aa>
 80162d8:	465a      	mov	r2, fp
 80162da:	4663      	mov	r3, ip
 80162dc:	4658      	mov	r0, fp
 80162de:	4661      	mov	r1, ip
 80162e0:	f7e9 ff42 	bl	8000168 <__aeabi_dsub>
 80162e4:	4602      	mov	r2, r0
 80162e6:	460b      	mov	r3, r1
 80162e8:	e7aa      	b.n	8016240 <__ieee754_pow+0x100>
 80162ea:	9b00      	ldr	r3, [sp, #0]
 80162ec:	2b01      	cmp	r3, #1
 80162ee:	d188      	bne.n	8016202 <__ieee754_pow+0xc2>
 80162f0:	4658      	mov	r0, fp
 80162f2:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80162f6:	4683      	mov	fp, r0
 80162f8:	469c      	mov	ip, r3
 80162fa:	e782      	b.n	8016202 <__ieee754_pow+0xc2>
 80162fc:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8016300:	f109 33ff 	add.w	r3, r9, #4294967295
 8016304:	930d      	str	r3, [sp, #52]	; 0x34
 8016306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016308:	9b00      	ldr	r3, [sp, #0]
 801630a:	4313      	orrs	r3, r2
 801630c:	d104      	bne.n	8016318 <__ieee754_pow+0x1d8>
 801630e:	463a      	mov	r2, r7
 8016310:	4643      	mov	r3, r8
 8016312:	4638      	mov	r0, r7
 8016314:	4641      	mov	r1, r8
 8016316:	e7e3      	b.n	80162e0 <__ieee754_pow+0x1a0>
 8016318:	4b17      	ldr	r3, [pc, #92]	; (8016378 <__ieee754_pow+0x238>)
 801631a:	429d      	cmp	r5, r3
 801631c:	f340 80fe 	ble.w	801651c <__ieee754_pow+0x3dc>
 8016320:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016324:	429d      	cmp	r5, r3
 8016326:	dd0b      	ble.n	8016340 <__ieee754_pow+0x200>
 8016328:	4b10      	ldr	r3, [pc, #64]	; (801636c <__ieee754_pow+0x22c>)
 801632a:	429c      	cmp	r4, r3
 801632c:	dc0e      	bgt.n	801634c <__ieee754_pow+0x20c>
 801632e:	2e00      	cmp	r6, #0
 8016330:	f6bf af63 	bge.w	80161fa <__ieee754_pow+0xba>
 8016334:	a308      	add	r3, pc, #32	; (adr r3, 8016358 <__ieee754_pow+0x218>)
 8016336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633a:	4610      	mov	r0, r2
 801633c:	4619      	mov	r1, r3
 801633e:	e794      	b.n	801626a <__ieee754_pow+0x12a>
 8016340:	4b0e      	ldr	r3, [pc, #56]	; (801637c <__ieee754_pow+0x23c>)
 8016342:	429c      	cmp	r4, r3
 8016344:	ddf3      	ble.n	801632e <__ieee754_pow+0x1ee>
 8016346:	4b0a      	ldr	r3, [pc, #40]	; (8016370 <__ieee754_pow+0x230>)
 8016348:	429c      	cmp	r4, r3
 801634a:	dd19      	ble.n	8016380 <__ieee754_pow+0x240>
 801634c:	2e00      	cmp	r6, #0
 801634e:	dcf1      	bgt.n	8016334 <__ieee754_pow+0x1f4>
 8016350:	e753      	b.n	80161fa <__ieee754_pow+0xba>
 8016352:	bf00      	nop
 8016354:	f3af 8000 	nop.w
 8016358:	8800759c 	.word	0x8800759c
 801635c:	7e37e43c 	.word	0x7e37e43c
 8016360:	7ff00000 	.word	0x7ff00000
 8016364:	08018e29 	.word	0x08018e29
 8016368:	433fffff 	.word	0x433fffff
 801636c:	3fefffff 	.word	0x3fefffff
 8016370:	3ff00000 	.word	0x3ff00000
 8016374:	3fe00000 	.word	0x3fe00000
 8016378:	41e00000 	.word	0x41e00000
 801637c:	3feffffe 	.word	0x3feffffe
 8016380:	4661      	mov	r1, ip
 8016382:	2200      	movs	r2, #0
 8016384:	4b60      	ldr	r3, [pc, #384]	; (8016508 <__ieee754_pow+0x3c8>)
 8016386:	4658      	mov	r0, fp
 8016388:	f7e9 feee 	bl	8000168 <__aeabi_dsub>
 801638c:	a354      	add	r3, pc, #336	; (adr r3, 80164e0 <__ieee754_pow+0x3a0>)
 801638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016392:	4604      	mov	r4, r0
 8016394:	460d      	mov	r5, r1
 8016396:	f7ea f89f 	bl	80004d8 <__aeabi_dmul>
 801639a:	a353      	add	r3, pc, #332	; (adr r3, 80164e8 <__ieee754_pow+0x3a8>)
 801639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a0:	4606      	mov	r6, r0
 80163a2:	460f      	mov	r7, r1
 80163a4:	4620      	mov	r0, r4
 80163a6:	4629      	mov	r1, r5
 80163a8:	f7ea f896 	bl	80004d8 <__aeabi_dmul>
 80163ac:	2200      	movs	r2, #0
 80163ae:	4682      	mov	sl, r0
 80163b0:	468b      	mov	fp, r1
 80163b2:	4b56      	ldr	r3, [pc, #344]	; (801650c <__ieee754_pow+0x3cc>)
 80163b4:	4620      	mov	r0, r4
 80163b6:	4629      	mov	r1, r5
 80163b8:	f7ea f88e 	bl	80004d8 <__aeabi_dmul>
 80163bc:	4602      	mov	r2, r0
 80163be:	460b      	mov	r3, r1
 80163c0:	a14b      	add	r1, pc, #300	; (adr r1, 80164f0 <__ieee754_pow+0x3b0>)
 80163c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163c6:	f7e9 fecf 	bl	8000168 <__aeabi_dsub>
 80163ca:	4622      	mov	r2, r4
 80163cc:	462b      	mov	r3, r5
 80163ce:	f7ea f883 	bl	80004d8 <__aeabi_dmul>
 80163d2:	4602      	mov	r2, r0
 80163d4:	460b      	mov	r3, r1
 80163d6:	2000      	movs	r0, #0
 80163d8:	494d      	ldr	r1, [pc, #308]	; (8016510 <__ieee754_pow+0x3d0>)
 80163da:	f7e9 fec5 	bl	8000168 <__aeabi_dsub>
 80163de:	4622      	mov	r2, r4
 80163e0:	462b      	mov	r3, r5
 80163e2:	4680      	mov	r8, r0
 80163e4:	4689      	mov	r9, r1
 80163e6:	4620      	mov	r0, r4
 80163e8:	4629      	mov	r1, r5
 80163ea:	f7ea f875 	bl	80004d8 <__aeabi_dmul>
 80163ee:	4602      	mov	r2, r0
 80163f0:	460b      	mov	r3, r1
 80163f2:	4640      	mov	r0, r8
 80163f4:	4649      	mov	r1, r9
 80163f6:	f7ea f86f 	bl	80004d8 <__aeabi_dmul>
 80163fa:	a33f      	add	r3, pc, #252	; (adr r3, 80164f8 <__ieee754_pow+0x3b8>)
 80163fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016400:	f7ea f86a 	bl	80004d8 <__aeabi_dmul>
 8016404:	4602      	mov	r2, r0
 8016406:	460b      	mov	r3, r1
 8016408:	4650      	mov	r0, sl
 801640a:	4659      	mov	r1, fp
 801640c:	f7e9 feac 	bl	8000168 <__aeabi_dsub>
 8016410:	4602      	mov	r2, r0
 8016412:	460b      	mov	r3, r1
 8016414:	4604      	mov	r4, r0
 8016416:	460d      	mov	r5, r1
 8016418:	4630      	mov	r0, r6
 801641a:	4639      	mov	r1, r7
 801641c:	f7e9 fea6 	bl	800016c <__adddf3>
 8016420:	2000      	movs	r0, #0
 8016422:	468b      	mov	fp, r1
 8016424:	4682      	mov	sl, r0
 8016426:	4632      	mov	r2, r6
 8016428:	463b      	mov	r3, r7
 801642a:	f7e9 fe9d 	bl	8000168 <__aeabi_dsub>
 801642e:	4602      	mov	r2, r0
 8016430:	460b      	mov	r3, r1
 8016432:	4620      	mov	r0, r4
 8016434:	4629      	mov	r1, r5
 8016436:	f7e9 fe97 	bl	8000168 <__aeabi_dsub>
 801643a:	9b00      	ldr	r3, [sp, #0]
 801643c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801643e:	3b01      	subs	r3, #1
 8016440:	4313      	orrs	r3, r2
 8016442:	f04f 0300 	mov.w	r3, #0
 8016446:	bf0c      	ite	eq
 8016448:	4c32      	ldreq	r4, [pc, #200]	; (8016514 <__ieee754_pow+0x3d4>)
 801644a:	4c2f      	ldrne	r4, [pc, #188]	; (8016508 <__ieee754_pow+0x3c8>)
 801644c:	4606      	mov	r6, r0
 801644e:	e9cd 3400 	strd	r3, r4, [sp]
 8016452:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016456:	2400      	movs	r4, #0
 8016458:	460f      	mov	r7, r1
 801645a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801645e:	4622      	mov	r2, r4
 8016460:	462b      	mov	r3, r5
 8016462:	f7e9 fe81 	bl	8000168 <__aeabi_dsub>
 8016466:	4652      	mov	r2, sl
 8016468:	465b      	mov	r3, fp
 801646a:	f7ea f835 	bl	80004d8 <__aeabi_dmul>
 801646e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016472:	4680      	mov	r8, r0
 8016474:	4689      	mov	r9, r1
 8016476:	4630      	mov	r0, r6
 8016478:	4639      	mov	r1, r7
 801647a:	f7ea f82d 	bl	80004d8 <__aeabi_dmul>
 801647e:	4602      	mov	r2, r0
 8016480:	460b      	mov	r3, r1
 8016482:	4640      	mov	r0, r8
 8016484:	4649      	mov	r1, r9
 8016486:	f7e9 fe71 	bl	800016c <__adddf3>
 801648a:	4622      	mov	r2, r4
 801648c:	462b      	mov	r3, r5
 801648e:	4680      	mov	r8, r0
 8016490:	4689      	mov	r9, r1
 8016492:	4650      	mov	r0, sl
 8016494:	4659      	mov	r1, fp
 8016496:	f7ea f81f 	bl	80004d8 <__aeabi_dmul>
 801649a:	4604      	mov	r4, r0
 801649c:	460d      	mov	r5, r1
 801649e:	460b      	mov	r3, r1
 80164a0:	4602      	mov	r2, r0
 80164a2:	4649      	mov	r1, r9
 80164a4:	4640      	mov	r0, r8
 80164a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80164aa:	f7e9 fe5f 	bl	800016c <__adddf3>
 80164ae:	4b1a      	ldr	r3, [pc, #104]	; (8016518 <__ieee754_pow+0x3d8>)
 80164b0:	4682      	mov	sl, r0
 80164b2:	4299      	cmp	r1, r3
 80164b4:	460f      	mov	r7, r1
 80164b6:	460e      	mov	r6, r1
 80164b8:	f340 82e1 	ble.w	8016a7e <__ieee754_pow+0x93e>
 80164bc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80164c0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80164c4:	4303      	orrs	r3, r0
 80164c6:	f000 81db 	beq.w	8016880 <__ieee754_pow+0x740>
 80164ca:	a30d      	add	r3, pc, #52	; (adr r3, 8016500 <__ieee754_pow+0x3c0>)
 80164cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80164d4:	f7ea f800 	bl	80004d8 <__aeabi_dmul>
 80164d8:	a309      	add	r3, pc, #36	; (adr r3, 8016500 <__ieee754_pow+0x3c0>)
 80164da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164de:	e6c4      	b.n	801626a <__ieee754_pow+0x12a>
 80164e0:	60000000 	.word	0x60000000
 80164e4:	3ff71547 	.word	0x3ff71547
 80164e8:	f85ddf44 	.word	0xf85ddf44
 80164ec:	3e54ae0b 	.word	0x3e54ae0b
 80164f0:	55555555 	.word	0x55555555
 80164f4:	3fd55555 	.word	0x3fd55555
 80164f8:	652b82fe 	.word	0x652b82fe
 80164fc:	3ff71547 	.word	0x3ff71547
 8016500:	8800759c 	.word	0x8800759c
 8016504:	7e37e43c 	.word	0x7e37e43c
 8016508:	3ff00000 	.word	0x3ff00000
 801650c:	3fd00000 	.word	0x3fd00000
 8016510:	3fe00000 	.word	0x3fe00000
 8016514:	bff00000 	.word	0xbff00000
 8016518:	408fffff 	.word	0x408fffff
 801651c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016520:	f04f 0200 	mov.w	r2, #0
 8016524:	da08      	bge.n	8016538 <__ieee754_pow+0x3f8>
 8016526:	4658      	mov	r0, fp
 8016528:	4bcd      	ldr	r3, [pc, #820]	; (8016860 <__ieee754_pow+0x720>)
 801652a:	4661      	mov	r1, ip
 801652c:	f7e9 ffd4 	bl	80004d8 <__aeabi_dmul>
 8016530:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016534:	4683      	mov	fp, r0
 8016536:	460c      	mov	r4, r1
 8016538:	1523      	asrs	r3, r4, #20
 801653a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801653e:	4413      	add	r3, r2
 8016540:	930c      	str	r3, [sp, #48]	; 0x30
 8016542:	4bc8      	ldr	r3, [pc, #800]	; (8016864 <__ieee754_pow+0x724>)
 8016544:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016548:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801654c:	429c      	cmp	r4, r3
 801654e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016552:	dd08      	ble.n	8016566 <__ieee754_pow+0x426>
 8016554:	4bc4      	ldr	r3, [pc, #784]	; (8016868 <__ieee754_pow+0x728>)
 8016556:	429c      	cmp	r4, r3
 8016558:	f340 815b 	ble.w	8016812 <__ieee754_pow+0x6d2>
 801655c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801655e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016562:	3301      	adds	r3, #1
 8016564:	930c      	str	r3, [sp, #48]	; 0x30
 8016566:	f04f 0800 	mov.w	r8, #0
 801656a:	4658      	mov	r0, fp
 801656c:	4629      	mov	r1, r5
 801656e:	4bbf      	ldr	r3, [pc, #764]	; (801686c <__ieee754_pow+0x72c>)
 8016570:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8016574:	444b      	add	r3, r9
 8016576:	e9d3 3400 	ldrd	r3, r4, [r3]
 801657a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801657e:	461a      	mov	r2, r3
 8016580:	4623      	mov	r3, r4
 8016582:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016586:	f7e9 fdef 	bl	8000168 <__aeabi_dsub>
 801658a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801658e:	4606      	mov	r6, r0
 8016590:	460f      	mov	r7, r1
 8016592:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016596:	f7e9 fde9 	bl	800016c <__adddf3>
 801659a:	4602      	mov	r2, r0
 801659c:	460b      	mov	r3, r1
 801659e:	2000      	movs	r0, #0
 80165a0:	49b3      	ldr	r1, [pc, #716]	; (8016870 <__ieee754_pow+0x730>)
 80165a2:	f7ea f8c3 	bl	800072c <__aeabi_ddiv>
 80165a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80165aa:	4602      	mov	r2, r0
 80165ac:	460b      	mov	r3, r1
 80165ae:	4630      	mov	r0, r6
 80165b0:	4639      	mov	r1, r7
 80165b2:	f7e9 ff91 	bl	80004d8 <__aeabi_dmul>
 80165b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80165ba:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80165be:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80165c2:	2300      	movs	r3, #0
 80165c4:	2200      	movs	r2, #0
 80165c6:	106d      	asrs	r5, r5, #1
 80165c8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80165cc:	9304      	str	r3, [sp, #16]
 80165ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80165d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80165d6:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80165da:	4650      	mov	r0, sl
 80165dc:	4659      	mov	r1, fp
 80165de:	4614      	mov	r4, r2
 80165e0:	461d      	mov	r5, r3
 80165e2:	f7e9 ff79 	bl	80004d8 <__aeabi_dmul>
 80165e6:	4602      	mov	r2, r0
 80165e8:	460b      	mov	r3, r1
 80165ea:	4630      	mov	r0, r6
 80165ec:	4639      	mov	r1, r7
 80165ee:	f7e9 fdbb 	bl	8000168 <__aeabi_dsub>
 80165f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80165f6:	4606      	mov	r6, r0
 80165f8:	460f      	mov	r7, r1
 80165fa:	4620      	mov	r0, r4
 80165fc:	4629      	mov	r1, r5
 80165fe:	f7e9 fdb3 	bl	8000168 <__aeabi_dsub>
 8016602:	4602      	mov	r2, r0
 8016604:	460b      	mov	r3, r1
 8016606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801660a:	f7e9 fdad 	bl	8000168 <__aeabi_dsub>
 801660e:	4652      	mov	r2, sl
 8016610:	465b      	mov	r3, fp
 8016612:	f7e9 ff61 	bl	80004d8 <__aeabi_dmul>
 8016616:	4602      	mov	r2, r0
 8016618:	460b      	mov	r3, r1
 801661a:	4630      	mov	r0, r6
 801661c:	4639      	mov	r1, r7
 801661e:	f7e9 fda3 	bl	8000168 <__aeabi_dsub>
 8016622:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016626:	f7e9 ff57 	bl	80004d8 <__aeabi_dmul>
 801662a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801662e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016632:	4610      	mov	r0, r2
 8016634:	4619      	mov	r1, r3
 8016636:	f7e9 ff4f 	bl	80004d8 <__aeabi_dmul>
 801663a:	a377      	add	r3, pc, #476	; (adr r3, 8016818 <__ieee754_pow+0x6d8>)
 801663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016640:	4604      	mov	r4, r0
 8016642:	460d      	mov	r5, r1
 8016644:	f7e9 ff48 	bl	80004d8 <__aeabi_dmul>
 8016648:	a375      	add	r3, pc, #468	; (adr r3, 8016820 <__ieee754_pow+0x6e0>)
 801664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801664e:	f7e9 fd8d 	bl	800016c <__adddf3>
 8016652:	4622      	mov	r2, r4
 8016654:	462b      	mov	r3, r5
 8016656:	f7e9 ff3f 	bl	80004d8 <__aeabi_dmul>
 801665a:	a373      	add	r3, pc, #460	; (adr r3, 8016828 <__ieee754_pow+0x6e8>)
 801665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016660:	f7e9 fd84 	bl	800016c <__adddf3>
 8016664:	4622      	mov	r2, r4
 8016666:	462b      	mov	r3, r5
 8016668:	f7e9 ff36 	bl	80004d8 <__aeabi_dmul>
 801666c:	a370      	add	r3, pc, #448	; (adr r3, 8016830 <__ieee754_pow+0x6f0>)
 801666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016672:	f7e9 fd7b 	bl	800016c <__adddf3>
 8016676:	4622      	mov	r2, r4
 8016678:	462b      	mov	r3, r5
 801667a:	f7e9 ff2d 	bl	80004d8 <__aeabi_dmul>
 801667e:	a36e      	add	r3, pc, #440	; (adr r3, 8016838 <__ieee754_pow+0x6f8>)
 8016680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016684:	f7e9 fd72 	bl	800016c <__adddf3>
 8016688:	4622      	mov	r2, r4
 801668a:	462b      	mov	r3, r5
 801668c:	f7e9 ff24 	bl	80004d8 <__aeabi_dmul>
 8016690:	a36b      	add	r3, pc, #428	; (adr r3, 8016840 <__ieee754_pow+0x700>)
 8016692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016696:	f7e9 fd69 	bl	800016c <__adddf3>
 801669a:	4622      	mov	r2, r4
 801669c:	4606      	mov	r6, r0
 801669e:	460f      	mov	r7, r1
 80166a0:	462b      	mov	r3, r5
 80166a2:	4620      	mov	r0, r4
 80166a4:	4629      	mov	r1, r5
 80166a6:	f7e9 ff17 	bl	80004d8 <__aeabi_dmul>
 80166aa:	4602      	mov	r2, r0
 80166ac:	460b      	mov	r3, r1
 80166ae:	4630      	mov	r0, r6
 80166b0:	4639      	mov	r1, r7
 80166b2:	f7e9 ff11 	bl	80004d8 <__aeabi_dmul>
 80166b6:	4604      	mov	r4, r0
 80166b8:	460d      	mov	r5, r1
 80166ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166be:	4652      	mov	r2, sl
 80166c0:	465b      	mov	r3, fp
 80166c2:	f7e9 fd53 	bl	800016c <__adddf3>
 80166c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80166ca:	f7e9 ff05 	bl	80004d8 <__aeabi_dmul>
 80166ce:	4622      	mov	r2, r4
 80166d0:	462b      	mov	r3, r5
 80166d2:	f7e9 fd4b 	bl	800016c <__adddf3>
 80166d6:	4652      	mov	r2, sl
 80166d8:	4606      	mov	r6, r0
 80166da:	460f      	mov	r7, r1
 80166dc:	465b      	mov	r3, fp
 80166de:	4650      	mov	r0, sl
 80166e0:	4659      	mov	r1, fp
 80166e2:	f7e9 fef9 	bl	80004d8 <__aeabi_dmul>
 80166e6:	2200      	movs	r2, #0
 80166e8:	4b62      	ldr	r3, [pc, #392]	; (8016874 <__ieee754_pow+0x734>)
 80166ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80166ee:	f7e9 fd3d 	bl	800016c <__adddf3>
 80166f2:	4632      	mov	r2, r6
 80166f4:	463b      	mov	r3, r7
 80166f6:	f7e9 fd39 	bl	800016c <__adddf3>
 80166fa:	9804      	ldr	r0, [sp, #16]
 80166fc:	460d      	mov	r5, r1
 80166fe:	4604      	mov	r4, r0
 8016700:	4602      	mov	r2, r0
 8016702:	460b      	mov	r3, r1
 8016704:	4650      	mov	r0, sl
 8016706:	4659      	mov	r1, fp
 8016708:	f7e9 fee6 	bl	80004d8 <__aeabi_dmul>
 801670c:	2200      	movs	r2, #0
 801670e:	4682      	mov	sl, r0
 8016710:	468b      	mov	fp, r1
 8016712:	4b58      	ldr	r3, [pc, #352]	; (8016874 <__ieee754_pow+0x734>)
 8016714:	4620      	mov	r0, r4
 8016716:	4629      	mov	r1, r5
 8016718:	f7e9 fd26 	bl	8000168 <__aeabi_dsub>
 801671c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016720:	f7e9 fd22 	bl	8000168 <__aeabi_dsub>
 8016724:	4602      	mov	r2, r0
 8016726:	460b      	mov	r3, r1
 8016728:	4630      	mov	r0, r6
 801672a:	4639      	mov	r1, r7
 801672c:	f7e9 fd1c 	bl	8000168 <__aeabi_dsub>
 8016730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016734:	f7e9 fed0 	bl	80004d8 <__aeabi_dmul>
 8016738:	4622      	mov	r2, r4
 801673a:	4606      	mov	r6, r0
 801673c:	460f      	mov	r7, r1
 801673e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016742:	462b      	mov	r3, r5
 8016744:	f7e9 fec8 	bl	80004d8 <__aeabi_dmul>
 8016748:	4602      	mov	r2, r0
 801674a:	460b      	mov	r3, r1
 801674c:	4630      	mov	r0, r6
 801674e:	4639      	mov	r1, r7
 8016750:	f7e9 fd0c 	bl	800016c <__adddf3>
 8016754:	4606      	mov	r6, r0
 8016756:	460f      	mov	r7, r1
 8016758:	4602      	mov	r2, r0
 801675a:	460b      	mov	r3, r1
 801675c:	4650      	mov	r0, sl
 801675e:	4659      	mov	r1, fp
 8016760:	f7e9 fd04 	bl	800016c <__adddf3>
 8016764:	a338      	add	r3, pc, #224	; (adr r3, 8016848 <__ieee754_pow+0x708>)
 8016766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801676a:	9804      	ldr	r0, [sp, #16]
 801676c:	460d      	mov	r5, r1
 801676e:	4604      	mov	r4, r0
 8016770:	f7e9 feb2 	bl	80004d8 <__aeabi_dmul>
 8016774:	4652      	mov	r2, sl
 8016776:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801677a:	465b      	mov	r3, fp
 801677c:	4620      	mov	r0, r4
 801677e:	4629      	mov	r1, r5
 8016780:	f7e9 fcf2 	bl	8000168 <__aeabi_dsub>
 8016784:	4602      	mov	r2, r0
 8016786:	460b      	mov	r3, r1
 8016788:	4630      	mov	r0, r6
 801678a:	4639      	mov	r1, r7
 801678c:	f7e9 fcec 	bl	8000168 <__aeabi_dsub>
 8016790:	a32f      	add	r3, pc, #188	; (adr r3, 8016850 <__ieee754_pow+0x710>)
 8016792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016796:	f7e9 fe9f 	bl	80004d8 <__aeabi_dmul>
 801679a:	a32f      	add	r3, pc, #188	; (adr r3, 8016858 <__ieee754_pow+0x718>)
 801679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167a0:	4606      	mov	r6, r0
 80167a2:	460f      	mov	r7, r1
 80167a4:	4620      	mov	r0, r4
 80167a6:	4629      	mov	r1, r5
 80167a8:	f7e9 fe96 	bl	80004d8 <__aeabi_dmul>
 80167ac:	4602      	mov	r2, r0
 80167ae:	460b      	mov	r3, r1
 80167b0:	4630      	mov	r0, r6
 80167b2:	4639      	mov	r1, r7
 80167b4:	f7e9 fcda 	bl	800016c <__adddf3>
 80167b8:	4b2f      	ldr	r3, [pc, #188]	; (8016878 <__ieee754_pow+0x738>)
 80167ba:	444b      	add	r3, r9
 80167bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167c0:	f7e9 fcd4 	bl	800016c <__adddf3>
 80167c4:	4604      	mov	r4, r0
 80167c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80167c8:	460d      	mov	r5, r1
 80167ca:	f7e9 fe1b 	bl	8000404 <__aeabi_i2d>
 80167ce:	4606      	mov	r6, r0
 80167d0:	460f      	mov	r7, r1
 80167d2:	4b2a      	ldr	r3, [pc, #168]	; (801687c <__ieee754_pow+0x73c>)
 80167d4:	4622      	mov	r2, r4
 80167d6:	444b      	add	r3, r9
 80167d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80167dc:	462b      	mov	r3, r5
 80167de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80167e2:	f7e9 fcc3 	bl	800016c <__adddf3>
 80167e6:	4642      	mov	r2, r8
 80167e8:	464b      	mov	r3, r9
 80167ea:	f7e9 fcbf 	bl	800016c <__adddf3>
 80167ee:	4632      	mov	r2, r6
 80167f0:	463b      	mov	r3, r7
 80167f2:	f7e9 fcbb 	bl	800016c <__adddf3>
 80167f6:	9804      	ldr	r0, [sp, #16]
 80167f8:	4632      	mov	r2, r6
 80167fa:	463b      	mov	r3, r7
 80167fc:	4682      	mov	sl, r0
 80167fe:	468b      	mov	fp, r1
 8016800:	f7e9 fcb2 	bl	8000168 <__aeabi_dsub>
 8016804:	4642      	mov	r2, r8
 8016806:	464b      	mov	r3, r9
 8016808:	f7e9 fcae 	bl	8000168 <__aeabi_dsub>
 801680c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016810:	e60b      	b.n	801642a <__ieee754_pow+0x2ea>
 8016812:	f04f 0801 	mov.w	r8, #1
 8016816:	e6a8      	b.n	801656a <__ieee754_pow+0x42a>
 8016818:	4a454eef 	.word	0x4a454eef
 801681c:	3fca7e28 	.word	0x3fca7e28
 8016820:	93c9db65 	.word	0x93c9db65
 8016824:	3fcd864a 	.word	0x3fcd864a
 8016828:	a91d4101 	.word	0xa91d4101
 801682c:	3fd17460 	.word	0x3fd17460
 8016830:	518f264d 	.word	0x518f264d
 8016834:	3fd55555 	.word	0x3fd55555
 8016838:	db6fabff 	.word	0xdb6fabff
 801683c:	3fdb6db6 	.word	0x3fdb6db6
 8016840:	33333303 	.word	0x33333303
 8016844:	3fe33333 	.word	0x3fe33333
 8016848:	e0000000 	.word	0xe0000000
 801684c:	3feec709 	.word	0x3feec709
 8016850:	dc3a03fd 	.word	0xdc3a03fd
 8016854:	3feec709 	.word	0x3feec709
 8016858:	145b01f5 	.word	0x145b01f5
 801685c:	be3e2fe0 	.word	0xbe3e2fe0
 8016860:	43400000 	.word	0x43400000
 8016864:	0003988e 	.word	0x0003988e
 8016868:	000bb679 	.word	0x000bb679
 801686c:	08018e68 	.word	0x08018e68
 8016870:	3ff00000 	.word	0x3ff00000
 8016874:	40080000 	.word	0x40080000
 8016878:	08018e88 	.word	0x08018e88
 801687c:	08018e78 	.word	0x08018e78
 8016880:	a39b      	add	r3, pc, #620	; (adr r3, 8016af0 <__ieee754_pow+0x9b0>)
 8016882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016886:	4640      	mov	r0, r8
 8016888:	4649      	mov	r1, r9
 801688a:	f7e9 fc6f 	bl	800016c <__adddf3>
 801688e:	4622      	mov	r2, r4
 8016890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016894:	462b      	mov	r3, r5
 8016896:	4650      	mov	r0, sl
 8016898:	4639      	mov	r1, r7
 801689a:	f7e9 fc65 	bl	8000168 <__aeabi_dsub>
 801689e:	4602      	mov	r2, r0
 80168a0:	460b      	mov	r3, r1
 80168a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80168a6:	f7ea f8a7 	bl	80009f8 <__aeabi_dcmpgt>
 80168aa:	2800      	cmp	r0, #0
 80168ac:	f47f ae0d 	bne.w	80164ca <__ieee754_pow+0x38a>
 80168b0:	4aa3      	ldr	r2, [pc, #652]	; (8016b40 <__ieee754_pow+0xa00>)
 80168b2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80168b6:	4293      	cmp	r3, r2
 80168b8:	f340 8103 	ble.w	8016ac2 <__ieee754_pow+0x982>
 80168bc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80168c0:	2000      	movs	r0, #0
 80168c2:	151b      	asrs	r3, r3, #20
 80168c4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80168c8:	fa4a f303 	asr.w	r3, sl, r3
 80168cc:	4433      	add	r3, r6
 80168ce:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80168d2:	4f9c      	ldr	r7, [pc, #624]	; (8016b44 <__ieee754_pow+0xa04>)
 80168d4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80168d8:	4117      	asrs	r7, r2
 80168da:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80168de:	ea23 0107 	bic.w	r1, r3, r7
 80168e2:	f1c2 0214 	rsb	r2, r2, #20
 80168e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80168ea:	fa4a fa02 	asr.w	sl, sl, r2
 80168ee:	2e00      	cmp	r6, #0
 80168f0:	4602      	mov	r2, r0
 80168f2:	460b      	mov	r3, r1
 80168f4:	4620      	mov	r0, r4
 80168f6:	4629      	mov	r1, r5
 80168f8:	bfb8      	it	lt
 80168fa:	f1ca 0a00 	rsblt	sl, sl, #0
 80168fe:	f7e9 fc33 	bl	8000168 <__aeabi_dsub>
 8016902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801690a:	4642      	mov	r2, r8
 801690c:	464b      	mov	r3, r9
 801690e:	f7e9 fc2d 	bl	800016c <__adddf3>
 8016912:	a379      	add	r3, pc, #484	; (adr r3, 8016af8 <__ieee754_pow+0x9b8>)
 8016914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016918:	2000      	movs	r0, #0
 801691a:	460d      	mov	r5, r1
 801691c:	4604      	mov	r4, r0
 801691e:	f7e9 fddb 	bl	80004d8 <__aeabi_dmul>
 8016922:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016926:	4606      	mov	r6, r0
 8016928:	460f      	mov	r7, r1
 801692a:	4620      	mov	r0, r4
 801692c:	4629      	mov	r1, r5
 801692e:	f7e9 fc1b 	bl	8000168 <__aeabi_dsub>
 8016932:	4602      	mov	r2, r0
 8016934:	460b      	mov	r3, r1
 8016936:	4640      	mov	r0, r8
 8016938:	4649      	mov	r1, r9
 801693a:	f7e9 fc15 	bl	8000168 <__aeabi_dsub>
 801693e:	a370      	add	r3, pc, #448	; (adr r3, 8016b00 <__ieee754_pow+0x9c0>)
 8016940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016944:	f7e9 fdc8 	bl	80004d8 <__aeabi_dmul>
 8016948:	a36f      	add	r3, pc, #444	; (adr r3, 8016b08 <__ieee754_pow+0x9c8>)
 801694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801694e:	4680      	mov	r8, r0
 8016950:	4689      	mov	r9, r1
 8016952:	4620      	mov	r0, r4
 8016954:	4629      	mov	r1, r5
 8016956:	f7e9 fdbf 	bl	80004d8 <__aeabi_dmul>
 801695a:	4602      	mov	r2, r0
 801695c:	460b      	mov	r3, r1
 801695e:	4640      	mov	r0, r8
 8016960:	4649      	mov	r1, r9
 8016962:	f7e9 fc03 	bl	800016c <__adddf3>
 8016966:	4604      	mov	r4, r0
 8016968:	460d      	mov	r5, r1
 801696a:	4602      	mov	r2, r0
 801696c:	460b      	mov	r3, r1
 801696e:	4630      	mov	r0, r6
 8016970:	4639      	mov	r1, r7
 8016972:	f7e9 fbfb 	bl	800016c <__adddf3>
 8016976:	4632      	mov	r2, r6
 8016978:	463b      	mov	r3, r7
 801697a:	4680      	mov	r8, r0
 801697c:	4689      	mov	r9, r1
 801697e:	f7e9 fbf3 	bl	8000168 <__aeabi_dsub>
 8016982:	4602      	mov	r2, r0
 8016984:	460b      	mov	r3, r1
 8016986:	4620      	mov	r0, r4
 8016988:	4629      	mov	r1, r5
 801698a:	f7e9 fbed 	bl	8000168 <__aeabi_dsub>
 801698e:	4642      	mov	r2, r8
 8016990:	4606      	mov	r6, r0
 8016992:	460f      	mov	r7, r1
 8016994:	464b      	mov	r3, r9
 8016996:	4640      	mov	r0, r8
 8016998:	4649      	mov	r1, r9
 801699a:	f7e9 fd9d 	bl	80004d8 <__aeabi_dmul>
 801699e:	a35c      	add	r3, pc, #368	; (adr r3, 8016b10 <__ieee754_pow+0x9d0>)
 80169a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a4:	4604      	mov	r4, r0
 80169a6:	460d      	mov	r5, r1
 80169a8:	f7e9 fd96 	bl	80004d8 <__aeabi_dmul>
 80169ac:	a35a      	add	r3, pc, #360	; (adr r3, 8016b18 <__ieee754_pow+0x9d8>)
 80169ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b2:	f7e9 fbd9 	bl	8000168 <__aeabi_dsub>
 80169b6:	4622      	mov	r2, r4
 80169b8:	462b      	mov	r3, r5
 80169ba:	f7e9 fd8d 	bl	80004d8 <__aeabi_dmul>
 80169be:	a358      	add	r3, pc, #352	; (adr r3, 8016b20 <__ieee754_pow+0x9e0>)
 80169c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c4:	f7e9 fbd2 	bl	800016c <__adddf3>
 80169c8:	4622      	mov	r2, r4
 80169ca:	462b      	mov	r3, r5
 80169cc:	f7e9 fd84 	bl	80004d8 <__aeabi_dmul>
 80169d0:	a355      	add	r3, pc, #340	; (adr r3, 8016b28 <__ieee754_pow+0x9e8>)
 80169d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d6:	f7e9 fbc7 	bl	8000168 <__aeabi_dsub>
 80169da:	4622      	mov	r2, r4
 80169dc:	462b      	mov	r3, r5
 80169de:	f7e9 fd7b 	bl	80004d8 <__aeabi_dmul>
 80169e2:	a353      	add	r3, pc, #332	; (adr r3, 8016b30 <__ieee754_pow+0x9f0>)
 80169e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e8:	f7e9 fbc0 	bl	800016c <__adddf3>
 80169ec:	4622      	mov	r2, r4
 80169ee:	462b      	mov	r3, r5
 80169f0:	f7e9 fd72 	bl	80004d8 <__aeabi_dmul>
 80169f4:	4602      	mov	r2, r0
 80169f6:	460b      	mov	r3, r1
 80169f8:	4640      	mov	r0, r8
 80169fa:	4649      	mov	r1, r9
 80169fc:	f7e9 fbb4 	bl	8000168 <__aeabi_dsub>
 8016a00:	4604      	mov	r4, r0
 8016a02:	460d      	mov	r5, r1
 8016a04:	4602      	mov	r2, r0
 8016a06:	460b      	mov	r3, r1
 8016a08:	4640      	mov	r0, r8
 8016a0a:	4649      	mov	r1, r9
 8016a0c:	f7e9 fd64 	bl	80004d8 <__aeabi_dmul>
 8016a10:	2200      	movs	r2, #0
 8016a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016a1a:	4620      	mov	r0, r4
 8016a1c:	4629      	mov	r1, r5
 8016a1e:	f7e9 fba3 	bl	8000168 <__aeabi_dsub>
 8016a22:	4602      	mov	r2, r0
 8016a24:	460b      	mov	r3, r1
 8016a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016a2a:	f7e9 fe7f 	bl	800072c <__aeabi_ddiv>
 8016a2e:	4632      	mov	r2, r6
 8016a30:	4604      	mov	r4, r0
 8016a32:	460d      	mov	r5, r1
 8016a34:	463b      	mov	r3, r7
 8016a36:	4640      	mov	r0, r8
 8016a38:	4649      	mov	r1, r9
 8016a3a:	f7e9 fd4d 	bl	80004d8 <__aeabi_dmul>
 8016a3e:	4632      	mov	r2, r6
 8016a40:	463b      	mov	r3, r7
 8016a42:	f7e9 fb93 	bl	800016c <__adddf3>
 8016a46:	4602      	mov	r2, r0
 8016a48:	460b      	mov	r3, r1
 8016a4a:	4620      	mov	r0, r4
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	f7e9 fb8b 	bl	8000168 <__aeabi_dsub>
 8016a52:	4642      	mov	r2, r8
 8016a54:	464b      	mov	r3, r9
 8016a56:	f7e9 fb87 	bl	8000168 <__aeabi_dsub>
 8016a5a:	4602      	mov	r2, r0
 8016a5c:	460b      	mov	r3, r1
 8016a5e:	2000      	movs	r0, #0
 8016a60:	4939      	ldr	r1, [pc, #228]	; (8016b48 <__ieee754_pow+0xa08>)
 8016a62:	f7e9 fb81 	bl	8000168 <__aeabi_dsub>
 8016a66:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016a6a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016a6e:	da2b      	bge.n	8016ac8 <__ieee754_pow+0x988>
 8016a70:	4652      	mov	r2, sl
 8016a72:	f000 ff91 	bl	8017998 <scalbn>
 8016a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a7a:	f7ff bbf6 	b.w	801626a <__ieee754_pow+0x12a>
 8016a7e:	4b33      	ldr	r3, [pc, #204]	; (8016b4c <__ieee754_pow+0xa0c>)
 8016a80:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8016a84:	429f      	cmp	r7, r3
 8016a86:	f77f af13 	ble.w	80168b0 <__ieee754_pow+0x770>
 8016a8a:	4b31      	ldr	r3, [pc, #196]	; (8016b50 <__ieee754_pow+0xa10>)
 8016a8c:	440b      	add	r3, r1
 8016a8e:	4303      	orrs	r3, r0
 8016a90:	d00b      	beq.n	8016aaa <__ieee754_pow+0x96a>
 8016a92:	a329      	add	r3, pc, #164	; (adr r3, 8016b38 <__ieee754_pow+0x9f8>)
 8016a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a9c:	f7e9 fd1c 	bl	80004d8 <__aeabi_dmul>
 8016aa0:	a325      	add	r3, pc, #148	; (adr r3, 8016b38 <__ieee754_pow+0x9f8>)
 8016aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aa6:	f7ff bbe0 	b.w	801626a <__ieee754_pow+0x12a>
 8016aaa:	4622      	mov	r2, r4
 8016aac:	462b      	mov	r3, r5
 8016aae:	f7e9 fb5b 	bl	8000168 <__aeabi_dsub>
 8016ab2:	4642      	mov	r2, r8
 8016ab4:	464b      	mov	r3, r9
 8016ab6:	f7e9 ff95 	bl	80009e4 <__aeabi_dcmpge>
 8016aba:	2800      	cmp	r0, #0
 8016abc:	f43f aef8 	beq.w	80168b0 <__ieee754_pow+0x770>
 8016ac0:	e7e7      	b.n	8016a92 <__ieee754_pow+0x952>
 8016ac2:	f04f 0a00 	mov.w	sl, #0
 8016ac6:	e71e      	b.n	8016906 <__ieee754_pow+0x7c6>
 8016ac8:	4621      	mov	r1, r4
 8016aca:	e7d4      	b.n	8016a76 <__ieee754_pow+0x936>
 8016acc:	f04f 0b00 	mov.w	fp, #0
 8016ad0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016b48 <__ieee754_pow+0xa08>
 8016ad4:	f7ff bb95 	b.w	8016202 <__ieee754_pow+0xc2>
 8016ad8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8016adc:	f7ff bb91 	b.w	8016202 <__ieee754_pow+0xc2>
 8016ae0:	4638      	mov	r0, r7
 8016ae2:	4641      	mov	r1, r8
 8016ae4:	f7ff bbc3 	b.w	801626e <__ieee754_pow+0x12e>
 8016ae8:	9200      	str	r2, [sp, #0]
 8016aea:	f7ff bb9f 	b.w	801622c <__ieee754_pow+0xec>
 8016aee:	bf00      	nop
 8016af0:	652b82fe 	.word	0x652b82fe
 8016af4:	3c971547 	.word	0x3c971547
 8016af8:	00000000 	.word	0x00000000
 8016afc:	3fe62e43 	.word	0x3fe62e43
 8016b00:	fefa39ef 	.word	0xfefa39ef
 8016b04:	3fe62e42 	.word	0x3fe62e42
 8016b08:	0ca86c39 	.word	0x0ca86c39
 8016b0c:	be205c61 	.word	0xbe205c61
 8016b10:	72bea4d0 	.word	0x72bea4d0
 8016b14:	3e663769 	.word	0x3e663769
 8016b18:	c5d26bf1 	.word	0xc5d26bf1
 8016b1c:	3ebbbd41 	.word	0x3ebbbd41
 8016b20:	af25de2c 	.word	0xaf25de2c
 8016b24:	3f11566a 	.word	0x3f11566a
 8016b28:	16bebd93 	.word	0x16bebd93
 8016b2c:	3f66c16c 	.word	0x3f66c16c
 8016b30:	5555553e 	.word	0x5555553e
 8016b34:	3fc55555 	.word	0x3fc55555
 8016b38:	c2f8f359 	.word	0xc2f8f359
 8016b3c:	01a56e1f 	.word	0x01a56e1f
 8016b40:	3fe00000 	.word	0x3fe00000
 8016b44:	000fffff 	.word	0x000fffff
 8016b48:	3ff00000 	.word	0x3ff00000
 8016b4c:	4090cbff 	.word	0x4090cbff
 8016b50:	3f6f3400 	.word	0x3f6f3400

08016b54 <__ieee754_sqrt>:
 8016b54:	4b54      	ldr	r3, [pc, #336]	; (8016ca8 <__ieee754_sqrt+0x154>)
 8016b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5a:	438b      	bics	r3, r1
 8016b5c:	4606      	mov	r6, r0
 8016b5e:	460d      	mov	r5, r1
 8016b60:	460a      	mov	r2, r1
 8016b62:	460c      	mov	r4, r1
 8016b64:	d10f      	bne.n	8016b86 <__ieee754_sqrt+0x32>
 8016b66:	4602      	mov	r2, r0
 8016b68:	460b      	mov	r3, r1
 8016b6a:	f7e9 fcb5 	bl	80004d8 <__aeabi_dmul>
 8016b6e:	4602      	mov	r2, r0
 8016b70:	460b      	mov	r3, r1
 8016b72:	4630      	mov	r0, r6
 8016b74:	4629      	mov	r1, r5
 8016b76:	f7e9 faf9 	bl	800016c <__adddf3>
 8016b7a:	4606      	mov	r6, r0
 8016b7c:	460d      	mov	r5, r1
 8016b7e:	4630      	mov	r0, r6
 8016b80:	4629      	mov	r1, r5
 8016b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b86:	2900      	cmp	r1, #0
 8016b88:	4607      	mov	r7, r0
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	dc0e      	bgt.n	8016bac <__ieee754_sqrt+0x58>
 8016b8e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8016b92:	ea5c 0707 	orrs.w	r7, ip, r7
 8016b96:	d0f2      	beq.n	8016b7e <__ieee754_sqrt+0x2a>
 8016b98:	b141      	cbz	r1, 8016bac <__ieee754_sqrt+0x58>
 8016b9a:	4602      	mov	r2, r0
 8016b9c:	460b      	mov	r3, r1
 8016b9e:	f7e9 fae3 	bl	8000168 <__aeabi_dsub>
 8016ba2:	4602      	mov	r2, r0
 8016ba4:	460b      	mov	r3, r1
 8016ba6:	f7e9 fdc1 	bl	800072c <__aeabi_ddiv>
 8016baa:	e7e6      	b.n	8016b7a <__ieee754_sqrt+0x26>
 8016bac:	1512      	asrs	r2, r2, #20
 8016bae:	d074      	beq.n	8016c9a <__ieee754_sqrt+0x146>
 8016bb0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016bb4:	07d5      	lsls	r5, r2, #31
 8016bb6:	f04f 0500 	mov.w	r5, #0
 8016bba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016bbe:	bf48      	it	mi
 8016bc0:	0fd9      	lsrmi	r1, r3, #31
 8016bc2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8016bc6:	bf44      	itt	mi
 8016bc8:	005b      	lslmi	r3, r3, #1
 8016bca:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8016bce:	1051      	asrs	r1, r2, #1
 8016bd0:	0fda      	lsrs	r2, r3, #31
 8016bd2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016bd6:	4628      	mov	r0, r5
 8016bd8:	2216      	movs	r2, #22
 8016bda:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016bde:	005b      	lsls	r3, r3, #1
 8016be0:	1987      	adds	r7, r0, r6
 8016be2:	42a7      	cmp	r7, r4
 8016be4:	bfde      	ittt	le
 8016be6:	19b8      	addle	r0, r7, r6
 8016be8:	1be4      	suble	r4, r4, r7
 8016bea:	19ad      	addle	r5, r5, r6
 8016bec:	0fdf      	lsrs	r7, r3, #31
 8016bee:	3a01      	subs	r2, #1
 8016bf0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8016bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016bf8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016bfc:	d1f0      	bne.n	8016be0 <__ieee754_sqrt+0x8c>
 8016bfe:	f04f 0c20 	mov.w	ip, #32
 8016c02:	4696      	mov	lr, r2
 8016c04:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016c08:	4284      	cmp	r4, r0
 8016c0a:	eb06 070e 	add.w	r7, r6, lr
 8016c0e:	dc02      	bgt.n	8016c16 <__ieee754_sqrt+0xc2>
 8016c10:	d112      	bne.n	8016c38 <__ieee754_sqrt+0xe4>
 8016c12:	429f      	cmp	r7, r3
 8016c14:	d810      	bhi.n	8016c38 <__ieee754_sqrt+0xe4>
 8016c16:	2f00      	cmp	r7, #0
 8016c18:	eb07 0e06 	add.w	lr, r7, r6
 8016c1c:	da42      	bge.n	8016ca4 <__ieee754_sqrt+0x150>
 8016c1e:	f1be 0f00 	cmp.w	lr, #0
 8016c22:	db3f      	blt.n	8016ca4 <__ieee754_sqrt+0x150>
 8016c24:	f100 0801 	add.w	r8, r0, #1
 8016c28:	1a24      	subs	r4, r4, r0
 8016c2a:	4640      	mov	r0, r8
 8016c2c:	429f      	cmp	r7, r3
 8016c2e:	bf88      	it	hi
 8016c30:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8016c34:	1bdb      	subs	r3, r3, r7
 8016c36:	4432      	add	r2, r6
 8016c38:	0064      	lsls	r4, r4, #1
 8016c3a:	f1bc 0c01 	subs.w	ip, ip, #1
 8016c3e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8016c42:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016c46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016c4a:	d1dd      	bne.n	8016c08 <__ieee754_sqrt+0xb4>
 8016c4c:	4323      	orrs	r3, r4
 8016c4e:	d006      	beq.n	8016c5e <__ieee754_sqrt+0x10a>
 8016c50:	1c54      	adds	r4, r2, #1
 8016c52:	bf0b      	itete	eq
 8016c54:	4662      	moveq	r2, ip
 8016c56:	3201      	addne	r2, #1
 8016c58:	3501      	addeq	r5, #1
 8016c5a:	f022 0201 	bicne.w	r2, r2, #1
 8016c5e:	106b      	asrs	r3, r5, #1
 8016c60:	0852      	lsrs	r2, r2, #1
 8016c62:	07e8      	lsls	r0, r5, #31
 8016c64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016c68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016c6c:	bf48      	it	mi
 8016c6e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8016c72:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8016c76:	4616      	mov	r6, r2
 8016c78:	e781      	b.n	8016b7e <__ieee754_sqrt+0x2a>
 8016c7a:	0adc      	lsrs	r4, r3, #11
 8016c7c:	3915      	subs	r1, #21
 8016c7e:	055b      	lsls	r3, r3, #21
 8016c80:	2c00      	cmp	r4, #0
 8016c82:	d0fa      	beq.n	8016c7a <__ieee754_sqrt+0x126>
 8016c84:	02e6      	lsls	r6, r4, #11
 8016c86:	d50a      	bpl.n	8016c9e <__ieee754_sqrt+0x14a>
 8016c88:	f1c2 0020 	rsb	r0, r2, #32
 8016c8c:	fa23 f000 	lsr.w	r0, r3, r0
 8016c90:	1e55      	subs	r5, r2, #1
 8016c92:	4093      	lsls	r3, r2
 8016c94:	4304      	orrs	r4, r0
 8016c96:	1b4a      	subs	r2, r1, r5
 8016c98:	e78a      	b.n	8016bb0 <__ieee754_sqrt+0x5c>
 8016c9a:	4611      	mov	r1, r2
 8016c9c:	e7f0      	b.n	8016c80 <__ieee754_sqrt+0x12c>
 8016c9e:	0064      	lsls	r4, r4, #1
 8016ca0:	3201      	adds	r2, #1
 8016ca2:	e7ef      	b.n	8016c84 <__ieee754_sqrt+0x130>
 8016ca4:	4680      	mov	r8, r0
 8016ca6:	e7bf      	b.n	8016c28 <__ieee754_sqrt+0xd4>
 8016ca8:	7ff00000 	.word	0x7ff00000

08016cac <__ieee754_expf>:
 8016cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cb0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8016cb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016cb8:	4604      	mov	r4, r0
 8016cba:	d904      	bls.n	8016cc6 <__ieee754_expf+0x1a>
 8016cbc:	4601      	mov	r1, r0
 8016cbe:	f7e9 ff39 	bl	8000b34 <__addsf3>
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	e005      	b.n	8016cd2 <__ieee754_expf+0x26>
 8016cc6:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 8016cca:	d105      	bne.n	8016cd8 <__ieee754_expf+0x2c>
 8016ccc:	2e00      	cmp	r6, #0
 8016cce:	f040 80b9 	bne.w	8016e44 <__ieee754_expf+0x198>
 8016cd2:	4620      	mov	r0, r4
 8016cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cd8:	495b      	ldr	r1, [pc, #364]	; (8016e48 <__ieee754_expf+0x19c>)
 8016cda:	4288      	cmp	r0, r1
 8016cdc:	dd04      	ble.n	8016ce8 <__ieee754_expf+0x3c>
 8016cde:	495b      	ldr	r1, [pc, #364]	; (8016e4c <__ieee754_expf+0x1a0>)
 8016ce0:	4608      	mov	r0, r1
 8016ce2:	f7ea f82f 	bl	8000d44 <__aeabi_fmul>
 8016ce6:	e7ec      	b.n	8016cc2 <__ieee754_expf+0x16>
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	da03      	bge.n	8016cf4 <__ieee754_expf+0x48>
 8016cec:	4a58      	ldr	r2, [pc, #352]	; (8016e50 <__ieee754_expf+0x1a4>)
 8016cee:	4293      	cmp	r3, r2
 8016cf0:	f200 80a8 	bhi.w	8016e44 <__ieee754_expf+0x198>
 8016cf4:	4a57      	ldr	r2, [pc, #348]	; (8016e54 <__ieee754_expf+0x1a8>)
 8016cf6:	4293      	cmp	r3, r2
 8016cf8:	d96f      	bls.n	8016dda <__ieee754_expf+0x12e>
 8016cfa:	4a57      	ldr	r2, [pc, #348]	; (8016e58 <__ieee754_expf+0x1ac>)
 8016cfc:	4293      	cmp	r3, r2
 8016cfe:	d84f      	bhi.n	8016da0 <__ieee754_expf+0xf4>
 8016d00:	4b56      	ldr	r3, [pc, #344]	; (8016e5c <__ieee754_expf+0x1b0>)
 8016d02:	4620      	mov	r0, r4
 8016d04:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8016d08:	f7e9 ff12 	bl	8000b30 <__aeabi_fsub>
 8016d0c:	4607      	mov	r7, r0
 8016d0e:	4b54      	ldr	r3, [pc, #336]	; (8016e60 <__ieee754_expf+0x1b4>)
 8016d10:	f1c6 0501 	rsb	r5, r6, #1
 8016d14:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8016d18:	1bad      	subs	r5, r5, r6
 8016d1a:	4641      	mov	r1, r8
 8016d1c:	4638      	mov	r0, r7
 8016d1e:	f7e9 ff07 	bl	8000b30 <__aeabi_fsub>
 8016d22:	4604      	mov	r4, r0
 8016d24:	4621      	mov	r1, r4
 8016d26:	4620      	mov	r0, r4
 8016d28:	f7ea f80c 	bl	8000d44 <__aeabi_fmul>
 8016d2c:	4606      	mov	r6, r0
 8016d2e:	494d      	ldr	r1, [pc, #308]	; (8016e64 <__ieee754_expf+0x1b8>)
 8016d30:	f7ea f808 	bl	8000d44 <__aeabi_fmul>
 8016d34:	494c      	ldr	r1, [pc, #304]	; (8016e68 <__ieee754_expf+0x1bc>)
 8016d36:	f7e9 fefb 	bl	8000b30 <__aeabi_fsub>
 8016d3a:	4631      	mov	r1, r6
 8016d3c:	f7ea f802 	bl	8000d44 <__aeabi_fmul>
 8016d40:	494a      	ldr	r1, [pc, #296]	; (8016e6c <__ieee754_expf+0x1c0>)
 8016d42:	f7e9 fef7 	bl	8000b34 <__addsf3>
 8016d46:	4631      	mov	r1, r6
 8016d48:	f7e9 fffc 	bl	8000d44 <__aeabi_fmul>
 8016d4c:	4948      	ldr	r1, [pc, #288]	; (8016e70 <__ieee754_expf+0x1c4>)
 8016d4e:	f7e9 feef 	bl	8000b30 <__aeabi_fsub>
 8016d52:	4631      	mov	r1, r6
 8016d54:	f7e9 fff6 	bl	8000d44 <__aeabi_fmul>
 8016d58:	4946      	ldr	r1, [pc, #280]	; (8016e74 <__ieee754_expf+0x1c8>)
 8016d5a:	f7e9 feeb 	bl	8000b34 <__addsf3>
 8016d5e:	4631      	mov	r1, r6
 8016d60:	f7e9 fff0 	bl	8000d44 <__aeabi_fmul>
 8016d64:	4601      	mov	r1, r0
 8016d66:	4620      	mov	r0, r4
 8016d68:	f7e9 fee2 	bl	8000b30 <__aeabi_fsub>
 8016d6c:	4601      	mov	r1, r0
 8016d6e:	4606      	mov	r6, r0
 8016d70:	4620      	mov	r0, r4
 8016d72:	f7e9 ffe7 	bl	8000d44 <__aeabi_fmul>
 8016d76:	4681      	mov	r9, r0
 8016d78:	2d00      	cmp	r5, #0
 8016d7a:	d142      	bne.n	8016e02 <__ieee754_expf+0x156>
 8016d7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8016d80:	4630      	mov	r0, r6
 8016d82:	f7e9 fed5 	bl	8000b30 <__aeabi_fsub>
 8016d86:	4601      	mov	r1, r0
 8016d88:	4648      	mov	r0, r9
 8016d8a:	f7ea f88f 	bl	8000eac <__aeabi_fdiv>
 8016d8e:	4621      	mov	r1, r4
 8016d90:	f7e9 fece 	bl	8000b30 <__aeabi_fsub>
 8016d94:	4601      	mov	r1, r0
 8016d96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016d9a:	f7e9 fec9 	bl	8000b30 <__aeabi_fsub>
 8016d9e:	e790      	b.n	8016cc2 <__ieee754_expf+0x16>
 8016da0:	4935      	ldr	r1, [pc, #212]	; (8016e78 <__ieee754_expf+0x1cc>)
 8016da2:	4620      	mov	r0, r4
 8016da4:	f7e9 ffce 	bl	8000d44 <__aeabi_fmul>
 8016da8:	4b34      	ldr	r3, [pc, #208]	; (8016e7c <__ieee754_expf+0x1d0>)
 8016daa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8016dae:	f7e9 fec1 	bl	8000b34 <__addsf3>
 8016db2:	f7ea f98d 	bl	80010d0 <__aeabi_f2iz>
 8016db6:	4605      	mov	r5, r0
 8016db8:	f7e9 ff70 	bl	8000c9c <__aeabi_i2f>
 8016dbc:	4930      	ldr	r1, [pc, #192]	; (8016e80 <__ieee754_expf+0x1d4>)
 8016dbe:	4606      	mov	r6, r0
 8016dc0:	f7e9 ffc0 	bl	8000d44 <__aeabi_fmul>
 8016dc4:	4601      	mov	r1, r0
 8016dc6:	4620      	mov	r0, r4
 8016dc8:	f7e9 feb2 	bl	8000b30 <__aeabi_fsub>
 8016dcc:	492d      	ldr	r1, [pc, #180]	; (8016e84 <__ieee754_expf+0x1d8>)
 8016dce:	4607      	mov	r7, r0
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	f7e9 ffb7 	bl	8000d44 <__aeabi_fmul>
 8016dd6:	4680      	mov	r8, r0
 8016dd8:	e79f      	b.n	8016d1a <__ieee754_expf+0x6e>
 8016dda:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8016dde:	d20c      	bcs.n	8016dfa <__ieee754_expf+0x14e>
 8016de0:	491a      	ldr	r1, [pc, #104]	; (8016e4c <__ieee754_expf+0x1a0>)
 8016de2:	4620      	mov	r0, r4
 8016de4:	f7e9 fea6 	bl	8000b34 <__addsf3>
 8016de8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8016dec:	f7ea f966 	bl	80010bc <__aeabi_fcmpgt>
 8016df0:	b128      	cbz	r0, 8016dfe <__ieee754_expf+0x152>
 8016df2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8016df6:	4620      	mov	r0, r4
 8016df8:	e761      	b.n	8016cbe <__ieee754_expf+0x12>
 8016dfa:	2500      	movs	r5, #0
 8016dfc:	e792      	b.n	8016d24 <__ieee754_expf+0x78>
 8016dfe:	4605      	mov	r5, r0
 8016e00:	e790      	b.n	8016d24 <__ieee754_expf+0x78>
 8016e02:	4631      	mov	r1, r6
 8016e04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8016e08:	f7e9 fe92 	bl	8000b30 <__aeabi_fsub>
 8016e0c:	4601      	mov	r1, r0
 8016e0e:	4648      	mov	r0, r9
 8016e10:	f7ea f84c 	bl	8000eac <__aeabi_fdiv>
 8016e14:	4601      	mov	r1, r0
 8016e16:	4640      	mov	r0, r8
 8016e18:	f7e9 fe8a 	bl	8000b30 <__aeabi_fsub>
 8016e1c:	4639      	mov	r1, r7
 8016e1e:	f7e9 fe87 	bl	8000b30 <__aeabi_fsub>
 8016e22:	4601      	mov	r1, r0
 8016e24:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016e28:	f7e9 fe82 	bl	8000b30 <__aeabi_fsub>
 8016e2c:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
 8016e30:	db02      	blt.n	8016e38 <__ieee754_expf+0x18c>
 8016e32:	eb00 54c5 	add.w	r4, r0, r5, lsl #23
 8016e36:	e74c      	b.n	8016cd2 <__ieee754_expf+0x26>
 8016e38:	3564      	adds	r5, #100	; 0x64
 8016e3a:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
 8016e3e:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
 8016e42:	e74e      	b.n	8016ce2 <__ieee754_expf+0x36>
 8016e44:	2400      	movs	r4, #0
 8016e46:	e744      	b.n	8016cd2 <__ieee754_expf+0x26>
 8016e48:	42b17217 	.word	0x42b17217
 8016e4c:	7149f2ca 	.word	0x7149f2ca
 8016e50:	42cff1b5 	.word	0x42cff1b5
 8016e54:	3eb17218 	.word	0x3eb17218
 8016e58:	3f851591 	.word	0x3f851591
 8016e5c:	08018ea0 	.word	0x08018ea0
 8016e60:	08018ea8 	.word	0x08018ea8
 8016e64:	3331bb4c 	.word	0x3331bb4c
 8016e68:	35ddea0e 	.word	0x35ddea0e
 8016e6c:	388ab355 	.word	0x388ab355
 8016e70:	3b360b61 	.word	0x3b360b61
 8016e74:	3e2aaaab 	.word	0x3e2aaaab
 8016e78:	3fb8aa3b 	.word	0x3fb8aa3b
 8016e7c:	08018e98 	.word	0x08018e98
 8016e80:	3f317180 	.word	0x3f317180
 8016e84:	3717f7d1 	.word	0x3717f7d1

08016e88 <__ieee754_rem_pio2f>:
 8016e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e8c:	4a9d      	ldr	r2, [pc, #628]	; (8017104 <__ieee754_rem_pio2f+0x27c>)
 8016e8e:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8016e92:	4295      	cmp	r5, r2
 8016e94:	b087      	sub	sp, #28
 8016e96:	460c      	mov	r4, r1
 8016e98:	4607      	mov	r7, r0
 8016e9a:	dc04      	bgt.n	8016ea6 <__ieee754_rem_pio2f+0x1e>
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	6020      	str	r0, [r4, #0]
 8016ea0:	604b      	str	r3, [r1, #4]
 8016ea2:	2600      	movs	r6, #0
 8016ea4:	e01a      	b.n	8016edc <__ieee754_rem_pio2f+0x54>
 8016ea6:	4a98      	ldr	r2, [pc, #608]	; (8017108 <__ieee754_rem_pio2f+0x280>)
 8016ea8:	4295      	cmp	r5, r2
 8016eaa:	dc4b      	bgt.n	8016f44 <__ieee754_rem_pio2f+0xbc>
 8016eac:	2800      	cmp	r0, #0
 8016eae:	f025 050f 	bic.w	r5, r5, #15
 8016eb2:	4996      	ldr	r1, [pc, #600]	; (801710c <__ieee754_rem_pio2f+0x284>)
 8016eb4:	4e96      	ldr	r6, [pc, #600]	; (8017110 <__ieee754_rem_pio2f+0x288>)
 8016eb6:	dd23      	ble.n	8016f00 <__ieee754_rem_pio2f+0x78>
 8016eb8:	f7e9 fe3a 	bl	8000b30 <__aeabi_fsub>
 8016ebc:	42b5      	cmp	r5, r6
 8016ebe:	4607      	mov	r7, r0
 8016ec0:	d010      	beq.n	8016ee4 <__ieee754_rem_pio2f+0x5c>
 8016ec2:	4994      	ldr	r1, [pc, #592]	; (8017114 <__ieee754_rem_pio2f+0x28c>)
 8016ec4:	f7e9 fe34 	bl	8000b30 <__aeabi_fsub>
 8016ec8:	4601      	mov	r1, r0
 8016eca:	6020      	str	r0, [r4, #0]
 8016ecc:	4638      	mov	r0, r7
 8016ece:	f7e9 fe2f 	bl	8000b30 <__aeabi_fsub>
 8016ed2:	4990      	ldr	r1, [pc, #576]	; (8017114 <__ieee754_rem_pio2f+0x28c>)
 8016ed4:	f7e9 fe2c 	bl	8000b30 <__aeabi_fsub>
 8016ed8:	2601      	movs	r6, #1
 8016eda:	6060      	str	r0, [r4, #4]
 8016edc:	4630      	mov	r0, r6
 8016ede:	b007      	add	sp, #28
 8016ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee4:	498c      	ldr	r1, [pc, #560]	; (8017118 <__ieee754_rem_pio2f+0x290>)
 8016ee6:	f7e9 fe23 	bl	8000b30 <__aeabi_fsub>
 8016eea:	498c      	ldr	r1, [pc, #560]	; (801711c <__ieee754_rem_pio2f+0x294>)
 8016eec:	4605      	mov	r5, r0
 8016eee:	f7e9 fe1f 	bl	8000b30 <__aeabi_fsub>
 8016ef2:	4601      	mov	r1, r0
 8016ef4:	6020      	str	r0, [r4, #0]
 8016ef6:	4628      	mov	r0, r5
 8016ef8:	f7e9 fe1a 	bl	8000b30 <__aeabi_fsub>
 8016efc:	4987      	ldr	r1, [pc, #540]	; (801711c <__ieee754_rem_pio2f+0x294>)
 8016efe:	e7e9      	b.n	8016ed4 <__ieee754_rem_pio2f+0x4c>
 8016f00:	f7e9 fe18 	bl	8000b34 <__addsf3>
 8016f04:	42b5      	cmp	r5, r6
 8016f06:	4607      	mov	r7, r0
 8016f08:	d00e      	beq.n	8016f28 <__ieee754_rem_pio2f+0xa0>
 8016f0a:	4982      	ldr	r1, [pc, #520]	; (8017114 <__ieee754_rem_pio2f+0x28c>)
 8016f0c:	f7e9 fe12 	bl	8000b34 <__addsf3>
 8016f10:	4601      	mov	r1, r0
 8016f12:	6020      	str	r0, [r4, #0]
 8016f14:	4638      	mov	r0, r7
 8016f16:	f7e9 fe0b 	bl	8000b30 <__aeabi_fsub>
 8016f1a:	497e      	ldr	r1, [pc, #504]	; (8017114 <__ieee754_rem_pio2f+0x28c>)
 8016f1c:	f7e9 fe0a 	bl	8000b34 <__addsf3>
 8016f20:	f04f 36ff 	mov.w	r6, #4294967295
 8016f24:	6060      	str	r0, [r4, #4]
 8016f26:	e7d9      	b.n	8016edc <__ieee754_rem_pio2f+0x54>
 8016f28:	497b      	ldr	r1, [pc, #492]	; (8017118 <__ieee754_rem_pio2f+0x290>)
 8016f2a:	f7e9 fe03 	bl	8000b34 <__addsf3>
 8016f2e:	497b      	ldr	r1, [pc, #492]	; (801711c <__ieee754_rem_pio2f+0x294>)
 8016f30:	4605      	mov	r5, r0
 8016f32:	f7e9 fdff 	bl	8000b34 <__addsf3>
 8016f36:	4601      	mov	r1, r0
 8016f38:	6020      	str	r0, [r4, #0]
 8016f3a:	4628      	mov	r0, r5
 8016f3c:	f7e9 fdf8 	bl	8000b30 <__aeabi_fsub>
 8016f40:	4976      	ldr	r1, [pc, #472]	; (801711c <__ieee754_rem_pio2f+0x294>)
 8016f42:	e7eb      	b.n	8016f1c <__ieee754_rem_pio2f+0x94>
 8016f44:	4a76      	ldr	r2, [pc, #472]	; (8017120 <__ieee754_rem_pio2f+0x298>)
 8016f46:	4295      	cmp	r5, r2
 8016f48:	f300 808c 	bgt.w	8017064 <__ieee754_rem_pio2f+0x1dc>
 8016f4c:	f000 fd92 	bl	8017a74 <fabsf>
 8016f50:	4974      	ldr	r1, [pc, #464]	; (8017124 <__ieee754_rem_pio2f+0x29c>)
 8016f52:	4680      	mov	r8, r0
 8016f54:	f7e9 fef6 	bl	8000d44 <__aeabi_fmul>
 8016f58:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8016f5c:	f7e9 fdea 	bl	8000b34 <__addsf3>
 8016f60:	f7ea f8b6 	bl	80010d0 <__aeabi_f2iz>
 8016f64:	4606      	mov	r6, r0
 8016f66:	f7e9 fe99 	bl	8000c9c <__aeabi_i2f>
 8016f6a:	4968      	ldr	r1, [pc, #416]	; (801710c <__ieee754_rem_pio2f+0x284>)
 8016f6c:	4682      	mov	sl, r0
 8016f6e:	f7e9 fee9 	bl	8000d44 <__aeabi_fmul>
 8016f72:	4601      	mov	r1, r0
 8016f74:	4640      	mov	r0, r8
 8016f76:	f7e9 fddb 	bl	8000b30 <__aeabi_fsub>
 8016f7a:	4966      	ldr	r1, [pc, #408]	; (8017114 <__ieee754_rem_pio2f+0x28c>)
 8016f7c:	4680      	mov	r8, r0
 8016f7e:	4650      	mov	r0, sl
 8016f80:	f7e9 fee0 	bl	8000d44 <__aeabi_fmul>
 8016f84:	2e1f      	cmp	r6, #31
 8016f86:	4681      	mov	r9, r0
 8016f88:	dc0c      	bgt.n	8016fa4 <__ieee754_rem_pio2f+0x11c>
 8016f8a:	4a67      	ldr	r2, [pc, #412]	; (8017128 <__ieee754_rem_pio2f+0x2a0>)
 8016f8c:	1e71      	subs	r1, r6, #1
 8016f8e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016f92:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8016f96:	4293      	cmp	r3, r2
 8016f98:	d004      	beq.n	8016fa4 <__ieee754_rem_pio2f+0x11c>
 8016f9a:	4649      	mov	r1, r9
 8016f9c:	4640      	mov	r0, r8
 8016f9e:	f7e9 fdc7 	bl	8000b30 <__aeabi_fsub>
 8016fa2:	e009      	b.n	8016fb8 <__ieee754_rem_pio2f+0x130>
 8016fa4:	4649      	mov	r1, r9
 8016fa6:	4640      	mov	r0, r8
 8016fa8:	f7e9 fdc2 	bl	8000b30 <__aeabi_fsub>
 8016fac:	15ed      	asrs	r5, r5, #23
 8016fae:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016fb2:	1aeb      	subs	r3, r5, r3
 8016fb4:	2b08      	cmp	r3, #8
 8016fb6:	dc01      	bgt.n	8016fbc <__ieee754_rem_pio2f+0x134>
 8016fb8:	6020      	str	r0, [r4, #0]
 8016fba:	e024      	b.n	8017006 <__ieee754_rem_pio2f+0x17e>
 8016fbc:	4956      	ldr	r1, [pc, #344]	; (8017118 <__ieee754_rem_pio2f+0x290>)
 8016fbe:	4650      	mov	r0, sl
 8016fc0:	f7e9 fec0 	bl	8000d44 <__aeabi_fmul>
 8016fc4:	4681      	mov	r9, r0
 8016fc6:	4601      	mov	r1, r0
 8016fc8:	4640      	mov	r0, r8
 8016fca:	f7e9 fdb1 	bl	8000b30 <__aeabi_fsub>
 8016fce:	4601      	mov	r1, r0
 8016fd0:	4683      	mov	fp, r0
 8016fd2:	4640      	mov	r0, r8
 8016fd4:	f7e9 fdac 	bl	8000b30 <__aeabi_fsub>
 8016fd8:	4649      	mov	r1, r9
 8016fda:	f7e9 fda9 	bl	8000b30 <__aeabi_fsub>
 8016fde:	4680      	mov	r8, r0
 8016fe0:	494e      	ldr	r1, [pc, #312]	; (801711c <__ieee754_rem_pio2f+0x294>)
 8016fe2:	4650      	mov	r0, sl
 8016fe4:	f7e9 feae 	bl	8000d44 <__aeabi_fmul>
 8016fe8:	4641      	mov	r1, r8
 8016fea:	f7e9 fda1 	bl	8000b30 <__aeabi_fsub>
 8016fee:	4601      	mov	r1, r0
 8016ff0:	4681      	mov	r9, r0
 8016ff2:	4658      	mov	r0, fp
 8016ff4:	f7e9 fd9c 	bl	8000b30 <__aeabi_fsub>
 8016ff8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016ffc:	1aed      	subs	r5, r5, r3
 8016ffe:	2d19      	cmp	r5, #25
 8017000:	dc15      	bgt.n	801702e <__ieee754_rem_pio2f+0x1a6>
 8017002:	46d8      	mov	r8, fp
 8017004:	6020      	str	r0, [r4, #0]
 8017006:	6825      	ldr	r5, [r4, #0]
 8017008:	4640      	mov	r0, r8
 801700a:	4629      	mov	r1, r5
 801700c:	f7e9 fd90 	bl	8000b30 <__aeabi_fsub>
 8017010:	4649      	mov	r1, r9
 8017012:	f7e9 fd8d 	bl	8000b30 <__aeabi_fsub>
 8017016:	2f00      	cmp	r7, #0
 8017018:	6060      	str	r0, [r4, #4]
 801701a:	f6bf af5f 	bge.w	8016edc <__ieee754_rem_pio2f+0x54>
 801701e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8017022:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8017026:	6025      	str	r5, [r4, #0]
 8017028:	6060      	str	r0, [r4, #4]
 801702a:	4276      	negs	r6, r6
 801702c:	e756      	b.n	8016edc <__ieee754_rem_pio2f+0x54>
 801702e:	493f      	ldr	r1, [pc, #252]	; (801712c <__ieee754_rem_pio2f+0x2a4>)
 8017030:	4650      	mov	r0, sl
 8017032:	f7e9 fe87 	bl	8000d44 <__aeabi_fmul>
 8017036:	4605      	mov	r5, r0
 8017038:	4601      	mov	r1, r0
 801703a:	4658      	mov	r0, fp
 801703c:	f7e9 fd78 	bl	8000b30 <__aeabi_fsub>
 8017040:	4601      	mov	r1, r0
 8017042:	4680      	mov	r8, r0
 8017044:	4658      	mov	r0, fp
 8017046:	f7e9 fd73 	bl	8000b30 <__aeabi_fsub>
 801704a:	4629      	mov	r1, r5
 801704c:	f7e9 fd70 	bl	8000b30 <__aeabi_fsub>
 8017050:	4605      	mov	r5, r0
 8017052:	4937      	ldr	r1, [pc, #220]	; (8017130 <__ieee754_rem_pio2f+0x2a8>)
 8017054:	4650      	mov	r0, sl
 8017056:	f7e9 fe75 	bl	8000d44 <__aeabi_fmul>
 801705a:	4629      	mov	r1, r5
 801705c:	f7e9 fd68 	bl	8000b30 <__aeabi_fsub>
 8017060:	4681      	mov	r9, r0
 8017062:	e79a      	b.n	8016f9a <__ieee754_rem_pio2f+0x112>
 8017064:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8017068:	db05      	blt.n	8017076 <__ieee754_rem_pio2f+0x1ee>
 801706a:	4601      	mov	r1, r0
 801706c:	f7e9 fd60 	bl	8000b30 <__aeabi_fsub>
 8017070:	6060      	str	r0, [r4, #4]
 8017072:	6020      	str	r0, [r4, #0]
 8017074:	e715      	b.n	8016ea2 <__ieee754_rem_pio2f+0x1a>
 8017076:	15ee      	asrs	r6, r5, #23
 8017078:	3e86      	subs	r6, #134	; 0x86
 801707a:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 801707e:	4628      	mov	r0, r5
 8017080:	f7ea f826 	bl	80010d0 <__aeabi_f2iz>
 8017084:	f7e9 fe0a 	bl	8000c9c <__aeabi_i2f>
 8017088:	4601      	mov	r1, r0
 801708a:	9003      	str	r0, [sp, #12]
 801708c:	4628      	mov	r0, r5
 801708e:	f7e9 fd4f 	bl	8000b30 <__aeabi_fsub>
 8017092:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017096:	f7e9 fe55 	bl	8000d44 <__aeabi_fmul>
 801709a:	4680      	mov	r8, r0
 801709c:	f7ea f818 	bl	80010d0 <__aeabi_f2iz>
 80170a0:	f7e9 fdfc 	bl	8000c9c <__aeabi_i2f>
 80170a4:	4601      	mov	r1, r0
 80170a6:	9004      	str	r0, [sp, #16]
 80170a8:	4605      	mov	r5, r0
 80170aa:	4640      	mov	r0, r8
 80170ac:	f7e9 fd40 	bl	8000b30 <__aeabi_fsub>
 80170b0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80170b4:	f7e9 fe46 	bl	8000d44 <__aeabi_fmul>
 80170b8:	2100      	movs	r1, #0
 80170ba:	9005      	str	r0, [sp, #20]
 80170bc:	f7e9 ffd6 	bl	800106c <__aeabi_fcmpeq>
 80170c0:	b1e8      	cbz	r0, 80170fe <__ieee754_rem_pio2f+0x276>
 80170c2:	2100      	movs	r1, #0
 80170c4:	4628      	mov	r0, r5
 80170c6:	f7e9 ffd1 	bl	800106c <__aeabi_fcmpeq>
 80170ca:	2800      	cmp	r0, #0
 80170cc:	bf14      	ite	ne
 80170ce:	2301      	movne	r3, #1
 80170d0:	2302      	moveq	r3, #2
 80170d2:	4a18      	ldr	r2, [pc, #96]	; (8017134 <__ieee754_rem_pio2f+0x2ac>)
 80170d4:	4621      	mov	r1, r4
 80170d6:	9201      	str	r2, [sp, #4]
 80170d8:	2202      	movs	r2, #2
 80170da:	a803      	add	r0, sp, #12
 80170dc:	9200      	str	r2, [sp, #0]
 80170de:	4632      	mov	r2, r6
 80170e0:	f000 f8aa 	bl	8017238 <__kernel_rem_pio2f>
 80170e4:	2f00      	cmp	r7, #0
 80170e6:	4606      	mov	r6, r0
 80170e8:	f6bf aef8 	bge.w	8016edc <__ieee754_rem_pio2f+0x54>
 80170ec:	6823      	ldr	r3, [r4, #0]
 80170ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80170f2:	6023      	str	r3, [r4, #0]
 80170f4:	6863      	ldr	r3, [r4, #4]
 80170f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80170fa:	6063      	str	r3, [r4, #4]
 80170fc:	e795      	b.n	801702a <__ieee754_rem_pio2f+0x1a2>
 80170fe:	2303      	movs	r3, #3
 8017100:	e7e7      	b.n	80170d2 <__ieee754_rem_pio2f+0x24a>
 8017102:	bf00      	nop
 8017104:	3f490fd8 	.word	0x3f490fd8
 8017108:	4016cbe3 	.word	0x4016cbe3
 801710c:	3fc90f80 	.word	0x3fc90f80
 8017110:	3fc90fd0 	.word	0x3fc90fd0
 8017114:	37354443 	.word	0x37354443
 8017118:	37354400 	.word	0x37354400
 801711c:	2e85a308 	.word	0x2e85a308
 8017120:	43490f80 	.word	0x43490f80
 8017124:	3f22f984 	.word	0x3f22f984
 8017128:	08018eb0 	.word	0x08018eb0
 801712c:	2e85a300 	.word	0x2e85a300
 8017130:	248d3132 	.word	0x248d3132
 8017134:	08018f30 	.word	0x08018f30

08017138 <__kernel_cosf>:
 8017138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801713c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8017140:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8017144:	4606      	mov	r6, r0
 8017146:	4688      	mov	r8, r1
 8017148:	da03      	bge.n	8017152 <__kernel_cosf+0x1a>
 801714a:	f7e9 ffc1 	bl	80010d0 <__aeabi_f2iz>
 801714e:	2800      	cmp	r0, #0
 8017150:	d05c      	beq.n	801720c <__kernel_cosf+0xd4>
 8017152:	4631      	mov	r1, r6
 8017154:	4630      	mov	r0, r6
 8017156:	f7e9 fdf5 	bl	8000d44 <__aeabi_fmul>
 801715a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801715e:	4605      	mov	r5, r0
 8017160:	f7e9 fdf0 	bl	8000d44 <__aeabi_fmul>
 8017164:	492b      	ldr	r1, [pc, #172]	; (8017214 <__kernel_cosf+0xdc>)
 8017166:	4607      	mov	r7, r0
 8017168:	4628      	mov	r0, r5
 801716a:	f7e9 fdeb 	bl	8000d44 <__aeabi_fmul>
 801716e:	492a      	ldr	r1, [pc, #168]	; (8017218 <__kernel_cosf+0xe0>)
 8017170:	f7e9 fce0 	bl	8000b34 <__addsf3>
 8017174:	4629      	mov	r1, r5
 8017176:	f7e9 fde5 	bl	8000d44 <__aeabi_fmul>
 801717a:	4928      	ldr	r1, [pc, #160]	; (801721c <__kernel_cosf+0xe4>)
 801717c:	f7e9 fcd8 	bl	8000b30 <__aeabi_fsub>
 8017180:	4629      	mov	r1, r5
 8017182:	f7e9 fddf 	bl	8000d44 <__aeabi_fmul>
 8017186:	4926      	ldr	r1, [pc, #152]	; (8017220 <__kernel_cosf+0xe8>)
 8017188:	f7e9 fcd4 	bl	8000b34 <__addsf3>
 801718c:	4629      	mov	r1, r5
 801718e:	f7e9 fdd9 	bl	8000d44 <__aeabi_fmul>
 8017192:	4924      	ldr	r1, [pc, #144]	; (8017224 <__kernel_cosf+0xec>)
 8017194:	f7e9 fccc 	bl	8000b30 <__aeabi_fsub>
 8017198:	4629      	mov	r1, r5
 801719a:	f7e9 fdd3 	bl	8000d44 <__aeabi_fmul>
 801719e:	4922      	ldr	r1, [pc, #136]	; (8017228 <__kernel_cosf+0xf0>)
 80171a0:	f7e9 fcc8 	bl	8000b34 <__addsf3>
 80171a4:	4629      	mov	r1, r5
 80171a6:	f7e9 fdcd 	bl	8000d44 <__aeabi_fmul>
 80171aa:	4629      	mov	r1, r5
 80171ac:	f7e9 fdca 	bl	8000d44 <__aeabi_fmul>
 80171b0:	4641      	mov	r1, r8
 80171b2:	4605      	mov	r5, r0
 80171b4:	4630      	mov	r0, r6
 80171b6:	f7e9 fdc5 	bl	8000d44 <__aeabi_fmul>
 80171ba:	4601      	mov	r1, r0
 80171bc:	4628      	mov	r0, r5
 80171be:	f7e9 fcb7 	bl	8000b30 <__aeabi_fsub>
 80171c2:	4b1a      	ldr	r3, [pc, #104]	; (801722c <__kernel_cosf+0xf4>)
 80171c4:	4605      	mov	r5, r0
 80171c6:	429c      	cmp	r4, r3
 80171c8:	dc0a      	bgt.n	80171e0 <__kernel_cosf+0xa8>
 80171ca:	4601      	mov	r1, r0
 80171cc:	4638      	mov	r0, r7
 80171ce:	f7e9 fcaf 	bl	8000b30 <__aeabi_fsub>
 80171d2:	4601      	mov	r1, r0
 80171d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80171d8:	f7e9 fcaa 	bl	8000b30 <__aeabi_fsub>
 80171dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171e0:	4b13      	ldr	r3, [pc, #76]	; (8017230 <__kernel_cosf+0xf8>)
 80171e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80171e6:	429c      	cmp	r4, r3
 80171e8:	bfcc      	ite	gt
 80171ea:	4c12      	ldrgt	r4, [pc, #72]	; (8017234 <__kernel_cosf+0xfc>)
 80171ec:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80171f0:	4621      	mov	r1, r4
 80171f2:	f7e9 fc9d 	bl	8000b30 <__aeabi_fsub>
 80171f6:	4621      	mov	r1, r4
 80171f8:	4606      	mov	r6, r0
 80171fa:	4638      	mov	r0, r7
 80171fc:	f7e9 fc98 	bl	8000b30 <__aeabi_fsub>
 8017200:	4629      	mov	r1, r5
 8017202:	f7e9 fc95 	bl	8000b30 <__aeabi_fsub>
 8017206:	4601      	mov	r1, r0
 8017208:	4630      	mov	r0, r6
 801720a:	e7e5      	b.n	80171d8 <__kernel_cosf+0xa0>
 801720c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017210:	e7e4      	b.n	80171dc <__kernel_cosf+0xa4>
 8017212:	bf00      	nop
 8017214:	ad47d74e 	.word	0xad47d74e
 8017218:	310f74f6 	.word	0x310f74f6
 801721c:	3493f27c 	.word	0x3493f27c
 8017220:	37d00d01 	.word	0x37d00d01
 8017224:	3ab60b61 	.word	0x3ab60b61
 8017228:	3d2aaaab 	.word	0x3d2aaaab
 801722c:	3e999999 	.word	0x3e999999
 8017230:	3f480000 	.word	0x3f480000
 8017234:	3e900000 	.word	0x3e900000

08017238 <__kernel_rem_pio2f>:
 8017238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801723c:	b0d9      	sub	sp, #356	; 0x164
 801723e:	9304      	str	r3, [sp, #16]
 8017240:	9101      	str	r1, [sp, #4]
 8017242:	4bc3      	ldr	r3, [pc, #780]	; (8017550 <__kernel_rem_pio2f+0x318>)
 8017244:	9962      	ldr	r1, [sp, #392]	; 0x188
 8017246:	1ed4      	subs	r4, r2, #3
 8017248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801724c:	2500      	movs	r5, #0
 801724e:	9302      	str	r3, [sp, #8]
 8017250:	9b04      	ldr	r3, [sp, #16]
 8017252:	f04f 0a00 	mov.w	sl, #0
 8017256:	3b01      	subs	r3, #1
 8017258:	9303      	str	r3, [sp, #12]
 801725a:	2308      	movs	r3, #8
 801725c:	fb94 f4f3 	sdiv	r4, r4, r3
 8017260:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8017264:	1c66      	adds	r6, r4, #1
 8017266:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 801726a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801726e:	eb03 0802 	add.w	r8, r3, r2
 8017272:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8017274:	1aa7      	subs	r7, r4, r2
 8017276:	9005      	str	r0, [sp, #20]
 8017278:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801727c:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8017280:	4545      	cmp	r5, r8
 8017282:	dd7f      	ble.n	8017384 <__kernel_rem_pio2f+0x14c>
 8017284:	f04f 0800 	mov.w	r8, #0
 8017288:	f04f 0a00 	mov.w	sl, #0
 801728c:	f06f 0b03 	mvn.w	fp, #3
 8017290:	9b04      	ldr	r3, [sp, #16]
 8017292:	aa1c      	add	r2, sp, #112	; 0x70
 8017294:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8017298:	ab44      	add	r3, sp, #272	; 0x110
 801729a:	9a02      	ldr	r2, [sp, #8]
 801729c:	4590      	cmp	r8, r2
 801729e:	f340 8097 	ble.w	80173d0 <__kernel_rem_pio2f+0x198>
 80172a2:	4613      	mov	r3, r2
 80172a4:	aa08      	add	r2, sp, #32
 80172a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80172aa:	9307      	str	r3, [sp, #28]
 80172ac:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80172ae:	9f02      	ldr	r7, [sp, #8]
 80172b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80172b4:	9306      	str	r3, [sp, #24]
 80172b6:	46ba      	mov	sl, r7
 80172b8:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 80172bc:	ab58      	add	r3, sp, #352	; 0x160
 80172be:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80172c2:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80172c6:	ad07      	add	r5, sp, #28
 80172c8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80172cc:	f1ba 0f00 	cmp.w	sl, #0
 80172d0:	f300 8081 	bgt.w	80173d6 <__kernel_rem_pio2f+0x19e>
 80172d4:	4631      	mov	r1, r6
 80172d6:	4620      	mov	r0, r4
 80172d8:	f000 fc18 	bl	8017b0c <scalbnf>
 80172dc:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80172e0:	4604      	mov	r4, r0
 80172e2:	f7e9 fd2f 	bl	8000d44 <__aeabi_fmul>
 80172e6:	f000 fbd1 	bl	8017a8c <floorf>
 80172ea:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80172ee:	f7e9 fd29 	bl	8000d44 <__aeabi_fmul>
 80172f2:	4601      	mov	r1, r0
 80172f4:	4620      	mov	r0, r4
 80172f6:	f7e9 fc1b 	bl	8000b30 <__aeabi_fsub>
 80172fa:	4604      	mov	r4, r0
 80172fc:	f7e9 fee8 	bl	80010d0 <__aeabi_f2iz>
 8017300:	4681      	mov	r9, r0
 8017302:	f7e9 fccb 	bl	8000c9c <__aeabi_i2f>
 8017306:	4601      	mov	r1, r0
 8017308:	4620      	mov	r0, r4
 801730a:	f7e9 fc11 	bl	8000b30 <__aeabi_fsub>
 801730e:	2e00      	cmp	r6, #0
 8017310:	4604      	mov	r4, r0
 8017312:	dd7e      	ble.n	8017412 <__kernel_rem_pio2f+0x1da>
 8017314:	1e7b      	subs	r3, r7, #1
 8017316:	aa08      	add	r2, sp, #32
 8017318:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 801731c:	f1c6 0208 	rsb	r2, r6, #8
 8017320:	fa45 f002 	asr.w	r0, r5, r2
 8017324:	4481      	add	r9, r0
 8017326:	4090      	lsls	r0, r2
 8017328:	1a2d      	subs	r5, r5, r0
 801732a:	aa08      	add	r2, sp, #32
 801732c:	f1c6 0007 	rsb	r0, r6, #7
 8017330:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8017334:	4105      	asrs	r5, r0
 8017336:	2d00      	cmp	r5, #0
 8017338:	dd79      	ble.n	801742e <__kernel_rem_pio2f+0x1f6>
 801733a:	2200      	movs	r2, #0
 801733c:	4690      	mov	r8, r2
 801733e:	f109 0901 	add.w	r9, r9, #1
 8017342:	4297      	cmp	r7, r2
 8017344:	f300 80ae 	bgt.w	80174a4 <__kernel_rem_pio2f+0x26c>
 8017348:	2e00      	cmp	r6, #0
 801734a:	dd05      	ble.n	8017358 <__kernel_rem_pio2f+0x120>
 801734c:	2e01      	cmp	r6, #1
 801734e:	f000 80c0 	beq.w	80174d2 <__kernel_rem_pio2f+0x29a>
 8017352:	2e02      	cmp	r6, #2
 8017354:	f000 80c7 	beq.w	80174e6 <__kernel_rem_pio2f+0x2ae>
 8017358:	2d02      	cmp	r5, #2
 801735a:	d168      	bne.n	801742e <__kernel_rem_pio2f+0x1f6>
 801735c:	4621      	mov	r1, r4
 801735e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017362:	f7e9 fbe5 	bl	8000b30 <__aeabi_fsub>
 8017366:	4604      	mov	r4, r0
 8017368:	f1b8 0f00 	cmp.w	r8, #0
 801736c:	d05f      	beq.n	801742e <__kernel_rem_pio2f+0x1f6>
 801736e:	4631      	mov	r1, r6
 8017370:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017374:	f000 fbca 	bl	8017b0c <scalbnf>
 8017378:	4601      	mov	r1, r0
 801737a:	4620      	mov	r0, r4
 801737c:	f7e9 fbd8 	bl	8000b30 <__aeabi_fsub>
 8017380:	4604      	mov	r4, r0
 8017382:	e054      	b.n	801742e <__kernel_rem_pio2f+0x1f6>
 8017384:	42ef      	cmn	r7, r5
 8017386:	d407      	bmi.n	8017398 <__kernel_rem_pio2f+0x160>
 8017388:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801738c:	f7e9 fc86 	bl	8000c9c <__aeabi_i2f>
 8017390:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8017394:	3501      	adds	r5, #1
 8017396:	e773      	b.n	8017280 <__kernel_rem_pio2f+0x48>
 8017398:	4650      	mov	r0, sl
 801739a:	e7f9      	b.n	8017390 <__kernel_rem_pio2f+0x158>
 801739c:	fb0b 5207 	mla	r2, fp, r7, r5
 80173a0:	9306      	str	r3, [sp, #24]
 80173a2:	9b05      	ldr	r3, [sp, #20]
 80173a4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80173a8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80173ac:	f7e9 fcca 	bl	8000d44 <__aeabi_fmul>
 80173b0:	4601      	mov	r1, r0
 80173b2:	4648      	mov	r0, r9
 80173b4:	f7e9 fbbe 	bl	8000b34 <__addsf3>
 80173b8:	4681      	mov	r9, r0
 80173ba:	9b06      	ldr	r3, [sp, #24]
 80173bc:	3701      	adds	r7, #1
 80173be:	9a03      	ldr	r2, [sp, #12]
 80173c0:	4297      	cmp	r7, r2
 80173c2:	ddeb      	ble.n	801739c <__kernel_rem_pio2f+0x164>
 80173c4:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 80173c8:	3504      	adds	r5, #4
 80173ca:	f108 0801 	add.w	r8, r8, #1
 80173ce:	e764      	b.n	801729a <__kernel_rem_pio2f+0x62>
 80173d0:	46d1      	mov	r9, sl
 80173d2:	2700      	movs	r7, #0
 80173d4:	e7f3      	b.n	80173be <__kernel_rem_pio2f+0x186>
 80173d6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80173da:	4620      	mov	r0, r4
 80173dc:	f7e9 fcb2 	bl	8000d44 <__aeabi_fmul>
 80173e0:	f7e9 fe76 	bl	80010d0 <__aeabi_f2iz>
 80173e4:	f7e9 fc5a 	bl	8000c9c <__aeabi_i2f>
 80173e8:	4641      	mov	r1, r8
 80173ea:	4683      	mov	fp, r0
 80173ec:	f7e9 fcaa 	bl	8000d44 <__aeabi_fmul>
 80173f0:	4601      	mov	r1, r0
 80173f2:	4620      	mov	r0, r4
 80173f4:	f7e9 fb9c 	bl	8000b30 <__aeabi_fsub>
 80173f8:	f7e9 fe6a 	bl	80010d0 <__aeabi_f2iz>
 80173fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017400:	f845 0f04 	str.w	r0, [r5, #4]!
 8017404:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8017408:	4658      	mov	r0, fp
 801740a:	f7e9 fb93 	bl	8000b34 <__addsf3>
 801740e:	4604      	mov	r4, r0
 8017410:	e75c      	b.n	80172cc <__kernel_rem_pio2f+0x94>
 8017412:	d105      	bne.n	8017420 <__kernel_rem_pio2f+0x1e8>
 8017414:	1e7b      	subs	r3, r7, #1
 8017416:	aa08      	add	r2, sp, #32
 8017418:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 801741c:	122d      	asrs	r5, r5, #8
 801741e:	e78a      	b.n	8017336 <__kernel_rem_pio2f+0xfe>
 8017420:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017424:	f7e9 fe40 	bl	80010a8 <__aeabi_fcmpge>
 8017428:	2800      	cmp	r0, #0
 801742a:	d139      	bne.n	80174a0 <__kernel_rem_pio2f+0x268>
 801742c:	4605      	mov	r5, r0
 801742e:	2100      	movs	r1, #0
 8017430:	4620      	mov	r0, r4
 8017432:	f7e9 fe1b 	bl	800106c <__aeabi_fcmpeq>
 8017436:	2800      	cmp	r0, #0
 8017438:	f000 80a0 	beq.w	801757c <__kernel_rem_pio2f+0x344>
 801743c:	1e7c      	subs	r4, r7, #1
 801743e:	4623      	mov	r3, r4
 8017440:	2200      	movs	r2, #0
 8017442:	9902      	ldr	r1, [sp, #8]
 8017444:	428b      	cmp	r3, r1
 8017446:	da55      	bge.n	80174f4 <__kernel_rem_pio2f+0x2bc>
 8017448:	2a00      	cmp	r2, #0
 801744a:	d07e      	beq.n	801754a <__kernel_rem_pio2f+0x312>
 801744c:	ab08      	add	r3, sp, #32
 801744e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017452:	3e08      	subs	r6, #8
 8017454:	2b00      	cmp	r3, #0
 8017456:	f000 808f 	beq.w	8017578 <__kernel_rem_pio2f+0x340>
 801745a:	4631      	mov	r1, r6
 801745c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017460:	f000 fb54 	bl	8017b0c <scalbnf>
 8017464:	46a0      	mov	r8, r4
 8017466:	4682      	mov	sl, r0
 8017468:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 801746c:	af44      	add	r7, sp, #272	; 0x110
 801746e:	f1b8 0f00 	cmp.w	r8, #0
 8017472:	f280 80b5 	bge.w	80175e0 <__kernel_rem_pio2f+0x3a8>
 8017476:	f04f 0a00 	mov.w	sl, #0
 801747a:	2300      	movs	r3, #0
 801747c:	00a6      	lsls	r6, r4, #2
 801747e:	4a35      	ldr	r2, [pc, #212]	; (8017554 <__kernel_rem_pio2f+0x31c>)
 8017480:	4437      	add	r7, r6
 8017482:	eba4 010a 	sub.w	r1, r4, sl
 8017486:	2900      	cmp	r1, #0
 8017488:	f280 80db 	bge.w	8017642 <__kernel_rem_pio2f+0x40a>
 801748c:	9b62      	ldr	r3, [sp, #392]	; 0x188
 801748e:	2b03      	cmp	r3, #3
 8017490:	f200 80ff 	bhi.w	8017692 <__kernel_rem_pio2f+0x45a>
 8017494:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017498:	01200102 	.word	0x01200102
 801749c:	00d90120 	.word	0x00d90120
 80174a0:	2502      	movs	r5, #2
 80174a2:	e74a      	b.n	801733a <__kernel_rem_pio2f+0x102>
 80174a4:	ab08      	add	r3, sp, #32
 80174a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174aa:	f1b8 0f00 	cmp.w	r8, #0
 80174ae:	d109      	bne.n	80174c4 <__kernel_rem_pio2f+0x28c>
 80174b0:	b12b      	cbz	r3, 80174be <__kernel_rem_pio2f+0x286>
 80174b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80174b6:	a908      	add	r1, sp, #32
 80174b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80174bc:	2301      	movs	r3, #1
 80174be:	3201      	adds	r2, #1
 80174c0:	4698      	mov	r8, r3
 80174c2:	e73e      	b.n	8017342 <__kernel_rem_pio2f+0x10a>
 80174c4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80174c8:	a908      	add	r1, sp, #32
 80174ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80174ce:	4643      	mov	r3, r8
 80174d0:	e7f5      	b.n	80174be <__kernel_rem_pio2f+0x286>
 80174d2:	1e7a      	subs	r2, r7, #1
 80174d4:	ab08      	add	r3, sp, #32
 80174d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80174de:	a908      	add	r1, sp, #32
 80174e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80174e4:	e738      	b.n	8017358 <__kernel_rem_pio2f+0x120>
 80174e6:	1e7a      	subs	r2, r7, #1
 80174e8:	ab08      	add	r3, sp, #32
 80174ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174f2:	e7f4      	b.n	80174de <__kernel_rem_pio2f+0x2a6>
 80174f4:	a908      	add	r1, sp, #32
 80174f6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80174fa:	3b01      	subs	r3, #1
 80174fc:	430a      	orrs	r2, r1
 80174fe:	e7a0      	b.n	8017442 <__kernel_rem_pio2f+0x20a>
 8017500:	3301      	adds	r3, #1
 8017502:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8017506:	2900      	cmp	r1, #0
 8017508:	d0fa      	beq.n	8017500 <__kernel_rem_pio2f+0x2c8>
 801750a:	f06f 0803 	mvn.w	r8, #3
 801750e:	9a04      	ldr	r2, [sp, #16]
 8017510:	1c7d      	adds	r5, r7, #1
 8017512:	18bc      	adds	r4, r7, r2
 8017514:	aa1c      	add	r2, sp, #112	; 0x70
 8017516:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801751a:	441f      	add	r7, r3
 801751c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8017520:	42af      	cmp	r7, r5
 8017522:	f6ff aec8 	blt.w	80172b6 <__kernel_rem_pio2f+0x7e>
 8017526:	9b06      	ldr	r3, [sp, #24]
 8017528:	f04f 0a00 	mov.w	sl, #0
 801752c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017530:	f7e9 fbb4 	bl	8000c9c <__aeabi_i2f>
 8017534:	f04f 0b00 	mov.w	fp, #0
 8017538:	6020      	str	r0, [r4, #0]
 801753a:	9b03      	ldr	r3, [sp, #12]
 801753c:	459a      	cmp	sl, r3
 801753e:	dd0b      	ble.n	8017558 <__kernel_rem_pio2f+0x320>
 8017540:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8017544:	3404      	adds	r4, #4
 8017546:	3501      	adds	r5, #1
 8017548:	e7ea      	b.n	8017520 <__kernel_rem_pio2f+0x2e8>
 801754a:	9a07      	ldr	r2, [sp, #28]
 801754c:	2301      	movs	r3, #1
 801754e:	e7d8      	b.n	8017502 <__kernel_rem_pio2f+0x2ca>
 8017550:	08019274 	.word	0x08019274
 8017554:	08019248 	.word	0x08019248
 8017558:	fb08 f30a 	mul.w	r3, r8, sl
 801755c:	9a05      	ldr	r2, [sp, #20]
 801755e:	58e0      	ldr	r0, [r4, r3]
 8017560:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8017564:	f7e9 fbee 	bl	8000d44 <__aeabi_fmul>
 8017568:	4601      	mov	r1, r0
 801756a:	4658      	mov	r0, fp
 801756c:	f7e9 fae2 	bl	8000b34 <__addsf3>
 8017570:	f10a 0a01 	add.w	sl, sl, #1
 8017574:	4683      	mov	fp, r0
 8017576:	e7e0      	b.n	801753a <__kernel_rem_pio2f+0x302>
 8017578:	3c01      	subs	r4, #1
 801757a:	e767      	b.n	801744c <__kernel_rem_pio2f+0x214>
 801757c:	4271      	negs	r1, r6
 801757e:	4620      	mov	r0, r4
 8017580:	f000 fac4 	bl	8017b0c <scalbnf>
 8017584:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017588:	4604      	mov	r4, r0
 801758a:	f7e9 fd8d 	bl	80010a8 <__aeabi_fcmpge>
 801758e:	b1f8      	cbz	r0, 80175d0 <__kernel_rem_pio2f+0x398>
 8017590:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8017594:	4620      	mov	r0, r4
 8017596:	f7e9 fbd5 	bl	8000d44 <__aeabi_fmul>
 801759a:	f7e9 fd99 	bl	80010d0 <__aeabi_f2iz>
 801759e:	f7e9 fb7d 	bl	8000c9c <__aeabi_i2f>
 80175a2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80175a6:	4680      	mov	r8, r0
 80175a8:	f7e9 fbcc 	bl	8000d44 <__aeabi_fmul>
 80175ac:	4601      	mov	r1, r0
 80175ae:	4620      	mov	r0, r4
 80175b0:	f7e9 fabe 	bl	8000b30 <__aeabi_fsub>
 80175b4:	f7e9 fd8c 	bl	80010d0 <__aeabi_f2iz>
 80175b8:	ab08      	add	r3, sp, #32
 80175ba:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80175be:	4640      	mov	r0, r8
 80175c0:	f7e9 fd86 	bl	80010d0 <__aeabi_f2iz>
 80175c4:	1c7c      	adds	r4, r7, #1
 80175c6:	ab08      	add	r3, sp, #32
 80175c8:	3608      	adds	r6, #8
 80175ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80175ce:	e744      	b.n	801745a <__kernel_rem_pio2f+0x222>
 80175d0:	4620      	mov	r0, r4
 80175d2:	f7e9 fd7d 	bl	80010d0 <__aeabi_f2iz>
 80175d6:	ab08      	add	r3, sp, #32
 80175d8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80175dc:	463c      	mov	r4, r7
 80175de:	e73c      	b.n	801745a <__kernel_rem_pio2f+0x222>
 80175e0:	ab08      	add	r3, sp, #32
 80175e2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80175e6:	f7e9 fb59 	bl	8000c9c <__aeabi_i2f>
 80175ea:	4651      	mov	r1, sl
 80175ec:	f7e9 fbaa 	bl	8000d44 <__aeabi_fmul>
 80175f0:	4631      	mov	r1, r6
 80175f2:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 80175f6:	4650      	mov	r0, sl
 80175f8:	f7e9 fba4 	bl	8000d44 <__aeabi_fmul>
 80175fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8017600:	4682      	mov	sl, r0
 8017602:	e734      	b.n	801746e <__kernel_rem_pio2f+0x236>
 8017604:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8017608:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 801760c:	9304      	str	r3, [sp, #16]
 801760e:	9203      	str	r2, [sp, #12]
 8017610:	f7e9 fb98 	bl	8000d44 <__aeabi_fmul>
 8017614:	4601      	mov	r1, r0
 8017616:	4658      	mov	r0, fp
 8017618:	f7e9 fa8c 	bl	8000b34 <__addsf3>
 801761c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8017620:	4683      	mov	fp, r0
 8017622:	f108 0801 	add.w	r8, r8, #1
 8017626:	9902      	ldr	r1, [sp, #8]
 8017628:	4588      	cmp	r8, r1
 801762a:	dc01      	bgt.n	8017630 <__kernel_rem_pio2f+0x3f8>
 801762c:	45c2      	cmp	sl, r8
 801762e:	dae9      	bge.n	8017604 <__kernel_rem_pio2f+0x3cc>
 8017630:	a958      	add	r1, sp, #352	; 0x160
 8017632:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017636:	f841 bca0 	str.w	fp, [r1, #-160]
 801763a:	f10a 0a01 	add.w	sl, sl, #1
 801763e:	3f04      	subs	r7, #4
 8017640:	e71f      	b.n	8017482 <__kernel_rem_pio2f+0x24a>
 8017642:	469b      	mov	fp, r3
 8017644:	f04f 0800 	mov.w	r8, #0
 8017648:	e7ed      	b.n	8017626 <__kernel_rem_pio2f+0x3ee>
 801764a:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 801764e:	4456      	add	r6, sl
 8017650:	4637      	mov	r7, r6
 8017652:	46a0      	mov	r8, r4
 8017654:	f1b8 0f00 	cmp.w	r8, #0
 8017658:	dc4a      	bgt.n	80176f0 <__kernel_rem_pio2f+0x4b8>
 801765a:	4627      	mov	r7, r4
 801765c:	2f01      	cmp	r7, #1
 801765e:	dc60      	bgt.n	8017722 <__kernel_rem_pio2f+0x4ea>
 8017660:	2000      	movs	r0, #0
 8017662:	2c01      	cmp	r4, #1
 8017664:	dc74      	bgt.n	8017750 <__kernel_rem_pio2f+0x518>
 8017666:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8017668:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801766a:	2d00      	cmp	r5, #0
 801766c:	d176      	bne.n	801775c <__kernel_rem_pio2f+0x524>
 801766e:	9901      	ldr	r1, [sp, #4]
 8017670:	600a      	str	r2, [r1, #0]
 8017672:	460a      	mov	r2, r1
 8017674:	604b      	str	r3, [r1, #4]
 8017676:	6090      	str	r0, [r2, #8]
 8017678:	e00b      	b.n	8017692 <__kernel_rem_pio2f+0x45a>
 801767a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 801767e:	f7e9 fa59 	bl	8000b34 <__addsf3>
 8017682:	3c01      	subs	r4, #1
 8017684:	2c00      	cmp	r4, #0
 8017686:	daf8      	bge.n	801767a <__kernel_rem_pio2f+0x442>
 8017688:	b10d      	cbz	r5, 801768e <__kernel_rem_pio2f+0x456>
 801768a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801768e:	9b01      	ldr	r3, [sp, #4]
 8017690:	6018      	str	r0, [r3, #0]
 8017692:	f009 0007 	and.w	r0, r9, #7
 8017696:	b059      	add	sp, #356	; 0x164
 8017698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801769c:	2000      	movs	r0, #0
 801769e:	ae30      	add	r6, sp, #192	; 0xc0
 80176a0:	e7f0      	b.n	8017684 <__kernel_rem_pio2f+0x44c>
 80176a2:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80176a6:	f7e9 fa45 	bl	8000b34 <__addsf3>
 80176aa:	3e01      	subs	r6, #1
 80176ac:	2e00      	cmp	r6, #0
 80176ae:	daf8      	bge.n	80176a2 <__kernel_rem_pio2f+0x46a>
 80176b0:	b1b5      	cbz	r5, 80176e0 <__kernel_rem_pio2f+0x4a8>
 80176b2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80176b6:	9a01      	ldr	r2, [sp, #4]
 80176b8:	af58      	add	r7, sp, #352	; 0x160
 80176ba:	4601      	mov	r1, r0
 80176bc:	6013      	str	r3, [r2, #0]
 80176be:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 80176c2:	f7e9 fa35 	bl	8000b30 <__aeabi_fsub>
 80176c6:	2601      	movs	r6, #1
 80176c8:	42b4      	cmp	r4, r6
 80176ca:	da0b      	bge.n	80176e4 <__kernel_rem_pio2f+0x4ac>
 80176cc:	b10d      	cbz	r5, 80176d2 <__kernel_rem_pio2f+0x49a>
 80176ce:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80176d2:	9b01      	ldr	r3, [sp, #4]
 80176d4:	6058      	str	r0, [r3, #4]
 80176d6:	e7dc      	b.n	8017692 <__kernel_rem_pio2f+0x45a>
 80176d8:	4626      	mov	r6, r4
 80176da:	2000      	movs	r0, #0
 80176dc:	af30      	add	r7, sp, #192	; 0xc0
 80176de:	e7e5      	b.n	80176ac <__kernel_rem_pio2f+0x474>
 80176e0:	4603      	mov	r3, r0
 80176e2:	e7e8      	b.n	80176b6 <__kernel_rem_pio2f+0x47e>
 80176e4:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80176e8:	f7e9 fa24 	bl	8000b34 <__addsf3>
 80176ec:	3601      	adds	r6, #1
 80176ee:	e7eb      	b.n	80176c8 <__kernel_rem_pio2f+0x490>
 80176f0:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 80176f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	4610      	mov	r0, r2
 80176fc:	4619      	mov	r1, r3
 80176fe:	9303      	str	r3, [sp, #12]
 8017700:	9202      	str	r2, [sp, #8]
 8017702:	f7e9 fa17 	bl	8000b34 <__addsf3>
 8017706:	9a02      	ldr	r2, [sp, #8]
 8017708:	4601      	mov	r1, r0
 801770a:	4683      	mov	fp, r0
 801770c:	4610      	mov	r0, r2
 801770e:	f7e9 fa0f 	bl	8000b30 <__aeabi_fsub>
 8017712:	9b03      	ldr	r3, [sp, #12]
 8017714:	4619      	mov	r1, r3
 8017716:	f7e9 fa0d 	bl	8000b34 <__addsf3>
 801771a:	f8c7 b000 	str.w	fp, [r7]
 801771e:	6078      	str	r0, [r7, #4]
 8017720:	e798      	b.n	8017654 <__kernel_rem_pio2f+0x41c>
 8017722:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8017726:	3f01      	subs	r7, #1
 8017728:	f8d6 b004 	ldr.w	fp, [r6, #4]
 801772c:	4618      	mov	r0, r3
 801772e:	4659      	mov	r1, fp
 8017730:	9302      	str	r3, [sp, #8]
 8017732:	f7e9 f9ff 	bl	8000b34 <__addsf3>
 8017736:	9b02      	ldr	r3, [sp, #8]
 8017738:	4601      	mov	r1, r0
 801773a:	4680      	mov	r8, r0
 801773c:	4618      	mov	r0, r3
 801773e:	f7e9 f9f7 	bl	8000b30 <__aeabi_fsub>
 8017742:	4659      	mov	r1, fp
 8017744:	f7e9 f9f6 	bl	8000b34 <__addsf3>
 8017748:	f8c6 8000 	str.w	r8, [r6]
 801774c:	6070      	str	r0, [r6, #4]
 801774e:	e785      	b.n	801765c <__kernel_rem_pio2f+0x424>
 8017750:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8017754:	f7e9 f9ee 	bl	8000b34 <__addsf3>
 8017758:	3c01      	subs	r4, #1
 801775a:	e782      	b.n	8017662 <__kernel_rem_pio2f+0x42a>
 801775c:	9901      	ldr	r1, [sp, #4]
 801775e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8017762:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017766:	600a      	str	r2, [r1, #0]
 8017768:	604b      	str	r3, [r1, #4]
 801776a:	460a      	mov	r2, r1
 801776c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8017770:	e781      	b.n	8017676 <__kernel_rem_pio2f+0x43e>
 8017772:	bf00      	nop

08017774 <__kernel_sinf>:
 8017774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017778:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801777c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8017780:	4604      	mov	r4, r0
 8017782:	460f      	mov	r7, r1
 8017784:	4691      	mov	r9, r2
 8017786:	da03      	bge.n	8017790 <__kernel_sinf+0x1c>
 8017788:	f7e9 fca2 	bl	80010d0 <__aeabi_f2iz>
 801778c:	2800      	cmp	r0, #0
 801778e:	d035      	beq.n	80177fc <__kernel_sinf+0x88>
 8017790:	4621      	mov	r1, r4
 8017792:	4620      	mov	r0, r4
 8017794:	f7e9 fad6 	bl	8000d44 <__aeabi_fmul>
 8017798:	4605      	mov	r5, r0
 801779a:	4601      	mov	r1, r0
 801779c:	4620      	mov	r0, r4
 801779e:	f7e9 fad1 	bl	8000d44 <__aeabi_fmul>
 80177a2:	4929      	ldr	r1, [pc, #164]	; (8017848 <__kernel_sinf+0xd4>)
 80177a4:	4606      	mov	r6, r0
 80177a6:	4628      	mov	r0, r5
 80177a8:	f7e9 facc 	bl	8000d44 <__aeabi_fmul>
 80177ac:	4927      	ldr	r1, [pc, #156]	; (801784c <__kernel_sinf+0xd8>)
 80177ae:	f7e9 f9bf 	bl	8000b30 <__aeabi_fsub>
 80177b2:	4629      	mov	r1, r5
 80177b4:	f7e9 fac6 	bl	8000d44 <__aeabi_fmul>
 80177b8:	4925      	ldr	r1, [pc, #148]	; (8017850 <__kernel_sinf+0xdc>)
 80177ba:	f7e9 f9bb 	bl	8000b34 <__addsf3>
 80177be:	4629      	mov	r1, r5
 80177c0:	f7e9 fac0 	bl	8000d44 <__aeabi_fmul>
 80177c4:	4923      	ldr	r1, [pc, #140]	; (8017854 <__kernel_sinf+0xe0>)
 80177c6:	f7e9 f9b3 	bl	8000b30 <__aeabi_fsub>
 80177ca:	4629      	mov	r1, r5
 80177cc:	f7e9 faba 	bl	8000d44 <__aeabi_fmul>
 80177d0:	4921      	ldr	r1, [pc, #132]	; (8017858 <__kernel_sinf+0xe4>)
 80177d2:	f7e9 f9af 	bl	8000b34 <__addsf3>
 80177d6:	4680      	mov	r8, r0
 80177d8:	f1b9 0f00 	cmp.w	r9, #0
 80177dc:	d111      	bne.n	8017802 <__kernel_sinf+0x8e>
 80177de:	4601      	mov	r1, r0
 80177e0:	4628      	mov	r0, r5
 80177e2:	f7e9 faaf 	bl	8000d44 <__aeabi_fmul>
 80177e6:	491d      	ldr	r1, [pc, #116]	; (801785c <__kernel_sinf+0xe8>)
 80177e8:	f7e9 f9a2 	bl	8000b30 <__aeabi_fsub>
 80177ec:	4631      	mov	r1, r6
 80177ee:	f7e9 faa9 	bl	8000d44 <__aeabi_fmul>
 80177f2:	4601      	mov	r1, r0
 80177f4:	4620      	mov	r0, r4
 80177f6:	f7e9 f99d 	bl	8000b34 <__addsf3>
 80177fa:	4604      	mov	r4, r0
 80177fc:	4620      	mov	r0, r4
 80177fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017802:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017806:	4638      	mov	r0, r7
 8017808:	f7e9 fa9c 	bl	8000d44 <__aeabi_fmul>
 801780c:	4641      	mov	r1, r8
 801780e:	4681      	mov	r9, r0
 8017810:	4630      	mov	r0, r6
 8017812:	f7e9 fa97 	bl	8000d44 <__aeabi_fmul>
 8017816:	4601      	mov	r1, r0
 8017818:	4648      	mov	r0, r9
 801781a:	f7e9 f989 	bl	8000b30 <__aeabi_fsub>
 801781e:	4629      	mov	r1, r5
 8017820:	f7e9 fa90 	bl	8000d44 <__aeabi_fmul>
 8017824:	4639      	mov	r1, r7
 8017826:	f7e9 f983 	bl	8000b30 <__aeabi_fsub>
 801782a:	490c      	ldr	r1, [pc, #48]	; (801785c <__kernel_sinf+0xe8>)
 801782c:	4605      	mov	r5, r0
 801782e:	4630      	mov	r0, r6
 8017830:	f7e9 fa88 	bl	8000d44 <__aeabi_fmul>
 8017834:	4601      	mov	r1, r0
 8017836:	4628      	mov	r0, r5
 8017838:	f7e9 f97c 	bl	8000b34 <__addsf3>
 801783c:	4601      	mov	r1, r0
 801783e:	4620      	mov	r0, r4
 8017840:	f7e9 f976 	bl	8000b30 <__aeabi_fsub>
 8017844:	e7d9      	b.n	80177fa <__kernel_sinf+0x86>
 8017846:	bf00      	nop
 8017848:	2f2ec9d3 	.word	0x2f2ec9d3
 801784c:	32d72f34 	.word	0x32d72f34
 8017850:	3638ef1b 	.word	0x3638ef1b
 8017854:	39500d01 	.word	0x39500d01
 8017858:	3c088889 	.word	0x3c088889
 801785c:	3e2aaaab 	.word	0x3e2aaaab

08017860 <fabs>:
 8017860:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017864:	4619      	mov	r1, r3
 8017866:	4770      	bx	lr

08017868 <finite>:
 8017868:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 801786c:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8017870:	0fc0      	lsrs	r0, r0, #31
 8017872:	4770      	bx	lr

08017874 <matherr>:
 8017874:	2000      	movs	r0, #0
 8017876:	4770      	bx	lr

08017878 <nan>:
 8017878:	2000      	movs	r0, #0
 801787a:	4901      	ldr	r1, [pc, #4]	; (8017880 <nan+0x8>)
 801787c:	4770      	bx	lr
 801787e:	bf00      	nop
 8017880:	7ff80000 	.word	0x7ff80000

08017884 <rint>:
 8017884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017886:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801788a:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 801788e:	f1bc 0f13 	cmp.w	ip, #19
 8017892:	4604      	mov	r4, r0
 8017894:	460d      	mov	r5, r1
 8017896:	460b      	mov	r3, r1
 8017898:	4606      	mov	r6, r0
 801789a:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 801789e:	dc5a      	bgt.n	8017956 <rint+0xd2>
 80178a0:	f1bc 0f00 	cmp.w	ip, #0
 80178a4:	da2b      	bge.n	80178fe <rint+0x7a>
 80178a6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80178aa:	4302      	orrs	r2, r0
 80178ac:	d023      	beq.n	80178f6 <rint+0x72>
 80178ae:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80178b2:	4302      	orrs	r2, r0
 80178b4:	4256      	negs	r6, r2
 80178b6:	4316      	orrs	r6, r2
 80178b8:	0c4b      	lsrs	r3, r1, #17
 80178ba:	0b36      	lsrs	r6, r6, #12
 80178bc:	4934      	ldr	r1, [pc, #208]	; (8017990 <rint+0x10c>)
 80178be:	045b      	lsls	r3, r3, #17
 80178c0:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80178c4:	ea46 0503 	orr.w	r5, r6, r3
 80178c8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80178cc:	4602      	mov	r2, r0
 80178ce:	462b      	mov	r3, r5
 80178d0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80178d4:	4620      	mov	r0, r4
 80178d6:	4629      	mov	r1, r5
 80178d8:	f7e8 fc48 	bl	800016c <__adddf3>
 80178dc:	e9cd 0100 	strd	r0, r1, [sp]
 80178e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178e4:	462b      	mov	r3, r5
 80178e6:	4622      	mov	r2, r4
 80178e8:	f7e8 fc3e 	bl	8000168 <__aeabi_dsub>
 80178ec:	4604      	mov	r4, r0
 80178ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80178f2:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80178f6:	4620      	mov	r0, r4
 80178f8:	4629      	mov	r1, r5
 80178fa:	b003      	add	sp, #12
 80178fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178fe:	4a25      	ldr	r2, [pc, #148]	; (8017994 <rint+0x110>)
 8017900:	fa42 f20c 	asr.w	r2, r2, ip
 8017904:	4011      	ands	r1, r2
 8017906:	4301      	orrs	r1, r0
 8017908:	d0f5      	beq.n	80178f6 <rint+0x72>
 801790a:	0852      	lsrs	r2, r2, #1
 801790c:	ea05 0102 	and.w	r1, r5, r2
 8017910:	ea50 0601 	orrs.w	r6, r0, r1
 8017914:	d00c      	beq.n	8017930 <rint+0xac>
 8017916:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801791a:	f1bc 0f13 	cmp.w	ip, #19
 801791e:	bf0c      	ite	eq
 8017920:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8017924:	2600      	movne	r6, #0
 8017926:	ea25 0202 	bic.w	r2, r5, r2
 801792a:	fa43 f30c 	asr.w	r3, r3, ip
 801792e:	4313      	orrs	r3, r2
 8017930:	4917      	ldr	r1, [pc, #92]	; (8017990 <rint+0x10c>)
 8017932:	4632      	mov	r2, r6
 8017934:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8017938:	e9d7 4500 	ldrd	r4, r5, [r7]
 801793c:	4620      	mov	r0, r4
 801793e:	4629      	mov	r1, r5
 8017940:	f7e8 fc14 	bl	800016c <__adddf3>
 8017944:	e9cd 0100 	strd	r0, r1, [sp]
 8017948:	e9dd 0100 	ldrd	r0, r1, [sp]
 801794c:	4622      	mov	r2, r4
 801794e:	462b      	mov	r3, r5
 8017950:	f7e8 fc0a 	bl	8000168 <__aeabi_dsub>
 8017954:	e008      	b.n	8017968 <rint+0xe4>
 8017956:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 801795a:	dd08      	ble.n	801796e <rint+0xea>
 801795c:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8017960:	d1c9      	bne.n	80178f6 <rint+0x72>
 8017962:	4602      	mov	r2, r0
 8017964:	f7e8 fc02 	bl	800016c <__adddf3>
 8017968:	4604      	mov	r4, r0
 801796a:	460d      	mov	r5, r1
 801796c:	e7c3      	b.n	80178f6 <rint+0x72>
 801796e:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8017972:	f04f 32ff 	mov.w	r2, #4294967295
 8017976:	40ca      	lsrs	r2, r1
 8017978:	4210      	tst	r0, r2
 801797a:	d0bc      	beq.n	80178f6 <rint+0x72>
 801797c:	0852      	lsrs	r2, r2, #1
 801797e:	4210      	tst	r0, r2
 8017980:	bf1f      	itttt	ne
 8017982:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8017986:	ea20 0202 	bicne.w	r2, r0, r2
 801798a:	410e      	asrne	r6, r1
 801798c:	4316      	orrne	r6, r2
 801798e:	e7cf      	b.n	8017930 <rint+0xac>
 8017990:	08019280 	.word	0x08019280
 8017994:	000fffff 	.word	0x000fffff

08017998 <scalbn>:
 8017998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801799a:	4616      	mov	r6, r2
 801799c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80179a0:	4604      	mov	r4, r0
 80179a2:	460d      	mov	r5, r1
 80179a4:	460b      	mov	r3, r1
 80179a6:	b982      	cbnz	r2, 80179ca <scalbn+0x32>
 80179a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80179ac:	4303      	orrs	r3, r0
 80179ae:	d034      	beq.n	8017a1a <scalbn+0x82>
 80179b0:	4b2d      	ldr	r3, [pc, #180]	; (8017a68 <scalbn+0xd0>)
 80179b2:	2200      	movs	r2, #0
 80179b4:	f7e8 fd90 	bl	80004d8 <__aeabi_dmul>
 80179b8:	4b2c      	ldr	r3, [pc, #176]	; (8017a6c <scalbn+0xd4>)
 80179ba:	4604      	mov	r4, r0
 80179bc:	429e      	cmp	r6, r3
 80179be:	460d      	mov	r5, r1
 80179c0:	da0d      	bge.n	80179de <scalbn+0x46>
 80179c2:	a325      	add	r3, pc, #148	; (adr r3, 8017a58 <scalbn+0xc0>)
 80179c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179c8:	e01c      	b.n	8017a04 <scalbn+0x6c>
 80179ca:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80179ce:	42ba      	cmp	r2, r7
 80179d0:	d109      	bne.n	80179e6 <scalbn+0x4e>
 80179d2:	4602      	mov	r2, r0
 80179d4:	f7e8 fbca 	bl	800016c <__adddf3>
 80179d8:	4604      	mov	r4, r0
 80179da:	460d      	mov	r5, r1
 80179dc:	e01d      	b.n	8017a1a <scalbn+0x82>
 80179de:	460b      	mov	r3, r1
 80179e0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80179e4:	3a36      	subs	r2, #54	; 0x36
 80179e6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80179ea:	4432      	add	r2, r6
 80179ec:	428a      	cmp	r2, r1
 80179ee:	dd0c      	ble.n	8017a0a <scalbn+0x72>
 80179f0:	4622      	mov	r2, r4
 80179f2:	462b      	mov	r3, r5
 80179f4:	a11a      	add	r1, pc, #104	; (adr r1, 8017a60 <scalbn+0xc8>)
 80179f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179fa:	f000 f8d3 	bl	8017ba4 <copysign>
 80179fe:	a318      	add	r3, pc, #96	; (adr r3, 8017a60 <scalbn+0xc8>)
 8017a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a04:	f7e8 fd68 	bl	80004d8 <__aeabi_dmul>
 8017a08:	e7e6      	b.n	80179d8 <scalbn+0x40>
 8017a0a:	2a00      	cmp	r2, #0
 8017a0c:	dd08      	ble.n	8017a20 <scalbn+0x88>
 8017a0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017a12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017a16:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	4629      	mov	r1, r5
 8017a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a20:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017a24:	da0b      	bge.n	8017a3e <scalbn+0xa6>
 8017a26:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017a2a:	429e      	cmp	r6, r3
 8017a2c:	4622      	mov	r2, r4
 8017a2e:	462b      	mov	r3, r5
 8017a30:	dce0      	bgt.n	80179f4 <scalbn+0x5c>
 8017a32:	a109      	add	r1, pc, #36	; (adr r1, 8017a58 <scalbn+0xc0>)
 8017a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017a38:	f000 f8b4 	bl	8017ba4 <copysign>
 8017a3c:	e7c1      	b.n	80179c2 <scalbn+0x2a>
 8017a3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017a42:	3236      	adds	r2, #54	; 0x36
 8017a44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017a48:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	4629      	mov	r1, r5
 8017a50:	2200      	movs	r2, #0
 8017a52:	4b07      	ldr	r3, [pc, #28]	; (8017a70 <scalbn+0xd8>)
 8017a54:	e7d6      	b.n	8017a04 <scalbn+0x6c>
 8017a56:	bf00      	nop
 8017a58:	c2f8f359 	.word	0xc2f8f359
 8017a5c:	01a56e1f 	.word	0x01a56e1f
 8017a60:	8800759c 	.word	0x8800759c
 8017a64:	7e37e43c 	.word	0x7e37e43c
 8017a68:	43500000 	.word	0x43500000
 8017a6c:	ffff3cb0 	.word	0xffff3cb0
 8017a70:	3c900000 	.word	0x3c900000

08017a74 <fabsf>:
 8017a74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017a78:	4770      	bx	lr

08017a7a <finitef>:
 8017a7a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017a7e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017a82:	bfac      	ite	ge
 8017a84:	2000      	movge	r0, #0
 8017a86:	2001      	movlt	r0, #1
 8017a88:	4770      	bx	lr
	...

08017a8c <floorf>:
 8017a8c:	b570      	push	{r4, r5, r6, lr}
 8017a8e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8017a92:	0df5      	lsrs	r5, r6, #23
 8017a94:	3d7f      	subs	r5, #127	; 0x7f
 8017a96:	2d16      	cmp	r5, #22
 8017a98:	4601      	mov	r1, r0
 8017a9a:	4604      	mov	r4, r0
 8017a9c:	dc26      	bgt.n	8017aec <floorf+0x60>
 8017a9e:	2d00      	cmp	r5, #0
 8017aa0:	da0e      	bge.n	8017ac0 <floorf+0x34>
 8017aa2:	4917      	ldr	r1, [pc, #92]	; (8017b00 <floorf+0x74>)
 8017aa4:	f7e9 f846 	bl	8000b34 <__addsf3>
 8017aa8:	2100      	movs	r1, #0
 8017aaa:	f7e9 fb07 	bl	80010bc <__aeabi_fcmpgt>
 8017aae:	b128      	cbz	r0, 8017abc <floorf+0x30>
 8017ab0:	2c00      	cmp	r4, #0
 8017ab2:	da23      	bge.n	8017afc <floorf+0x70>
 8017ab4:	4b13      	ldr	r3, [pc, #76]	; (8017b04 <floorf+0x78>)
 8017ab6:	2e00      	cmp	r6, #0
 8017ab8:	bf18      	it	ne
 8017aba:	461c      	movne	r4, r3
 8017abc:	4621      	mov	r1, r4
 8017abe:	e01b      	b.n	8017af8 <floorf+0x6c>
 8017ac0:	4e11      	ldr	r6, [pc, #68]	; (8017b08 <floorf+0x7c>)
 8017ac2:	412e      	asrs	r6, r5
 8017ac4:	4230      	tst	r0, r6
 8017ac6:	d017      	beq.n	8017af8 <floorf+0x6c>
 8017ac8:	490d      	ldr	r1, [pc, #52]	; (8017b00 <floorf+0x74>)
 8017aca:	f7e9 f833 	bl	8000b34 <__addsf3>
 8017ace:	2100      	movs	r1, #0
 8017ad0:	f7e9 faf4 	bl	80010bc <__aeabi_fcmpgt>
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	d0f1      	beq.n	8017abc <floorf+0x30>
 8017ad8:	2c00      	cmp	r4, #0
 8017ada:	bfbe      	ittt	lt
 8017adc:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8017ae0:	fa43 f505 	asrlt.w	r5, r3, r5
 8017ae4:	1964      	addlt	r4, r4, r5
 8017ae6:	ea24 0406 	bic.w	r4, r4, r6
 8017aea:	e7e7      	b.n	8017abc <floorf+0x30>
 8017aec:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8017af0:	d302      	bcc.n	8017af8 <floorf+0x6c>
 8017af2:	f7e9 f81f 	bl	8000b34 <__addsf3>
 8017af6:	4601      	mov	r1, r0
 8017af8:	4608      	mov	r0, r1
 8017afa:	bd70      	pop	{r4, r5, r6, pc}
 8017afc:	2400      	movs	r4, #0
 8017afe:	e7dd      	b.n	8017abc <floorf+0x30>
 8017b00:	7149f2ca 	.word	0x7149f2ca
 8017b04:	bf800000 	.word	0xbf800000
 8017b08:	007fffff 	.word	0x007fffff

08017b0c <scalbnf>:
 8017b0c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8017b10:	b510      	push	{r4, lr}
 8017b12:	4602      	mov	r2, r0
 8017b14:	460c      	mov	r4, r1
 8017b16:	4601      	mov	r1, r0
 8017b18:	d027      	beq.n	8017b6a <scalbnf+0x5e>
 8017b1a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017b1e:	d303      	bcc.n	8017b28 <scalbnf+0x1c>
 8017b20:	f7e9 f808 	bl	8000b34 <__addsf3>
 8017b24:	4602      	mov	r2, r0
 8017b26:	e020      	b.n	8017b6a <scalbnf+0x5e>
 8017b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017b2c:	d215      	bcs.n	8017b5a <scalbnf+0x4e>
 8017b2e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8017b32:	f7e9 f907 	bl	8000d44 <__aeabi_fmul>
 8017b36:	4b18      	ldr	r3, [pc, #96]	; (8017b98 <scalbnf+0x8c>)
 8017b38:	4602      	mov	r2, r0
 8017b3a:	429c      	cmp	r4, r3
 8017b3c:	db22      	blt.n	8017b84 <scalbnf+0x78>
 8017b3e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017b42:	3b19      	subs	r3, #25
 8017b44:	4423      	add	r3, r4
 8017b46:	2bfe      	cmp	r3, #254	; 0xfe
 8017b48:	dd09      	ble.n	8017b5e <scalbnf+0x52>
 8017b4a:	4611      	mov	r1, r2
 8017b4c:	4813      	ldr	r0, [pc, #76]	; (8017b9c <scalbnf+0x90>)
 8017b4e:	f000 f832 	bl	8017bb6 <copysignf>
 8017b52:	4912      	ldr	r1, [pc, #72]	; (8017b9c <scalbnf+0x90>)
 8017b54:	f7e9 f8f6 	bl	8000d44 <__aeabi_fmul>
 8017b58:	e7e4      	b.n	8017b24 <scalbnf+0x18>
 8017b5a:	0ddb      	lsrs	r3, r3, #23
 8017b5c:	e7f2      	b.n	8017b44 <scalbnf+0x38>
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	dd05      	ble.n	8017b6e <scalbnf+0x62>
 8017b62:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8017b66:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8017b6a:	4610      	mov	r0, r2
 8017b6c:	bd10      	pop	{r4, pc}
 8017b6e:	f113 0f16 	cmn.w	r3, #22
 8017b72:	da09      	bge.n	8017b88 <scalbnf+0x7c>
 8017b74:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017b78:	429c      	cmp	r4, r3
 8017b7a:	4611      	mov	r1, r2
 8017b7c:	dce6      	bgt.n	8017b4c <scalbnf+0x40>
 8017b7e:	4808      	ldr	r0, [pc, #32]	; (8017ba0 <scalbnf+0x94>)
 8017b80:	f000 f819 	bl	8017bb6 <copysignf>
 8017b84:	4906      	ldr	r1, [pc, #24]	; (8017ba0 <scalbnf+0x94>)
 8017b86:	e7e5      	b.n	8017b54 <scalbnf+0x48>
 8017b88:	3319      	adds	r3, #25
 8017b8a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8017b8e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8017b92:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8017b96:	e7dd      	b.n	8017b54 <scalbnf+0x48>
 8017b98:	ffff3cb0 	.word	0xffff3cb0
 8017b9c:	7149f2ca 	.word	0x7149f2ca
 8017ba0:	0da24260 	.word	0x0da24260

08017ba4 <copysign>:
 8017ba4:	b530      	push	{r4, r5, lr}
 8017ba6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017bae:	ea42 0503 	orr.w	r5, r2, r3
 8017bb2:	4629      	mov	r1, r5
 8017bb4:	bd30      	pop	{r4, r5, pc}

08017bb6 <copysignf>:
 8017bb6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8017bba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017bbe:	4308      	orrs	r0, r1
 8017bc0:	4770      	bx	lr

08017bc2 <abort>:
 8017bc2:	b508      	push	{r3, lr}
 8017bc4:	2006      	movs	r0, #6
 8017bc6:	f000 f965 	bl	8017e94 <raise>
 8017bca:	2001      	movs	r0, #1
 8017bcc:	f7ea f9ab 	bl	8001f26 <_exit>

08017bd0 <__errno>:
 8017bd0:	4b01      	ldr	r3, [pc, #4]	; (8017bd8 <__errno+0x8>)
 8017bd2:	6818      	ldr	r0, [r3, #0]
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop
 8017bd8:	20000728 	.word	0x20000728

08017bdc <__libc_init_array>:
 8017bdc:	b570      	push	{r4, r5, r6, lr}
 8017bde:	2500      	movs	r5, #0
 8017be0:	4e0c      	ldr	r6, [pc, #48]	; (8017c14 <__libc_init_array+0x38>)
 8017be2:	4c0d      	ldr	r4, [pc, #52]	; (8017c18 <__libc_init_array+0x3c>)
 8017be4:	1ba4      	subs	r4, r4, r6
 8017be6:	10a4      	asrs	r4, r4, #2
 8017be8:	42a5      	cmp	r5, r4
 8017bea:	d109      	bne.n	8017c00 <__libc_init_array+0x24>
 8017bec:	f000 fd68 	bl	80186c0 <_init>
 8017bf0:	2500      	movs	r5, #0
 8017bf2:	4e0a      	ldr	r6, [pc, #40]	; (8017c1c <__libc_init_array+0x40>)
 8017bf4:	4c0a      	ldr	r4, [pc, #40]	; (8017c20 <__libc_init_array+0x44>)
 8017bf6:	1ba4      	subs	r4, r4, r6
 8017bf8:	10a4      	asrs	r4, r4, #2
 8017bfa:	42a5      	cmp	r5, r4
 8017bfc:	d105      	bne.n	8017c0a <__libc_init_array+0x2e>
 8017bfe:	bd70      	pop	{r4, r5, r6, pc}
 8017c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017c04:	4798      	blx	r3
 8017c06:	3501      	adds	r5, #1
 8017c08:	e7ee      	b.n	8017be8 <__libc_init_array+0xc>
 8017c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017c0e:	4798      	blx	r3
 8017c10:	3501      	adds	r5, #1
 8017c12:	e7f2      	b.n	8017bfa <__libc_init_array+0x1e>
 8017c14:	080193d0 	.word	0x080193d0
 8017c18:	080193d0 	.word	0x080193d0
 8017c1c:	080193d0 	.word	0x080193d0
 8017c20:	080193dc 	.word	0x080193dc

08017c24 <malloc>:
 8017c24:	4b02      	ldr	r3, [pc, #8]	; (8017c30 <malloc+0xc>)
 8017c26:	4601      	mov	r1, r0
 8017c28:	6818      	ldr	r0, [r3, #0]
 8017c2a:	f000 b8a1 	b.w	8017d70 <_malloc_r>
 8017c2e:	bf00      	nop
 8017c30:	20000728 	.word	0x20000728

08017c34 <free>:
 8017c34:	4b02      	ldr	r3, [pc, #8]	; (8017c40 <free+0xc>)
 8017c36:	4601      	mov	r1, r0
 8017c38:	6818      	ldr	r0, [r3, #0]
 8017c3a:	f000 b84d 	b.w	8017cd8 <_free_r>
 8017c3e:	bf00      	nop
 8017c40:	20000728 	.word	0x20000728

08017c44 <memchr>:
 8017c44:	b510      	push	{r4, lr}
 8017c46:	b2c9      	uxtb	r1, r1
 8017c48:	4402      	add	r2, r0
 8017c4a:	4290      	cmp	r0, r2
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	d101      	bne.n	8017c54 <memchr+0x10>
 8017c50:	2300      	movs	r3, #0
 8017c52:	e003      	b.n	8017c5c <memchr+0x18>
 8017c54:	781c      	ldrb	r4, [r3, #0]
 8017c56:	3001      	adds	r0, #1
 8017c58:	428c      	cmp	r4, r1
 8017c5a:	d1f6      	bne.n	8017c4a <memchr+0x6>
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	bd10      	pop	{r4, pc}

08017c60 <memcmp>:
 8017c60:	b530      	push	{r4, r5, lr}
 8017c62:	2400      	movs	r4, #0
 8017c64:	42a2      	cmp	r2, r4
 8017c66:	d101      	bne.n	8017c6c <memcmp+0xc>
 8017c68:	2000      	movs	r0, #0
 8017c6a:	e007      	b.n	8017c7c <memcmp+0x1c>
 8017c6c:	5d03      	ldrb	r3, [r0, r4]
 8017c6e:	3401      	adds	r4, #1
 8017c70:	190d      	adds	r5, r1, r4
 8017c72:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017c76:	42ab      	cmp	r3, r5
 8017c78:	d0f4      	beq.n	8017c64 <memcmp+0x4>
 8017c7a:	1b58      	subs	r0, r3, r5
 8017c7c:	bd30      	pop	{r4, r5, pc}

08017c7e <memcpy>:
 8017c7e:	b510      	push	{r4, lr}
 8017c80:	1e43      	subs	r3, r0, #1
 8017c82:	440a      	add	r2, r1
 8017c84:	4291      	cmp	r1, r2
 8017c86:	d100      	bne.n	8017c8a <memcpy+0xc>
 8017c88:	bd10      	pop	{r4, pc}
 8017c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c92:	e7f7      	b.n	8017c84 <memcpy+0x6>

08017c94 <memmove>:
 8017c94:	4288      	cmp	r0, r1
 8017c96:	b510      	push	{r4, lr}
 8017c98:	eb01 0302 	add.w	r3, r1, r2
 8017c9c:	d807      	bhi.n	8017cae <memmove+0x1a>
 8017c9e:	1e42      	subs	r2, r0, #1
 8017ca0:	4299      	cmp	r1, r3
 8017ca2:	d00a      	beq.n	8017cba <memmove+0x26>
 8017ca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ca8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017cac:	e7f8      	b.n	8017ca0 <memmove+0xc>
 8017cae:	4283      	cmp	r3, r0
 8017cb0:	d9f5      	bls.n	8017c9e <memmove+0xa>
 8017cb2:	1881      	adds	r1, r0, r2
 8017cb4:	1ad2      	subs	r2, r2, r3
 8017cb6:	42d3      	cmn	r3, r2
 8017cb8:	d100      	bne.n	8017cbc <memmove+0x28>
 8017cba:	bd10      	pop	{r4, pc}
 8017cbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017cc0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017cc4:	e7f7      	b.n	8017cb6 <memmove+0x22>

08017cc6 <memset>:
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	4402      	add	r2, r0
 8017cca:	4293      	cmp	r3, r2
 8017ccc:	d100      	bne.n	8017cd0 <memset+0xa>
 8017cce:	4770      	bx	lr
 8017cd0:	f803 1b01 	strb.w	r1, [r3], #1
 8017cd4:	e7f9      	b.n	8017cca <memset+0x4>
	...

08017cd8 <_free_r>:
 8017cd8:	b538      	push	{r3, r4, r5, lr}
 8017cda:	4605      	mov	r5, r0
 8017cdc:	2900      	cmp	r1, #0
 8017cde:	d043      	beq.n	8017d68 <_free_r+0x90>
 8017ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ce4:	1f0c      	subs	r4, r1, #4
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	bfb8      	it	lt
 8017cea:	18e4      	addlt	r4, r4, r3
 8017cec:	f000 f9cf 	bl	801808e <__malloc_lock>
 8017cf0:	4a1e      	ldr	r2, [pc, #120]	; (8017d6c <_free_r+0x94>)
 8017cf2:	6813      	ldr	r3, [r2, #0]
 8017cf4:	4610      	mov	r0, r2
 8017cf6:	b933      	cbnz	r3, 8017d06 <_free_r+0x2e>
 8017cf8:	6063      	str	r3, [r4, #4]
 8017cfa:	6014      	str	r4, [r2, #0]
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d02:	f000 b9c5 	b.w	8018090 <__malloc_unlock>
 8017d06:	42a3      	cmp	r3, r4
 8017d08:	d90b      	bls.n	8017d22 <_free_r+0x4a>
 8017d0a:	6821      	ldr	r1, [r4, #0]
 8017d0c:	1862      	adds	r2, r4, r1
 8017d0e:	4293      	cmp	r3, r2
 8017d10:	bf01      	itttt	eq
 8017d12:	681a      	ldreq	r2, [r3, #0]
 8017d14:	685b      	ldreq	r3, [r3, #4]
 8017d16:	1852      	addeq	r2, r2, r1
 8017d18:	6022      	streq	r2, [r4, #0]
 8017d1a:	6063      	str	r3, [r4, #4]
 8017d1c:	6004      	str	r4, [r0, #0]
 8017d1e:	e7ed      	b.n	8017cfc <_free_r+0x24>
 8017d20:	4613      	mov	r3, r2
 8017d22:	685a      	ldr	r2, [r3, #4]
 8017d24:	b10a      	cbz	r2, 8017d2a <_free_r+0x52>
 8017d26:	42a2      	cmp	r2, r4
 8017d28:	d9fa      	bls.n	8017d20 <_free_r+0x48>
 8017d2a:	6819      	ldr	r1, [r3, #0]
 8017d2c:	1858      	adds	r0, r3, r1
 8017d2e:	42a0      	cmp	r0, r4
 8017d30:	d10b      	bne.n	8017d4a <_free_r+0x72>
 8017d32:	6820      	ldr	r0, [r4, #0]
 8017d34:	4401      	add	r1, r0
 8017d36:	1858      	adds	r0, r3, r1
 8017d38:	4282      	cmp	r2, r0
 8017d3a:	6019      	str	r1, [r3, #0]
 8017d3c:	d1de      	bne.n	8017cfc <_free_r+0x24>
 8017d3e:	6810      	ldr	r0, [r2, #0]
 8017d40:	6852      	ldr	r2, [r2, #4]
 8017d42:	4401      	add	r1, r0
 8017d44:	6019      	str	r1, [r3, #0]
 8017d46:	605a      	str	r2, [r3, #4]
 8017d48:	e7d8      	b.n	8017cfc <_free_r+0x24>
 8017d4a:	d902      	bls.n	8017d52 <_free_r+0x7a>
 8017d4c:	230c      	movs	r3, #12
 8017d4e:	602b      	str	r3, [r5, #0]
 8017d50:	e7d4      	b.n	8017cfc <_free_r+0x24>
 8017d52:	6820      	ldr	r0, [r4, #0]
 8017d54:	1821      	adds	r1, r4, r0
 8017d56:	428a      	cmp	r2, r1
 8017d58:	bf01      	itttt	eq
 8017d5a:	6811      	ldreq	r1, [r2, #0]
 8017d5c:	6852      	ldreq	r2, [r2, #4]
 8017d5e:	1809      	addeq	r1, r1, r0
 8017d60:	6021      	streq	r1, [r4, #0]
 8017d62:	6062      	str	r2, [r4, #4]
 8017d64:	605c      	str	r4, [r3, #4]
 8017d66:	e7c9      	b.n	8017cfc <_free_r+0x24>
 8017d68:	bd38      	pop	{r3, r4, r5, pc}
 8017d6a:	bf00      	nop
 8017d6c:	20001508 	.word	0x20001508

08017d70 <_malloc_r>:
 8017d70:	b570      	push	{r4, r5, r6, lr}
 8017d72:	1ccd      	adds	r5, r1, #3
 8017d74:	f025 0503 	bic.w	r5, r5, #3
 8017d78:	3508      	adds	r5, #8
 8017d7a:	2d0c      	cmp	r5, #12
 8017d7c:	bf38      	it	cc
 8017d7e:	250c      	movcc	r5, #12
 8017d80:	2d00      	cmp	r5, #0
 8017d82:	4606      	mov	r6, r0
 8017d84:	db01      	blt.n	8017d8a <_malloc_r+0x1a>
 8017d86:	42a9      	cmp	r1, r5
 8017d88:	d903      	bls.n	8017d92 <_malloc_r+0x22>
 8017d8a:	230c      	movs	r3, #12
 8017d8c:	6033      	str	r3, [r6, #0]
 8017d8e:	2000      	movs	r0, #0
 8017d90:	bd70      	pop	{r4, r5, r6, pc}
 8017d92:	f000 f97c 	bl	801808e <__malloc_lock>
 8017d96:	4a21      	ldr	r2, [pc, #132]	; (8017e1c <_malloc_r+0xac>)
 8017d98:	6814      	ldr	r4, [r2, #0]
 8017d9a:	4621      	mov	r1, r4
 8017d9c:	b991      	cbnz	r1, 8017dc4 <_malloc_r+0x54>
 8017d9e:	4c20      	ldr	r4, [pc, #128]	; (8017e20 <_malloc_r+0xb0>)
 8017da0:	6823      	ldr	r3, [r4, #0]
 8017da2:	b91b      	cbnz	r3, 8017dac <_malloc_r+0x3c>
 8017da4:	4630      	mov	r0, r6
 8017da6:	f000 f83d 	bl	8017e24 <_sbrk_r>
 8017daa:	6020      	str	r0, [r4, #0]
 8017dac:	4629      	mov	r1, r5
 8017dae:	4630      	mov	r0, r6
 8017db0:	f000 f838 	bl	8017e24 <_sbrk_r>
 8017db4:	1c43      	adds	r3, r0, #1
 8017db6:	d124      	bne.n	8017e02 <_malloc_r+0x92>
 8017db8:	230c      	movs	r3, #12
 8017dba:	4630      	mov	r0, r6
 8017dbc:	6033      	str	r3, [r6, #0]
 8017dbe:	f000 f967 	bl	8018090 <__malloc_unlock>
 8017dc2:	e7e4      	b.n	8017d8e <_malloc_r+0x1e>
 8017dc4:	680b      	ldr	r3, [r1, #0]
 8017dc6:	1b5b      	subs	r3, r3, r5
 8017dc8:	d418      	bmi.n	8017dfc <_malloc_r+0x8c>
 8017dca:	2b0b      	cmp	r3, #11
 8017dcc:	d90f      	bls.n	8017dee <_malloc_r+0x7e>
 8017dce:	600b      	str	r3, [r1, #0]
 8017dd0:	18cc      	adds	r4, r1, r3
 8017dd2:	50cd      	str	r5, [r1, r3]
 8017dd4:	4630      	mov	r0, r6
 8017dd6:	f000 f95b 	bl	8018090 <__malloc_unlock>
 8017dda:	f104 000b 	add.w	r0, r4, #11
 8017dde:	1d23      	adds	r3, r4, #4
 8017de0:	f020 0007 	bic.w	r0, r0, #7
 8017de4:	1ac3      	subs	r3, r0, r3
 8017de6:	d0d3      	beq.n	8017d90 <_malloc_r+0x20>
 8017de8:	425a      	negs	r2, r3
 8017dea:	50e2      	str	r2, [r4, r3]
 8017dec:	e7d0      	b.n	8017d90 <_malloc_r+0x20>
 8017dee:	684b      	ldr	r3, [r1, #4]
 8017df0:	428c      	cmp	r4, r1
 8017df2:	bf16      	itet	ne
 8017df4:	6063      	strne	r3, [r4, #4]
 8017df6:	6013      	streq	r3, [r2, #0]
 8017df8:	460c      	movne	r4, r1
 8017dfa:	e7eb      	b.n	8017dd4 <_malloc_r+0x64>
 8017dfc:	460c      	mov	r4, r1
 8017dfe:	6849      	ldr	r1, [r1, #4]
 8017e00:	e7cc      	b.n	8017d9c <_malloc_r+0x2c>
 8017e02:	1cc4      	adds	r4, r0, #3
 8017e04:	f024 0403 	bic.w	r4, r4, #3
 8017e08:	42a0      	cmp	r0, r4
 8017e0a:	d005      	beq.n	8017e18 <_malloc_r+0xa8>
 8017e0c:	1a21      	subs	r1, r4, r0
 8017e0e:	4630      	mov	r0, r6
 8017e10:	f000 f808 	bl	8017e24 <_sbrk_r>
 8017e14:	3001      	adds	r0, #1
 8017e16:	d0cf      	beq.n	8017db8 <_malloc_r+0x48>
 8017e18:	6025      	str	r5, [r4, #0]
 8017e1a:	e7db      	b.n	8017dd4 <_malloc_r+0x64>
 8017e1c:	20001508 	.word	0x20001508
 8017e20:	2000150c 	.word	0x2000150c

08017e24 <_sbrk_r>:
 8017e24:	b538      	push	{r3, r4, r5, lr}
 8017e26:	2300      	movs	r3, #0
 8017e28:	4c05      	ldr	r4, [pc, #20]	; (8017e40 <_sbrk_r+0x1c>)
 8017e2a:	4605      	mov	r5, r0
 8017e2c:	4608      	mov	r0, r1
 8017e2e:	6023      	str	r3, [r4, #0]
 8017e30:	f7ea f884 	bl	8001f3c <_sbrk>
 8017e34:	1c43      	adds	r3, r0, #1
 8017e36:	d102      	bne.n	8017e3e <_sbrk_r+0x1a>
 8017e38:	6823      	ldr	r3, [r4, #0]
 8017e3a:	b103      	cbz	r3, 8017e3e <_sbrk_r+0x1a>
 8017e3c:	602b      	str	r3, [r5, #0]
 8017e3e:	bd38      	pop	{r3, r4, r5, pc}
 8017e40:	200021a0 	.word	0x200021a0

08017e44 <_raise_r>:
 8017e44:	291f      	cmp	r1, #31
 8017e46:	b538      	push	{r3, r4, r5, lr}
 8017e48:	4604      	mov	r4, r0
 8017e4a:	460d      	mov	r5, r1
 8017e4c:	d904      	bls.n	8017e58 <_raise_r+0x14>
 8017e4e:	2316      	movs	r3, #22
 8017e50:	6003      	str	r3, [r0, #0]
 8017e52:	f04f 30ff 	mov.w	r0, #4294967295
 8017e56:	bd38      	pop	{r3, r4, r5, pc}
 8017e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017e5a:	b112      	cbz	r2, 8017e62 <_raise_r+0x1e>
 8017e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e60:	b94b      	cbnz	r3, 8017e76 <_raise_r+0x32>
 8017e62:	4620      	mov	r0, r4
 8017e64:	f000 f830 	bl	8017ec8 <_getpid_r>
 8017e68:	462a      	mov	r2, r5
 8017e6a:	4601      	mov	r1, r0
 8017e6c:	4620      	mov	r0, r4
 8017e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e72:	f000 b817 	b.w	8017ea4 <_kill_r>
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	d00a      	beq.n	8017e90 <_raise_r+0x4c>
 8017e7a:	1c59      	adds	r1, r3, #1
 8017e7c:	d103      	bne.n	8017e86 <_raise_r+0x42>
 8017e7e:	2316      	movs	r3, #22
 8017e80:	6003      	str	r3, [r0, #0]
 8017e82:	2001      	movs	r0, #1
 8017e84:	e7e7      	b.n	8017e56 <_raise_r+0x12>
 8017e86:	2400      	movs	r4, #0
 8017e88:	4628      	mov	r0, r5
 8017e8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e8e:	4798      	blx	r3
 8017e90:	2000      	movs	r0, #0
 8017e92:	e7e0      	b.n	8017e56 <_raise_r+0x12>

08017e94 <raise>:
 8017e94:	4b02      	ldr	r3, [pc, #8]	; (8017ea0 <raise+0xc>)
 8017e96:	4601      	mov	r1, r0
 8017e98:	6818      	ldr	r0, [r3, #0]
 8017e9a:	f7ff bfd3 	b.w	8017e44 <_raise_r>
 8017e9e:	bf00      	nop
 8017ea0:	20000728 	.word	0x20000728

08017ea4 <_kill_r>:
 8017ea4:	b538      	push	{r3, r4, r5, lr}
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	4c06      	ldr	r4, [pc, #24]	; (8017ec4 <_kill_r+0x20>)
 8017eaa:	4605      	mov	r5, r0
 8017eac:	4608      	mov	r0, r1
 8017eae:	4611      	mov	r1, r2
 8017eb0:	6023      	str	r3, [r4, #0]
 8017eb2:	f7ea f828 	bl	8001f06 <_kill>
 8017eb6:	1c43      	adds	r3, r0, #1
 8017eb8:	d102      	bne.n	8017ec0 <_kill_r+0x1c>
 8017eba:	6823      	ldr	r3, [r4, #0]
 8017ebc:	b103      	cbz	r3, 8017ec0 <_kill_r+0x1c>
 8017ebe:	602b      	str	r3, [r5, #0]
 8017ec0:	bd38      	pop	{r3, r4, r5, pc}
 8017ec2:	bf00      	nop
 8017ec4:	200021a0 	.word	0x200021a0

08017ec8 <_getpid_r>:
 8017ec8:	f7ea b816 	b.w	8001ef8 <_getpid>

08017ecc <_strtol_l.isra.0>:
 8017ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ed0:	4680      	mov	r8, r0
 8017ed2:	4689      	mov	r9, r1
 8017ed4:	4692      	mov	sl, r2
 8017ed6:	461e      	mov	r6, r3
 8017ed8:	460f      	mov	r7, r1
 8017eda:	463d      	mov	r5, r7
 8017edc:	9808      	ldr	r0, [sp, #32]
 8017ede:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ee2:	f000 f8bf 	bl	8018064 <__locale_ctype_ptr_l>
 8017ee6:	4420      	add	r0, r4
 8017ee8:	7843      	ldrb	r3, [r0, #1]
 8017eea:	f013 0308 	ands.w	r3, r3, #8
 8017eee:	d132      	bne.n	8017f56 <_strtol_l.isra.0+0x8a>
 8017ef0:	2c2d      	cmp	r4, #45	; 0x2d
 8017ef2:	d132      	bne.n	8017f5a <_strtol_l.isra.0+0x8e>
 8017ef4:	2201      	movs	r2, #1
 8017ef6:	787c      	ldrb	r4, [r7, #1]
 8017ef8:	1cbd      	adds	r5, r7, #2
 8017efa:	2e00      	cmp	r6, #0
 8017efc:	d05d      	beq.n	8017fba <_strtol_l.isra.0+0xee>
 8017efe:	2e10      	cmp	r6, #16
 8017f00:	d109      	bne.n	8017f16 <_strtol_l.isra.0+0x4a>
 8017f02:	2c30      	cmp	r4, #48	; 0x30
 8017f04:	d107      	bne.n	8017f16 <_strtol_l.isra.0+0x4a>
 8017f06:	782b      	ldrb	r3, [r5, #0]
 8017f08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017f0c:	2b58      	cmp	r3, #88	; 0x58
 8017f0e:	d14f      	bne.n	8017fb0 <_strtol_l.isra.0+0xe4>
 8017f10:	2610      	movs	r6, #16
 8017f12:	786c      	ldrb	r4, [r5, #1]
 8017f14:	3502      	adds	r5, #2
 8017f16:	2a00      	cmp	r2, #0
 8017f18:	bf14      	ite	ne
 8017f1a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017f1e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017f22:	2700      	movs	r7, #0
 8017f24:	fbb1 fcf6 	udiv	ip, r1, r6
 8017f28:	4638      	mov	r0, r7
 8017f2a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017f2e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017f32:	2b09      	cmp	r3, #9
 8017f34:	d817      	bhi.n	8017f66 <_strtol_l.isra.0+0x9a>
 8017f36:	461c      	mov	r4, r3
 8017f38:	42a6      	cmp	r6, r4
 8017f3a:	dd23      	ble.n	8017f84 <_strtol_l.isra.0+0xb8>
 8017f3c:	1c7b      	adds	r3, r7, #1
 8017f3e:	d007      	beq.n	8017f50 <_strtol_l.isra.0+0x84>
 8017f40:	4584      	cmp	ip, r0
 8017f42:	d31c      	bcc.n	8017f7e <_strtol_l.isra.0+0xb2>
 8017f44:	d101      	bne.n	8017f4a <_strtol_l.isra.0+0x7e>
 8017f46:	45a6      	cmp	lr, r4
 8017f48:	db19      	blt.n	8017f7e <_strtol_l.isra.0+0xb2>
 8017f4a:	2701      	movs	r7, #1
 8017f4c:	fb00 4006 	mla	r0, r0, r6, r4
 8017f50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f54:	e7eb      	b.n	8017f2e <_strtol_l.isra.0+0x62>
 8017f56:	462f      	mov	r7, r5
 8017f58:	e7bf      	b.n	8017eda <_strtol_l.isra.0+0xe>
 8017f5a:	2c2b      	cmp	r4, #43	; 0x2b
 8017f5c:	bf04      	itt	eq
 8017f5e:	1cbd      	addeq	r5, r7, #2
 8017f60:	787c      	ldrbeq	r4, [r7, #1]
 8017f62:	461a      	mov	r2, r3
 8017f64:	e7c9      	b.n	8017efa <_strtol_l.isra.0+0x2e>
 8017f66:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017f6a:	2b19      	cmp	r3, #25
 8017f6c:	d801      	bhi.n	8017f72 <_strtol_l.isra.0+0xa6>
 8017f6e:	3c37      	subs	r4, #55	; 0x37
 8017f70:	e7e2      	b.n	8017f38 <_strtol_l.isra.0+0x6c>
 8017f72:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017f76:	2b19      	cmp	r3, #25
 8017f78:	d804      	bhi.n	8017f84 <_strtol_l.isra.0+0xb8>
 8017f7a:	3c57      	subs	r4, #87	; 0x57
 8017f7c:	e7dc      	b.n	8017f38 <_strtol_l.isra.0+0x6c>
 8017f7e:	f04f 37ff 	mov.w	r7, #4294967295
 8017f82:	e7e5      	b.n	8017f50 <_strtol_l.isra.0+0x84>
 8017f84:	1c7b      	adds	r3, r7, #1
 8017f86:	d108      	bne.n	8017f9a <_strtol_l.isra.0+0xce>
 8017f88:	2322      	movs	r3, #34	; 0x22
 8017f8a:	4608      	mov	r0, r1
 8017f8c:	f8c8 3000 	str.w	r3, [r8]
 8017f90:	f1ba 0f00 	cmp.w	sl, #0
 8017f94:	d107      	bne.n	8017fa6 <_strtol_l.isra.0+0xda>
 8017f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f9a:	b102      	cbz	r2, 8017f9e <_strtol_l.isra.0+0xd2>
 8017f9c:	4240      	negs	r0, r0
 8017f9e:	f1ba 0f00 	cmp.w	sl, #0
 8017fa2:	d0f8      	beq.n	8017f96 <_strtol_l.isra.0+0xca>
 8017fa4:	b10f      	cbz	r7, 8017faa <_strtol_l.isra.0+0xde>
 8017fa6:	f105 39ff 	add.w	r9, r5, #4294967295
 8017faa:	f8ca 9000 	str.w	r9, [sl]
 8017fae:	e7f2      	b.n	8017f96 <_strtol_l.isra.0+0xca>
 8017fb0:	2430      	movs	r4, #48	; 0x30
 8017fb2:	2e00      	cmp	r6, #0
 8017fb4:	d1af      	bne.n	8017f16 <_strtol_l.isra.0+0x4a>
 8017fb6:	2608      	movs	r6, #8
 8017fb8:	e7ad      	b.n	8017f16 <_strtol_l.isra.0+0x4a>
 8017fba:	2c30      	cmp	r4, #48	; 0x30
 8017fbc:	d0a3      	beq.n	8017f06 <_strtol_l.isra.0+0x3a>
 8017fbe:	260a      	movs	r6, #10
 8017fc0:	e7a9      	b.n	8017f16 <_strtol_l.isra.0+0x4a>
	...

08017fc4 <strtol>:
 8017fc4:	4b08      	ldr	r3, [pc, #32]	; (8017fe8 <strtol+0x24>)
 8017fc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017fc8:	681c      	ldr	r4, [r3, #0]
 8017fca:	4d08      	ldr	r5, [pc, #32]	; (8017fec <strtol+0x28>)
 8017fcc:	6a23      	ldr	r3, [r4, #32]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	bf08      	it	eq
 8017fd2:	462b      	moveq	r3, r5
 8017fd4:	9300      	str	r3, [sp, #0]
 8017fd6:	4613      	mov	r3, r2
 8017fd8:	460a      	mov	r2, r1
 8017fda:	4601      	mov	r1, r0
 8017fdc:	4620      	mov	r0, r4
 8017fde:	f7ff ff75 	bl	8017ecc <_strtol_l.isra.0>
 8017fe2:	b003      	add	sp, #12
 8017fe4:	bd30      	pop	{r4, r5, pc}
 8017fe6:	bf00      	nop
 8017fe8:	20000728 	.word	0x20000728
 8017fec:	2000078c 	.word	0x2000078c

08017ff0 <_vsniprintf_r>:
 8017ff0:	b530      	push	{r4, r5, lr}
 8017ff2:	1e14      	subs	r4, r2, #0
 8017ff4:	4605      	mov	r5, r0
 8017ff6:	b09b      	sub	sp, #108	; 0x6c
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	da05      	bge.n	8018008 <_vsniprintf_r+0x18>
 8017ffc:	238b      	movs	r3, #139	; 0x8b
 8017ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8018002:	602b      	str	r3, [r5, #0]
 8018004:	b01b      	add	sp, #108	; 0x6c
 8018006:	bd30      	pop	{r4, r5, pc}
 8018008:	f44f 7302 	mov.w	r3, #520	; 0x208
 801800c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018010:	bf0c      	ite	eq
 8018012:	4623      	moveq	r3, r4
 8018014:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018018:	9302      	str	r3, [sp, #8]
 801801a:	9305      	str	r3, [sp, #20]
 801801c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018020:	9100      	str	r1, [sp, #0]
 8018022:	9104      	str	r1, [sp, #16]
 8018024:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018028:	4602      	mov	r2, r0
 801802a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801802c:	4669      	mov	r1, sp
 801802e:	4628      	mov	r0, r5
 8018030:	f000 f88a 	bl	8018148 <_svfiprintf_r>
 8018034:	1c43      	adds	r3, r0, #1
 8018036:	bfbc      	itt	lt
 8018038:	238b      	movlt	r3, #139	; 0x8b
 801803a:	602b      	strlt	r3, [r5, #0]
 801803c:	2c00      	cmp	r4, #0
 801803e:	d0e1      	beq.n	8018004 <_vsniprintf_r+0x14>
 8018040:	2200      	movs	r2, #0
 8018042:	9b00      	ldr	r3, [sp, #0]
 8018044:	701a      	strb	r2, [r3, #0]
 8018046:	e7dd      	b.n	8018004 <_vsniprintf_r+0x14>

08018048 <vsniprintf>:
 8018048:	b507      	push	{r0, r1, r2, lr}
 801804a:	9300      	str	r3, [sp, #0]
 801804c:	4613      	mov	r3, r2
 801804e:	460a      	mov	r2, r1
 8018050:	4601      	mov	r1, r0
 8018052:	4803      	ldr	r0, [pc, #12]	; (8018060 <vsniprintf+0x18>)
 8018054:	6800      	ldr	r0, [r0, #0]
 8018056:	f7ff ffcb 	bl	8017ff0 <_vsniprintf_r>
 801805a:	b003      	add	sp, #12
 801805c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018060:	20000728 	.word	0x20000728

08018064 <__locale_ctype_ptr_l>:
 8018064:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018068:	4770      	bx	lr

0801806a <__ascii_mbtowc>:
 801806a:	b082      	sub	sp, #8
 801806c:	b901      	cbnz	r1, 8018070 <__ascii_mbtowc+0x6>
 801806e:	a901      	add	r1, sp, #4
 8018070:	b142      	cbz	r2, 8018084 <__ascii_mbtowc+0x1a>
 8018072:	b14b      	cbz	r3, 8018088 <__ascii_mbtowc+0x1e>
 8018074:	7813      	ldrb	r3, [r2, #0]
 8018076:	600b      	str	r3, [r1, #0]
 8018078:	7812      	ldrb	r2, [r2, #0]
 801807a:	1c10      	adds	r0, r2, #0
 801807c:	bf18      	it	ne
 801807e:	2001      	movne	r0, #1
 8018080:	b002      	add	sp, #8
 8018082:	4770      	bx	lr
 8018084:	4610      	mov	r0, r2
 8018086:	e7fb      	b.n	8018080 <__ascii_mbtowc+0x16>
 8018088:	f06f 0001 	mvn.w	r0, #1
 801808c:	e7f8      	b.n	8018080 <__ascii_mbtowc+0x16>

0801808e <__malloc_lock>:
 801808e:	4770      	bx	lr

08018090 <__malloc_unlock>:
 8018090:	4770      	bx	lr

08018092 <__ssputs_r>:
 8018092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018096:	688e      	ldr	r6, [r1, #8]
 8018098:	4682      	mov	sl, r0
 801809a:	429e      	cmp	r6, r3
 801809c:	460c      	mov	r4, r1
 801809e:	4690      	mov	r8, r2
 80180a0:	4699      	mov	r9, r3
 80180a2:	d837      	bhi.n	8018114 <__ssputs_r+0x82>
 80180a4:	898a      	ldrh	r2, [r1, #12]
 80180a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80180aa:	d031      	beq.n	8018110 <__ssputs_r+0x7e>
 80180ac:	2302      	movs	r3, #2
 80180ae:	6825      	ldr	r5, [r4, #0]
 80180b0:	6909      	ldr	r1, [r1, #16]
 80180b2:	1a6f      	subs	r7, r5, r1
 80180b4:	6965      	ldr	r5, [r4, #20]
 80180b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80180ba:	fb95 f5f3 	sdiv	r5, r5, r3
 80180be:	f109 0301 	add.w	r3, r9, #1
 80180c2:	443b      	add	r3, r7
 80180c4:	429d      	cmp	r5, r3
 80180c6:	bf38      	it	cc
 80180c8:	461d      	movcc	r5, r3
 80180ca:	0553      	lsls	r3, r2, #21
 80180cc:	d530      	bpl.n	8018130 <__ssputs_r+0x9e>
 80180ce:	4629      	mov	r1, r5
 80180d0:	f7ff fe4e 	bl	8017d70 <_malloc_r>
 80180d4:	4606      	mov	r6, r0
 80180d6:	b950      	cbnz	r0, 80180ee <__ssputs_r+0x5c>
 80180d8:	230c      	movs	r3, #12
 80180da:	f04f 30ff 	mov.w	r0, #4294967295
 80180de:	f8ca 3000 	str.w	r3, [sl]
 80180e2:	89a3      	ldrh	r3, [r4, #12]
 80180e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180e8:	81a3      	strh	r3, [r4, #12]
 80180ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ee:	463a      	mov	r2, r7
 80180f0:	6921      	ldr	r1, [r4, #16]
 80180f2:	f7ff fdc4 	bl	8017c7e <memcpy>
 80180f6:	89a3      	ldrh	r3, [r4, #12]
 80180f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80180fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018100:	81a3      	strh	r3, [r4, #12]
 8018102:	6126      	str	r6, [r4, #16]
 8018104:	443e      	add	r6, r7
 8018106:	6026      	str	r6, [r4, #0]
 8018108:	464e      	mov	r6, r9
 801810a:	6165      	str	r5, [r4, #20]
 801810c:	1bed      	subs	r5, r5, r7
 801810e:	60a5      	str	r5, [r4, #8]
 8018110:	454e      	cmp	r6, r9
 8018112:	d900      	bls.n	8018116 <__ssputs_r+0x84>
 8018114:	464e      	mov	r6, r9
 8018116:	4632      	mov	r2, r6
 8018118:	4641      	mov	r1, r8
 801811a:	6820      	ldr	r0, [r4, #0]
 801811c:	f7ff fdba 	bl	8017c94 <memmove>
 8018120:	68a3      	ldr	r3, [r4, #8]
 8018122:	2000      	movs	r0, #0
 8018124:	1b9b      	subs	r3, r3, r6
 8018126:	60a3      	str	r3, [r4, #8]
 8018128:	6823      	ldr	r3, [r4, #0]
 801812a:	441e      	add	r6, r3
 801812c:	6026      	str	r6, [r4, #0]
 801812e:	e7dc      	b.n	80180ea <__ssputs_r+0x58>
 8018130:	462a      	mov	r2, r5
 8018132:	f000 fa96 	bl	8018662 <_realloc_r>
 8018136:	4606      	mov	r6, r0
 8018138:	2800      	cmp	r0, #0
 801813a:	d1e2      	bne.n	8018102 <__ssputs_r+0x70>
 801813c:	6921      	ldr	r1, [r4, #16]
 801813e:	4650      	mov	r0, sl
 8018140:	f7ff fdca 	bl	8017cd8 <_free_r>
 8018144:	e7c8      	b.n	80180d8 <__ssputs_r+0x46>
	...

08018148 <_svfiprintf_r>:
 8018148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801814c:	461d      	mov	r5, r3
 801814e:	898b      	ldrh	r3, [r1, #12]
 8018150:	b09d      	sub	sp, #116	; 0x74
 8018152:	061f      	lsls	r7, r3, #24
 8018154:	4680      	mov	r8, r0
 8018156:	460c      	mov	r4, r1
 8018158:	4616      	mov	r6, r2
 801815a:	d50f      	bpl.n	801817c <_svfiprintf_r+0x34>
 801815c:	690b      	ldr	r3, [r1, #16]
 801815e:	b96b      	cbnz	r3, 801817c <_svfiprintf_r+0x34>
 8018160:	2140      	movs	r1, #64	; 0x40
 8018162:	f7ff fe05 	bl	8017d70 <_malloc_r>
 8018166:	6020      	str	r0, [r4, #0]
 8018168:	6120      	str	r0, [r4, #16]
 801816a:	b928      	cbnz	r0, 8018178 <_svfiprintf_r+0x30>
 801816c:	230c      	movs	r3, #12
 801816e:	f8c8 3000 	str.w	r3, [r8]
 8018172:	f04f 30ff 	mov.w	r0, #4294967295
 8018176:	e0c8      	b.n	801830a <_svfiprintf_r+0x1c2>
 8018178:	2340      	movs	r3, #64	; 0x40
 801817a:	6163      	str	r3, [r4, #20]
 801817c:	2300      	movs	r3, #0
 801817e:	9309      	str	r3, [sp, #36]	; 0x24
 8018180:	2320      	movs	r3, #32
 8018182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018186:	2330      	movs	r3, #48	; 0x30
 8018188:	f04f 0b01 	mov.w	fp, #1
 801818c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018190:	9503      	str	r5, [sp, #12]
 8018192:	4637      	mov	r7, r6
 8018194:	463d      	mov	r5, r7
 8018196:	f815 3b01 	ldrb.w	r3, [r5], #1
 801819a:	b10b      	cbz	r3, 80181a0 <_svfiprintf_r+0x58>
 801819c:	2b25      	cmp	r3, #37	; 0x25
 801819e:	d13e      	bne.n	801821e <_svfiprintf_r+0xd6>
 80181a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80181a4:	d00b      	beq.n	80181be <_svfiprintf_r+0x76>
 80181a6:	4653      	mov	r3, sl
 80181a8:	4632      	mov	r2, r6
 80181aa:	4621      	mov	r1, r4
 80181ac:	4640      	mov	r0, r8
 80181ae:	f7ff ff70 	bl	8018092 <__ssputs_r>
 80181b2:	3001      	adds	r0, #1
 80181b4:	f000 80a4 	beq.w	8018300 <_svfiprintf_r+0x1b8>
 80181b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181ba:	4453      	add	r3, sl
 80181bc:	9309      	str	r3, [sp, #36]	; 0x24
 80181be:	783b      	ldrb	r3, [r7, #0]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	f000 809d 	beq.w	8018300 <_svfiprintf_r+0x1b8>
 80181c6:	2300      	movs	r3, #0
 80181c8:	f04f 32ff 	mov.w	r2, #4294967295
 80181cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181d0:	9304      	str	r3, [sp, #16]
 80181d2:	9307      	str	r3, [sp, #28]
 80181d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80181d8:	931a      	str	r3, [sp, #104]	; 0x68
 80181da:	462f      	mov	r7, r5
 80181dc:	2205      	movs	r2, #5
 80181de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80181e2:	4850      	ldr	r0, [pc, #320]	; (8018324 <_svfiprintf_r+0x1dc>)
 80181e4:	f7ff fd2e 	bl	8017c44 <memchr>
 80181e8:	9b04      	ldr	r3, [sp, #16]
 80181ea:	b9d0      	cbnz	r0, 8018222 <_svfiprintf_r+0xda>
 80181ec:	06d9      	lsls	r1, r3, #27
 80181ee:	bf44      	itt	mi
 80181f0:	2220      	movmi	r2, #32
 80181f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80181f6:	071a      	lsls	r2, r3, #28
 80181f8:	bf44      	itt	mi
 80181fa:	222b      	movmi	r2, #43	; 0x2b
 80181fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018200:	782a      	ldrb	r2, [r5, #0]
 8018202:	2a2a      	cmp	r2, #42	; 0x2a
 8018204:	d015      	beq.n	8018232 <_svfiprintf_r+0xea>
 8018206:	462f      	mov	r7, r5
 8018208:	2000      	movs	r0, #0
 801820a:	250a      	movs	r5, #10
 801820c:	9a07      	ldr	r2, [sp, #28]
 801820e:	4639      	mov	r1, r7
 8018210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018214:	3b30      	subs	r3, #48	; 0x30
 8018216:	2b09      	cmp	r3, #9
 8018218:	d94d      	bls.n	80182b6 <_svfiprintf_r+0x16e>
 801821a:	b1b8      	cbz	r0, 801824c <_svfiprintf_r+0x104>
 801821c:	e00f      	b.n	801823e <_svfiprintf_r+0xf6>
 801821e:	462f      	mov	r7, r5
 8018220:	e7b8      	b.n	8018194 <_svfiprintf_r+0x4c>
 8018222:	4a40      	ldr	r2, [pc, #256]	; (8018324 <_svfiprintf_r+0x1dc>)
 8018224:	463d      	mov	r5, r7
 8018226:	1a80      	subs	r0, r0, r2
 8018228:	fa0b f000 	lsl.w	r0, fp, r0
 801822c:	4318      	orrs	r0, r3
 801822e:	9004      	str	r0, [sp, #16]
 8018230:	e7d3      	b.n	80181da <_svfiprintf_r+0x92>
 8018232:	9a03      	ldr	r2, [sp, #12]
 8018234:	1d11      	adds	r1, r2, #4
 8018236:	6812      	ldr	r2, [r2, #0]
 8018238:	9103      	str	r1, [sp, #12]
 801823a:	2a00      	cmp	r2, #0
 801823c:	db01      	blt.n	8018242 <_svfiprintf_r+0xfa>
 801823e:	9207      	str	r2, [sp, #28]
 8018240:	e004      	b.n	801824c <_svfiprintf_r+0x104>
 8018242:	4252      	negs	r2, r2
 8018244:	f043 0302 	orr.w	r3, r3, #2
 8018248:	9207      	str	r2, [sp, #28]
 801824a:	9304      	str	r3, [sp, #16]
 801824c:	783b      	ldrb	r3, [r7, #0]
 801824e:	2b2e      	cmp	r3, #46	; 0x2e
 8018250:	d10c      	bne.n	801826c <_svfiprintf_r+0x124>
 8018252:	787b      	ldrb	r3, [r7, #1]
 8018254:	2b2a      	cmp	r3, #42	; 0x2a
 8018256:	d133      	bne.n	80182c0 <_svfiprintf_r+0x178>
 8018258:	9b03      	ldr	r3, [sp, #12]
 801825a:	3702      	adds	r7, #2
 801825c:	1d1a      	adds	r2, r3, #4
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	9203      	str	r2, [sp, #12]
 8018262:	2b00      	cmp	r3, #0
 8018264:	bfb8      	it	lt
 8018266:	f04f 33ff 	movlt.w	r3, #4294967295
 801826a:	9305      	str	r3, [sp, #20]
 801826c:	4d2e      	ldr	r5, [pc, #184]	; (8018328 <_svfiprintf_r+0x1e0>)
 801826e:	2203      	movs	r2, #3
 8018270:	7839      	ldrb	r1, [r7, #0]
 8018272:	4628      	mov	r0, r5
 8018274:	f7ff fce6 	bl	8017c44 <memchr>
 8018278:	b138      	cbz	r0, 801828a <_svfiprintf_r+0x142>
 801827a:	2340      	movs	r3, #64	; 0x40
 801827c:	1b40      	subs	r0, r0, r5
 801827e:	fa03 f000 	lsl.w	r0, r3, r0
 8018282:	9b04      	ldr	r3, [sp, #16]
 8018284:	3701      	adds	r7, #1
 8018286:	4303      	orrs	r3, r0
 8018288:	9304      	str	r3, [sp, #16]
 801828a:	7839      	ldrb	r1, [r7, #0]
 801828c:	2206      	movs	r2, #6
 801828e:	4827      	ldr	r0, [pc, #156]	; (801832c <_svfiprintf_r+0x1e4>)
 8018290:	1c7e      	adds	r6, r7, #1
 8018292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018296:	f7ff fcd5 	bl	8017c44 <memchr>
 801829a:	2800      	cmp	r0, #0
 801829c:	d038      	beq.n	8018310 <_svfiprintf_r+0x1c8>
 801829e:	4b24      	ldr	r3, [pc, #144]	; (8018330 <_svfiprintf_r+0x1e8>)
 80182a0:	bb13      	cbnz	r3, 80182e8 <_svfiprintf_r+0x1a0>
 80182a2:	9b03      	ldr	r3, [sp, #12]
 80182a4:	3307      	adds	r3, #7
 80182a6:	f023 0307 	bic.w	r3, r3, #7
 80182aa:	3308      	adds	r3, #8
 80182ac:	9303      	str	r3, [sp, #12]
 80182ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182b0:	444b      	add	r3, r9
 80182b2:	9309      	str	r3, [sp, #36]	; 0x24
 80182b4:	e76d      	b.n	8018192 <_svfiprintf_r+0x4a>
 80182b6:	fb05 3202 	mla	r2, r5, r2, r3
 80182ba:	2001      	movs	r0, #1
 80182bc:	460f      	mov	r7, r1
 80182be:	e7a6      	b.n	801820e <_svfiprintf_r+0xc6>
 80182c0:	2300      	movs	r3, #0
 80182c2:	250a      	movs	r5, #10
 80182c4:	4619      	mov	r1, r3
 80182c6:	3701      	adds	r7, #1
 80182c8:	9305      	str	r3, [sp, #20]
 80182ca:	4638      	mov	r0, r7
 80182cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182d0:	3a30      	subs	r2, #48	; 0x30
 80182d2:	2a09      	cmp	r2, #9
 80182d4:	d903      	bls.n	80182de <_svfiprintf_r+0x196>
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d0c8      	beq.n	801826c <_svfiprintf_r+0x124>
 80182da:	9105      	str	r1, [sp, #20]
 80182dc:	e7c6      	b.n	801826c <_svfiprintf_r+0x124>
 80182de:	fb05 2101 	mla	r1, r5, r1, r2
 80182e2:	2301      	movs	r3, #1
 80182e4:	4607      	mov	r7, r0
 80182e6:	e7f0      	b.n	80182ca <_svfiprintf_r+0x182>
 80182e8:	ab03      	add	r3, sp, #12
 80182ea:	9300      	str	r3, [sp, #0]
 80182ec:	4622      	mov	r2, r4
 80182ee:	4b11      	ldr	r3, [pc, #68]	; (8018334 <_svfiprintf_r+0x1ec>)
 80182f0:	a904      	add	r1, sp, #16
 80182f2:	4640      	mov	r0, r8
 80182f4:	f3af 8000 	nop.w
 80182f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80182fc:	4681      	mov	r9, r0
 80182fe:	d1d6      	bne.n	80182ae <_svfiprintf_r+0x166>
 8018300:	89a3      	ldrh	r3, [r4, #12]
 8018302:	065b      	lsls	r3, r3, #25
 8018304:	f53f af35 	bmi.w	8018172 <_svfiprintf_r+0x2a>
 8018308:	9809      	ldr	r0, [sp, #36]	; 0x24
 801830a:	b01d      	add	sp, #116	; 0x74
 801830c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018310:	ab03      	add	r3, sp, #12
 8018312:	9300      	str	r3, [sp, #0]
 8018314:	4622      	mov	r2, r4
 8018316:	4b07      	ldr	r3, [pc, #28]	; (8018334 <_svfiprintf_r+0x1ec>)
 8018318:	a904      	add	r1, sp, #16
 801831a:	4640      	mov	r0, r8
 801831c:	f000 f882 	bl	8018424 <_printf_i>
 8018320:	e7ea      	b.n	80182f8 <_svfiprintf_r+0x1b0>
 8018322:	bf00      	nop
 8018324:	0801929a 	.word	0x0801929a
 8018328:	080192a0 	.word	0x080192a0
 801832c:	080192a4 	.word	0x080192a4
 8018330:	00000000 	.word	0x00000000
 8018334:	08018093 	.word	0x08018093

08018338 <_printf_common>:
 8018338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801833c:	4691      	mov	r9, r2
 801833e:	461f      	mov	r7, r3
 8018340:	688a      	ldr	r2, [r1, #8]
 8018342:	690b      	ldr	r3, [r1, #16]
 8018344:	4606      	mov	r6, r0
 8018346:	4293      	cmp	r3, r2
 8018348:	bfb8      	it	lt
 801834a:	4613      	movlt	r3, r2
 801834c:	f8c9 3000 	str.w	r3, [r9]
 8018350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018354:	460c      	mov	r4, r1
 8018356:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801835a:	b112      	cbz	r2, 8018362 <_printf_common+0x2a>
 801835c:	3301      	adds	r3, #1
 801835e:	f8c9 3000 	str.w	r3, [r9]
 8018362:	6823      	ldr	r3, [r4, #0]
 8018364:	0699      	lsls	r1, r3, #26
 8018366:	bf42      	ittt	mi
 8018368:	f8d9 3000 	ldrmi.w	r3, [r9]
 801836c:	3302      	addmi	r3, #2
 801836e:	f8c9 3000 	strmi.w	r3, [r9]
 8018372:	6825      	ldr	r5, [r4, #0]
 8018374:	f015 0506 	ands.w	r5, r5, #6
 8018378:	d107      	bne.n	801838a <_printf_common+0x52>
 801837a:	f104 0a19 	add.w	sl, r4, #25
 801837e:	68e3      	ldr	r3, [r4, #12]
 8018380:	f8d9 2000 	ldr.w	r2, [r9]
 8018384:	1a9b      	subs	r3, r3, r2
 8018386:	42ab      	cmp	r3, r5
 8018388:	dc29      	bgt.n	80183de <_printf_common+0xa6>
 801838a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801838e:	6822      	ldr	r2, [r4, #0]
 8018390:	3300      	adds	r3, #0
 8018392:	bf18      	it	ne
 8018394:	2301      	movne	r3, #1
 8018396:	0692      	lsls	r2, r2, #26
 8018398:	d42e      	bmi.n	80183f8 <_printf_common+0xc0>
 801839a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801839e:	4639      	mov	r1, r7
 80183a0:	4630      	mov	r0, r6
 80183a2:	47c0      	blx	r8
 80183a4:	3001      	adds	r0, #1
 80183a6:	d021      	beq.n	80183ec <_printf_common+0xb4>
 80183a8:	6823      	ldr	r3, [r4, #0]
 80183aa:	68e5      	ldr	r5, [r4, #12]
 80183ac:	f003 0306 	and.w	r3, r3, #6
 80183b0:	2b04      	cmp	r3, #4
 80183b2:	bf18      	it	ne
 80183b4:	2500      	movne	r5, #0
 80183b6:	f8d9 2000 	ldr.w	r2, [r9]
 80183ba:	f04f 0900 	mov.w	r9, #0
 80183be:	bf08      	it	eq
 80183c0:	1aad      	subeq	r5, r5, r2
 80183c2:	68a3      	ldr	r3, [r4, #8]
 80183c4:	6922      	ldr	r2, [r4, #16]
 80183c6:	bf08      	it	eq
 80183c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80183cc:	4293      	cmp	r3, r2
 80183ce:	bfc4      	itt	gt
 80183d0:	1a9b      	subgt	r3, r3, r2
 80183d2:	18ed      	addgt	r5, r5, r3
 80183d4:	341a      	adds	r4, #26
 80183d6:	454d      	cmp	r5, r9
 80183d8:	d11a      	bne.n	8018410 <_printf_common+0xd8>
 80183da:	2000      	movs	r0, #0
 80183dc:	e008      	b.n	80183f0 <_printf_common+0xb8>
 80183de:	2301      	movs	r3, #1
 80183e0:	4652      	mov	r2, sl
 80183e2:	4639      	mov	r1, r7
 80183e4:	4630      	mov	r0, r6
 80183e6:	47c0      	blx	r8
 80183e8:	3001      	adds	r0, #1
 80183ea:	d103      	bne.n	80183f4 <_printf_common+0xbc>
 80183ec:	f04f 30ff 	mov.w	r0, #4294967295
 80183f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183f4:	3501      	adds	r5, #1
 80183f6:	e7c2      	b.n	801837e <_printf_common+0x46>
 80183f8:	2030      	movs	r0, #48	; 0x30
 80183fa:	18e1      	adds	r1, r4, r3
 80183fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018400:	1c5a      	adds	r2, r3, #1
 8018402:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018406:	4422      	add	r2, r4
 8018408:	3302      	adds	r3, #2
 801840a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801840e:	e7c4      	b.n	801839a <_printf_common+0x62>
 8018410:	2301      	movs	r3, #1
 8018412:	4622      	mov	r2, r4
 8018414:	4639      	mov	r1, r7
 8018416:	4630      	mov	r0, r6
 8018418:	47c0      	blx	r8
 801841a:	3001      	adds	r0, #1
 801841c:	d0e6      	beq.n	80183ec <_printf_common+0xb4>
 801841e:	f109 0901 	add.w	r9, r9, #1
 8018422:	e7d8      	b.n	80183d6 <_printf_common+0x9e>

08018424 <_printf_i>:
 8018424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018428:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801842c:	460c      	mov	r4, r1
 801842e:	7e09      	ldrb	r1, [r1, #24]
 8018430:	b085      	sub	sp, #20
 8018432:	296e      	cmp	r1, #110	; 0x6e
 8018434:	4617      	mov	r7, r2
 8018436:	4606      	mov	r6, r0
 8018438:	4698      	mov	r8, r3
 801843a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801843c:	f000 80b3 	beq.w	80185a6 <_printf_i+0x182>
 8018440:	d822      	bhi.n	8018488 <_printf_i+0x64>
 8018442:	2963      	cmp	r1, #99	; 0x63
 8018444:	d036      	beq.n	80184b4 <_printf_i+0x90>
 8018446:	d80a      	bhi.n	801845e <_printf_i+0x3a>
 8018448:	2900      	cmp	r1, #0
 801844a:	f000 80b9 	beq.w	80185c0 <_printf_i+0x19c>
 801844e:	2958      	cmp	r1, #88	; 0x58
 8018450:	f000 8083 	beq.w	801855a <_printf_i+0x136>
 8018454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018458:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801845c:	e032      	b.n	80184c4 <_printf_i+0xa0>
 801845e:	2964      	cmp	r1, #100	; 0x64
 8018460:	d001      	beq.n	8018466 <_printf_i+0x42>
 8018462:	2969      	cmp	r1, #105	; 0x69
 8018464:	d1f6      	bne.n	8018454 <_printf_i+0x30>
 8018466:	6820      	ldr	r0, [r4, #0]
 8018468:	6813      	ldr	r3, [r2, #0]
 801846a:	0605      	lsls	r5, r0, #24
 801846c:	f103 0104 	add.w	r1, r3, #4
 8018470:	d52a      	bpl.n	80184c8 <_printf_i+0xa4>
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	6011      	str	r1, [r2, #0]
 8018476:	2b00      	cmp	r3, #0
 8018478:	da03      	bge.n	8018482 <_printf_i+0x5e>
 801847a:	222d      	movs	r2, #45	; 0x2d
 801847c:	425b      	negs	r3, r3
 801847e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018482:	486f      	ldr	r0, [pc, #444]	; (8018640 <_printf_i+0x21c>)
 8018484:	220a      	movs	r2, #10
 8018486:	e039      	b.n	80184fc <_printf_i+0xd8>
 8018488:	2973      	cmp	r1, #115	; 0x73
 801848a:	f000 809d 	beq.w	80185c8 <_printf_i+0x1a4>
 801848e:	d808      	bhi.n	80184a2 <_printf_i+0x7e>
 8018490:	296f      	cmp	r1, #111	; 0x6f
 8018492:	d020      	beq.n	80184d6 <_printf_i+0xb2>
 8018494:	2970      	cmp	r1, #112	; 0x70
 8018496:	d1dd      	bne.n	8018454 <_printf_i+0x30>
 8018498:	6823      	ldr	r3, [r4, #0]
 801849a:	f043 0320 	orr.w	r3, r3, #32
 801849e:	6023      	str	r3, [r4, #0]
 80184a0:	e003      	b.n	80184aa <_printf_i+0x86>
 80184a2:	2975      	cmp	r1, #117	; 0x75
 80184a4:	d017      	beq.n	80184d6 <_printf_i+0xb2>
 80184a6:	2978      	cmp	r1, #120	; 0x78
 80184a8:	d1d4      	bne.n	8018454 <_printf_i+0x30>
 80184aa:	2378      	movs	r3, #120	; 0x78
 80184ac:	4865      	ldr	r0, [pc, #404]	; (8018644 <_printf_i+0x220>)
 80184ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80184b2:	e055      	b.n	8018560 <_printf_i+0x13c>
 80184b4:	6813      	ldr	r3, [r2, #0]
 80184b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80184ba:	1d19      	adds	r1, r3, #4
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	6011      	str	r1, [r2, #0]
 80184c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80184c4:	2301      	movs	r3, #1
 80184c6:	e08c      	b.n	80185e2 <_printf_i+0x1be>
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80184ce:	6011      	str	r1, [r2, #0]
 80184d0:	bf18      	it	ne
 80184d2:	b21b      	sxthne	r3, r3
 80184d4:	e7cf      	b.n	8018476 <_printf_i+0x52>
 80184d6:	6813      	ldr	r3, [r2, #0]
 80184d8:	6825      	ldr	r5, [r4, #0]
 80184da:	1d18      	adds	r0, r3, #4
 80184dc:	6010      	str	r0, [r2, #0]
 80184de:	0628      	lsls	r0, r5, #24
 80184e0:	d501      	bpl.n	80184e6 <_printf_i+0xc2>
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	e002      	b.n	80184ec <_printf_i+0xc8>
 80184e6:	0668      	lsls	r0, r5, #25
 80184e8:	d5fb      	bpl.n	80184e2 <_printf_i+0xbe>
 80184ea:	881b      	ldrh	r3, [r3, #0]
 80184ec:	296f      	cmp	r1, #111	; 0x6f
 80184ee:	bf14      	ite	ne
 80184f0:	220a      	movne	r2, #10
 80184f2:	2208      	moveq	r2, #8
 80184f4:	4852      	ldr	r0, [pc, #328]	; (8018640 <_printf_i+0x21c>)
 80184f6:	2100      	movs	r1, #0
 80184f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80184fc:	6865      	ldr	r5, [r4, #4]
 80184fe:	2d00      	cmp	r5, #0
 8018500:	60a5      	str	r5, [r4, #8]
 8018502:	f2c0 8095 	blt.w	8018630 <_printf_i+0x20c>
 8018506:	6821      	ldr	r1, [r4, #0]
 8018508:	f021 0104 	bic.w	r1, r1, #4
 801850c:	6021      	str	r1, [r4, #0]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d13d      	bne.n	801858e <_printf_i+0x16a>
 8018512:	2d00      	cmp	r5, #0
 8018514:	f040 808e 	bne.w	8018634 <_printf_i+0x210>
 8018518:	4665      	mov	r5, ip
 801851a:	2a08      	cmp	r2, #8
 801851c:	d10b      	bne.n	8018536 <_printf_i+0x112>
 801851e:	6823      	ldr	r3, [r4, #0]
 8018520:	07db      	lsls	r3, r3, #31
 8018522:	d508      	bpl.n	8018536 <_printf_i+0x112>
 8018524:	6923      	ldr	r3, [r4, #16]
 8018526:	6862      	ldr	r2, [r4, #4]
 8018528:	429a      	cmp	r2, r3
 801852a:	bfde      	ittt	le
 801852c:	2330      	movle	r3, #48	; 0x30
 801852e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018532:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018536:	ebac 0305 	sub.w	r3, ip, r5
 801853a:	6123      	str	r3, [r4, #16]
 801853c:	f8cd 8000 	str.w	r8, [sp]
 8018540:	463b      	mov	r3, r7
 8018542:	aa03      	add	r2, sp, #12
 8018544:	4621      	mov	r1, r4
 8018546:	4630      	mov	r0, r6
 8018548:	f7ff fef6 	bl	8018338 <_printf_common>
 801854c:	3001      	adds	r0, #1
 801854e:	d14d      	bne.n	80185ec <_printf_i+0x1c8>
 8018550:	f04f 30ff 	mov.w	r0, #4294967295
 8018554:	b005      	add	sp, #20
 8018556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801855a:	4839      	ldr	r0, [pc, #228]	; (8018640 <_printf_i+0x21c>)
 801855c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018560:	6813      	ldr	r3, [r2, #0]
 8018562:	6821      	ldr	r1, [r4, #0]
 8018564:	1d1d      	adds	r5, r3, #4
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	6015      	str	r5, [r2, #0]
 801856a:	060a      	lsls	r2, r1, #24
 801856c:	d50b      	bpl.n	8018586 <_printf_i+0x162>
 801856e:	07ca      	lsls	r2, r1, #31
 8018570:	bf44      	itt	mi
 8018572:	f041 0120 	orrmi.w	r1, r1, #32
 8018576:	6021      	strmi	r1, [r4, #0]
 8018578:	b91b      	cbnz	r3, 8018582 <_printf_i+0x15e>
 801857a:	6822      	ldr	r2, [r4, #0]
 801857c:	f022 0220 	bic.w	r2, r2, #32
 8018580:	6022      	str	r2, [r4, #0]
 8018582:	2210      	movs	r2, #16
 8018584:	e7b7      	b.n	80184f6 <_printf_i+0xd2>
 8018586:	064d      	lsls	r5, r1, #25
 8018588:	bf48      	it	mi
 801858a:	b29b      	uxthmi	r3, r3
 801858c:	e7ef      	b.n	801856e <_printf_i+0x14a>
 801858e:	4665      	mov	r5, ip
 8018590:	fbb3 f1f2 	udiv	r1, r3, r2
 8018594:	fb02 3311 	mls	r3, r2, r1, r3
 8018598:	5cc3      	ldrb	r3, [r0, r3]
 801859a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801859e:	460b      	mov	r3, r1
 80185a0:	2900      	cmp	r1, #0
 80185a2:	d1f5      	bne.n	8018590 <_printf_i+0x16c>
 80185a4:	e7b9      	b.n	801851a <_printf_i+0xf6>
 80185a6:	6813      	ldr	r3, [r2, #0]
 80185a8:	6825      	ldr	r5, [r4, #0]
 80185aa:	1d18      	adds	r0, r3, #4
 80185ac:	6961      	ldr	r1, [r4, #20]
 80185ae:	6010      	str	r0, [r2, #0]
 80185b0:	0628      	lsls	r0, r5, #24
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	d501      	bpl.n	80185ba <_printf_i+0x196>
 80185b6:	6019      	str	r1, [r3, #0]
 80185b8:	e002      	b.n	80185c0 <_printf_i+0x19c>
 80185ba:	066a      	lsls	r2, r5, #25
 80185bc:	d5fb      	bpl.n	80185b6 <_printf_i+0x192>
 80185be:	8019      	strh	r1, [r3, #0]
 80185c0:	2300      	movs	r3, #0
 80185c2:	4665      	mov	r5, ip
 80185c4:	6123      	str	r3, [r4, #16]
 80185c6:	e7b9      	b.n	801853c <_printf_i+0x118>
 80185c8:	6813      	ldr	r3, [r2, #0]
 80185ca:	1d19      	adds	r1, r3, #4
 80185cc:	6011      	str	r1, [r2, #0]
 80185ce:	681d      	ldr	r5, [r3, #0]
 80185d0:	6862      	ldr	r2, [r4, #4]
 80185d2:	2100      	movs	r1, #0
 80185d4:	4628      	mov	r0, r5
 80185d6:	f7ff fb35 	bl	8017c44 <memchr>
 80185da:	b108      	cbz	r0, 80185e0 <_printf_i+0x1bc>
 80185dc:	1b40      	subs	r0, r0, r5
 80185de:	6060      	str	r0, [r4, #4]
 80185e0:	6863      	ldr	r3, [r4, #4]
 80185e2:	6123      	str	r3, [r4, #16]
 80185e4:	2300      	movs	r3, #0
 80185e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80185ea:	e7a7      	b.n	801853c <_printf_i+0x118>
 80185ec:	6923      	ldr	r3, [r4, #16]
 80185ee:	462a      	mov	r2, r5
 80185f0:	4639      	mov	r1, r7
 80185f2:	4630      	mov	r0, r6
 80185f4:	47c0      	blx	r8
 80185f6:	3001      	adds	r0, #1
 80185f8:	d0aa      	beq.n	8018550 <_printf_i+0x12c>
 80185fa:	6823      	ldr	r3, [r4, #0]
 80185fc:	079b      	lsls	r3, r3, #30
 80185fe:	d413      	bmi.n	8018628 <_printf_i+0x204>
 8018600:	68e0      	ldr	r0, [r4, #12]
 8018602:	9b03      	ldr	r3, [sp, #12]
 8018604:	4298      	cmp	r0, r3
 8018606:	bfb8      	it	lt
 8018608:	4618      	movlt	r0, r3
 801860a:	e7a3      	b.n	8018554 <_printf_i+0x130>
 801860c:	2301      	movs	r3, #1
 801860e:	464a      	mov	r2, r9
 8018610:	4639      	mov	r1, r7
 8018612:	4630      	mov	r0, r6
 8018614:	47c0      	blx	r8
 8018616:	3001      	adds	r0, #1
 8018618:	d09a      	beq.n	8018550 <_printf_i+0x12c>
 801861a:	3501      	adds	r5, #1
 801861c:	68e3      	ldr	r3, [r4, #12]
 801861e:	9a03      	ldr	r2, [sp, #12]
 8018620:	1a9b      	subs	r3, r3, r2
 8018622:	42ab      	cmp	r3, r5
 8018624:	dcf2      	bgt.n	801860c <_printf_i+0x1e8>
 8018626:	e7eb      	b.n	8018600 <_printf_i+0x1dc>
 8018628:	2500      	movs	r5, #0
 801862a:	f104 0919 	add.w	r9, r4, #25
 801862e:	e7f5      	b.n	801861c <_printf_i+0x1f8>
 8018630:	2b00      	cmp	r3, #0
 8018632:	d1ac      	bne.n	801858e <_printf_i+0x16a>
 8018634:	7803      	ldrb	r3, [r0, #0]
 8018636:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801863a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801863e:	e76c      	b.n	801851a <_printf_i+0xf6>
 8018640:	080192ab 	.word	0x080192ab
 8018644:	080192bc 	.word	0x080192bc

08018648 <__ascii_wctomb>:
 8018648:	b149      	cbz	r1, 801865e <__ascii_wctomb+0x16>
 801864a:	2aff      	cmp	r2, #255	; 0xff
 801864c:	bf8b      	itete	hi
 801864e:	238a      	movhi	r3, #138	; 0x8a
 8018650:	700a      	strbls	r2, [r1, #0]
 8018652:	6003      	strhi	r3, [r0, #0]
 8018654:	2001      	movls	r0, #1
 8018656:	bf88      	it	hi
 8018658:	f04f 30ff 	movhi.w	r0, #4294967295
 801865c:	4770      	bx	lr
 801865e:	4608      	mov	r0, r1
 8018660:	4770      	bx	lr

08018662 <_realloc_r>:
 8018662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018664:	4607      	mov	r7, r0
 8018666:	4614      	mov	r4, r2
 8018668:	460e      	mov	r6, r1
 801866a:	b921      	cbnz	r1, 8018676 <_realloc_r+0x14>
 801866c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018670:	4611      	mov	r1, r2
 8018672:	f7ff bb7d 	b.w	8017d70 <_malloc_r>
 8018676:	b922      	cbnz	r2, 8018682 <_realloc_r+0x20>
 8018678:	f7ff fb2e 	bl	8017cd8 <_free_r>
 801867c:	4625      	mov	r5, r4
 801867e:	4628      	mov	r0, r5
 8018680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018682:	f000 f814 	bl	80186ae <_malloc_usable_size_r>
 8018686:	42a0      	cmp	r0, r4
 8018688:	d20f      	bcs.n	80186aa <_realloc_r+0x48>
 801868a:	4621      	mov	r1, r4
 801868c:	4638      	mov	r0, r7
 801868e:	f7ff fb6f 	bl	8017d70 <_malloc_r>
 8018692:	4605      	mov	r5, r0
 8018694:	2800      	cmp	r0, #0
 8018696:	d0f2      	beq.n	801867e <_realloc_r+0x1c>
 8018698:	4631      	mov	r1, r6
 801869a:	4622      	mov	r2, r4
 801869c:	f7ff faef 	bl	8017c7e <memcpy>
 80186a0:	4631      	mov	r1, r6
 80186a2:	4638      	mov	r0, r7
 80186a4:	f7ff fb18 	bl	8017cd8 <_free_r>
 80186a8:	e7e9      	b.n	801867e <_realloc_r+0x1c>
 80186aa:	4635      	mov	r5, r6
 80186ac:	e7e7      	b.n	801867e <_realloc_r+0x1c>

080186ae <_malloc_usable_size_r>:
 80186ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186b2:	1f18      	subs	r0, r3, #4
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	bfbc      	itt	lt
 80186b8:	580b      	ldrlt	r3, [r1, r0]
 80186ba:	18c0      	addlt	r0, r0, r3
 80186bc:	4770      	bx	lr
	...

080186c0 <_init>:
 80186c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186c2:	bf00      	nop
 80186c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186c6:	bc08      	pop	{r3}
 80186c8:	469e      	mov	lr, r3
 80186ca:	4770      	bx	lr

080186cc <_fini>:
 80186cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ce:	bf00      	nop
 80186d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186d2:	bc08      	pop	{r3}
 80186d4:	469e      	mov	lr, r3
 80186d6:	4770      	bx	lr
