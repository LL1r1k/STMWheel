
USBWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017118  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  08017228  08017228  00027228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017e1c  08017e1c  00030758  2**0
                  CONTENTS
  4 .ARM          00000000  08017e1c  08017e1c  00030758  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017e1c  08017e1c  00030758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017e1c  08017e1c  00027e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08017e28  08017e28  00027e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000758  20000000  08017e30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018bc  20000758  08018588  00030758  2**3
                  ALLOC
 10 ._user_heap_stack 00000804  20002014  08018588  00032014  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY
 12 .debug_info   00085a4d  00000000  00000000  00030781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cac5  00000000  00000000  000b61ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ff0  00000000  00000000  000c2c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d18  00000000  00000000  000c5c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248d0  00000000  00000000  000c89a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033ee1  00000000  00000000  000ed270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac0d4  00000000  00000000  00121151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cd225  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ec5c  00000000  00000000  001cd278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000758 	.word	0x20000758
 800012c:	00000000 	.word	0x00000000
 8000130:	08017210 	.word	0x08017210

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000075c 	.word	0x2000075c
 800014c:	08017210 	.word	0x08017210

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <HAL_I2C_ListenCpltCallback>:
uint8_t offset = 0;
uint8_t first = 1;
uint8_t buffer[5];

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	offset = 0;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_I2C_ListenCpltCallback+0x3c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	if(mainclass->needSave)
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_I2C_ListenCpltCallback+0x40>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d009      	beq.n	8000fbe <HAL_I2C_ListenCpltCallback+0x2e>
	{
		mainclass->saveFlash();
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_I2C_ListenCpltCallback+0x40>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00c fed5 	bl	800dd5e <_ZN8FFBWheel9saveFlashEv>
		mainclass->needSave = false;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_I2C_ListenCpltCallback+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	}

	HAL_I2C_EnableListen_IT(hi2c);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 fe00 	bl	8003bc4 <HAL_I2C_EnableListen_IT>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000778 	.word	0x20000778
 8000fd0:	20000774 	.word	0x20000774

08000fd4 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	803b      	strh	r3, [r7, #0]
	if( TransferDirection==I2C_DIRECTION_TRANSMIT )
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d110      	bne.n	800100c <HAL_I2C_AddrCallback+0x38>
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, &mainclass->i2cButtonsBuffer[offset++], 1, I2C_NEXT_FRAME);
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_I2C_AddrCallback+0x60>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_I2C_AddrCallback+0x64>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	1c59      	adds	r1, r3, #1
 8000ff4:	b2c8      	uxtb	r0, r1
 8000ff6:	4910      	ldr	r1, [pc, #64]	; (8001038 <HAL_I2C_AddrCallback+0x64>)
 8000ff8:	7008      	strb	r0, [r1, #0]
 8000ffa:	3348      	adds	r3, #72	; 0x48
 8000ffc:	4413      	add	r3, r2
 8000ffe:	1d19      	adds	r1, r3, #4
 8001000:	2304      	movs	r3, #4
 8001002:	2201      	movs	r2, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f002 fd6b 	bl	8003ae0 <HAL_I2C_Slave_Seq_Receive_IT>
	else
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)(mainclass->pi2cBuf + offset++), 1, I2C_NEXT_FRAME);
}
 800100a:	e00e      	b.n	800102a <HAL_I2C_AddrCallback+0x56>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)(mainclass->pi2cBuf + offset++), 1, I2C_NEXT_FRAME);
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_I2C_AddrCallback+0x60>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_I2C_AddrCallback+0x64>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	1c59      	adds	r1, r3, #1
 8001018:	b2c8      	uxtb	r0, r1
 800101a:	4907      	ldr	r1, [pc, #28]	; (8001038 <HAL_I2C_AddrCallback+0x64>)
 800101c:	7008      	strb	r0, [r1, #0]
 800101e:	18d1      	adds	r1, r2, r3
 8001020:	2304      	movs	r3, #4
 8001022:	2201      	movs	r2, #1
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f002 fce9 	bl	80039fc <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000774 	.word	0x20000774
 8001038:	20000778 	.word	0x20000778

0800103c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Seq_Receive_IT(hi2c, &mainclass->i2cButtonsBuffer[offset++], 1, I2C_NEXT_FRAME);
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	1c59      	adds	r1, r3, #1
 800104e:	b2c8      	uxtb	r0, r1
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 8001052:	7008      	strb	r0, [r1, #0]
 8001054:	3348      	adds	r3, #72	; 0x48
 8001056:	4413      	add	r3, r2
 8001058:	1d19      	adds	r1, r3, #4
 800105a:	2304      	movs	r3, #4
 800105c:	2201      	movs	r2, #1
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f002 fd3e 	bl	8003ae0 <HAL_I2C_Slave_Seq_Receive_IT>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000774 	.word	0x20000774
 8001070:	20000778 	.word	0x20000778

08001074 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c,  (uint8_t*)(mainclass->pi2cBuf + offset++), 1, I2C_NEXT_FRAME);
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_I2C_SlaveTxCpltCallback+0x34>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	1c59      	adds	r1, r3, #1
 8001088:	b2c8      	uxtb	r0, r1
 800108a:	4907      	ldr	r1, [pc, #28]	; (80010a8 <HAL_I2C_SlaveTxCpltCallback+0x34>)
 800108c:	7008      	strb	r0, [r1, #0]
 800108e:	18d1      	adds	r1, r2, r3
 8001090:	2304      	movs	r3, #4
 8001092:	2201      	movs	r2, #1
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f002 fcb1 	bl	80039fc <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000774 	.word	0x20000774
 80010a8:	20000778 	.word	0x20000778

080010ac <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if( HAL_I2C_GetError(hi2c)==HAL_I2C_ERROR_AF )
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f002 fff1 	bl	800409c <HAL_I2C_GetError>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b04      	cmp	r3, #4
 80010be:	bf0c      	ite	eq
 80010c0:	2301      	moveq	r3, #1
 80010c2:	2300      	movne	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <HAL_I2C_ErrorCallback+0x2a>
		offset--;
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_I2C_ErrorCallback+0x34>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_I2C_ErrorCallback+0x34>)
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000778 	.word	0x20000778

080010e4 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
	...

080010f8 <cppmain>:

uint8_t initialized = false;
uint32_t lastTickInit;

void cppmain() {
 80010f8:	b598      	push	{r3, r4, r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	ws2812_init();
 80010fc:	f011 fc40 	bl	8012980 <_Z11ws2812_initv>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8001100:	f44f 735e 	mov.w	r3, #888	; 0x378
 8001104:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <cppmain+0xac>)
 8001106:	2100      	movs	r1, #0
 8001108:	4827      	ldr	r0, [pc, #156]	; (80011a8 <cppmain+0xb0>)
 800110a:	f005 fdd1 	bl	8006cb0 <HAL_TIM_PWM_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, ADC_BUF, ADC_CHANNELS);
 800110e:	2202      	movs	r2, #2
 8001110:	4926      	ldr	r1, [pc, #152]	; (80011ac <cppmain+0xb4>)
 8001112:	4827      	ldr	r0, [pc, #156]	; (80011b0 <cppmain+0xb8>)
 8001114:	f001 f932 	bl	800237c <HAL_ADC_Start_DMA>

	mainclass = new FFBWheel();
 8001118:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 800111c:	f014 f9b2 	bl	8015484 <_Znwj>
 8001120:	4603      	mov	r3, r0
 8001122:	461c      	mov	r4, r3
 8001124:	4620      	mov	r0, r4
 8001126:	f00c fc8d 	bl	800da44 <_ZN8FFBWheelC1Ev>
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <cppmain+0xbc>)
 800112c:	601c      	str	r4, [r3, #0]
	mainclass->usbInit();
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <cppmain+0xbc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f00d fa03 	bl	800e53e <_ZN8FFBWheel7usbInitEv>

	lastTickInit = HAL_GetTick();
 8001138:	f001 f81a 	bl	8002170 <HAL_GetTick>
 800113c:	4603      	mov	r3, r0
 800113e:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <cppmain+0xc0>)
 8001140:	6013      	str	r3, [r2, #0]

	while(running){
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <cppmain+0xc4>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d02a      	beq.n	80011a0 <cppmain+0xa8>
		if(HAL_GetTick() - lastTickInit > 5000 && !initialized)
 800114a:	f001 f811 	bl	8002170 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <cppmain+0xc0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f241 3288 	movw	r2, #5000	; 0x1388
 800115a:	4293      	cmp	r3, r2
 800115c:	d905      	bls.n	800116a <cppmain+0x72>
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <cppmain+0xc8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <cppmain+0x72>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <cppmain+0x74>
 800116a:	2300      	movs	r3, #0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00b      	beq.n	8001188 <cppmain+0x90>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <cppmain+0xcc>)
 8001178:	f002 fadc 	bl	8003734 <HAL_GPIO_WritePin>
			initialized = true;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <cppmain+0xc8>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
			HAL_I2C_EnableListen_IT(&hi2c1);
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <cppmain+0xd0>)
 8001184:	f002 fd1e 	bl	8003bc4 <HAL_I2C_EnableListen_IT>
		}
		mainclass->update();
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <cppmain+0xbc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f00c fe25 	bl	800dddc <_ZN8FFBWheel6updateEv>
		if(initialized)
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <cppmain+0xc8>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0d3      	beq.n	8001142 <cppmain+0x4a>
			updateLeds();
 800119a:	f011 fbd1 	bl	8012940 <_Z10updateLedsv>
	while(running){
 800119e:	e7d0      	b.n	8001142 <cppmain+0x4a>
	}

}
 80011a0:	bf00      	nop
 80011a2:	bd98      	pop	{r3, r4, r7, pc}
 80011a4:	200007d0 	.word	0x200007d0
 80011a8:	20001320 	.word	0x20001320
 80011ac:	200007a8 	.word	0x200007a8
 80011b0:	2000126c 	.word	0x2000126c
 80011b4:	20000774 	.word	0x20000774
 80011b8:	2000077c 	.word	0x2000077c
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000779 	.word	0x20000779
 80011c4:	40011000 	.word	0x40011000
 80011c8:	200011d8 	.word	0x200011d8

080011cc <EE_Format>:

//##########################################################################################################
//##########################################################################################################
//##########################################################################################################
bool	EE_Format(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
	uint32_t	error;
	HAL_FLASH_Unlock();
 80011d2:	f001 ff9b 	bl	800310c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	613b      	str	r3, [r7, #16]
	#if ( _EEPROM_F1_LOW_DESTINY==1 || _EEPROM_F1_MEDIUM_DESTINY==1 || _EEPROM_F1_HIGH_DESTINY==1 )
	flashErase.Banks = FLASH_BANK_1;
 80011da:	2301      	movs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
	#endif
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <EE_Format+0x50>)
 80011e0:	60fb      	str	r3, [r7, #12]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 80011e6:	f107 0214 	add.w	r2, r7, #20
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 f874 	bl	80032dc <HAL_FLASHEx_Erase>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <EE_Format+0x42>
	{
		HAL_FLASH_Lock();
 80011fa:	f001 ffad 	bl	8003158 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d001      	beq.n	800120a <EE_Format+0x3e>
			return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e004      	b.n	8001214 <EE_Format+0x48>
		else
			return true;
 800120a:	2301      	movs	r3, #1
 800120c:	e002      	b.n	8001214 <EE_Format+0x48>
	}
	HAL_FLASH_Lock();
 800120e:	f001 ffa3 	bl	8003158 <HAL_FLASH_Lock>
	return false;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0801fc00 	.word	0x0801fc00

08001220 <EE_Reads>:
	HAL_FLASH_Lock();
	return true;
}
//##########################################################################################################
bool EE_Reads(uint16_t StartVirtualAddress,uint16_t HowManyToRead,uint32_t* Data)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	603a      	str	r2, [r7, #0]
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	460b      	mov	r3, r1
 800122e:	80bb      	strh	r3, [r7, #4]
	if((StartVirtualAddress+HowManyToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 8001230:	88fa      	ldrh	r2, [r7, #6]
 8001232:	88bb      	ldrh	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800123a:	dd01      	ble.n	8001240 <EE_Reads+0x20>
		return false;
 800123c:	2300      	movs	r3, #0
 800123e:	e018      	b.n	8001272 <EE_Reads+0x52>
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	e00e      	b.n	8001264 <EE_Reads+0x44>
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800124e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	601a      	str	r2, [r3, #0]
		Data++;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3304      	adds	r3, #4
 800125c:	603b      	str	r3, [r7, #0]
	for(uint16_t	i=StartVirtualAddress ; i<HowManyToRead+StartVirtualAddress ; i++)
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	3301      	adds	r3, #1
 8001262:	81fb      	strh	r3, [r7, #14]
 8001264:	89fa      	ldrh	r2, [r7, #14]
 8001266:	88b9      	ldrh	r1, [r7, #4]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	440b      	add	r3, r1
 800126c:	429a      	cmp	r2, r3
 800126e:	dbea      	blt.n	8001246 <EE_Reads+0x26>
	}
	return true;
 8001270:	2301      	movs	r3, #1
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <EE_Writes>:
//##########################################################################################################
bool 	EE_Writes(uint16_t StartVirtualAddress,uint16_t HowManyToWrite,uint32_t* Data)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	603a      	str	r2, [r7, #0]
 8001286:	80fb      	strh	r3, [r7, #6]
 8001288:	460b      	mov	r3, r1
 800128a:	80bb      	strh	r3, [r7, #4]
	if((StartVirtualAddress+HowManyToWrite) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	88bb      	ldrh	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001296:	dd01      	ble.n	800129c <EE_Writes+0x20>
		return false;
 8001298:	2300      	movs	r3, #0
 800129a:	e02a      	b.n	80012f2 <EE_Writes+0x76>
		Data++;
	}
	if(EE_Format()==false)
		return false;
	#endif
	HAL_FLASH_Unlock();
 800129c:	f001 ff36 	bl	800310c <HAL_FLASH_Unlock>
			HAL_FLASH_Lock();
			return false;
		}
	}
	#else
	HAL_FLASH_Unlock();
 80012a0:	f001 ff34 	bl	800310c <HAL_FLASH_Unlock>
	for(uint16_t i=0; i<HowManyToWrite ; i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]
 80012a8:	e01c      	b.n	80012e4 <EE_Writes+0x68>
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,((i+StartVirtualAddress)*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)Data[i])!=HAL_OK)
 80012aa:	89fa      	ldrh	r2, [r7, #14]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80012b6:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	2002      	movs	r0, #2
 80012cc:	f001 feae 	bl	800302c <HAL_FLASH_Program>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <EE_Writes+0x62>
		{
			HAL_FLASH_Lock();
 80012d6:	f001 ff3f 	bl	8003158 <HAL_FLASH_Lock>
			return false;
 80012da:	2300      	movs	r3, #0
 80012dc:	e009      	b.n	80012f2 <EE_Writes+0x76>
	for(uint16_t i=0; i<HowManyToWrite ; i++)
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	3301      	adds	r3, #1
 80012e2:	81fb      	strh	r3, [r7, #14]
 80012e4:	89fa      	ldrh	r2, [r7, #14]
 80012e6:	88bb      	ldrh	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3de      	bcc.n	80012aa <EE_Writes+0x2e>
		}
	}
	#endif
	HAL_FLASH_Lock();
 80012ec:	f001 ff34 	bl	8003158 <HAL_FLASH_Lock>
	return true;
 80012f0:	2301      	movs	r3, #1
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f000 fedf 	bl	80020c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f815 	bl	8001330 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 fadb 	bl	80018c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f000 fab3 	bl	8001874 <MX_DMA_Init>
  MX_ADC1_Init();
 800130e:	f000 f86d 	bl	80013ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8001312:	f000 fa07 	bl	8001724 <MX_TIM3_Init>
  MX_USB_PCD_Init();
 8001316:	f000 faa7 	bl	8001868 <MX_USB_PCD_Init>
  MX_TIM4_Init();
 800131a:	f000 fa51 	bl	80017c0 <MX_TIM4_Init>
  MX_I2C1_Init();
 800131e:	f000 f8b3 	bl	8001488 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001322:	f000 f8df 	bl	80014e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001326:	f000 f989 	bl	800163c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  cppmain();
 800132a:	f7ff fee5 	bl	80010f8 <cppmain>
  while (1)
 800132e:	e7fe      	b.n	800132e <main+0x34>

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	; 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	2228      	movs	r2, #40	; 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f015 fa6c 	bl	801681c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001360:	2301      	movs	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136e:	2301      	movs	r3, #1
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800137c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001380:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	4618      	mov	r0, r3
 8001388:	f004 fed6 	bl	8006138 <HAL_RCC_OscConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001392:	f000 fb09 	bl	80019a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001396:	230f      	movs	r3, #15
 8001398:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2102      	movs	r1, #2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 f940 	bl	8006638 <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013be:	f000 faf3 	bl	80019a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80013c2:	2312      	movs	r3, #18
 80013c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f005 fab6 	bl	8006944 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013de:	f000 fae3 	bl	80019a8 <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3750      	adds	r7, #80	; 0x50
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_ADC1_Init+0x94>)
 80013fe:	4a21      	ldr	r2, [pc, #132]	; (8001484 <MX_ADC1_Init+0x98>)
 8001400:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_ADC1_Init+0x94>)
 8001404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001408:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC1_Init+0x94>)
 800140c:	2201      	movs	r2, #1
 800140e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_ADC1_Init+0x94>)
 8001412:	2200      	movs	r2, #0
 8001414:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_ADC1_Init+0x94>)
 8001418:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800141c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_ADC1_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_ADC1_Init+0x94>)
 8001426:	2202      	movs	r2, #2
 8001428:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800142a:	4815      	ldr	r0, [pc, #84]	; (8001480 <MX_ADC1_Init+0x94>)
 800142c:	f000 fece 	bl	80021cc <HAL_ADC_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001436:	f000 fab7 	bl	80019a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800143e:	2301      	movs	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001442:	2307      	movs	r3, #7
 8001444:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_ADC1_Init+0x94>)
 800144c:	f001 f886 	bl	800255c <HAL_ADC_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001456:	f000 faa7 	bl	80019a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800145a:	2301      	movs	r3, #1
 800145c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800145e:	2302      	movs	r3, #2
 8001460:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_ADC1_Init+0x94>)
 8001468:	f001 f878 	bl	800255c <HAL_ADC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001472:	f000 fa99 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000126c 	.word	0x2000126c
 8001484:	40012400 	.word	0x40012400

08001488 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_I2C1_Init+0x50>)
 800148e:	4a13      	ldr	r2, [pc, #76]	; (80014dc <MX_I2C1_Init+0x54>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_I2C1_Init+0x50>)
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <MX_I2C1_Init+0x58>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 74;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014a0:	224a      	movs	r2, #74	; 0x4a
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_I2C1_Init+0x50>)
 80014c6:	f002 f965 	bl	8003794 <HAL_I2C_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d0:	f000 fa6a 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200011d8 	.word	0x200011d8
 80014dc:	40005400 	.word	0x40005400
 80014e0:	00061a80 	.word	0x00061a80

080014e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b096      	sub	sp, #88	; 0x58
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2220      	movs	r2, #32
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f015 f97d 	bl	801681c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <MX_TIM1_Init+0x150>)
 8001524:	4a44      	ldr	r2, [pc, #272]	; (8001638 <MX_TIM1_Init+0x154>)
 8001526:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001528:	4b42      	ldr	r3, [pc, #264]	; (8001634 <MX_TIM1_Init+0x150>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <MX_TIM1_Init+0x150>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8001534:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <MX_TIM1_Init+0x150>)
 8001536:	f640 620f 	movw	r2, #3599	; 0xe0f
 800153a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <MX_TIM1_Init+0x150>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <MX_TIM1_Init+0x150>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <MX_TIM1_Init+0x150>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800154e:	4839      	ldr	r0, [pc, #228]	; (8001634 <MX_TIM1_Init+0x150>)
 8001550:	f005 faae 	bl	8006ab0 <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800155a:	f000 fa25 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001568:	4619      	mov	r1, r3
 800156a:	4832      	ldr	r0, [pc, #200]	; (8001634 <MX_TIM1_Init+0x150>)
 800156c:	f005 ff02 	bl	8007374 <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001576:	f000 fa17 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800157a:	482e      	ldr	r0, [pc, #184]	; (8001634 <MX_TIM1_Init+0x150>)
 800157c:	f005 fae6 	bl	8006b4c <HAL_TIM_PWM_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001586:	f000 fa0f 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001592:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001596:	4619      	mov	r1, r3
 8001598:	4826      	ldr	r0, [pc, #152]	; (8001634 <MX_TIM1_Init+0x150>)
 800159a:	f006 fb0b 	bl	8007bb4 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015a4:	f000 fa00 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a8:	2360      	movs	r3, #96	; 0x60
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4819      	ldr	r0, [pc, #100]	; (8001634 <MX_TIM1_Init+0x150>)
 80015ce:	f005 fe0b 	bl	80071e8 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015d8:	f000 f9e6 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	2204      	movs	r2, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <MX_TIM1_Init+0x150>)
 80015e6:	f005 fdff 	bl	80071e8 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015f0:	f000 f9da 	bl	80019a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4807      	ldr	r0, [pc, #28]	; (8001634 <MX_TIM1_Init+0x150>)
 8001618:	f006 fb10 	bl	8007c3c <HAL_TIMEx_ConfigBreakDeadTime>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001622:	f000 f9c1 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <MX_TIM1_Init+0x150>)
 8001628:	f000 fba6 	bl	8001d78 <HAL_TIM_MspPostInit>

}
 800162c:	bf00      	nop
 800162e:	3758      	adds	r7, #88	; 0x58
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200012e0 	.word	0x200012e0
 8001638:	40012c00 	.word	0x40012c00

0800163c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <MX_TIM2_Init+0xe4>)
 800166e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001674:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <MX_TIM2_Init+0xe4>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b29      	ldr	r3, [pc, #164]	; (8001720 <MX_TIM2_Init+0xe4>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <MX_TIM2_Init+0xe4>)
 8001682:	2259      	movs	r2, #89	; 0x59
 8001684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <MX_TIM2_Init+0xe4>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <MX_TIM2_Init+0xe4>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001692:	4823      	ldr	r0, [pc, #140]	; (8001720 <MX_TIM2_Init+0xe4>)
 8001694:	f005 fa0c 	bl	8006ab0 <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800169e:	f000 f983 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ac:	4619      	mov	r1, r3
 80016ae:	481c      	ldr	r0, [pc, #112]	; (8001720 <MX_TIM2_Init+0xe4>)
 80016b0:	f005 fe60 	bl	8007374 <HAL_TIM_ConfigClockSource>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016ba:	f000 f975 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016be:	4818      	ldr	r0, [pc, #96]	; (8001720 <MX_TIM2_Init+0xe4>)
 80016c0:	f005 fa44 	bl	8006b4c <HAL_TIM_PWM_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80016ca:	f000 f96d 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	4619      	mov	r1, r3
 80016dc:	4810      	ldr	r0, [pc, #64]	; (8001720 <MX_TIM2_Init+0xe4>)
 80016de:	f006 fa69 	bl	8007bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016e8:	f000 f95e 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	4619      	mov	r1, r3
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <MX_TIM2_Init+0xe4>)
 8001704:	f005 fd70 	bl	80071e8 <HAL_TIM_PWM_ConfigChannel>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800170e:	f000 f94b 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <MX_TIM2_Init+0xe4>)
 8001714:	f000 fb30 	bl	8001d78 <HAL_TIM_MspPostInit>

}
 8001718:	bf00      	nop
 800171a:	3738      	adds	r7, #56	; 0x38
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20001320 	.word	0x20001320

08001724 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MX_TIM3_Init+0x94>)
 8001742:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <MX_TIM3_Init+0x98>)
 8001744:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <MX_TIM3_Init+0x94>)
 8001748:	2247      	movs	r2, #71	; 0x47
 800174a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <MX_TIM3_Init+0x94>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <MX_TIM3_Init+0x94>)
 8001754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001758:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <MX_TIM3_Init+0x94>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_TIM3_Init+0x94>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001766:	4814      	ldr	r0, [pc, #80]	; (80017b8 <MX_TIM3_Init+0x94>)
 8001768:	f005 f9a2 	bl	8006ab0 <HAL_TIM_Base_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001772:	f000 f919 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	4619      	mov	r1, r3
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <MX_TIM3_Init+0x94>)
 8001784:	f005 fdf6 	bl	8007374 <HAL_TIM_ConfigClockSource>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800178e:	f000 f90b 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <MX_TIM3_Init+0x94>)
 80017a0:	f006 fa08 	bl	8007bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017aa:	f000 f8fd 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000122c 	.word	0x2000122c
 80017bc:	40000400 	.word	0x40000400

080017c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2224      	movs	r2, #36	; 0x24
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f015 f824 	bl	801681c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017de:	4a21      	ldr	r2, [pc, #132]	; (8001864 <MX_TIM4_Init+0xa4>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017ea:	2220      	movs	r2, #32
 80017ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_TIM4_Init+0xa0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001802:	2303      	movs	r3, #3
 8001804:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800180a:	2301      	movs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800181a:	2301      	movs	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_TIM4_Init+0xa0>)
 800182e:	f005 fb45 	bl	8006ebc <HAL_TIM_Encoder_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001838:	f000 f8b6 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM4_Init+0xa0>)
 800184a:	f006 f9b3 	bl	8007bb4 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001854:	f000 f8a8 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3730      	adds	r7, #48	; 0x30
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20001198 	.word	0x20001198
 8001864:	40000800 	.word	0x40000800

08001868 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN USB_Init 2 */
#endif
  /* USER CODE END USB_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_DMA_Init+0x48>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <MX_DMA_Init+0x48>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6153      	str	r3, [r2, #20]
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <MX_DMA_Init+0x48>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2107      	movs	r1, #7
 8001896:	200b      	movs	r0, #11
 8001898:	f001 f921 	bl	8002ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800189c:	200b      	movs	r0, #11
 800189e:	f001 f93a 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 6, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2106      	movs	r1, #6
 80018a6:	200f      	movs	r0, #15
 80018a8:	f001 f919 	bl	8002ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018ac:	200f      	movs	r0, #15
 80018ae:	f001 f932 	bl	8002b16 <HAL_NVIC_EnableIRQ>

}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <MX_GPIO_Init+0xd8>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <MX_GPIO_Init+0xd8>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <MX_GPIO_Init+0xd8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <MX_GPIO_Init+0xd8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a29      	ldr	r2, [pc, #164]	; (8001998 <MX_GPIO_Init+0xd8>)
 80018f2:	f043 0320 	orr.w	r3, r3, #32
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <MX_GPIO_Init+0xd8>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <MX_GPIO_Init+0xd8>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a23      	ldr	r2, [pc, #140]	; (8001998 <MX_GPIO_Init+0xd8>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <MX_GPIO_Init+0xd8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_GPIO_Init+0xd8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <MX_GPIO_Init+0xd8>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_GPIO_Init+0xd8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193a:	4818      	ldr	r0, [pc, #96]	; (800199c <MX_GPIO_Init+0xdc>)
 800193c:	f001 fefa 	bl	8003734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2302      	movs	r3, #2
 8001950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4619      	mov	r1, r3
 8001958:	4810      	ldr	r0, [pc, #64]	; (800199c <MX_GPIO_Init+0xdc>)
 800195a:	f001 fd67 	bl	800342c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIN1_Pin */
  GPIO_InitStruct.Pin = DIN1_Pin;
 800195e:	2308      	movs	r3, #8
 8001960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001966:	2301      	movs	r3, #1
 8001968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIN1_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	480b      	ldr	r0, [pc, #44]	; (80019a0 <MX_GPIO_Init+0xe0>)
 8001972:	f001 fd5b 	bl	800342c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Z_Pin */
  GPIO_InitStruct.Pin = ENCODER_Z_Pin;
 8001976:	2320      	movs	r3, #32
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_GPIO_Init+0xe4>)
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197e:	2301      	movs	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_GPIO_Init+0xe0>)
 800198a:	f001 fd4f 	bl	800342c <HAL_GPIO_Init>

}
 800198e:	bf00      	nop
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40011000 	.word	0x40011000
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	10110000 	.word	0x10110000

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80019ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <Error_Handler+0x18>)
 80019b2:	f001 fed7 	bl	8003764 <HAL_GPIO_TogglePin>
		HAL_Delay(5000);
 80019b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80019ba:	f000 fbe3 	bl	8002184 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80019be:	e7f5      	b.n	80019ac <Error_Handler+0x4>
 80019c0:	40011000 	.word	0x40011000

080019c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_MspInit+0xa4>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <HAL_MspInit+0xa4>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6193      	str	r3, [r2, #24]
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_MspInit+0xa4>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_MspInit+0xa4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <HAL_MspInit+0xa4>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_MspInit+0xa4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 13, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	210d      	movs	r1, #13
 80019fe:	f06f 000b 	mvn.w	r0, #11
 8001a02:	f001 f86c 	bl	8002ade <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 12, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	210c      	movs	r1, #12
 8001a0a:	f06f 000a 	mvn.w	r0, #10
 8001a0e:	f001 f866 	bl	8002ade <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 11, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	210b      	movs	r1, #11
 8001a16:	f06f 0009 	mvn.w	r0, #9
 8001a1a:	f001 f860 	bl	8002ade <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 10, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	210a      	movs	r1, #10
 8001a22:	f06f 0004 	mvn.w	r0, #4
 8001a26:	f001 f85a 	bl	8002ade <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 9, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2109      	movs	r1, #9
 8001a2e:	f06f 0003 	mvn.w	r0, #3
 8001a32:	f001 f854 	bl	8002ade <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	210f      	movs	r1, #15
 8001a3a:	f06f 0001 	mvn.w	r0, #1
 8001a3e:	f001 f84e 	bl	8002ade <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_MspInit+0xa8>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_MspInit+0xa8>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000

08001a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <HAL_ADC_MspInit+0xbc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d149      	bne.n	8001b24 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_ADC_MspInit+0xc0>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <HAL_ADC_MspInit+0xc0>)
 8001a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_ADC_MspInit+0xc0>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_ADC_MspInit+0xc0>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <HAL_ADC_MspInit+0xc0>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_ADC_MspInit+0xc0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	4819      	ldr	r0, [pc, #100]	; (8001b34 <HAL_ADC_MspInit+0xc4>)
 8001ad0:	f001 fcac 	bl	800342c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001ad6:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_ADC_MspInit+0xcc>)
 8001ad8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001afa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001afe:	2220      	movs	r2, #32
 8001b00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001b0a:	f001 f81f 	bl	8002b4c <HAL_DMA_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b14:	f7ff ff48 	bl	80019a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001b1c:	621a      	str	r2, [r3, #32]
 8001b1e:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_ADC_MspInit+0xc8>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40012400 	.word	0x40012400
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010800 	.word	0x40010800
 8001b38:	2000129c 	.word	0x2000129c
 8001b3c:	40020008 	.word	0x40020008

08001b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <HAL_I2C_MspInit+0xb0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d142      	bne.n	8001be6 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_I2C_MspInit+0xb4>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <HAL_I2C_MspInit+0xb4>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_I2C_MspInit+0xb4>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7e:	2312      	movs	r3, #18
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <HAL_I2C_MspInit+0xb8>)
 8001b8e:	f001 fc4d 	bl	800342c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_I2C_MspInit+0xbc>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <HAL_I2C_MspInit+0xbc>)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_I2C_MspInit+0xb4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_I2C_MspInit+0xb4>)
 8001bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_I2C_MspInit+0xb4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	201f      	movs	r0, #31
 8001bcc:	f000 ff87 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bd0:	201f      	movs	r0, #31
 8001bd2:	f000 ffa0 	bl	8002b16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2101      	movs	r1, #1
 8001bda:	2020      	movs	r0, #32
 8001bdc:	f000 ff7f 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001be0:	2020      	movs	r0, #32
 8001be2:	f000 ff98 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40005400 	.word	0x40005400
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40010000 	.word	0x40010000

08001c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a32      	ldr	r2, [pc, #200]	; (8001cd8 <HAL_TIM_Base_MspInit+0xd8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10c      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_TIM_Base_MspInit+0xdc>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <HAL_TIM_Base_MspInit+0xdc>)
 8001c18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c1c:	6193      	str	r3, [r2, #24]
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_TIM_Base_MspInit+0xdc>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c2a:	e051      	b.n	8001cd0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d133      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_TIM_Base_MspInit+0xdc>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a28      	ldr	r2, [pc, #160]	; (8001cdc <HAL_TIM_Base_MspInit+0xdc>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	61d3      	str	r3, [r2, #28]
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_TIM_Base_MspInit+0xdc>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_TIM_Base_MspInit+0xe4>)
 8001c52:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c56:	2210      	movs	r2, #16
 8001c58:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c76:	2220      	movs	r2, #32
 8001c78:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001c80:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c82:	f000 ff63 	bl	8002b4c <HAL_DMA_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_TIM_Base_MspInit+0x90>
      Error_Handler();
 8001c8c:	f7ff fe8c 	bl	80019a8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <HAL_TIM_Base_MspInit+0xe0>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001c9c:	e018      	b.n	8001cd0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <HAL_TIM_Base_MspInit+0xe8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d113      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_TIM_Base_MspInit+0xdc>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_TIM_Base_MspInit+0xdc>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	61d3      	str	r3, [r2, #28]
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_TIM_Base_MspInit+0xdc>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2105      	movs	r1, #5
 8001cc4:	201d      	movs	r0, #29
 8001cc6:	f000 ff0a 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cca:	201d      	movs	r0, #29
 8001ccc:	f000 ff23 	bl	8002b16 <HAL_NVIC_EnableIRQ>
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	20001154 	.word	0x20001154
 8001ce4:	40020058 	.word	0x40020058
 8001ce8:	40000400 	.word	0x40000400

08001cec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_TIM_Encoder_MspInit+0x80>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d12b      	bne.n	8001d64 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	61d3      	str	r3, [r2, #28]
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001d3c:	23c0      	movs	r3, #192	; 0xc0
 8001d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4809      	ldr	r0, [pc, #36]	; (8001d74 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d50:	f001 fb6c 	bl	800342c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2104      	movs	r1, #4
 8001d58:	201e      	movs	r0, #30
 8001d5a:	f000 fec0 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d5e:	201e      	movs	r0, #30
 8001d60:	f000 fed9 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d64:	bf00      	nop
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40010c00 	.word	0x40010c00

08001d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_TIM_MspPostInit+0xbc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d119      	bne.n	8001dcc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <HAL_TIM_MspPostInit+0xc0>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a26      	ldr	r2, [pc, #152]	; (8001e38 <HAL_TIM_MspPostInit+0xc0>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <HAL_TIM_MspPostInit+0xc0>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_B_Pin|MOTOR_A_Pin;
 8001db0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	481d      	ldr	r0, [pc, #116]	; (8001e3c <HAL_TIM_MspPostInit+0xc4>)
 8001dc6:	f001 fb31 	bl	800342c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dca:	e02f      	b.n	8001e2c <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd4:	d12a      	bne.n	8001e2c <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_TIM_MspPostInit+0xc0>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <HAL_TIM_MspPostInit+0xc0>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6193      	str	r3, [r2, #24]
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_TIM_MspPostInit+0xc0>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	480e      	ldr	r0, [pc, #56]	; (8001e3c <HAL_TIM_MspPostInit+0xc4>)
 8001e04:	f001 fb12 	bl	800342c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_TIM_MspPostInit+0xc8>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
 8001e26:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_TIM_MspPostInit+0xc8>)
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	6053      	str	r3, [r2, #4]
}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	40010000 	.word	0x40010000

08001e44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_PCD_MspInit+0x44>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d113      	bne.n	8001e7e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_PCD_MspInit+0x48>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <HAL_PCD_MspInit+0x48>)
 8001e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_PCD_MspInit+0x48>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2102      	movs	r1, #2
 8001e72:	2014      	movs	r0, #20
 8001e74:	f000 fe33 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001e78:	2014      	movs	r0, #20
 8001e7a:	f000 fe4c 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USB_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40005c00 	.word	0x40005c00
 8001e8c:	40021000 	.word	0x40021000

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <HardFault_Handler+0x4>

08001ea2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <MemManage_Handler+0x4>

08001ea8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <BusFault_Handler+0x4>

08001eae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <UsageFault_Handler+0x4>

08001eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001edc:	f000 f936 	bl	800214c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <DMA1_Channel1_IRQHandler+0x10>)
 8001eea:	f000 ff5f 	bl	8002dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000129c 	.word	0x2000129c

08001ef8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
  //HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_1);
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <DMA1_Channel5_IRQHandler+0x10>)
 8001efe:	f000 ff55 	bl	8002dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20001154 	.word	0x20001154

08001f0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <TIM3_IRQHandler+0x10>)
 8001f12:	f005 f861 	bl	8006fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000122c 	.word	0x2000122c

08001f20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <TIM4_IRQHandler+0x10>)
 8001f26:	f005 f857 	bl	8006fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20001198 	.word	0x20001198

08001f34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <I2C1_EV_IRQHandler+0x10>)
 8001f3a:	f001 fe78 	bl	8003c2e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200011d8 	.word	0x200011d8

08001f48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <I2C1_ER_IRQHandler+0x10>)
 8001f4e:	f001 ffd4 	bl	8003efa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200011d8 	.word	0x200011d8

08001f5c <USB_LP_CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 1 */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f62:	f003 fb0f 	bl	8005584 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20001360 	.word	0x20001360

08001f70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	return 1;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <_kill>:

int _kill(int pid, int sig)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f88:	f014 fbca 	bl	8016720 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2216      	movs	r2, #22
 8001f90:	601a      	str	r2, [r3, #0]
	return -1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_exit>:

void _exit (int status)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffe7 	bl	8001f7e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fb0:	e7fe      	b.n	8001fb0 <_exit+0x12>
	...

08001fb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x50>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <_sbrk+0x16>
		heap_end = &end;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <_sbrk+0x50>)
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <_sbrk+0x54>)
 8001fc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <_sbrk+0x50>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <_sbrk+0x50>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	466a      	mov	r2, sp
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d907      	bls.n	8001fee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fde:	f014 fb9f 	bl	8016720 <__errno>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	e006      	b.n	8001ffc <_sbrk+0x48>
	}

	heap_end += incr;
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <_sbrk+0x50>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a03      	ldr	r2, [pc, #12]	; (8002004 <_sbrk+0x50>)
 8001ff8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000780 	.word	0x20000780
 8002008:	20002018 	.word	0x20002018

0800200c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <SystemInit+0x5c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <SystemInit+0x5c>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <SystemInit+0x5c>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4911      	ldr	r1, [pc, #68]	; (8002068 <SystemInit+0x5c>)
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <SystemInit+0x60>)
 8002024:	4013      	ands	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <SystemInit+0x5c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <SystemInit+0x5c>)
 800202e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <SystemInit+0x5c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <SystemInit+0x5c>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <SystemInit+0x5c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <SystemInit+0x5c>)
 800204a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800204e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <SystemInit+0x5c>)
 8002052:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002056:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <SystemInit+0x64>)
 800205a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800205e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40021000 	.word	0x40021000
 800206c:	f8ff0000 	.word	0xf8ff0000
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002074:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002076:	e003      	b.n	8002080 <LoopCopyDataInit>

08002078 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800207a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800207c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800207e:	3104      	adds	r1, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002080:	480a      	ldr	r0, [pc, #40]	; (80020ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002084:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002086:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002088:	d3f6      	bcc.n	8002078 <CopyDataInit>
  ldr r2, =_sbss
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800208c:	e002      	b.n	8002094 <LoopFillZerobss>

0800208e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002090:	f842 3b04 	str.w	r3, [r2], #4

08002094 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002096:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002098:	d3f9      	bcc.n	800208e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800209a:	f7ff ffb7 	bl	800200c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209e:	f014 fb45 	bl	801672c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020a2:	f7ff f92a 	bl	80012fa <main>
  bx lr
 80020a6:	4770      	bx	lr
  ldr r3, =_sidata
 80020a8:	08017e30 	.word	0x08017e30
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020b0:	20000758 	.word	0x20000758
  ldr r2, =_sbss
 80020b4:	20000758 	.word	0x20000758
  ldr r3, = _ebss
 80020b8:	20002014 	.word	0x20002014

080020bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020bc:	e7fe      	b.n	80020bc <ADC1_2_IRQHandler>
	...

080020c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_Init+0x28>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_Init+0x28>)
 80020ca:	f043 0310 	orr.w	r3, r3, #16
 80020ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f000 fcf9 	bl	8002ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	200e      	movs	r0, #14
 80020d8:	f000 f808 	bl	80020ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020dc:	f7ff fc72 	bl	80019c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000

080020ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_InitTick+0x54>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_InitTick+0x58>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	fbb3 f3f1 	udiv	r3, r3, r1
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fd11 	bl	8002b32 <HAL_SYSTICK_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00e      	b.n	8002138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d80a      	bhi.n	8002136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002120:	2200      	movs	r2, #0
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f000 fcd9 	bl	8002ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_InitTick+0x5c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000004 	.word	0x20000004
 8002144:	2000000c 	.word	0x2000000c
 8002148:	20000008 	.word	0x20000008

0800214c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_IncTick+0x1c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_IncTick+0x20>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a03      	ldr	r2, [pc, #12]	; (800216c <HAL_IncTick+0x20>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	2000000c 	.word	0x2000000c
 800216c:	200015cc 	.word	0x200015cc

08002170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <HAL_GetTick+0x10>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	200015cc 	.word	0x200015cc

08002184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff fff0 	bl	8002170 <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_Delay+0x44>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffe0 	bl	8002170 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000000c 	.word	0x2000000c

080021cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0be      	b.n	800236c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fc30 	bl	8001a70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 faed 	bl	80027f0 <ADC_ConversionStop_Disable>
 8002216:	4603      	mov	r3, r0
 8002218:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 8099 	bne.w	800235a <HAL_ADC_Init+0x18e>
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 8095 	bne.w	800235a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002238:	f023 0302 	bic.w	r3, r3, #2
 800223c:	f043 0202 	orr.w	r2, r3, #2
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800224c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7b1b      	ldrb	r3, [r3, #12]
 8002252:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002254:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4313      	orrs	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002264:	d003      	beq.n	800226e <HAL_ADC_Init+0xa2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_ADC_Init+0xa8>
 800226e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002272:	e000      	b.n	8002276 <HAL_ADC_Init+0xaa>
 8002274:	2300      	movs	r3, #0
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7d1b      	ldrb	r3, [r3, #20]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d119      	bne.n	80022b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7b1b      	ldrb	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	3b01      	subs	r3, #1
 8002292:	035a      	lsls	r2, r3, #13
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e00b      	b.n	80022b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_ADC_Init+0x1a8>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	430b      	orrs	r3, r1
 80022de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e8:	d003      	beq.n	80022f2 <HAL_ADC_Init+0x126>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d104      	bne.n	80022fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	051b      	lsls	r3, r3, #20
 80022fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	430a      	orrs	r2, r1
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_ADC_Init+0x1ac>)
 8002318:	4013      	ands	r3, r2
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d10b      	bne.n	8002338 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002336:	e018      	b.n	800236a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	f023 0312 	bic.w	r3, r3, #18
 8002340:	f043 0210 	orr.w	r2, r3, #16
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f043 0201 	orr.w	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002358:	e007      	b.n	800236a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	f043 0210 	orr.w	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800236a:	7dfb      	ldrb	r3, [r7, #23]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	ffe1f7fd 	.word	0xffe1f7fd
 8002378:	ff1f0efe 	.word	0xff1f0efe

0800237c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a64      	ldr	r2, [pc, #400]	; (8002524 <HAL_ADC_Start_DMA+0x1a8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d004      	beq.n	80023a0 <HAL_ADC_Start_DMA+0x24>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a63      	ldr	r2, [pc, #396]	; (8002528 <HAL_ADC_Start_DMA+0x1ac>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d106      	bne.n	80023ae <HAL_ADC_Start_DMA+0x32>
 80023a0:	4b60      	ldr	r3, [pc, #384]	; (8002524 <HAL_ADC_Start_DMA+0x1a8>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 80b3 	bne.w	8002514 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_Start_DMA+0x40>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e0ae      	b.n	800251a <HAL_ADC_Start_DMA+0x19e>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f9c1 	bl	800274c <ADC_Enable>
 80023ca:	4603      	mov	r3, r0
 80023cc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f040 809a 	bne.w	800250a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4e      	ldr	r2, [pc, #312]	; (8002528 <HAL_ADC_Start_DMA+0x1ac>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d105      	bne.n	8002400 <HAL_ADC_Start_DMA+0x84>
 80023f4:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_ADC_Start_DMA+0x1a8>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d115      	bne.n	800242c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	2b00      	cmp	r3, #0
 8002418:	d026      	beq.n	8002468 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002422:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800242a:	e01d      	b.n	8002468 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a39      	ldr	r2, [pc, #228]	; (8002524 <HAL_ADC_Start_DMA+0x1a8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <HAL_ADC_Start_DMA+0xd0>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a38      	ldr	r2, [pc, #224]	; (8002528 <HAL_ADC_Start_DMA+0x1ac>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10d      	bne.n	8002468 <HAL_ADC_Start_DMA+0xec>
 800244c:	4b35      	ldr	r3, [pc, #212]	; (8002524 <HAL_ADC_Start_DMA+0x1a8>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002460:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f023 0206 	bic.w	r2, r3, #6
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002480:	e002      	b.n	8002488 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <HAL_ADC_Start_DMA+0x1b0>)
 8002496:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a24      	ldr	r2, [pc, #144]	; (8002530 <HAL_ADC_Start_DMA+0x1b4>)
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a23      	ldr	r2, [pc, #140]	; (8002534 <HAL_ADC_Start_DMA+0x1b8>)
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0202 	mvn.w	r2, #2
 80024b0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a18      	ldr	r0, [r3, #32]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	334c      	adds	r3, #76	; 0x4c
 80024cc:	4619      	mov	r1, r3
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f000 fb95 	bl	8002c00 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024e4:	d108      	bne.n	80024f8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024f4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024f6:	e00f      	b.n	8002518 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002506:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002508:	e006      	b.n	8002518 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002512:	e001      	b.n	8002518 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002518:	7dfb      	ldrb	r3, [r7, #23]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40012400 	.word	0x40012400
 8002528:	40012800 	.word	0x40012800
 800252c:	08002865 	.word	0x08002865
 8002530:	080028e1 	.word	0x080028e1
 8002534:	080028fd 	.word	0x080028fd

08002538 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x20>
 8002578:	2302      	movs	r3, #2
 800257a:	e0dc      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1da>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d81c      	bhi.n	80025c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b05      	subs	r3, #5
 800259e:	221f      	movs	r2, #31
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b05      	subs	r3, #5
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34
 80025c4:	e03c      	b.n	8002640 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d81c      	bhi.n	8002608 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b23      	subs	r3, #35	; 0x23
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	4019      	ands	r1, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b23      	subs	r3, #35	; 0x23
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
 8002606:	e01b      	b.n	8002640 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3b41      	subs	r3, #65	; 0x41
 800261a:	221f      	movs	r2, #31
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	4019      	ands	r1, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b41      	subs	r3, #65	; 0x41
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d91c      	bls.n	8002682 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68d9      	ldr	r1, [r3, #12]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	3b1e      	subs	r3, #30
 800265a:	2207      	movs	r2, #7
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	4019      	ands	r1, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6898      	ldr	r0, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	3b1e      	subs	r3, #30
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]
 8002680:	e019      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6919      	ldr	r1, [r3, #16]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	2207      	movs	r2, #7
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	4019      	ands	r1, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6898      	ldr	r0, [r3, #8]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	fa00 f203 	lsl.w	r2, r0, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d003      	beq.n	80026c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026c2:	2b11      	cmp	r3, #17
 80026c4:	d132      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_ADC_ConfigChannel+0x1e4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d125      	bne.n	800271c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d126      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026ec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d11a      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_ADC_ConfigChannel+0x1e8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <HAL_ADC_ConfigChannel+0x1ec>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0c9a      	lsrs	r2, r3, #18
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800270c:	e002      	b.n	8002714 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3b01      	subs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <HAL_ADC_ConfigChannel+0x1b2>
 800271a:	e007      	b.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	40012400 	.word	0x40012400
 8002744:	20000004 	.word	0x20000004
 8002748:	431bde83 	.word	0x431bde83

0800274c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d039      	beq.n	80027de <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <ADC_Enable+0x9c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <ADC_Enable+0xa0>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002788:	e002      	b.n	8002790 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3b01      	subs	r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f9      	bne.n	800278a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002796:	f7ff fceb 	bl	8002170 <HAL_GetTick>
 800279a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800279c:	e018      	b.n	80027d0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800279e:	f7ff fce7 	bl	8002170 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d911      	bls.n	80027d0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d1df      	bne.n	800279e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000004 	.word	0x20000004
 80027ec:	431bde83 	.word	0x431bde83

080027f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d127      	bne.n	800285a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800281a:	f7ff fca9 	bl	8002170 <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002820:	e014      	b.n	800284c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002822:	f7ff fca5 	bl	8002170 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d90d      	bls.n	800284c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f043 0210 	orr.w	r2, r3, #16
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e007      	b.n	800285c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d0e3      	beq.n	8002822 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800287a:	2b00      	cmp	r3, #0
 800287c:	d127      	bne.n	80028ce <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002894:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002898:	d115      	bne.n	80028c6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d111      	bne.n	80028c6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f00f fc92 	bl	80121f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80028cc:	e004      	b.n	80028d8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff fe22 	bl	8002538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	f043 0204 	orr.w	r2, r3, #4
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7ff fe11 	bl	800254a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800294c:	4013      	ands	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800295c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002962:	4a04      	ldr	r2, [pc, #16]	; (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60d3      	str	r3, [r2, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <__NVIC_GetPriorityGrouping+0x18>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	f003 0307 	and.w	r3, r3, #7
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	db0b      	blt.n	80029be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	4906      	ldr	r1, [pc, #24]	; (80029c8 <__NVIC_EnableIRQ+0x34>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2001      	movs	r0, #1
 80029b6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a94:	d301      	bcc.n	8002a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00f      	b.n	8002aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <SysTick_Config+0x40>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	f7ff ff90 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <SysTick_Config+0x40>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SysTick_Config+0x40>)
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	e000e010 	.word	0xe000e010

08002ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff2d 	bl	8002930 <__NVIC_SetPriorityGrouping>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff42 	bl	8002978 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff90 	bl	8002a20 <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5f 	bl	80029cc <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff35 	bl	8002994 <__NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffa2 	bl	8002a84 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e043      	b.n	8002bea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_DMA_Init+0xa8>)
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <HAL_DMA_Init+0xac>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	009a      	lsls	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_DMA_Init+0xb0>)
 8002b7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b96:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	bffdfff8 	.word	0xbffdfff8
 8002bf8:	cccccccd 	.word	0xcccccccd
 8002bfc:	40020000 	.word	0x40020000

08002c00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Start_IT+0x20>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e04a      	b.n	8002cb6 <HAL_DMA_Start_IT+0xb6>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d13a      	bne.n	8002ca8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f9ba 	bl	8002fd0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 020e 	orr.w	r2, r2, #14
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e00f      	b.n	8002c96 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0204 	bic.w	r2, r2, #4
 8002c84:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 020a 	orr.w	r2, r2, #10
 8002c94:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e005      	b.n	8002cb4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d005      	beq.n	8002ce2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2204      	movs	r2, #4
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e051      	b.n	8002d86 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 020e 	bic.w	r2, r2, #14
 8002cf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_DMA_Abort_IT+0xd0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d029      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xa0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_DMA_Abort_IT+0xd4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d022      	beq.n	8002d5c <HAL_DMA_Abort_IT+0x9c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_DMA_Abort_IT+0xd8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d01a      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x96>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_DMA_Abort_IT+0xdc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d012      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x90>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_DMA_Abort_IT+0xe0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00a      	beq.n	8002d4a <HAL_DMA_Abort_IT+0x8a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <HAL_DMA_Abort_IT+0xe4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d102      	bne.n	8002d44 <HAL_DMA_Abort_IT+0x84>
 8002d3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d42:	e00e      	b.n	8002d62 <HAL_DMA_Abort_IT+0xa2>
 8002d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d48:	e00b      	b.n	8002d62 <HAL_DMA_Abort_IT+0xa2>
 8002d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d4e:	e008      	b.n	8002d62 <HAL_DMA_Abort_IT+0xa2>
 8002d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d54:	e005      	b.n	8002d62 <HAL_DMA_Abort_IT+0xa2>
 8002d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5a:	e002      	b.n	8002d62 <HAL_DMA_Abort_IT+0xa2>
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	e000      	b.n	8002d62 <HAL_DMA_Abort_IT+0xa2>
 8002d60:	2301      	movs	r3, #1
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <HAL_DMA_Abort_IT+0xe8>)
 8002d64:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
    } 
  }
  return status;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40020008 	.word	0x40020008
 8002d94:	4002001c 	.word	0x4002001c
 8002d98:	40020030 	.word	0x40020030
 8002d9c:	40020044 	.word	0x40020044
 8002da0:	40020058 	.word	0x40020058
 8002da4:	4002006c 	.word	0x4002006c
 8002da8:	40020000 	.word	0x40020000

08002dac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2204      	movs	r2, #4
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d04f      	beq.n	8002e74 <HAL_DMA_IRQHandler+0xc8>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d04a      	beq.n	8002e74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0204 	bic.w	r2, r2, #4
 8002dfa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a66      	ldr	r2, [pc, #408]	; (8002f9c <HAL_DMA_IRQHandler+0x1f0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d029      	beq.n	8002e5a <HAL_DMA_IRQHandler+0xae>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a65      	ldr	r2, [pc, #404]	; (8002fa0 <HAL_DMA_IRQHandler+0x1f4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d022      	beq.n	8002e56 <HAL_DMA_IRQHandler+0xaa>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a63      	ldr	r2, [pc, #396]	; (8002fa4 <HAL_DMA_IRQHandler+0x1f8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01a      	beq.n	8002e50 <HAL_DMA_IRQHandler+0xa4>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a62      	ldr	r2, [pc, #392]	; (8002fa8 <HAL_DMA_IRQHandler+0x1fc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d012      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x9e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a60      	ldr	r2, [pc, #384]	; (8002fac <HAL_DMA_IRQHandler+0x200>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x98>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5f      	ldr	r2, [pc, #380]	; (8002fb0 <HAL_DMA_IRQHandler+0x204>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d102      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x92>
 8002e38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e3c:	e00e      	b.n	8002e5c <HAL_DMA_IRQHandler+0xb0>
 8002e3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e42:	e00b      	b.n	8002e5c <HAL_DMA_IRQHandler+0xb0>
 8002e44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e48:	e008      	b.n	8002e5c <HAL_DMA_IRQHandler+0xb0>
 8002e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e4e:	e005      	b.n	8002e5c <HAL_DMA_IRQHandler+0xb0>
 8002e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e54:	e002      	b.n	8002e5c <HAL_DMA_IRQHandler+0xb0>
 8002e56:	2340      	movs	r3, #64	; 0x40
 8002e58:	e000      	b.n	8002e5c <HAL_DMA_IRQHandler+0xb0>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	4a55      	ldr	r2, [pc, #340]	; (8002fb4 <HAL_DMA_IRQHandler+0x208>)
 8002e5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8094 	beq.w	8002f92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e72:	e08e      	b.n	8002f92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	2202      	movs	r2, #2
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d056      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x186>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d051      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 020a 	bic.w	r2, r2, #10
 8002eaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a38      	ldr	r2, [pc, #224]	; (8002f9c <HAL_DMA_IRQHandler+0x1f0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d029      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x166>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a37      	ldr	r2, [pc, #220]	; (8002fa0 <HAL_DMA_IRQHandler+0x1f4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x162>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a35      	ldr	r2, [pc, #212]	; (8002fa4 <HAL_DMA_IRQHandler+0x1f8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01a      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x15c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a34      	ldr	r2, [pc, #208]	; (8002fa8 <HAL_DMA_IRQHandler+0x1fc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d012      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x156>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a32      	ldr	r2, [pc, #200]	; (8002fac <HAL_DMA_IRQHandler+0x200>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00a      	beq.n	8002efc <HAL_DMA_IRQHandler+0x150>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a31      	ldr	r2, [pc, #196]	; (8002fb0 <HAL_DMA_IRQHandler+0x204>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d102      	bne.n	8002ef6 <HAL_DMA_IRQHandler+0x14a>
 8002ef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ef4:	e00e      	b.n	8002f14 <HAL_DMA_IRQHandler+0x168>
 8002ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efa:	e00b      	b.n	8002f14 <HAL_DMA_IRQHandler+0x168>
 8002efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f00:	e008      	b.n	8002f14 <HAL_DMA_IRQHandler+0x168>
 8002f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f06:	e005      	b.n	8002f14 <HAL_DMA_IRQHandler+0x168>
 8002f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0c:	e002      	b.n	8002f14 <HAL_DMA_IRQHandler+0x168>
 8002f0e:	2320      	movs	r3, #32
 8002f10:	e000      	b.n	8002f14 <HAL_DMA_IRQHandler+0x168>
 8002f12:	2302      	movs	r3, #2
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_DMA_IRQHandler+0x208>)
 8002f16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d034      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f30:	e02f      	b.n	8002f92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2208      	movs	r2, #8
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d028      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x1e8>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d023      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 020e 	bic.w	r2, r2, #14
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4798      	blx	r3
    }
  }
  return;
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
}
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40020008 	.word	0x40020008
 8002fa0:	4002001c 	.word	0x4002001c
 8002fa4:	40020030 	.word	0x40020030
 8002fa8:	40020044 	.word	0x40020044
 8002fac:	40020058 	.word	0x40020058
 8002fb0:	4002006c 	.word	0x4002006c
 8002fb4:	40020000 	.word	0x40020000

08002fb8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d108      	bne.n	8003010 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800300e:	e007      	b.n	8003020 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
	...

0800302c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003046:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <HAL_FLASH_Program+0xd8>)
 8003048:	7e1b      	ldrb	r3, [r3, #24]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_FLASH_Program+0x26>
 800304e:	2302      	movs	r3, #2
 8003050:	e054      	b.n	80030fc <HAL_FLASH_Program+0xd0>
 8003052:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <HAL_FLASH_Program+0xd8>)
 8003054:	2201      	movs	r2, #1
 8003056:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003058:	f24c 3050 	movw	r0, #50000	; 0xc350
 800305c:	f000 f8a8 	bl	80031b0 <FLASH_WaitForLastOperation>
 8003060:	4603      	mov	r3, r0
 8003062:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d144      	bne.n	80030f4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d102      	bne.n	8003076 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003070:	2301      	movs	r3, #1
 8003072:	757b      	strb	r3, [r7, #21]
 8003074:	e007      	b.n	8003086 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d102      	bne.n	8003082 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800307c:	2302      	movs	r3, #2
 800307e:	757b      	strb	r3, [r7, #21]
 8003080:	e001      	b.n	8003086 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003082:	2304      	movs	r3, #4
 8003084:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003086:	2300      	movs	r3, #0
 8003088:	75bb      	strb	r3, [r7, #22]
 800308a:	e02d      	b.n	80030e8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800308c:	7dbb      	ldrb	r3, [r7, #22]
 800308e:	005a      	lsls	r2, r3, #1
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	eb02 0c03 	add.w	ip, r2, r3
 8003096:	7dbb      	ldrb	r3, [r7, #22]
 8003098:	0119      	lsls	r1, r3, #4
 800309a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800309e:	f1c1 0620 	rsb	r6, r1, #32
 80030a2:	f1a1 0020 	sub.w	r0, r1, #32
 80030a6:	fa22 f401 	lsr.w	r4, r2, r1
 80030aa:	fa03 f606 	lsl.w	r6, r3, r6
 80030ae:	4334      	orrs	r4, r6
 80030b0:	fa23 f000 	lsr.w	r0, r3, r0
 80030b4:	4304      	orrs	r4, r0
 80030b6:	fa23 f501 	lsr.w	r5, r3, r1
 80030ba:	b2a3      	uxth	r3, r4
 80030bc:	4619      	mov	r1, r3
 80030be:	4660      	mov	r0, ip
 80030c0:	f000 f85a 	bl	8003178 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80030c8:	f000 f872 	bl	80031b0 <FLASH_WaitForLastOperation>
 80030cc:	4603      	mov	r3, r0
 80030ce:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_FLASH_Program+0xdc>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <HAL_FLASH_Program+0xdc>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80030e2:	7dbb      	ldrb	r3, [r7, #22]
 80030e4:	3301      	adds	r3, #1
 80030e6:	75bb      	strb	r3, [r7, #22]
 80030e8:	7dba      	ldrb	r2, [r7, #22]
 80030ea:	7d7b      	ldrb	r3, [r7, #21]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d3cd      	bcc.n	800308c <HAL_FLASH_Program+0x60>
 80030f0:	e000      	b.n	80030f4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80030f2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_FLASH_Program+0xd8>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	761a      	strb	r2, [r3, #24]

  return status;
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003104:	200015d0 	.word	0x200015d0
 8003108:	40022000 	.word	0x40022000

0800310c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_FLASH_Unlock+0x40>)
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_FLASH_Unlock+0x40>)
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_FLASH_Unlock+0x44>)
 8003126:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <HAL_FLASH_Unlock+0x40>)
 800312a:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_FLASH_Unlock+0x48>)
 800312c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800312e:	4b07      	ldr	r3, [pc, #28]	; (800314c <HAL_FLASH_Unlock+0x40>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800313e:	79fb      	ldrb	r3, [r7, #7]
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40022000 	.word	0x40022000
 8003150:	45670123 	.word	0x45670123
 8003154:	cdef89ab 	.word	0xcdef89ab

08003158 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_FLASH_Lock+0x1c>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	4a04      	ldr	r2, [pc, #16]	; (8003174 <HAL_FLASH_Lock+0x1c>)
 8003162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003166:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40022000 	.word	0x40022000

08003178 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <FLASH_Program_HalfWord+0x30>)
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <FLASH_Program_HalfWord+0x34>)
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	4a07      	ldr	r2, [pc, #28]	; (80031ac <FLASH_Program_HalfWord+0x34>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	887a      	ldrh	r2, [r7, #2]
 800319a:	801a      	strh	r2, [r3, #0]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	200015d0 	.word	0x200015d0
 80031ac:	40022000 	.word	0x40022000

080031b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7fe ffda 	bl	8002170 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80031be:	e010      	b.n	80031e2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d00c      	beq.n	80031e2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <FLASH_WaitForLastOperation+0x2e>
 80031ce:	f7fe ffcf 	bl	8002170 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d201      	bcs.n	80031e2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e025      	b.n	800322e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <FLASH_WaitForLastOperation+0x88>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e8      	bne.n	80031c0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <FLASH_WaitForLastOperation+0x88>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <FLASH_WaitForLastOperation+0x88>)
 80031fc:	2220      	movs	r2, #32
 80031fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <FLASH_WaitForLastOperation+0x88>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10b      	bne.n	8003224 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <FLASH_WaitForLastOperation+0x88>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003218:	4b07      	ldr	r3, [pc, #28]	; (8003238 <FLASH_WaitForLastOperation+0x88>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003224:	f000 f80a 	bl	800323c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000

0800323c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003246:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <FLASH_SetErrorCode+0x98>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <FLASH_SetErrorCode+0x9c>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f043 0302 	orr.w	r3, r3, #2
 800325a:	4a1f      	ldr	r2, [pc, #124]	; (80032d8 <FLASH_SetErrorCode+0x9c>)
 800325c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f043 0310 	orr.w	r3, r3, #16
 8003264:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003266:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <FLASH_SetErrorCode+0x98>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <FLASH_SetErrorCode+0x9c>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <FLASH_SetErrorCode+0x9c>)
 800327c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <FLASH_SetErrorCode+0x98>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <FLASH_SetErrorCode+0x9c>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <FLASH_SetErrorCode+0x9c>)
 800329c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <FLASH_SetErrorCode+0x98>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <FLASH_SetErrorCode+0x98>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f240 1201 	movw	r2, #257	; 0x101
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d106      	bne.n	80032c2 <FLASH_SetErrorCode+0x86>
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <FLASH_SetErrorCode+0x98>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <FLASH_SetErrorCode+0x98>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	61d3      	str	r3, [r2, #28]
}  
 80032c0:	e002      	b.n	80032c8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80032c2:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <FLASH_SetErrorCode+0x98>)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60d3      	str	r3, [r2, #12]
}  
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40022000 	.word	0x40022000
 80032d8:	200015d0 	.word	0x200015d0

080032dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032ee:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <HAL_FLASHEx_Erase+0xd0>)
 80032f0:	7e1b      	ldrb	r3, [r3, #24]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_FLASHEx_Erase+0x1e>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e053      	b.n	80033a2 <HAL_FLASHEx_Erase+0xc6>
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <HAL_FLASHEx_Erase+0xd0>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d116      	bne.n	8003336 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003308:	f24c 3050 	movw	r0, #50000	; 0xc350
 800330c:	f7ff ff50 	bl	80031b0 <FLASH_WaitForLastOperation>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d141      	bne.n	800339a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003316:	2001      	movs	r0, #1
 8003318:	f000 f84c 	bl	80033b4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800331c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003320:	f7ff ff46 	bl	80031b0 <FLASH_WaitForLastOperation>
 8003324:	4603      	mov	r3, r0
 8003326:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_FLASHEx_Erase+0xd4>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <HAL_FLASHEx_Erase+0xd4>)
 800332e:	f023 0304 	bic.w	r3, r3, #4
 8003332:	6113      	str	r3, [r2, #16]
 8003334:	e031      	b.n	800339a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003336:	f24c 3050 	movw	r0, #50000	; 0xc350
 800333a:	f7ff ff39 	bl	80031b0 <FLASH_WaitForLastOperation>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d12a      	bne.n	800339a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f04f 32ff 	mov.w	r2, #4294967295
 800334a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	e019      	b.n	8003388 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003354:	68b8      	ldr	r0, [r7, #8]
 8003356:	f000 f849 	bl	80033ec <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800335a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800335e:	f7ff ff27 	bl	80031b0 <FLASH_WaitForLastOperation>
 8003362:	4603      	mov	r3, r0
 8003364:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_FLASHEx_Erase+0xd4>)
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <HAL_FLASHEx_Erase+0xd4>)
 800336c:	f023 0302 	bic.w	r3, r3, #2
 8003370:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	601a      	str	r2, [r3, #0]
            break;
 800337e:	e00c      	b.n	800339a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003386:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	029a      	lsls	r2, r3, #10
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d3dc      	bcc.n	8003354 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <HAL_FLASHEx_Erase+0xd0>)
 800339c:	2200      	movs	r2, #0
 800339e:	761a      	strb	r2, [r3, #24]

  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200015d0 	.word	0x200015d0
 80033b0:	40022000 	.word	0x40022000

080033b4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <FLASH_MassErase+0x30>)
 80033be:	2200      	movs	r2, #0
 80033c0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <FLASH_MassErase+0x34>)
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <FLASH_MassErase+0x34>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <FLASH_MassErase+0x34>)
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <FLASH_MassErase+0x34>)
 80033d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	200015d0 	.word	0x200015d0
 80033e8:	40022000 	.word	0x40022000

080033ec <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <FLASH_PageErase+0x38>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <FLASH_PageErase+0x3c>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <FLASH_PageErase+0x3c>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <FLASH_PageErase+0x3c>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <FLASH_PageErase+0x3c>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	4a05      	ldr	r2, [pc, #20]	; (8003428 <FLASH_PageErase+0x3c>)
 8003412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003416:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	200015d0 	.word	0x200015d0
 8003428:	40022000 	.word	0x40022000

0800342c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800342c:	b480      	push	{r7}
 800342e:	b08b      	sub	sp, #44	; 0x2c
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800343a:	2300      	movs	r3, #0
 800343c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343e:	e169      	b.n	8003714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003440:	2201      	movs	r2, #1
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	429a      	cmp	r2, r3
 800345a:	f040 8158 	bne.w	800370e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a9a      	ldr	r2, [pc, #616]	; (80036cc <HAL_GPIO_Init+0x2a0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d05e      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 8003468:	4a98      	ldr	r2, [pc, #608]	; (80036cc <HAL_GPIO_Init+0x2a0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d875      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 800346e:	4a98      	ldr	r2, [pc, #608]	; (80036d0 <HAL_GPIO_Init+0x2a4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d058      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 8003474:	4a96      	ldr	r2, [pc, #600]	; (80036d0 <HAL_GPIO_Init+0x2a4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d86f      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 800347a:	4a96      	ldr	r2, [pc, #600]	; (80036d4 <HAL_GPIO_Init+0x2a8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d052      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 8003480:	4a94      	ldr	r2, [pc, #592]	; (80036d4 <HAL_GPIO_Init+0x2a8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d869      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 8003486:	4a94      	ldr	r2, [pc, #592]	; (80036d8 <HAL_GPIO_Init+0x2ac>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d04c      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 800348c:	4a92      	ldr	r2, [pc, #584]	; (80036d8 <HAL_GPIO_Init+0x2ac>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d863      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 8003492:	4a92      	ldr	r2, [pc, #584]	; (80036dc <HAL_GPIO_Init+0x2b0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d046      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 8003498:	4a90      	ldr	r2, [pc, #576]	; (80036dc <HAL_GPIO_Init+0x2b0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d85d      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 800349e:	2b12      	cmp	r3, #18
 80034a0:	d82a      	bhi.n	80034f8 <HAL_GPIO_Init+0xcc>
 80034a2:	2b12      	cmp	r3, #18
 80034a4:	d859      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 80034a6:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <HAL_GPIO_Init+0x80>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	08003527 	.word	0x08003527
 80034b0:	08003501 	.word	0x08003501
 80034b4:	08003513 	.word	0x08003513
 80034b8:	08003555 	.word	0x08003555
 80034bc:	0800355b 	.word	0x0800355b
 80034c0:	0800355b 	.word	0x0800355b
 80034c4:	0800355b 	.word	0x0800355b
 80034c8:	0800355b 	.word	0x0800355b
 80034cc:	0800355b 	.word	0x0800355b
 80034d0:	0800355b 	.word	0x0800355b
 80034d4:	0800355b 	.word	0x0800355b
 80034d8:	0800355b 	.word	0x0800355b
 80034dc:	0800355b 	.word	0x0800355b
 80034e0:	0800355b 	.word	0x0800355b
 80034e4:	0800355b 	.word	0x0800355b
 80034e8:	0800355b 	.word	0x0800355b
 80034ec:	0800355b 	.word	0x0800355b
 80034f0:	08003509 	.word	0x08003509
 80034f4:	0800351d 	.word	0x0800351d
 80034f8:	4a79      	ldr	r2, [pc, #484]	; (80036e0 <HAL_GPIO_Init+0x2b4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034fe:	e02c      	b.n	800355a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	623b      	str	r3, [r7, #32]
          break;
 8003506:	e029      	b.n	800355c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	3304      	adds	r3, #4
 800350e:	623b      	str	r3, [r7, #32]
          break;
 8003510:	e024      	b.n	800355c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	3308      	adds	r3, #8
 8003518:	623b      	str	r3, [r7, #32]
          break;
 800351a:	e01f      	b.n	800355c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	330c      	adds	r3, #12
 8003522:	623b      	str	r3, [r7, #32]
          break;
 8003524:	e01a      	b.n	800355c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800352e:	2304      	movs	r3, #4
 8003530:	623b      	str	r3, [r7, #32]
          break;
 8003532:	e013      	b.n	800355c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800353c:	2308      	movs	r3, #8
 800353e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	611a      	str	r2, [r3, #16]
          break;
 8003546:	e009      	b.n	800355c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003548:	2308      	movs	r3, #8
 800354a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	615a      	str	r2, [r3, #20]
          break;
 8003552:	e003      	b.n	800355c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003554:	2300      	movs	r3, #0
 8003556:	623b      	str	r3, [r7, #32]
          break;
 8003558:	e000      	b.n	800355c <HAL_GPIO_Init+0x130>
          break;
 800355a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2bff      	cmp	r3, #255	; 0xff
 8003560:	d801      	bhi.n	8003566 <HAL_GPIO_Init+0x13a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	e001      	b.n	800356a <HAL_GPIO_Init+0x13e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d802      	bhi.n	8003578 <HAL_GPIO_Init+0x14c>
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	e002      	b.n	800357e <HAL_GPIO_Init+0x152>
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	3b08      	subs	r3, #8
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	210f      	movs	r1, #15
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	401a      	ands	r2, r3
 8003590:	6a39      	ldr	r1, [r7, #32]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	431a      	orrs	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80b1 	beq.w	800370e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035ac:	4b4d      	ldr	r3, [pc, #308]	; (80036e4 <HAL_GPIO_Init+0x2b8>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <HAL_GPIO_Init+0x2b8>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6193      	str	r3, [r2, #24]
 80035b8:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_GPIO_Init+0x2b8>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035c4:	4a48      	ldr	r2, [pc, #288]	; (80036e8 <HAL_GPIO_Init+0x2bc>)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	3302      	adds	r3, #2
 80035cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	220f      	movs	r2, #15
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a40      	ldr	r2, [pc, #256]	; (80036ec <HAL_GPIO_Init+0x2c0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_GPIO_Init+0x1ec>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3f      	ldr	r2, [pc, #252]	; (80036f0 <HAL_GPIO_Init+0x2c4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00d      	beq.n	8003614 <HAL_GPIO_Init+0x1e8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3e      	ldr	r2, [pc, #248]	; (80036f4 <HAL_GPIO_Init+0x2c8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <HAL_GPIO_Init+0x1e4>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3d      	ldr	r2, [pc, #244]	; (80036f8 <HAL_GPIO_Init+0x2cc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_GPIO_Init+0x1e0>
 8003608:	2303      	movs	r3, #3
 800360a:	e006      	b.n	800361a <HAL_GPIO_Init+0x1ee>
 800360c:	2304      	movs	r3, #4
 800360e:	e004      	b.n	800361a <HAL_GPIO_Init+0x1ee>
 8003610:	2302      	movs	r3, #2
 8003612:	e002      	b.n	800361a <HAL_GPIO_Init+0x1ee>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_GPIO_Init+0x1ee>
 8003618:	2300      	movs	r3, #0
 800361a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361c:	f002 0203 	and.w	r2, r2, #3
 8003620:	0092      	lsls	r2, r2, #2
 8003622:	4093      	lsls	r3, r2
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800362a:	492f      	ldr	r1, [pc, #188]	; (80036e8 <HAL_GPIO_Init+0x2bc>)
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	3302      	adds	r3, #2
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	492c      	ldr	r1, [pc, #176]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]
 8003650:	e006      	b.n	8003660 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003652:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	43db      	mvns	r3, r3
 800365a:	4928      	ldr	r1, [pc, #160]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 800365c:	4013      	ands	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800366c:	4b23      	ldr	r3, [pc, #140]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4922      	ldr	r1, [pc, #136]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800367a:	4b20      	ldr	r3, [pc, #128]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	43db      	mvns	r3, r3
 8003682:	491e      	ldr	r1, [pc, #120]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 8003684:	4013      	ands	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	4918      	ldr	r1, [pc, #96]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	4914      	ldr	r1, [pc, #80]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d021      	beq.n	8003700 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_GPIO_Init+0x2d0>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60cb      	str	r3, [r1, #12]
 80036c8:	e021      	b.n	800370e <HAL_GPIO_Init+0x2e2>
 80036ca:	bf00      	nop
 80036cc:	10320000 	.word	0x10320000
 80036d0:	10310000 	.word	0x10310000
 80036d4:	10220000 	.word	0x10220000
 80036d8:	10210000 	.word	0x10210000
 80036dc:	10120000 	.word	0x10120000
 80036e0:	10110000 	.word	0x10110000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40010800 	.word	0x40010800
 80036f0:	40010c00 	.word	0x40010c00
 80036f4:	40011000 	.word	0x40011000
 80036f8:	40011400 	.word	0x40011400
 80036fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_GPIO_Init+0x304>)
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	43db      	mvns	r3, r3
 8003708:	4909      	ldr	r1, [pc, #36]	; (8003730 <HAL_GPIO_Init+0x304>)
 800370a:	4013      	ands	r3, r2
 800370c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	3301      	adds	r3, #1
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	f47f ae8e 	bne.w	8003440 <HAL_GPIO_Init+0x14>
  }
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	372c      	adds	r7, #44	; 0x2c
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	40010400 	.word	0x40010400

08003734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	807b      	strh	r3, [r7, #2]
 8003740:	4613      	mov	r3, r2
 8003742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003744:	787b      	ldrb	r3, [r7, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003750:	e003      	b.n	800375a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	041a      	lsls	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800377c:	887a      	ldrh	r2, [r7, #2]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003782:	e002      	b.n	800378a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003784:	887a      	ldrh	r2, [r7, #2]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e11b      	b.n	80039de <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fe f9c0 	bl	8001b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d8:	f003 f882 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 80037dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4a81      	ldr	r2, [pc, #516]	; (80039e8 <HAL_I2C_Init+0x254>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d807      	bhi.n	80037f8 <HAL_I2C_Init+0x64>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a80      	ldr	r2, [pc, #512]	; (80039ec <HAL_I2C_Init+0x258>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e006      	b.n	8003806 <HAL_I2C_Init+0x72>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a7d      	ldr	r2, [pc, #500]	; (80039f0 <HAL_I2C_Init+0x25c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf94      	ite	ls
 8003800:	2301      	movls	r3, #1
 8003802:	2300      	movhi	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0e7      	b.n	80039de <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a78      	ldr	r2, [pc, #480]	; (80039f4 <HAL_I2C_Init+0x260>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	0c9b      	lsrs	r3, r3, #18
 8003818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a6a      	ldr	r2, [pc, #424]	; (80039e8 <HAL_I2C_Init+0x254>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d802      	bhi.n	8003848 <HAL_I2C_Init+0xb4>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3301      	adds	r3, #1
 8003846:	e009      	b.n	800385c <HAL_I2C_Init+0xc8>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	4a69      	ldr	r2, [pc, #420]	; (80039f8 <HAL_I2C_Init+0x264>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	3301      	adds	r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800386e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	495c      	ldr	r1, [pc, #368]	; (80039e8 <HAL_I2C_Init+0x254>)
 8003878:	428b      	cmp	r3, r1
 800387a:	d819      	bhi.n	80038b0 <HAL_I2C_Init+0x11c>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e59      	subs	r1, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fbb1 f3f3 	udiv	r3, r1, r3
 800388a:	1c59      	adds	r1, r3, #1
 800388c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003890:	400b      	ands	r3, r1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_I2C_Init+0x118>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e59      	subs	r1, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	e051      	b.n	8003950 <HAL_I2C_Init+0x1bc>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e04f      	b.n	8003950 <HAL_I2C_Init+0x1bc>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <HAL_I2C_Init+0x148>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e012      	b.n	8003902 <HAL_I2C_Init+0x16e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Init+0x176>
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_I2C_Init+0x1bc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10e      	bne.n	8003930 <HAL_I2C_Init+0x19c>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1e58      	subs	r0, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	440b      	add	r3, r1
 8003920:	fbb0 f3f3 	udiv	r3, r0, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392e:	e00f      	b.n	8003950 <HAL_I2C_Init+0x1bc>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	0099      	lsls	r1, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	fbb0 f3f3 	udiv	r3, r0, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	6809      	ldr	r1, [r1, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800397e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6911      	ldr	r1, [r2, #16]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	000186a0 	.word	0x000186a0
 80039ec:	001e847f 	.word	0x001e847f
 80039f0:	003d08ff 	.word	0x003d08ff
 80039f4:	431bde83 	.word	0x431bde83
 80039f8:	10624dd3 	.word	0x10624dd3

080039fc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a18:	2b28      	cmp	r3, #40	; 0x28
 8003a1a:	d15b      	bne.n	8003ad4 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e054      	b.n	8003ad6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e04d      	b.n	8003ad6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d007      	beq.n	8003a60 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2229      	movs	r2, #41	; 0x29
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003ace:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003afc:	2b28      	cmp	r3, #40	; 0x28
 8003afe:	d15b      	bne.n	8003bb8 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e054      	b.n	8003bba <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e04d      	b.n	8003bba <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d007      	beq.n	8003b44 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	222a      	movs	r2, #42	; 0x2a
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	88fa      	ldrh	r2, [r7, #6]
 8003b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003bb2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d124      	bne.n	8003c22 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2228      	movs	r2, #40	; 0x28
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d007      	beq.n	8003bfe <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c0c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c1c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e000      	b.n	8003c24 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr

08003c2e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b088      	sub	sp, #32
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c56:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d003      	beq.n	8003c66 <HAL_I2C_EV_IRQHandler+0x38>
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	f040 80b6 	bne.w	8003dd2 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10d      	bne.n	8003c9c <HAL_I2C_EV_IRQHandler+0x6e>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c86:	d003      	beq.n	8003c90 <HAL_I2C_EV_IRQHandler+0x62>
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2C_EV_IRQHandler+0x66>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <HAL_I2C_EV_IRQHandler+0x68>
 8003c94:	2300      	movs	r3, #0
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	f000 8127 	beq.w	8003eea <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x92>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	0a5b      	lsrs	r3, r3, #9
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f001 fb45 	bl	8005342 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fcd4 	bl	8004666 <I2C_Master_SB>
 8003cbe:	e087      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	08db      	lsrs	r3, r3, #3
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d009      	beq.n	8003ce0 <HAL_I2C_EV_IRQHandler+0xb2>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	0a5b      	lsrs	r3, r3, #9
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fd49 	bl	8004770 <I2C_Master_ADD10>
 8003cde:	e077      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_I2C_EV_IRQHandler+0xd2>
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	0a5b      	lsrs	r3, r3, #9
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fd62 	bl	80047c2 <I2C_Master_ADDR>
 8003cfe:	e067      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d030      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1a:	f000 80e8 	beq.w	8003eee <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	09db      	lsrs	r3, r3, #7
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00f      	beq.n	8003d4a <HAL_I2C_EV_IRQHandler+0x11c>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	0a9b      	lsrs	r3, r3, #10
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_I2C_EV_IRQHandler+0x11c>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f9b5 	bl	80040b2 <I2C_MasterTransmit_TXE>
 8003d48:	e042      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80cb 	beq.w	8003eee <HAL_I2C_EV_IRQHandler+0x2c0>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	0a5b      	lsrs	r3, r3, #9
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80c4 	beq.w	8003eee <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa9b 	bl	80042a2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6c:	e0bf      	b.n	8003eee <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7c:	f000 80b7 	beq.w	8003eee <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00f      	beq.n	8003dac <HAL_I2C_EV_IRQHandler+0x17e>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	0a9b      	lsrs	r3, r3, #10
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_I2C_EV_IRQHandler+0x17e>
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 faf2 	bl	800438e <I2C_MasterReceive_RXNE>
 8003daa:	e011      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	089b      	lsrs	r3, r3, #2
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 809a 	beq.w	8003eee <HAL_I2C_EV_IRQHandler+0x2c0>
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	0a5b      	lsrs	r3, r3, #9
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8093 	beq.w	8003eee <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fb62 	bl	8004492 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dce:	e08e      	b.n	8003eee <HAL_I2C_EV_IRQHandler+0x2c0>
 8003dd0:	e08d      	b.n	8003eee <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e007      	b.n	8003df4 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d012      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	0a5b      	lsrs	r3, r3, #9
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00c      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 ff26 	bl	8004c70 <I2C_Slave_ADDR>
 8003e24:	e066      	b.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_I2C_EV_IRQHandler+0x218>
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	0a5b      	lsrs	r3, r3, #9
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 ff5a 	bl	8004cf8 <I2C_Slave_STOPF>
 8003e44:	e056      	b.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e46:	7bbb      	ldrb	r3, [r7, #14]
 8003e48:	2b21      	cmp	r3, #33	; 0x21
 8003e4a:	d002      	beq.n	8003e52 <HAL_I2C_EV_IRQHandler+0x224>
 8003e4c:	7bbb      	ldrb	r3, [r7, #14]
 8003e4e:	2b29      	cmp	r3, #41	; 0x29
 8003e50:	d125      	bne.n	8003e9e <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	09db      	lsrs	r3, r3, #7
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00f      	beq.n	8003e7e <HAL_I2C_EV_IRQHandler+0x250>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	0a9b      	lsrs	r3, r3, #10
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_I2C_EV_IRQHandler+0x250>
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fe3e 	bl	8004af8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e7c:	e039      	b.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d033      	beq.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	0a5b      	lsrs	r3, r3, #9
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d02d      	beq.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fe6b 	bl	8004b72 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e9c:	e029      	b.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00f      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x29c>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	0a9b      	lsrs	r3, r3, #10
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x29c>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fe75 	bl	8004bb2 <I2C_SlaveReceive_RXNE>
 8003ec8:	e014      	b.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x2c6>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	0a5b      	lsrs	r3, r3, #9
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fea3 	bl	8004c2e <I2C_SlaveReceive_BTF>
 8003ee8:	e004      	b.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ef2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b08a      	sub	sp, #40	; 0x28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <HAL_I2C_ER_IRQHandler+0x56>
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	0a1b      	lsrs	r3, r3, #8
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f3e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	0a5b      	lsrs	r3, r3, #9
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <HAL_I2C_ER_IRQHandler+0x80>
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f043 0302 	orr.w	r3, r3, #2
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003f78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	0a9b      	lsrs	r3, r3, #10
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d041      	beq.n	800400a <HAL_I2C_ER_IRQHandler+0x110>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	0a1b      	lsrs	r3, r3, #8
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d03b      	beq.n	800400a <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f98:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003fb0:	7efb      	ldrb	r3, [r7, #27]
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d112      	bne.n	8003fdc <HAL_I2C_ER_IRQHandler+0xe2>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <HAL_I2C_ER_IRQHandler+0xe2>
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b21      	cmp	r3, #33	; 0x21
 8003fc0:	d008      	beq.n	8003fd4 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b29      	cmp	r3, #41	; 0x29
 8003fc6:	d005      	beq.n	8003fd4 <HAL_I2C_ER_IRQHandler+0xda>
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	2b28      	cmp	r3, #40	; 0x28
 8003fcc:	d106      	bne.n	8003fdc <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b21      	cmp	r3, #33	; 0x21
 8003fd2:	d103      	bne.n	8003fdc <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 ffbf 	bl	8004f58 <I2C_Slave_AF>
 8003fda:	e016      	b.n	800400a <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fe4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d107      	bne.n	800400a <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004008:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	0adb      	lsrs	r3, r3, #11
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00e      	beq.n	8004034 <HAL_I2C_ER_IRQHandler+0x13a>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	f043 0308 	orr.w	r3, r3, #8
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004032:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fff6 	bl	8005038 <I2C_ITError>
  }
}
 800404c:	bf00      	nop
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d150      	bne.n	800417a <I2C_MasterTransmit_TXE+0xc8>
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b21      	cmp	r3, #33	; 0x21
 80040dc:	d14d      	bne.n	800417a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d01d      	beq.n	8004120 <I2C_MasterTransmit_TXE+0x6e>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d01a      	beq.n	8004120 <I2C_MasterTransmit_TXE+0x6e>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040f0:	d016      	beq.n	8004120 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004100:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2211      	movs	r2, #17
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff9b 	bl	8004054 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800411e:	e0bc      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800412e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	d107      	bne.n	800416a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff88 	bl	8004078 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004168:	e097      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff6e 	bl	8004054 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004178:	e08f      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b21      	cmp	r3, #33	; 0x21
 800417e:	d007      	beq.n	8004190 <I2C_MasterTransmit_TXE+0xde>
 8004180:	7bbb      	ldrb	r3, [r7, #14]
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	f040 8089 	bne.w	800429a <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b22      	cmp	r3, #34	; 0x22
 800418c:	f040 8085 	bne.w	800429a <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041aa:	e076      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d15d      	bne.n	8004274 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11d      	bne.n	80041fc <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d10b      	bne.n	80041e0 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041de:	e05c      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	121b      	asrs	r3, r3, #8
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041fa:	e04e      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004200:	2b01      	cmp	r3, #1
 8004202:	d10b      	bne.n	800421c <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004208:	b2da      	uxtb	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	651a      	str	r2, [r3, #80]	; 0x50
}
 800421a:	e03e      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	2b02      	cmp	r3, #2
 8004222:	d13a      	bne.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b22      	cmp	r3, #34	; 0x22
 800422e:	d108      	bne.n	8004242 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	e02b      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b21      	cmp	r3, #33	; 0x21
 800424c:	d125      	bne.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	781a      	ldrb	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004272:	e012      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004298:	e7ff      	b.n	800429a <I2C_MasterTransmit_TXE+0x1e8>
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b21      	cmp	r3, #33	; 0x21
 80042ba:	d164      	bne.n	8004386 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d012      	beq.n	80042ec <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80042ea:	e04c      	b.n	8004386 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d01d      	beq.n	800432e <I2C_MasterTransmit_BTF+0x8c>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d01a      	beq.n	800432e <I2C_MasterTransmit_BTF+0x8c>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042fe:	d016      	beq.n	800432e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800430e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2211      	movs	r2, #17
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fe94 	bl	8004054 <HAL_I2C_MasterTxCpltCallback>
}
 800432c:	e02b      	b.n	8004386 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800433c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d107      	bne.n	8004378 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff fe81 	bl	8004078 <HAL_I2C_MemTxCpltCallback>
}
 8004376:	e006      	b.n	8004386 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fe67 	bl	8004054 <HAL_I2C_MasterTxCpltCallback>
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b22      	cmp	r3, #34	; 0x22
 80043a0:	d173      	bne.n	800448a <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d920      	bls.n	80043f2 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d154      	bne.n	800448a <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ee:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80043f0:	e04b      	b.n	800448a <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d047      	beq.n	800448a <I2C_MasterReceive_RXNE+0xfc>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d002      	beq.n	8004406 <I2C_MasterReceive_RXNE+0x78>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d141      	bne.n	800448a <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004414:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004424:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b40      	cmp	r3, #64	; 0x40
 800445e:	d10a      	bne.n	8004476 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fe0b 	bl	800408a <HAL_I2C_MemRxCpltCallback>
}
 8004474:	e009      	b.n	800448a <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2212      	movs	r2, #18
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fdee 	bl	8004066 <HAL_I2C_MasterRxCpltCallback>
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d11b      	bne.n	80044e2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80044e0:	e0bd      	b.n	800465e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d129      	bne.n	8004540 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d00a      	beq.n	8004518 <I2C_MasterReceive_BTF+0x86>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d007      	beq.n	8004518 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004516:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800453e:	e08e      	b.n	800465e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d176      	bne.n	8004638 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d002      	beq.n	8004556 <I2C_MasterReceive_BTF+0xc4>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b10      	cmp	r3, #16
 8004554:	d108      	bne.n	8004568 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e019      	b.n	800459c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b04      	cmp	r3, #4
 800456c:	d002      	beq.n	8004574 <I2C_MasterReceive_BTF+0xe2>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d108      	bne.n	8004586 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	e00a      	b.n	800459c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b10      	cmp	r3, #16
 800458a:	d007      	beq.n	800459c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d10a      	bne.n	8004622 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fd35 	bl	800408a <HAL_I2C_MemRxCpltCallback>
}
 8004620:	e01d      	b.n	800465e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2212      	movs	r2, #18
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff fd18 	bl	8004066 <HAL_I2C_MasterRxCpltCallback>
}
 8004636:	e012      	b.n	800465e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d117      	bne.n	80046aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004692:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004694:	e067      	b.n	8004766 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]
}
 80046a8:	e05d      	b.n	8004766 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b2:	d133      	bne.n	800471c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b21      	cmp	r3, #33	; 0x21
 80046be:	d109      	bne.n	80046d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d0:	611a      	str	r2, [r3, #16]
 80046d2:	e008      	b.n	80046e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <I2C_Master_SB+0x90>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d037      	beq.n	8004766 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d104      	bne.n	800470a <I2C_Master_SB+0xa4>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	d02d      	beq.n	8004766 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004718:	605a      	str	r2, [r3, #4]
}
 800471a:	e024      	b.n	8004766 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10e      	bne.n	8004742 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	b29b      	uxth	r3, r3
 800472a:	11db      	asrs	r3, r3, #7
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f063 030f 	orn	r3, r3, #15
 8004738:	b2da      	uxtb	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	611a      	str	r2, [r3, #16]
}
 8004740:	e011      	b.n	8004766 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10d      	bne.n	8004766 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	b29b      	uxth	r3, r3
 8004750:	11db      	asrs	r3, r3, #7
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 0306 	and.w	r3, r3, #6
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f063 030e 	orn	r3, r3, #14
 800475e:	b2da      	uxtb	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	b2da      	uxtb	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <I2C_Master_ADD10+0x24>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	2b00      	cmp	r3, #0
 8004792:	d011      	beq.n	80047b8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <I2C_Master_ADD10+0x38>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b091      	sub	sp, #68	; 0x44
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b22      	cmp	r3, #34	; 0x22
 80047ea:	f040 8174 	bne.w	8004ad6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <I2C_Master_ADDR+0x54>
 80047f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d10b      	bne.n	8004816 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fe:	2300      	movs	r3, #0
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	633b      	str	r3, [r7, #48]	; 0x30
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	633b      	str	r3, [r7, #48]	; 0x30
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	e16b      	b.n	8004aee <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481a:	2b00      	cmp	r3, #0
 800481c:	d11d      	bne.n	800485a <I2C_Master_ADDR+0x98>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004826:	d118      	bne.n	800485a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004828:	2300      	movs	r3, #0
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	651a      	str	r2, [r3, #80]	; 0x50
 8004858:	e149      	b.n	8004aee <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d113      	bne.n	800488c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004864:	2300      	movs	r3, #0
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e120      	b.n	8004ace <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	f040 808a 	bne.w	80049ac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800489e:	d137      	bne.n	8004910 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048be:	d113      	bne.n	80048e8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d0:	2300      	movs	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	e0f2      	b.n	8004ace <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e8:	2300      	movs	r3, #0
 80048ea:	623b      	str	r3, [r7, #32]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	623b      	str	r3, [r7, #32]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	623b      	str	r3, [r7, #32]
 80048fc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e0de      	b.n	8004ace <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	2b08      	cmp	r3, #8
 8004914:	d02e      	beq.n	8004974 <I2C_Master_ADDR+0x1b2>
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	2b20      	cmp	r3, #32
 800491a:	d02b      	beq.n	8004974 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	2b12      	cmp	r3, #18
 8004920:	d102      	bne.n	8004928 <I2C_Master_ADDR+0x166>
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2b01      	cmp	r3, #1
 8004926:	d125      	bne.n	8004974 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	2b04      	cmp	r3, #4
 800492c:	d00e      	beq.n	800494c <I2C_Master_ADDR+0x18a>
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	2b02      	cmp	r3, #2
 8004932:	d00b      	beq.n	800494c <I2C_Master_ADDR+0x18a>
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	2b10      	cmp	r3, #16
 8004938:	d008      	beq.n	800494c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e007      	b.n	800495c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800495a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495c:	2300      	movs	r3, #0
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	e0ac      	b.n	8004ace <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004982:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004984:	2300      	movs	r3, #0
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e090      	b.n	8004ace <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d158      	bne.n	8004a68 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d021      	beq.n	8004a00 <I2C_Master_ADDR+0x23e>
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d01e      	beq.n	8004a00 <I2C_Master_ADDR+0x23e>
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d01b      	beq.n	8004a00 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e012      	b.n	8004a26 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a34:	d14b      	bne.n	8004ace <I2C_Master_ADDR+0x30c>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a3c:	d00b      	beq.n	8004a56 <I2C_Master_ADDR+0x294>
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d008      	beq.n	8004a56 <I2C_Master_ADDR+0x294>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d005      	beq.n	8004a56 <I2C_Master_ADDR+0x294>
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d002      	beq.n	8004a56 <I2C_Master_ADDR+0x294>
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d13b      	bne.n	8004ace <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	e032      	b.n	8004ace <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a76:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a86:	d117      	bne.n	8004ab8 <I2C_Master_ADDR+0x2f6>
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a8e:	d00b      	beq.n	8004aa8 <I2C_Master_ADDR+0x2e6>
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d008      	beq.n	8004aa8 <I2C_Master_ADDR+0x2e6>
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d005      	beq.n	8004aa8 <I2C_Master_ADDR+0x2e6>
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d002      	beq.n	8004aa8 <I2C_Master_ADDR+0x2e6>
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d107      	bne.n	8004ab8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ab6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ad4:	e00b      	b.n	8004aee <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	68bb      	ldr	r3, [r7, #8]
}
 8004aec:	e7ff      	b.n	8004aee <I2C_Master_ADDR+0x32c>
 8004aee:	bf00      	nop
 8004af0:	3744      	adds	r7, #68	; 0x44
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d02b      	beq.n	8004b6a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	781a      	ldrb	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d114      	bne.n	8004b6a <I2C_SlaveTransmit_TXE+0x72>
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b29      	cmp	r3, #41	; 0x29
 8004b44:	d111      	bne.n	8004b6a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2221      	movs	r2, #33	; 0x21
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2228      	movs	r2, #40	; 0x28
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fc fa85 	bl	8001074 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d011      	beq.n	8004ba8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	781a      	ldrb	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d02c      	beq.n	8004c26 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d114      	bne.n	8004c26 <I2C_SlaveReceive_RXNE+0x74>
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8004c00:	d111      	bne.n	8004c26 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c10:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2222      	movs	r2, #34	; 0x22
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2228      	movs	r2, #40	; 0x28
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fc fa0b 	bl	800103c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d012      	beq.n	8004c66 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c8a:	2b28      	cmp	r3, #40	; 0x28
 8004c8c:	d127      	bne.n	8004cde <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	09db      	lsrs	r3, r3, #7
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	81bb      	strh	r3, [r7, #12]
 8004cc0:	e002      	b.n	8004cc8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004cd0:	89ba      	ldrh	r2, [r7, #12]
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fc f97c 	bl	8000fd4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cdc:	e008      	b.n	8004cf0 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0202 	mvn.w	r2, #2
 8004ce6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d54:	d172      	bne.n	8004e3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b22      	cmp	r3, #34	; 0x22
 8004d5a:	d002      	beq.n	8004d62 <I2C_Slave_STOPF+0x6a>
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d60:	d135      	bne.n	8004dce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f043 0204 	orr.w	r2, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe f90c 	bl	8002fb8 <HAL_DMA_GetState>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d049      	beq.n	8004e3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	4a69      	ldr	r2, [pc, #420]	; (8004f50 <I2C_Slave_STOPF+0x258>)
 8004dac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fd ff84 	bl	8002cc0 <HAL_DMA_Abort_IT>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d03d      	beq.n	8004e3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dcc:	e035      	b.n	8004e3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f043 0204 	orr.w	r2, r3, #4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe f8d6 	bl	8002fb8 <HAL_DMA_GetState>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d014      	beq.n	8004e3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	4a4e      	ldr	r2, [pc, #312]	; (8004f50 <I2C_Slave_STOPF+0x258>)
 8004e18:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd ff4e 	bl	8002cc0 <HAL_DMA_Abort_IT>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e34:	4610      	mov	r0, r2
 8004e36:	4798      	blx	r3
 8004e38:	e000      	b.n	8004e3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d03e      	beq.n	8004ec4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d112      	bne.n	8004e7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d112      	bne.n	8004eae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	f043 0204 	orr.w	r2, r3, #4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f8b3 	bl	8005038 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004ed2:	e039      	b.n	8004f48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed8:	d109      	bne.n	8004eee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2228      	movs	r2, #40	; 0x28
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fc f8a7 	bl	800103c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b28      	cmp	r3, #40	; 0x28
 8004ef8:	d111      	bne.n	8004f1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <I2C_Slave_STOPF+0x25c>)
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc f83a 	bl	8000f90 <HAL_I2C_ListenCpltCallback>
}
 8004f1c:	e014      	b.n	8004f48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	2b22      	cmp	r3, #34	; 0x22
 8004f24:	d002      	beq.n	8004f2c <I2C_Slave_STOPF+0x234>
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	2b22      	cmp	r3, #34	; 0x22
 8004f2a:	d10d      	bne.n	8004f48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc f87a 	bl	800103c <HAL_I2C_SlaveRxCpltCallback>
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	08005265 	.word	0x08005265
 8004f54:	ffff0000 	.word	0xffff0000

08004f58 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d002      	beq.n	8004f7a <I2C_Slave_AF+0x22>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d129      	bne.n	8004fce <I2C_Slave_AF+0x76>
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b28      	cmp	r3, #40	; 0x28
 8004f7e:	d126      	bne.n	8004fce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a2c      	ldr	r2, [pc, #176]	; (8005034 <I2C_Slave_AF+0xdc>)
 8004f84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f94:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f9e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fb ffe2 	bl	8000f90 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004fcc:	e02e      	b.n	800502c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	2b21      	cmp	r3, #33	; 0x21
 8004fd2:	d126      	bne.n	8005022 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a17      	ldr	r2, [pc, #92]	; (8005034 <I2C_Slave_AF+0xdc>)
 8004fd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2221      	movs	r2, #33	; 0x21
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ffe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005008:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fc f82a 	bl	8001074 <HAL_I2C_SlaveTxCpltCallback>
}
 8005020:	e004      	b.n	800502c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800502a:	615a      	str	r2, [r3, #20]
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	ffff0000 	.word	0xffff0000

08005038 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005046:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b10      	cmp	r3, #16
 8005052:	d10a      	bne.n	800506a <I2C_ITError+0x32>
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b22      	cmp	r3, #34	; 0x22
 8005058:	d107      	bne.n	800506a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005068:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005070:	2b28      	cmp	r3, #40	; 0x28
 8005072:	d107      	bne.n	8005084 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2228      	movs	r2, #40	; 0x28
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005082:	e015      	b.n	80050b0 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005092:	d006      	beq.n	80050a2 <I2C_ITError+0x6a>
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b60      	cmp	r3, #96	; 0x60
 8005098:	d003      	beq.n	80050a2 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050be:	d161      	bne.n	8005184 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d020      	beq.n	800511e <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e0:	4a5e      	ldr	r2, [pc, #376]	; (800525c <I2C_ITError+0x224>)
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fd fde9 	bl	8002cc0 <HAL_DMA_Abort_IT>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8089 	beq.w	8005208 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005118:	4610      	mov	r0, r2
 800511a:	4798      	blx	r3
 800511c:	e074      	b.n	8005208 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	4a4e      	ldr	r2, [pc, #312]	; (800525c <I2C_ITError+0x224>)
 8005124:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	4618      	mov	r0, r3
 800512c:	f7fd fdc8 	bl	8002cc0 <HAL_DMA_Abort_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d068      	beq.n	8005208 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d10b      	bne.n	800515c <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800517e:	4610      	mov	r0, r2
 8005180:	4798      	blx	r3
 8005182:	e041      	b.n	8005208 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b60      	cmp	r3, #96	; 0x60
 800518e:	d125      	bne.n	80051dc <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d10b      	bne.n	80051c4 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fb ff85 	bl	80010e4 <HAL_I2C_AbortCpltCallback>
 80051da:	e015      	b.n	8005208 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d10b      	bne.n	8005202 <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fb ff52 	bl	80010ac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b04      	cmp	r3, #4
 800521a:	d11b      	bne.n	8005254 <I2C_ITError+0x21c>
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b28      	cmp	r3, #40	; 0x28
 8005220:	d118      	bne.n	8005254 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005230:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a0a      	ldr	r2, [pc, #40]	; (8005260 <I2C_ITError+0x228>)
 8005236:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fb fe9e 	bl	8000f90 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08005265 	.word	0x08005265
 8005260:	ffff0000 	.word	0xffff0000

08005264 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005278:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	2200      	movs	r2, #0
 8005280:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	2200      	movs	r2, #0
 8005288:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005298:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	2200      	movs	r2, #0
 80052a6:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	2200      	movs	r2, #0
 80052ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b60      	cmp	r3, #96	; 0x60
 80052ca:	d10e      	bne.n	80052ea <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7fb fefe 	bl	80010e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052e8:	e027      	b.n	800533a <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052ea:	7afb      	ldrb	r3, [r7, #11]
 80052ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052f0:	2b28      	cmp	r3, #40	; 0x28
 80052f2:	d117      	bne.n	8005324 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005312:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2228      	movs	r2, #40	; 0x28
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005322:	e007      	b.n	8005334 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7fb feb9 	bl	80010ac <HAL_I2C_ErrorCallback>
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005352:	d103      	bne.n	800535c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800535a:	e007      	b.n	800536c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005364:	d102      	bne.n	800536c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2208      	movs	r2, #8
 800536a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005378:	b08b      	sub	sp, #44	; 0x2c
 800537a:	af06      	add	r7, sp, #24
 800537c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0d3      	b.n	8005530 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fc fd51 	bl	8001e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2203      	movs	r2, #3
 80053a6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f002 fcce 	bl	8007d50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	687e      	ldr	r6, [r7, #4]
 80053bc:	466d      	mov	r5, sp
 80053be:	f106 0410 	add.w	r4, r6, #16
 80053c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	1d33      	adds	r3, r6, #4
 80053cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ce:	6838      	ldr	r0, [r7, #0]
 80053d0:	f002 fc97 	bl	8007d02 <USB_CoreInit>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e0a4      	b.n	8005530 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2100      	movs	r1, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f002 fccb 	bl	8007d88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
 80053f6:	e035      	b.n	8005464 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	015b      	lsls	r3, r3, #5
 80053fe:	4413      	add	r3, r2
 8005400:	3329      	adds	r3, #41	; 0x29
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	015b      	lsls	r3, r3, #5
 800540c:	4413      	add	r3, r2
 800540e:	3328      	adds	r3, #40	; 0x28
 8005410:	7bfa      	ldrb	r2, [r7, #15]
 8005412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	7bfa      	ldrb	r2, [r7, #15]
 8005418:	b291      	uxth	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	015b      	lsls	r3, r3, #5
 800541e:	4413      	add	r3, r2
 8005420:	3336      	adds	r3, #54	; 0x36
 8005422:	460a      	mov	r2, r1
 8005424:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	015b      	lsls	r3, r3, #5
 800542c:	4413      	add	r3, r2
 800542e:	332b      	adds	r3, #43	; 0x2b
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	015b      	lsls	r3, r3, #5
 800543a:	4413      	add	r3, r2
 800543c:	3338      	adds	r3, #56	; 0x38
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	015b      	lsls	r3, r3, #5
 8005448:	4413      	add	r3, r2
 800544a:	333c      	adds	r3, #60	; 0x3c
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	3302      	adds	r3, #2
 8005456:	015b      	lsls	r3, r3, #5
 8005458:	4413      	add	r3, r2
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	3301      	adds	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
 8005464:	7bfa      	ldrb	r2, [r7, #15]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	d3c4      	bcc.n	80053f8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	e031      	b.n	80054d8 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	015b      	lsls	r3, r3, #5
 800547a:	4413      	add	r3, r2
 800547c:	f203 1329 	addw	r3, r3, #297	; 0x129
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	015b      	lsls	r3, r3, #5
 800548a:	4413      	add	r3, r2
 800548c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005490:	7bfa      	ldrb	r2, [r7, #15]
 8005492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	015b      	lsls	r3, r3, #5
 800549a:	4413      	add	r3, r2
 800549c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	015b      	lsls	r3, r3, #5
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	015b      	lsls	r3, r3, #5
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	330a      	adds	r3, #10
 80054ca:	015b      	lsls	r3, r3, #5
 80054cc:	4413      	add	r3, r2
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	3301      	adds	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
 80054d8:	7bfa      	ldrb	r2, [r7, #15]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d3c8      	bcc.n	8005474 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	687e      	ldr	r6, [r7, #4]
 80054ea:	466d      	mov	r5, sp
 80054ec:	f106 0410 	add.w	r4, r6, #16
 80054f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	602b      	str	r3, [r5, #0]
 80054f8:	1d33      	adds	r3, r6, #4
 80054fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054fc:	6838      	ldr	r0, [r7, #0]
 80054fe:	f002 fc4f 	bl	8007da0 <USB_DevInit>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e00d      	b.n	8005530 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f003 fc8c 	bl	8008e46 <USB_DevDisconnect>

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005538 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_PCD_Start+0x16>
 800554a:	2302      	movs	r3, #2
 800554c:	e016      	b.n	800557c <HAL_PCD_Start+0x44>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005556:	2101      	movs	r1, #1
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f00e fbc6 	bl	8013cea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f003 fc65 	bl	8008e32 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f002 fbd8 	bl	8007d22 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f003 fc62 	bl	8008e5a <USB_ReadInterrupts>
 8005596:	4603      	mov	r3, r0
 8005598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800559c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a0:	d102      	bne.n	80055a8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 faf2 	bl	8005b8c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f003 fc54 	bl	8008e5a <USB_ReadInterrupts>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055bc:	d112      	bne.n	80055e4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d0:	b292      	uxth	r2, r2
 80055d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f00e f999 	bl	801390e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80055dc:	2100      	movs	r1, #0
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8de 	bl	80057a0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f003 fc36 	bl	8008e5a <USB_ReadInterrupts>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f8:	d10b      	bne.n	8005612 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005602:	b29a      	uxth	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800560c:	b292      	uxth	r2, r2
 800560e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f003 fc1f 	bl	8008e5a <USB_ReadInterrupts>
 800561c:	4603      	mov	r3, r0
 800561e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005626:	d10b      	bne.n	8005640 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005630:	b29a      	uxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800563a:	b292      	uxth	r2, r2
 800563c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f003 fc08 	bl	8008e5a <USB_ReadInterrupts>
 800564a:	4603      	mov	r3, r0
 800564c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005654:	d126      	bne.n	80056a4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800565e:	b29a      	uxth	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0204 	bic.w	r2, r2, #4
 8005668:	b292      	uxth	r2, r2
 800566a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005676:	b29a      	uxth	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0208 	bic.w	r2, r2, #8
 8005680:	b292      	uxth	r2, r2
 8005682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f00e f97a 	bl	8013980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800569e:	b292      	uxth	r2, r2
 80056a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f003 fbd6 	bl	8008e5a <USB_ReadInterrupts>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b8:	d13d      	bne.n	8005736 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0208 	orr.w	r2, r2, #8
 80056cc:	b292      	uxth	r2, r2
 80056ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e4:	b292      	uxth	r2, r2
 80056e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0204 	orr.w	r2, r2, #4
 80056fc:	b292      	uxth	r2, r2
 80056fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f003 fba7 	bl	8008e5a <USB_ReadInterrupts>
 800570c:	4603      	mov	r3, r0
 800570e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	d10b      	bne.n	8005730 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800572a:	b292      	uxth	r2, r2
 800572c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f00e f90b 	bl	801394c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f003 fb8d 	bl	8008e5a <USB_ReadInterrupts>
 8005740:	4603      	mov	r3, r0
 8005742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574a:	d10e      	bne.n	800576a <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005754:	b29a      	uxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800575e:	b292      	uxth	r2, r2
 8005760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f00e f8c4 	bl	80138f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f003 fb73 	bl	8008e5a <USB_ReadInterrupts>
 8005774:	4603      	mov	r3, r0
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577e:	d10b      	bne.n	8005798 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005792:	b292      	uxth	r2, r2
 8005794:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <HAL_PCD_SetAddress+0x1a>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e013      	b.n	80057e2 <HAL_PCD_SetAddress+0x42>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	78fa      	ldrb	r2, [r7, #3]
 80057d0:	4611      	mov	r1, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f003 fb1a 	bl	8008e0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	4608      	mov	r0, r1
 80057f4:	4611      	mov	r1, r2
 80057f6:	461a      	mov	r2, r3
 80057f8:	4603      	mov	r3, r0
 80057fa:	70fb      	strb	r3, [r7, #3]
 80057fc:	460b      	mov	r3, r1
 80057fe:	803b      	strh	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da0b      	bge.n	8005828 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	015b      	lsls	r3, r3, #5
 8005818:	3328      	adds	r3, #40	; 0x28
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	705a      	strb	r2, [r3, #1]
 8005826:	e00b      	b.n	8005840 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	015b      	lsls	r3, r3, #5
 8005830:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4413      	add	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	b2da      	uxtb	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800584c:	883a      	ldrh	r2, [r7, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	78ba      	ldrb	r2, [r7, #2]
 8005856:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800586a:	78bb      	ldrb	r3, [r7, #2]
 800586c:	2b02      	cmp	r3, #2
 800586e:	d102      	bne.n	8005876 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_PCD_EP_Open+0x9a>
 8005880:	2302      	movs	r3, #2
 8005882:	e00e      	b.n	80058a2 <HAL_PCD_EP_Open+0xb8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68f9      	ldr	r1, [r7, #12]
 8005892:	4618      	mov	r0, r3
 8005894:	f002 faa8 	bl	8007de8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80058a0:	7afb      	ldrb	r3, [r7, #11]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da0b      	bge.n	80058d6 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	015b      	lsls	r3, r3, #5
 80058c6:	3328      	adds	r3, #40	; 0x28
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	4413      	add	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	705a      	strb	r2, [r3, #1]
 80058d4:	e00b      	b.n	80058ee <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	015b      	lsls	r3, r3, #5
 80058de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4413      	add	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_PCD_EP_Close+0x5e>
 8005904:	2302      	movs	r3, #2
 8005906:	e00e      	b.n	8005926 <HAL_PCD_EP_Close+0x7c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	4618      	mov	r0, r3
 8005918:	f002 fd54 	bl	80083c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
 800593a:	460b      	mov	r3, r1
 800593c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800593e:	7afb      	ldrb	r3, [r7, #11]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	015b      	lsls	r3, r3, #5
 8005946:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2200      	movs	r2, #0
 8005966:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005968:	7afb      	ldrb	r3, [r7, #11]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	b2da      	uxtb	r2, r3
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6979      	ldr	r1, [r7, #20]
 8005984:	4618      	mov	r0, r3
 8005986:	f002 feb3 	bl	80086f0 <USB_EPStartXfer>
 800598a:	e005      	b.n	8005998 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6979      	ldr	r1, [r7, #20]
 8005992:	4618      	mov	r0, r3
 8005994:	f002 feac 	bl	80086f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	460b      	mov	r3, r1
 80059ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	330a      	adds	r3, #10
 80059b8:	015b      	lsls	r3, r3, #5
 80059ba:	4413      	add	r3, r2
 80059bc:	3304      	adds	r3, #4
 80059be:	681b      	ldr	r3, [r3, #0]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
 80059d6:	460b      	mov	r3, r1
 80059d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059da:	7afb      	ldrb	r3, [r7, #11]
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	015b      	lsls	r3, r3, #5
 80059e2:	3328      	adds	r3, #40	; 0x28
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2200      	movs	r2, #0
 80059fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2201      	movs	r2, #1
 8005a00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a02:	7afb      	ldrb	r3, [r7, #11]
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6979      	ldr	r1, [r7, #20]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 fe66 	bl	80086f0 <USB_EPStartXfer>
 8005a24:	e005      	b.n	8005a32 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6979      	ldr	r1, [r7, #20]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f002 fe5f 	bl	80086f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	f003 0207 	and.w	r2, r3, #7
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d901      	bls.n	8005a5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e046      	b.n	8005ae8 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	da0b      	bge.n	8005a7a <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	015b      	lsls	r3, r3, #5
 8005a6a:	3328      	adds	r3, #40	; 0x28
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	4413      	add	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	705a      	strb	r2, [r3, #1]
 8005a78:	e009      	b.n	8005a8e <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	015b      	lsls	r3, r3, #5
 8005a7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_PCD_EP_SetStall+0x72>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e01c      	b.n	8005ae8 <HAL_PCD_EP_SetStall+0xac>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68f9      	ldr	r1, [r7, #12]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f003 f8cf 	bl	8008c60 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d108      	bne.n	8005ade <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f003 f9cd 	bl	8008e78 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d901      	bls.n	8005b0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e03a      	b.n	8005b84 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	da0b      	bge.n	8005b2e <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	015b      	lsls	r3, r3, #5
 8005b1e:	3328      	adds	r3, #40	; 0x28
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	705a      	strb	r2, [r3, #1]
 8005b2c:	e00b      	b.n	8005b46 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	015b      	lsls	r3, r3, #5
 8005b36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_PCD_EP_ClrStall+0x76>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e00e      	b.n	8005b84 <HAL_PCD_EP_ClrStall+0x94>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f003 f8b5 	bl	8008ce4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b089      	sub	sp, #36	; 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b94:	e282      	b.n	800609c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b9e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005ba0:	8afb      	ldrh	r3, [r7, #22]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8005baa:	7d7b      	ldrb	r3, [r7, #21]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 8142 	bne.w	8005e36 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005bb2:	8afb      	ldrh	r3, [r7, #22]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d151      	bne.n	8005c60 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bcc:	b29c      	uxth	r4, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8005bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3328      	adds	r3, #40	; 0x28
 8005be2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	441a      	add	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005c1e:	2100      	movs	r1, #0
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f00d fe4f 	bl	80138c4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8234 	beq.w	800609c <PCD_EP_ISR_Handler+0x510>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f040 822f 	bne.w	800609c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	b292      	uxth	r2, r2
 8005c52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c5e:	e21d      	b.n	800609c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005c66:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005c70:	8a7b      	ldrh	r3, [r7, #18]
 8005c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d033      	beq.n	8005ce2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3306      	adds	r3, #6
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f003 f92d 	bl	8008f18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cca:	4013      	ands	r3, r2
 8005ccc:	b29c      	uxth	r4, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8005cd6:	b292      	uxth	r2, r2
 8005cd8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f00d fdc8 	bl	8013870 <HAL_PCD_SetupStageCallback>
 8005ce0:	e1dc      	b.n	800609c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ce2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f280 81d8 	bge.w	800609c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	b29c      	uxth	r4, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8005d04:	b292      	uxth	r2, r2
 8005d06:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3306      	adds	r3, #6
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d019      	beq.n	8005d70 <PCD_EP_ISR_Handler+0x1e4>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d015      	beq.n	8005d70 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6959      	ldr	r1, [r3, #20]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f003 f8df 	bl	8008f18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	441a      	add	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005d68:	2100      	movs	r1, #0
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f00d fd92 	bl	8013894 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461c      	mov	r4, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	441c      	add	r4, r3
 8005d82:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8005d86:	461c      	mov	r4, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10e      	bne.n	8005dae <PCD_EP_ISR_Handler+0x222>
 8005d90:	8823      	ldrh	r3, [r4, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	8023      	strh	r3, [r4, #0]
 8005d9c:	8823      	ldrh	r3, [r4, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	8023      	strh	r3, [r4, #0]
 8005dac:	e02d      	b.n	8005e0a <PCD_EP_ISR_Handler+0x27e>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b3e      	cmp	r3, #62	; 0x3e
 8005db4:	d812      	bhi.n	8005ddc <PCD_EP_ISR_Handler+0x250>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	085b      	lsrs	r3, r3, #1
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <PCD_EP_ISR_Handler+0x244>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	029b      	lsls	r3, r3, #10
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8023      	strh	r3, [r4, #0]
 8005dda:	e016      	b.n	8005e0a <PCD_EP_ISR_Handler+0x27e>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <PCD_EP_ISR_Handler+0x26a>
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	029b      	lsls	r3, r3, #10
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	b29c      	uxth	r4, r3
 8005e1c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005e20:	b29c      	uxth	r4, r3
 8005e22:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005e26:	b29c      	uxth	r4, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	4ba2      	ldr	r3, [pc, #648]	; (80060b8 <PCD_EP_ISR_Handler+0x52c>)
 8005e2e:	4323      	orrs	r3, r4
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	8013      	strh	r3, [r2, #0]
 8005e34:	e132      	b.n	800609c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	7d7b      	ldrb	r3, [r7, #21]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005e46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f280 80d1 	bge.w	8005ff2 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	7d7b      	ldrb	r3, [r7, #21]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e64:	4013      	ands	r3, r2
 8005e66:	b29c      	uxth	r4, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	7d7b      	ldrb	r3, [r7, #21]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8005e78:	b292      	uxth	r2, r2
 8005e7a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005e7c:	7d7b      	ldrb	r3, [r7, #21]
 8005e7e:	015b      	lsls	r3, r3, #5
 8005e80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	7b1b      	ldrb	r3, [r3, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d121      	bne.n	8005ed6 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3306      	adds	r3, #6
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eba:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8005ebc:	8bfb      	ldrh	r3, [r7, #30]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d072      	beq.n	8005fa8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6959      	ldr	r1, [r3, #20]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	88da      	ldrh	r2, [r3, #6]
 8005ece:	8bfb      	ldrh	r3, [r7, #30]
 8005ed0:	f003 f822 	bl	8008f18 <USB_ReadPMA>
 8005ed4:	e068      	b.n	8005fa8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d021      	beq.n	8005f34 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	461a      	mov	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	4413      	add	r3, r2
 8005f04:	3302      	adds	r3, #2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f18:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8005f1a:	8bfb      	ldrh	r3, [r7, #30]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d02a      	beq.n	8005f76 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6959      	ldr	r1, [r3, #20]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	891a      	ldrh	r2, [r3, #8]
 8005f2c:	8bfb      	ldrh	r3, [r7, #30]
 8005f2e:	f002 fff3 	bl	8008f18 <USB_ReadPMA>
 8005f32:	e020      	b.n	8005f76 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	4413      	add	r3, r2
 8005f48:	3306      	adds	r3, #6
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8005f5e:	8bfb      	ldrh	r3, [r7, #30]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6959      	ldr	r1, [r3, #20]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	895a      	ldrh	r2, [r3, #10]
 8005f70:	8bfb      	ldrh	r3, [r7, #30]
 8005f72:	f002 ffd1 	bl	8008f18 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f90:	b29c      	uxth	r4, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	4b46      	ldr	r3, [pc, #280]	; (80060bc <PCD_EP_ISR_Handler+0x530>)
 8005fa2:	4323      	orrs	r3, r4
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	8bfb      	ldrh	r3, [r7, #30]
 8005fae:	441a      	add	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	8bfb      	ldrh	r3, [r7, #30]
 8005fba:	441a      	add	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <PCD_EP_ISR_Handler+0x446>
 8005fc8:	8bfa      	ldrh	r2, [r7, #30]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d206      	bcs.n	8005fe0 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f00d fc5b 	bl	8013894 <HAL_PCD_DataOutStageCallback>
 8005fde:	e008      	b.n	8005ff2 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	7819      	ldrb	r1, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff fc9e 	bl	800592e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005ff2:	8a7b      	ldrh	r3, [r7, #18]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d04f      	beq.n	800609c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8005ffc:	7d7b      	ldrb	r3, [r7, #21]
 8005ffe:	015b      	lsls	r3, r3, #5
 8006000:	3328      	adds	r3, #40	; 0x28
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4413      	add	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	7d7b      	ldrb	r3, [r7, #21]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	b29c      	uxth	r4, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	7d7b      	ldrb	r3, [r7, #21]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8006032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006036:	b29b      	uxth	r3, r3
 8006038:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	4413      	add	r3, r2
 800604e:	3302      	adds	r3, #2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6812      	ldr	r2, [r2, #0]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	441a      	add	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f00d fc1e 	bl	80138c4 <HAL_PCD_DataInStageCallback>
 8006088:	e008      	b.n	800609c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	7819      	ldrb	r1, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fc97 	bl	80059ca <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	b21b      	sxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f6ff ad74 	blt.w	8005b96 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3724      	adds	r7, #36	; 0x24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd90      	pop	{r4, r7, pc}
 80060b8:	ffff8080 	.word	0xffff8080
 80060bc:	ffff80c0 	.word	0xffff80c0

080060c0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	817b      	strh	r3, [r7, #10]
 80060ce:	4613      	mov	r3, r2
 80060d0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060d2:	897b      	ldrh	r3, [r7, #10]
 80060d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060de:	897b      	ldrh	r3, [r7, #10]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	015b      	lsls	r3, r3, #5
 80060e6:	3328      	adds	r3, #40	; 0x28
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e006      	b.n	80060fe <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060f0:	897b      	ldrh	r3, [r7, #10]
 80060f2:	015b      	lsls	r3, r3, #5
 80060f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80060fe:	893b      	ldrh	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d107      	bne.n	8006114 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2200      	movs	r2, #0
 8006108:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	b29a      	uxth	r2, r3
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	80da      	strh	r2, [r3, #6]
 8006112:	e00b      	b.n	800612c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2201      	movs	r2, #1
 8006118:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	b29a      	uxth	r2, r3
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0c1b      	lsrs	r3, r3, #16
 8006126:	b29a      	uxth	r2, r3
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr

08006138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e26c      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 8087 	beq.w	8006266 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006158:	4b92      	ldr	r3, [pc, #584]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f003 030c 	and.w	r3, r3, #12
 8006160:	2b04      	cmp	r3, #4
 8006162:	d00c      	beq.n	800617e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006164:	4b8f      	ldr	r3, [pc, #572]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f003 030c 	and.w	r3, r3, #12
 800616c:	2b08      	cmp	r3, #8
 800616e:	d112      	bne.n	8006196 <HAL_RCC_OscConfig+0x5e>
 8006170:	4b8c      	ldr	r3, [pc, #560]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617c:	d10b      	bne.n	8006196 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800617e:	4b89      	ldr	r3, [pc, #548]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d06c      	beq.n	8006264 <HAL_RCC_OscConfig+0x12c>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d168      	bne.n	8006264 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e246      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800619e:	d106      	bne.n	80061ae <HAL_RCC_OscConfig+0x76>
 80061a0:	4b80      	ldr	r3, [pc, #512]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a7f      	ldr	r2, [pc, #508]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	e02e      	b.n	800620c <HAL_RCC_OscConfig+0xd4>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10c      	bne.n	80061d0 <HAL_RCC_OscConfig+0x98>
 80061b6:	4b7b      	ldr	r3, [pc, #492]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a7a      	ldr	r2, [pc, #488]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	4b78      	ldr	r3, [pc, #480]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a77      	ldr	r2, [pc, #476]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e01d      	b.n	800620c <HAL_RCC_OscConfig+0xd4>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061d8:	d10c      	bne.n	80061f4 <HAL_RCC_OscConfig+0xbc>
 80061da:	4b72      	ldr	r3, [pc, #456]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a71      	ldr	r2, [pc, #452]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	4b6f      	ldr	r3, [pc, #444]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6e      	ldr	r2, [pc, #440]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e00b      	b.n	800620c <HAL_RCC_OscConfig+0xd4>
 80061f4:	4b6b      	ldr	r3, [pc, #428]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a6a      	ldr	r2, [pc, #424]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80061fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	4b68      	ldr	r3, [pc, #416]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a67      	ldr	r2, [pc, #412]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800620a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d013      	beq.n	800623c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006214:	f7fb ffac 	bl	8002170 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800621c:	f7fb ffa8 	bl	8002170 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	; 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e1fa      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800622e:	4b5d      	ldr	r3, [pc, #372]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0f0      	beq.n	800621c <HAL_RCC_OscConfig+0xe4>
 800623a:	e014      	b.n	8006266 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fb ff98 	bl	8002170 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006244:	f7fb ff94 	bl	8002170 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b64      	cmp	r3, #100	; 0x64
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e1e6      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006256:	4b53      	ldr	r3, [pc, #332]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f0      	bne.n	8006244 <HAL_RCC_OscConfig+0x10c>
 8006262:	e000      	b.n	8006266 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d063      	beq.n	800633a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006272:	4b4c      	ldr	r3, [pc, #304]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f003 030c 	and.w	r3, r3, #12
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800627e:	4b49      	ldr	r3, [pc, #292]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b08      	cmp	r3, #8
 8006288:	d11c      	bne.n	80062c4 <HAL_RCC_OscConfig+0x18c>
 800628a:	4b46      	ldr	r3, [pc, #280]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d116      	bne.n	80062c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006296:	4b43      	ldr	r3, [pc, #268]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_RCC_OscConfig+0x176>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d001      	beq.n	80062ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e1ba      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ae:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	4939      	ldr	r1, [pc, #228]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062c2:	e03a      	b.n	800633a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d020      	beq.n	800630e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062cc:	4b36      	ldr	r3, [pc, #216]	; (80063a8 <HAL_RCC_OscConfig+0x270>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d2:	f7fb ff4d 	bl	8002170 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062da:	f7fb ff49 	bl	8002170 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e19b      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ec:	4b2d      	ldr	r3, [pc, #180]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f8:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4927      	ldr	r1, [pc, #156]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006308:	4313      	orrs	r3, r2
 800630a:	600b      	str	r3, [r1, #0]
 800630c:	e015      	b.n	800633a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800630e:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <HAL_RCC_OscConfig+0x270>)
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006314:	f7fb ff2c 	bl	8002170 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800631c:	f7fb ff28 	bl	8002170 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e17a      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800632e:	4b1d      	ldr	r3, [pc, #116]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f0      	bne.n	800631c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b00      	cmp	r3, #0
 8006344:	d03a      	beq.n	80063bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d019      	beq.n	8006382 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800634e:	4b17      	ldr	r3, [pc, #92]	; (80063ac <HAL_RCC_OscConfig+0x274>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006354:	f7fb ff0c 	bl	8002170 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800635c:	f7fb ff08 	bl	8002170 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e15a      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800636e:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <HAL_RCC_OscConfig+0x26c>)
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800637a:	2001      	movs	r0, #1
 800637c:	f000 fac4 	bl	8006908 <RCC_Delay>
 8006380:	e01c      	b.n	80063bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006382:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <HAL_RCC_OscConfig+0x274>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006388:	f7fb fef2 	bl	8002170 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800638e:	e00f      	b.n	80063b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006390:	f7fb feee 	bl	8002170 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d908      	bls.n	80063b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e140      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000
 80063a8:	42420000 	.word	0x42420000
 80063ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b0:	4b9e      	ldr	r3, [pc, #632]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e9      	bne.n	8006390 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80a6 	beq.w	8006516 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ce:	4b97      	ldr	r3, [pc, #604]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10d      	bne.n	80063f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063da:	4b94      	ldr	r3, [pc, #592]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	4a93      	ldr	r2, [pc, #588]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80063e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e4:	61d3      	str	r3, [r2, #28]
 80063e6:	4b91      	ldr	r3, [pc, #580]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ee:	60bb      	str	r3, [r7, #8]
 80063f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063f2:	2301      	movs	r3, #1
 80063f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063f6:	4b8e      	ldr	r3, [pc, #568]	; (8006630 <HAL_RCC_OscConfig+0x4f8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d118      	bne.n	8006434 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006402:	4b8b      	ldr	r3, [pc, #556]	; (8006630 <HAL_RCC_OscConfig+0x4f8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a8a      	ldr	r2, [pc, #552]	; (8006630 <HAL_RCC_OscConfig+0x4f8>)
 8006408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800640e:	f7fb feaf 	bl	8002170 <HAL_GetTick>
 8006412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006416:	f7fb feab 	bl	8002170 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b64      	cmp	r3, #100	; 0x64
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e0fd      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006428:	4b81      	ldr	r3, [pc, #516]	; (8006630 <HAL_RCC_OscConfig+0x4f8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0f0      	beq.n	8006416 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d106      	bne.n	800644a <HAL_RCC_OscConfig+0x312>
 800643c:	4b7b      	ldr	r3, [pc, #492]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	4a7a      	ldr	r2, [pc, #488]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006442:	f043 0301 	orr.w	r3, r3, #1
 8006446:	6213      	str	r3, [r2, #32]
 8006448:	e02d      	b.n	80064a6 <HAL_RCC_OscConfig+0x36e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10c      	bne.n	800646c <HAL_RCC_OscConfig+0x334>
 8006452:	4b76      	ldr	r3, [pc, #472]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	4a75      	ldr	r2, [pc, #468]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	6213      	str	r3, [r2, #32]
 800645e:	4b73      	ldr	r3, [pc, #460]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	4a72      	ldr	r2, [pc, #456]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006464:	f023 0304 	bic.w	r3, r3, #4
 8006468:	6213      	str	r3, [r2, #32]
 800646a:	e01c      	b.n	80064a6 <HAL_RCC_OscConfig+0x36e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b05      	cmp	r3, #5
 8006472:	d10c      	bne.n	800648e <HAL_RCC_OscConfig+0x356>
 8006474:	4b6d      	ldr	r3, [pc, #436]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	4a6c      	ldr	r2, [pc, #432]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 800647a:	f043 0304 	orr.w	r3, r3, #4
 800647e:	6213      	str	r3, [r2, #32]
 8006480:	4b6a      	ldr	r3, [pc, #424]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	4a69      	ldr	r2, [pc, #420]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	6213      	str	r3, [r2, #32]
 800648c:	e00b      	b.n	80064a6 <HAL_RCC_OscConfig+0x36e>
 800648e:	4b67      	ldr	r3, [pc, #412]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	4a66      	ldr	r2, [pc, #408]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	6213      	str	r3, [r2, #32]
 800649a:	4b64      	ldr	r3, [pc, #400]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	4a63      	ldr	r2, [pc, #396]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80064a0:	f023 0304 	bic.w	r3, r3, #4
 80064a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d015      	beq.n	80064da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ae:	f7fb fe5f 	bl	8002170 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b4:	e00a      	b.n	80064cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b6:	f7fb fe5b 	bl	8002170 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0ab      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064cc:	4b57      	ldr	r3, [pc, #348]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0ee      	beq.n	80064b6 <HAL_RCC_OscConfig+0x37e>
 80064d8:	e014      	b.n	8006504 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064da:	f7fb fe49 	bl	8002170 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064e0:	e00a      	b.n	80064f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e2:	f7fb fe45 	bl	8002170 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e095      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f8:	4b4c      	ldr	r3, [pc, #304]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1ee      	bne.n	80064e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d105      	bne.n	8006516 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800650a:	4b48      	ldr	r3, [pc, #288]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	4a47      	ldr	r2, [pc, #284]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006514:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8081 	beq.w	8006622 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006520:	4b42      	ldr	r3, [pc, #264]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 030c 	and.w	r3, r3, #12
 8006528:	2b08      	cmp	r3, #8
 800652a:	d061      	beq.n	80065f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d146      	bne.n	80065c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006534:	4b3f      	ldr	r3, [pc, #252]	; (8006634 <HAL_RCC_OscConfig+0x4fc>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800653a:	f7fb fe19 	bl	8002170 <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006542:	f7fb fe15 	bl	8002170 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e067      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006554:	4b35      	ldr	r3, [pc, #212]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f0      	bne.n	8006542 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006568:	d108      	bne.n	800657c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800656a:	4b30      	ldr	r3, [pc, #192]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	492d      	ldr	r1, [pc, #180]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800657c:	4b2b      	ldr	r3, [pc, #172]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a19      	ldr	r1, [r3, #32]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	430b      	orrs	r3, r1
 800658e:	4927      	ldr	r1, [pc, #156]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 8006590:	4313      	orrs	r3, r2
 8006592:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006594:	4b27      	ldr	r3, [pc, #156]	; (8006634 <HAL_RCC_OscConfig+0x4fc>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659a:	f7fb fde9 	bl	8002170 <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a2:	f7fb fde5 	bl	8002170 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e037      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065b4:	4b1d      	ldr	r3, [pc, #116]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0f0      	beq.n	80065a2 <HAL_RCC_OscConfig+0x46a>
 80065c0:	e02f      	b.n	8006622 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c2:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <HAL_RCC_OscConfig+0x4fc>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c8:	f7fb fdd2 	bl	8002170 <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d0:	f7fb fdce 	bl	8002170 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e020      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <HAL_RCC_OscConfig+0x498>
 80065ee:	e018      	b.n	8006622 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e013      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <HAL_RCC_OscConfig+0x4f4>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	429a      	cmp	r2, r3
 800660e:	d106      	bne.n	800661e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661a:	429a      	cmp	r2, r3
 800661c:	d001      	beq.n	8006622 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40021000 	.word	0x40021000
 8006630:	40007000 	.word	0x40007000
 8006634:	42420060 	.word	0x42420060

08006638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0d0      	b.n	80067ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800664c:	4b6a      	ldr	r3, [pc, #424]	; (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d910      	bls.n	800667c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665a:	4b67      	ldr	r3, [pc, #412]	; (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f023 0207 	bic.w	r2, r3, #7
 8006662:	4965      	ldr	r1, [pc, #404]	; (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	4313      	orrs	r3, r2
 8006668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800666a:	4b63      	ldr	r3, [pc, #396]	; (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d001      	beq.n	800667c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e0b8      	b.n	80067ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006694:	4b59      	ldr	r3, [pc, #356]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	4a58      	ldr	r2, [pc, #352]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 800669a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800669e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066ac:	4b53      	ldr	r3, [pc, #332]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4a52      	ldr	r2, [pc, #328]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80066b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80066b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066b8:	4b50      	ldr	r3, [pc, #320]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	494d      	ldr	r1, [pc, #308]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d040      	beq.n	8006758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d107      	bne.n	80066ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066de:	4b47      	ldr	r3, [pc, #284]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d115      	bne.n	8006716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e07f      	b.n	80067ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d107      	bne.n	8006706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f6:	4b41      	ldr	r3, [pc, #260]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e073      	b.n	80067ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006706:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e06b      	b.n	80067ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006716:	4b39      	ldr	r3, [pc, #228]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f023 0203 	bic.w	r2, r3, #3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	4936      	ldr	r1, [pc, #216]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006724:	4313      	orrs	r3, r2
 8006726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006728:	f7fb fd22 	bl	8002170 <HAL_GetTick>
 800672c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672e:	e00a      	b.n	8006746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006730:	f7fb fd1e 	bl	8002170 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	f241 3288 	movw	r2, #5000	; 0x1388
 800673e:	4293      	cmp	r3, r2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e053      	b.n	80067ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006746:	4b2d      	ldr	r3, [pc, #180]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f003 020c 	and.w	r2, r3, #12
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	429a      	cmp	r2, r3
 8006756:	d1eb      	bne.n	8006730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006758:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d210      	bcs.n	8006788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006766:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f023 0207 	bic.w	r2, r3, #7
 800676e:	4922      	ldr	r1, [pc, #136]	; (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	4313      	orrs	r3, r2
 8006774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006776:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d001      	beq.n	8006788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e032      	b.n	80067ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006794:	4b19      	ldr	r3, [pc, #100]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4916      	ldr	r1, [pc, #88]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	490e      	ldr	r1, [pc, #56]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067c6:	f000 f821 	bl	800680c <HAL_RCC_GetSysClockFreq>
 80067ca:	4602      	mov	r2, r0
 80067cc:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <HAL_RCC_ClockConfig+0x1c4>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	091b      	lsrs	r3, r3, #4
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	490a      	ldr	r1, [pc, #40]	; (8006800 <HAL_RCC_ClockConfig+0x1c8>)
 80067d8:	5ccb      	ldrb	r3, [r1, r3]
 80067da:	fa22 f303 	lsr.w	r3, r2, r3
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <HAL_RCC_ClockConfig+0x1cc>)
 80067e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80067e2:	4b09      	ldr	r3, [pc, #36]	; (8006808 <HAL_RCC_ClockConfig+0x1d0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fb fc80 	bl	80020ec <HAL_InitTick>

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40022000 	.word	0x40022000
 80067fc:	40021000 	.word	0x40021000
 8006800:	0801769c 	.word	0x0801769c
 8006804:	20000004 	.word	0x20000004
 8006808:	20000008 	.word	0x20000008

0800680c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800680c:	b490      	push	{r4, r7}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006812:	4b2a      	ldr	r3, [pc, #168]	; (80068bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006814:	1d3c      	adds	r4, r7, #4
 8006816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800681c:	f240 2301 	movw	r3, #513	; 0x201
 8006820:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	2300      	movs	r3, #0
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006836:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f003 030c 	and.w	r3, r3, #12
 8006842:	2b04      	cmp	r3, #4
 8006844:	d002      	beq.n	800684c <HAL_RCC_GetSysClockFreq+0x40>
 8006846:	2b08      	cmp	r3, #8
 8006848:	d003      	beq.n	8006852 <HAL_RCC_GetSysClockFreq+0x46>
 800684a:	e02d      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800684c:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800684e:	623b      	str	r3, [r7, #32]
      break;
 8006850:	e02d      	b.n	80068ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	0c9b      	lsrs	r3, r3, #18
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800685e:	4413      	add	r3, r2
 8006860:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006864:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d013      	beq.n	8006898 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	0c5b      	lsrs	r3, r3, #17
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800687e:	4413      	add	r3, r2
 8006880:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006884:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	4a0e      	ldr	r2, [pc, #56]	; (80068c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800688a:	fb02 f203 	mul.w	r2, r2, r3
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	fbb2 f3f3 	udiv	r3, r2, r3
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
 8006896:	e004      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800689c:	fb02 f303 	mul.w	r3, r2, r3
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	623b      	str	r3, [r7, #32]
      break;
 80068a6:	e002      	b.n	80068ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068aa:	623b      	str	r3, [r7, #32]
      break;
 80068ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ae:	6a3b      	ldr	r3, [r7, #32]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3728      	adds	r7, #40	; 0x28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc90      	pop	{r4, r7}
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	08017228 	.word	0x08017228
 80068c0:	40021000 	.word	0x40021000
 80068c4:	007a1200 	.word	0x007a1200
 80068c8:	003d0900 	.word	0x003d0900

080068cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <HAL_RCC_GetHCLKFreq+0x10>)
 80068d2:	681b      	ldr	r3, [r3, #0]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr
 80068dc:	20000004 	.word	0x20000004

080068e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068e4:	f7ff fff2 	bl	80068cc <HAL_RCC_GetHCLKFreq>
 80068e8:	4602      	mov	r2, r0
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	4903      	ldr	r1, [pc, #12]	; (8006904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068f6:	5ccb      	ldrb	r3, [r1, r3]
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40021000 	.word	0x40021000
 8006904:	080176ac 	.word	0x080176ac

08006908 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006910:	4b0a      	ldr	r3, [pc, #40]	; (800693c <RCC_Delay+0x34>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a0a      	ldr	r2, [pc, #40]	; (8006940 <RCC_Delay+0x38>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	0a5b      	lsrs	r3, r3, #9
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006924:	bf00      	nop
  }
  while (Delay --);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1e5a      	subs	r2, r3, #1
 800692a:	60fa      	str	r2, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1f9      	bne.n	8006924 <RCC_Delay+0x1c>
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr
 800693c:	20000004 	.word	0x20000004
 8006940:	10624dd3 	.word	0x10624dd3

08006944 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d07d      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006960:	2300      	movs	r3, #0
 8006962:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006964:	4b4f      	ldr	r3, [pc, #316]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10d      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006970:	4b4c      	ldr	r3, [pc, #304]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	4a4b      	ldr	r2, [pc, #300]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697a:	61d3      	str	r3, [r2, #28]
 800697c:	4b49      	ldr	r3, [pc, #292]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006988:	2301      	movs	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800698c:	4b46      	ldr	r3, [pc, #280]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d118      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006998:	4b43      	ldr	r3, [pc, #268]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a42      	ldr	r2, [pc, #264]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800699e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069a4:	f7fb fbe4 	bl	8002170 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069aa:	e008      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ac:	f7fb fbe0 	bl	8002170 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b64      	cmp	r3, #100	; 0x64
 80069b8:	d901      	bls.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e06d      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069be:	4b3a      	ldr	r3, [pc, #232]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f0      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069ca:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d02e      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d027      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069e8:	4b2e      	ldr	r3, [pc, #184]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069f8:	4b2c      	ldr	r3, [pc, #176]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80069fe:	4a29      	ldr	r2, [pc, #164]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d014      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0e:	f7fb fbaf 	bl	8002170 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a14:	e00a      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a16:	f7fb fbab 	bl	8002170 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e036      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2c:	4b1d      	ldr	r3, [pc, #116]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0ee      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a38:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	4917      	ldr	r1, [pc, #92]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d105      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a50:	4b14      	ldr	r3, [pc, #80]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4a13      	ldr	r2, [pc, #76]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a68:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	490b      	ldr	r1, [pc, #44]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a86:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	4904      	ldr	r1, [pc, #16]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	40007000 	.word	0x40007000
 8006aac:	42420440 	.word	0x42420440

08006ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e01d      	b.n	8006afe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fb f892 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f000 fdbc 	bl	800766c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0201 	orr.w	r2, r2, #1
 8006b1c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b06      	cmp	r3, #6
 8006b2e:	d007      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e01d      	b.n	8006b9a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f815 	bl	8006ba2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f000 fd6e 	bl	800766c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 ffd0 	bl	8007b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a10      	ldr	r2, [pc, #64]	; (8006c14 <HAL_TIM_PWM_Start+0x60>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006be4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d007      	beq.n	8006c08 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	40012c00 	.word	0x40012c00

08006c18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2200      	movs	r2, #0
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 ff9e 	bl	8007b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <HAL_TIM_PWM_Stop+0x94>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d117      	bne.n	8006c6a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6a1a      	ldr	r2, [r3, #32]
 8006c40:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10f      	bne.n	8006c6a <HAL_TIM_PWM_Stop+0x52>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6a1a      	ldr	r2, [r3, #32]
 8006c50:	f240 4344 	movw	r3, #1092	; 0x444
 8006c54:	4013      	ands	r3, r2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d107      	bne.n	8006c6a <HAL_TIM_PWM_Stop+0x52>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6a1a      	ldr	r2, [r3, #32]
 8006c70:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c74:	4013      	ands	r3, r2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10f      	bne.n	8006c9a <HAL_TIM_PWM_Stop+0x82>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6a1a      	ldr	r2, [r3, #32]
 8006c80:	f240 4344 	movw	r3, #1092	; 0x444
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d107      	bne.n	8006c9a <HAL_TIM_PWM_Stop+0x82>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40012c00 	.word	0x40012c00

08006cb0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d101      	bne.n	8006cce <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e0e9      	b.n	8006ea2 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d10b      	bne.n	8006cf2 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3a>
 8006ce0:	887b      	ldrh	r3, [r7, #2]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e0db      	b.n	8006ea2 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b0c      	cmp	r3, #12
 8006cf6:	f200 80ad 	bhi.w	8006e54 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <HAL_TIM_PWM_Start_DMA+0x50>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006e55 	.word	0x08006e55
 8006d08:	08006e55 	.word	0x08006e55
 8006d0c:	08006e55 	.word	0x08006e55
 8006d10:	08006d7d 	.word	0x08006d7d
 8006d14:	08006e55 	.word	0x08006e55
 8006d18:	08006e55 	.word	0x08006e55
 8006d1c:	08006e55 	.word	0x08006e55
 8006d20:	08006dc5 	.word	0x08006dc5
 8006d24:	08006e55 	.word	0x08006e55
 8006d28:	08006e55 	.word	0x08006e55
 8006d2c:	08006e55 	.word	0x08006e55
 8006d30:	08006e0d 	.word	0x08006e0d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	4a5c      	ldr	r2, [pc, #368]	; (8006eac <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	4a5b      	ldr	r2, [pc, #364]	; (8006eb0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8006d42:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	4a5a      	ldr	r2, [pc, #360]	; (8006eb4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3334      	adds	r3, #52	; 0x34
 8006d58:	461a      	mov	r2, r3
 8006d5a:	887b      	ldrh	r3, [r7, #2]
 8006d5c:	f7fb ff50 	bl	8002c00 <HAL_DMA_Start_IT>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e09b      	b.n	8006ea2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d78:	60da      	str	r2, [r3, #12]
      break;
 8006d7a:	e06c      	b.n	8006e56 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d80:	4a4a      	ldr	r2, [pc, #296]	; (8006eac <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8006d82:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d88:	4a49      	ldr	r2, [pc, #292]	; (8006eb0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8006d8a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	4a48      	ldr	r2, [pc, #288]	; (8006eb4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3338      	adds	r3, #56	; 0x38
 8006da0:	461a      	mov	r2, r3
 8006da2:	887b      	ldrh	r3, [r7, #2]
 8006da4:	f7fb ff2c 	bl	8002c00 <HAL_DMA_Start_IT>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e077      	b.n	8006ea2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dc0:	60da      	str	r2, [r3, #12]
      break;
 8006dc2:	e048      	b.n	8006e56 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	4a38      	ldr	r2, [pc, #224]	; (8006eac <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8006dca:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	4a37      	ldr	r2, [pc, #220]	; (8006eb0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8006dd2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	4a36      	ldr	r2, [pc, #216]	; (8006eb4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	333c      	adds	r3, #60	; 0x3c
 8006de8:	461a      	mov	r2, r3
 8006dea:	887b      	ldrh	r3, [r7, #2]
 8006dec:	f7fb ff08 	bl	8002c00 <HAL_DMA_Start_IT>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e053      	b.n	8006ea2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e08:	60da      	str	r2, [r3, #12]
      break;
 8006e0a:	e024      	b.n	8006e56 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	4a26      	ldr	r2, [pc, #152]	; (8006eac <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8006e12:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	4a25      	ldr	r2, [pc, #148]	; (8006eb0 <HAL_TIM_PWM_Start_DMA+0x200>)
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e20:	4a24      	ldr	r2, [pc, #144]	; (8006eb4 <HAL_TIM_PWM_Start_DMA+0x204>)
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3340      	adds	r3, #64	; 0x40
 8006e30:	461a      	mov	r2, r3
 8006e32:	887b      	ldrh	r3, [r7, #2]
 8006e34:	f7fb fee4 	bl	8002c00 <HAL_DMA_Start_IT>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e02f      	b.n	8006ea2 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e50:	60da      	str	r2, [r3, #12]
      break;
 8006e52:	e000      	b.n	8006e56 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8006e54:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fe84 	bl	8007b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <HAL_TIM_PWM_Start_DMA+0x208>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d107      	bne.n	8006e7e <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d007      	beq.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	0800758d 	.word	0x0800758d
 8006eb0:	080075fd 	.word	0x080075fd
 8006eb4:	08007569 	.word	0x08007569
 8006eb8:	40012c00 	.word	0x40012c00

08006ebc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e07f      	b.n	8006fd0 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7fa ff01 	bl	8001cec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6812      	ldr	r2, [r2, #0]
 8006efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f00:	f023 0307 	bic.w	r3, r3, #7
 8006f04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f000 fbab 	bl	800766c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f5c:	f023 030c 	bic.w	r3, r3, #12
 8006f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	011a      	lsls	r2, r3, #4
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	031b      	lsls	r3, r3, #12
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d122      	bne.n	8007034 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d11b      	bne.n	8007034 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0202 	mvn.w	r2, #2
 8007004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa77 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 8007020:	e005      	b.n	800702e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa6a 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fa79 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b04      	cmp	r3, #4
 8007040:	d122      	bne.n	8007088 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b04      	cmp	r3, #4
 800704e:	d11b      	bne.n	8007088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0204 	mvn.w	r2, #4
 8007058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa4d 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 8007074:	e005      	b.n	8007082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa40 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa4f 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b08      	cmp	r3, #8
 8007094:	d122      	bne.n	80070dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d11b      	bne.n	80070dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0208 	mvn.w	r2, #8
 80070ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2204      	movs	r2, #4
 80070b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa23 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 80070c8:	e005      	b.n	80070d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa16 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fa25 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d122      	bne.n	8007130 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b10      	cmp	r3, #16
 80070f6:	d11b      	bne.n	8007130 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0210 	mvn.w	r2, #16
 8007100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2208      	movs	r2, #8
 8007106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9f9 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 800711c:	e005      	b.n	800712a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9ec 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f9fb 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b01      	cmp	r3, #1
 800713c:	d10e      	bne.n	800715c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b01      	cmp	r3, #1
 800714a:	d107      	bne.n	800715c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0201 	mvn.w	r2, #1
 8007154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f00b f8a8 	bl	80122ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007166:	2b80      	cmp	r3, #128	; 0x80
 8007168:	d10e      	bne.n	8007188 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007174:	2b80      	cmp	r3, #128	; 0x80
 8007176:	d107      	bne.n	8007188 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fdb4 	bl	8007cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007192:	2b40      	cmp	r3, #64	; 0x40
 8007194:	d10e      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d107      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9c8 	bl	8007544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d10e      	bne.n	80071e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d107      	bne.n	80071e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0220 	mvn.w	r2, #32
 80071d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fd7f 	bl	8007cde <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80071fe:	2302      	movs	r3, #2
 8007200:	e0b4      	b.n	800736c <HAL_TIM_PWM_ConfigChannel+0x184>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b0c      	cmp	r3, #12
 8007216:	f200 809f 	bhi.w	8007358 <HAL_TIM_PWM_ConfigChannel+0x170>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	08007255 	.word	0x08007255
 8007224:	08007359 	.word	0x08007359
 8007228:	08007359 	.word	0x08007359
 800722c:	08007359 	.word	0x08007359
 8007230:	08007295 	.word	0x08007295
 8007234:	08007359 	.word	0x08007359
 8007238:	08007359 	.word	0x08007359
 800723c:	08007359 	.word	0x08007359
 8007240:	080072d7 	.word	0x080072d7
 8007244:	08007359 	.word	0x08007359
 8007248:	08007359 	.word	0x08007359
 800724c:	08007359 	.word	0x08007359
 8007250:	08007317 	.word	0x08007317
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68b9      	ldr	r1, [r7, #8]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fa68 	bl	8007730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0208 	orr.w	r2, r2, #8
 800726e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0204 	bic.w	r2, r2, #4
 800727e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6999      	ldr	r1, [r3, #24]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	619a      	str	r2, [r3, #24]
      break;
 8007292:	e062      	b.n	800735a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 faae 	bl	80077fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6999      	ldr	r1, [r3, #24]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	021a      	lsls	r2, r3, #8
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	619a      	str	r2, [r3, #24]
      break;
 80072d4:	e041      	b.n	800735a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 faf7 	bl	80078d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f042 0208 	orr.w	r2, r2, #8
 80072f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f022 0204 	bic.w	r2, r2, #4
 8007300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69d9      	ldr	r1, [r3, #28]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	61da      	str	r2, [r3, #28]
      break;
 8007314:	e021      	b.n	800735a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fb41 	bl	80079a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69d9      	ldr	r1, [r3, #28]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	021a      	lsls	r2, r3, #8
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	61da      	str	r2, [r3, #28]
      break;
 8007356:	e000      	b.n	800735a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007358:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_TIM_ConfigClockSource+0x18>
 8007388:	2302      	movs	r3, #2
 800738a:	e0b3      	b.n	80074f4 <HAL_TIM_ConfigClockSource+0x180>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c4:	d03e      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0xd0>
 80073c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ca:	f200 8087 	bhi.w	80074dc <HAL_TIM_ConfigClockSource+0x168>
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d2:	f000 8085 	beq.w	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073da:	d87f      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x168>
 80073dc:	2b70      	cmp	r3, #112	; 0x70
 80073de:	d01a      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0xa2>
 80073e0:	2b70      	cmp	r3, #112	; 0x70
 80073e2:	d87b      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x168>
 80073e4:	2b60      	cmp	r3, #96	; 0x60
 80073e6:	d050      	beq.n	800748a <HAL_TIM_ConfigClockSource+0x116>
 80073e8:	2b60      	cmp	r3, #96	; 0x60
 80073ea:	d877      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x168>
 80073ec:	2b50      	cmp	r3, #80	; 0x50
 80073ee:	d03c      	beq.n	800746a <HAL_TIM_ConfigClockSource+0xf6>
 80073f0:	2b50      	cmp	r3, #80	; 0x50
 80073f2:	d873      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x168>
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d058      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x136>
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d86f      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x168>
 80073fc:	2b30      	cmp	r3, #48	; 0x30
 80073fe:	d064      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x156>
 8007400:	2b30      	cmp	r3, #48	; 0x30
 8007402:	d86b      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x168>
 8007404:	2b20      	cmp	r3, #32
 8007406:	d060      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x156>
 8007408:	2b20      	cmp	r3, #32
 800740a:	d867      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x168>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d05c      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x156>
 8007410:	2b10      	cmp	r3, #16
 8007412:	d05a      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007414:	e062      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6899      	ldr	r1, [r3, #8]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f000 fb82 	bl	8007b2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007438:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	609a      	str	r2, [r3, #8]
      break;
 8007442:	e04e      	b.n	80074e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	6899      	ldr	r1, [r3, #8]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f000 fb6b 	bl	8007b2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007466:	609a      	str	r2, [r3, #8]
      break;
 8007468:	e03b      	b.n	80074e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6859      	ldr	r1, [r3, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	461a      	mov	r2, r3
 8007478:	f000 fae2 	bl	8007a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2150      	movs	r1, #80	; 0x50
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fb39 	bl	8007afa <TIM_ITRx_SetConfig>
      break;
 8007488:	e02b      	b.n	80074e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6859      	ldr	r1, [r3, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	461a      	mov	r2, r3
 8007498:	f000 fb00 	bl	8007a9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2160      	movs	r1, #96	; 0x60
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fb29 	bl	8007afa <TIM_ITRx_SetConfig>
      break;
 80074a8:	e01b      	b.n	80074e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6859      	ldr	r1, [r3, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	461a      	mov	r2, r3
 80074b8:	f000 fac2 	bl	8007a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2140      	movs	r1, #64	; 0x40
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 fb19 	bl	8007afa <TIM_ITRx_SetConfig>
      break;
 80074c8:	e00b      	b.n	80074e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f000 fb10 	bl	8007afa <TIM_ITRx_SetConfig>
      break;
 80074da:	e002      	b.n	80074e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074dc:	bf00      	nop
 80074de:	e000      	b.n	80074e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	bc80      	pop	{r7}
 800750c:	4770      	bx	lr

0800750e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr

08007520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr

08007532 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	4770      	bx	lr

08007556 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr

08007568 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff ffe9 	bl	8007556 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007584:	bf00      	nop
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d103      	bne.n	80075b4 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	771a      	strb	r2, [r3, #28]
 80075b2:	e019      	b.n	80075e8 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d103      	bne.n	80075c6 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2202      	movs	r2, #2
 80075c2:	771a      	strb	r2, [r3, #28]
 80075c4:	e010      	b.n	80075e8 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d103      	bne.n	80075d8 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2204      	movs	r2, #4
 80075d4:	771a      	strb	r2, [r3, #28]
 80075d6:	e007      	b.n	80075e8 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d102      	bne.n	80075e8 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2208      	movs	r2, #8
 80075e6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7ff ff99 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	771a      	strb	r2, [r3, #28]
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	429a      	cmp	r2, r3
 800761a:	d103      	bne.n	8007624 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2201      	movs	r2, #1
 8007620:	771a      	strb	r2, [r3, #28]
 8007622:	e019      	b.n	8007658 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d103      	bne.n	8007636 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2202      	movs	r2, #2
 8007632:	771a      	strb	r2, [r3, #28]
 8007634:	e010      	b.n	8007658 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	d103      	bne.n	8007648 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2204      	movs	r2, #4
 8007644:	771a      	strb	r2, [r3, #28]
 8007646:	e007      	b.n	8007658 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	429a      	cmp	r2, r3
 8007650:	d102      	bne.n	8007658 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2208      	movs	r2, #8
 8007656:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff ff6a 	bl	8007532 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	771a      	strb	r2, [r3, #28]
}
 8007664:	bf00      	nop
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a29      	ldr	r2, [pc, #164]	; (8007724 <TIM_Base_SetConfig+0xb8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00b      	beq.n	800769c <TIM_Base_SetConfig+0x30>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768a:	d007      	beq.n	800769c <TIM_Base_SetConfig+0x30>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a26      	ldr	r2, [pc, #152]	; (8007728 <TIM_Base_SetConfig+0xbc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_Base_SetConfig+0x30>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a25      	ldr	r2, [pc, #148]	; (800772c <TIM_Base_SetConfig+0xc0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d108      	bne.n	80076ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a1c      	ldr	r2, [pc, #112]	; (8007724 <TIM_Base_SetConfig+0xb8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00b      	beq.n	80076ce <TIM_Base_SetConfig+0x62>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076bc:	d007      	beq.n	80076ce <TIM_Base_SetConfig+0x62>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <TIM_Base_SetConfig+0xbc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d003      	beq.n	80076ce <TIM_Base_SetConfig+0x62>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a18      	ldr	r2, [pc, #96]	; (800772c <TIM_Base_SetConfig+0xc0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d108      	bne.n	80076e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a07      	ldr	r2, [pc, #28]	; (8007724 <TIM_Base_SetConfig+0xb8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d103      	bne.n	8007714 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	615a      	str	r2, [r3, #20]
}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800

08007730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	f023 0201 	bic.w	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0303 	bic.w	r3, r3, #3
 8007766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 0302 	bic.w	r3, r3, #2
 8007778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a1c      	ldr	r2, [pc, #112]	; (80077f8 <TIM_OC1_SetConfig+0xc8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d10c      	bne.n	80077a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f023 0308 	bic.w	r3, r3, #8
 8007792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f023 0304 	bic.w	r3, r3, #4
 80077a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a13      	ldr	r2, [pc, #76]	; (80077f8 <TIM_OC1_SetConfig+0xc8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d111      	bne.n	80077d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	621a      	str	r2, [r3, #32]
}
 80077ec:	bf00      	nop
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40012c00 	.word	0x40012c00

080077fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	f023 0210 	bic.w	r2, r3, #16
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800782a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f023 0320 	bic.w	r3, r3, #32
 8007846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	4313      	orrs	r3, r2
 8007852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a1d      	ldr	r2, [pc, #116]	; (80078cc <TIM_OC2_SetConfig+0xd0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d10d      	bne.n	8007878 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	4313      	orrs	r3, r2
 800786e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007876:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a14      	ldr	r2, [pc, #80]	; (80078cc <TIM_OC2_SetConfig+0xd0>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d113      	bne.n	80078a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800788e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr
 80078cc:	40012c00 	.word	0x40012c00

080078d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1d      	ldr	r2, [pc, #116]	; (80079a0 <TIM_OC3_SetConfig+0xd0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d10d      	bne.n	800794a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a14      	ldr	r2, [pc, #80]	; (80079a0 <TIM_OC3_SetConfig+0xd0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d113      	bne.n	800797a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	4313      	orrs	r3, r2
 800796c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	621a      	str	r2, [r3, #32]
}
 8007994:	bf00      	nop
 8007996:	371c      	adds	r7, #28
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40012c00 	.word	0x40012c00

080079a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	021b      	lsls	r3, r3, #8
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	031b      	lsls	r3, r3, #12
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a0f      	ldr	r2, [pc, #60]	; (8007a3c <TIM_OC4_SetConfig+0x98>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d109      	bne.n	8007a18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	019b      	lsls	r3, r3, #6
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	40012c00 	.word	0x40012c00

08007a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f023 0201 	bic.w	r2, r3, #1
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f023 030a 	bic.w	r3, r3, #10
 8007a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr

08007a9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	f023 0210 	bic.w	r2, r3, #16
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ac6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	031b      	lsls	r3, r3, #12
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	621a      	str	r2, [r3, #32]
}
 8007af0:	bf00      	nop
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f043 0307 	orr.w	r3, r3, #7
 8007b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	609a      	str	r2, [r3, #8]
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bc80      	pop	{r7}
 8007b2c:	4770      	bx	lr

08007b2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b087      	sub	sp, #28
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	021a      	lsls	r2, r3, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	431a      	orrs	r2, r3
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	609a      	str	r2, [r3, #8]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr

08007b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	2201      	movs	r2, #1
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a1a      	ldr	r2, [r3, #32]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	401a      	ands	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a1a      	ldr	r2, [r3, #32]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f003 031f 	and.w	r3, r3, #31
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e032      	b.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c04:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e03d      	b.n	8007cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr

08007cde <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr

08007d02 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d02:	b084      	sub	sp, #16
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	f107 0014 	add.w	r0, r7, #20
 8007d10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	b004      	add	sp, #16
 8007d20:	4770      	bx	lr

08007d22 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d2a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d2e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	89fb      	ldrh	r3, [r7, #14]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr

08007d50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d5c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	b21a      	sxth	r2, r3
 8007d68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d6c:	43db      	mvns	r3, r3
 8007d6e:	b21b      	sxth	r3, r3
 8007d70:	4013      	ands	r3, r2
 8007d72:	b21b      	sxth	r3, r3
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr

08007da0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007da0:	b084      	sub	sp, #16
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	f107 0014 	add.w	r0, r7, #20
 8007dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff ffa5 	bl	8007d22 <USB_EnableGlobalInt>

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007de4:	b004      	add	sp, #16
 8007de6:	4770      	bx	lr

08007de8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007de8:	b490      	push	{r4, r7}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	78db      	ldrb	r3, [r3, #3]
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d819      	bhi.n	8007e4a <USB_ActivateEndpoint+0x62>
 8007e16:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <USB_ActivateEndpoint+0x34>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e2d 	.word	0x08007e2d
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	08007e37 	.word	0x08007e37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007e2c:	89bb      	ldrh	r3, [r7, #12]
 8007e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e32:	81bb      	strh	r3, [r7, #12]
      break;
 8007e34:	e00d      	b.n	8007e52 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007e36:	89bb      	ldrh	r3, [r7, #12]
 8007e38:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007e3c:	81bb      	strh	r3, [r7, #12]
      break;
 8007e3e:	e008      	b.n	8007e52 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e40:	89bb      	ldrh	r3, [r7, #12]
 8007e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e46:	81bb      	strh	r3, [r7, #12]
      break;
 8007e48:	e003      	b.n	8007e52 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e4e:	e000      	b.n	8007e52 <USB_ActivateEndpoint+0x6a>
      break;
 8007e50:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	441a      	add	r2, r3
 8007e5c:	89bb      	ldrh	r3, [r7, #12]
 8007e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	4313      	orrs	r3, r2
 8007e92:	b29c      	uxth	r4, r3
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	4b8a      	ldr	r3, [pc, #552]	; (80080c8 <USB_ActivateEndpoint+0x2e0>)
 8007ea0:	4323      	orrs	r3, r4
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	7b1b      	ldrb	r3, [r3, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f040 8112 	bne.w	80080d4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	785b      	ldrb	r3, [r3, #1]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d067      	beq.n	8007f88 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007eb8:	687c      	ldr	r4, [r7, #4]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	441c      	add	r4, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	4423      	add	r3, r4
 8007ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ed0:	461c      	mov	r4, r3
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	88db      	ldrh	r3, [r3, #6]
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29c      	uxth	r4, r3
 8007eee:	4623      	mov	r3, r4
 8007ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d014      	beq.n	8007f22 <USB_ActivateEndpoint+0x13a>
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0e:	b29c      	uxth	r4, r3
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	441a      	add	r2, r3
 8007f1a:	4b6c      	ldr	r3, [pc, #432]	; (80080cc <USB_ActivateEndpoint+0x2e4>)
 8007f1c:	4323      	orrs	r3, r4
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	78db      	ldrb	r3, [r3, #3]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d018      	beq.n	8007f5c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f40:	b29c      	uxth	r4, r3
 8007f42:	f084 0320 	eor.w	r3, r4, #32
 8007f46:	b29c      	uxth	r4, r3
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	441a      	add	r2, r3
 8007f52:	4b5d      	ldr	r3, [pc, #372]	; (80080c8 <USB_ActivateEndpoint+0x2e0>)
 8007f54:	4323      	orrs	r3, r4
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	8013      	strh	r3, [r2, #0]
 8007f5a:	e22b      	b.n	80083b4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f72:	b29c      	uxth	r4, r3
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	441a      	add	r2, r3
 8007f7e:	4b52      	ldr	r3, [pc, #328]	; (80080c8 <USB_ActivateEndpoint+0x2e0>)
 8007f80:	4323      	orrs	r3, r4
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]
 8007f86:	e215      	b.n	80083b4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f88:	687c      	ldr	r4, [r7, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	441c      	add	r4, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	4423      	add	r3, r4
 8007f9c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007fa0:	461c      	mov	r4, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	88db      	ldrh	r3, [r3, #6]
 8007fa6:	085b      	lsrs	r3, r3, #1
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007fb0:	687c      	ldr	r4, [r7, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	441c      	add	r4, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	011b      	lsls	r3, r3, #4
 8007fc2:	4423      	add	r3, r4
 8007fc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fc8:	461c      	mov	r4, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10e      	bne.n	8007ff0 <USB_ActivateEndpoint+0x208>
 8007fd2:	8823      	ldrh	r3, [r4, #0]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	8023      	strh	r3, [r4, #0]
 8007fde:	8823      	ldrh	r3, [r4, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	8023      	strh	r3, [r4, #0]
 8007fee:	e02d      	b.n	800804c <USB_ActivateEndpoint+0x264>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ff6:	d812      	bhi.n	800801e <USB_ActivateEndpoint+0x236>
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	085b      	lsrs	r3, r3, #1
 8007ffe:	60bb      	str	r3, [r7, #8]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <USB_ActivateEndpoint+0x22a>
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	3301      	adds	r3, #1
 8008010:	60bb      	str	r3, [r7, #8]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	b29b      	uxth	r3, r3
 8008016:	029b      	lsls	r3, r3, #10
 8008018:	b29b      	uxth	r3, r3
 800801a:	8023      	strh	r3, [r4, #0]
 800801c:	e016      	b.n	800804c <USB_ActivateEndpoint+0x264>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	095b      	lsrs	r3, r3, #5
 8008024:	60bb      	str	r3, [r7, #8]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 031f 	and.w	r3, r3, #31
 800802e:	2b00      	cmp	r3, #0
 8008030:	d102      	bne.n	8008038 <USB_ActivateEndpoint+0x250>
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	3b01      	subs	r3, #1
 8008036:	60bb      	str	r3, [r7, #8]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	b29b      	uxth	r3, r3
 800803c:	029b      	lsls	r3, r3, #10
 800803e:	b29b      	uxth	r3, r3
 8008040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008048:	b29b      	uxth	r3, r3
 800804a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b29c      	uxth	r4, r3
 800805a:	4623      	mov	r3, r4
 800805c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d014      	beq.n	800808e <USB_ActivateEndpoint+0x2a6>
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807a:	b29c      	uxth	r4, r3
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	441a      	add	r2, r3
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <USB_ActivateEndpoint+0x2e8>)
 8008088:	4323      	orrs	r3, r4
 800808a:	b29b      	uxth	r3, r3
 800808c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a4:	b29c      	uxth	r4, r3
 80080a6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80080aa:	b29c      	uxth	r4, r3
 80080ac:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80080b0:	b29c      	uxth	r4, r3
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	441a      	add	r2, r3
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <USB_ActivateEndpoint+0x2e0>)
 80080be:	4323      	orrs	r3, r4
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	8013      	strh	r3, [r2, #0]
 80080c4:	e176      	b.n	80083b4 <USB_ActivateEndpoint+0x5cc>
 80080c6:	bf00      	nop
 80080c8:	ffff8080 	.word	0xffff8080
 80080cc:	ffff80c0 	.word	0xffff80c0
 80080d0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ea:	b29c      	uxth	r4, r3
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	441a      	add	r2, r3
 80080f6:	4b96      	ldr	r3, [pc, #600]	; (8008350 <USB_ActivateEndpoint+0x568>)
 80080f8:	4323      	orrs	r3, r4
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80080fe:	687c      	ldr	r4, [r7, #4]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008106:	b29b      	uxth	r3, r3
 8008108:	441c      	add	r4, r3
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	4423      	add	r3, r4
 8008112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008116:	461c      	mov	r4, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	891b      	ldrh	r3, [r3, #8]
 800811c:	085b      	lsrs	r3, r3, #1
 800811e:	b29b      	uxth	r3, r3
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	b29b      	uxth	r3, r3
 8008124:	8023      	strh	r3, [r4, #0]
 8008126:	687c      	ldr	r4, [r7, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800812e:	b29b      	uxth	r3, r3
 8008130:	441c      	add	r4, r3
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	4423      	add	r3, r4
 800813a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800813e:	461c      	mov	r4, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	895b      	ldrh	r3, [r3, #10]
 8008144:	085b      	lsrs	r3, r3, #1
 8008146:	b29b      	uxth	r3, r3
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	b29b      	uxth	r3, r3
 800814c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f040 8088 	bne.w	8008268 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	b29c      	uxth	r4, r3
 8008166:	4623      	mov	r3, r4
 8008168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d014      	beq.n	800819a <USB_ActivateEndpoint+0x3b2>
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	b29b      	uxth	r3, r3
 800817e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008186:	b29c      	uxth	r4, r3
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	441a      	add	r2, r3
 8008192:	4b70      	ldr	r3, [pc, #448]	; (8008354 <USB_ActivateEndpoint+0x56c>)
 8008194:	4323      	orrs	r3, r4
 8008196:	b29b      	uxth	r3, r3
 8008198:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29c      	uxth	r4, r3
 80081a8:	4623      	mov	r3, r4
 80081aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d014      	beq.n	80081dc <USB_ActivateEndpoint+0x3f4>
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c8:	b29c      	uxth	r4, r3
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	441a      	add	r2, r3
 80081d4:	4b60      	ldr	r3, [pc, #384]	; (8008358 <USB_ActivateEndpoint+0x570>)
 80081d6:	4323      	orrs	r3, r4
 80081d8:	b29b      	uxth	r3, r3
 80081da:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f2:	b29c      	uxth	r4, r3
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	4b56      	ldr	r3, [pc, #344]	; (8008358 <USB_ActivateEndpoint+0x570>)
 8008200:	4323      	orrs	r3, r4
 8008202:	b29b      	uxth	r3, r3
 8008204:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821c:	b29c      	uxth	r4, r3
 800821e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008222:	b29c      	uxth	r4, r3
 8008224:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008228:	b29c      	uxth	r4, r3
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	441a      	add	r2, r3
 8008234:	4b49      	ldr	r3, [pc, #292]	; (800835c <USB_ActivateEndpoint+0x574>)
 8008236:	4323      	orrs	r3, r4
 8008238:	b29b      	uxth	r3, r3
 800823a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008252:	b29c      	uxth	r4, r3
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	441a      	add	r2, r3
 800825e:	4b3f      	ldr	r3, [pc, #252]	; (800835c <USB_ActivateEndpoint+0x574>)
 8008260:	4323      	orrs	r3, r4
 8008262:	b29b      	uxth	r3, r3
 8008264:	8013      	strh	r3, [r2, #0]
 8008266:	e0a5      	b.n	80083b4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29c      	uxth	r4, r3
 8008276:	4623      	mov	r3, r4
 8008278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d014      	beq.n	80082aa <USB_ActivateEndpoint+0x4c2>
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	b29c      	uxth	r4, r3
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	441a      	add	r2, r3
 80082a2:	4b2c      	ldr	r3, [pc, #176]	; (8008354 <USB_ActivateEndpoint+0x56c>)
 80082a4:	4323      	orrs	r3, r4
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	b29c      	uxth	r4, r3
 80082b8:	4623      	mov	r3, r4
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d014      	beq.n	80082ec <USB_ActivateEndpoint+0x504>
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d8:	b29c      	uxth	r4, r3
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	441a      	add	r2, r3
 80082e4:	4b1c      	ldr	r3, [pc, #112]	; (8008358 <USB_ActivateEndpoint+0x570>)
 80082e6:	4323      	orrs	r3, r4
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008302:	b29c      	uxth	r4, r3
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	441a      	add	r2, r3
 800830e:	4b11      	ldr	r3, [pc, #68]	; (8008354 <USB_ActivateEndpoint+0x56c>)
 8008310:	4323      	orrs	r3, r4
 8008312:	b29b      	uxth	r3, r3
 8008314:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	78db      	ldrb	r3, [r3, #3]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d020      	beq.n	8008360 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008334:	b29c      	uxth	r4, r3
 8008336:	f084 0320 	eor.w	r3, r4, #32
 800833a:	b29c      	uxth	r4, r3
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	441a      	add	r2, r3
 8008346:	4b05      	ldr	r3, [pc, #20]	; (800835c <USB_ActivateEndpoint+0x574>)
 8008348:	4323      	orrs	r3, r4
 800834a:	b29b      	uxth	r3, r3
 800834c:	8013      	strh	r3, [r2, #0]
 800834e:	e01c      	b.n	800838a <USB_ActivateEndpoint+0x5a2>
 8008350:	ffff8180 	.word	0xffff8180
 8008354:	ffffc080 	.word	0xffffc080
 8008358:	ffff80c0 	.word	0xffff80c0
 800835c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008376:	b29c      	uxth	r4, r3
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	441a      	add	r2, r3
 8008382:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <USB_ActivateEndpoint+0x5d8>)
 8008384:	4323      	orrs	r3, r4
 8008386:	b29b      	uxth	r3, r3
 8008388:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800839c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a0:	b29c      	uxth	r4, r3
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	441a      	add	r2, r3
 80083ac:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <USB_ActivateEndpoint+0x5d8>)
 80083ae:	4323      	orrs	r3, r4
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bc90      	pop	{r4, r7}
 80083be:	4770      	bx	lr
 80083c0:	ffff8080 	.word	0xffff8080

080083c4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083c4:	b490      	push	{r4, r7}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	7b1b      	ldrb	r3, [r3, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d171      	bne.n	80084ba <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d036      	beq.n	800844c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	b29c      	uxth	r4, r3
 80083ec:	4623      	mov	r3, r4
 80083ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d014      	beq.n	8008420 <USB_DeactivateEndpoint+0x5c>
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840c:	b29c      	uxth	r4, r3
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	441a      	add	r2, r3
 8008418:	4b6b      	ldr	r3, [pc, #428]	; (80085c8 <USB_DeactivateEndpoint+0x204>)
 800841a:	4323      	orrs	r3, r4
 800841c:	b29b      	uxth	r3, r3
 800841e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008436:	b29c      	uxth	r4, r3
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	441a      	add	r2, r3
 8008442:	4b62      	ldr	r3, [pc, #392]	; (80085cc <USB_DeactivateEndpoint+0x208>)
 8008444:	4323      	orrs	r3, r4
 8008446:	b29b      	uxth	r3, r3
 8008448:	8013      	strh	r3, [r2, #0]
 800844a:	e144      	b.n	80086d6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29c      	uxth	r4, r3
 800845a:	4623      	mov	r3, r4
 800845c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d014      	beq.n	800848e <USB_DeactivateEndpoint+0xca>
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847a:	b29c      	uxth	r4, r3
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	4b52      	ldr	r3, [pc, #328]	; (80085d0 <USB_DeactivateEndpoint+0x20c>)
 8008488:	4323      	orrs	r3, r4
 800848a:	b29b      	uxth	r3, r3
 800848c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a4:	b29c      	uxth	r4, r3
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	441a      	add	r2, r3
 80084b0:	4b46      	ldr	r3, [pc, #280]	; (80085cc <USB_DeactivateEndpoint+0x208>)
 80084b2:	4323      	orrs	r3, r4
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	8013      	strh	r3, [r2, #0]
 80084b8:	e10d      	b.n	80086d6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f040 8088 	bne.w	80085d4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	b29c      	uxth	r4, r3
 80084d2:	4623      	mov	r3, r4
 80084d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d014      	beq.n	8008506 <USB_DeactivateEndpoint+0x142>
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f2:	b29c      	uxth	r4, r3
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	441a      	add	r2, r3
 80084fe:	4b34      	ldr	r3, [pc, #208]	; (80085d0 <USB_DeactivateEndpoint+0x20c>)
 8008500:	4323      	orrs	r3, r4
 8008502:	b29b      	uxth	r3, r3
 8008504:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29c      	uxth	r4, r3
 8008514:	4623      	mov	r3, r4
 8008516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851a:	2b00      	cmp	r3, #0
 800851c:	d014      	beq.n	8008548 <USB_DeactivateEndpoint+0x184>
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008534:	b29c      	uxth	r4, r3
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	441a      	add	r2, r3
 8008540:	4b21      	ldr	r3, [pc, #132]	; (80085c8 <USB_DeactivateEndpoint+0x204>)
 8008542:	4323      	orrs	r3, r4
 8008544:	b29b      	uxth	r3, r3
 8008546:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855e:	b29c      	uxth	r4, r3
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	441a      	add	r2, r3
 800856a:	4b17      	ldr	r3, [pc, #92]	; (80085c8 <USB_DeactivateEndpoint+0x204>)
 800856c:	4323      	orrs	r3, r4
 800856e:	b29b      	uxth	r3, r3
 8008570:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008588:	b29c      	uxth	r4, r3
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	441a      	add	r2, r3
 8008594:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <USB_DeactivateEndpoint+0x208>)
 8008596:	4323      	orrs	r3, r4
 8008598:	b29b      	uxth	r3, r3
 800859a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b2:	b29c      	uxth	r4, r3
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	441a      	add	r2, r3
 80085be:	4b03      	ldr	r3, [pc, #12]	; (80085cc <USB_DeactivateEndpoint+0x208>)
 80085c0:	4323      	orrs	r3, r4
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	8013      	strh	r3, [r2, #0]
 80085c6:	e086      	b.n	80086d6 <USB_DeactivateEndpoint+0x312>
 80085c8:	ffff80c0 	.word	0xffff80c0
 80085cc:	ffff8080 	.word	0xffff8080
 80085d0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29c      	uxth	r4, r3
 80085e2:	4623      	mov	r3, r4
 80085e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d014      	beq.n	8008616 <USB_DeactivateEndpoint+0x252>
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	b29c      	uxth	r4, r3
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	441a      	add	r2, r3
 800860e:	4b35      	ldr	r3, [pc, #212]	; (80086e4 <USB_DeactivateEndpoint+0x320>)
 8008610:	4323      	orrs	r3, r4
 8008612:	b29b      	uxth	r3, r3
 8008614:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29c      	uxth	r4, r3
 8008624:	4623      	mov	r3, r4
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d014      	beq.n	8008658 <USB_DeactivateEndpoint+0x294>
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008644:	b29c      	uxth	r4, r3
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	441a      	add	r2, r3
 8008650:	4b25      	ldr	r3, [pc, #148]	; (80086e8 <USB_DeactivateEndpoint+0x324>)
 8008652:	4323      	orrs	r3, r4
 8008654:	b29b      	uxth	r3, r3
 8008656:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866e:	b29c      	uxth	r4, r3
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	441a      	add	r2, r3
 800867a:	4b1a      	ldr	r3, [pc, #104]	; (80086e4 <USB_DeactivateEndpoint+0x320>)
 800867c:	4323      	orrs	r3, r4
 800867e:	b29b      	uxth	r3, r3
 8008680:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008698:	b29c      	uxth	r4, r3
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	441a      	add	r2, r3
 80086a4:	4b11      	ldr	r3, [pc, #68]	; (80086ec <USB_DeactivateEndpoint+0x328>)
 80086a6:	4323      	orrs	r3, r4
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	b29c      	uxth	r4, r3
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	441a      	add	r2, r3
 80086ce:	4b07      	ldr	r3, [pc, #28]	; (80086ec <USB_DeactivateEndpoint+0x328>)
 80086d0:	4323      	orrs	r3, r4
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc90      	pop	{r4, r7}
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	ffffc080 	.word	0xffffc080
 80086e8:	ffff80c0 	.word	0xffff80c0
 80086ec:	ffff8080 	.word	0xffff8080

080086f0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086f0:	b590      	push	{r4, r7, lr}
 80086f2:	b08d      	sub	sp, #52	; 0x34
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	f040 8160 	bne.w	80089c4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	699a      	ldr	r2, [r3, #24]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	429a      	cmp	r2, r3
 800870e:	d909      	bls.n	8008724 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	1ad2      	subs	r2, r2, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	619a      	str	r2, [r3, #24]
 8008722:	e005      	b.n	8008730 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2200      	movs	r2, #0
 800872e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	7b1b      	ldrb	r3, [r3, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d119      	bne.n	800876c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6959      	ldr	r1, [r3, #20]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	88da      	ldrh	r2, [r3, #6]
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	b29b      	uxth	r3, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fba2 	bl	8008e8e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800874a:	687c      	ldr	r4, [r7, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008752:	b29b      	uxth	r3, r3
 8008754:	441c      	add	r4, r3
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	4423      	add	r3, r4
 800875e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008762:	461c      	mov	r4, r3
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	b29b      	uxth	r3, r3
 8008768:	8023      	strh	r3, [r4, #0]
 800876a:	e10f      	b.n	800898c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	b29b      	uxth	r3, r3
 800877a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877e:	2b00      	cmp	r3, #0
 8008780:	d065      	beq.n	800884e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008782:	687c      	ldr	r4, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d148      	bne.n	800881e <USB_EPStartXfer+0x12e>
 800878c:	687c      	ldr	r4, [r7, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008794:	b29b      	uxth	r3, r3
 8008796:	441c      	add	r4, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	011b      	lsls	r3, r3, #4
 800879e:	4423      	add	r3, r4
 80087a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087a4:	461c      	mov	r4, r3
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10e      	bne.n	80087ca <USB_EPStartXfer+0xda>
 80087ac:	8823      	ldrh	r3, [r4, #0]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	8023      	strh	r3, [r4, #0]
 80087b8:	8823      	ldrh	r3, [r4, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	8023      	strh	r3, [r4, #0]
 80087c8:	e03d      	b.n	8008846 <USB_EPStartXfer+0x156>
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	2b3e      	cmp	r3, #62	; 0x3e
 80087ce:	d810      	bhi.n	80087f2 <USB_EPStartXfer+0x102>
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <USB_EPStartXfer+0xf6>
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	3301      	adds	r3, #1
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	029b      	lsls	r3, r3, #10
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	8023      	strh	r3, [r4, #0]
 80087f0:	e029      	b.n	8008846 <USB_EPStartXfer+0x156>
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	095b      	lsrs	r3, r3, #5
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	f003 031f 	and.w	r3, r3, #31
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d102      	bne.n	8008808 <USB_EPStartXfer+0x118>
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	3b01      	subs	r3, #1
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	b29b      	uxth	r3, r3
 800880c:	029b      	lsls	r3, r3, #10
 800880e:	b29b      	uxth	r3, r3
 8008810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008818:	b29b      	uxth	r3, r3
 800881a:	8023      	strh	r3, [r4, #0]
 800881c:	e013      	b.n	8008846 <USB_EPStartXfer+0x156>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	785b      	ldrb	r3, [r3, #1]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d10f      	bne.n	8008846 <USB_EPStartXfer+0x156>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800882c:	b29b      	uxth	r3, r3
 800882e:	441c      	add	r4, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	4423      	add	r3, r4
 8008838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	895b      	ldrh	r3, [r3, #10]
 800884a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800884c:	e063      	b.n	8008916 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d148      	bne.n	80088e8 <USB_EPStartXfer+0x1f8>
 8008856:	687c      	ldr	r4, [r7, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885e:	b29b      	uxth	r3, r3
 8008860:	441c      	add	r4, r3
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	4423      	add	r3, r4
 800886a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800886e:	461c      	mov	r4, r3
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10e      	bne.n	8008894 <USB_EPStartXfer+0x1a4>
 8008876:	8823      	ldrh	r3, [r4, #0]
 8008878:	b29b      	uxth	r3, r3
 800887a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800887e:	b29b      	uxth	r3, r3
 8008880:	8023      	strh	r3, [r4, #0]
 8008882:	8823      	ldrh	r3, [r4, #0]
 8008884:	b29b      	uxth	r3, r3
 8008886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800888a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800888e:	b29b      	uxth	r3, r3
 8008890:	8023      	strh	r3, [r4, #0]
 8008892:	e03d      	b.n	8008910 <USB_EPStartXfer+0x220>
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	2b3e      	cmp	r3, #62	; 0x3e
 8008898:	d810      	bhi.n	80088bc <USB_EPStartXfer+0x1cc>
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	085b      	lsrs	r3, r3, #1
 800889e:	623b      	str	r3, [r7, #32]
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <USB_EPStartXfer+0x1c0>
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	3301      	adds	r3, #1
 80088ae:	623b      	str	r3, [r7, #32]
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	029b      	lsls	r3, r3, #10
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	8023      	strh	r3, [r4, #0]
 80088ba:	e029      	b.n	8008910 <USB_EPStartXfer+0x220>
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	095b      	lsrs	r3, r3, #5
 80088c0:	623b      	str	r3, [r7, #32]
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	f003 031f 	and.w	r3, r3, #31
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <USB_EPStartXfer+0x1e2>
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	623b      	str	r3, [r7, #32]
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	029b      	lsls	r3, r3, #10
 80088d8:	b29b      	uxth	r3, r3
 80088da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	8023      	strh	r3, [r4, #0]
 80088e6:	e013      	b.n	8008910 <USB_EPStartXfer+0x220>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	785b      	ldrb	r3, [r3, #1]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d10f      	bne.n	8008910 <USB_EPStartXfer+0x220>
 80088f0:	687c      	ldr	r4, [r7, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	441c      	add	r4, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	4423      	add	r3, r4
 8008904:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008908:	461c      	mov	r4, r3
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	b29b      	uxth	r3, r3
 800890e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	891b      	ldrh	r3, [r3, #8]
 8008914:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	6959      	ldr	r1, [r3, #20]
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	b29b      	uxth	r3, r3
 800891e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fab4 	bl	8008e8e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d115      	bne.n	800895a <USB_EPStartXfer+0x26a>
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	b29b      	uxth	r3, r3
 800893c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008944:	b29c      	uxth	r4, r3
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	441a      	add	r2, r3
 8008950:	4b9a      	ldr	r3, [pc, #616]	; (8008bbc <USB_EPStartXfer+0x4cc>)
 8008952:	4323      	orrs	r3, r4
 8008954:	b29b      	uxth	r3, r3
 8008956:	8013      	strh	r3, [r2, #0]
 8008958:	e018      	b.n	800898c <USB_EPStartXfer+0x29c>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d114      	bne.n	800898c <USB_EPStartXfer+0x29c>
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008978:	b29c      	uxth	r4, r3
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	441a      	add	r2, r3
 8008984:	4b8e      	ldr	r3, [pc, #568]	; (8008bc0 <USB_EPStartXfer+0x4d0>)
 8008986:	4323      	orrs	r3, r4
 8008988:	b29b      	uxth	r3, r3
 800898a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a2:	b29c      	uxth	r4, r3
 80089a4:	f084 0310 	eor.w	r3, r4, #16
 80089a8:	b29c      	uxth	r4, r3
 80089aa:	f084 0320 	eor.w	r3, r4, #32
 80089ae:	b29c      	uxth	r4, r3
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	441a      	add	r2, r3
 80089ba:	4b82      	ldr	r3, [pc, #520]	; (8008bc4 <USB_EPStartXfer+0x4d4>)
 80089bc:	4323      	orrs	r3, r4
 80089be:	b29b      	uxth	r3, r3
 80089c0:	8013      	strh	r3, [r2, #0]
 80089c2:	e146      	b.n	8008c52 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	699a      	ldr	r2, [r3, #24]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d909      	bls.n	80089e4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	1ad2      	subs	r2, r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	619a      	str	r2, [r3, #24]
 80089e2:	e005      	b.n	80089f0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2200      	movs	r2, #0
 80089ee:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	7b1b      	ldrb	r3, [r3, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d148      	bne.n	8008a8a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80089f8:	687c      	ldr	r4, [r7, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	441c      	add	r4, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	4423      	add	r3, r4
 8008a0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a10:	461c      	mov	r4, r3
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10e      	bne.n	8008a36 <USB_EPStartXfer+0x346>
 8008a18:	8823      	ldrh	r3, [r4, #0]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	8023      	strh	r3, [r4, #0]
 8008a24:	8823      	ldrh	r3, [r4, #0]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	8023      	strh	r3, [r4, #0]
 8008a34:	e0f2      	b.n	8008c1c <USB_EPStartXfer+0x52c>
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	2b3e      	cmp	r3, #62	; 0x3e
 8008a3a:	d810      	bhi.n	8008a5e <USB_EPStartXfer+0x36e>
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	61fb      	str	r3, [r7, #28]
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <USB_EPStartXfer+0x362>
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	61fb      	str	r3, [r7, #28]
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	029b      	lsls	r3, r3, #10
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	8023      	strh	r3, [r4, #0]
 8008a5c:	e0de      	b.n	8008c1c <USB_EPStartXfer+0x52c>
 8008a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	61fb      	str	r3, [r7, #28]
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <USB_EPStartXfer+0x384>
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	029b      	lsls	r3, r3, #10
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	8023      	strh	r3, [r4, #0]
 8008a88:	e0c8      	b.n	8008c1c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	785b      	ldrb	r3, [r3, #1]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d148      	bne.n	8008b24 <USB_EPStartXfer+0x434>
 8008a92:	687c      	ldr	r4, [r7, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	441c      	add	r4, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	4423      	add	r3, r4
 8008aa6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aaa:	461c      	mov	r4, r3
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10e      	bne.n	8008ad0 <USB_EPStartXfer+0x3e0>
 8008ab2:	8823      	ldrh	r3, [r4, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8023      	strh	r3, [r4, #0]
 8008abe:	8823      	ldrh	r3, [r4, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	8023      	strh	r3, [r4, #0]
 8008ace:	e03d      	b.n	8008b4c <USB_EPStartXfer+0x45c>
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ad4:	d810      	bhi.n	8008af8 <USB_EPStartXfer+0x408>
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	085b      	lsrs	r3, r3, #1
 8008ada:	61bb      	str	r3, [r7, #24]
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <USB_EPStartXfer+0x3fc>
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	61bb      	str	r3, [r7, #24]
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	029b      	lsls	r3, r3, #10
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	8023      	strh	r3, [r4, #0]
 8008af6:	e029      	b.n	8008b4c <USB_EPStartXfer+0x45c>
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	095b      	lsrs	r3, r3, #5
 8008afc:	61bb      	str	r3, [r7, #24]
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	f003 031f 	and.w	r3, r3, #31
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d102      	bne.n	8008b0e <USB_EPStartXfer+0x41e>
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	029b      	lsls	r3, r3, #10
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	8023      	strh	r3, [r4, #0]
 8008b22:	e013      	b.n	8008b4c <USB_EPStartXfer+0x45c>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d10f      	bne.n	8008b4c <USB_EPStartXfer+0x45c>
 8008b2c:	687c      	ldr	r4, [r7, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	441c      	add	r4, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	4423      	add	r3, r4
 8008b40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b44:	461c      	mov	r4, r3
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	8023      	strh	r3, [r4, #0]
 8008b4c:	687c      	ldr	r4, [r7, #4]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	785b      	ldrb	r3, [r3, #1]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d14e      	bne.n	8008bf4 <USB_EPStartXfer+0x504>
 8008b56:	687c      	ldr	r4, [r7, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	441c      	add	r4, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	4423      	add	r3, r4
 8008b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b6e:	461c      	mov	r4, r3
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10e      	bne.n	8008b94 <USB_EPStartXfer+0x4a4>
 8008b76:	8823      	ldrh	r3, [r4, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	8023      	strh	r3, [r4, #0]
 8008b82:	8823      	ldrh	r3, [r4, #0]
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	8023      	strh	r3, [r4, #0]
 8008b92:	e043      	b.n	8008c1c <USB_EPStartXfer+0x52c>
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	2b3e      	cmp	r3, #62	; 0x3e
 8008b98:	d816      	bhi.n	8008bc8 <USB_EPStartXfer+0x4d8>
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	085b      	lsrs	r3, r3, #1
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <USB_EPStartXfer+0x4c0>
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	3301      	adds	r3, #1
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	029b      	lsls	r3, r3, #10
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	8023      	strh	r3, [r4, #0]
 8008bba:	e02f      	b.n	8008c1c <USB_EPStartXfer+0x52c>
 8008bbc:	ffff80c0 	.word	0xffff80c0
 8008bc0:	ffffc080 	.word	0xffffc080
 8008bc4:	ffff8080 	.word	0xffff8080
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	617b      	str	r3, [r7, #20]
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	f003 031f 	and.w	r3, r3, #31
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d102      	bne.n	8008bde <USB_EPStartXfer+0x4ee>
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	029b      	lsls	r3, r3, #10
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	8023      	strh	r3, [r4, #0]
 8008bf2:	e013      	b.n	8008c1c <USB_EPStartXfer+0x52c>
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d10f      	bne.n	8008c1c <USB_EPStartXfer+0x52c>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	441c      	add	r4, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	4423      	add	r3, r4
 8008c0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c32:	b29c      	uxth	r4, r3
 8008c34:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008c38:	b29c      	uxth	r4, r3
 8008c3a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008c3e:	b29c      	uxth	r4, r3
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	441a      	add	r2, r3
 8008c4a:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <USB_EPStartXfer+0x56c>)
 8008c4c:	4323      	orrs	r3, r4
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3734      	adds	r7, #52	; 0x34
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}
 8008c5c:	ffff8080 	.word	0xffff8080

08008c60 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c60:	b490      	push	{r4, r7}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d018      	beq.n	8008ca4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c88:	b29c      	uxth	r4, r3
 8008c8a:	f084 0310 	eor.w	r3, r4, #16
 8008c8e:	b29c      	uxth	r4, r3
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	441a      	add	r2, r3
 8008c9a:	4b11      	ldr	r3, [pc, #68]	; (8008ce0 <USB_EPSetStall+0x80>)
 8008c9c:	4323      	orrs	r3, r4
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8013      	strh	r3, [r2, #0]
 8008ca2:	e017      	b.n	8008cd4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cba:	b29c      	uxth	r4, r3
 8008cbc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008cc0:	b29c      	uxth	r4, r3
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	441a      	add	r2, r3
 8008ccc:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <USB_EPSetStall+0x80>)
 8008cce:	4323      	orrs	r3, r4
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc90      	pop	{r4, r7}
 8008cde:	4770      	bx	lr
 8008ce0:	ffff8080 	.word	0xffff8080

08008ce4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ce4:	b490      	push	{r4, r7}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	7b1b      	ldrb	r3, [r3, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d17d      	bne.n	8008df2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d03d      	beq.n	8008d7a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29c      	uxth	r4, r3
 8008d0c:	4623      	mov	r3, r4
 8008d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d014      	beq.n	8008d40 <USB_EPClearStall+0x5c>
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2c:	b29c      	uxth	r4, r3
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	441a      	add	r2, r3
 8008d38:	4b31      	ldr	r3, [pc, #196]	; (8008e00 <USB_EPClearStall+0x11c>)
 8008d3a:	4323      	orrs	r3, r4
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	78db      	ldrb	r3, [r3, #3]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d054      	beq.n	8008df2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d5e:	b29c      	uxth	r4, r3
 8008d60:	f084 0320 	eor.w	r3, r4, #32
 8008d64:	b29c      	uxth	r4, r3
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	441a      	add	r2, r3
 8008d70:	4b24      	ldr	r3, [pc, #144]	; (8008e04 <USB_EPClearStall+0x120>)
 8008d72:	4323      	orrs	r3, r4
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	8013      	strh	r3, [r2, #0]
 8008d78:	e03b      	b.n	8008df2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29c      	uxth	r4, r3
 8008d88:	4623      	mov	r3, r4
 8008d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d014      	beq.n	8008dbc <USB_EPClearStall+0xd8>
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da8:	b29c      	uxth	r4, r3
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <USB_EPClearStall+0x124>)
 8008db6:	4323      	orrs	r3, r4
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd2:	b29c      	uxth	r4, r3
 8008dd4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008dd8:	b29c      	uxth	r4, r3
 8008dda:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008dde:	b29c      	uxth	r4, r3
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	441a      	add	r2, r3
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <USB_EPClearStall+0x120>)
 8008dec:	4323      	orrs	r3, r4
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc90      	pop	{r4, r7}
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	ffff80c0 	.word	0xffff80c0
 8008e04:	ffff8080 	.word	0xffff8080
 8008e08:	ffffc080 	.word	0xffffc080

08008e0c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d103      	bne.n	8008e26 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2280      	movs	r2, #128	; 0x80
 8008e22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bc80      	pop	{r7}
 8008e30:	4770      	bx	lr

08008e32 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bc80      	pop	{r7}
 8008e44:	4770      	bx	lr

08008e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr

08008e5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bc80      	pop	{r7}
 8008e8c:	4770      	bx	lr

08008e8e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b08d      	sub	sp, #52	; 0x34
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	80fb      	strh	r3, [r7, #6]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ea4:	88bb      	ldrh	r3, [r7, #4]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	085b      	lsrs	r3, r3, #1
 8008eaa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008eb4:	88fb      	ldrh	r3, [r7, #6]
 8008eb6:	005a      	lsls	r2, r3, #1
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ec0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec6:	e01e      	b.n	8008f06 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	021b      	lsls	r3, r3, #8
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	461a      	mov	r2, r3
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef0:	3302      	adds	r3, #2
 8008ef2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	3301      	adds	r3, #1
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	3b01      	subs	r3, #1
 8008f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1dd      	bne.n	8008ec8 <USB_WritePMA+0x3a>
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	bf00      	nop
 8008f10:	3734      	adds	r7, #52	; 0x34
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bc80      	pop	{r7}
 8008f16:	4770      	bx	lr

08008f18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b08b      	sub	sp, #44	; 0x2c
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4611      	mov	r1, r2
 8008f24:	461a      	mov	r2, r3
 8008f26:	460b      	mov	r3, r1
 8008f28:	80fb      	strh	r3, [r7, #6]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f2e:	88bb      	ldrh	r3, [r7, #4]
 8008f30:	085b      	lsrs	r3, r3, #1
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	005a      	lsls	r2, r3, #1
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f4a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f50:	e01b      	b.n	8008f8a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	0a1b      	lsrs	r3, r3, #8
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	3302      	adds	r3, #2
 8008f82:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	3b01      	subs	r3, #1
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e0      	bne.n	8008f52 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008f90:	88bb      	ldrh	r3, [r7, #4]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	701a      	strb	r2, [r3, #0]
  }
}
 8008fac:	bf00      	nop
 8008fae:	372c      	adds	r7, #44	; 0x2c
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr

08008fb6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr

08008fcc <_ZN10AdcHandlerC1Ev>:
#include "AdcHandler.h"


AdcHandler::AdcHandler() {
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	4a07      	ldr	r2, [pc, #28]	; (8008ff4 <_ZN10AdcHandlerC1Ev+0x28>)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	601a      	str	r2, [r3, #0]
	extern std::vector<AdcHandler*> adcHandlers;
	adcHandlers.push_back(this);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	f107 030c 	add.w	r3, r7, #12
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4804      	ldr	r0, [pc, #16]	; (8008ff8 <_ZN10AdcHandlerC1Ev+0x2c>)
 8008fe6:	f000 f86f 	bl	80090c8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE9push_backEOS1_>

}
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	080176bc 	.word	0x080176bc
 8008ff8:	20000790 	.word	0x20000790

08008ffc <_ZN10AdcHandlerD1Ev>:

AdcHandler::~AdcHandler() {
 8008ffc:	b590      	push	{r4, r7, lr}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	4a21      	ldr	r2, [pc, #132]	; (800908c <_ZN10AdcHandlerD1Ev+0x90>)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	601a      	str	r2, [r3, #0]
	extern std::vector<AdcHandler*> adcHandlers;
	for (uint8_t i = 0; i < adcHandlers.size(); i++){
 800900a:	2300      	movs	r3, #0
 800900c:	75fb      	strb	r3, [r7, #23]
 800900e:	7dfc      	ldrb	r4, [r7, #23]
 8009010:	481f      	ldr	r0, [pc, #124]	; (8009090 <_ZN10AdcHandlerD1Ev+0x94>)
 8009012:	f000 f86a 	bl	80090ea <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 8009016:	4603      	mov	r3, r0
 8009018:	429c      	cmp	r4, r3
 800901a:	bf34      	ite	cc
 800901c:	2301      	movcc	r3, #1
 800901e:	2300      	movcs	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d02d      	beq.n	8009082 <_ZN10AdcHandlerD1Ev+0x86>
		if(adcHandlers[i] == this){
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	4619      	mov	r1, r3
 800902a:	4819      	ldr	r0, [pc, #100]	; (8009090 <_ZN10AdcHandlerD1Ev+0x94>)
 800902c:	f000 f86c 	bl	8009108 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEixEj>
 8009030:	4603      	mov	r3, r0
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	429a      	cmp	r2, r3
 8009038:	bf0c      	ite	eq
 800903a:	2301      	moveq	r3, #1
 800903c:	2300      	movne	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01a      	beq.n	800907a <_ZN10AdcHandlerD1Ev+0x7e>
			adcHandlers.erase(adcHandlers.begin()+i);
 8009044:	4812      	ldr	r0, [pc, #72]	; (8009090 <_ZN10AdcHandlerD1Ev+0x94>)
 8009046:	f000 f86e 	bl	8009126 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 800904a:	4603      	mov	r3, r0
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	7dfa      	ldrb	r2, [r7, #23]
 8009050:	f107 0310 	add.w	r3, r7, #16
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f000 f875 	bl	8009146 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800905c:	4603      	mov	r3, r0
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	f107 020c 	add.w	r2, r7, #12
 8009064:	f107 0308 	add.w	r3, r7, #8
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f883 	bl	8009176 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 8009070:	68b9      	ldr	r1, [r7, #8]
 8009072:	4807      	ldr	r0, [pc, #28]	; (8009090 <_ZN10AdcHandlerD1Ev+0x94>)
 8009074:	f000 f890 	bl	8009198 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 8009078:	e003      	b.n	8009082 <_ZN10AdcHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < adcHandlers.size(); i++){
 800907a:	7dfb      	ldrb	r3, [r7, #23]
 800907c:	3301      	adds	r3, #1
 800907e:	75fb      	strb	r3, [r7, #23]
 8009080:	e7c5      	b.n	800900e <_ZN10AdcHandlerD1Ev+0x12>
		}
	}
}
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4618      	mov	r0, r3
 8009086:	371c      	adds	r7, #28
 8009088:	46bd      	mov	sp, r7
 800908a:	bd90      	pop	{r4, r7, pc}
 800908c:	080176bc 	.word	0x080176bc
 8009090:	20000790 	.word	0x20000790

08009094 <_ZN10AdcHandlerD0Ev>:
AdcHandler::~AdcHandler() {
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
}
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff ffad 	bl	8008ffc <_ZN10AdcHandlerD1Ev>
 80090a2:	2104      	movs	r1, #4
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f00c f9eb 	bl	8015480 <_ZdlPvj>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <_ZN10AdcHandler6adcUpdEPVm>:

void AdcHandler::adcUpd(volatile uint32_t* ADC_BUF){
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]

}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bc80      	pop	{r7}
 80090c6:	4770      	bx	lr

080090c8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80090d2:	6838      	ldr	r0, [r7, #0]
 80090d4:	f000 f887 	bl	80091e6 <_ZSt4moveIRP10AdcHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80090d8:	4603      	mov	r3, r0
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f88c 	bl	80091fa <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	109b      	asrs	r3, r3, #2
 80090fe:	4618      	mov	r0, r3
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	bc80      	pop	{r7}
 8009106:	4770      	bx	lr

08009108 <_ZNSt6vectorIP10AdcHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
      }
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr

08009126 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	f107 030c 	add.w	r3, r7, #12
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f000 f88d 	bl	8009256 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      __normal_iterator&
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	f107 020c 	add.w	r2, r7, #12
 8009160:	f107 0308 	add.w	r3, r7, #8
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f875 	bl	8009256 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8009180:	6838      	ldr	r0, [r7, #0]
 8009182:	f000 f877 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8009186:	4603      	mov	r3, r0
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7ff ffbf 	bl	8009126 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 80091a8:	4603      	mov	r3, r0
 80091aa:	60bb      	str	r3, [r7, #8]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f86b 	bl	8009288 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE6cbeginEv>
 80091b2:	4603      	mov	r3, r0
 80091b4:	60fb      	str	r3, [r7, #12]
 80091b6:	f107 020c 	add.w	r2, r7, #12
 80091ba:	463b      	mov	r3, r7
 80091bc:	4611      	mov	r1, r2
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f876 	bl	80092b0 <_ZN9__gnu_cxxmiIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 80091c4:	4602      	mov	r2, r0
 80091c6:	f107 0308 	add.w	r3, r7, #8
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff ffba 	bl	8009146 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 80091d2:	4603      	mov	r3, r0
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f87f 	bl	80092da <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 80091dc:	4603      	mov	r3, r0
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <_ZSt4moveIRP10AdcHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4618      	mov	r0, r3
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bc80      	pop	{r7}
 80091f8:	4770      	bx	lr

080091fa <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 80091fa:	b5b0      	push	{r4, r5, r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	429a      	cmp	r2, r3
 800920e:	d011      	beq.n	8009234 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009210:	687c      	ldr	r4, [r7, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685d      	ldr	r5, [r3, #4]
 8009216:	6838      	ldr	r0, [r7, #0]
 8009218:	f000 f89b 	bl	8009352 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800921c:	4603      	mov	r3, r0
 800921e:	461a      	mov	r2, r3
 8009220:	4629      	mov	r1, r5
 8009222:	4620      	mov	r0, r4
 8009224:	f000 f89f 	bl	8009366 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	1d1a      	adds	r2, r3, #4
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8009232:	e00c      	b.n	800924e <_ZNSt6vectorIP10AdcHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f8a9 	bl	800938c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 800923a:	4604      	mov	r4, r0
 800923c:	6838      	ldr	r0, [r7, #0]
 800923e:	f000 f888 	bl	8009352 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8009242:	4603      	mov	r3, r0
 8009244:	461a      	mov	r2, r3
 8009246:	4621      	mov	r1, r4
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f8c5 	bl	80093d8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bdb0      	pop	{r4, r5, r7, pc}

08009256 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009256:	b480      	push	{r7}
 8009258:	b083      	sub	sp, #12
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4618      	mov	r0, r3
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	bc80      	pop	{r7}
 8009272:	4770      	bx	lr

08009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	f107 020c 	add.w	r2, r7, #12
 800929a:	f107 0308 	add.w	r3, r7, #8
 800929e:	4611      	mov	r1, r2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 f955 	bl	8009550 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <_ZN9__gnu_cxxmiIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f957 	bl	800956e <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80092c0:	4603      	mov	r3, r0
 80092c2:	681c      	ldr	r4, [r3, #0]
 80092c4:	6838      	ldr	r0, [r7, #0]
 80092c6:	f000 f952 	bl	800956e <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80092ca:	4603      	mov	r3, r0
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	1ae3      	subs	r3, r4, r3
 80092d0:	109b      	asrs	r3, r3, #2
 80092d2:	4618      	mov	r0, r3
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd90      	pop	{r4, r7, pc}

080092da <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 80092da:	b590      	push	{r4, r7, lr}
 80092dc:	b085      	sub	sp, #20
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 80092e4:	463b      	mov	r3, r7
 80092e6:	2101      	movs	r1, #1
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff ff2c 	bl	8009146 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 80092ee:	4603      	mov	r3, r0
 80092f0:	60bb      	str	r3, [r7, #8]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f84a 	bl	800938c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 80092f8:	4603      	mov	r3, r0
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	f107 020c 	add.w	r2, r7, #12
 8009300:	f107 0308 	add.w	r3, r7, #8
 8009304:	4611      	mov	r1, r2
 8009306:	4618      	mov	r0, r3
 8009308:	f000 f93b 	bl	8009582 <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00e      	beq.n	8009330 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8009312:	463b      	mov	r3, r7
 8009314:	2101      	movs	r1, #1
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff ff15 	bl	8009146 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800931c:	4604      	mov	r4, r0
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f834 	bl	800938c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 8009324:	4603      	mov	r3, r0
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	4619      	mov	r1, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f941 	bl	80095b2 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	1f1a      	subs	r2, r3, #4
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	4619      	mov	r1, r3
 8009342:	4610      	mov	r0, r2
 8009344:	f000 f94d 	bl	80095e2 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE7destroyIS1_EEvRS2_PT_>
      _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
      return __position;
 8009348:	683b      	ldr	r3, [r7, #0]
    }
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	bd90      	pop	{r4, r7, pc}

08009352 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	bc80      	pop	{r7}
 8009364:	4770      	bx	lr

08009366 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7ff ffed 	bl	8009352 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8009378:	4603      	mov	r3, r0
 800937a:	461a      	mov	r2, r3
 800937c:	68b9      	ldr	r1, [r7, #8]
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 f93c 	bl	80095fc <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 8009384:	bf00      	nop
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	1d1a      	adds	r2, r3, #4
 8009398:	f107 030c 	add.w	r3, r7, #12
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff ff59 	bl	8009256 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <_ZNSt6vectorIP10AdcHandlerSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b082      	sub	sp, #8
 80093b2:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 f805 	bl	80093c4 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80093ba:	4603      	mov	r3, r0
      }
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80093cc:	2301      	movs	r3, #1
      }
 80093ce:	4618      	mov	r0, r3
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bc80      	pop	{r7}
 80093d6:	4770      	bx	lr

080093d8 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80093d8:	b5b0      	push	{r4, r5, r7, lr}
 80093da:	b08c      	sub	sp, #48	; 0x30
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80093e4:	4a59      	ldr	r2, [pc, #356]	; (800954c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 80093e6:	2101      	movs	r1, #1
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f91d 	bl	8009628 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc>
 80093ee:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff fe92 	bl	8009126 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 8009402:	4603      	mov	r3, r0
 8009404:	617b      	str	r3, [r7, #20]
 8009406:	f107 0214 	add.w	r2, r7, #20
 800940a:	f107 0308 	add.w	r3, r7, #8
 800940e:	4611      	mov	r1, r2
 8009410:	4618      	mov	r0, r3
 8009412:	f000 f950 	bl	80096b6 <_ZN9__gnu_cxxmiIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8009416:	4603      	mov	r3, r0
 8009418:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f95e 	bl	80096e0 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj>
 8009424:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800942a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	18d5      	adds	r5, r2, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff ff8c 	bl	8009352 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800943a:	4603      	mov	r3, r0
 800943c:	461a      	mov	r2, r3
 800943e:	4629      	mov	r1, r5
 8009440:	4620      	mov	r0, r4
 8009442:	f7ff ff90 	bl	8009366 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8009446:	2300      	movs	r3, #0
 8009448:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800944a:	f7ff ffb0 	bl	80093ae <_ZNSt6vectorIP10AdcHandlerSaIS1_EE15_S_use_relocateEv>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d027      	beq.n	80094a4 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009454:	f107 0308 	add.w	r3, r7, #8
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff ff0b 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800945e:	4603      	mov	r3, r0
 8009460:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f963 	bl	8009730 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800946a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	4621      	mov	r1, r4
 8009470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009472:	f000 f949 	bl	8009708 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009476:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	3304      	adds	r3, #4
 800947c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800947e:	f107 0308 	add.w	r3, r7, #8
 8009482:	4618      	mov	r0, r3
 8009484:	f7ff fef6 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8009488:	4603      	mov	r3, r0
 800948a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4618      	mov	r0, r3
 8009490:	f000 f94e 	bl	8009730 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8009494:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009498:	6a39      	ldr	r1, [r7, #32]
 800949a:	4620      	mov	r0, r4
 800949c:	f000 f934 	bl	8009708 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80094a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80094a2:	e026      	b.n	80094f2 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80094a4:	f107 0308 	add.w	r3, r7, #8
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff fee3 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80094ae:	4603      	mov	r3, r0
 80094b0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 f93b 	bl	8009730 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80094ba:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	4621      	mov	r1, r4
 80094c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094c2:	f000 f93f 	bl	8009744 <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80094c6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80094c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ca:	3304      	adds	r3, #4
 80094cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80094ce:	f107 0308 	add.w	r3, r7, #8
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff fece 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80094d8:	4603      	mov	r3, r0
 80094da:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 f926 	bl	8009730 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80094e4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80094e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094e8:	6a39      	ldr	r1, [r7, #32]
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 f92a 	bl	8009744 <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80094f0:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80094f2:	f7ff ff5c 	bl	80093ae <_ZNSt6vectorIP10AdcHandlerSaIS1_EE15_S_use_relocateEv>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f083 0301 	eor.w	r3, r3, #1
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4618      	mov	r0, r3
 8009506:	f000 f913 	bl	8009730 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	6a39      	ldr	r1, [r7, #32]
 8009510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009512:	f000 f930 	bl	8009776 <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8009516:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8009522:	461a      	mov	r2, r3
 8009524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009526:	f000 f934 	bl	8009792 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009534:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	441a      	add	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	609a      	str	r2, [r3, #8]
    }
 8009542:	bf00      	nop
 8009544:	3730      	adds	r7, #48	; 0x30
 8009546:	46bd      	mov	sp, r7
 8009548:	bdb0      	pop	{r4, r5, r7, pc}
 800954a:	bf00      	nop
 800954c:	08017238 	.word	0x08017238

08009550 <_ZN9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr

0800956e <_ZNK9__gnu_cxx17__normal_iteratorIPKP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr

08009582 <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009582:	b590      	push	{r4, r7, lr}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7ff fe71 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8009592:	4603      	mov	r3, r0
 8009594:	681c      	ldr	r4, [r3, #0]
 8009596:	6838      	ldr	r0, [r7, #0]
 8009598:	f7ff fe6c 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800959c:	4603      	mov	r3, r0
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	429c      	cmp	r4, r3
 80095a2:	bf14      	ite	ne
 80095a4:	2301      	movne	r3, #1
 80095a6:	2300      	moveq	r3, #0
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd90      	pop	{r4, r7, pc}

080095b2 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 80095b2:	b590      	push	{r4, r7, lr}
 80095b4:	b085      	sub	sp, #20
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 f8fa 	bl	80097b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 80095c4:	4604      	mov	r4, r0
 80095c6:	68b8      	ldr	r0, [r7, #8]
 80095c8:	f000 f8f6 	bl	80097b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 80095cc:	4603      	mov	r3, r0
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	4619      	mov	r1, r3
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 f8fa 	bl	80097cc <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 80095d8:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
    }
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd90      	pop	{r4, r7, pc}

080095e2 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f90d 	bl	800980e <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE7destroyIS2_EEvPT_>
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80095fc:	b590      	push	{r4, r7, lr}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff fea2 	bl	8009352 <_ZSt7forwardIP10AdcHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800960e:	4603      	mov	r3, r0
 8009610:	681c      	ldr	r4, [r3, #0]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	4619      	mov	r1, r3
 8009616:	2004      	movs	r0, #4
 8009618:	f7ff fccd 	bl	8008fb6 <_ZnwjPv>
 800961c:	4603      	mov	r3, r0
 800961e:	601c      	str	r4, [r3, #0]
 8009620:	bf00      	nop
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	bd90      	pop	{r4, r7, pc}

08009628 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8009628:	b590      	push	{r4, r7, lr}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 f8f4 	bl	8009822 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 800963a:	4604      	mov	r4, r0
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff fd54 	bl	80090ea <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 8009642:	4603      	mov	r3, r0
 8009644:	1ae2      	subs	r2, r4, r3
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	429a      	cmp	r2, r3
 800964a:	bf34      	ite	cc
 800964c:	2301      	movcc	r3, #1
 800964e:	2300      	movcs	r3, #0
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f00b ff32 	bl	80154c0 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff fd44 	bl	80090ea <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 8009662:	4604      	mov	r4, r0
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7ff fd40 	bl	80090ea <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 800966a:	4603      	mov	r3, r0
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	f107 0208 	add.w	r2, r7, #8
 8009672:	f107 0310 	add.w	r3, r7, #16
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f8e3 	bl	8009844 <_ZSt3maxIjERKT_S2_S2_>
 800967e:	4603      	mov	r3, r0
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4423      	add	r3, r4
 8009684:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff fd2f 	bl	80090ea <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE4sizeEv>
 800968c:	4602      	mov	r2, r0
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	4293      	cmp	r3, r2
 8009692:	d306      	bcc.n	80096a2 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f8c4 	bl	8009822 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 800969a:	4602      	mov	r2, r0
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	4293      	cmp	r3, r2
 80096a0:	d904      	bls.n	80096ac <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x84>
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 f8bd 	bl	8009822 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>
 80096a8:	4603      	mov	r3, r0
 80096aa:	e000      	b.n	80096ae <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 80096ac:	697b      	ldr	r3, [r7, #20]
      }
 80096ae:	4618      	mov	r0, r3
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd90      	pop	{r4, r7, pc}

080096b6 <_ZN9__gnu_cxxmiIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80096b6:	b590      	push	{r4, r7, lr}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff fdd7 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80096c6:	4603      	mov	r3, r0
 80096c8:	681c      	ldr	r4, [r3, #0]
 80096ca:	6838      	ldr	r0, [r7, #0]
 80096cc:	f7ff fdd2 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80096d0:	4603      	mov	r3, r0
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	1ae3      	subs	r3, r4, r3
 80096d6:	109b      	asrs	r3, r3, #2
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd90      	pop	{r4, r7, pc}

080096e0 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d006      	beq.n	80096fe <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj+0x1e>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f8b8 	bl	800986a <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8allocateERS2_j>
 80096fa:	4603      	mov	r3, r0
 80096fc:	e000      	b.n	8009700 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE11_M_allocateEj+0x20>
 80096fe:	2300      	movs	r3, #0
      }
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8009708:	b590      	push	{r4, r7, lr}
 800970a:	b089      	sub	sp, #36	; 0x24
 800970c:	af02      	add	r7, sp, #8
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8009716:	f88d 4000 	strb.w	r4, [sp]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f8b1 	bl	8009888 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8009726:	4603      	mov	r3, r0
      }
 8009728:	4618      	mov	r0, r3
 800972a:	371c      	adds	r7, #28
 800972c:	46bd      	mov	sp, r7
 800972e:	bd90      	pop	{r4, r7, pc}

08009730 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4618      	mov	r0, r3
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr

08009744 <_ZSt34__uninitialized_move_if_noexcept_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009744:	b590      	push	{r4, r7, lr}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 f8aa 	bl	80098ac <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>
 8009758:	4604      	mov	r4, r0
 800975a:	68b8      	ldr	r0, [r7, #8]
 800975c:	f000 f8a6 	bl	80098ac <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>
 8009760:	4601      	mov	r1, r0
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	4620      	mov	r0, r4
 8009768:	f000 f8af 	bl	80098ca <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10AdcHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800976c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	bd90      	pop	{r4, r7, pc}

08009776 <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8009782:	68b9      	ldr	r1, [r7, #8]
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f8b1 	bl	80098ec <_ZSt8_DestroyIPP10AdcHandlerEvT_S3_>
    }
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
	if (__p)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f8ab 	bl	8009906 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE10deallocateERS2_PS1_j>
      }
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
    { return __it; }
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4618      	mov	r0, r3
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bc80      	pop	{r7}
 80097ca:	4770      	bx	lr

080097cc <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80097cc:	b5b0      	push	{r4, r5, r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 f8a3 	bl	8009924 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80097de:	4604      	mov	r4, r0
 80097e0:	68b8      	ldr	r0, [r7, #8]
 80097e2:	f000 f89f 	bl	8009924 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80097e6:	4605      	mov	r5, r0
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f89b 	bl	8009924 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	4629      	mov	r1, r5
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 f8a3 	bl	8009940 <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 80097fa:	4603      	mov	r3, r0
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f8b0 	bl	8009964 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 8009804:	4603      	mov	r3, r0
    }
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bdb0      	pop	{r4, r5, r7, pc}

0800980e <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	bc80      	pop	{r7}
 8009820:	4770      	bx	lr

08009822 <_ZNKSt6vectorIP10AdcHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4618      	mov	r0, r3
 800982e:	f000 f8ca 	bl	80099c6 <_ZNKSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8009832:	4603      	mov	r3, r0
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f8ac 	bl	8009992 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE11_S_max_sizeERKS2_>
 800983a:	4603      	mov	r3, r0
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d201      	bcs.n	800985e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	e000      	b.n	8009860 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800985e:	687b      	ldr	r3, [r7, #4]
    }
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	bc80      	pop	{r7}
 8009868:	4770      	bx	lr

0800986a <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009874:	2200      	movs	r2, #0
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f8ae 	bl	80099da <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv>
 800987e:	4603      	mov	r3, r0
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	68b9      	ldr	r1, [r7, #8]
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f8ba 	bl	8009a16 <_ZSt12__relocate_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80098a2:	4603      	mov	r3, r0
      }
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <_ZSt32__make_move_if_noexcept_iteratorIP10AdcHandlerSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80098b4:	f107 030c 	add.w	r3, r7, #12
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 f8c8 	bl	8009a50 <_ZNSt13move_iteratorIPP10AdcHandlerEC1ES2_>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP10AdcHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 f8c5 	bl	8009a6c <_ZSt18uninitialized_copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>
 80098e2:	4603      	mov	r3, r0
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <_ZSt8_DestroyIPP10AdcHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f8c9 	bl	8009a90 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10AdcHandlerEEvT_S5_>
    }
 80098fe:	bf00      	nop
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	68b9      	ldr	r1, [r7, #8]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f000 f8c4 	bl	8009aa4 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE10deallocateEPS2_j>
 800991c:	bf00      	nop
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800992c:	1d3b      	adds	r3, r7, #4
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff fca0 	bl	8009274 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8009934:	4603      	mov	r3, r0
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800994c:	2301      	movs	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 f8b2 	bl	8009abe <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_>
 800995a:	4603      	mov	r3, r0
    }
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff ffd8 	bl	8009924 <_ZSt12__niter_baseIPP10AdcHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8009974:	4602      	mov	r2, r0
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	109b      	asrs	r3, r3, #2
 800997c:	461a      	mov	r2, r3
 800997e:	1d3b      	adds	r3, r7, #4
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f7ff fbdf 	bl	8009146 <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8009988:	4603      	mov	r3, r0
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800999a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800999e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f8a9 	bl	8009af8 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8max_sizeERKS2_>
 80099a6:	4603      	mov	r3, r0
 80099a8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80099aa:	f107 0208 	add.w	r2, r7, #8
 80099ae:	f107 030c 	add.w	r3, r7, #12
 80099b2:	4611      	mov	r1, r2
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f8ab 	bl	8009b10 <_ZSt3minIjERKT_S2_S2_>
 80099ba:	4603      	mov	r3, r0
 80099bc:	681b      	ldr	r3, [r3, #0]
      }
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <_ZNKSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bc80      	pop	{r7}
 80099d8:	4770      	bx	lr

080099da <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	60f8      	str	r0, [r7, #12]
 80099e2:	60b9      	str	r1, [r7, #8]
 80099e4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 f8a5 	bl	8009b36 <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>
 80099ec:	4602      	mov	r2, r0
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	4293      	cmp	r3, r2
 80099f2:	bf8c      	ite	hi
 80099f4:	2301      	movhi	r3, #1
 80099f6:	2300      	movls	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80099fe:	f00b fd56 	bl	80154ae <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f00b fd3c 	bl	8015484 <_Znwj>
 8009a0c:	4603      	mov	r3, r0
      }
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <_ZSt12__relocate_aIPP10AdcHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009a16:	b5b0      	push	{r4, r5, r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	607a      	str	r2, [r7, #4]
 8009a22:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 f891 	bl	8009b4c <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	68b8      	ldr	r0, [r7, #8]
 8009a2e:	f000 f88d 	bl	8009b4c <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8009a32:	4605      	mov	r5, r0
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f889 	bl	8009b4c <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	4629      	mov	r1, r5
 8009a40:	4620      	mov	r0, r4
 8009a42:	f000 f88d 	bl	8009b60 <_ZSt14__relocate_a_1IP10AdcHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8009a46:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bdb0      	pop	{r4, r5, r7, pc}

08009a50 <_ZNSt13move_iteratorIPP10AdcHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bc80      	pop	{r7}
 8009a6a:	4770      	bx	lr

08009a6c <_ZSt18uninitialized_copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	68b9      	ldr	r1, [r7, #8]
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 f88b 	bl	8009b9c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10AdcHandlerES5_EET0_T_S8_S7_>
 8009a86:	4603      	mov	r3, r0
    }
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10AdcHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	bf00      	nop
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bc80      	pop	{r7}
 8009aa2:	4770      	bx	lr

08009aa4 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8009ab0:	68b8      	ldr	r0, [r7, #8]
 8009ab2:	f00b fce3 	bl	801547c <_ZdlPv>
      }
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b086      	sub	sp, #24
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	109b      	asrs	r3, r3, #2
 8009ad2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d006      	beq.n	8009ae8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP10AdcHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	461a      	mov	r2, r3
 8009ae0:	68f9      	ldr	r1, [r7, #12]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f00c fe80 	bl	80167e8 <memmove>
	  return __result + _Num;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	4413      	add	r3, r2
	}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <_ZNSt16allocator_traitsISaIP10AdcHandlerEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f818 	bl	8009b36 <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>
 8009b06:	4603      	mov	r3, r0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d201      	bcs.n	8009b2a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	e000      	b.n	8009b2c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8009b2a:	687b      	ldr	r3, [r7, #4]
    }
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bc80      	pop	{r7}
 8009b34:	4770      	bx	lr

08009b36 <_ZNK9__gnu_cxx13new_allocatorIP10AdcHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009b36:	b480      	push	{r7}
 8009b38:	b083      	sub	sp, #12
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009b3e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8009b42:	4618      	mov	r0, r3
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bc80      	pop	{r7}
 8009b4a:	4770      	bx	lr

08009b4c <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>:
    __niter_base(_Iterator __it)
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bc80      	pop	{r7}
 8009b5e:	4770      	bx	lr

08009b60 <_ZSt14__relocate_a_1IP10AdcHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	109b      	asrs	r3, r3, #2
 8009b76:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dd06      	ble.n	8009b8c <_ZSt14__relocate_a_1IP10AdcHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	461a      	mov	r2, r3
 8009b84:	68f9      	ldr	r1, [r7, #12]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f00c fe2e 	bl	80167e8 <memmove>
      return __result + __count;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	4413      	add	r3, r2
    }
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP10AdcHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	68b9      	ldr	r1, [r7, #8]
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f805 	bl	8009bbc <_ZSt4copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <_ZSt4copyISt13move_iteratorIPP10AdcHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 f80f 	bl	8009bec <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009bce:	4604      	mov	r4, r0
 8009bd0:	68b8      	ldr	r0, [r7, #8]
 8009bd2:	f000 f80b 	bl	8009bec <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 f816 	bl	8009c0e <_ZSt14__copy_move_a2ILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8009be2:	4603      	mov	r3, r0
    }
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd90      	pop	{r4, r7, pc}

08009bec <_ZSt12__miter_baseIPP10AdcHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8009bf4:	1d3b      	adds	r3, r7, #4
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f82c 	bl	8009c54 <_ZNKSt13move_iteratorIPP10AdcHandlerE4baseEv>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 f833 	bl	8009c6a <_ZSt12__miter_baseIPP10AdcHandlerET_S3_>
 8009c04:	4603      	mov	r3, r0
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <_ZSt14__copy_move_a2ILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8009c0e:	b5b0      	push	{r4, r5, r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7ff ff96 	bl	8009b4c <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8009c20:	4604      	mov	r4, r0
 8009c22:	68b8      	ldr	r0, [r7, #8]
 8009c24:	f7ff ff92 	bl	8009b4c <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8009c28:	4605      	mov	r5, r0
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7ff ff8d 	bl	8009b4c <_ZSt12__niter_baseIPP10AdcHandlerET_S3_>
 8009c32:	4603      	mov	r3, r0
 8009c34:	461a      	mov	r2, r3
 8009c36:	4629      	mov	r1, r5
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f7ff fe81 	bl	8009940 <_ZSt13__copy_move_aILb1EPP10AdcHandlerS2_ET1_T0_S4_S3_>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	1d3b      	adds	r3, r7, #4
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 f81a 	bl	8009c7e <_ZSt12__niter_wrapIPP10AdcHandlerET_RKS3_S3_>
 8009c4a:	4603      	mov	r3, r0
    }
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bdb0      	pop	{r4, r5, r7, pc}

08009c54 <_ZNKSt13move_iteratorIPP10AdcHandlerE4baseEv>:
      base() const
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bc80      	pop	{r7}
 8009c68:	4770      	bx	lr

08009c6a <_ZSt12__miter_baseIPP10AdcHandlerET_S3_>:
    __miter_base(_Iterator __it)
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bc80      	pop	{r7}
 8009c7c:	4770      	bx	lr

08009c7e <_ZSt12__niter_wrapIPP10AdcHandlerET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009c7e:	b480      	push	{r7}
 8009c80:	b083      	sub	sp, #12
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bc80      	pop	{r7}
 8009c92:	4770      	bx	lr

08009c94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
					__idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af02      	add	r7, sp, #8
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f00b fe79 	bl	8015998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	4904      	ldr	r1, [pc, #16]	; (8009cc0 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8009cb0:	4804      	ldr	r0, [pc, #16]	; (8009cc4 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8009cb2:	f000 fce6 	bl	800a682 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8009cb6:	4603      	mov	r3, r0
			     __idx, __base); }
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	08017254 	.word	0x08017254
 8009cc4:	08016b2d 	.word	0x08016b2d

08009cc8 <_ZN9CmdParserC1Ev>:
 */

#include <CmdParser.h>


CmdParser::CmdParser() {
 8009cc8:	b590      	push	{r4, r7, lr}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	4a11      	ldr	r2, [pc, #68]	; (8009d18 <_ZN9CmdParserC1Ev+0x50>)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f00b fd7c 	bl	80157d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	839a      	strh	r2, [r3, #28]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f103 0420 	add.w	r4, r3, #32
 8009cec:	f107 030c 	add.w	r3, r7, #12
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f00b fbda 	bl	80154aa <_ZNSaIcEC1Ev>
 8009cf6:	f107 030c 	add.w	r3, r7, #12
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	4907      	ldr	r1, [pc, #28]	; (8009d1c <_ZN9CmdParserC1Ev+0x54>)
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f00b fea8 	bl	8015a54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009d04:	f107 030c 	add.w	r3, r7, #12
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f00b fbcf 	bl	80154ac <_ZNSaIcED1Ev>
	// TODO Auto-generated constructor stub

}
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4618      	mov	r0, r3
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd90      	pop	{r4, r7, pc}
 8009d18:	080176d0 	.word	0x080176d0
 8009d1c:	0801725c 	.word	0x0801725c

08009d20 <_ZN9CmdParserD1Ev>:

CmdParser::~CmdParser() {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	4a08      	ldr	r2, [pc, #32]	; (8009d4c <_ZN9CmdParserD1Ev+0x2c>)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3320      	adds	r3, #32
 8009d32:	4618      	mov	r0, r3
 8009d34:	f00b fd71 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f00b fd6c 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// TODO Auto-generated destructor stub
}
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4618      	mov	r0, r3
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	080176d0 	.word	0x080176d0

08009d50 <_ZN9CmdParserD0Ev>:
CmdParser::~CmdParser() {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
}
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff ffe1 	bl	8009d20 <_ZN9CmdParserD1Ev>
 8009d5e:	2138      	movs	r1, #56	; 0x38
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f00b fb8d 	bl	8015480 <_ZdlPvj>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <_ZN9CmdParser3addEPcPm>:
void CmdParser::clear(){
	buffer.clear();
}


bool CmdParser::add(char* Buf, uint32_t *Len){
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
	bool flag = false;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	75fb      	strb	r3, [r7, #23]
	if(*Buf == 0x2a)
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b2a      	cmp	r3, #42	; 0x2a
 8009d86:	d108      	bne.n	8009d9a <_ZN9CmdParser3addEPcPm+0x2a>
		needRead = atoi(Buf+1);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f00c fcc2 	bl	8016716 <atoi>
 8009d92:	4603      	mov	r3, r0
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	839a      	strh	r2, [r3, #28]
	if(needRead != 0)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8b9b      	ldrh	r3, [r3, #28]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d017      	beq.n	8009dd2 <_ZN9CmdParser3addEPcPm+0x62>
	{
		needRead -= *Len;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	8b9a      	ldrh	r2, [r3, #28]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	839a      	strh	r2, [r3, #28]
		this->buffer.append((char*)Buf,*Len);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	1d18      	adds	r0, r3, #4
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	f00b fdc0 	bl	8015944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
		if(needRead == 0)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	8b9b      	ldrh	r3, [r3, #28]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d131      	bne.n	8009e30 <_ZN9CmdParser3addEPcPm+0xc0>
			flag = true;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	75fb      	strb	r3, [r7, #23]
 8009dd0:	e02e      	b.n	8009e30 <_ZN9CmdParser3addEPcPm+0xc0>
	}
	else
	{
		for(uint32_t i=0;i<*Len;i++){
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	613b      	str	r3, [r7, #16]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d21f      	bcs.n	8009e20 <_ZN9CmdParser3addEPcPm+0xb0>
				// Replace end markers
				if(*(Buf+i) == '\n' || *(Buf+i) == '\r' || *(Buf+i) == ';'){
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	4413      	add	r3, r2
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b0a      	cmp	r3, #10
 8009dea:	d00b      	beq.n	8009e04 <_ZN9CmdParser3addEPcPm+0x94>
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	4413      	add	r3, r2
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b0d      	cmp	r3, #13
 8009df6:	d005      	beq.n	8009e04 <_ZN9CmdParser3addEPcPm+0x94>
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b3b      	cmp	r3, #59	; 0x3b
 8009e02:	d109      	bne.n	8009e18 <_ZN9CmdParser3addEPcPm+0xa8>
					*(Buf+i) = (uint8_t)';';
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4413      	add	r3, r2
 8009e0a:	223b      	movs	r2, #59	; 0x3b
 8009e0c:	701a      	strb	r2, [r3, #0]
					flag = true;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	75fb      	strb	r3, [r7, #23]
					needRead = 0;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	839a      	strh	r2, [r3, #28]
		for(uint32_t i=0;i<*Len;i++){
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	613b      	str	r3, [r7, #16]
 8009e1e:	e7da      	b.n	8009dd6 <_ZN9CmdParser3addEPcPm+0x66>
				}
			}

			this->buffer.append((char*)Buf,*Len);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	1d18      	adds	r0, r3, #4
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	f00b fd8a 	bl	8015944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
	}

	return flag;
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fc61 	bl	800a70c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implC1Ev>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <_ZNSt6vectorI13ParsedCommandSaIS0_EEC1Ev>:
      vector() = default;
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff ffeb 	bl	8009e3a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EEC1Ev>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fc68 	bl	800a74c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base() = default;
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 fc4b 	bl	800a72c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      vector() = default;
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff ffeb 	bl	8009e86 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <_ZN13ParsedCommandC1Ev>:


enum class CMDtype{
	set,setat,get,getat,none,help,err, dash, simhub
};
struct ParsedCommand
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f00b fc87 	bl	80157d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	831a      	strh	r2, [r3, #24]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	61da      	str	r2, [r3, #28]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2204      	movs	r2, #4
 8009eda:	621a      	str	r2, [r3, #32]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <_ZN13ParsedCommandD1Ev>:
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f00b fc92 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <_ZN9CmdParser5parseEv>:



std::vector<ParsedCommand> CmdParser::parse(){
 8009f00:	b590      	push	{r4, r7, lr}
 8009f02:	b0e9      	sub	sp, #420	; 0x1a4
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	1d3b      	adds	r3, r7, #4
 8009f08:	6018      	str	r0, [r3, #0]
 8009f0a:	463b      	mov	r3, r7
 8009f0c:	6019      	str	r1, [r3, #0]

	std::vector<ParsedCommand> commands;
 8009f0e:	1d3b      	adds	r3, r7, #4
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	f7ff ff9f 	bl	8009e54 <_ZNSt6vectorI13ParsedCommandSaIS0_EEC1Ev>
	std::vector<std::string> tokens;
 8009f16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7ff ffc0 	bl	8009ea0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>

	const char* test = buffer.c_str();
 8009f20:	463b      	mov	r3, r7
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4618      	mov	r0, r3
 8009f28:	f00b fd36 	bl	8015998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8009f2c:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
	if((uint8_t)test[0] == 0x86)
 8009f30:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b86      	cmp	r3, #134	; 0x86
 8009f38:	d125      	bne.n	8009f86 <_ZN9CmdParser5parseEv+0x86>
	{
		ParsedCommand cmd;
 8009f3a:	f107 0308 	add.w	r3, r7, #8
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff ffbb 	bl	8009eba <_ZN13ParsedCommandC1Ev>
		cmd.type = CMDtype::dash;
 8009f44:	f107 0308 	add.w	r3, r7, #8
 8009f48:	2207      	movs	r2, #7
 8009f4a:	621a      	str	r2, [r3, #32]
		cmd.cmd = buffer;
 8009f4c:	463b      	mov	r3, r7
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	1d1a      	adds	r2, r3, #4
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f00b fc64 	bl	8015826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		buffer.clear();
 8009f5e:	463b      	mov	r3, r7
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3304      	adds	r3, #4
 8009f64:	4618      	mov	r0, r3
 8009f66:	f00b fc8e 	bl	8015886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		commands.push_back(cmd);
 8009f6a:	f107 0208 	add.w	r2, r7, #8
 8009f6e:	1d3b      	adds	r3, r7, #4
 8009f70:	4611      	mov	r1, r2
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	f000 fc2f 	bl	800a7d6 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
		return commands;
 8009f78:	bf00      	nop
		ParsedCommand cmd;
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7ff ffb1 	bl	8009ee6 <_ZN13ParsedCommandD1Ev>
 8009f84:	e335      	b.n	800a5f2 <_ZN9CmdParser5parseEv+0x6f2>
	}
	if((uint8_t)test[0] == 0x2a)
 8009f86:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f8e:	d125      	bne.n	8009fdc <_ZN9CmdParser5parseEv+0xdc>
	{
		ParsedCommand cmd;
 8009f90:	f107 0308 	add.w	r3, r7, #8
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7ff ff90 	bl	8009eba <_ZN13ParsedCommandC1Ev>
		cmd.type = CMDtype::simhub;
 8009f9a:	f107 0308 	add.w	r3, r7, #8
 8009f9e:	2208      	movs	r2, #8
 8009fa0:	621a      	str	r2, [r3, #32]
		cmd.cmd = buffer;
 8009fa2:	463b      	mov	r3, r7
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	1d1a      	adds	r2, r3, #4
 8009fa8:	f107 0308 	add.w	r3, r7, #8
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f00b fc39 	bl	8015826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		buffer.clear();
 8009fb4:	463b      	mov	r3, r7
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f00b fc63 	bl	8015886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		commands.push_back(cmd);
 8009fc0:	f107 0208 	add.w	r2, r7, #8
 8009fc4:	1d3b      	adds	r3, r7, #4
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	f000 fc04 	bl	800a7d6 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
		return commands;
 8009fce:	bf00      	nop
		ParsedCommand cmd;
 8009fd0:	f107 0308 	add.w	r3, r7, #8
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff ff86 	bl	8009ee6 <_ZN13ParsedCommandD1Ev>
 8009fda:	e30a      	b.n	800a5f2 <_ZN9CmdParser5parseEv+0x6f2>
	}

    uint16_t pos = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
    uint16_t lpos = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
	while(pos < buffer.length()-1){
 8009fe8:	f8b7 419e 	ldrh.w	r4, [r7, #414]	; 0x19e
 8009fec:	463b      	mov	r3, r7
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f00b fc45 	bl	8015882 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	bf34      	ite	cc
 800a000:	2301      	movcc	r3, #1
 800a002:	2300      	movcs	r3, #0
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d02d      	beq.n	800a066 <_ZN9CmdParser5parseEv+0x166>
		pos = buffer.find(';',lpos);
 800a00a:	463b      	mov	r3, r7
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3304      	adds	r3, #4
 800a010:	f8b7 219c 	ldrh.w	r2, [r7, #412]	; 0x19c
 800a014:	213b      	movs	r1, #59	; 0x3b
 800a016:	4618      	mov	r0, r3
 800a018:	f00b fcc0 	bl	801599c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a01c:	4603      	mov	r3, r0
 800a01e:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
		std::string token = buffer.substr(lpos,pos-lpos);
 800a022:	463b      	mov	r3, r7
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	1d19      	adds	r1, r3, #4
 800a028:	f8b7 419c 	ldrh.w	r4, [r7, #412]	; 0x19c
 800a02c:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 800a030:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800a03a:	4622      	mov	r2, r4
 800a03c:	f00b fd42 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
		lpos = pos+1;
 800a040:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 800a044:	3301      	adds	r3, #1
 800a046:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
		tokens.push_back(token);
 800a04a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a04e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a052:	4611      	mov	r1, r2
 800a054:	4618      	mov	r0, r3
 800a056:	f000 fbe4 	bl	800a822 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
		std::string token = buffer.substr(lpos,pos-lpos);
 800a05a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a05e:	4618      	mov	r0, r3
 800a060:	f00b fbdb 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(pos < buffer.length()-1){
 800a064:	e7c0      	b.n	8009fe8 <_ZN9CmdParser5parseEv+0xe8>
	}

	for(std::string word : tokens){
 800a066:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a06a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800a06e:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 800a072:	f000 fbfc 	bl	800a86e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800a076:	4602      	mov	r2, r0
 800a078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 800a082:	f000 fc04 	bl	800a88e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800a086:	4602      	mov	r2, r0
 800a088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a096:	4611      	mov	r1, r2
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fc09 	bl	800a8b0 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 829f 	beq.w	800a5e4 <_ZN9CmdParser5parseEv+0x6e4>
 800a0a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fc28 	bl	800a900 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f00b fc99 	bl	80159f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>

		ParsedCommand cmd;
 800a0be:	f107 0308 	add.w	r3, r7, #8
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7ff fef9 	bl	8009eba <_ZN13ParsedCommandC1Ev>

		if(word.back() == '?'){ // <cmd>?
 800a0c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f00b fbe7 	bl	80158a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b3f      	cmp	r3, #63	; 0x3f
 800a0d8:	bf0c      	ite	eq
 800a0da:	2301      	moveq	r3, #1
 800a0dc:	2300      	movne	r3, #0
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01f      	beq.n	800a124 <_ZN9CmdParser5parseEv+0x224>
			cmd.type = CMDtype::get;
 800a0e4:	f107 0308 	add.w	r3, r7, #8
 800a0e8:	2202      	movs	r2, #2
 800a0ea:	621a      	str	r2, [r3, #32]
			cmd.cmd = word.substr(0, word.length()-1);
 800a0ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f00b fbc6 	bl	8015882 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800a0fe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a102:	2200      	movs	r2, #0
 800a104:	f00b fcde 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a108:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a10c:	f107 0308 	add.w	r3, r7, #8
 800a110:	4611      	mov	r1, r2
 800a112:	4618      	mov	r0, r3
 800a114:	f00b fb8d 	bl	8015832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a118:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a11c:	4618      	mov	r0, r3
 800a11e:	f00b fb7c 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a122:	e248      	b.n	800a5b6 <_ZN9CmdParser5parseEv+0x6b6>

		}else if(word.back() == '!'){
 800a124:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a128:	4618      	mov	r0, r3
 800a12a:	f00b fbb9 	bl	80158a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800a12e:	4603      	mov	r3, r0
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	2b21      	cmp	r3, #33	; 0x21
 800a134:	bf0c      	ite	eq
 800a136:	2301      	moveq	r3, #1
 800a138:	2300      	movne	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01f      	beq.n	800a180 <_ZN9CmdParser5parseEv+0x280>
			cmd.cmd = word.substr(0, word.length()-1);
 800a140:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a144:	4618      	mov	r0, r3
 800a146:	f00b fb9c 	bl	8015882 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800a14a:	4603      	mov	r3, r0
 800a14c:	3b01      	subs	r3, #1
 800a14e:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800a152:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a156:	2200      	movs	r2, #0
 800a158:	f00b fcb4 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a15c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a160:	f107 0308 	add.w	r3, r7, #8
 800a164:	4611      	mov	r1, r2
 800a166:	4618      	mov	r0, r3
 800a168:	f00b fb63 	bl	8015832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a16c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a170:	4618      	mov	r0, r3
 800a172:	f00b fb52 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			cmd.type = CMDtype::help;
 800a176:	f107 0308 	add.w	r3, r7, #8
 800a17a:	2205      	movs	r2, #5
 800a17c:	621a      	str	r2, [r3, #32]
 800a17e:	e21a      	b.n	800a5b6 <_ZN9CmdParser5parseEv+0x6b6>

		}else if(word.back() == '='){
 800a180:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a184:	4618      	mov	r0, r3
 800a186:	f00b fb8b 	bl	80158a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800a18a:	4603      	mov	r3, r0
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b3d      	cmp	r3, #61	; 0x3d
 800a190:	bf0c      	ite	eq
 800a192:	2301      	moveq	r3, #1
 800a194:	2300      	movne	r3, #0
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00c      	beq.n	800a1b6 <_ZN9CmdParser5parseEv+0x2b6>
			cmd.cmd = word;
 800a19c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a1a0:	f107 0308 	add.w	r3, r7, #8
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f00b fb3d 	bl	8015826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
			cmd.type = CMDtype::err;
 800a1ac:	f107 0308 	add.w	r3, r7, #8
 800a1b0:	2206      	movs	r2, #6
 800a1b2:	621a      	str	r2, [r3, #32]
 800a1b4:	e1ff      	b.n	800a5b6 <_ZN9CmdParser5parseEv+0x6b6>

		}else{ // More complex
			uint32_t peq = word.find('=', 0); // set
 800a1b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	213d      	movs	r1, #61	; 0x3d
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f00b fbec 	bl	801599c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a1c4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
			//uint32_t pex = word.find('!', 0); // dual val
			uint32_t pqm = word.find('?', 0); // read with var
 800a1c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	213f      	movs	r1, #63	; 0x3f
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f00b fbe3 	bl	801599c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800a1d6:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
			if(pqm!=std::string::npos && pqm < peq && peq != std::string::npos){ // <cmd>?<int>=<int>
 800a1da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e2:	d066      	beq.n	800a2b2 <_ZN9CmdParser5parseEv+0x3b2>
 800a1e4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a1e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d260      	bcs.n	800a2b2 <_ZN9CmdParser5parseEv+0x3b2>
 800a1f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f8:	d05b      	beq.n	800a2b2 <_ZN9CmdParser5parseEv+0x3b2>
				// Dual
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, peq-pqm));
 800a1fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a1fe:	1c5c      	adds	r4, r3, #1
 800a200:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800a204:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800a20e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a212:	4622      	mov	r2, r4
 800a214:	f00b fc56 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a218:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a21c:	220a      	movs	r2, #10
 800a21e:	2100      	movs	r1, #0
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff fd37 	bl	8009c94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800a226:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 800a22a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a22e:	4618      	mov	r0, r3
 800a230:	f00b faf3 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				int32_t val2 = (int32_t)std::stol(word.substr(peq+1, word.npos));
 800a234:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800a23e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a242:	f04f 33ff 	mov.w	r3, #4294967295
 800a246:	f00b fc3d 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a24a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a24e:	220a      	movs	r2, #10
 800a250:	2100      	movs	r1, #0
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fd1e 	bl	8009c94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800a258:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800a25c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a260:	4618      	mov	r0, r3
 800a262:	f00b fada 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.cmd = word.substr(0, pqm);
 800a266:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800a26a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a26e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a272:	2200      	movs	r2, #0
 800a274:	f00b fc26 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a278:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800a27c:	f107 0308 	add.w	r3, r7, #8
 800a280:	4611      	mov	r1, r2
 800a282:	4618      	mov	r0, r3
 800a284:	f00b fad5 	bl	8015832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a288:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800a28c:	4618      	mov	r0, r3
 800a28e:	f00b fac4 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.type = CMDtype::setat;
 800a292:	f107 0308 	add.w	r3, r7, #8
 800a296:	2201      	movs	r2, #1
 800a298:	621a      	str	r2, [r3, #32]
				cmd.val = val2;
 800a29a:	f107 0308 	add.w	r3, r7, #8
 800a29e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800a2a2:	61da      	str	r2, [r3, #28]
				cmd.adr = val;
 800a2a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	f107 0308 	add.w	r3, r7, #8
 800a2ae:	831a      	strh	r2, [r3, #24]
 800a2b0:	e181      	b.n	800a5b6 <_ZN9CmdParser5parseEv+0x6b6>

			}else if(pqm != std::string::npos && (std::isdigit(word[pqm+1]) || (std::isdigit(word[pqm+2]) && (word[pqm+1] == '-' || word[pqm+1] == '+')))){ // <cmd>?<int>
 800a2b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ba:	d041      	beq.n	800a340 <_ZN9CmdParser5parseEv+0x440>
 800a2bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f00b fae6 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	3b30      	subs	r3, #48	; 0x30
 800a2d4:	2b09      	cmp	r3, #9
 800a2d6:	bf94      	ite	ls
 800a2d8:	2301      	movls	r3, #1
 800a2da:	2300      	movhi	r3, #0
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d12c      	bne.n	800a33c <_ZN9CmdParser5parseEv+0x43c>
 800a2e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a2e6:	1c9a      	adds	r2, r3, #2
 800a2e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f00b fad3 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	3b30      	subs	r3, #48	; 0x30
 800a2fa:	2b09      	cmp	r3, #9
 800a2fc:	bf94      	ite	ls
 800a2fe:	2301      	movls	r3, #1
 800a300:	2300      	movhi	r3, #0
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01b      	beq.n	800a340 <_ZN9CmdParser5parseEv+0x440>
 800a308:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a30c:	1c5a      	adds	r2, r3, #1
 800a30e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f00b fac0 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a31a:	4603      	mov	r3, r0
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b2d      	cmp	r3, #45	; 0x2d
 800a320:	d00c      	beq.n	800a33c <_ZN9CmdParser5parseEv+0x43c>
 800a322:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f00b fab3 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a334:	4603      	mov	r3, r0
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b2b      	cmp	r3, #43	; 0x2b
 800a33a:	d101      	bne.n	800a340 <_ZN9CmdParser5parseEv+0x440>
 800a33c:	2301      	movs	r3, #1
 800a33e:	e000      	b.n	800a342 <_ZN9CmdParser5parseEv+0x442>
 800a340:	2300      	movs	r3, #0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d03e      	beq.n	800a3c4 <_ZN9CmdParser5parseEv+0x4c4>
				int32_t val = (int32_t)std::stol(word.substr(pqm+1, word.npos));
 800a346:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 800a350:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a354:	f04f 33ff 	mov.w	r3, #4294967295
 800a358:	f00b fbb4 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a35c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a360:	220a      	movs	r2, #10
 800a362:	2100      	movs	r1, #0
 800a364:	4618      	mov	r0, r3
 800a366:	f7ff fc95 	bl	8009c94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800a36a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 800a36e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a372:	4618      	mov	r0, r3
 800a374:	f00b fa51 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 800a378:	f107 0308 	add.w	r3, r7, #8
 800a37c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800a380:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::getat;
 800a382:	f107 0308 	add.w	r3, r7, #8
 800a386:	2203      	movs	r2, #3
 800a388:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, pqm);
 800a38a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800a38e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a392:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a396:	2200      	movs	r2, #0
 800a398:	f00b fb94 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a39c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800a3a0:	f107 0308 	add.w	r3, r7, #8
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f00b fa43 	bl	8015832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a3ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f00b fa32 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.adr = val;
 800a3b6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	f107 0308 	add.w	r3, r7, #8
 800a3c0:	831a      	strh	r2, [r3, #24]
 800a3c2:	e0f8      	b.n	800a5b6 <_ZN9CmdParser5parseEv+0x6b6>
			}else if(peq != std::string::npos && (std::isdigit(word[peq+1]) || (std::isdigit(word[peq+2]) && (word[peq+1] == '-' || word[peq+1] == '+')))){ // <cmd>=<int>
 800a3c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3cc:	d041      	beq.n	800a452 <_ZN9CmdParser5parseEv+0x552>
 800a3ce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f00b fa5d 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	3b30      	subs	r3, #48	; 0x30
 800a3e6:	2b09      	cmp	r3, #9
 800a3e8:	bf94      	ite	ls
 800a3ea:	2301      	movls	r3, #1
 800a3ec:	2300      	movhi	r3, #0
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d12c      	bne.n	800a44e <_ZN9CmdParser5parseEv+0x54e>
 800a3f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a3f8:	1c9a      	adds	r2, r3, #2
 800a3fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3fe:	4611      	mov	r1, r2
 800a400:	4618      	mov	r0, r3
 800a402:	f00b fa4a 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a406:	4603      	mov	r3, r0
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	3b30      	subs	r3, #48	; 0x30
 800a40c:	2b09      	cmp	r3, #9
 800a40e:	bf94      	ite	ls
 800a410:	2301      	movls	r3, #1
 800a412:	2300      	movhi	r3, #0
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d01b      	beq.n	800a452 <_ZN9CmdParser5parseEv+0x552>
 800a41a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a424:	4611      	mov	r1, r2
 800a426:	4618      	mov	r0, r3
 800a428:	f00b fa37 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a42c:	4603      	mov	r3, r0
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	2b2d      	cmp	r3, #45	; 0x2d
 800a432:	d00c      	beq.n	800a44e <_ZN9CmdParser5parseEv+0x54e>
 800a434:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f00b fa2a 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a446:	4603      	mov	r3, r0
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b2b      	cmp	r3, #43	; 0x2b
 800a44c:	d101      	bne.n	800a452 <_ZN9CmdParser5parseEv+0x552>
 800a44e:	2301      	movs	r3, #1
 800a450:	e000      	b.n	800a454 <_ZN9CmdParser5parseEv+0x554>
 800a452:	2300      	movs	r3, #0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d038      	beq.n	800a4ca <_ZN9CmdParser5parseEv+0x5ca>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
 800a458:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800a462:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a466:	f04f 33ff 	mov.w	r3, #4294967295
 800a46a:	f00b fb2b 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a46e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a472:	220a      	movs	r2, #10
 800a474:	2100      	movs	r1, #0
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff fc0c 	bl	8009c94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800a47c:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
 800a480:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a484:	4618      	mov	r0, r3
 800a486:	f00b f9c8 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 800a48a:	f107 0308 	add.w	r3, r7, #8
 800a48e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800a492:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::set;
 800a494:	f107 0308 	add.w	r3, r7, #8
 800a498:	2200      	movs	r2, #0
 800a49a:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, peq);
 800a49c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a4a0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a4a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f00b fb0b 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a4ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4b2:	f107 0308 	add.w	r3, r7, #8
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f00b f9ba 	bl	8015832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a4be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f00b f9a9 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a4c8:	e075      	b.n	800a5b6 <_ZN9CmdParser5parseEv+0x6b6>
			}else if(peq != std::string::npos && (word[peq+1] == 'R' || word[peq+1] == 'G' || word[peq+1] == 'B')){ // <cmd>=RGB
 800a4ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d2:	d028      	beq.n	800a526 <_ZN9CmdParser5parseEv+0x626>
 800a4d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4de:	4611      	mov	r1, r2
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f00b f9da 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b52      	cmp	r3, #82	; 0x52
 800a4ec:	d019      	beq.n	800a522 <_ZN9CmdParser5parseEv+0x622>
 800a4ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f00b f9cd 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a500:	4603      	mov	r3, r0
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2b47      	cmp	r3, #71	; 0x47
 800a506:	d00c      	beq.n	800a522 <_ZN9CmdParser5parseEv+0x622>
 800a508:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a512:	4611      	mov	r1, r2
 800a514:	4618      	mov	r0, r3
 800a516:	f00b f9c0 	bl	801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800a51a:	4603      	mov	r3, r0
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	2b42      	cmp	r3, #66	; 0x42
 800a520:	d101      	bne.n	800a526 <_ZN9CmdParser5parseEv+0x626>
 800a522:	2301      	movs	r3, #1
 800a524:	e000      	b.n	800a528 <_ZN9CmdParser5parseEv+0x628>
 800a526:	2300      	movs	r3, #0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d038      	beq.n	800a59e <_ZN9CmdParser5parseEv+0x69e>
				int32_t val = (int32_t)std::stol(word.substr(peq+1, word.npos));
 800a52c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800a536:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a53a:	f04f 33ff 	mov.w	r3, #4294967295
 800a53e:	f00b fac1 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a542:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a546:	220a      	movs	r2, #10
 800a548:	2100      	movs	r1, #0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7ff fba2 	bl	8009c94 <_ZNSt7__cxx114stolERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800a550:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 800a554:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a558:	4618      	mov	r0, r3
 800a55a:	f00b f95e 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				cmd.val = val;
 800a55e:	f107 0308 	add.w	r3, r7, #8
 800a562:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800a566:	61da      	str	r2, [r3, #28]
				cmd.type = CMDtype::set;
 800a568:	f107 0308 	add.w	r3, r7, #8
 800a56c:	2200      	movs	r2, #0
 800a56e:	621a      	str	r2, [r3, #32]
				cmd.cmd = word.substr(0, peq);
 800a570:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 800a574:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a578:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a57c:	2200      	movs	r2, #0
 800a57e:	f00b faa1 	bl	8015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800a582:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800a586:	f107 0308 	add.w	r3, r7, #8
 800a58a:	4611      	mov	r1, r2
 800a58c:	4618      	mov	r0, r3
 800a58e:	f00b f950 	bl	8015832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a592:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a596:	4618      	mov	r0, r3
 800a598:	f00b f93f 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a59c:	e00b      	b.n	800a5b6 <_ZN9CmdParser5parseEv+0x6b6>
			}else{
				cmd.cmd = word;
 800a59e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a5a2:	f107 0308 	add.w	r3, r7, #8
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f00b f93c 	bl	8015826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
				cmd.type = CMDtype::get;
 800a5ae:	f107 0308 	add.w	r3, r7, #8
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	621a      	str	r2, [r3, #32]
			}

		}

		commands.push_back(cmd);
 800a5b6:	f107 0208 	add.w	r2, r7, #8
 800a5ba:	1d3b      	adds	r3, r7, #4
 800a5bc:	4611      	mov	r1, r2
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	f000 f909 	bl	800a7d6 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>
		ParsedCommand cmd;
 800a5c4:	f107 0308 	add.w	r3, r7, #8
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff fc8c 	bl	8009ee6 <_ZN13ParsedCommandD1Ev>
	for(std::string word : tokens){
 800a5ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f00b f921 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a5d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 f97f 	bl	800a8e0 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 800a5e2:	e554      	b.n	800a08e <_ZN9CmdParser5parseEv+0x18e>
	}
	buffer.clear();
 800a5e4:	463b      	mov	r3, r7
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f00b f94b 	bl	8015886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	return commands;
 800a5f0:	bf00      	nop
	std::vector<std::string> tokens;
 800a5f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 f8d2 	bl	800a7a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800a5fc:	1d3b      	adds	r3, r7, #4
 800a5fe:	1d3a      	adds	r2, r7, #4
 800a600:	6812      	ldr	r2, [r2, #0]
 800a602:	601a      	str	r2, [r3, #0]
}
 800a604:	1d3b      	adds	r3, r7, #4
 800a606:	6818      	ldr	r0, [r3, #0]
 800a608:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd90      	pop	{r4, r7, pc}

0800a610 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	f00c f882 	bl	8016720 <__errno>
 800a61c:	4603      	mov	r3, r0
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	f00c f87c 	bl	8016720 <__errno>
 800a628:	4603      	mov	r3, r0
 800a62a:	2200      	movs	r2, #0
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	f00c f86e 	bl	8016720 <__errno>
 800a644:	4603      	mov	r3, r0
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bf0c      	ite	eq
 800a64c:	2301      	moveq	r3, #1
 800a64e:	2300      	movne	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 800a656:	f00c f863 	bl	8016720 <__errno>
 800a65a:	4602      	mov	r2, r0
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4618      	mov	r0, r3
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE>:
	int _M_errno;
      } const __save_errno;

      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	7039      	strb	r1, [r7, #0]
 800a676:	2300      	movs	r3, #0
 800a678:	4618      	mov	r0, r3
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bc80      	pop	{r7}
 800a680:	4770      	bx	lr

0800a682 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800a682:	b590      	push	{r4, r7, lr}
 800a684:	b08b      	sub	sp, #44	; 0x2c
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	607a      	str	r2, [r7, #4]
 800a68e:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800a690:	f107 0314 	add.w	r3, r7, #20
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff ffbb 	bl	800a610 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800a69a:	f107 0118 	add.w	r1, r7, #24
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	4798      	blx	r3
 800a6a6:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d102      	bne.n	800a6b6 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 800a6b0:	68b8      	ldr	r0, [r7, #8]
 800a6b2:	f00a ff02 	bl	80154ba <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800a6b6:	f00c f833 	bl	8016720 <__errno>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800a6be:	2b22      	cmp	r3, #34	; 0x22
 800a6c0:	d006      	beq.n	800a6d0 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6c6:	f7ff ffd1 	bl	800a66c <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb0EE>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 800a6d4:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 800a6da:	68b8      	ldr	r0, [r7, #8]
 800a6dc:	f00a fef3 	bl	80154c6 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	623b      	str	r3, [r7, #32]

      if (__idx)
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d005      	beq.n	800a6f6 <_ZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	601a      	str	r2, [r3, #0]

      return __ret;
 800a6f6:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 800a6f8:	f107 0314 	add.w	r3, r7, #20
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff ff9b 	bl	800a638 <_ZZN9__gnu_cxx6__stoaIllcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800a702:	4623      	mov	r3, r4
    }
 800a704:	4618      	mov	r0, r3
 800a706:	372c      	adds	r7, #44	; 0x2c
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd90      	pop	{r4, r7, pc}

0800a70c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f8fe 	bl	800a916 <_ZNSaI13ParsedCommandEC1Ev>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 f906 	bl	800a92e <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f938 	bl	800a9aa <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 f940 	bl	800a9c2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f947 	bl	800a9e8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	10db      	asrs	r3, r3, #3
 800a77c:	4a07      	ldr	r2, [pc, #28]	; (800a79c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 800a77e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800a782:	461a      	mov	r2, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f939 	bl	800a9fc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff fb6e 	bl	8009e6e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	aaaaaaab 	.word	0xaaaaaaab

0800a7a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a7a0:	b5b0      	push	{r4, r5, r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681c      	ldr	r4, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f935 	bl	800aa22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800a7b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 f939 	bl	800aa36 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      }
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff ffcc 	bl	800a764 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bdb0      	pop	{r4, r5, r7, pc}

0800a7d6 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d00d      	beq.n	800a808 <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	f000 f92c 	bl	800aa52 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	605a      	str	r2, [r3, #4]
      }
 800a806:	e008      	b.n	800a81a <_ZNSt6vectorI13ParsedCommandSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f935 	bl	800aa78 <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>
 800a80e:	4603      	mov	r3, r0
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f955 	bl	800aac4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	429a      	cmp	r2, r3
 800a836:	d00d      	beq.n	800a854 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	4619      	mov	r1, r3
 800a842:	f000 fa07 	bl	800ac54 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f103 0218 	add.w	r2, r3, #24
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	605a      	str	r2, [r3, #4]
      }
 800a852:	e008      	b.n	800a866 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x44>
	  _M_realloc_insert(end(), __x);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f81a 	bl	800a88e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800a85a:	4603      	mov	r3, r0
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fa1f 	bl	800aca4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	f107 030c 	add.w	r3, r7, #12
 800a87c:	4611      	mov	r1, r2
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 fad8 	bl	800ae34 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a88e:	b580      	push	{r7, lr}
 800a890:	b084      	sub	sp, #16
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	1d1a      	adds	r2, r3, #4
 800a89a:	f107 030c 	add.w	r3, r7, #12
 800a89e:	4611      	mov	r1, r2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fac7 	bl	800ae34 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a8b0:	b590      	push	{r4, r7, lr}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fac9 	bl	800ae52 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	681c      	ldr	r4, [r3, #0]
 800a8c4:	6838      	ldr	r0, [r7, #0]
 800a8c6:	f000 fac4 	bl	800ae52 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	429c      	cmp	r4, r3
 800a8d0:	bf14      	ite	ne
 800a8d2:	2301      	movne	r3, #1
 800a8d4:	2300      	moveq	r3, #0
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	4618      	mov	r0, r3
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd90      	pop	{r4, r7, pc}

0800a8e0 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f103 0218 	add.w	r2, r3, #24
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	601a      	str	r2, [r3, #0]
	return *this;
 800a8f4:	687b      	ldr	r3, [r7, #4]
      }
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr

0800a900 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	bc80      	pop	{r7}
 800a914:	4770      	bx	lr

0800a916 <_ZNSaI13ParsedCommandEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800a916:	b580      	push	{r7, lr}
 800a918:	b082      	sub	sp, #8
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 faa1 	bl	800ae66 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandEC1Ev>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4618      	mov	r0, r3
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800a92e:	b480      	push	{r7}
 800a930:	b083      	sub	sp, #12
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	605a      	str	r2, [r3, #4]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	609a      	str	r2, [r3, #8]
	{ }
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	bc80      	pop	{r7}
 800a952:	4770      	bx	lr

0800a954 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
	if (__p)
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	68b9      	ldr	r1, [r7, #8]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f000 fa84 	bl	800ae7a <_ZNSt16allocator_traitsISaI13ParsedCommandEE10deallocateERS1_PS0_j>
      }
 800a972:	bf00      	nop
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	bc80      	pop	{r7}
 800a98c:	4770      	bx	lr

0800a98e <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a98e:	b580      	push	{r7, lr}
 800a990:	b084      	sub	sp, #16
 800a992:	af00      	add	r7, sp, #0
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 fa7b 	bl	800ae98 <_ZSt8_DestroyIP13ParsedCommandEvT_S2_>
    }
 800a9a2:	bf00      	nop
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fa7d 	bl	800aeb2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	605a      	str	r2, [r3, #4]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	609a      	str	r2, [r3, #8]
	{ }
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bc80      	pop	{r7}
 800a9e6:	4770      	bx	lr

0800a9e8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bc80      	pop	{r7}
 800a9fa:	4770      	bx	lr

0800a9fc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
	if (__p)
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d005      	beq.n	800aa1a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	68b9      	ldr	r1, [r7, #8]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fa56 	bl	800aec6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800aa22:	b480      	push	{r7}
 800aa24:	b083      	sub	sp, #12
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr

0800aa36 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b084      	sub	sp, #16
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	60f8      	str	r0, [r7, #12]
 800aa3e:	60b9      	str	r1, [r7, #8]
 800aa40:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fa4d 	bl	800aee4 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800aa4a:	bf00      	nop
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fa4d 	bl	800aefe <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa64:	4603      	mov	r3, r0
 800aa66:	461a      	mov	r2, r3
 800aa68:	68b9      	ldr	r1, [r7, #8]
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 fa6d 	bl	800af4a <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 800aa70:	bf00      	nop
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	1d1a      	adds	r2, r3, #4
 800aa84:	f107 030c 	add.w	r3, r7, #12
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fa75 	bl	800af7a <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <_ZNSt6vectorI13ParsedCommandSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b082      	sub	sp, #8
 800aa9e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 f805 	bl	800aab0 <_ZNSt6vectorI13ParsedCommandSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800aaa6:	4603      	mov	r3, r0
      }
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <_ZNSt6vectorI13ParsedCommandSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800aab8:	2301      	movs	r3, #1
      }
 800aaba:	4618      	mov	r0, r3
 800aabc:	370c      	adds	r7, #12
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bc80      	pop	{r7}
 800aac2:	4770      	bx	lr

0800aac4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800aac4:	b5b0      	push	{r4, r5, r7, lr}
 800aac6:	b08c      	sub	sp, #48	; 0x30
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800aad0:	4a5e      	ldr	r2, [pc, #376]	; (800ac4c <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 800aad2:	2101      	movs	r1, #1
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 fa5f 	bl	800af98 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc>
 800aada:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f000 fa9c 	bl	800b026 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	f107 0214 	add.w	r2, r7, #20
 800aaf6:	f107 0308 	add.w	r3, r7, #8
 800aafa:	4611      	mov	r1, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 faa3 	bl	800b048 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800ab02:	4603      	mov	r3, r0
 800ab04:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fab6 	bl	800b07c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj>
 800ab10:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800ab16:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	00db      	lsls	r3, r3, #3
 800ab1e:	4413      	add	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	189d      	adds	r5, r3, r2
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f9e8 	bl	800aefe <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	461a      	mov	r2, r3
 800ab32:	4629      	mov	r1, r5
 800ab34:	4620      	mov	r0, r4
 800ab36:	f7ff ff8c 	bl	800aa52 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800ab3e:	f7ff ffac 	bl	800aa9a <_ZNSt6vectorI13ParsedCommandSaIS0_EE15_S_use_relocateEv>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d027      	beq.n	800ab98 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ab48:	f107 0308 	add.w	r3, r7, #8
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 fabd 	bl	800b0cc <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800ab52:	4603      	mov	r3, r0
 800ab54:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7ff ff0e 	bl	800a97a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800ab5e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ab60:	69ba      	ldr	r2, [r7, #24]
 800ab62:	4621      	mov	r1, r4
 800ab64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab66:	f000 fa9d 	bl	800b0a4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800ab6a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	3324      	adds	r3, #36	; 0x24
 800ab70:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ab72:	f107 0308 	add.w	r3, r7, #8
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 faa8 	bl	800b0cc <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7ff fef9 	bl	800a97a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800ab88:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ab8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab8c:	6a39      	ldr	r1, [r7, #32]
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 fa88 	bl	800b0a4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800ab94:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ab96:	e026      	b.n	800abe6 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
		(__old_start, __position.base(),
 800ab98:	f107 0308 	add.w	r3, r7, #8
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fa95 	bl	800b0cc <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800aba2:	4603      	mov	r3, r0
 800aba4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7ff fee6 	bl	800a97a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800abae:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	4621      	mov	r1, r4
 800abb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abb6:	f000 fa93 	bl	800b0e0 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 800abba:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	3324      	adds	r3, #36	; 0x24
 800abc0:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800abc2:	f107 0308 	add.w	r3, r7, #8
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 fa80 	bl	800b0cc <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800abcc:	4603      	mov	r3, r0
 800abce:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff fed1 	bl	800a97a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800abd8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800abda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abdc:	6a39      	ldr	r1, [r7, #32]
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 fa7e 	bl	800b0e0 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 800abe4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800abe6:	f7ff ff58 	bl	800aa9a <_ZNSt6vectorI13ParsedCommandSaIS0_EE15_S_use_relocateEv>
 800abea:	4603      	mov	r3, r0
 800abec:	f083 0301 	eor.w	r3, r3, #1
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d009      	beq.n	800ac0a <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff febe 	bl	800a97a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800abfe:	4603      	mov	r3, r0
 800ac00:	461a      	mov	r2, r3
 800ac02:	6a39      	ldr	r1, [r7, #32]
 800ac04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac06:	f7ff fec2 	bl	800a98e <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 800ac0a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	689a      	ldr	r2, [r3, #8]
 800ac10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	109b      	asrs	r3, r3, #2
 800ac16:	4a0e      	ldr	r2, [pc, #56]	; (800ac50 <_ZNSt6vectorI13ParsedCommandSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 800ac18:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac20:	f7ff fe98 	bl	800a954 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	69ba      	ldr	r2, [r7, #24]
 800ac28:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac2e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ac30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac32:	4613      	mov	r3, r2
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	4413      	add	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	441a      	add	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	609a      	str	r2, [r3, #8]
    }
 800ac44:	bf00      	nop
 800ac46:	3730      	adds	r7, #48	; 0x30
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac4c:	080172cc 	.word	0x080172cc
 800ac50:	38e38e39 	.word	0x38e38e39

0800ac54 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fa63 	bl	800b12c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800ac66:	4603      	mov	r3, r0
 800ac68:	461a      	mov	r2, r3
 800ac6a:	68b9      	ldr	r1, [r7, #8]
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f000 fa67 	bl	800b140 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 800ac72:	bf00      	nop
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 f805 	bl	800ac90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800ac86:	4603      	mov	r3, r0
      }
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800ac98:	2301      	movs	r3, #1
      }
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bc80      	pop	{r7}
 800aca2:	4770      	bx	lr

0800aca4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800aca4:	b5b0      	push	{r4, r5, r7, lr}
 800aca6:	b08c      	sub	sp, #48	; 0x30
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800acb0:	4a5e      	ldr	r2, [pc, #376]	; (800ae2c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 800acb2:	2101      	movs	r1, #1
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 fa5b 	bl	800b170 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 800acba:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7ff fdd0 	bl	800a86e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800acce:	4603      	mov	r3, r0
 800acd0:	617b      	str	r3, [r7, #20]
 800acd2:	f107 0214 	add.w	r2, r7, #20
 800acd6:	f107 0308 	add.w	r3, r7, #8
 800acda:	4611      	mov	r1, r2
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fa8f 	bl	800b200 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800ace2:	4603      	mov	r3, r0
 800ace4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acea:	4618      	mov	r0, r3
 800acec:	f000 faa2 	bl	800b234 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800acf0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800acf6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800acf8:	69fa      	ldr	r2, [r7, #28]
 800acfa:	4613      	mov	r3, r2
 800acfc:	005b      	lsls	r3, r3, #1
 800acfe:	4413      	add	r3, r2
 800ad00:	00db      	lsls	r3, r3, #3
 800ad02:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	189d      	adds	r5, r3, r2
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fa0f 	bl	800b12c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	461a      	mov	r2, r3
 800ad12:	4629      	mov	r1, r5
 800ad14:	4620      	mov	r0, r4
 800ad16:	f7ff ff9d 	bl	800ac54 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	  __new_finish = pointer();
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800ad1e:	f7ff ffac 	bl	800ac7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d027      	beq.n	800ad78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xd4>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ad28:	f107 0308 	add.w	r3, r7, #8
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 f890 	bl	800ae52 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800ad32:	4603      	mov	r3, r0
 800ad34:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7ff fe72 	bl	800aa22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800ad3e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	4621      	mov	r1, r4
 800ad44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad46:	f000 fa89 	bl	800b25c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 800ad4a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	3318      	adds	r3, #24
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ad52:	f107 0308 	add.w	r3, r7, #8
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 f87b 	bl	800ae52 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff fe5d 	bl	800aa22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800ad68:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ad6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad6c:	6a39      	ldr	r1, [r7, #32]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fa74 	bl	800b25c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 800ad74:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ad76:	e026      	b.n	800adc6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x122>
		(__old_start, __position.base(),
 800ad78:	f107 0308 	add.w	r3, r7, #8
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 f868 	bl	800ae52 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800ad82:	4603      	mov	r3, r0
 800ad84:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7ff fe4a 	bl	800aa22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800ad8e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	4621      	mov	r1, r4
 800ad94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad96:	f000 fa75 	bl	800b284 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800ad9a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	3318      	adds	r3, #24
 800ada0:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 f853 	bl	800ae52 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800adac:	4603      	mov	r3, r0
 800adae:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff fe35 	bl	800aa22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800adb8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800adba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adbc:	6a39      	ldr	r1, [r7, #32]
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 fa60 	bl	800b284 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800adc4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800adc6:	f7ff ff58 	bl	800ac7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 800adca:	4603      	mov	r3, r0
 800adcc:	f083 0301 	eor.w	r3, r3, #1
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b00      	cmp	r3, #0
 800add4:	d009      	beq.n	800adea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x146>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4618      	mov	r0, r3
 800adda:	f7ff fe22 	bl	800aa22 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800adde:	4603      	mov	r3, r0
 800ade0:	461a      	mov	r2, r3
 800ade2:	6a39      	ldr	r1, [r7, #32]
 800ade4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ade6:	f7ff fe26 	bl	800aa36 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(__old_start,
 800adea:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	10db      	asrs	r3, r3, #3
 800adf6:	4a0e      	ldr	r2, [pc, #56]	; (800ae30 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x18c>)
 800adf8:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800adfc:	461a      	mov	r2, r3
 800adfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae00:	f7ff fdfc 	bl	800a9fc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	69ba      	ldr	r2, [r7, #24]
 800ae08:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae0e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ae10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae12:	4613      	mov	r3, r2
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	4413      	add	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	441a      	add	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	609a      	str	r2, [r3, #8]
    }
 800ae24:	bf00      	nop
 800ae26:	3730      	adds	r7, #48	; 0x30
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bdb0      	pop	{r4, r5, r7, pc}
 800ae2c:	080172cc 	.word	0x080172cc
 800ae30:	aaaaaaab 	.word	0xaaaaaaab

0800ae34 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	601a      	str	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bc80      	pop	{r7}
 800ae50:	4770      	bx	lr

0800ae52 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bc80      	pop	{r7}
 800ae64:	4770      	bx	lr

0800ae66 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bc80      	pop	{r7}
 800ae78:	4770      	bx	lr

0800ae7a <_ZNSt16allocator_traitsISaI13ParsedCommandEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	60f8      	str	r0, [r7, #12]
 800ae82:	60b9      	str	r1, [r7, #8]
 800ae84:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	68b9      	ldr	r1, [r7, #8]
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f000 fa20 	bl	800b2d0 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE10deallocateEPS1_j>
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <_ZSt8_DestroyIP13ParsedCommandEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fa20 	bl	800b2ea <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_>
    }
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
 800aeb2:	b480      	push	{r7}
 800aeb4:	b083      	sub	sp, #12
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4618      	mov	r0, r3
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bc80      	pop	{r7}
 800aec4:	4770      	bx	lr

0800aec6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	68b9      	ldr	r1, [r7, #8]
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f000 fa1f 	bl	800b31a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800aedc:	bf00      	nop
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fa1f 	bl	800b334 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bc80      	pop	{r7}
 800af10:	4770      	bx	lr

0800af12 <_ZN13ParsedCommandC1ERKS_>:
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	4611      	mov	r1, r2
 800af22:	4618      	mov	r0, r3
 800af24:	f00a fd64 	bl	80159f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	8b1a      	ldrh	r2, [r3, #24]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	831a      	strh	r2, [r3, #24]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	69da      	ldr	r2, [r3, #28]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	61da      	str	r2, [r3, #28]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	6a1a      	ldr	r2, [r3, #32]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	621a      	str	r2, [r3, #32]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800af4a:	b590      	push	{r4, r7, lr}
 800af4c:	b085      	sub	sp, #20
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff ffd1 	bl	800aefe <_ZSt7forwardIRK13ParsedCommandEOT_RNSt16remove_referenceIS3_E4typeE>
 800af5c:	4604      	mov	r4, r0
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	4619      	mov	r1, r3
 800af62:	2024      	movs	r0, #36	; 0x24
 800af64:	f7fe f827 	bl	8008fb6 <_ZnwjPv>
 800af68:	4603      	mov	r3, r0
 800af6a:	4621      	mov	r1, r4
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff ffd0 	bl	800af12 <_ZN13ParsedCommandC1ERKS_>
 800af72:	bf00      	nop
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	bd90      	pop	{r4, r7, pc}

0800af7a <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800af7a:	b480      	push	{r7}
 800af7c:	b083      	sub	sp, #12
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4618      	mov	r0, r3
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	bc80      	pop	{r7}
 800af96:	4770      	bx	lr

0800af98 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800af98:	b590      	push	{r4, r7, lr}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f9dd 	bl	800b364 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 800afaa:	4604      	mov	r4, r0
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 f9eb 	bl	800b388 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 800afb2:	4603      	mov	r3, r0
 800afb4:	1ae2      	subs	r2, r4, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	429a      	cmp	r2, r3
 800afba:	bf34      	ite	cc
 800afbc:	2301      	movcc	r3, #1
 800afbe:	2300      	movcs	r3, #0
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d002      	beq.n	800afcc <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f00a fa7a 	bl	80154c0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f000 f9db 	bl	800b388 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 800afd2:	4604      	mov	r4, r0
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 f9d7 	bl	800b388 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 800afda:	4603      	mov	r3, r0
 800afdc:	613b      	str	r3, [r7, #16]
 800afde:	f107 0208 	add.w	r2, r7, #8
 800afe2:	f107 0310 	add.w	r3, r7, #16
 800afe6:	4611      	mov	r1, r2
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fe fc2b 	bl	8009844 <_ZSt3maxIjERKT_S2_S2_>
 800afee:	4603      	mov	r3, r0
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4423      	add	r3, r4
 800aff4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 f9c6 	bl	800b388 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>
 800affc:	4602      	mov	r2, r0
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	4293      	cmp	r3, r2
 800b002:	d306      	bcc.n	800b012 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x7a>
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f000 f9ad 	bl	800b364 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 800b00a:	4602      	mov	r2, r0
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	4293      	cmp	r3, r2
 800b010:	d904      	bls.n	800b01c <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x84>
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 f9a6 	bl	800b364 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>
 800b018:	4603      	mov	r3, r0
 800b01a:	e000      	b.n	800b01e <_ZNKSt6vectorI13ParsedCommandSaIS0_EE12_M_check_lenEjPKc+0x86>
 800b01c:	697b      	ldr	r3, [r7, #20]
      }
 800b01e:	4618      	mov	r0, r3
 800b020:	371c      	adds	r7, #28
 800b022:	46bd      	mov	sp, r7
 800b024:	bd90      	pop	{r4, r7, pc}

0800b026 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b026:	b580      	push	{r7, lr}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	f107 030c 	add.w	r3, r7, #12
 800b034:	4611      	mov	r1, r2
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff ff9f 	bl	800af7a <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b048:	b590      	push	{r4, r7, lr}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f83a 	bl	800b0cc <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800b058:	4603      	mov	r3, r0
 800b05a:	681c      	ldr	r4, [r3, #0]
 800b05c:	6838      	ldr	r0, [r7, #0]
 800b05e:	f000 f835 	bl	800b0cc <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800b062:	4603      	mov	r3, r0
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	1ae3      	subs	r3, r4, r3
 800b068:	109b      	asrs	r3, r3, #2
 800b06a:	4a03      	ldr	r2, [pc, #12]	; (800b078 <_ZN9__gnu_cxxmiIP13ParsedCommandSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 800b06c:	fb02 f303 	mul.w	r3, r2, r3
 800b070:	4618      	mov	r0, r3
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	bd90      	pop	{r4, r7, pc}
 800b078:	38e38e39 	.word	0x38e38e39

0800b07c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d006      	beq.n	800b09a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj+0x1e>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	4618      	mov	r0, r3
 800b092:	f000 f98d 	bl	800b3b0 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8allocateERS1_j>
 800b096:	4603      	mov	r3, r0
 800b098:	e000      	b.n	800b09c <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE11_M_allocateEj+0x20>
 800b09a:	2300      	movs	r3, #0
      }
 800b09c:	4618      	mov	r0, r3
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <_ZNSt6vectorI13ParsedCommandSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800b0a4:	b590      	push	{r4, r7, lr}
 800b0a6:	b089      	sub	sp, #36	; 0x24
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800b0b2:	f88d 4000 	strb.w	r4, [sp]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f000 f986 	bl	800b3ce <_ZNSt6vectorI13ParsedCommandSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 800b0c2:	4603      	mov	r3, r0
      }
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	371c      	adds	r7, #28
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd90      	pop	{r4, r7, pc}

0800b0cc <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bc80      	pop	{r7}
 800b0de:	4770      	bx	lr

0800b0e0 <_ZSt34__uninitialized_move_if_noexcept_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800b0e0:	b590      	push	{r4, r7, lr}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 f97f 	bl	800b3f2 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	68b8      	ldr	r0, [r7, #8]
 800b0f8:	f000 f97b 	bl	800b3f2 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>
 800b0fc:	4601      	mov	r1, r0
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4620      	mov	r0, r4
 800b104:	f000 f984 	bl	800b410 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP13ParsedCommandES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800b108:	4603      	mov	r3, r0
    }
 800b10a:	4618      	mov	r0, r3
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd90      	pop	{r4, r7, pc}

0800b112 <_ZNSt16allocator_traitsISaI13ParsedCommandEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f987 	bl	800b432 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE7destroyIS1_EEvPT_>
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4618      	mov	r0, r3
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bc80      	pop	{r7}
 800b13e:	4770      	bx	lr

0800b140 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800b140:	b590      	push	{r4, r7, lr}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff ffed 	bl	800b12c <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800b152:	4604      	mov	r4, r0
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	4619      	mov	r1, r3
 800b158:	2018      	movs	r0, #24
 800b15a:	f7fd ff2c 	bl	8008fb6 <_ZnwjPv>
 800b15e:	4603      	mov	r3, r0
 800b160:	4621      	mov	r1, r4
 800b162:	4618      	mov	r0, r3
 800b164:	f00a fc44 	bl	80159f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b168:	bf00      	nop
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd90      	pop	{r4, r7, pc}

0800b170 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b170:	b590      	push	{r4, r7, lr}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 f964 	bl	800b44a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b182:	4604      	mov	r4, r0
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 f971 	bl	800b46c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b18a:	4603      	mov	r3, r0
 800b18c:	1ae2      	subs	r2, r4, r3
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	429a      	cmp	r2, r3
 800b192:	bf34      	ite	cc
 800b194:	2301      	movcc	r3, #1
 800b196:	2300      	movcs	r3, #0
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f00a f98e 	bl	80154c0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f000 f961 	bl	800b46c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 f95d 	bl	800b46c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	613b      	str	r3, [r7, #16]
 800b1b6:	f107 0208 	add.w	r2, r7, #8
 800b1ba:	f107 0310 	add.w	r3, r7, #16
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fe fb3f 	bl	8009844 <_ZSt3maxIjERKT_S2_S2_>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4423      	add	r3, r4
 800b1cc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 f94c 	bl	800b46c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d306      	bcc.n	800b1ea <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7a>
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f000 f934 	bl	800b44a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d904      	bls.n	800b1f4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x84>
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f000 f92d 	bl	800b44a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	e000      	b.n	800b1f6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800b1f4:	697b      	ldr	r3, [r7, #20]
      }
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	371c      	adds	r7, #28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd90      	pop	{r4, r7, pc}
	...

0800b200 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b200:	b590      	push	{r4, r7, lr}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7ff fe21 	bl	800ae52 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b210:	4603      	mov	r3, r0
 800b212:	681c      	ldr	r4, [r3, #0]
 800b214:	6838      	ldr	r0, [r7, #0]
 800b216:	f7ff fe1c 	bl	800ae52 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b21a:	4603      	mov	r3, r0
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	1ae3      	subs	r3, r4, r3
 800b220:	10db      	asrs	r3, r3, #3
 800b222:	4a03      	ldr	r2, [pc, #12]	; (800b230 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x30>)
 800b224:	fb02 f303 	mul.w	r3, r2, r3
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd90      	pop	{r4, r7, pc}
 800b230:	aaaaaaab 	.word	0xaaaaaaab

0800b234 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d006      	beq.n	800b252 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 f923 	bl	800b494 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800b24e:	4603      	mov	r3, r0
 800b250:	e000      	b.n	800b254 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800b252:	2300      	movs	r3, #0
      }
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800b25c:	b590      	push	{r4, r7, lr}
 800b25e:	b089      	sub	sp, #36	; 0x24
 800b260:	af02      	add	r7, sp, #8
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
 800b268:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800b26a:	f88d 4000 	strb.w	r4, [sp]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	68b9      	ldr	r1, [r7, #8]
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 f91c 	bl	800b4b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>
 800b27a:	4603      	mov	r3, r0
      }
 800b27c:	4618      	mov	r0, r3
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	bd90      	pop	{r4, r7, pc}

0800b284 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800b284:	b590      	push	{r4, r7, lr}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
 800b290:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f000 f91f 	bl	800b4d6 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b298:	4604      	mov	r4, r0
 800b29a:	68b8      	ldr	r0, [r7, #8]
 800b29c:	f000 f91b 	bl	800b4d6 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b2a0:	4601      	mov	r1, r0
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 f924 	bl	800b4f4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800b2ac:	4603      	mov	r3, r0
    }
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd90      	pop	{r4, r7, pc}

0800b2b6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b082      	sub	sp, #8
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f927 	bl	800b516 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b2dc:	68b8      	ldr	r0, [r7, #8]
 800b2de:	f00a f8cd 	bl	801547c <_ZdlPv>
      }
 800b2e2:	bf00      	nop
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d00a      	beq.n	800b312 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f916 	bl	800b52e <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 800b302:	4603      	mov	r3, r0
 800b304:	4618      	mov	r0, r3
 800b306:	f000 f91c 	bl	800b542 <_ZSt8_DestroyI13ParsedCommandEvPT_>
	  for (; __first != __last; ++__first)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3324      	adds	r3, #36	; 0x24
 800b30e:	607b      	str	r3, [r7, #4]
 800b310:	e7f0      	b.n	800b2f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP13ParsedCommandEEvT_S4_+0xa>
	}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b326:	68b8      	ldr	r0, [r7, #8]
 800b328:	f00a f8a8 	bl	801547c <_ZdlPv>
      }
 800b32c:	bf00      	nop
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d00a      	beq.n	800b35c <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f906 	bl	800b558 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b34c:	4603      	mov	r3, r0
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 f90c 	bl	800b56c <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3318      	adds	r3, #24
 800b358:	607b      	str	r3, [r7, #4]
 800b35a:	e7f0      	b.n	800b33e <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800b35c:	bf00      	nop
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 f924 	bl	800b5bc <_ZNKSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800b374:	4603      	mov	r3, r0
 800b376:	4618      	mov	r0, r3
 800b378:	f000 f904 	bl	800b584 <_ZNSt6vectorI13ParsedCommandSaIS0_EE11_S_max_sizeERKS1_>
 800b37c:	4603      	mov	r3, r0
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	109b      	asrs	r3, r3, #2
 800b39c:	4a03      	ldr	r2, [pc, #12]	; (800b3ac <_ZNKSt6vectorI13ParsedCommandSaIS0_EE4sizeEv+0x24>)
 800b39e:	fb02 f303 	mul.w	r3, r2, r3
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bc80      	pop	{r7}
 800b3aa:	4770      	bx	lr
 800b3ac:	38e38e39 	.word	0x38e38e39

0800b3b0 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f906 	bl	800b5d0 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <_ZNSt6vectorI13ParsedCommandSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b084      	sub	sp, #16
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	607a      	str	r2, [r7, #4]
 800b3da:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	68b9      	ldr	r1, [r7, #8]
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f915 	bl	800b612 <_ZSt12__relocate_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 800b3e8:	4603      	mov	r3, r0
      }
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <_ZSt32__make_move_if_noexcept_iteratorI13ParsedCommandSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b084      	sub	sp, #16
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b3fa:	f107 030c 	add.w	r3, r7, #12
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	4618      	mov	r0, r3
 800b402:	f000 f923 	bl	800b64c <_ZNSt13move_iteratorIP13ParsedCommandEC1ES1_>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP13ParsedCommandES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 f920 	bl	800b668 <_ZSt18uninitialized_copyISt13move_iteratorIP13ParsedCommandES2_ET0_T_S5_S4_>
 800b428:	4603      	mov	r3, r0
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800b43c:	6838      	ldr	r0, [r7, #0]
 800b43e:	f7fe fd52 	bl	8009ee6 <_ZN13ParsedCommandD1Ev>
 800b442:	bf00      	nop
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b082      	sub	sp, #8
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4618      	mov	r0, r3
 800b456:	f000 f935 	bl	800b6c4 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b45a:	4603      	mov	r3, r0
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 f915 	bl	800b68c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 800b462:	4603      	mov	r3, r0
 800b464:	4618      	mov	r0, r3
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	10db      	asrs	r3, r3, #3
 800b480:	4a03      	ldr	r2, [pc, #12]	; (800b490 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x24>)
 800b482:	fb02 f303 	mul.w	r3, r2, r3
 800b486:	4618      	mov	r0, r3
 800b488:	370c      	adds	r7, #12
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bc80      	pop	{r7}
 800b48e:	4770      	bx	lr
 800b490:	aaaaaaab 	.word	0xaaaaaaab

0800b494 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b49e:	2200      	movs	r2, #0
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f918 	bl	800b6d8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	60f8      	str	r0, [r7, #12]
 800b4ba:	60b9      	str	r1, [r7, #8]
 800b4bc:	607a      	str	r2, [r7, #4]
 800b4be:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	68b9      	ldr	r1, [r7, #8]
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 f927 	bl	800b71a <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800b4cc:	4603      	mov	r3, r0
      }
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b4de:	f107 030c 	add.w	r3, r7, #12
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 f935 	bl	800b754 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	68b9      	ldr	r1, [r7, #8]
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f000 f932 	bl	800b770 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800b50c:	4603      	mov	r3, r0
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:
	destroy(_Up* __p)
 800b516:	b580      	push	{r7, lr}
 800b518:	b082      	sub	sp, #8
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800b520:	6838      	ldr	r0, [r7, #0]
 800b522:	f00a f97a 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b526:	bf00      	nop
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <_ZSt11__addressofI13ParsedCommandEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b52e:	b480      	push	{r7}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4618      	mov	r0, r3
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr

0800b542 <_ZSt8_DestroyI13ParsedCommandEvPT_>:
    _Destroy(_Tp* __pointer)
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7fe fccb 	bl	8009ee6 <_ZN13ParsedCommandD1Ev>
 800b550:	bf00      	nop
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	bc80      	pop	{r7}
 800b56a:	4770      	bx	lr

0800b56c <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f00a f950 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <_ZNSt6vectorI13ParsedCommandSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800b58c:	4b0a      	ldr	r3, [pc, #40]	; (800b5b8 <_ZNSt6vectorI13ParsedCommandSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800b58e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f8ff 	bl	800b794 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8max_sizeERKS1_>
 800b596:	4603      	mov	r3, r0
 800b598:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800b59a:	f107 0208 	add.w	r2, r7, #8
 800b59e:	f107 030c 	add.w	r3, r7, #12
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fe fab3 	bl	8009b10 <_ZSt3minIjERKT_S2_S2_>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	681b      	ldr	r3, [r3, #0]
      }
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	038e38e3 	.word	0x038e38e3

0800b5bc <_ZNKSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bc80      	pop	{r7}
 800b5ce:	4770      	bx	lr

0800b5d0 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 f8e5 	bl	800b7ac <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	bf8c      	ite	hi
 800b5ea:	2301      	movhi	r3, #1
 800b5ec:	2300      	movls	r3, #0
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b5f4:	f009 ff5b 	bl	80154ae <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	4413      	add	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4618      	mov	r0, r3
 800b604:	f009 ff3e 	bl	8015484 <_Znwj>
 800b608:	4603      	mov	r3, r0
      }
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <_ZSt12__relocate_aIP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800b612:	b5b0      	push	{r4, r5, r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	60b9      	str	r1, [r7, #8]
 800b61c:	607a      	str	r2, [r7, #4]
 800b61e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 f8cf 	bl	800b7c4 <_ZSt12__niter_baseIP13ParsedCommandET_S2_>
 800b626:	4604      	mov	r4, r0
 800b628:	68b8      	ldr	r0, [r7, #8]
 800b62a:	f000 f8cb 	bl	800b7c4 <_ZSt12__niter_baseIP13ParsedCommandET_S2_>
 800b62e:	4605      	mov	r5, r0
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f8c7 	bl	800b7c4 <_ZSt12__niter_baseIP13ParsedCommandET_S2_>
 800b636:	4602      	mov	r2, r0
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	4629      	mov	r1, r5
 800b63c:	4620      	mov	r0, r4
 800b63e:	f000 f8cb 	bl	800b7d8 <_ZSt14__relocate_a_1IP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>
 800b642:	4603      	mov	r3, r0
    }
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bdb0      	pop	{r4, r5, r7, pc}

0800b64c <_ZNSt13move_iteratorIP13ParsedCommandEC1ES1_>:
      move_iterator(iterator_type __i)
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4618      	mov	r0, r3
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	bc80      	pop	{r7}
 800b666:	4770      	bx	lr

0800b668 <_ZSt18uninitialized_copyISt13move_iteratorIP13ParsedCommandES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b674:	2301      	movs	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 f8d1 	bl	800b824 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_>
 800b682:	4603      	mov	r3, r0
    }
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800b694:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 800b696:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f8f2 	bl	800b882 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800b6a2:	f107 0208 	add.w	r2, r7, #8
 800b6a6:	f107 030c 	add.w	r3, r7, #12
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fe fa2f 	bl	8009b10 <_ZSt3minIjERKT_S2_S2_>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	681b      	ldr	r3, [r3, #0]
      }
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	05555555 	.word	0x05555555

0800b6c4 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bc80      	pop	{r7}
 800b6d6:	4770      	bx	lr

0800b6d8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 f8d9 	bl	800b89c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	bf8c      	ite	hi
 800b6f2:	2301      	movhi	r3, #1
 800b6f4:	2300      	movls	r3, #0
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b6fc:	f009 fed7 	bl	80154ae <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	4613      	mov	r3, r2
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	4413      	add	r3, r2
 800b708:	00db      	lsls	r3, r3, #3
 800b70a:	4618      	mov	r0, r3
 800b70c:	f009 feba 	bl	8015484 <_Znwj>
 800b710:	4603      	mov	r3, r0
      }
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800b71a:	b5b0      	push	{r4, r5, r7, lr}
 800b71c:	b084      	sub	sp, #16
 800b71e:	af00      	add	r7, sp, #0
 800b720:	60f8      	str	r0, [r7, #12]
 800b722:	60b9      	str	r1, [r7, #8]
 800b724:	607a      	str	r2, [r7, #4]
 800b726:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 f8c3 	bl	800b8b4 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 800b72e:	4604      	mov	r4, r0
 800b730:	68b8      	ldr	r0, [r7, #8]
 800b732:	f000 f8bf 	bl	800b8b4 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 800b736:	4605      	mov	r5, r0
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f8bb 	bl	800b8b4 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 800b73e:	4602      	mov	r2, r0
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	4629      	mov	r1, r5
 800b744:	4620      	mov	r0, r4
 800b746:	f000 f8bf 	bl	800b8c8 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800b74a:	4603      	mov	r3, r0
    }
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bdb0      	pop	{r4, r5, r7, pc}

0800b754 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bc80      	pop	{r7}
 800b76e:	4770      	bx	lr

0800b770 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b77c:	2301      	movs	r3, #1
 800b77e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	68b9      	ldr	r1, [r7, #8]
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f000 f8c5 	bl	800b914 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800b78a:	4603      	mov	r3, r0
    }
 800b78c:	4618      	mov	r0, r3
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <_ZNSt16allocator_traitsISaI13ParsedCommandEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f805 	bl	800b7ac <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b7b4:	4b02      	ldr	r3, [pc, #8]	; (800b7c0 <_ZNK9__gnu_cxx13new_allocatorI13ParsedCommandE8max_sizeEv+0x14>)
      }
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bc80      	pop	{r7}
 800b7be:	4770      	bx	lr
 800b7c0:	038e38e3 	.word	0x038e38e3

0800b7c4 <_ZSt12__niter_baseIP13ParsedCommandET_S2_>:
    __niter_base(_Iterator __it)
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bc80      	pop	{r7}
 800b7d6:	4770      	bx	lr

0800b7d8 <_ZSt14__relocate_a_1IP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800b7d8:	b590      	push	{r4, r7, lr}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d013      	beq.n	800b81a <_ZSt14__relocate_a_1IP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 800b7f2:	6978      	ldr	r0, [r7, #20]
 800b7f4:	f7ff fe9b 	bl	800b52e <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f7ff fe97 	bl	800b52e <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 800b800:	4603      	mov	r3, r0
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	4619      	mov	r1, r3
 800b806:	4620      	mov	r0, r4
 800b808:	f000 f8b3 	bl	800b972 <_ZSt19__relocate_object_aI13ParsedCommandS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3324      	adds	r3, #36	; 0x24
 800b810:	60fb      	str	r3, [r7, #12]
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	3324      	adds	r3, #36	; 0x24
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	e7e7      	b.n	800b7ea <_ZSt14__relocate_a_1IP13ParsedCommandS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 800b81a:	697b      	ldr	r3, [r7, #20]
    }
 800b81c:	4618      	mov	r0, r3
 800b81e:	371c      	adds	r7, #28
 800b820:	46bd      	mov	sp, r7
 800b822:	bd90      	pop	{r4, r7, pc}

0800b824 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b824:	b590      	push	{r4, r7, lr}
 800b826:	b087      	sub	sp, #28
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b834:	f107 0208 	add.w	r2, r7, #8
 800b838:	f107 030c 	add.w	r3, r7, #12
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 f8b2 	bl	800b9a8 <_ZStneIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d016      	beq.n	800b878 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b84a:	6978      	ldr	r0, [r7, #20]
 800b84c:	f7ff fe6f 	bl	800b52e <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 800b850:	4604      	mov	r4, r0
 800b852:	f107 030c 	add.w	r3, r7, #12
 800b856:	4618      	mov	r0, r3
 800b858:	f000 f8c7 	bl	800b9ea <_ZNKSt13move_iteratorIP13ParsedCommandEdeEv>
 800b85c:	4603      	mov	r3, r0
 800b85e:	4619      	mov	r1, r3
 800b860:	4620      	mov	r0, r4
 800b862:	f000 f8e9 	bl	800ba38 <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b866:	f107 030c 	add.w	r3, r7, #12
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 f8ad 	bl	800b9ca <_ZNSt13move_iteratorIP13ParsedCommandEppEv>
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	3324      	adds	r3, #36	; 0x24
 800b874:	617b      	str	r3, [r7, #20]
 800b876:	e7dd      	b.n	800b834 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP13ParsedCommandES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 800b878:	697b      	ldr	r3, [r7, #20]
	}
 800b87a:	4618      	mov	r0, r3
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd90      	pop	{r4, r7, pc}

0800b882 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a) noexcept
 800b882:	b580      	push	{r7, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f806 	bl	800b89c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b890:	4603      	mov	r3, r0
 800b892:	4618      	mov	r0, r3
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b8a4:	4b02      	ldr	r3, [pc, #8]	; (800b8b0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
      }
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bc80      	pop	{r7}
 800b8ae:	4770      	bx	lr
 800b8b0:	05555555 	.word	0x05555555

0800b8b4 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
    __niter_base(_Iterator __it)
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bc80      	pop	{r7}
 800b8c6:	4770      	bx	lr

0800b8c8 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800b8c8:	b590      	push	{r4, r7, lr}
 800b8ca:	b087      	sub	sp, #28
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
 800b8d4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d013      	beq.n	800b90a <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 800b8e2:	6978      	ldr	r0, [r7, #20]
 800b8e4:	f7ff fe38 	bl	800b558 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f7ff fe34 	bl	800b558 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 f8b5 	bl	800ba66 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3318      	adds	r3, #24
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	3318      	adds	r3, #24
 800b906:	617b      	str	r3, [r7, #20]
 800b908:	e7e7      	b.n	800b8da <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x12>
      return __cur;
 800b90a:	697b      	ldr	r3, [r7, #20]
    }
 800b90c:	4618      	mov	r0, r3
 800b90e:	371c      	adds	r7, #28
 800b910:	46bd      	mov	sp, r7
 800b912:	bd90      	pop	{r4, r7, pc}

0800b914 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b914:	b590      	push	{r4, r7, lr}
 800b916:	b087      	sub	sp, #28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b924:	f107 0208 	add.w	r2, r7, #8
 800b928:	f107 030c 	add.w	r3, r7, #12
 800b92c:	4611      	mov	r1, r2
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 f8b4 	bl	800ba9c <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d016      	beq.n	800b968 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b93a:	6978      	ldr	r0, [r7, #20]
 800b93c:	f7ff fe0c 	bl	800b558 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b940:	4604      	mov	r4, r0
 800b942:	f107 030c 	add.w	r3, r7, #12
 800b946:	4618      	mov	r0, r3
 800b948:	f000 f8c9 	bl	800bade <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800b94c:	4603      	mov	r3, r0
 800b94e:	4619      	mov	r1, r3
 800b950:	4620      	mov	r0, r4
 800b952:	f000 f8cf 	bl	800baf4 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b956:	f107 030c 	add.w	r3, r7, #12
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 f8af 	bl	800babe <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	3318      	adds	r3, #24
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	e7dd      	b.n	800b924 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800b968:	697b      	ldr	r3, [r7, #20]
	}
 800b96a:	4618      	mov	r0, r3
 800b96c:	371c      	adds	r7, #28
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd90      	pop	{r4, r7, pc}

0800b972 <_ZSt19__relocate_object_aI13ParsedCommandS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 800b972:	b580      	push	{r7, lr}
 800b974:	b084      	sub	sp, #16
 800b976:	af00      	add	r7, sp, #0
 800b978:	60f8      	str	r0, [r7, #12]
 800b97a:	60b9      	str	r1, [r7, #8]
 800b97c:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800b97e:	68b8      	ldr	r0, [r7, #8]
 800b980:	f000 f8cf 	bl	800bb22 <_ZSt4moveIR13ParsedCommandEONSt16remove_referenceIT_E4typeEOS3_>
 800b984:	4603      	mov	r3, r0
 800b986:	461a      	mov	r2, r3
 800b988:	68f9      	ldr	r1, [r7, #12]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f8d3 	bl	800bb36 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800b990:	68b8      	ldr	r0, [r7, #8]
 800b992:	f7ff fdcc 	bl	800b52e <_ZSt11__addressofI13ParsedCommandEPT_RS1_>
 800b996:	4603      	mov	r3, r0
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff fbb9 	bl	800b112 <_ZNSt16allocator_traitsISaI13ParsedCommandEE7destroyIS0_EEvRS1_PT_>
    }
 800b9a0:	bf00      	nop
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <_ZStneIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f8d1 	bl	800bb5c <_ZSteqIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	f083 0301 	eor.w	r3, r3, #1
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <_ZNSt13move_iteratorIP13ParsedCommandEppEv>:
      operator++()
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	601a      	str	r2, [r3, #0]
	return *this;
 800b9de:	687b      	ldr	r3, [r7, #4]
      }
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bc80      	pop	{r7}
 800b9e8:	4770      	bx	lr

0800b9ea <_ZNKSt13move_iteratorIP13ParsedCommandEdeEv>:
      operator*() const
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bc80      	pop	{r7}
 800b9fe:	4770      	bx	lr

0800ba00 <_ZN13ParsedCommandC1EOS_>:
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	683a      	ldr	r2, [r7, #0]
 800ba0e:	4611      	mov	r1, r2
 800ba10:	4618      	mov	r0, r3
 800ba12:	f009 fee8 	bl	80157e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	8b1a      	ldrh	r2, [r3, #24]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	831a      	strh	r2, [r3, #24]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	69da      	ldr	r2, [r3, #28]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	61da      	str	r2, [r3, #28]
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	6a1a      	ldr	r2, [r3, #32]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	621a      	str	r2, [r3, #32]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4618      	mov	r0, r3
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <_ZSt10_ConstructI13ParsedCommandJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800ba38:	b590      	push	{r4, r7, lr}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800ba42:	6838      	ldr	r0, [r7, #0]
 800ba44:	f000 f8a0 	bl	800bb88 <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>
 800ba48:	4604      	mov	r4, r0
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	2024      	movs	r0, #36	; 0x24
 800ba50:	f7fd fab1 	bl	8008fb6 <_ZnwjPv>
 800ba54:	4603      	mov	r3, r0
 800ba56:	4621      	mov	r1, r4
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7ff ffd1 	bl	800ba00 <_ZN13ParsedCommandC1EOS_>
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd90      	pop	{r4, r7, pc}

0800ba66 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	60f8      	str	r0, [r7, #12]
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800ba72:	68b8      	ldr	r0, [r7, #8]
 800ba74:	f000 f892 	bl	800bb9c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	68f9      	ldr	r1, [r7, #12]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f896 	bl	800bbb0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800ba84:	68b8      	ldr	r0, [r7, #8]
 800ba86:	f7ff fd67 	bl	800b558 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f7ff fc11 	bl	800b2b6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
    }
 800ba94:	bf00      	nop
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f894 	bl	800bbd6 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800baae:	4603      	mov	r3, r0
 800bab0:	f083 0301 	eor.w	r3, r3, #1
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
	++_M_current;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f103 0218 	add.w	r2, r3, #24
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	601a      	str	r2, [r3, #0]
	return *this;
 800bad2:	687b      	ldr	r3, [r7, #4]
      }
 800bad4:	4618      	mov	r0, r3
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	bc80      	pop	{r7}
 800badc:	4770      	bx	lr

0800bade <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800bade:	b480      	push	{r7}
 800bae0:	b083      	sub	sp, #12
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4618      	mov	r0, r3
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	bc80      	pop	{r7}
 800baf2:	4770      	bx	lr

0800baf4 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800baf4:	b590      	push	{r4, r7, lr}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800bafe:	6838      	ldr	r0, [r7, #0]
 800bb00:	f000 f87f 	bl	800bc02 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bb04:	4604      	mov	r4, r0
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	2018      	movs	r0, #24
 800bb0c:	f7fd fa53 	bl	8008fb6 <_ZnwjPv>
 800bb10:	4603      	mov	r3, r0
 800bb12:	4621      	mov	r1, r4
 800bb14:	4618      	mov	r0, r3
 800bb16:	f009 fe66 	bl	80157e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800bb1a:	bf00      	nop
 800bb1c:	370c      	adds	r7, #12
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd90      	pop	{r4, r7, pc}

0800bb22 <_ZSt4moveIR13ParsedCommandEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800bb22:	b480      	push	{r7}
 800bb24:	b083      	sub	sp, #12
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bc80      	pop	{r7}
 800bb34:	4770      	bx	lr

0800bb36 <_ZNSt16allocator_traitsISaI13ParsedCommandEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b084      	sub	sp, #16
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f820 	bl	800bb88 <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	68b9      	ldr	r1, [r7, #8]
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 f861 	bl	800bc16 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JS1_EEEvPT_DpOT0_>
 800bb54:	bf00      	nop
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <_ZSteqIP13ParsedCommandEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 800bb5c:	b590      	push	{r4, r7, lr}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f86d 	bl	800bc46 <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	6838      	ldr	r0, [r7, #0]
 800bb70:	f000 f869 	bl	800bc46 <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>
 800bb74:	4603      	mov	r3, r0
 800bb76:	429c      	cmp	r4, r3
 800bb78:	bf0c      	ite	eq
 800bb7a:	2301      	moveq	r3, #1
 800bb7c:	2300      	movne	r3, #0
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd90      	pop	{r4, r7, pc}

0800bb88 <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bc80      	pop	{r7}
 800bb9a:	4770      	bx	lr

0800bb9c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4618      	mov	r0, r3
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bc80      	pop	{r7}
 800bbae:	4770      	bx	lr

0800bbb0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f820 	bl	800bc02 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 f847 	bl	800bc5c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 800bbce:	bf00      	nop
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800bbd6:	b590      	push	{r4, r7, lr}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f853 	bl	800bc8c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	6838      	ldr	r0, [r7, #0]
 800bbea:	f000 f84f 	bl	800bc8c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	429c      	cmp	r4, r3
 800bbf2:	bf0c      	ite	eq
 800bbf4:	2301      	moveq	r3, #1
 800bbf6:	2300      	movne	r3, #0
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd90      	pop	{r4, r7, pc}

0800bc02 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bc02:	b480      	push	{r7}
 800bc04:	b083      	sub	sp, #12
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bc80      	pop	{r7}
 800bc14:	4770      	bx	lr

0800bc16 <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800bc16:	b590      	push	{r4, r7, lr}
 800bc18:	b085      	sub	sp, #20
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	60f8      	str	r0, [r7, #12]
 800bc1e:	60b9      	str	r1, [r7, #8]
 800bc20:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff ffb0 	bl	800bb88 <_ZSt7forwardI13ParsedCommandEOT_RNSt16remove_referenceIS1_E4typeE>
 800bc28:	4604      	mov	r4, r0
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	2024      	movs	r0, #36	; 0x24
 800bc30:	f7fd f9c1 	bl	8008fb6 <_ZnwjPv>
 800bc34:	4603      	mov	r3, r0
 800bc36:	4621      	mov	r1, r4
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7ff fee1 	bl	800ba00 <_ZN13ParsedCommandC1EOS_>
 800bc3e:	bf00      	nop
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd90      	pop	{r4, r7, pc}

0800bc46 <_ZNKSt13move_iteratorIP13ParsedCommandE4baseEv>:
      base() const
 800bc46:	b480      	push	{r7}
 800bc48:	b083      	sub	sp, #12
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4618      	mov	r0, r3
 800bc54:	370c      	adds	r7, #12
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bc80      	pop	{r7}
 800bc5a:	4770      	bx	lr

0800bc5c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff ffca 	bl	800bc02 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bc6e:	4604      	mov	r4, r0
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	4619      	mov	r1, r3
 800bc74:	2018      	movs	r0, #24
 800bc76:	f7fd f99e 	bl	8008fb6 <_ZnwjPv>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f009 fdb1 	bl	80157e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800bc84:	bf00      	nop
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd90      	pop	{r4, r7, pc}

0800bc8c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bc80      	pop	{r7}
 800bca0:	4770      	bx	lr
	...

0800bca4 <_ZN14CommandHandlerC1Ev>:

#include "CommandHandler.h"
#include "global_callbacks.h"
//#include "FFBoardMain.h"

CommandHandler::CommandHandler() {
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	4a06      	ldr	r2, [pc, #24]	; (800bcc8 <_ZN14CommandHandlerC1Ev+0x24>)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	711a      	strb	r2, [r3, #4]
	addCommandHandler();
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f857 	bl	800bd6c <_ZN14CommandHandler17addCommandHandlerEv>
}
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	080176e0 	.word	0x080176e0

0800bccc <_ZN14CommandHandlerD1Ev>:

CommandHandler::~CommandHandler() {
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	4a05      	ldr	r2, [pc, #20]	; (800bcec <_ZN14CommandHandlerD1Ev+0x20>)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	601a      	str	r2, [r3, #0]
	// Remove from global list when deleted
	removeCommandHandler();
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f87a 	bl	800bdd4 <_ZN14CommandHandler20removeCommandHandlerEv>
}
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	080176e0 	.word	0x080176e0

0800bcf0 <_ZN14CommandHandlerD0Ev>:
CommandHandler::~CommandHandler() {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
}
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7ff ffe7 	bl	800bccc <_ZN14CommandHandlerD1Ev>
 800bcfe:	2108      	movs	r1, #8
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f009 fbbd 	bl	8015480 <_ZdlPvj>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <_ZN14CommandHandler11hasCommandsEv>:

bool CommandHandler::hasCommands(){
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
	return this->commandsEnabled;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	791b      	ldrb	r3, [r3, #4]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bc80      	pop	{r7}
 800bd24:	4770      	bx	lr

0800bd26 <_ZN14CommandHandler18setCommandsEnabledEb>:
void CommandHandler::setCommandsEnabled(bool enable){
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	70fb      	strb	r3, [r7, #3]
	this->commandsEnabled = enable;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	78fa      	ldrb	r2, [r7, #3]
 800bd36:	711a      	strb	r2, [r3, #4]
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bc80      	pop	{r7}
 800bd40:	4770      	bx	lr

0800bd42 <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/*
 * Implement this function
 * MUST return false when no valid command was found or if a help command or similar was parsed
 * When it returns true parsing is normally stopped after this class and not sent to others
 */
bool CommandHandler::command(ParsedCommand* cmd,std::string* reply){
 800bd42:	b480      	push	{r7}
 800bd44:	b085      	sub	sp, #20
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	60f8      	str	r0, [r7, #12]
 800bd4a:	60b9      	str	r1, [r7, #8]
 800bd4c:	607a      	str	r2, [r7, #4]
	if(!this->commandsEnabled){
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	791b      	ldrb	r3, [r3, #4]
 800bd52:	f083 0301 	eor.w	r3, r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e>
		return false;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	e000      	b.n	800bd62 <_ZN14CommandHandler7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20>
	}
	return false;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3714      	adds	r7, #20
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bc80      	pop	{r7}
 800bd6a:	4770      	bx	lr

0800bd6c <_ZN14CommandHandler17addCommandHandlerEv>:


void CommandHandler::addCommandHandler(){
 800bd6c:	b590      	push	{r4, r7, lr}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
	// If already added return
	extern std::vector<CommandHandler*> cmdHandlers;
	for(uint8_t i = 0; i < cmdHandlers.size(); i++){
 800bd74:	2300      	movs	r3, #0
 800bd76:	73fb      	strb	r3, [r7, #15]
 800bd78:	7bfc      	ldrb	r4, [r7, #15]
 800bd7a:	4815      	ldr	r0, [pc, #84]	; (800bdd0 <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800bd7c:	f000 f872 	bl	800be64 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800bd80:	4603      	mov	r3, r0
 800bd82:	429c      	cmp	r4, r3
 800bd84:	bf34      	ite	cc
 800bd86:	2301      	movcc	r3, #1
 800bd88:	2300      	movcs	r3, #0
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d012      	beq.n	800bdb6 <_ZN14CommandHandler17addCommandHandlerEv+0x4a>
		if(cmdHandlers[i] == this)
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	4619      	mov	r1, r3
 800bd94:	480e      	ldr	r0, [pc, #56]	; (800bdd0 <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800bd96:	f000 f874 	bl	800be82 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	bf0c      	ite	eq
 800bda4:	2301      	moveq	r3, #1
 800bda6:	2300      	movne	r3, #0
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10c      	bne.n	800bdc8 <_ZN14CommandHandler17addCommandHandlerEv+0x5c>
	for(uint8_t i = 0; i < cmdHandlers.size(); i++){
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	73fb      	strb	r3, [r7, #15]
 800bdb4:	e7e0      	b.n	800bd78 <_ZN14CommandHandler17addCommandHandlerEv+0xc>
			return;
	}
	cmdHandlers.push_back(this);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	60bb      	str	r3, [r7, #8]
 800bdba:	f107 0308 	add.w	r3, r7, #8
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	4803      	ldr	r0, [pc, #12]	; (800bdd0 <_ZN14CommandHandler17addCommandHandlerEv+0x64>)
 800bdc2:	f000 f86d 	bl	800bea0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE9push_backEOS1_>
 800bdc6:	e000      	b.n	800bdca <_ZN14CommandHandler17addCommandHandlerEv+0x5e>
			return;
 800bdc8:	bf00      	nop
}
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd90      	pop	{r4, r7, pc}
 800bdd0:	2000079c 	.word	0x2000079c

0800bdd4 <_ZN14CommandHandler20removeCommandHandlerEv>:

void CommandHandler::removeCommandHandler(){
 800bdd4:	b590      	push	{r4, r7, lr}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
	extern std::vector<CommandHandler*> cmdHandlers;
	for (uint8_t i = 0; i < cmdHandlers.size(); i++){
 800bddc:	2300      	movs	r3, #0
 800bdde:	75fb      	strb	r3, [r7, #23]
 800bde0:	7dfc      	ldrb	r4, [r7, #23]
 800bde2:	481f      	ldr	r0, [pc, #124]	; (800be60 <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800bde4:	f000 f83e 	bl	800be64 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800bde8:	4603      	mov	r3, r0
 800bdea:	429c      	cmp	r4, r3
 800bdec:	bf34      	ite	cc
 800bdee:	2301      	movcc	r3, #1
 800bdf0:	2300      	movcs	r3, #0
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d02e      	beq.n	800be56 <_ZN14CommandHandler20removeCommandHandlerEv+0x82>
		if(cmdHandlers[i] == this){
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4818      	ldr	r0, [pc, #96]	; (800be60 <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800bdfe:	f000 f840 	bl	800be82 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>
 800be02:	4603      	mov	r3, r0
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	429a      	cmp	r2, r3
 800be0a:	bf0c      	ite	eq
 800be0c:	2301      	moveq	r3, #1
 800be0e:	2300      	movne	r3, #0
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d01b      	beq.n	800be4e <_ZN14CommandHandler20removeCommandHandlerEv+0x7a>
			cmdHandlers.erase(cmdHandlers.begin()+i);
 800be16:	4812      	ldr	r0, [pc, #72]	; (800be60 <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800be18:	f000 f853 	bl	800bec2 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800be1c:	4603      	mov	r3, r0
 800be1e:	613b      	str	r3, [r7, #16]
 800be20:	7dfa      	ldrb	r2, [r7, #23]
 800be22:	f107 0310 	add.w	r3, r7, #16
 800be26:	4611      	mov	r1, r2
 800be28:	4618      	mov	r0, r3
 800be2a:	f000 f85a 	bl	800bee2 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800be2e:	4603      	mov	r3, r0
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	f107 020c 	add.w	r2, r7, #12
 800be36:	f107 0308 	add.w	r3, r7, #8
 800be3a:	4611      	mov	r1, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 f868 	bl	800bf12 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800be42:	68b9      	ldr	r1, [r7, #8]
 800be44:	4806      	ldr	r0, [pc, #24]	; (800be60 <_ZN14CommandHandler20removeCommandHandlerEv+0x8c>)
 800be46:	f000 f875 	bl	800bf34 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 800be4a:	bf00      	nop
		}
	}
}
 800be4c:	e003      	b.n	800be56 <_ZN14CommandHandler20removeCommandHandlerEv+0x82>
	for (uint8_t i = 0; i < cmdHandlers.size(); i++){
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	3301      	adds	r3, #1
 800be52:	75fb      	strb	r3, [r7, #23]
 800be54:	e7c4      	b.n	800bde0 <_ZN14CommandHandler20removeCommandHandlerEv+0xc>
}
 800be56:	bf00      	nop
 800be58:	371c      	adds	r7, #28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd90      	pop	{r4, r7, pc}
 800be5e:	bf00      	nop
 800be60:	2000079c 	.word	0x2000079c

0800be64 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	109b      	asrs	r3, r3, #2
 800be78:	4618      	mov	r0, r3
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bc80      	pop	{r7}
 800be80:	4770      	bx	lr

0800be82 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
      }
 800be96:	4618      	mov	r0, r3
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bc80      	pop	{r7}
 800be9e:	4770      	bx	lr

0800bea0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800beaa:	6838      	ldr	r0, [r7, #0]
 800beac:	f000 f869 	bl	800bf82 <_ZSt4moveIRP14CommandHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800beb0:	4603      	mov	r3, r0
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f86e 	bl	800bf96 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800beba:	bf00      	nop
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	f107 030c 	add.w	r3, r7, #12
 800bed0:	4611      	mov	r1, r2
 800bed2:	4618      	mov	r0, r3
 800bed4:	f000 f88d 	bl	800bff2 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4413      	add	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
 800bef8:	f107 020c 	add.w	r2, r7, #12
 800befc:	f107 0308 	add.w	r3, r7, #8
 800bf00:	4611      	mov	r1, r2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 f875 	bl	800bff2 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800bf1c:	6838      	ldr	r0, [r7, #0]
 800bf1e:	f000 f877 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800bf22:	4603      	mov	r3, r0
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	601a      	str	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7ff ffbf 	bl	800bec2 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800bf44:	4603      	mov	r3, r0
 800bf46:	60bb      	str	r3, [r7, #8]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 f86b 	bl	800c024 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE6cbeginEv>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	60fb      	str	r3, [r7, #12]
 800bf52:	f107 020c 	add.w	r2, r7, #12
 800bf56:	463b      	mov	r3, r7
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 f876 	bl	800c04c <_ZN9__gnu_cxxmiIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800bf60:	4602      	mov	r2, r0
 800bf62:	f107 0308 	add.w	r3, r7, #8
 800bf66:	4611      	mov	r1, r2
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7ff ffba 	bl	800bee2 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f87f 	bl	800c076 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <_ZSt4moveIRP14CommandHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800bf82:	b480      	push	{r7}
 800bf84:	b083      	sub	sp, #12
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bc80      	pop	{r7}
 800bf94:	4770      	bx	lr

0800bf96 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800bf96:	b5b0      	push	{r4, r5, r7, lr}
 800bf98:	b082      	sub	sp, #8
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d011      	beq.n	800bfd0 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800bfac:	687c      	ldr	r4, [r7, #4]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685d      	ldr	r5, [r3, #4]
 800bfb2:	6838      	ldr	r0, [r7, #0]
 800bfb4:	f000 f89b 	bl	800c0ee <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	461a      	mov	r2, r3
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 f89f 	bl	800c102 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	1d1a      	adds	r2, r3, #4
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	605a      	str	r2, [r3, #4]
      }
 800bfce:	e00c      	b.n	800bfea <_ZNSt6vectorIP14CommandHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f8a9 	bl	800c128 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	6838      	ldr	r0, [r7, #0]
 800bfda:	f000 f888 	bl	800c0ee <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f8c5 	bl	800c174 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800bfea:	bf00      	nop
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bdb0      	pop	{r4, r5, r7, pc}

0800bff2 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800bff2:	b480      	push	{r7}
 800bff4:	b083      	sub	sp, #12
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bc80      	pop	{r7}
 800c00e:	4770      	bx	lr

0800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4618      	mov	r0, r3
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	bc80      	pop	{r7}
 800c022:	4770      	bx	lr

0800c024 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	f107 020c 	add.w	r2, r7, #12
 800c036:	f107 0308 	add.w	r3, r7, #8
 800c03a:	4611      	mov	r1, r2
 800c03c:	4618      	mov	r0, r3
 800c03e:	f000 f955 	bl	800c2ec <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <_ZN9__gnu_cxxmiIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c04c:	b590      	push	{r4, r7, lr}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f957 	bl	800c30a <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c05c:	4603      	mov	r3, r0
 800c05e:	681c      	ldr	r4, [r3, #0]
 800c060:	6838      	ldr	r0, [r7, #0]
 800c062:	f000 f952 	bl	800c30a <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c066:	4603      	mov	r3, r0
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	1ae3      	subs	r3, r4, r3
 800c06c:	109b      	asrs	r3, r3, #2
 800c06e:	4618      	mov	r0, r3
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	bd90      	pop	{r4, r7, pc}

0800c076 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 800c076:	b590      	push	{r4, r7, lr}
 800c078:	b085      	sub	sp, #20
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800c080:	463b      	mov	r3, r7
 800c082:	2101      	movs	r1, #1
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff ff2c 	bl	800bee2 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800c08a:	4603      	mov	r3, r0
 800c08c:	60bb      	str	r3, [r7, #8]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f84a 	bl	800c128 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800c094:	4603      	mov	r3, r0
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	f107 020c 	add.w	r2, r7, #12
 800c09c:	f107 0308 	add.w	r3, r7, #8
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f000 f93b 	bl	800c31e <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00e      	beq.n	800c0cc <_ZNSt6vectorIP14CommandHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800c0ae:	463b      	mov	r3, r7
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7ff ff15 	bl	800bee2 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 f834 	bl	800c128 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f000 f941 	bl	800c34e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	1f1a      	subs	r2, r3, #4
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4610      	mov	r0, r2
 800c0e0:	f000 f94d 	bl	800c37e <_ZNSt16allocator_traitsISaIP14CommandHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800c0e4:	683b      	ldr	r3, [r7, #0]
    }
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3714      	adds	r7, #20
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd90      	pop	{r4, r7, pc}

0800c0ee <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c0ee:	b480      	push	{r7}
 800c0f0:	b083      	sub	sp, #12
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bc80      	pop	{r7}
 800c100:	4770      	bx	lr

0800c102 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800c102:	b580      	push	{r7, lr}
 800c104:	b084      	sub	sp, #16
 800c106:	af00      	add	r7, sp, #0
 800c108:	60f8      	str	r0, [r7, #12]
 800c10a:	60b9      	str	r1, [r7, #8]
 800c10c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff ffed 	bl	800c0ee <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800c114:	4603      	mov	r3, r0
 800c116:	461a      	mov	r2, r3
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f000 f93c 	bl	800c398 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 800c120:	bf00      	nop
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	1d1a      	adds	r2, r3, #4
 800c134:	f107 030c 	add.w	r3, r7, #12
 800c138:	4611      	mov	r1, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff ff59 	bl	800bff2 <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <_ZNSt6vectorIP14CommandHandlerSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800c150:	4618      	mov	r0, r3
 800c152:	f000 f805 	bl	800c160 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800c156:	4603      	mov	r3, r0
      }
 800c158:	4618      	mov	r0, r3
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800c168:	2301      	movs	r3, #1
      }
 800c16a:	4618      	mov	r0, r3
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	bc80      	pop	{r7}
 800c172:	4770      	bx	lr

0800c174 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c174:	b5b0      	push	{r4, r5, r7, lr}
 800c176:	b08c      	sub	sp, #48	; 0x30
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800c180:	4a59      	ldr	r2, [pc, #356]	; (800c2e8 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800c182:	2101      	movs	r1, #1
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f000 f91d 	bl	800c3c4 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc>
 800c18a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f7ff fe92 	bl	800bec2 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	617b      	str	r3, [r7, #20]
 800c1a2:	f107 0214 	add.w	r2, r7, #20
 800c1a6:	f107 0308 	add.w	r3, r7, #8
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 f950 	bl	800c452 <_ZN9__gnu_cxxmiIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 f95e 	bl	800c47c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj>
 800c1c0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800c1c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	18d5      	adds	r5, r2, r3
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7ff ff8c 	bl	800c0ee <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4629      	mov	r1, r5
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f7ff ff90 	bl	800c102 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800c1e6:	f7ff ffb0 	bl	800c14a <_ZNSt6vectorIP14CommandHandlerSaIS1_EE15_S_use_relocateEv>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d027      	beq.n	800c240 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c1f0:	f107 0308 	add.w	r3, r7, #8
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff ff0b 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4618      	mov	r0, r3
 800c202:	f000 f963 	bl	800c4cc <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c206:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	4621      	mov	r1, r4
 800c20c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c20e:	f000 f949 	bl	800c4a4 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c212:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	3304      	adds	r3, #4
 800c218:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff fef6 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c224:	4603      	mov	r3, r0
 800c226:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 f94e 	bl	800c4cc <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c230:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c234:	6a39      	ldr	r1, [r7, #32]
 800c236:	4620      	mov	r0, r4
 800c238:	f000 f934 	bl	800c4a4 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c23c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c23e:	e026      	b.n	800c28e <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800c240:	f107 0308 	add.w	r3, r7, #8
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff fee3 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c24a:	4603      	mov	r3, r0
 800c24c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	4618      	mov	r0, r3
 800c252:	f000 f93b 	bl	800c4cc <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c256:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800c258:	69ba      	ldr	r2, [r7, #24]
 800c25a:	4621      	mov	r1, r4
 800c25c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c25e:	f000 f93f 	bl	800c4e0 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800c262:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800c264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c266:	3304      	adds	r3, #4
 800c268:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800c26a:	f107 0308 	add.w	r3, r7, #8
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff fece 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c274:	4603      	mov	r3, r0
 800c276:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 f926 	bl	800c4cc <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c280:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800c282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c284:	6a39      	ldr	r1, [r7, #32]
 800c286:	4620      	mov	r0, r4
 800c288:	f000 f92a 	bl	800c4e0 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800c28c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800c28e:	f7ff ff5c 	bl	800c14a <_ZNSt6vectorIP14CommandHandlerSaIS1_EE15_S_use_relocateEv>
 800c292:	4603      	mov	r3, r0
 800c294:	f083 0301 	eor.w	r3, r3, #1
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d009      	beq.n	800c2b2 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 f913 	bl	800c4cc <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	6a39      	ldr	r1, [r7, #32]
 800c2ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2ae:	f000 f930 	bl	800c512 <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800c2b2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800c2be:	461a      	mov	r2, r3
 800c2c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2c2:	f000 f934 	bl	800c52e <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	69ba      	ldr	r2, [r7, #24]
 800c2ca:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2d0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	69ba      	ldr	r2, [r7, #24]
 800c2d8:	441a      	add	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	609a      	str	r2, [r3, #8]
    }
 800c2de:	bf00      	nop
 800c2e0:	3730      	adds	r7, #48	; 0x30
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bdb0      	pop	{r4, r5, r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	080172e8 	.word	0x080172e8

0800c2ec <_ZN9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	601a      	str	r2, [r3, #0]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4618      	mov	r0, r3
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	bc80      	pop	{r7}
 800c308:	4770      	bx	lr

0800c30a <_ZNK9__gnu_cxx17__normal_iteratorIPKP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c30a:	b480      	push	{r7}
 800c30c:	b083      	sub	sp, #12
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4618      	mov	r0, r3
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	bc80      	pop	{r7}
 800c31c:	4770      	bx	lr

0800c31e <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c31e:	b590      	push	{r4, r7, lr}
 800c320:	b083      	sub	sp, #12
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f7ff fe71 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c32e:	4603      	mov	r3, r0
 800c330:	681c      	ldr	r4, [r3, #0]
 800c332:	6838      	ldr	r0, [r7, #0]
 800c334:	f7ff fe6c 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c338:	4603      	mov	r3, r0
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	429c      	cmp	r4, r3
 800c33e:	bf14      	ite	ne
 800c340:	2301      	movne	r3, #1
 800c342:	2300      	moveq	r3, #0
 800c344:	b2db      	uxtb	r3, r3
 800c346:	4618      	mov	r0, r3
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd90      	pop	{r4, r7, pc}

0800c34e <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 800c34e:	b590      	push	{r4, r7, lr}
 800c350:	b085      	sub	sp, #20
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	60b9      	str	r1, [r7, #8]
 800c358:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 f8fa 	bl	800c554 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800c360:	4604      	mov	r4, r0
 800c362:	68b8      	ldr	r0, [r7, #8]
 800c364:	f000 f8f6 	bl	800c554 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800c368:	4603      	mov	r3, r0
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	4619      	mov	r1, r3
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 f8fa 	bl	800c568 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800c374:	4603      	mov	r3, r0
    }
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd90      	pop	{r4, r7, pc}

0800c37e <_ZNSt16allocator_traitsISaIP14CommandHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f90d 	bl	800c5aa <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE7destroyIS2_EEvPT_>
 800c390:	bf00      	nop
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c398:	b590      	push	{r4, r7, lr}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7ff fea2 	bl	800c0ee <_ZSt7forwardIP14CommandHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	681c      	ldr	r4, [r3, #0]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	2004      	movs	r0, #4
 800c3b4:	f7fc fdff 	bl	8008fb6 <_ZnwjPv>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	601c      	str	r4, [r3, #0]
 800c3bc:	bf00      	nop
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd90      	pop	{r4, r7, pc}

0800c3c4 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800c3c4:	b590      	push	{r4, r7, lr}
 800c3c6:	b087      	sub	sp, #28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f000 f8f4 	bl	800c5be <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f7ff fd43 	bl	800be64 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	1ae2      	subs	r2, r4, r3
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	bf34      	ite	cc
 800c3e8:	2301      	movcc	r3, #1
 800c3ea:	2300      	movcs	r3, #0
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f009 f864 	bl	80154c0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f7ff fd33 	bl	800be64 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800c3fe:	4604      	mov	r4, r0
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7ff fd2f 	bl	800be64 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800c406:	4603      	mov	r3, r0
 800c408:	613b      	str	r3, [r7, #16]
 800c40a:	f107 0208 	add.w	r2, r7, #8
 800c40e:	f107 0310 	add.w	r3, r7, #16
 800c412:	4611      	mov	r1, r2
 800c414:	4618      	mov	r0, r3
 800c416:	f7fd fa15 	bl	8009844 <_ZSt3maxIjERKT_S2_S2_>
 800c41a:	4603      	mov	r3, r0
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4423      	add	r3, r4
 800c420:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f7ff fd1e 	bl	800be64 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE4sizeEv>
 800c428:	4602      	mov	r2, r0
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d306      	bcc.n	800c43e <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f000 f8c4 	bl	800c5be <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800c436:	4602      	mov	r2, r0
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d904      	bls.n	800c448 <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x84>
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f000 f8bd 	bl	800c5be <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>
 800c444:	4603      	mov	r3, r0
 800c446:	e000      	b.n	800c44a <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800c448:	697b      	ldr	r3, [r7, #20]
      }
 800c44a:	4618      	mov	r0, r3
 800c44c:	371c      	adds	r7, #28
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd90      	pop	{r4, r7, pc}

0800c452 <_ZN9__gnu_cxxmiIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c452:	b590      	push	{r4, r7, lr}
 800c454:	b083      	sub	sp, #12
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff fdd7 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c462:	4603      	mov	r3, r0
 800c464:	681c      	ldr	r4, [r3, #0]
 800c466:	6838      	ldr	r0, [r7, #0]
 800c468:	f7ff fdd2 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c46c:	4603      	mov	r3, r0
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	1ae3      	subs	r3, r4, r3
 800c472:	109b      	asrs	r3, r3, #2
 800c474:	4618      	mov	r0, r3
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd90      	pop	{r4, r7, pc}

0800c47c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d006      	beq.n	800c49a <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj+0x1e>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	4618      	mov	r0, r3
 800c492:	f000 f8a5 	bl	800c5e0 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8allocateERS2_j>
 800c496:	4603      	mov	r3, r0
 800c498:	e000      	b.n	800c49c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE11_M_allocateEj+0x20>
 800c49a:	2300      	movs	r3, #0
      }
 800c49c:	4618      	mov	r0, r3
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c4a4:	b590      	push	{r4, r7, lr}
 800c4a6:	b089      	sub	sp, #36	; 0x24
 800c4a8:	af02      	add	r7, sp, #8
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c4b2:	f88d 4000 	strb.w	r4, [sp]
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	68b9      	ldr	r1, [r7, #8]
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f000 f89e 	bl	800c5fe <_ZNSt6vectorIP14CommandHandlerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800c4c2:	4603      	mov	r3, r0
      }
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	371c      	adds	r7, #28
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd90      	pop	{r4, r7, pc}

0800c4cc <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	370c      	adds	r7, #12
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bc80      	pop	{r7}
 800c4de:	4770      	bx	lr

0800c4e0 <_ZSt34__uninitialized_move_if_noexcept_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800c4e0:	b590      	push	{r4, r7, lr}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 f897 	bl	800c622 <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	68b8      	ldr	r0, [r7, #8]
 800c4f8:	f000 f893 	bl	800c622 <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>
 800c4fc:	4601      	mov	r1, r0
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	4620      	mov	r0, r4
 800c504:	f000 f89c 	bl	800c640 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14CommandHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800c508:	4603      	mov	r3, r0
    }
 800c50a:	4618      	mov	r0, r3
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd90      	pop	{r4, r7, pc}

0800c512 <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c512:	b580      	push	{r7, lr}
 800c514:	b084      	sub	sp, #16
 800c516:	af00      	add	r7, sp, #0
 800c518:	60f8      	str	r0, [r7, #12]
 800c51a:	60b9      	str	r1, [r7, #8]
 800c51c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c51e:	68b9      	ldr	r1, [r7, #8]
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f000 f89e 	bl	800c662 <_ZSt8_DestroyIPP14CommandHandlerEvT_S3_>
    }
 800c526:	bf00      	nop
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
	if (__p)
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d005      	beq.n	800c54c <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	68b9      	ldr	r1, [r7, #8]
 800c546:	4618      	mov	r0, r3
 800c548:	f000 f898 	bl	800c67c <_ZNSt16allocator_traitsISaIP14CommandHandlerEE10deallocateERS2_PS1_j>
      }
 800c54c:	bf00      	nop
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	bc80      	pop	{r7}
 800c566:	4770      	bx	lr

0800c568 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800c568:	b5b0      	push	{r4, r5, r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f000 f890 	bl	800c69a <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800c57a:	4604      	mov	r4, r0
 800c57c:	68b8      	ldr	r0, [r7, #8]
 800c57e:	f000 f88c 	bl	800c69a <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800c582:	4605      	mov	r5, r0
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f888 	bl	800c69a <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800c58a:	4603      	mov	r3, r0
 800c58c:	461a      	mov	r2, r3
 800c58e:	4629      	mov	r1, r5
 800c590:	4620      	mov	r0, r4
 800c592:	f000 f890 	bl	800c6b6 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800c596:	4603      	mov	r3, r0
 800c598:	4619      	mov	r1, r3
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f89d 	bl	800c6da <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 800c5a0:	4603      	mov	r3, r0
    }
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bdb0      	pop	{r4, r5, r7, pc}

0800c5aa <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800c5b4:	bf00      	nop
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bc80      	pop	{r7}
 800c5bc:	4770      	bx	lr

0800c5be <_ZNKSt6vectorIP14CommandHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b082      	sub	sp, #8
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 f8b7 	bl	800c73c <_ZNKSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f000 f899 	bl	800c708 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE11_S_max_sizeERKS2_>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f8ae 	bl	800c750 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <_ZNSt6vectorIP14CommandHandlerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	60f8      	str	r0, [r7, #12]
 800c606:	60b9      	str	r1, [r7, #8]
 800c608:	607a      	str	r2, [r7, #4]
 800c60a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	68b9      	ldr	r1, [r7, #8]
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f000 f8ba 	bl	800c78c <_ZSt12__relocate_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800c618:	4603      	mov	r3, r0
      }
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <_ZSt32__make_move_if_noexcept_iteratorIP14CommandHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800c62a:	f107 030c 	add.w	r3, r7, #12
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	4618      	mov	r0, r3
 800c632:	f000 f8c8 	bl	800c7c6 <_ZNSt13move_iteratorIPP14CommandHandlerEC1ES2_>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14CommandHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	68b9      	ldr	r1, [r7, #8]
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f000 f8c5 	bl	800c7e2 <_ZSt18uninitialized_copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>
 800c658:	4603      	mov	r3, r0
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <_ZSt8_DestroyIPP14CommandHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c662:	b580      	push	{r7, lr}
 800c664:	b082      	sub	sp, #8
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f8c9 	bl	800c806 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14CommandHandlerEEvT_S5_>
    }
 800c674:	bf00      	nop
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <_ZNSt16allocator_traitsISaIP14CommandHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	68b9      	ldr	r1, [r7, #8]
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f000 f8c4 	bl	800c81a <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE10deallocateEPS2_j>
 800c692:	bf00      	nop
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b082      	sub	sp, #8
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800c6a2:	1d3b      	adds	r3, r7, #4
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff fcb3 	bl	800c010 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b086      	sub	sp, #24
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	60f8      	str	r0, [r7, #12]
 800c6be:	60b9      	str	r1, [r7, #8]
 800c6c0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	68b9      	ldr	r1, [r7, #8]
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f000 f8b2 	bl	800c834 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_>
 800c6d0:	4603      	mov	r3, r0
    }
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b082      	sub	sp, #8
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff ffd8 	bl	800c69a <_ZSt12__niter_baseIPP14CommandHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	1a9b      	subs	r3, r3, r2
 800c6f0:	109b      	asrs	r3, r3, #2
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	1d3b      	adds	r3, r7, #4
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff fbf2 	bl	800bee2 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800c6fe:	4603      	mov	r3, r0
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800c710:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c714:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f8a9 	bl	800c86e <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8max_sizeERKS2_>
 800c71c:	4603      	mov	r3, r0
 800c71e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800c720:	f107 0208 	add.w	r2, r7, #8
 800c724:	f107 030c 	add.w	r3, r7, #12
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fd f9f0 	bl	8009b10 <_ZSt3minIjERKT_S2_S2_>
 800c730:	4603      	mov	r3, r0
 800c732:	681b      	ldr	r3, [r3, #0]
      }
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <_ZNKSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4618      	mov	r0, r3
 800c748:	370c      	adds	r7, #12
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bc80      	pop	{r7}
 800c74e:	4770      	bx	lr

0800c750 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f000 f892 	bl	800c886 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>
 800c762:	4602      	mov	r2, r0
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	4293      	cmp	r3, r2
 800c768:	bf8c      	ite	hi
 800c76a:	2301      	movhi	r3, #1
 800c76c:	2300      	movls	r3, #0
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c774:	f008 fe9b 	bl	80154ae <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4618      	mov	r0, r3
 800c77e:	f008 fe81 	bl	8015484 <_Znwj>
 800c782:	4603      	mov	r3, r0
      }
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <_ZSt12__relocate_aIPP14CommandHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800c78c:	b5b0      	push	{r4, r5, r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 f87e 	bl	800c89c <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	68b8      	ldr	r0, [r7, #8]
 800c7a4:	f000 f87a 	bl	800c89c <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f876 	bl	800c89c <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 f87a 	bl	800c8b0 <_ZSt14__relocate_a_1IP14CommandHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800c7bc:	4603      	mov	r3, r0
    }
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bdb0      	pop	{r4, r5, r7, pc}

0800c7c6 <_ZNSt13move_iteratorIPP14CommandHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bc80      	pop	{r7}
 800c7e0:	4770      	bx	lr

0800c7e2 <_ZSt18uninitialized_copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b086      	sub	sp, #24
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	60f8      	str	r0, [r7, #12]
 800c7ea:	60b9      	str	r1, [r7, #8]
 800c7ec:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	68b9      	ldr	r1, [r7, #8]
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f000 f878 	bl	800c8ec <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14CommandHandlerES5_EET0_T_S8_S7_>
 800c7fc:	4603      	mov	r3, r0
    }
 800c7fe:	4618      	mov	r0, r3
 800c800:	3718      	adds	r7, #24
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14CommandHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c806:	b480      	push	{r7}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	bc80      	pop	{r7}
 800c818:	4770      	bx	lr

0800c81a <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	60f8      	str	r0, [r7, #12]
 800c822:	60b9      	str	r1, [r7, #8]
 800c824:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800c826:	68b8      	ldr	r0, [r7, #8]
 800c828:	f008 fe28 	bl	801547c <_ZdlPv>
      }
 800c82c:	bf00      	nop
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	109b      	asrs	r3, r3, #2
 800c848:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d006      	beq.n	800c85e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14CommandHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	461a      	mov	r2, r3
 800c856:	68f9      	ldr	r1, [r7, #12]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f009 ffc5 	bl	80167e8 <memmove>
	  return __result + _Num;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4413      	add	r3, r2
	}
 800c866:	4618      	mov	r0, r3
 800c868:	3718      	adds	r7, #24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <_ZNSt16allocator_traitsISaIP14CommandHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800c86e:	b580      	push	{r7, lr}
 800c870:	b082      	sub	sp, #8
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f805 	bl	800c886 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>
 800c87c:	4603      	mov	r3, r0
 800c87e:	4618      	mov	r0, r3
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <_ZNK9__gnu_cxx13new_allocatorIP14CommandHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800c886:	b480      	push	{r7}
 800c888:	b083      	sub	sp, #12
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c88e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800c892:	4618      	mov	r0, r3
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	bc80      	pop	{r7}
 800c89a:	4770      	bx	lr

0800c89c <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>:
    __niter_base(_Iterator __it)
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bc80      	pop	{r7}
 800c8ae:	4770      	bx	lr

0800c8b0 <_ZSt14__relocate_a_1IP14CommandHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
 800c8bc:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	109b      	asrs	r3, r3, #2
 800c8c6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	dd06      	ble.n	800c8dc <_ZSt14__relocate_a_1IP14CommandHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	68f9      	ldr	r1, [r7, #12]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f009 ff86 	bl	80167e8 <memmove>
      return __result + __count;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	4413      	add	r3, r2
    }
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3718      	adds	r7, #24
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14CommandHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	68b9      	ldr	r1, [r7, #8]
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f000 f805 	bl	800c90c <_ZSt4copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>
 800c902:	4603      	mov	r3, r0
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <_ZSt4copyISt13move_iteratorIPP14CommandHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800c90c:	b590      	push	{r4, r7, lr}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f000 f80f 	bl	800c93c <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800c91e:	4604      	mov	r4, r0
 800c920:	68b8      	ldr	r0, [r7, #8]
 800c922:	f000 f80b 	bl	800c93c <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800c926:	4603      	mov	r3, r0
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	4619      	mov	r1, r3
 800c92c:	4620      	mov	r0, r4
 800c92e:	f000 f816 	bl	800c95e <_ZSt14__copy_move_a2ILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800c932:	4603      	mov	r3, r0
    }
 800c934:	4618      	mov	r0, r3
 800c936:	3714      	adds	r7, #20
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd90      	pop	{r4, r7, pc}

0800c93c <_ZSt12__miter_baseIPP14CommandHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800c944:	1d3b      	adds	r3, r7, #4
 800c946:	4618      	mov	r0, r3
 800c948:	f000 f82c 	bl	800c9a4 <_ZNKSt13move_iteratorIPP14CommandHandlerE4baseEv>
 800c94c:	4603      	mov	r3, r0
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 f833 	bl	800c9ba <_ZSt12__miter_baseIPP14CommandHandlerET_S3_>
 800c954:	4603      	mov	r3, r0
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <_ZSt14__copy_move_a2ILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800c95e:	b5b0      	push	{r4, r5, r7, lr}
 800c960:	b084      	sub	sp, #16
 800c962:	af00      	add	r7, sp, #0
 800c964:	60f8      	str	r0, [r7, #12]
 800c966:	60b9      	str	r1, [r7, #8]
 800c968:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f7ff ff96 	bl	800c89c <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800c970:	4604      	mov	r4, r0
 800c972:	68b8      	ldr	r0, [r7, #8]
 800c974:	f7ff ff92 	bl	800c89c <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800c978:	4605      	mov	r5, r0
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7ff ff8d 	bl	800c89c <_ZSt12__niter_baseIPP14CommandHandlerET_S3_>
 800c982:	4603      	mov	r3, r0
 800c984:	461a      	mov	r2, r3
 800c986:	4629      	mov	r1, r5
 800c988:	4620      	mov	r0, r4
 800c98a:	f7ff fe94 	bl	800c6b6 <_ZSt13__copy_move_aILb1EPP14CommandHandlerS2_ET1_T0_S4_S3_>
 800c98e:	4602      	mov	r2, r0
 800c990:	1d3b      	adds	r3, r7, #4
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f000 f81a 	bl	800c9ce <_ZSt12__niter_wrapIPP14CommandHandlerET_RKS3_S3_>
 800c99a:	4603      	mov	r3, r0
    }
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c9a4 <_ZNKSt13move_iteratorIPP14CommandHandlerE4baseEv>:
      base() const
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bc80      	pop	{r7}
 800c9b8:	4770      	bx	lr

0800c9ba <_ZSt12__miter_baseIPP14CommandHandlerET_S3_>:
    __miter_base(_Iterator __it)
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bc80      	pop	{r7}
 800c9cc:	4770      	bx	lr

0800c9ce <_ZSt12__niter_wrapIPP14CommandHandlerET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800c9ce:	b480      	push	{r7}
 800c9d0:	b083      	sub	sp, #12
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	6039      	str	r1, [r7, #0]
    { return __res; }
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bc80      	pop	{r7}
 800c9e2:	4770      	bx	lr

0800c9e4 <_ZN12EncoderLocalC1Ev>:
 *      Author: Yannick
 */

#include "EncoderLocal.h"

EncoderLocal::EncoderLocal() {
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 f94e 	bl	800cc90 <_ZN11ExtiHandlerC1Ev>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f004 fd19 	bl	8011430 <_ZN12TimerHandlerC1Ev>
 800c9fe:	4a21      	ldr	r2, [pc, #132]	; (800ca84 <_ZN12EncoderLocalC1Ev+0xa0>)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	4a20      	ldr	r2, [pc, #128]	; (800ca88 <_ZN12EncoderLocalC1Ev+0xa4>)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	605a      	str	r2, [r3, #4]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	609a      	str	r2, [r3, #8]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ca16:	60da      	str	r2, [r3, #12]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	611a      	str	r2, [r3, #16]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	615a      	str	r2, [r3, #20]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	619a      	str	r2, [r3, #24]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	61da      	str	r2, [r3, #28]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	621a      	str	r2, [r3, #32]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	625a      	str	r2, [r3, #36]	; 0x24
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	629a      	str	r2, [r3, #40]	; 0x28
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	this->htim = &TIM_ENC;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a0e      	ldr	r2, [pc, #56]	; (800ca8c <_ZN12EncoderLocalC1Ev+0xa8>)
 800ca54:	631a      	str	r2, [r3, #48]	; 0x30
	setPos(0);
 800ca56:	2100      	movs	r1, #0
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f893 	bl	800cb84 <_ZN12EncoderLocal6setPosEl>

	this->htim->Instance->CR1 = 1;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2201      	movs	r2, #1
 800ca66:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(htim);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7fa f84a 	bl	8006b06 <HAL_TIM_Base_Start_IT>
	offset = 0;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	609a      	str	r2, [r3, #8]

}
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	08017704 	.word	0x08017704
 800ca88:	0801771c 	.word	0x0801771c
 800ca8c:	20001198 	.word	0x20001198

0800ca90 <_ZN12EncoderLocalD1Ev>:

EncoderLocal::~EncoderLocal() {
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	4a0c      	ldr	r2, [pc, #48]	; (800cacc <_ZN12EncoderLocalD1Ev+0x3c>)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	4a0c      	ldr	r2, [pc, #48]	; (800cad0 <_ZN12EncoderLocalD1Ev+0x40>)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	605a      	str	r2, [r3, #4]
	this->htim->Instance->CR1 = 0;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2200      	movs	r2, #0
 800caac:	601a      	str	r2, [r3, #0]
EncoderLocal::~EncoderLocal() {
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	3304      	adds	r3, #4
 800cab2:	4618      	mov	r0, r3
 800cab4:	f004 fcd4 	bl	8011460 <_ZN12TimerHandlerD1Ev>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 f900 	bl	800ccc0 <_ZN11ExtiHandlerD1Ev>
}
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4618      	mov	r0, r3
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	08017704 	.word	0x08017704
 800cad0:	0801771c 	.word	0x0801771c

0800cad4 <_ZThn4_N12EncoderLocalD1Ev>:

class EncoderLocal: public ExtiHandler, TimerHandler {
public:

	EncoderLocal();
	virtual ~EncoderLocal();
 800cad4:	f1a0 0004 	sub.w	r0, r0, #4
 800cad8:	f7ff bfda 	b.w	800ca90 <_ZN12EncoderLocalD1Ev>

0800cadc <_ZN12EncoderLocalD0Ev>:
EncoderLocal::~EncoderLocal() {
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
}
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7ff ffd3 	bl	800ca90 <_ZN12EncoderLocalD1Ev>
 800caea:	2138      	movs	r1, #56	; 0x38
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f008 fcc7 	bl	8015480 <_ZdlPvj>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4618      	mov	r0, r3
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <_ZThn4_N12EncoderLocalD0Ev>:
 800cafc:	f1a0 0004 	sub.w	r0, r0, #4
 800cb00:	f7ff bfec 	b.w	800cadc <_ZN12EncoderLocalD0Ev>

0800cb04 <_ZN12EncoderLocal8getPos_fEv>:

float EncoderLocal::getPos_f(){
 800cb04:	b590      	push	{r4, r7, lr}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
	if(getPpr() == 0){
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f8a7 	bl	800cc60 <_ZN12EncoderLocal6getPprEv>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	bf0c      	ite	eq
 800cb18:	2301      	moveq	r3, #1
 800cb1a:	2300      	movne	r3, #0
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d002      	beq.n	800cb28 <_ZN12EncoderLocal8getPos_fEv+0x24>
		return 0.0;
 800cb22:	f04f 0300 	mov.w	r3, #0
 800cb26:	e014      	b.n	800cb52 <_ZN12EncoderLocal8getPos_fEv+0x4e>
	}
	return (float)this->getPos() / (float)this->getPpr();
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f816 	bl	800cb5a <_ZN12EncoderLocal6getPosEv>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f3 ffed 	bl	8000b10 <__aeabi_i2f>
 800cb36:	4604      	mov	r4, r0
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f891 	bl	800cc60 <_ZN12EncoderLocal6getPprEv>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7f3 ffe1 	bl	8000b08 <__aeabi_ui2f>
 800cb46:	4603      	mov	r3, r0
 800cb48:	4619      	mov	r1, r3
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f7f4 f8e8 	bl	8000d20 <__aeabi_fdiv>
 800cb50:	4603      	mov	r3, r0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	370c      	adds	r7, #12
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd90      	pop	{r4, r7, pc}

0800cb5a <_ZN12EncoderLocal6getPosEv>:

int32_t EncoderLocal::getPos(){
 800cb5a:	b480      	push	{r7}
 800cb5c:	b085      	sub	sp, #20
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
	int32_t timpos = htim->Instance->CNT - 0x7fff;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6a:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800cb6e:	3b7f      	subs	r3, #127	; 0x7f
 800cb70:	60fb      	str	r3, [r7, #12]
	return timpos + offset;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	689a      	ldr	r2, [r3, #8]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	4413      	add	r3, r2
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bc80      	pop	{r7}
 800cb82:	4770      	bx	lr

0800cb84 <_ZN12EncoderLocal6setPosEl>:
void EncoderLocal::setPos(int32_t pos){
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
	this->currentPosition = pos;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	615a      	str	r2, [r3, #20]
	htim->Instance->CNT = pos+0x7fff;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800cb9a:	337f      	adds	r3, #127	; 0x7f
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cba0:	6812      	ldr	r2, [r2, #0]
 800cba2:	6253      	str	r3, [r2, #36]	; 0x24
}
 800cba4:	bf00      	nop
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bc80      	pop	{r7}
 800cbac:	4770      	bx	lr

0800cbae <_ZN12EncoderLocal4extiEt>:

void EncoderLocal::setPeriod(uint32_t period){
	this->htim->Instance->ARR = period-1;
}

void EncoderLocal::exti(uint16_t GPIO_Pin){
 800cbae:	b480      	push	{r7}
 800cbb0:	b083      	sub	sp, #12
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	807b      	strh	r3, [r7, #2]
	if(GPIO_Pin == ENCODER_Z_Pin){
		//setPos(0);
	}
}
 800cbba:	bf00      	nop
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bc80      	pop	{r7}
 800cbc2:	4770      	bx	lr

0800cbc4 <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:

void EncoderLocal::timerElapsed(TIM_HandleTypeDef* htim){
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
	if(htim == this->htim){
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d102      	bne.n	800cbde <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef+0x1a>
		overflowCallback();
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f808 	bl	800cbee <_ZN12EncoderLocal16overflowCallbackEv>
	}
}
 800cbde:	bf00      	nop
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <_ZThn4_N12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>:
	uint32_t getPosCpr();
	void setPos(int32_t pos);
	void setPeriod(uint32_t period);
	void overflowCallback();
	void exti(uint16_t GPIO_Pin);
	void timerElapsed(TIM_HandleTypeDef* htim);
 800cbe6:	f1a0 0004 	sub.w	r0, r0, #4
 800cbea:	f7ff bfeb 	b.w	800cbc4 <_ZN12EncoderLocal12timerElapsedEP17TIM_HandleTypeDef>

0800cbee <_ZN12EncoderLocal16overflowCallbackEv>:

void EncoderLocal::overflowCallback(){
 800cbee:	b480      	push	{r7}
 800cbf0:	b083      	sub	sp, #12
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
	if(first)					//TODO: figure it out
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d004      	beq.n	800cc0a <_ZN12EncoderLocal16overflowCallbackEv+0x1c>
	{
		first = false;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return;
 800cc08:	e026      	b.n	800cc58 <_ZN12EncoderLocal16overflowCallbackEv+0x6a>
	}
	if(htim->Instance->CNT > this->htim->Instance->ARR/2){
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1a:	085b      	lsrs	r3, r3, #1
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	bf8c      	ite	hi
 800cc20:	2301      	movhi	r3, #1
 800cc22:	2300      	movls	r3, #0
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00b      	beq.n	800cc42 <_ZN12EncoderLocal16overflowCallbackEv+0x54>
		offset -= htim->Instance->ARR+1;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc32:	3301      	adds	r3, #1
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	6892      	ldr	r2, [r2, #8]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	609a      	str	r2, [r3, #8]
 800cc40:	e00a      	b.n	800cc58 <_ZN12EncoderLocal16overflowCallbackEv+0x6a>
	}else{
		offset += htim->Instance->ARR+1;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	6892      	ldr	r2, [r2, #8]
 800cc50:	4413      	add	r3, r2
 800cc52:	461a      	mov	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	609a      	str	r2, [r3, #8]
	}
}
 800cc58:	370c      	adds	r7, #12
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bc80      	pop	{r7}
 800cc5e:	4770      	bx	lr

0800cc60 <_ZN12EncoderLocal6getPprEv>:

uint32_t EncoderLocal::getPpr(){
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	return this->ppr;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	68db      	ldr	r3, [r3, #12]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bc80      	pop	{r7}
 800cc74:	4770      	bx	lr

0800cc76 <_ZN12EncoderLocal6setPprEm>:

uint32_t EncoderLocal::getPosCpr(){
	return this->ppr;
}

void EncoderLocal::setPpr(uint32_t ppr){
 800cc76:	b480      	push	{r7}
 800cc78:	b083      	sub	sp, #12
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	6039      	str	r1, [r7, #0]
	this->ppr = ppr;
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	60da      	str	r2, [r3, #12]
}
 800cc86:	bf00      	nop
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bc80      	pop	{r7}
 800cc8e:	4770      	bx	lr

0800cc90 <_ZN11ExtiHandlerC1Ev>:

#include "ExtiHandler.h"
#include "global_callbacks.h"
#include "vector"

ExtiHandler::ExtiHandler() {
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	4a07      	ldr	r2, [pc, #28]	; (800ccb8 <_ZN11ExtiHandlerC1Ev+0x28>)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	601a      	str	r2, [r3, #0]
	extern std::vector<ExtiHandler*> extiHandlers;
	extiHandlers.push_back(this);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	60fb      	str	r3, [r7, #12]
 800cca2:	f107 030c 	add.w	r3, r7, #12
 800cca6:	4619      	mov	r1, r3
 800cca8:	4804      	ldr	r0, [pc, #16]	; (800ccbc <_ZN11ExtiHandlerC1Ev+0x2c>)
 800ccaa:	f000 f870 	bl	800cd8e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE9push_backEOS1_>
}
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	08017730 	.word	0x08017730
 800ccbc:	200007bc 	.word	0x200007bc

0800ccc0 <_ZN11ExtiHandlerD1Ev>:

ExtiHandler::~ExtiHandler() {
 800ccc0:	b590      	push	{r4, r7, lr}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	4a21      	ldr	r2, [pc, #132]	; (800cd50 <_ZN11ExtiHandlerD1Ev+0x90>)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	601a      	str	r2, [r3, #0]
	extern std::vector<ExtiHandler*> extiHandlers;
	for (uint8_t i = 0; i < extiHandlers.size(); i++){
 800ccce:	2300      	movs	r3, #0
 800ccd0:	75fb      	strb	r3, [r7, #23]
 800ccd2:	7dfc      	ldrb	r4, [r7, #23]
 800ccd4:	481f      	ldr	r0, [pc, #124]	; (800cd54 <_ZN11ExtiHandlerD1Ev+0x94>)
 800ccd6:	f000 f86b 	bl	800cdb0 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	429c      	cmp	r4, r3
 800ccde:	bf34      	ite	cc
 800cce0:	2301      	movcc	r3, #1
 800cce2:	2300      	movcs	r3, #0
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d02d      	beq.n	800cd46 <_ZN11ExtiHandlerD1Ev+0x86>
		if(extiHandlers[i] == this){
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
 800ccec:	4619      	mov	r1, r3
 800ccee:	4819      	ldr	r0, [pc, #100]	; (800cd54 <_ZN11ExtiHandlerD1Ev+0x94>)
 800ccf0:	f000 f86d 	bl	800cdce <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEixEj>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	bf0c      	ite	eq
 800ccfe:	2301      	moveq	r3, #1
 800cd00:	2300      	movne	r3, #0
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d01a      	beq.n	800cd3e <_ZN11ExtiHandlerD1Ev+0x7e>
			extiHandlers.erase(extiHandlers.begin()+i);
 800cd08:	4812      	ldr	r0, [pc, #72]	; (800cd54 <_ZN11ExtiHandlerD1Ev+0x94>)
 800cd0a:	f000 f86f 	bl	800cdec <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	613b      	str	r3, [r7, #16]
 800cd12:	7dfa      	ldrb	r2, [r7, #23]
 800cd14:	f107 0310 	add.w	r3, r7, #16
 800cd18:	4611      	mov	r1, r2
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f000 f876 	bl	800ce0c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800cd20:	4603      	mov	r3, r0
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	f107 020c 	add.w	r2, r7, #12
 800cd28:	f107 0308 	add.w	r3, r7, #8
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 f884 	bl	800ce3c <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 800cd34:	68b9      	ldr	r1, [r7, #8]
 800cd36:	4807      	ldr	r0, [pc, #28]	; (800cd54 <_ZN11ExtiHandlerD1Ev+0x94>)
 800cd38:	f000 f891 	bl	800ce5e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 800cd3c:	e003      	b.n	800cd46 <_ZN11ExtiHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < extiHandlers.size(); i++){
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	3301      	adds	r3, #1
 800cd42:	75fb      	strb	r3, [r7, #23]
 800cd44:	e7c5      	b.n	800ccd2 <_ZN11ExtiHandlerD1Ev+0x12>
		}
	}
}
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	371c      	adds	r7, #28
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd90      	pop	{r4, r7, pc}
 800cd50:	08017730 	.word	0x08017730
 800cd54:	200007bc 	.word	0x200007bc

0800cd58 <_ZN11ExtiHandlerD0Ev>:
ExtiHandler::~ExtiHandler() {
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
}
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7ff ffad 	bl	800ccc0 <_ZN11ExtiHandlerD1Ev>
 800cd66:	2104      	movs	r1, #4
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f008 fb89 	bl	8015480 <_ZdlPvj>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4618      	mov	r0, r3
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <_ZN11ExtiHandler4extiEt>:

void ExtiHandler::exti(uint16_t GPIO_Pin){
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	460b      	mov	r3, r1
 800cd82:	807b      	strh	r3, [r7, #2]

}
 800cd84:	bf00      	nop
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bc80      	pop	{r7}
 800cd8c:	4770      	bx	lr

0800cd8e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800cd98:	6838      	ldr	r0, [r7, #0]
 800cd9a:	f000 f887 	bl	800ceac <_ZSt4moveIRP11ExtiHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	4619      	mov	r1, r3
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f88c 	bl	800cec0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	109b      	asrs	r3, r3, #2
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bc80      	pop	{r7}
 800cdcc:	4770      	bx	lr

0800cdce <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800cdce:	b480      	push	{r7}
 800cdd0:	b083      	sub	sp, #12
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	4413      	add	r3, r2
      }
 800cde2:	4618      	mov	r0, r3
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bc80      	pop	{r7}
 800cdea:	4770      	bx	lr

0800cdec <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	f107 030c 	add.w	r3, r7, #12
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 f88d 	bl	800cf1c <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	f107 020c 	add.w	r2, r7, #12
 800ce26:	f107 0308 	add.w	r3, r7, #8
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 f875 	bl	800cf1c <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	4618      	mov	r0, r3
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800ce46:	6838      	ldr	r0, [r7, #0]
 800ce48:	f000 f877 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4618      	mov	r0, r3
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b084      	sub	sp, #16
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
 800ce66:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7ff ffbf 	bl	800cdec <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	60bb      	str	r3, [r7, #8]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 f86b 	bl	800cf4e <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE6cbeginEv>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	f107 020c 	add.w	r2, r7, #12
 800ce80:	463b      	mov	r3, r7
 800ce82:	4611      	mov	r1, r2
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 f876 	bl	800cf76 <_ZN9__gnu_cxxmiIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	f107 0308 	add.w	r3, r7, #8
 800ce90:	4611      	mov	r1, r2
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7ff ffba 	bl	800ce0c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f87f 	bl	800cfa0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 800cea2:	4603      	mov	r3, r0
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <_ZSt4moveIRP11ExtiHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bc80      	pop	{r7}
 800cebe:	4770      	bx	lr

0800cec0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800cec0:	b5b0      	push	{r4, r5, r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d011      	beq.n	800cefa <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ced6:	687c      	ldr	r4, [r7, #4]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685d      	ldr	r5, [r3, #4]
 800cedc:	6838      	ldr	r0, [r7, #0]
 800cede:	f000 f89b 	bl	800d018 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800cee2:	4603      	mov	r3, r0
 800cee4:	461a      	mov	r2, r3
 800cee6:	4629      	mov	r1, r5
 800cee8:	4620      	mov	r0, r4
 800ceea:	f000 f89f 	bl	800d02c <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	1d1a      	adds	r2, r3, #4
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	605a      	str	r2, [r3, #4]
      }
 800cef8:	e00c      	b.n	800cf14 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f8a9 	bl	800d052 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800cf00:	4604      	mov	r4, r0
 800cf02:	6838      	ldr	r0, [r7, #0]
 800cf04:	f000 f888 	bl	800d018 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 f8c6 	bl	800d0a0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800cf14:	bf00      	nop
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bdb0      	pop	{r4, r5, r7, pc}

0800cf1c <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4618      	mov	r0, r3
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bc80      	pop	{r7}
 800cf38:	4770      	bx	lr

0800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cf3a:	b480      	push	{r7}
 800cf3c:	b083      	sub	sp, #12
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bc80      	pop	{r7}
 800cf4c:	4770      	bx	lr

0800cf4e <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	f107 020c 	add.w	r2, r7, #12
 800cf60:	f107 0308 	add.w	r3, r7, #8
 800cf64:	4611      	mov	r1, r2
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 f956 	bl	800d218 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <_ZN9__gnu_cxxmiIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cf76:	b590      	push	{r4, r7, lr}
 800cf78:	b083      	sub	sp, #12
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f958 	bl	800d236 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800cf86:	4603      	mov	r3, r0
 800cf88:	681c      	ldr	r4, [r3, #0]
 800cf8a:	6838      	ldr	r0, [r7, #0]
 800cf8c:	f000 f953 	bl	800d236 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800cf90:	4603      	mov	r3, r0
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	1ae3      	subs	r3, r4, r3
 800cf96:	109b      	asrs	r3, r3, #2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd90      	pop	{r4, r7, pc}

0800cfa0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 800cfa0:	b590      	push	{r4, r7, lr}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800cfaa:	463b      	mov	r3, r7
 800cfac:	2101      	movs	r1, #1
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7ff ff2c 	bl	800ce0c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	60bb      	str	r3, [r7, #8]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f84a 	bl	800d052 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	60fb      	str	r3, [r7, #12]
 800cfc2:	f107 020c 	add.w	r2, r7, #12
 800cfc6:	f107 0308 	add.w	r3, r7, #8
 800cfca:	4611      	mov	r1, r2
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 f93c 	bl	800d24a <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00e      	beq.n	800cff6 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800cfd8:	463b      	mov	r3, r7
 800cfda:	2101      	movs	r1, #1
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff ff15 	bl	800ce0c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 f834 	bl	800d052 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>
 800cfea:	4603      	mov	r3, r0
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	4619      	mov	r1, r3
 800cff0:	4620      	mov	r0, r4
 800cff2:	f000 f942 	bl	800d27a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	1f1a      	subs	r2, r3, #4
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	4619      	mov	r1, r3
 800d008:	4610      	mov	r0, r2
 800d00a:	f000 f94e 	bl	800d2aa <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 800d00e:	683b      	ldr	r3, [r7, #0]
    }
 800d010:	4618      	mov	r0, r3
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	bd90      	pop	{r4, r7, pc}

0800d018 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4618      	mov	r0, r3
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	bc80      	pop	{r7}
 800d02a:	4770      	bx	lr

0800d02c <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7ff ffed 	bl	800d018 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800d03e:	4603      	mov	r3, r0
 800d040:	461a      	mov	r2, r3
 800d042:	68b9      	ldr	r1, [r7, #8]
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 f93d 	bl	800d2c4 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 800d04a:	bf00      	nop
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d052:	b580      	push	{r7, lr}
 800d054:	b084      	sub	sp, #16
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	1d1a      	adds	r2, r3, #4
 800d05e:	f107 030c 	add.w	r3, r7, #12
 800d062:	4611      	mov	r1, r2
 800d064:	4618      	mov	r0, r3
 800d066:	f7ff ff59 	bl	800cf1c <_ZN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800d07a:	4618      	mov	r0, r3
 800d07c:	f000 f805 	bl	800d08a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800d080:	4603      	mov	r3, r0
      }
 800d082:	4618      	mov	r0, r3
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800d08a:	b480      	push	{r7}
 800d08c:	b083      	sub	sp, #12
 800d08e:	af00      	add	r7, sp, #0
 800d090:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800d092:	2301      	movs	r3, #1
      }
 800d094:	4618      	mov	r0, r3
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	bc80      	pop	{r7}
 800d09c:	4770      	bx	lr
	...

0800d0a0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800d0a0:	b5b0      	push	{r4, r5, r7, lr}
 800d0a2:	b08c      	sub	sp, #48	; 0x30
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
      const size_type __len =
 800d0ac:	4a59      	ldr	r2, [pc, #356]	; (800d214 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800d0ae:	2101      	movs	r1, #1
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f000 f91d 	bl	800d2f0 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc>
 800d0b6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f7ff fe91 	bl	800cdec <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE5beginEv>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	617b      	str	r3, [r7, #20]
 800d0ce:	f107 0214 	add.w	r2, r7, #20
 800d0d2:	f107 0308 	add.w	r3, r7, #8
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 f950 	bl	800d37e <_ZN9__gnu_cxxmiIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 f95e 	bl	800d3a8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj>
 800d0ec:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800d0f2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800d0f8:	69ba      	ldr	r2, [r7, #24]
 800d0fa:	18d5      	adds	r5, r2, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7ff ff8b 	bl	800d018 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800d102:	4603      	mov	r3, r0
 800d104:	461a      	mov	r2, r3
 800d106:	4629      	mov	r1, r5
 800d108:	4620      	mov	r0, r4
 800d10a:	f7ff ff8f 	bl	800d02c <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800d10e:	2300      	movs	r3, #0
 800d110:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800d112:	f7ff ffaf 	bl	800d074 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE15_S_use_relocateEv>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d027      	beq.n	800d16c <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d11c:	f107 0308 	add.w	r3, r7, #8
 800d120:	4618      	mov	r0, r3
 800d122:	f7ff ff0a 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d126:	4603      	mov	r3, r0
 800d128:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f000 f963 	bl	800d3f8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800d132:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d134:	69ba      	ldr	r2, [r7, #24]
 800d136:	4621      	mov	r1, r4
 800d138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d13a:	f000 f949 	bl	800d3d0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800d13e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800d140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d142:	3304      	adds	r3, #4
 800d144:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d146:	f107 0308 	add.w	r3, r7, #8
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7ff fef5 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d150:	4603      	mov	r3, r0
 800d152:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4618      	mov	r0, r3
 800d158:	f000 f94e 	bl	800d3f8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800d15c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d15e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d160:	6a39      	ldr	r1, [r7, #32]
 800d162:	4620      	mov	r0, r4
 800d164:	f000 f934 	bl	800d3d0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800d168:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d16a:	e026      	b.n	800d1ba <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800d16c:	f107 0308 	add.w	r3, r7, #8
 800d170:	4618      	mov	r0, r3
 800d172:	f7ff fee2 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d176:	4603      	mov	r3, r0
 800d178:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f000 f93b 	bl	800d3f8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800d182:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800d184:	69ba      	ldr	r2, [r7, #24]
 800d186:	4621      	mov	r1, r4
 800d188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d18a:	f000 f93f 	bl	800d40c <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800d18e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	3304      	adds	r3, #4
 800d194:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800d196:	f107 0308 	add.w	r3, r7, #8
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7ff fecd 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f000 f926 	bl	800d3f8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800d1ac:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800d1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1b0:	6a39      	ldr	r1, [r7, #32]
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f000 f92a 	bl	800d40c <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800d1b8:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800d1ba:	f7ff ff5b 	bl	800d074 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE15_S_use_relocateEv>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	f083 0301 	eor.w	r3, r3, #1
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d009      	beq.n	800d1de <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f000 f913 	bl	800d3f8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	6a39      	ldr	r1, [r7, #32]
 800d1d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1da:	f000 f930 	bl	800d43e <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800d1de:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	689a      	ldr	r2, [r3, #8]
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1ee:	f000 f934 	bl	800d45a <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	69ba      	ldr	r2, [r7, #24]
 800d1f6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1fc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	441a      	add	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	609a      	str	r2, [r3, #8]
    }
 800d20a:	bf00      	nop
 800d20c:	3730      	adds	r7, #48	; 0x30
 800d20e:	46bd      	mov	sp, r7
 800d210:	bdb0      	pop	{r4, r5, r7, pc}
 800d212:	bf00      	nop
 800d214:	08017304 	.word	0x08017304

0800d218 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	601a      	str	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	bc80      	pop	{r7}
 800d234:	4770      	bx	lr

0800d236 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d236:	b480      	push	{r7}
 800d238:	b083      	sub	sp, #12
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4618      	mov	r0, r3
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	bc80      	pop	{r7}
 800d248:	4770      	bx	lr

0800d24a <_ZN9__gnu_cxxneIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d24a:	b590      	push	{r4, r7, lr}
 800d24c:	b083      	sub	sp, #12
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff fe70 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d25a:	4603      	mov	r3, r0
 800d25c:	681c      	ldr	r4, [r3, #0]
 800d25e:	6838      	ldr	r0, [r7, #0]
 800d260:	f7ff fe6b 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d264:	4603      	mov	r3, r0
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	429c      	cmp	r4, r3
 800d26a:	bf14      	ite	ne
 800d26c:	2301      	movne	r3, #1
 800d26e:	2300      	moveq	r3, #0
 800d270:	b2db      	uxtb	r3, r3
 800d272:	4618      	mov	r0, r3
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	bd90      	pop	{r4, r7, pc}

0800d27a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 800d27a:	b590      	push	{r4, r7, lr}
 800d27c:	b085      	sub	sp, #20
 800d27e:	af00      	add	r7, sp, #0
 800d280:	60f8      	str	r0, [r7, #12]
 800d282:	60b9      	str	r1, [r7, #8]
 800d284:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f000 f8fa 	bl	800d480 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800d28c:	4604      	mov	r4, r0
 800d28e:	68b8      	ldr	r0, [r7, #8]
 800d290:	f000 f8f6 	bl	800d480 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 800d294:	4603      	mov	r3, r0
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	4619      	mov	r1, r3
 800d29a:	4620      	mov	r0, r4
 800d29c:	f000 f8fa 	bl	800d494 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 800d2a0:	4603      	mov	r3, r0
    }
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3714      	adds	r7, #20
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd90      	pop	{r4, r7, pc}

0800d2aa <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b082      	sub	sp, #8
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800d2b4:	6839      	ldr	r1, [r7, #0]
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f90d 	bl	800d4d6 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE7destroyIS2_EEvPT_>
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800d2c4:	b590      	push	{r4, r7, lr}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7ff fea1 	bl	800d018 <_ZSt7forwardIP11ExtiHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	681c      	ldr	r4, [r3, #0]
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	4619      	mov	r1, r3
 800d2de:	2004      	movs	r0, #4
 800d2e0:	f7fb fe69 	bl	8008fb6 <_ZnwjPv>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	601c      	str	r4, [r3, #0]
 800d2e8:	bf00      	nop
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd90      	pop	{r4, r7, pc}

0800d2f0 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800d2f0:	b590      	push	{r4, r7, lr}
 800d2f2:	b087      	sub	sp, #28
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f000 f8f4 	bl	800d4ea <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800d302:	4604      	mov	r4, r0
 800d304:	68f8      	ldr	r0, [r7, #12]
 800d306:	f7ff fd53 	bl	800cdb0 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800d30a:	4603      	mov	r3, r0
 800d30c:	1ae2      	subs	r2, r4, r3
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	429a      	cmp	r2, r3
 800d312:	bf34      	ite	cc
 800d314:	2301      	movcc	r3, #1
 800d316:	2300      	movcs	r3, #0
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d002      	beq.n	800d324 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f008 f8ce 	bl	80154c0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f7ff fd43 	bl	800cdb0 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800d32a:	4604      	mov	r4, r0
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f7ff fd3f 	bl	800cdb0 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800d332:	4603      	mov	r3, r0
 800d334:	613b      	str	r3, [r7, #16]
 800d336:	f107 0208 	add.w	r2, r7, #8
 800d33a:	f107 0310 	add.w	r3, r7, #16
 800d33e:	4611      	mov	r1, r2
 800d340:	4618      	mov	r0, r3
 800d342:	f7fc fa7f 	bl	8009844 <_ZSt3maxIjERKT_S2_S2_>
 800d346:	4603      	mov	r3, r0
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4423      	add	r3, r4
 800d34c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f7ff fd2e 	bl	800cdb0 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE4sizeEv>
 800d354:	4602      	mov	r2, r0
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	4293      	cmp	r3, r2
 800d35a:	d306      	bcc.n	800d36a <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	f000 f8c4 	bl	800d4ea <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800d362:	4602      	mov	r2, r0
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	4293      	cmp	r3, r2
 800d368:	d904      	bls.n	800d374 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x84>
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f000 f8bd 	bl	800d4ea <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>
 800d370:	4603      	mov	r3, r0
 800d372:	e000      	b.n	800d376 <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800d374:	697b      	ldr	r3, [r7, #20]
      }
 800d376:	4618      	mov	r0, r3
 800d378:	371c      	adds	r7, #28
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd90      	pop	{r4, r7, pc}

0800d37e <_ZN9__gnu_cxxmiIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d37e:	b590      	push	{r4, r7, lr}
 800d380:	b083      	sub	sp, #12
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7ff fdd6 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d38e:	4603      	mov	r3, r0
 800d390:	681c      	ldr	r4, [r3, #0]
 800d392:	6838      	ldr	r0, [r7, #0]
 800d394:	f7ff fdd1 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d398:	4603      	mov	r3, r0
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	1ae3      	subs	r3, r4, r3
 800d39e:	109b      	asrs	r3, r3, #2
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd90      	pop	{r4, r7, pc}

0800d3a8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d006      	beq.n	800d3c6 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj+0x1e>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 f8a5 	bl	800d50c <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8allocateERS2_j>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	e000      	b.n	800d3c8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE11_M_allocateEj+0x20>
 800d3c6:	2300      	movs	r3, #0
      }
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800d3d0:	b590      	push	{r4, r7, lr}
 800d3d2:	b089      	sub	sp, #36	; 0x24
 800d3d4:	af02      	add	r7, sp, #8
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800d3de:	f88d 4000 	strb.w	r4, [sp]
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	68b9      	ldr	r1, [r7, #8]
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f000 f89e 	bl	800d52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800d3ee:	4603      	mov	r3, r0
      }
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	371c      	adds	r7, #28
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd90      	pop	{r4, r7, pc}

0800d3f8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4618      	mov	r0, r3
 800d404:	370c      	adds	r7, #12
 800d406:	46bd      	mov	sp, r7
 800d408:	bc80      	pop	{r7}
 800d40a:	4770      	bx	lr

0800d40c <_ZSt34__uninitialized_move_if_noexcept_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800d40c:	b590      	push	{r4, r7, lr}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
 800d418:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 f897 	bl	800d54e <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>
 800d420:	4604      	mov	r4, r0
 800d422:	68b8      	ldr	r0, [r7, #8]
 800d424:	f000 f893 	bl	800d54e <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>
 800d428:	4601      	mov	r1, r0
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	4620      	mov	r0, r4
 800d430:	f000 f89c 	bl	800d56c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP11ExtiHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800d434:	4603      	mov	r3, r0
    }
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd90      	pop	{r4, r7, pc}

0800d43e <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d43e:	b580      	push	{r7, lr}
 800d440:	b084      	sub	sp, #16
 800d442:	af00      	add	r7, sp, #0
 800d444:	60f8      	str	r0, [r7, #12]
 800d446:	60b9      	str	r1, [r7, #8]
 800d448:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d44a:	68b9      	ldr	r1, [r7, #8]
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	f000 f89e 	bl	800d58e <_ZSt8_DestroyIPP11ExtiHandlerEvT_S3_>
    }
 800d452:	bf00      	nop
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b084      	sub	sp, #16
 800d45e:	af00      	add	r7, sp, #0
 800d460:	60f8      	str	r0, [r7, #12]
 800d462:	60b9      	str	r1, [r7, #8]
 800d464:	607a      	str	r2, [r7, #4]
	if (__p)
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d005      	beq.n	800d478 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	68b9      	ldr	r1, [r7, #8]
 800d472:	4618      	mov	r0, r3
 800d474:	f000 f898 	bl	800d5a8 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE10deallocateERS2_PS1_j>
      }
 800d478:	bf00      	nop
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4618      	mov	r0, r3
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	bc80      	pop	{r7}
 800d492:	4770      	bx	lr

0800d494 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800d494:	b5b0      	push	{r4, r5, r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f000 f890 	bl	800d5c6 <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	68b8      	ldr	r0, [r7, #8]
 800d4aa:	f000 f88c 	bl	800d5c6 <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 f888 	bl	800d5c6 <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f000 f890 	bl	800d5e2 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f89d 	bl	800d606 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 800d4cc:	4603      	mov	r3, r0
    }
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bdb0      	pop	{r4, r5, r7, pc}

0800d4d6 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 800d4d6:	b480      	push	{r7}
 800d4d8:	b083      	sub	sp, #12
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bc80      	pop	{r7}
 800d4e8:	4770      	bx	lr

0800d4ea <_ZNKSt6vectorIP11ExtiHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b082      	sub	sp, #8
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 f8b7 	bl	800d668 <_ZNKSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 f899 	bl	800d634 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE11_S_max_sizeERKS2_>
 800d502:	4603      	mov	r3, r0
 800d504:	4618      	mov	r0, r3
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d516:	2200      	movs	r2, #0
 800d518:	6839      	ldr	r1, [r7, #0]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f8ae 	bl	800d67c <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv>
 800d520:	4603      	mov	r3, r0
 800d522:	4618      	mov	r0, r3
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	60f8      	str	r0, [r7, #12]
 800d532:	60b9      	str	r1, [r7, #8]
 800d534:	607a      	str	r2, [r7, #4]
 800d536:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	68b9      	ldr	r1, [r7, #8]
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f000 f8ba 	bl	800d6b8 <_ZSt12__relocate_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800d544:	4603      	mov	r3, r0
      }
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <_ZSt32__make_move_if_noexcept_iteratorIP11ExtiHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800d54e:	b580      	push	{r7, lr}
 800d550:	b084      	sub	sp, #16
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800d556:	f107 030c 	add.w	r3, r7, #12
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 f8c8 	bl	800d6f2 <_ZNSt13move_iteratorIPP11ExtiHandlerEC1ES2_>
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	4618      	mov	r0, r3
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP11ExtiHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	68b9      	ldr	r1, [r7, #8]
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f000 f8c5 	bl	800d70e <_ZSt18uninitialized_copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>
 800d584:	4603      	mov	r3, r0
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <_ZSt8_DestroyIPP11ExtiHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d58e:	b580      	push	{r7, lr}
 800d590:	b082      	sub	sp, #8
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
 800d596:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800d598:	6839      	ldr	r1, [r7, #0]
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 f8c9 	bl	800d732 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ExtiHandlerEEvT_S5_>
    }
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	68b9      	ldr	r1, [r7, #8]
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f000 f8c4 	bl	800d746 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE10deallocateEPS2_j>
 800d5be:	bf00      	nop
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b082      	sub	sp, #8
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800d5ce:	1d3b      	adds	r3, r7, #4
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7ff fcb2 	bl	800cf3a <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b086      	sub	sp, #24
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	60f8      	str	r0, [r7, #12]
 800d5ea:	60b9      	str	r1, [r7, #8]
 800d5ec:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	68b9      	ldr	r1, [r7, #8]
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f000 f8b2 	bl	800d760 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_>
 800d5fc:	4603      	mov	r3, r0
    }
 800d5fe:	4618      	mov	r0, r3
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800d606:	b580      	push	{r7, lr}
 800d608:	b082      	sub	sp, #8
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
 800d60e:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7ff ffd8 	bl	800d5c6 <_ZSt12__niter_baseIPP11ExtiHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800d616:	4602      	mov	r2, r0
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	1a9b      	subs	r3, r3, r2
 800d61c:	109b      	asrs	r3, r3, #2
 800d61e:	461a      	mov	r2, r3
 800d620:	1d3b      	adds	r3, r7, #4
 800d622:	4611      	mov	r1, r2
 800d624:	4618      	mov	r0, r3
 800d626:	f7ff fbf1 	bl	800ce0c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ExtiHandlerSt6vectorIS2_SaIS2_EEEplEi>
 800d62a:	4603      	mov	r3, r0
 800d62c:	4618      	mov	r0, r3
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800d63c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d640:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f8a9 	bl	800d79a <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8max_sizeERKS2_>
 800d648:	4603      	mov	r3, r0
 800d64a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d64c:	f107 0208 	add.w	r2, r7, #8
 800d650:	f107 030c 	add.w	r3, r7, #12
 800d654:	4611      	mov	r1, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f7fc fa5a 	bl	8009b10 <_ZSt3minIjERKT_S2_S2_>
 800d65c:	4603      	mov	r3, r0
 800d65e:	681b      	ldr	r3, [r3, #0]
      }
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <_ZNKSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4618      	mov	r0, r3
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	bc80      	pop	{r7}
 800d67a:	4770      	bx	lr

0800d67c <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f000 f892 	bl	800d7b2 <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>
 800d68e:	4602      	mov	r2, r0
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	4293      	cmp	r3, r2
 800d694:	bf8c      	ite	hi
 800d696:	2301      	movhi	r3, #1
 800d698:	2300      	movls	r3, #0
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d001      	beq.n	800d6a4 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d6a0:	f007 ff05 	bl	80154ae <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f007 feeb 	bl	8015484 <_Znwj>
 800d6ae:	4603      	mov	r3, r0
      }
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3710      	adds	r7, #16
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <_ZSt12__relocate_aIPP11ExtiHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800d6b8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f000 f87e 	bl	800d7c8 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	68b8      	ldr	r0, [r7, #8]
 800d6d0:	f000 f87a 	bl	800d7c8 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f876 	bl	800d7c8 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f000 f87a 	bl	800d7dc <_ZSt14__relocate_a_1IP11ExtiHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800d6e8:	4603      	mov	r3, r0
    }
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bdb0      	pop	{r4, r5, r7, pc}

0800d6f2 <_ZNSt13move_iteratorIPP11ExtiHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 800d6f2:	b480      	push	{r7}
 800d6f4:	b083      	sub	sp, #12
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4618      	mov	r0, r3
 800d706:	370c      	adds	r7, #12
 800d708:	46bd      	mov	sp, r7
 800d70a:	bc80      	pop	{r7}
 800d70c:	4770      	bx	lr

0800d70e <_ZSt18uninitialized_copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d70e:	b580      	push	{r7, lr}
 800d710:	b086      	sub	sp, #24
 800d712:	af00      	add	r7, sp, #0
 800d714:	60f8      	str	r0, [r7, #12]
 800d716:	60b9      	str	r1, [r7, #8]
 800d718:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d71a:	2301      	movs	r3, #1
 800d71c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f000 f878 	bl	800d818 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP11ExtiHandlerES5_EET0_T_S8_S7_>
 800d728:	4603      	mov	r3, r0
    }
 800d72a:	4618      	mov	r0, r3
 800d72c:	3718      	adds	r7, #24
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ExtiHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800d732:	b480      	push	{r7}
 800d734:	b083      	sub	sp, #12
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
 800d73a:	6039      	str	r1, [r7, #0]
 800d73c:	bf00      	nop
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	bc80      	pop	{r7}
 800d744:	4770      	bx	lr

0800d746 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800d746:	b580      	push	{r7, lr}
 800d748:	b084      	sub	sp, #16
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	60f8      	str	r0, [r7, #12]
 800d74e:	60b9      	str	r1, [r7, #8]
 800d750:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800d752:	68b8      	ldr	r0, [r7, #8]
 800d754:	f007 fe92 	bl	801547c <_ZdlPv>
      }
 800d758:	bf00      	nop
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	109b      	asrs	r3, r3, #2
 800d774:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d006      	beq.n	800d78a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ExtiHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	461a      	mov	r2, r3
 800d782:	68f9      	ldr	r1, [r7, #12]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f009 f82f 	bl	80167e8 <memmove>
	  return __result + _Num;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	4413      	add	r3, r2
	}
 800d792:	4618      	mov	r0, r3
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <_ZNSt16allocator_traitsISaIP11ExtiHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f805 	bl	800d7b2 <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <_ZNK9__gnu_cxx13new_allocatorIP11ExtiHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d7b2:	b480      	push	{r7}
 800d7b4:	b083      	sub	sp, #12
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d7ba:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800d7be:	4618      	mov	r0, r3
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bc80      	pop	{r7}
 800d7c6:	4770      	bx	lr

0800d7c8 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>:
    __niter_base(_Iterator __it)
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	370c      	adds	r7, #12
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bc80      	pop	{r7}
 800d7da:	4770      	bx	lr

0800d7dc <_ZSt14__relocate_a_1IP11ExtiHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b086      	sub	sp, #24
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	109b      	asrs	r3, r3, #2
 800d7f2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	dd06      	ble.n	800d808 <_ZSt14__relocate_a_1IP11ExtiHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	461a      	mov	r2, r3
 800d800:	68f9      	ldr	r1, [r7, #12]
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f008 fff0 	bl	80167e8 <memmove>
      return __result + __count;
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	4413      	add	r3, r2
    }
 800d810:	4618      	mov	r0, r3
 800d812:	3718      	adds	r7, #24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP11ExtiHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	68b9      	ldr	r1, [r7, #8]
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 f805 	bl	800d838 <_ZSt4copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>
 800d82e:	4603      	mov	r3, r0
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <_ZSt4copyISt13move_iteratorIPP11ExtiHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 800d838:	b590      	push	{r4, r7, lr}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f000 f80f 	bl	800d868 <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800d84a:	4604      	mov	r4, r0
 800d84c:	68b8      	ldr	r0, [r7, #8]
 800d84e:	f000 f80b 	bl	800d868 <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800d852:	4603      	mov	r3, r0
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	4619      	mov	r1, r3
 800d858:	4620      	mov	r0, r4
 800d85a:	f000 f816 	bl	800d88a <_ZSt14__copy_move_a2ILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800d85e:	4603      	mov	r3, r0
    }
 800d860:	4618      	mov	r0, r3
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	bd90      	pop	{r4, r7, pc}

0800d868 <_ZSt12__miter_baseIPP11ExtiHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800d870:	1d3b      	adds	r3, r7, #4
 800d872:	4618      	mov	r0, r3
 800d874:	f000 f82c 	bl	800d8d0 <_ZNKSt13move_iteratorIPP11ExtiHandlerE4baseEv>
 800d878:	4603      	mov	r3, r0
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 f833 	bl	800d8e6 <_ZSt12__miter_baseIPP11ExtiHandlerET_S3_>
 800d880:	4603      	mov	r3, r0
 800d882:	4618      	mov	r0, r3
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <_ZSt14__copy_move_a2ILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800d88a:	b5b0      	push	{r4, r5, r7, lr}
 800d88c:	b084      	sub	sp, #16
 800d88e:	af00      	add	r7, sp, #0
 800d890:	60f8      	str	r0, [r7, #12]
 800d892:	60b9      	str	r1, [r7, #8]
 800d894:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f7ff ff96 	bl	800d7c8 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800d89c:	4604      	mov	r4, r0
 800d89e:	68b8      	ldr	r0, [r7, #8]
 800d8a0:	f7ff ff92 	bl	800d7c8 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800d8a4:	4605      	mov	r5, r0
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7ff ff8d 	bl	800d7c8 <_ZSt12__niter_baseIPP11ExtiHandlerET_S3_>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f7ff fe94 	bl	800d5e2 <_ZSt13__copy_move_aILb1EPP11ExtiHandlerS2_ET1_T0_S4_S3_>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	1d3b      	adds	r3, r7, #4
 800d8be:	4611      	mov	r1, r2
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f000 f81a 	bl	800d8fa <_ZSt12__niter_wrapIPP11ExtiHandlerET_RKS3_S3_>
 800d8c6:	4603      	mov	r3, r0
    }
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bdb0      	pop	{r4, r5, r7, pc}

0800d8d0 <_ZNKSt13move_iteratorIPP11ExtiHandlerE4baseEv>:
      base() const
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bc80      	pop	{r7}
 800d8e4:	4770      	bx	lr

0800d8e6 <_ZSt12__miter_baseIPP11ExtiHandlerET_S3_>:
    __miter_base(_Iterator __it)
 800d8e6:	b480      	push	{r7}
 800d8e8:	b083      	sub	sp, #12
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bc80      	pop	{r7}
 800d8f8:	4770      	bx	lr

0800d8fa <_ZSt12__niter_wrapIPP11ExtiHandlerET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800d8fa:	b480      	push	{r7}
 800d8fc:	b083      	sub	sp, #12
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	6039      	str	r1, [r7, #0]
    { return __res; }
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	370c      	adds	r7, #12
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bc80      	pop	{r7}
 800d90e:	4770      	bx	lr

0800d910 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	bfb8      	it	lt
 800d91e:	425b      	neglt	r3, r3
 800d920:	4618      	mov	r0, r3
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	bc80      	pop	{r7}
 800d928:	4770      	bx	lr

0800d92a <_ZN14FFBWheelConfigC1Ev>:


// Only include these for cpp
#ifdef __cplusplus

struct FFBWheelConfig{
 800d92a:	b480      	push	{r7}
 800d92c:	b083      	sub	sp, #12
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2257      	movs	r2, #87	; 0x57
 800d936:	701a      	strb	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2237      	movs	r2, #55	; 0x37
 800d93c:	705a      	strb	r2, [r3, #1]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d944:	805a      	strh	r2, [r3, #2]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d94c:	809a      	strh	r2, [r3, #4]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	80da      	strh	r2, [r3, #6]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f241 12f8 	movw	r2, #4600	; 0x11f8
 800d95a:	811a      	strh	r2, [r3, #8]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2208      	movs	r2, #8
 800d960:	729a      	strb	r2, [r3, #10]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2201      	movs	r2, #1
 800d966:	72da      	strb	r2, [r3, #11]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2232      	movs	r2, #50	; 0x32
 800d96c:	731a      	strb	r2, [r3, #12]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2264      	movs	r2, #100	; 0x64
 800d972:	735a      	strb	r2, [r3, #13]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2264      	movs	r2, #100	; 0x64
 800d978:	739a      	strb	r2, [r3, #14]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2264      	movs	r2, #100	; 0x64
 800d97e:	73da      	strb	r2, [r3, #15]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2264      	movs	r2, #100	; 0x64
 800d984:	741a      	strb	r2, [r3, #16]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2264      	movs	r2, #100	; 0x64
 800d98a:	745a      	strb	r2, [r3, #17]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	22ff      	movs	r2, #255	; 0xff
 800d990:	749a      	strb	r2, [r3, #18]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2201      	movs	r2, #1
 800d996:	74da      	strb	r2, [r3, #19]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	4618      	mov	r0, r3
 800d99c:	370c      	adds	r7, #12
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bc80      	pop	{r7}
 800d9a2:	4770      	bx	lr

0800d9a4 <_ZN11reportHID_tC1Ev>:
};

// HID gamepad report


struct  __attribute__((__packed__)) reportHID_t {
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	701a      	strb	r2, [r3, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	705a      	strb	r2, [r3, #1]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	709a      	strb	r2, [r3, #2]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	70da      	strb	r2, [r3, #3]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	711a      	strb	r2, [r3, #4]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	715a      	strb	r2, [r3, #5]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	719a      	strb	r2, [r3, #6]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	71da      	strb	r2, [r3, #7]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	721a      	strb	r2, [r3, #8]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	725a      	strb	r2, [r3, #9]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	729a      	strb	r2, [r3, #10]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	72da      	strb	r2, [r3, #11]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	731a      	strb	r2, [r3, #12]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	735a      	strb	r2, [r3, #13]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	739a      	strb	r2, [r3, #14]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	73da      	strb	r2, [r3, #15]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	741a      	strb	r2, [r3, #16]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	745a      	strb	r2, [r3, #17]
 800da02:	2200      	movs	r2, #0
 800da04:	749a      	strb	r2, [r3, #18]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	74da      	strb	r2, [r3, #19]
 800da0c:	2200      	movs	r2, #0
 800da0e:	751a      	strb	r2, [r3, #20]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2200      	movs	r2, #0
 800da14:	755a      	strb	r2, [r3, #21]
 800da16:	2200      	movs	r2, #0
 800da18:	759a      	strb	r2, [r3, #22]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	75da      	strb	r2, [r3, #23]
 800da20:	2200      	movs	r2, #0
 800da22:	761a      	strb	r2, [r3, #24]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	765a      	strb	r2, [r3, #25]
 800da2a:	2200      	movs	r2, #0
 800da2c:	769a      	strb	r2, [r3, #26]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	76da      	strb	r2, [r3, #27]
 800da34:	2200      	movs	r2, #0
 800da36:	771a      	strb	r2, [r3, #28]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	bc80      	pop	{r7}
 800da42:	4770      	bx	lr

0800da44 <_ZN8FFBWheelC1Ev>:
// TODO class type for parser? (Simhub for example)
//////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

FFBWheel::FFBWheel() {
 800da44:	b590      	push	{r4, r7, lr}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fb fabc 	bl	8008fcc <_ZN10AdcHandlerC1Ev>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	3304      	adds	r3, #4
 800da58:	4618      	mov	r0, r3
 800da5a:	f003 fce9 	bl	8011430 <_ZN12TimerHandlerC1Ev>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	3308      	adds	r3, #8
 800da62:	4618      	mov	r0, r3
 800da64:	f7fe f91e 	bl	800bca4 <_ZN14CommandHandlerC1Ev>
 800da68:	4a69      	ldr	r2, [pc, #420]	; (800dc10 <_ZN8FFBWheelC1Ev+0x1cc>)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	4a69      	ldr	r2, [pc, #420]	; (800dc14 <_ZN8FFBWheelC1Ev+0x1d0>)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	605a      	str	r2, [r3, #4]
 800da74:	4a68      	ldr	r2, [pc, #416]	; (800dc18 <_ZN8FFBWheelC1Ev+0x1d4>)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	609a      	str	r2, [r3, #8]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	735a      	strb	r2, [r3, #13]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	739a      	strb	r2, [r3, #14]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	73da      	strb	r2, [r3, #15]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	3310      	adds	r3, #16
 800da90:	4618      	mov	r0, r3
 800da92:	f7fc f919 	bl	8009cc8 <_ZN9CmdParserC1Ev>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	334c      	adds	r3, #76	; 0x4c
 800da9a:	2200      	movs	r2, #0
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	605a      	str	r2, [r3, #4]
 800daa0:	721a      	strb	r2, [r3, #8]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	3356      	adds	r3, #86	; 0x56
 800daae:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800dab2:	2100      	movs	r1, #0
 800dab4:	4618      	mov	r0, r3
 800dab6:	f008 feb1 	bl	801681c <memset>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f04f 0200 	mov.w	r2, #0
 800dad0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7ff ff21 	bl	800d92a <_ZN14FFBWheelConfigC1Ev>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff ff4c 	bl	800d9a4 <_ZN11reportHID_tC1Ev>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 22c4 	strb.w	r2, [r3, #708]	; 0x2c4
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f24c 3250 	movw	r2, #50000	; 0xc350
 800db32:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f247 5230 	movw	r2, #30000	; 0x7530
 800db44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2248      	movs	r2, #72	; 0x48
 800db54:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8

	restoreFlash(); // Load parameters
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 f8c6 	bl	800dcea <_ZN8FFBWheel12restoreFlashEv>

	// Create HID FFB handler. Will receive all usb messages directly
	this->ffb = new HidFFB();
 800db5e:	f640 6018 	movw	r0, #3608	; 0xe18
 800db62:	f007 fc8f 	bl	8015484 <_Znwj>
 800db66:	4603      	mov	r3, r0
 800db68:	461c      	mov	r4, r3
 800db6a:	4620      	mov	r0, r4
 800db6c:	f002 f92e 	bl	800fdcc <_ZN6HidFFBC1Ev>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8c3 4258 	str.w	r4, [r3, #600]	; 0x258
	ffb->set_config(&conf);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800db82:	4619      	mov	r1, r3
 800db84:	4610      	mov	r0, r2
 800db86:	f003 fb57 	bl	8011238 <_ZN6HidFFB10set_configEP14FFBWheelConfig>
	//setCfFilter(conf.cfFilter_f, conf.cfFilter_q);

	pi2cBuf = (uint8_t*)&i2cBuffer;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f103 0256 	add.w	r2, r3, #86	; 0x56
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	649a      	str	r2, [r3, #72]	; 0x48

	// Setup a timer
	extern TIM_HandleTypeDef htim3;
	this->timer_update = &htim3; // Timer setup with prescaler of sysclock
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a21      	ldr	r2, [pc, #132]	; (800dc1c <_ZN8FFBWheelC1Ev+0x1d8>)
 800db98:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	this->timer_update->Instance->ARR = 250;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	22fa      	movs	r2, #250	; 0xfa
 800dba6:	62da      	str	r2, [r3, #44]	; 0x2c
	this->timer_update->Instance->CR1 = 1;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(this->timer_update);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7f8 ffa3 	bl	8006b06 <HAL_TIM_Base_Start_IT>

	float effect_margin_scaler = ((float)conf.totalGain/255.0);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7f2 ff9e 	bl	8000b08 <__aeabi_ui2f>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	4914      	ldr	r1, [pc, #80]	; (800dc20 <_ZN8FFBWheelC1Ev+0x1dc>)
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7f3 f8a5 	bl	8000d20 <__aeabi_fdiv>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	60fb      	str	r3, [r7, #12]
	this->torqueScaler = ((float)this->conf.maxpower / (float)0x7fff) * effect_margin_scaler;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7f2 ff91 	bl	8000b08 <__aeabi_ui2f>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	490e      	ldr	r1, [pc, #56]	; (800dc24 <_ZN8FFBWheelC1Ev+0x1e0>)
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7f3 f898 	bl	8000d20 <__aeabi_fdiv>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	68f9      	ldr	r1, [r7, #12]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7f2 ffdf 	bl	8000bb8 <__aeabi_fmul>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
}
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4618      	mov	r0, r3
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd90      	pop	{r4, r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	08017744 	.word	0x08017744
 800dc14:	08017760 	.word	0x08017760
 800dc18:	08017774 	.word	0x08017774
 800dc1c:	2000122c 	.word	0x2000122c
 800dc20:	437f0000 	.word	0x437f0000
 800dc24:	46fffe00 	.word	0x46fffe00

0800dc28 <_ZN8FFBWheelD1Ev>:

FFBWheel::~FFBWheel() {
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	4a1a      	ldr	r2, [pc, #104]	; (800dc9c <_ZN8FFBWheelD1Ev+0x74>)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	4a1a      	ldr	r2, [pc, #104]	; (800dca0 <_ZN8FFBWheelD1Ev+0x78>)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	605a      	str	r2, [r3, #4]
 800dc3c:	4a19      	ldr	r2, [pc, #100]	; (800dca4 <_ZN8FFBWheelD1Ev+0x7c>)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	609a      	str	r2, [r3, #8]
	delete drv;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d004      	beq.n	800dc56 <_ZN8FFBWheelD1Ev+0x2e>
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	3204      	adds	r2, #4
 800dc50:	6812      	ldr	r2, [r2, #0]
 800dc52:	4618      	mov	r0, r3
 800dc54:	4790      	blx	r2
	delete enc;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d004      	beq.n	800dc6a <_ZN8FFBWheelD1Ev+0x42>
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	3204      	adds	r2, #4
 800dc64:	6812      	ldr	r2, [r2, #0]
 800dc66:	4618      	mov	r0, r3
 800dc68:	4790      	blx	r2
FFBWheel::~FFBWheel() {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	3310      	adds	r3, #16
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fc f856 	bl	8009d20 <_ZN9CmdParserD1Ev>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	3308      	adds	r3, #8
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fe f827 	bl	800bccc <_ZN14CommandHandlerD1Ev>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	3304      	adds	r3, #4
 800dc82:	4618      	mov	r0, r3
 800dc84:	f003 fbec 	bl	8011460 <_ZN12TimerHandlerD1Ev>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fb f9b6 	bl	8008ffc <_ZN10AdcHandlerD1Ev>
}
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4618      	mov	r0, r3
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	08017744 	.word	0x08017744
 800dca0:	08017760 	.word	0x08017760
 800dca4:	08017774 	.word	0x08017774

0800dca8 <_ZThn4_N8FFBWheelD1Ev>:


class FFBWheel: public AdcHandler, TimerHandler, CommandHandler{
public:
	FFBWheel();
	virtual ~FFBWheel();
 800dca8:	f1a0 0004 	sub.w	r0, r0, #4
 800dcac:	f7ff bfbc 	b.w	800dc28 <_ZN8FFBWheelD1Ev>

0800dcb0 <_ZThn8_N8FFBWheelD1Ev>:
 800dcb0:	f1a0 0008 	sub.w	r0, r0, #8
 800dcb4:	f7ff bfb8 	b.w	800dc28 <_ZN8FFBWheelD1Ev>

0800dcb8 <_ZN8FFBWheelD0Ev>:
FFBWheel::~FFBWheel() {
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
}
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff ffb1 	bl	800dc28 <_ZN8FFBWheelD1Ev>
 800dcc6:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f007 fbd8 	bl	8015480 <_ZdlPvj>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3708      	adds	r7, #8
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <_ZThn8_N8FFBWheelD0Ev>:
 800dcda:	f1a0 0008 	sub.w	r0, r0, #8
 800dcde:	f7ff bfeb 	b.w	800dcb8 <_ZN8FFBWheelD0Ev>

0800dce2 <_ZThn4_N8FFBWheelD0Ev>:
 800dce2:	f1a0 0004 	sub.w	r0, r0, #4
 800dce6:	f7ff bfe7 	b.w	800dcb8 <_ZN8FFBWheelD0Ev>

0800dcea <_ZN8FFBWheel12restoreFlashEv>:
	float f = (float)cfFilter_f / (float)1000;

	ffb->setFilterFQ(f, (float)0.01 * (cfFilter_q+1));*/
}

void FFBWheel::restoreFlash(){
 800dcea:	b5b0      	push	{r4, r5, r7, lr}
 800dcec:	b088      	sub	sp, #32
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	61f8      	str	r0, [r7, #28]

	conf = decodeConf();
 800dcf2:	69fc      	ldr	r4, [r7, #28]
 800dcf4:	463b      	mov	r3, r7
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 fc37 	bl	800e56a <_ZN8FFBWheel10decodeConfEv>
 800dcfc:	f504 741b 	add.w	r4, r4, #620	; 0x26c
 800dd00:	463d      	mov	r5, r7
 800dd02:	6828      	ldr	r0, [r5, #0]
 800dd04:	6869      	ldr	r1, [r5, #4]
 800dd06:	68aa      	ldr	r2, [r5, #8]
 800dd08:	68eb      	ldr	r3, [r5, #12]
 800dd0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd0c:	6928      	ldr	r0, [r5, #16]
 800dd0e:	6020      	str	r0, [r4, #0]
	conf.check= 0x57;
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	2257      	movs	r2, #87	; 0x57
 800dd14:	f883 226c 	strb.w	r2, [r3, #620]	; 0x26c

	drv = new MotorBTS7960();
 800dd18:	2018      	movs	r0, #24
 800dd1a:	f007 fbb3 	bl	8015484 <_Znwj>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	461c      	mov	r4, r3
 800dd22:	4620      	mov	r0, r4
 800dd24:	f003 fafa 	bl	801131c <_ZN12MotorBTS7960C1Ev>
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	f8c3 4280 	str.w	r4, [r3, #640]	; 0x280
	enc = new EncoderLocal();
 800dd2e:	2038      	movs	r0, #56	; 0x38
 800dd30:	f007 fba8 	bl	8015484 <_Znwj>
 800dd34:	4603      	mov	r3, r0
 800dd36:	461c      	mov	r4, r3
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f7fe fe53 	bl	800c9e4 <_ZN12EncoderLocalC1Ev>
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	f8c3 4284 	str.w	r4, [r3, #644]	; 0x284
	//btns = new LocalButtons();

	drv->start();
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f003 fb4e 	bl	80113ec <_ZN12MotorBTS79605startEv>
	initEncoder();
 800dd50:	69f8      	ldr	r0, [r7, #28]
 800dd52:	f000 fc44 	bl	800e5de <_ZN8FFBWheel11initEncoderEv>
}
 800dd56:	bf00      	nop
 800dd58:	3720      	adds	r7, #32
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bdb0      	pop	{r4, r5, r7, pc}

0800dd5e <_ZN8FFBWheel9saveFlashEv>:

// Saves parameters to flash
void FFBWheel::saveFlash(){
 800dd5e:	b5b0      	push	{r4, r5, r7, lr}
 800dd60:	b094      	sub	sp, #80	; 0x50
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
	FFBWheelConfig savedconf = decodeConf();
 800dd66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 fbfd 	bl	800e56a <_ZN8FFBWheel10decodeConfEv>

	uint8_t savedCofdArr[sizeof(FFBWheelConfig)];
	memcpy(savedCofdArr, &savedconf, sizeof(FFBWheelConfig));
 800dd70:	f107 0420 	add.w	r4, r7, #32
 800dd74:	f107 0534 	add.w	r5, r7, #52	; 0x34
 800dd78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd7c:	682b      	ldr	r3, [r5, #0]
 800dd7e:	6023      	str	r3, [r4, #0]

	uint8_t confArr[sizeof(FFBWheelConfig)];
	memcpy(confArr, &conf, sizeof(FFBWheelConfig));
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f503 711b 	add.w	r1, r3, #620	; 0x26c
 800dd86:	f107 030c 	add.w	r3, r7, #12
 800dd8a:	2214      	movs	r2, #20
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f008 fd1d 	bl	80167cc <memcpy>

	if(savedCofdArr == confArr)
		return;
	uint32_t* buf = (uint32_t*)&conf;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800dd98:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t len = sizeof(FFBWheelConfig);
 800dd9a:	2314      	movs	r3, #20
 800dd9c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	len = len / 4 + (len % 4 != 0 ? 1 : 0);
 800dda0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800dda4:	089b      	lsrs	r3, r3, #2
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800ddac:	f002 0203 	and.w	r2, r2, #3
 800ddb0:	2a00      	cmp	r2, #0
 800ddb2:	d001      	beq.n	800ddb8 <_ZN8FFBWheel9saveFlashEv+0x5a>
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	e000      	b.n	800ddba <_ZN8FFBWheel9saveFlashEv+0x5c>
 800ddb8:	2200      	movs	r2, #0
 800ddba:	4413      	add	r3, r2
 800ddbc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	EE_Format();
 800ddc0:	f7f3 fa04 	bl	80011cc <EE_Format>
	EE_Writes(0x00, len, buf);
 800ddc4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddcc:	4619      	mov	r1, r3
 800ddce:	2000      	movs	r0, #0
 800ddd0:	f7f3 fa54 	bl	800127c <EE_Writes>
}
 800ddd4:	3750      	adds	r7, #80	; 0x50
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800dddc <_ZN8FFBWheel6updateEv>:
	int16_t LEDBrightnes;
	int16_t led[5];
} Telemetry;
Telemetry tmpT = {0,};

void FFBWheel::update(){
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
	int16_t lasttorque = endstopTorque;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ddea:	81bb      	strh	r3, [r7, #12]
	bool updateTorque = false;
 800ddec:	2300      	movs	r3, #0
 800ddee:	73fb      	strb	r3, [r7, #15]
	if(drv == nullptr || enc == nullptr){
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f000 80d4 	beq.w	800dfa4 <_ZN8FFBWheel6updateEv+0x1c8>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800de02:	2b00      	cmp	r3, #0
 800de04:	f000 80ce 	beq.w	800dfa4 <_ZN8FFBWheel6updateEv+0x1c8>
		return;
	}

	if(usb_update_flag || update_flag){
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	7b5b      	ldrb	r3, [r3, #13]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d103      	bne.n	800de18 <_ZN8FFBWheel6updateEv+0x3c>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	7b9b      	ldrb	r3, [r3, #14]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d032      	beq.n	800de7e <_ZN8FFBWheel6updateEv+0xa2>

		torque = 0;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		scaledEnc = getEncValue(enc, conf.degreesOfRotation);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 1284 	ldr.w	r1, [r3, #644]	; 0x284
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8b3 326e 	ldrh.w	r3, [r3, #622]	; 0x26e
 800de2c:	461a      	mov	r2, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 f988 	bl	800e144 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>
 800de34:	4602      	mov	r2, r0
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		update_flag = false;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	739a      	strb	r2, [r3, #14]

		if(abs(scaledEnc) > 0xffff){
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff fd61 	bl	800d910 <_ZSt3absl>
 800de4e:	4603      	mov	r3, r0
 800de50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de54:	4293      	cmp	r3, r2
 800de56:	bfcc      	ite	gt
 800de58:	2301      	movgt	r3, #1
 800de5a:	2300      	movle	r3, #0
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d005      	beq.n	800de6e <_ZN8FFBWheel6updateEv+0x92>
			drv->stop();
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 800de68:	4618      	mov	r0, r3
 800de6a:	f003 facb 	bl	8011404 <_ZN12MotorBTS79604stopEv>
		}
		endstopTorque = updateEndstop();
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 f89e 	bl	800dfb0 <_ZN8FFBWheel13updateEndstopEv>
 800de74:	4603      	mov	r3, r0
 800de76:	461a      	mov	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

	}
	if(usb_update_flag){
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	7b5b      	ldrb	r3, [r3, #13]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d034      	beq.n	800def0 <_ZN8FFBWheel6updateEv+0x114>
		lastScaledEnc = scaledEnc;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

		usb_update_flag = false;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	735a      	strb	r2, [r3, #13]
		torque = ffb->calculateEffects(enc);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800dea4:	4619      	mov	r1, r3
 800dea6:	4610      	mov	r0, r2
 800dea8:	f002 fc3c 	bl	8010724 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal>
 800deac:	4602      	mov	r2, r0
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		if(endstopTorque == 0 || (endstopTorque > 0 && torque > 0) || (endstopTorque < 0 && torque < 0))
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800deba:	2b00      	cmp	r3, #0
 800debc:	d013      	beq.n	800dee6 <_ZN8FFBWheel6updateEv+0x10a>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	dd04      	ble.n	800ded2 <_ZN8FFBWheel6updateEv+0xf6>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800dece:	2b00      	cmp	r3, #0
 800ded0:	dc09      	bgt.n	800dee6 <_ZN8FFBWheel6updateEv+0x10a>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ded8:	2b00      	cmp	r3, #0
 800deda:	da06      	bge.n	800deea <_ZN8FFBWheel6updateEv+0x10e>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	da01      	bge.n	800deea <_ZN8FFBWheel6updateEv+0x10e>
			updateTorque = true;
 800dee6:	2301      	movs	r3, #1
 800dee8:	73fb      	strb	r3, [r7, #15]
		this->send_report();
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 f986 	bl	800e1fc <_ZN8FFBWheel11send_reportEv>
	}

	if(endstopTorque!=lasttorque || updateTorque){
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800def6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800defa:	429a      	cmp	r2, r3
 800defc:	d102      	bne.n	800df04 <_ZN8FFBWheel6updateEv+0x128>
 800defe:	7bfb      	ldrb	r3, [r7, #15]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d050      	beq.n	800dfa6 <_ZN8FFBWheel6updateEv+0x1ca>
		torque *= torqueScaler;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7f2 fe00 	bl	8000b10 <__aeabi_i2f>
 800df10:	4602      	mov	r2, r0
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800df18:	4619      	mov	r1, r3
 800df1a:	4610      	mov	r0, r2
 800df1c:	f7f2 fe4c 	bl	8000bb8 <__aeabi_fmul>
 800df20:	4603      	mov	r3, r0
 800df22:	4618      	mov	r0, r3
 800df24:	f7f3 f80e 	bl	8000f44 <__aeabi_f2iz>
 800df28:	4602      	mov	r2, r0
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		torque += endstopTorque;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800df3c:	441a      	add	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		torque = (conf.inverted) ? torque : -torque;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f893 3277 	ldrb.w	r3, [r3, #631]	; 0x277
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d003      	beq.n	800df56 <_ZN8FFBWheel6updateEv+0x17a>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800df54:	e003      	b.n	800df5e <_ZN8FFBWheel6updateEv+0x182>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800df5c:	425b      	negs	r3, r3
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
		torque = clip<int32_t, int32_t>(torque, -0x7fff, 0x7fff);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800df6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800df6e:	490f      	ldr	r1, [pc, #60]	; (800dfac <_ZN8FFBWheel6updateEv+0x1d0>)
 800df70:	4618      	mov	r0, r3
 800df72:	f000 fb4d 	bl	800e610 <_Z4clipIllET_S0_T0_S1_>
 800df76:	4602      	mov	r2, r0
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		enc->currentTorque = torque;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	f8d2 2260 	ldr.w	r2, [r2, #608]	; 0x260
 800df8a:	629a      	str	r2, [r3, #40]	; 0x28

		/*torque = clip<int32_t,int16_t>(torque, -this->conf.maxpower, this->conf.maxpower);
		if(torque > 0) torque = map(torque, 0, this->conf.maxpower, MIN(this->conf.minForce, this->conf.maxpower), this->conf.maxpower);
		else if (torque < 0) torque = map(torque, 0, -this->conf.maxpower, MAX(-this->conf.minForce, -this->conf.maxpower), -this->conf.maxpower);*/

		drv->turn(torque);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800df98:	b21b      	sxth	r3, r3
 800df9a:	4619      	mov	r1, r3
 800df9c:	4610      	mov	r0, r2
 800df9e:	f003 f97b 	bl	8011298 <_ZN12MotorBTS79604turnEs>
 800dfa2:	e000      	b.n	800dfa6 <_ZN8FFBWheel6updateEv+0x1ca>
		return;
 800dfa4:	bf00      	nop
		tmpT.flags = 8;
		memcpy(i2cBuffer, &tmpT, sizeof(tmpT));*/

	}

}
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	ffff8001 	.word	0xffff8001

0800dfb0 <_ZN8FFBWheel13updateEndstopEv>:
{
	 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


int16_t FFBWheel::updateEndstop(){
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
	int8_t clipdir = cliptest<int32_t,int32_t>(lastScaledEnc, -0x7fff, 0x7fff);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfbe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dfc2:	4933      	ldr	r1, [pc, #204]	; (800e090 <_ZN8FFBWheel13updateEndstopEv+0xe0>)
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 fb3b 	bl	800e640 <_Z8cliptestIllEaT_T0_S1_>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	75fb      	strb	r3, [r7, #23]
	if(clipdir == 0){
 800dfce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d101      	bne.n	800dfda <_ZN8FFBWheel13updateEndstopEv+0x2a>
		return 0;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	e052      	b.n	800e080 <_ZN8FFBWheel13updateEndstopEv+0xd0>
	}
	int32_t addtorque = 0;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	613b      	str	r3, [r7, #16]
	addtorque += clip<int32_t,int32_t>(abs(lastScaledEnc)-0x7fff,-0x7fff,0x7fff);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7ff fc93 	bl	800d910 <_ZSt3absl>
 800dfea:	4603      	mov	r3, r0
 800dfec:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800dff0:	3b7f      	subs	r3, #127	; 0x7f
 800dff2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dff6:	4926      	ldr	r1, [pc, #152]	; (800e090 <_ZN8FFBWheel13updateEndstopEv+0xe0>)
 800dff8:	4618      	mov	r0, r3
 800dffa:	f000 fb09 	bl	800e610 <_Z4clipIllET_S0_T0_S1_>
 800dffe:	4602      	mov	r2, r0
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	4413      	add	r3, r2
 800e004:	613b      	str	r3, [r7, #16]
	float scale = ((float)conf.endstop_gain * 50.00) / 255.00; // 0..50
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7f2 fd7b 	bl	8000b08 <__aeabi_ui2f>
 800e012:	4603      	mov	r3, r0
 800e014:	4618      	mov	r0, r3
 800e016:	f7f2 fa07 	bl	8000428 <__aeabi_f2d>
 800e01a:	f04f 0200 	mov.w	r2, #0
 800e01e:	4b1d      	ldr	r3, [pc, #116]	; (800e094 <_ZN8FFBWheel13updateEndstopEv+0xe4>)
 800e020:	f7f2 fa5a 	bl	80004d8 <__aeabi_dmul>
 800e024:	4602      	mov	r2, r0
 800e026:	460b      	mov	r3, r1
 800e028:	4610      	mov	r0, r2
 800e02a:	4619      	mov	r1, r3
 800e02c:	a316      	add	r3, pc, #88	; (adr r3, 800e088 <_ZN8FFBWheel13updateEndstopEv+0xd8>)
 800e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e032:	f7f2 fb7b 	bl	800072c <__aeabi_ddiv>
 800e036:	4602      	mov	r2, r0
 800e038:	460b      	mov	r3, r1
 800e03a:	4610      	mov	r0, r2
 800e03c:	4619      	mov	r1, r3
 800e03e:	f7f2 fc5d 	bl	80008fc <__aeabi_d2f>
 800e042:	4603      	mov	r3, r0
 800e044:	60fb      	str	r3, [r7, #12]
	addtorque *= scale;
 800e046:	6938      	ldr	r0, [r7, #16]
 800e048:	f7f2 fd62 	bl	8000b10 <__aeabi_i2f>
 800e04c:	4603      	mov	r3, r0
 800e04e:	68f9      	ldr	r1, [r7, #12]
 800e050:	4618      	mov	r0, r3
 800e052:	f7f2 fdb1 	bl	8000bb8 <__aeabi_fmul>
 800e056:	4603      	mov	r3, r0
 800e058:	4618      	mov	r0, r3
 800e05a:	f7f2 ff73 	bl	8000f44 <__aeabi_f2iz>
 800e05e:	4603      	mov	r3, r0
 800e060:	613b      	str	r3, [r7, #16]
	addtorque *= -clipdir;
 800e062:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e066:	425a      	negs	r2, r3
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	fb02 f303 	mul.w	r3, r2, r3
 800e06e:	613b      	str	r3, [r7, #16]

	return clip<int32_t,int32_t>(addtorque, -0x7fff ,0x7fff);
 800e070:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e074:	4906      	ldr	r1, [pc, #24]	; (800e090 <_ZN8FFBWheel13updateEndstopEv+0xe0>)
 800e076:	6938      	ldr	r0, [r7, #16]
 800e078:	f000 faca 	bl	800e610 <_Z4clipIllET_S0_T0_S1_>
 800e07c:	4603      	mov	r3, r0
 800e07e:	b21b      	sxth	r3, r3
}
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	00000000 	.word	0x00000000
 800e08c:	406fe000 	.word	0x406fe000
 800e090:	ffff8001 	.word	0xffff8001
 800e094:	40490000 	.word	0x40490000

0800e098 <_ZN8FFBWheel6adcUpdEPVm>:

void FFBWheel::adcUpd(volatile uint32_t* ADC_BUF){
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0;i<ADC_PINS;i++)
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	73fb      	strb	r3, [r7, #15]
 800e0a6:	7bfb      	ldrb	r3, [r7, #15]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d813      	bhi.n	800e0d4 <_ZN8FFBWheel6adcUpdEPVm+0x3c>
	{
		this->adc_buf2[i] += ADC_BUF[i+ADC_CHAN_FPIN];
 800e0ac:	7bfb      	ldrb	r3, [r7, #15]
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	683a      	ldr	r2, [r7, #0]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	6819      	ldr	r1, [r3, #0]
 800e0b6:	7bfa      	ldrb	r2, [r7, #15]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	32a4      	adds	r2, #164	; 0xa4
 800e0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c0:	7bfa      	ldrb	r2, [r7, #15]
 800e0c2:	4419      	add	r1, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	32a4      	adds	r2, #164	; 0xa4
 800e0c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0;i<ADC_PINS;i++)
 800e0cc:	7bfb      	ldrb	r3, [r7, #15]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	73fb      	strb	r3, [r7, #15]
 800e0d2:	e7e8      	b.n	800e0a6 <_ZN8FFBWheel6adcUpdEPVm+0xe>
	}
	adcCount++;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	7bdb      	ldrb	r3, [r3, #15]
 800e0d8:	3301      	adds	r3, #1
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	73da      	strb	r2, [r3, #15]
	if(adcCount >= conf.maxAdcCount)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	7bda      	ldrb	r2, [r3, #15]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f893 3276 	ldrb.w	r3, [r3, #630]	; 0x276
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d325      	bcc.n	800e13a <_ZN8FFBWheel6adcUpdEPVm+0xa2>
	{
		for(uint8_t i = 0;i<ADC_PINS;i++)
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	73bb      	strb	r3, [r7, #14]
 800e0f2:	7bbb      	ldrb	r3, [r7, #14]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d81d      	bhi.n	800e134 <_ZN8FFBWheel6adcUpdEPVm+0x9c>
		{
			this->adc_buf[i] = this->adc_buf2[i]/ (conf.maxAdcCount + 1);
 800e0f8:	7bba      	ldrb	r2, [r7, #14]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	32a4      	adds	r2, #164	; 0xa4
 800e0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	f892 2276 	ldrb.w	r2, [r2, #630]	; 0x276
 800e108:	3201      	adds	r2, #1
 800e10a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e10e:	7bbb      	ldrb	r3, [r7, #14]
 800e110:	b291      	uxth	r1, r2
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e118:	005b      	lsls	r3, r3, #1
 800e11a:	4413      	add	r3, r2
 800e11c:	460a      	mov	r2, r1
 800e11e:	809a      	strh	r2, [r3, #4]
			this->adc_buf2[i]= 0;
 800e120:	7bba      	ldrb	r2, [r7, #14]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	32a4      	adds	r2, #164	; 0xa4
 800e126:	2100      	movs	r1, #0
 800e128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(uint8_t i = 0;i<ADC_PINS;i++)
 800e12c:	7bbb      	ldrb	r3, [r7, #14]
 800e12e:	3301      	adds	r3, #1
 800e130:	73bb      	strb	r3, [r7, #14]
 800e132:	e7de      	b.n	800e0f2 <_ZN8FFBWheel6adcUpdEPVm+0x5a>
		}
		adcCount = 0;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	73da      	strb	r2, [r3, #15]
	}

}
 800e13a:	bf00      	nop
 800e13c:	3714      	adds	r7, #20
 800e13e:	46bd      	mov	sp, r7
 800e140:	bc80      	pop	{r7}
 800e142:	4770      	bx	lr

0800e144 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt>:

int32_t FFBWheel::getEncValue(EncoderLocal* enc,uint16_t degrees){
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	4613      	mov	r3, r2
 800e150:	80fb      	strh	r3, [r7, #6]
	if(enc == nullptr){
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d102      	bne.n	800e15e <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x1a>
			return 0x7fff; // Return center if no encoder present
 800e158:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e15c:	e046      	b.n	800e1ec <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0xa8>
	}

	float angle = 360.0 * enc->getPos_f();
 800e15e:	68b8      	ldr	r0, [r7, #8]
 800e160:	f7fe fcd0 	bl	800cb04 <_ZN12EncoderLocal8getPos_fEv>
 800e164:	4603      	mov	r3, r0
 800e166:	4923      	ldr	r1, [pc, #140]	; (800e1f4 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0xb0>)
 800e168:	4618      	mov	r0, r3
 800e16a:	f7f2 fd25 	bl	8000bb8 <__aeabi_fmul>
 800e16e:	4603      	mov	r3, r0
 800e170:	613b      	str	r3, [r7, #16]
	int32_t val = (0xffff / (float)degrees) * angle;
 800e172:	88fb      	ldrh	r3, [r7, #6]
 800e174:	4618      	mov	r0, r3
 800e176:	f7f2 fcc7 	bl	8000b08 <__aeabi_ui2f>
 800e17a:	4603      	mov	r3, r0
 800e17c:	4619      	mov	r1, r3
 800e17e:	481e      	ldr	r0, [pc, #120]	; (800e1f8 <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0xb4>)
 800e180:	f7f2 fdce 	bl	8000d20 <__aeabi_fdiv>
 800e184:	4603      	mov	r3, r0
 800e186:	6939      	ldr	r1, [r7, #16]
 800e188:	4618      	mov	r0, r3
 800e18a:	f7f2 fd15 	bl	8000bb8 <__aeabi_fmul>
 800e18e:	4603      	mov	r3, r0
 800e190:	4618      	mov	r0, r3
 800e192:	f7f2 fed7 	bl	8000f44 <__aeabi_f2iz>
 800e196:	4603      	mov	r3, r0
 800e198:	617b      	str	r3, [r7, #20]
	if (conf.inverted)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f893 3277 	ldrb.w	r3, [r3, #631]	; 0x277
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <_ZN8FFBWheel11getEncValueEP12EncoderLocalt+0x66>
		val= -val;
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	425b      	negs	r3, r3
 800e1a8:	617b      	str	r3, [r7, #20]

	enc->currentPosition = val;
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	697a      	ldr	r2, [r7, #20]
 800e1ae:	615a      	str	r2, [r3, #20]
	enc->currentSpeed= enc->currentPosition - enc->lastPosition;
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	695a      	ldr	r2, [r3, #20]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	699b      	ldr	r3, [r3, #24]
 800e1b8:	1ad2      	subs	r2, r2, r3
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	61da      	str	r2, [r3, #28]
	enc->currentAcceleration = enc->currentSpeed - enc->lastSpeed;
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	69da      	ldr	r2, [r3, #28]
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	6a1b      	ldr	r3, [r3, #32]
 800e1c6:	1ad2      	subs	r2, r2, r3
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	625a      	str	r2, [r3, #36]	; 0x24
	enc->lastPosition = enc->currentPosition;
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	695a      	ldr	r2, [r3, #20]
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	619a      	str	r2, [r3, #24]
	enc->lastSpeed = enc->currentSpeed;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	69da      	ldr	r2, [r3, #28]
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	621a      	str	r2, [r3, #32]
	enc->lastTorque = enc->currentTorque;
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	62da      	str	r2, [r3, #44]	; 0x2c
	enc->currentTorque = 0;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	629a      	str	r2, [r3, #40]	; 0x28

	return val;
 800e1ea:	697b      	ldr	r3, [r7, #20]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	43b40000 	.word	0x43b40000
 800e1f8:	477fff00 	.word	0x477fff00

0800e1fc <_ZN8FFBWheel11send_reportEv>:


void FFBWheel::send_report(){
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
	extern USBD_HandleTypeDef hUsbDeviceFS;

	// Read buttons
	reportHID.buttons = 0;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 800e212:	2200      	movs	r2, #0
 800e214:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 800e218:	2200      	movs	r2, #0
 800e21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
	reportHID.buttons2 = 0;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
 800e226:	2200      	movs	r2, #0
 800e228:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 800e22c:	2200      	movs	r2, #0
 800e22e:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 800e232:	2200      	movs	r2, #0
 800e234:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	reportHID.buttons3 = 0;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 800e240:	2200      	movs	r2, #0
 800e242:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 800e246:	2200      	movs	r2, #0
 800e248:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 800e24c:	2200      	movs	r2, #0
 800e24e:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4

	/*uint32_t buf = 0;
	btns->readButtons(&buf, &conf);*/
	uint8_t rotaryPos[3] = {0, };
 800e252:	4b92      	ldr	r3, [pc, #584]	; (800e49c <_ZN8FFBWheel11send_reportEv+0x2a0>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	733b      	strb	r3, [r7, #12]
 800e258:	f107 030d 	add.w	r3, r7, #13
 800e25c:	2200      	movs	r2, #0
 800e25e:	801a      	strh	r2, [r3, #0]
	rotaryPos[0] = i2cButtonsBuffer[2] & 0b1111;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e266:	f003 030f 	and.w	r3, r3, #15
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	733b      	strb	r3, [r7, #12]
	rotaryPos[1] = (i2cButtonsBuffer[2] >> 4) & 0b1111;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e274:	091b      	lsrs	r3, r3, #4
 800e276:	b2db      	uxtb	r3, r3
 800e278:	737b      	strb	r3, [r7, #13]
	rotaryPos[2] = i2cButtonsBuffer[3] & 0b1111;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800e280:	f003 030f 	and.w	r3, r3, #15
 800e284:	b2db      	uxtb	r3, r3
 800e286:	73bb      	strb	r3, [r7, #14]
	reportHID.buttons = i2cButtonsBuffer[0] | (i2cButtonsBuffer[1] << 8) | (i2cButtonsBuffer[4] << 16) | (((i2cButtonsBuffer[3] >> 4) & 0b1111) << 24);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e28e:	461a      	mov	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e296:	021b      	lsls	r3, r3, #8
 800e298:	431a      	orrs	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e2a0:	041b      	lsls	r3, r3, #16
 800e2a2:	431a      	orrs	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800e2aa:	091b      	lsrs	r3, r3, #4
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	061b      	lsls	r3, r3, #24
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8c3 2299 	str.w	r2, [r3, #665]	; 0x299
	reportHID.buttons2 |= 1 <<rotaryPos[0];
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 329d 	ldr.w	r3, [r3, #669]	; 0x29d
 800e2c0:	7b3a      	ldrb	r2, [r7, #12]
 800e2c2:	4611      	mov	r1, r2
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	408a      	lsls	r2, r1
 800e2c8:	431a      	orrs	r2, r3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8c3 229d 	str.w	r2, [r3, #669]	; 0x29d
	reportHID.buttons2 |= 1 << (12 + rotaryPos[1]);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 329d 	ldr.w	r3, [r3, #669]	; 0x29d
 800e2d6:	7b7a      	ldrb	r2, [r7, #13]
 800e2d8:	320c      	adds	r2, #12
 800e2da:	2101      	movs	r1, #1
 800e2dc:	fa01 f202 	lsl.w	r2, r1, r2
 800e2e0:	431a      	orrs	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8c3 229d 	str.w	r2, [r3, #669]	; 0x29d
	if(rotaryPos[2] < 8 )
 800e2e8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ea:	2b07      	cmp	r3, #7
 800e2ec:	d80c      	bhi.n	800e308 <_ZN8FFBWheel11send_reportEv+0x10c>
		reportHID.buttons2 |= 1 << (24 + rotaryPos[2]);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 329d 	ldr.w	r3, [r3, #669]	; 0x29d
 800e2f4:	7bba      	ldrb	r2, [r7, #14]
 800e2f6:	3218      	adds	r2, #24
 800e2f8:	2101      	movs	r1, #1
 800e2fa:	fa01 f202 	lsl.w	r2, r1, r2
 800e2fe:	431a      	orrs	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8c3 229d 	str.w	r2, [r3, #669]	; 0x29d
 800e306:	e00b      	b.n	800e320 <_ZN8FFBWheel11send_reportEv+0x124>
	else
		reportHID.buttons3 |= 1 << (rotaryPos[2] - 8);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 32a1 	ldr.w	r3, [r3, #673]	; 0x2a1
 800e30e:	7bba      	ldrb	r2, [r7, #14]
 800e310:	3a08      	subs	r2, #8
 800e312:	2101      	movs	r1, #1
 800e314:	fa01 f202 	lsl.w	r2, r1, r2
 800e318:	431a      	orrs	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8c3 22a1 	str.w	r2, [r3, #673]	; 0x2a1

	reportHID.buttons ^= 1 << 7;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 3299 	ldr.w	r3, [r3, #665]	; 0x299
 800e326:	f083 0280 	eor.w	r2, r3, #128	; 0x80
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8c3 2299 	str.w	r2, [r3, #665]	; 0x299
	reportHID.buttons ^= 1 << 10;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 3299 	ldr.w	r3, [r3, #665]	; 0x299
 800e336:	f483 6280 	eor.w	r2, r3, #1024	; 0x400
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8c3 2299 	str.w	r2, [r3, #665]	; 0x299


	// Encoder
	reportHID.X = clip(lastScaledEnc,-0x7fff,0x7fff);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e346:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e34a:	4955      	ldr	r1, [pc, #340]	; (800e4a0 <_ZN8FFBWheel11send_reportEv+0x2a4>)
 800e34c:	4618      	mov	r0, r3
 800e34e:	f000 f990 	bl	800e672 <_Z4clipIliET_S0_T0_S1_>
 800e352:	4603      	mov	r3, r0
 800e354:	b21a      	sxth	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8a3 22a5 	strh.w	r2, [r3, #677]	; 0x2a5

	int16_t ry = i2cButtonsBuffer[6] | (i2cButtonsBuffer[5] << 8);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e362:	b21a      	sxth	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e36a:	021b      	lsls	r3, r3, #8
 800e36c:	b21b      	sxth	r3, r3
 800e36e:	4313      	orrs	r3, r2
 800e370:	82fb      	strh	r3, [r7, #22]
	int16_t rz = i2cButtonsBuffer[8] | (i2cButtonsBuffer[7] << 8);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e378:	b21a      	sxth	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e380:	021b      	lsls	r3, r3, #8
 800e382:	b21b      	sxth	r3, r3
 800e384:	4313      	orrs	r3, r2
 800e386:	82bb      	strh	r3, [r7, #20]

	// Analog values read by DMA
	uint16_t axes = this->conf.axes;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 326d 	ldrb.w	r3, [r3, #621]	; 0x26d
 800e38e:	827b      	strh	r3, [r7, #18]
	reportHID.Y 	=  	(axes & 0x01 << 3) ? ((adc_buf[2] & 0xFFF) << 4)	-0x7fff : 0;
 800e390:	8a7b      	ldrh	r3, [r7, #18]
 800e392:	f003 0308 	and.w	r3, r3, #8
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00e      	beq.n	800e3b8 <_ZN8FFBWheel11send_reportEv+0x1bc>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8b3 3290 	ldrh.w	r3, [r3, #656]	; 0x290
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	011b      	lsls	r3, r3, #4
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	f023 030f 	bic.w	r3, r3, #15
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800e3b0:	3b7f      	subs	r3, #127	; 0x7f
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	b21a      	sxth	r2, r3
 800e3b6:	e000      	b.n	800e3ba <_ZN8FFBWheel11send_reportEv+0x1be>
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8a3 22a7 	strh.w	r2, [r3, #679]	; 0x2a7
	reportHID.Z		=  	(axes & 0x01 << 2) ? ((adc_buf[1] & 0xFFF) << 4)	-0x7fff : 0;
 800e3c0:	8a7b      	ldrh	r3, [r7, #18]
 800e3c2:	f003 0304 	and.w	r3, r3, #4
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00e      	beq.n	800e3e8 <_ZN8FFBWheel11send_reportEv+0x1ec>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8b3 328e 	ldrh.w	r3, [r3, #654]	; 0x28e
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	011b      	lsls	r3, r3, #4
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	f023 030f 	bic.w	r3, r3, #15
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800e3e0:	3b7f      	subs	r3, #127	; 0x7f
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	b21a      	sxth	r2, r3
 800e3e6:	e000      	b.n	800e3ea <_ZN8FFBWheel11send_reportEv+0x1ee>
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8a3 22a9 	strh.w	r2, [r3, #681]	; 0x2a9
	reportHID.RX	=  	(axes & 0x01 << 1) ? ((adc_buf[0] & 0xFFF) << 4)	-0x7fff : 0;
 800e3f0:	8a7b      	ldrh	r3, [r7, #18]
 800e3f2:	f003 0302 	and.w	r3, r3, #2
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00e      	beq.n	800e418 <_ZN8FFBWheel11send_reportEv+0x21c>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
 800e400:	b29b      	uxth	r3, r3
 800e402:	011b      	lsls	r3, r3, #4
 800e404:	b29b      	uxth	r3, r3
 800e406:	f023 030f 	bic.w	r3, r3, #15
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800e410:	3b7f      	subs	r3, #127	; 0x7f
 800e412:	b29b      	uxth	r3, r3
 800e414:	b21a      	sxth	r2, r3
 800e416:	e000      	b.n	800e41a <_ZN8FFBWheel11send_reportEv+0x21e>
 800e418:	2200      	movs	r2, #0
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8a3 22ab 	strh.w	r2, [r3, #683]	; 0x2ab
	reportHID.RY	=	(axes & 0x01 << 4) ? ((ry & 0xFFF) << 4)	-0x7fff : 0;
 800e420:	8a7b      	ldrh	r3, [r7, #18]
 800e422:	f003 0310 	and.w	r3, r3, #16
 800e426:	2b00      	cmp	r3, #0
 800e428:	d008      	beq.n	800e43c <_ZN8FFBWheel11send_reportEv+0x240>
 800e42a:	8afb      	ldrh	r3, [r7, #22]
 800e42c:	011b      	lsls	r3, r3, #4
 800e42e:	b29b      	uxth	r3, r3
 800e430:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800e434:	3b7f      	subs	r3, #127	; 0x7f
 800e436:	b29b      	uxth	r3, r3
 800e438:	b21a      	sxth	r2, r3
 800e43a:	e000      	b.n	800e43e <_ZN8FFBWheel11send_reportEv+0x242>
 800e43c:	2200      	movs	r2, #0
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8a3 22ad 	strh.w	r2, [r3, #685]	; 0x2ad
	reportHID.RZ	= 	(axes & 0x01 << 5) ? ((rz & 0xFFF) << 4)	-0x7fff : 0;
 800e444:	8a7b      	ldrh	r3, [r7, #18]
 800e446:	f003 0320 	and.w	r3, r3, #32
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d008      	beq.n	800e460 <_ZN8FFBWheel11send_reportEv+0x264>
 800e44e:	8abb      	ldrh	r3, [r7, #20]
 800e450:	011b      	lsls	r3, r3, #4
 800e452:	b29b      	uxth	r3, r3
 800e454:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800e458:	3b7f      	subs	r3, #127	; 0x7f
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	b21a      	sxth	r2, r3
 800e45e:	e000      	b.n	800e462 <_ZN8FFBWheel11send_reportEv+0x266>
 800e460:	2200      	movs	r2, #0
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8a3 22af 	strh.w	r2, [r3, #687]	; 0x2af
	reportHID.Dial  =   0;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 800e470:	2200      	movs	r2, #0
 800e472:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
	reportHID.Slider= 	0;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 800e47e:	2200      	movs	r2, #0
 800e480:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reinterpret_cast<uint8_t*>(&reportHID), sizeof(reportHID_t));
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800e48a:	221d      	movs	r2, #29
 800e48c:	4619      	mov	r1, r3
 800e48e:	4805      	ldr	r0, [pc, #20]	; (800e4a4 <_ZN8FFBWheel11send_reportEv+0x2a8>)
 800e490:	f006 fdf6 	bl	8015080 <USBD_CUSTOM_HID_SendReport>

}
 800e494:	bf00      	nop
 800e496:	3718      	adds	r7, #24
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	08017320 	.word	0x08017320
 800e4a0:	ffff8001 	.word	0xffff8001
 800e4a4:	200015f0 	.word	0x200015f0

0800e4a8 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:

void FFBWheel::timerElapsed(TIM_HandleTypeDef* htim){
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
	if(htim == this->timer_update){
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d102      	bne.n	800e4c4 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef+0x1c>
		update_flag = true;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	739a      	strb	r2, [r3, #14]
	}
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bc80      	pop	{r7}
 800e4cc:	4770      	bx	lr

0800e4ce <_ZThn4_N8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>:
	void cdcRcv(char* Buf, uint32_t *Len);

	static FFBWheelConfig decodeConf();

	void adcUpd(volatile uint32_t* ADC_BUF);
	void timerElapsed(TIM_HandleTypeDef* htim);
 800e4ce:	f1a0 0004 	sub.w	r0, r0, #4
 800e4d2:	f7ff bfe9 	b.w	800e4a8 <_ZN8FFBWheel12timerElapsedEP17TIM_HandleTypeDef>

0800e4d6 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b082      	sub	sp, #8
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 f8fa 	bl	800e6d8 <_ZNSaI13ParsedCommandED1Ev>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <_ZN8FFBWheel6cdcRcvEPcPm>:

void FFBWheel::cdcRcv(char* Buf, uint32_t *Len){
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b088      	sub	sp, #32
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	60f8      	str	r0, [r7, #12]
 800e4f6:	60b9      	str	r1, [r7, #8]
 800e4f8:	607a      	str	r2, [r7, #4]
	if(this->parser.add(Buf, Len)){
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	3310      	adds	r3, #16
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	68b9      	ldr	r1, [r7, #8]
 800e502:	4618      	mov	r0, r3
 800e504:	f7fb fc34 	bl	8009d70 <_ZN9CmdParser3addEPcPm>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d013      	beq.n	800e536 <_ZN8FFBWheel6cdcRcvEPcPm+0x48>
		executeCommands(this->parser.parse());
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f103 0210 	add.w	r2, r3, #16
 800e514:	f107 0314 	add.w	r3, r7, #20
 800e518:	4611      	mov	r1, r2
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fb fcf0 	bl	8009f00 <_ZN9CmdParser5parseEv>
 800e520:	f107 0314 	add.w	r3, r7, #20
 800e524:	4619      	mov	r1, r3
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f000 f94c 	bl	800e7c4 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>
 800e52c:	f107 0314 	add.w	r3, r7, #20
 800e530:	4618      	mov	r0, r3
 800e532:	f000 f8b6 	bl	800e6a2 <_ZNSt6vectorI13ParsedCommandSaIS0_EED1Ev>
	}
}
 800e536:	bf00      	nop
 800e538:	3720      	adds	r7, #32
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <_ZN8FFBWheel7usbInitEv>:

void FFBWheel::usbInit(){
 800e53e:	b580      	push	{r7, lr}
 800e540:	b082      	sub	sp, #8
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
	usbInit_HID_Wheel();
 800e546:	f001 fb75 	bl	800fc34 <_Z17usbInit_HID_Wheelv>
}
 800e54a:	bf00      	nop
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <_ZN8FFBWheel3SOFEv>:
void FFBWheel::SOF(){
 800e552:	b480      	push	{r7}
 800e554:	b083      	sub	sp, #12
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
	usb_update_flag = true;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2201      	movs	r2, #1
 800e55e:	735a      	strb	r2, [r3, #13]
	// USB clocked update callback
}
 800e560:	bf00      	nop
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	bc80      	pop	{r7}
 800e568:	4770      	bx	lr

0800e56a <_ZN8FFBWheel10decodeConfEv>:

FFBWheelConfig FFBWheel::decodeConf(){
 800e56a:	b5b0      	push	{r4, r5, r7, lr}
 800e56c:	b086      	sub	sp, #24
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
	uint8_t len = sizeof(FFBWheelConfig);
 800e572:	2314      	movs	r3, #20
 800e574:	75fb      	strb	r3, [r7, #23]
	len = len / 4 + (len % 4 != 0 ? 1 : 0);
 800e576:	7dfb      	ldrb	r3, [r7, #23]
 800e578:	089b      	lsrs	r3, r3, #2
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	7dfa      	ldrb	r2, [r7, #23]
 800e57e:	f002 0203 	and.w	r2, r2, #3
 800e582:	2a00      	cmp	r2, #0
 800e584:	d001      	beq.n	800e58a <_ZN8FFBWheel10decodeConfEv+0x20>
 800e586:	2201      	movs	r2, #1
 800e588:	e000      	b.n	800e58c <_ZN8FFBWheel10decodeConfEv+0x22>
 800e58a:	2200      	movs	r2, #0
 800e58c:	4413      	add	r3, r2
 800e58e:	75fb      	strb	r3, [r7, #23]
	uint32_t* buf = new uint32_t[len];
 800e590:	7dfb      	ldrb	r3, [r7, #23]
 800e592:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800e596:	4293      	cmp	r3, r2
 800e598:	d201      	bcs.n	800e59e <_ZN8FFBWheel10decodeConfEv+0x34>
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	e001      	b.n	800e5a2 <_ZN8FFBWheel10decodeConfEv+0x38>
 800e59e:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f006 ff7f 	bl	80154a6 <_Znaj>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	613b      	str	r3, [r7, #16]
	FFBWheelConfig* conf;

	EE_Reads(0x00, len, buf);
 800e5ac:	7dfb      	ldrb	r3, [r7, #23]
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	693a      	ldr	r2, [r7, #16]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	f7f2 fe33 	bl	8001220 <EE_Reads>

	conf = (FFBWheelConfig*)buf;
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	60fb      	str	r3, [r7, #12]
	return *conf;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	6811      	ldr	r1, [r2, #0]
 800e5c4:	6855      	ldr	r5, [r2, #4]
 800e5c6:	6894      	ldr	r4, [r2, #8]
 800e5c8:	68d0      	ldr	r0, [r2, #12]
 800e5ca:	6019      	str	r1, [r3, #0]
 800e5cc:	605d      	str	r5, [r3, #4]
 800e5ce:	609c      	str	r4, [r3, #8]
 800e5d0:	60d8      	str	r0, [r3, #12]
 800e5d2:	6911      	ldr	r1, [r2, #16]
 800e5d4:	6119      	str	r1, [r3, #16]
}
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bdb0      	pop	{r4, r5, r7, pc}

0800e5de <_ZN8FFBWheel11initEncoderEv>:

void FFBWheel::initEncoder()
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b082      	sub	sp, #8
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
	enc->setPpr(conf.encoderPPR);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8d3 2284 	ldr.w	r2, [r3, #644]	; 0x284
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8b3 3274 	ldrh.w	r3, [r3, #628]	; 0x274
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	f7fe fb3e 	bl	800cc76 <_ZN12EncoderLocal6setPprEm>
	enc->degree = conf.degreesOfRotation;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8b3 226e 	ldrh.w	r2, [r3, #622]	; 0x26e
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800e606:	611a      	str	r2, [r3, #16]
}
 800e608:	bf00      	nop
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <_Z4clipIllET_S0_T0_S1_>:
		return 0;
	}
}

template<class T,class C>
T clip(T v, C l, C h)
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
{
  return { v > h ? h : v < l ? l : v };
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	429a      	cmp	r2, r3
 800e622:	dc07      	bgt.n	800e634 <_Z4clipIllET_S0_T0_S1_+0x24>
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	429a      	cmp	r2, r3
 800e62a:	da01      	bge.n	800e630 <_Z4clipIllET_S0_T0_S1_+0x20>
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	e002      	b.n	800e636 <_Z4clipIllET_S0_T0_S1_+0x26>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	e000      	b.n	800e636 <_Z4clipIllET_S0_T0_S1_+0x26>
 800e634:	687b      	ldr	r3, [r7, #4]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3714      	adds	r7, #20
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bc80      	pop	{r7}
 800e63e:	4770      	bx	lr

0800e640 <_Z8cliptestIllEaT_T0_S1_>:
int8_t cliptest(T v, C l, C h)
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
	if(v > h){
 800e64c:	68fa      	ldr	r2, [r7, #12]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	429a      	cmp	r2, r3
 800e652:	dd01      	ble.n	800e658 <_Z8cliptestIllEaT_T0_S1_+0x18>
		return 1;
 800e654:	2301      	movs	r3, #1
 800e656:	e007      	b.n	800e668 <_Z8cliptestIllEaT_T0_S1_+0x28>
	}else if(v < l){
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	da02      	bge.n	800e666 <_Z8cliptestIllEaT_T0_S1_+0x26>
		return -1;
 800e660:	f04f 33ff 	mov.w	r3, #4294967295
 800e664:	e000      	b.n	800e668 <_Z8cliptestIllEaT_T0_S1_+0x28>
		return 0;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3714      	adds	r7, #20
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bc80      	pop	{r7}
 800e670:	4770      	bx	lr

0800e672 <_Z4clipIliET_S0_T0_S1_>:
T clip(T v, C l, C h)
 800e672:	b480      	push	{r7}
 800e674:	b085      	sub	sp, #20
 800e676:	af00      	add	r7, sp, #0
 800e678:	60f8      	str	r0, [r7, #12]
 800e67a:	60b9      	str	r1, [r7, #8]
 800e67c:	607a      	str	r2, [r7, #4]
  return { v > h ? h : v < l ? l : v };
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	429a      	cmp	r2, r3
 800e684:	dc07      	bgt.n	800e696 <_Z4clipIliET_S0_T0_S1_+0x24>
 800e686:	68fa      	ldr	r2, [r7, #12]
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	da01      	bge.n	800e692 <_Z4clipIliET_S0_T0_S1_+0x20>
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	e002      	b.n	800e698 <_Z4clipIliET_S0_T0_S1_+0x26>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	e000      	b.n	800e698 <_Z4clipIliET_S0_T0_S1_+0x26>
 800e696:	687b      	ldr	r3, [r7, #4]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3714      	adds	r7, #20
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bc80      	pop	{r7}
 800e6a0:	4770      	bx	lr

0800e6a2 <_ZNSt6vectorI13ParsedCommandSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800e6a2:	b5b0      	push	{r4, r5, r7, lr}
 800e6a4:	b082      	sub	sp, #8
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681c      	ldr	r4, [r3, #0]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fc f960 	bl	800a97a <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 800e6ba:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e6bc:	461a      	mov	r2, r3
 800e6be:	4629      	mov	r1, r5
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f7fc f964 	bl	800a98e <_ZSt8_DestroyIP13ParsedCommandS0_EvT_S2_RSaIT0_E>
      }
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f000 f811 	bl	800e6f0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bdb0      	pop	{r4, r5, r7, pc}

0800e6d8 <_ZNSaI13ParsedCommandED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f823 	bl	800e72c <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandED1Ev>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3708      	adds	r7, #8
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	689a      	ldr	r2, [r3, #8]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	1ad3      	subs	r3, r2, r3
 800e706:	109b      	asrs	r3, r3, #2
 800e708:	4a07      	ldr	r2, [pc, #28]	; (800e728 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EED1Ev+0x38>)
 800e70a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800e70e:	461a      	mov	r2, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7fc f91f 	bl	800a954 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE13_M_deallocateEPS0_j>
      }
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4618      	mov	r0, r3
 800e71a:	f7ff fedc 	bl	800e4d6 <_ZNSt12_Vector_baseI13ParsedCommandSaIS0_EE12_Vector_implD1Ev>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4618      	mov	r0, r3
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	38e38e39 	.word	0x38e38e39

0800e72c <_ZN9__gnu_cxx13new_allocatorI13ParsedCommandED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4618      	mov	r0, r3
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bc80      	pop	{r7}
 800e73e:	4770      	bx	lr

0800e740 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af02      	add	r7, sp, #8
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	4b04      	ldr	r3, [pc, #16]	; (800e764 <_ZNSt7__cxx119to_stringEi+0x24>)
 800e752:	2210      	movs	r2, #16
 800e754:	4904      	ldr	r1, [pc, #16]	; (800e768 <_ZNSt7__cxx119to_stringEi+0x28>)
 800e756:	f001 f905 	bl	800f964 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	3708      	adds	r7, #8
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	08017324 	.word	0x08017324
 800e768:	08016b99 	.word	0x08016b99

0800e76c <_ZNSt7__cxx119to_stringEl>:
					   4 * sizeof(unsigned),
					   "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af02      	add	r7, sp, #8
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
					   "%ld", __val); }
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	4b04      	ldr	r3, [pc, #16]	; (800e790 <_ZNSt7__cxx119to_stringEl+0x24>)
 800e77e:	2210      	movs	r2, #16
 800e780:	4904      	ldr	r1, [pc, #16]	; (800e794 <_ZNSt7__cxx119to_stringEl+0x28>)
 800e782:	f001 f8ef 	bl	800f964 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	3708      	adds	r7, #8
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	08017328 	.word	0x08017328
 800e794:	08016b99 	.word	0x08016b99

0800e798 <_ZNSt7__cxx119to_stringEm>:

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af02      	add	r7, sp, #8
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	4b04      	ldr	r3, [pc, #16]	; (800e7bc <_ZNSt7__cxx119to_stringEm+0x24>)
 800e7aa:	2210      	movs	r2, #16
 800e7ac:	4904      	ldr	r1, [pc, #16]	; (800e7c0 <_ZNSt7__cxx119to_stringEm+0x28>)
 800e7ae:	f001 f8d9 	bl	800f964 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	0801732c 	.word	0x0801732c
 800e7c0:	08016b99 	.word	0x08016b99

0800e7c4 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE>:
		{128,0,0},
		{0,128,0},
		{0,0,128}
};

void FFBWheel::executeCommands(std::vector<ParsedCommand> commands){
 800e7c4:	b590      	push	{r4, r7, lr}
 800e7c6:	b099      	sub	sp, #100	; 0x64
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
	std::string reply;
 800e7ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f007 f800 	bl	80157d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	extern std::vector<CommandHandler*> cmdHandlers;
	for(ParsedCommand cmd : commands){
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7dc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e7de:	f7fc fc22 	bl	800b026 <_ZNSt6vectorI13ParsedCommandSaIS0_EE5beginEv>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e7e8:	f7fc f946 	bl	800aa78 <_ZNSt6vectorI13ParsedCommandSaIS0_EE3endEv>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	637b      	str	r3, [r7, #52]	; 0x34
 800e7f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e7f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f001 f8ea 	bl	800f9d4 <_ZN9__gnu_cxxneIP13ParsedCommandSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d07f      	beq.n	800e906 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x142>
 800e806:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e80a:	4618      	mov	r0, r3
 800e80c:	f001 f90a 	bl	800fa24 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEdeEv>
 800e810:	4602      	mov	r2, r0
 800e812:	f107 0308 	add.w	r3, r7, #8
 800e816:	4611      	mov	r1, r2
 800e818:	4618      	mov	r0, r3
 800e81a:	f7fc fb7a 	bl	800af12 <_ZN13ParsedCommandC1ERKS_>
		if(!executeSysCommand(&cmd,&reply)){
 800e81e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800e822:	f107 0308 	add.w	r3, r7, #8
 800e826:	4619      	mov	r1, r3
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 f895 	bl	800e958 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800e82e:	4603      	mov	r3, r0
 800e830:	f083 0301 	eor.w	r3, r3, #1
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	d03b      	beq.n	800e8b2 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xee>
			// Call all command handlers
			for(CommandHandler* handler : cmdHandlers){
 800e83a:	4b46      	ldr	r3, [pc, #280]	; (800e954 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x190>)
 800e83c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e83e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e840:	f7fd fb3f 	bl	800bec2 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE5beginEv>
 800e844:	4603      	mov	r3, r0
 800e846:	633b      	str	r3, [r7, #48]	; 0x30
 800e848:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e84a:	f7fd fc6d 	bl	800c128 <_ZNSt6vectorIP14CommandHandlerSaIS1_EE3endEv>
 800e84e:	4603      	mov	r3, r0
 800e850:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e852:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e85a:	4611      	mov	r1, r2
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fd fd5e 	bl	800c31e <_ZN9__gnu_cxxneIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d024      	beq.n	800e8b2 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xee>
 800e868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e86c:	4618      	mov	r0, r3
 800e86e:	f001 f8f3 	bl	800fa58 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 800e872:	4603      	mov	r3, r0
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	657b      	str	r3, [r7, #84]	; 0x54
				if(handler->hasCommands())
 800e878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	3308      	adds	r3, #8
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e882:	4798      	blx	r3
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00c      	beq.n	800e8a4 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xe0>
					if(handler->command(&cmd,&reply))
 800e88a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	3310      	adds	r3, #16
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800e896:	f107 0108 	add.w	r1, r7, #8
 800e89a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e89c:	4798      	blx	r3
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d105      	bne.n	800e8b0 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0xec>
			for(CommandHandler* handler : cmdHandlers){
 800e8a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f001 f8c6 	bl	800fa3a <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEppEv>
 800e8ae:	e7d0      	b.n	800e852 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x8e>
						break; // Stop after this class if finished flag is returned
 800e8b0:	bf00      	nop
			}

		}
		if(!reply.empty() && reply.back()!='\n'){
 800e8b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f006 ffea 	bl	8015890 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	f083 0301 	eor.w	r3, r3, #1
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00a      	beq.n	800e8de <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11a>
 800e8c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f006 ffe7 	bl	80158a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b0a      	cmp	r3, #10
 800e8d8:	d001      	beq.n	800e8de <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11a>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e000      	b.n	800e8e0 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x11c>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d005      	beq.n	800e8f0 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x12c>
			reply+='\n';
 800e8e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e8e8:	210a      	movs	r1, #10
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f006 fffa 	bl	80158e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	for(ParsedCommand cmd : commands){
 800e8f0:	f107 0308 	add.w	r3, r7, #8
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fb faf6 	bl	8009ee6 <_ZN13ParsedCommandD1Ev>
 800e8fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e8fe:	4618      	mov	r0, r3
 800e900:	f001 f880 	bl	800fa04 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEppEv>
 800e904:	e774      	b.n	800e7f0 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x2c>
		}
	}
	if(reply.length()>0){
 800e906:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e90a:	4618      	mov	r0, r3
 800e90c:	f006 ffb9 	bl	8015882 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	bf14      	ite	ne
 800e916:	2301      	movne	r3, #1
 800e918:	2300      	moveq	r3, #0
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d010      	beq.n	800e942 <_ZN8FFBWheel15executeCommandsESt6vectorI13ParsedCommandSaIS1_EE+0x17e>
		CDC_Transmit_FS(reply.c_str(), reply.length());
 800e920:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e924:	4618      	mov	r0, r3
 800e926:	f007 f837 	bl	8015998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800e92a:	4604      	mov	r4, r0
 800e92c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e930:	4618      	mov	r0, r3
 800e932:	f006 ffa6 	bl	8015882 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800e936:	4603      	mov	r3, r0
 800e938:	b29b      	uxth	r3, r3
 800e93a:	4619      	mov	r1, r3
 800e93c:	4620      	mov	r0, r4
 800e93e:	f004 fccb 	bl	80132d8 <CDC_Transmit_FS>
	std::string reply;
 800e942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e946:	4618      	mov	r0, r3
 800e948:	f006 ff67 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800e94c:	bf00      	nop
 800e94e:	3764      	adds	r7, #100	; 0x64
 800e950:	46bd      	mov	sp, r7
 800e952:	bd90      	pop	{r4, r7, pc}
 800e954:	2000079c 	.word	0x2000079c

0800e958 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool FFBWheel::executeSysCommand(ParsedCommand* cmd,std::string* reply){
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
	bool flag = true;
 800e964:	2301      	movs	r3, #1
 800e966:	75fb      	strb	r3, [r7, #23]
	if(cmd->cmd == "help"){
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	491b      	ldr	r1, [pc, #108]	; (800e9d8 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>)
 800e96c:	4618      	mov	r0, r3
 800e96e:	f001 f87e 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00c      	beq.n	800e992 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
		*reply += parser.helpstring;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	3330      	adds	r3, #48	; 0x30
 800e97c:	4619      	mov	r1, r3
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f006 ffdc 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
		*reply += "Commands:format (Erase flash)";
 800e984:	4915      	ldr	r1, [pc, #84]	; (800e9dc <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>)
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f007 f802 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		flag = false; // Continue to user commands
 800e98c:	2300      	movs	r3, #0
 800e98e:	75fb      	strb	r3, [r7, #23]
 800e990:	e01d      	b.n	800e9ce <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
	}else if(cmd->cmd == "format"){
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	4912      	ldr	r1, [pc, #72]	; (800e9e0 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>)
 800e996:	4618      	mov	r0, r3
 800e998:	f001 f869 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d013      	beq.n	800e9ca <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x72>
		if(cmd->type == CMDtype::set && cmd->val==1){
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	6a1b      	ldr	r3, [r3, #32]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d10a      	bne.n	800e9c0 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	69db      	ldr	r3, [r3, #28]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d106      	bne.n	800e9c0 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
			HAL_FLASH_Unlock();
 800e9b2:	f7f4 fbab 	bl	800310c <HAL_FLASH_Unlock>
			EE_Format();
 800e9b6:	f7f2 fc09 	bl	80011cc <EE_Format>
			HAL_FLASH_Lock();
 800e9ba:	f7f4 fbcd 	bl	8003158 <HAL_FLASH_Lock>
 800e9be:	e006      	b.n	800e9ce <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
		}else{
			*reply += "format=1 will ERASE ALL stored variables. Be careful!";
 800e9c0:	4908      	ldr	r1, [pc, #32]	; (800e9e4 <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f006 ffe4 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800e9c8:	e001      	b.n	800e9ce <_ZN8FFBWheel17executeSysCommandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
		}
	}else{
		flag = false;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	75fb      	strb	r3, [r7, #23]
	}
	return flag;
 800e9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3718      	adds	r7, #24
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	08017330 	.word	0x08017330
 800e9dc:	08017338 	.word	0x08017338
 800e9e0:	08017358 	.word	0x08017358
 800e9e4:	08017360 	.word	0x08017360

0800e9e8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
volatile const SimDisplayPacket* Oldtelemetry;
bool FFBWheel::command(ParsedCommand* cmd,std::string* reply){
 800e9e8:	b5b0      	push	{r4, r5, r7, lr}
 800e9ea:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	f107 030c 	add.w	r3, r7, #12
 800e9f4:	6018      	str	r0, [r3, #0]
 800e9f6:	f107 0308 	add.w	r3, r7, #8
 800e9fa:	6019      	str	r1, [r3, #0]
 800e9fc:	1d3b      	adds	r3, r7, #4
 800e9fe:	601a      	str	r2, [r3, #0]
	bool flag = true;
 800ea00:	2301      	movs	r3, #1
 800ea02:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	// ------------ General commands ----------------
	if(cmd->cmd == "save"){
 800ea06:	f107 0308 	add.w	r3, r7, #8
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	49c7      	ldr	r1, [pc, #796]	; (800ed2c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f001 f82d 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00c      	beq.n	800ea34 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>
		needSave = true;
 800ea1a:	f107 030c 	add.w	r3, r7, #12
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2201      	movs	r2, #1
 800ea22:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		*reply+="OK";
 800ea26:	1d3b      	adds	r3, r7, #4
 800ea28:	49c1      	ldr	r1, [pc, #772]	; (800ed30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>)
 800ea2a:	6818      	ldr	r0, [r3, #0]
 800ea2c:	f006 ffb0 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ea30:	f000 bf80 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
	}else if(cmd->cmd == "zeroenc"){
 800ea34:	f107 0308 	add.w	r3, r7, #8
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	49be      	ldr	r1, [pc, #760]	; (800ed34 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34c>)
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f001 f816 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d016      	beq.n	800ea76 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8e>
		if(cmd->type == CMDtype::get){
 800ea48:	f107 0308 	add.w	r3, r7, #8
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6a1b      	ldr	r3, [r3, #32]
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	f040 876f 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			this->enc->setPos(0);
 800ea56:	f107 030c 	add.w	r3, r7, #12
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800ea60:	2100      	movs	r1, #0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fe f88e 	bl	800cb84 <_ZN12EncoderLocal6setPosEl>

			*reply += "OK";
 800ea68:	1d3b      	adds	r3, r7, #4
 800ea6a:	49b1      	ldr	r1, [pc, #708]	; (800ed30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>)
 800ea6c:	6818      	ldr	r0, [r3, #0]
 800ea6e:	f006 ff8f 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ea72:	f000 bf5f 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}
	}else if(cmd->cmd == "maxPower"){
 800ea76:	f107 0308 	add.w	r3, r7, #8
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	49ae      	ldr	r1, [pc, #696]	; (800ed38 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x350>)
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f000 fff5 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d061      	beq.n	800eb4e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x166>
		if(cmd->type == CMDtype::get){
 800ea8a:	f107 0308 	add.w	r3, r7, #8
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6a1b      	ldr	r3, [r3, #32]
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d119      	bne.n	800eaca <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe2>
			*reply+=std::to_string(conf.maxpower);
 800ea96:	f107 030c 	add.w	r3, r7, #12
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eaa6:	4611      	mov	r1, r2
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7ff fe49 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800eaae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800eab2:	1d3b      	adds	r3, r7, #4
 800eab4:	4611      	mov	r1, r2
 800eab6:	6818      	ldr	r0, [r3, #0]
 800eab8:	f006 ff40 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800eabc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eac0:	4618      	mov	r0, r3
 800eac2:	f006 feaa 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800eac6:	f000 bf35 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}else if(cmd->type == CMDtype::set){
 800eaca:	f107 0308 	add.w	r3, r7, #8
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	6a1b      	ldr	r3, [r3, #32]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	f040 872e 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			this->conf.maxpower = cmd->val;
 800ead8:	f107 0308 	add.w	r3, r7, #8
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	69db      	ldr	r3, [r3, #28]
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	f107 030c 	add.w	r3, r7, #12
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
			float effect_margin_scaler = ((float)conf.totalGain/255.0);
 800eaec:	f107 030c 	add.w	r3, r7, #12
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7f2 f806 	bl	8000b08 <__aeabi_ui2f>
 800eafc:	4603      	mov	r3, r0
 800eafe:	498f      	ldr	r1, [pc, #572]	; (800ed3c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x354>)
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7f2 f90d 	bl	8000d20 <__aeabi_fdiv>
 800eb06:	4603      	mov	r3, r0
 800eb08:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			this->torqueScaler = ((float)this->conf.maxpower / (float)0x7fff) * effect_margin_scaler;
 800eb0c:	f107 030c 	add.w	r3, r7, #12
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7f1 fff6 	bl	8000b08 <__aeabi_ui2f>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	4988      	ldr	r1, [pc, #544]	; (800ed40 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x358>)
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f2 f8fd 	bl	8000d20 <__aeabi_fdiv>
 800eb26:	4603      	mov	r3, r0
 800eb28:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7f2 f843 	bl	8000bb8 <__aeabi_fmul>
 800eb32:	4603      	mov	r3, r0
 800eb34:	461a      	mov	r2, r3
 800eb36:	f107 030c 	add.w	r3, r7, #12
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
			*reply += "OK";
 800eb40:	1d3b      	adds	r3, r7, #4
 800eb42:	497b      	ldr	r1, [pc, #492]	; (800ed30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>)
 800eb44:	6818      	ldr	r0, [r3, #0]
 800eb46:	f006 ff23 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800eb4a:	f000 bef3 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}
	}else if(cmd->cmd == "degrees"){
 800eb4e:	f107 0308 	add.w	r3, r7, #8
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	497b      	ldr	r1, [pc, #492]	; (800ed44 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x35c>)
 800eb56:	4618      	mov	r0, r3
 800eb58:	f000 ff89 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d042      	beq.n	800ebe8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x200>
		if(cmd->type == CMDtype::get){
 800eb62:	f107 0308 	add.w	r3, r7, #8
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6a1b      	ldr	r3, [r3, #32]
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d119      	bne.n	800eba2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ba>
			*reply+=std::to_string(this->conf.degreesOfRotation);
 800eb6e:	f107 030c 	add.w	r3, r7, #12
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f8b3 326e 	ldrh.w	r3, [r3, #622]	; 0x26e
 800eb78:	461a      	mov	r2, r3
 800eb7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800eb7e:	4611      	mov	r1, r2
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7ff fddd 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800eb86:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800eb8a:	1d3b      	adds	r3, r7, #4
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	6818      	ldr	r0, [r3, #0]
 800eb90:	f006 fed4 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800eb94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f006 fe3e 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800eb9e:	f000 bec9 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}else if(cmd->type == CMDtype::set){
 800eba2:	f107 0308 	add.w	r3, r7, #8
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	6a1b      	ldr	r3, [r3, #32]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	f040 86c2 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			this->conf.degreesOfRotation = cmd->val;
 800ebb0:	f107 0308 	add.w	r3, r7, #8
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	69db      	ldr	r3, [r3, #28]
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	f107 030c 	add.w	r3, r7, #12
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
			enc->degree = conf.degreesOfRotation;
 800ebc4:	f107 030c 	add.w	r3, r7, #12
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f8b3 226e 	ldrh.w	r2, [r3, #622]	; 0x26e
 800ebce:	f107 030c 	add.w	r3, r7, #12
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800ebd8:	611a      	str	r2, [r3, #16]
			*reply += "OK";
 800ebda:	1d3b      	adds	r3, r7, #4
 800ebdc:	4954      	ldr	r1, [pc, #336]	; (800ed30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>)
 800ebde:	6818      	ldr	r0, [r3, #0]
 800ebe0:	f006 fed6 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ebe4:	f000 bea6 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}
	}else if(cmd->cmd == "axismask"){
 800ebe8:	f107 0308 	add.w	r3, r7, #8
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4956      	ldr	r1, [pc, #344]	; (800ed48 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x360>)
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f000 ff3c 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d037      	beq.n	800ec6c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x284>
		if(cmd->type == CMDtype::get){
 800ebfc:	f107 0308 	add.w	r3, r7, #8
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	6a1b      	ldr	r3, [r3, #32]
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d119      	bne.n	800ec3c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x254>
			*reply+=std::to_string(this->conf.axes);
 800ec08:	f107 030c 	add.w	r3, r7, #12
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f893 326d 	ldrb.w	r3, [r3, #621]	; 0x26d
 800ec12:	461a      	mov	r2, r3
 800ec14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ec18:	4611      	mov	r1, r2
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7ff fd90 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800ec20:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800ec24:	1d3b      	adds	r3, r7, #4
 800ec26:	4611      	mov	r1, r2
 800ec28:	6818      	ldr	r0, [r3, #0]
 800ec2a:	f006 fe87 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800ec2e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ec32:	4618      	mov	r0, r3
 800ec34:	f006 fdf1 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ec38:	f000 be7c 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}else if(cmd->type == CMDtype::set){
 800ec3c:	f107 0308 	add.w	r3, r7, #8
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	6a1b      	ldr	r3, [r3, #32]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f040 8675 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			this->conf.axes = cmd->val;
 800ec4a:	f107 0308 	add.w	r3, r7, #8
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	69db      	ldr	r3, [r3, #28]
 800ec52:	b2da      	uxtb	r2, r3
 800ec54:	f107 030c 	add.w	r3, r7, #12
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
			*reply += "OK";
 800ec5e:	1d3b      	adds	r3, r7, #4
 800ec60:	4933      	ldr	r1, [pc, #204]	; (800ed30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>)
 800ec62:	6818      	ldr	r0, [r3, #0]
 800ec64:	f006 fe94 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ec68:	f000 be64 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}
	}else if(cmd->cmd == "ppr"){
 800ec6c:	f107 0308 	add.w	r3, r7, #8
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4936      	ldr	r1, [pc, #216]	; (800ed4c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x364>)
 800ec74:	4618      	mov	r0, r3
 800ec76:	f000 fefa 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d069      	beq.n	800ed54 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36c>
		if(cmd->type == CMDtype::get){
 800ec80:	f107 0308 	add.w	r3, r7, #8
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6a1b      	ldr	r3, [r3, #32]
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d11c      	bne.n	800ecc6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2de>
			*reply+=std::to_string(this->enc->getPpr());
 800ec8c:	f107 030c 	add.w	r3, r7, #12
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fd ffe2 	bl	800cc60 <_ZN12EncoderLocal6getPprEv>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800eca2:	4611      	mov	r1, r2
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff fd77 	bl	800e798 <_ZNSt7__cxx119to_stringEm>
 800ecaa:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800ecae:	1d3b      	adds	r3, r7, #4
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	6818      	ldr	r0, [r3, #0]
 800ecb4:	f006 fe42 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800ecb8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f006 fdac 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ecc2:	f000 be37 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 800ecc6:	f107 0308 	add.w	r3, r7, #8
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6a1b      	ldr	r3, [r3, #32]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d124      	bne.n	800ed1c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x334>
 800ecd2:	f107 030c 	add.w	r3, r7, #12
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d01d      	beq.n	800ed1c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x334>
			this->conf.encoderPPR = cmd->val;
 800ece0:	f107 0308 	add.w	r3, r7, #8
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	69db      	ldr	r3, [r3, #28]
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	f107 030c 	add.w	r3, r7, #12
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
			this->enc->setPpr(cmd->val);
 800ecf4:	f107 030c 	add.w	r3, r7, #12
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f8d3 2284 	ldr.w	r2, [r3, #644]	; 0x284
 800ecfe:	f107 0308 	add.w	r3, r7, #8
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	69db      	ldr	r3, [r3, #28]
 800ed06:	4619      	mov	r1, r3
 800ed08:	4610      	mov	r0, r2
 800ed0a:	f7fd ffb4 	bl	800cc76 <_ZN12EncoderLocal6setPprEm>
			*reply += "OK";
 800ed0e:	1d3b      	adds	r3, r7, #4
 800ed10:	4907      	ldr	r1, [pc, #28]	; (800ed30 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>)
 800ed12:	6818      	ldr	r0, [r3, #0]
 800ed14:	f006 fe3c 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ed18:	f000 be0c 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}else{
			*reply += "Err. Setup enctype first";
 800ed1c:	1d3b      	adds	r3, r7, #4
 800ed1e:	490c      	ldr	r1, [pc, #48]	; (800ed50 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x368>)
 800ed20:	6818      	ldr	r0, [r3, #0]
 800ed22:	f006 fe35 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ed26:	f000 be05 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
 800ed2a:	bf00      	nop
 800ed2c:	08017398 	.word	0x08017398
 800ed30:	080173a0 	.word	0x080173a0
 800ed34:	080173a4 	.word	0x080173a4
 800ed38:	080173ac 	.word	0x080173ac
 800ed3c:	437f0000 	.word	0x437f0000
 800ed40:	46fffe00 	.word	0x46fffe00
 800ed44:	080173b8 	.word	0x080173b8
 800ed48:	080173c0 	.word	0x080173c0
 800ed4c:	080173cc 	.word	0x080173cc
 800ed50:	080173d0 	.word	0x080173d0
		}
	}else if(cmd->cmd == "adcmax"){
 800ed54:	f107 0308 	add.w	r3, r7, #8
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	49c4      	ldr	r1, [pc, #784]	; (800f06c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x684>)
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f000 fe86 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d037      	beq.n	800edd8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f0>
			if(cmd->type == CMDtype::get){
 800ed68:	f107 0308 	add.w	r3, r7, #8
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	6a1b      	ldr	r3, [r3, #32]
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	d119      	bne.n	800eda8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c0>
				*reply+=std::to_string(this->conf.maxAdcCount);
 800ed74:	f107 030c 	add.w	r3, r7, #12
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f893 3276 	ldrb.w	r3, [r3, #630]	; 0x276
 800ed7e:	461a      	mov	r2, r3
 800ed80:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ed84:	4611      	mov	r1, r2
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7ff fcda 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800ed8c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800ed90:	1d3b      	adds	r3, r7, #4
 800ed92:	4611      	mov	r1, r2
 800ed94:	6818      	ldr	r0, [r3, #0]
 800ed96:	f006 fdd1 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800ed9a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f006 fd3b 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800eda4:	f000 bdc6 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			}else if(cmd->type == CMDtype::set){
 800eda8:	f107 0308 	add.w	r3, r7, #8
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	6a1b      	ldr	r3, [r3, #32]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f040 85bf 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				this->conf.maxAdcCount = cmd->val;
 800edb6:	f107 0308 	add.w	r3, r7, #8
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	69db      	ldr	r3, [r3, #28]
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	f107 030c 	add.w	r3, r7, #12
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
				*reply += "OK";
 800edca:	1d3b      	adds	r3, r7, #4
 800edcc:	49a8      	ldr	r1, [pc, #672]	; (800f070 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>)
 800edce:	6818      	ldr	r0, [r3, #0]
 800edd0:	f006 fdde 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800edd4:	f000 bdae 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			}
	}else if(cmd->cmd == "inverted"){
 800edd8:	f107 0308 	add.w	r3, r7, #8
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	49a5      	ldr	r1, [pc, #660]	; (800f074 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68c>)
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 fe44 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d037      	beq.n	800ee5c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x474>
				if(cmd->type == CMDtype::get){
 800edec:	f107 0308 	add.w	r3, r7, #8
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d119      	bne.n	800ee2c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x444>
					*reply+=std::to_string(this->conf.inverted);
 800edf8:	f107 030c 	add.w	r3, r7, #12
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f893 3277 	ldrb.w	r3, [r3, #631]	; 0x277
 800ee02:	461a      	mov	r2, r3
 800ee04:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ee08:	4611      	mov	r1, r2
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7ff fc98 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800ee10:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800ee14:	1d3b      	adds	r3, r7, #4
 800ee16:	4611      	mov	r1, r2
 800ee18:	6818      	ldr	r0, [r3, #0]
 800ee1a:	f006 fd8f 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800ee1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ee22:	4618      	mov	r0, r3
 800ee24:	f006 fcf9 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ee28:	f000 bd84 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800ee2c:	f107 0308 	add.w	r3, r7, #8
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	6a1b      	ldr	r3, [r3, #32]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	f040 857d 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.inverted = (uint8_t)cmd->val;
 800ee3a:	f107 0308 	add.w	r3, r7, #8
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	69db      	ldr	r3, [r3, #28]
 800ee42:	b2da      	uxtb	r2, r3
 800ee44:	f107 030c 	add.w	r3, r7, #12
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
					*reply += "OK";
 800ee4e:	1d3b      	adds	r3, r7, #4
 800ee50:	4987      	ldr	r1, [pc, #540]	; (800f070 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>)
 800ee52:	6818      	ldr	r0, [r3, #0]
 800ee54:	f006 fd9c 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ee58:	f000 bd6c 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}
	}else if(cmd->cmd == "constantGain"){
 800ee5c:	f107 0308 	add.w	r3, r7, #8
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4985      	ldr	r1, [pc, #532]	; (800f078 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x690>)
 800ee64:	4618      	mov	r0, r3
 800ee66:	f000 fe02 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d037      	beq.n	800eee0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>
				if(cmd->type == CMDtype::get){
 800ee70:	f107 0308 	add.w	r3, r7, #8
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	6a1b      	ldr	r3, [r3, #32]
 800ee78:	2b02      	cmp	r3, #2
 800ee7a:	d119      	bne.n	800eeb0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c8>
					*reply+=std::to_string(this->conf.constantGain);
 800ee7c:	f107 030c 	add.w	r3, r7, #12
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f893 3279 	ldrb.w	r3, [r3, #633]	; 0x279
 800ee86:	461a      	mov	r2, r3
 800ee88:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff fc56 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800ee94:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800ee98:	1d3b      	adds	r3, r7, #4
 800ee9a:	4611      	mov	r1, r2
 800ee9c:	6818      	ldr	r0, [r3, #0]
 800ee9e:	f006 fd4d 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800eea2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800eea6:	4618      	mov	r0, r3
 800eea8:	f006 fcb7 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800eeac:	f000 bd42 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800eeb0:	f107 0308 	add.w	r3, r7, #8
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f040 853b 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.constantGain = cmd->val;
 800eebe:	f107 0308 	add.w	r3, r7, #8
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	69db      	ldr	r3, [r3, #28]
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	f107 030c 	add.w	r3, r7, #12
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
					*reply += "OK";
 800eed2:	1d3b      	adds	r3, r7, #4
 800eed4:	4966      	ldr	r1, [pc, #408]	; (800f070 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>)
 800eed6:	6818      	ldr	r0, [r3, #0]
 800eed8:	f006 fd5a 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800eedc:	f000 bd2a 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}
	}else if(cmd->cmd == "springGain"){
 800eee0:	f107 0308 	add.w	r3, r7, #8
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4965      	ldr	r1, [pc, #404]	; (800f07c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x694>)
 800eee8:	4618      	mov	r0, r3
 800eeea:	f000 fdc0 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d037      	beq.n	800ef64 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x57c>
				if(cmd->type == CMDtype::get){
 800eef4:	f107 0308 	add.w	r3, r7, #8
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	6a1b      	ldr	r3, [r3, #32]
 800eefc:	2b02      	cmp	r3, #2
 800eefe:	d119      	bne.n	800ef34 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54c>
					*reply+=std::to_string(this->conf.springGain);
 800ef00:	f107 030c 	add.w	r3, r7, #12
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ef10:	4611      	mov	r1, r2
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7ff fc14 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800ef18:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800ef1c:	1d3b      	adds	r3, r7, #4
 800ef1e:	4611      	mov	r1, r2
 800ef20:	6818      	ldr	r0, [r3, #0]
 800ef22:	f006 fd0b 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800ef26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f006 fc75 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ef30:	f000 bd00 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800ef34:	f107 0308 	add.w	r3, r7, #8
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	6a1b      	ldr	r3, [r3, #32]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f040 84f9 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.springGain = cmd->val;
 800ef42:	f107 0308 	add.w	r3, r7, #8
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	69db      	ldr	r3, [r3, #28]
 800ef4a:	b2da      	uxtb	r2, r3
 800ef4c:	f107 030c 	add.w	r3, r7, #12
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
					*reply += "OK";
 800ef56:	1d3b      	adds	r3, r7, #4
 800ef58:	4945      	ldr	r1, [pc, #276]	; (800f070 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>)
 800ef5a:	6818      	ldr	r0, [r3, #0]
 800ef5c:	f006 fd18 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800ef60:	f000 bce8 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}
	}else if(cmd->cmd == "damperGain"){
 800ef64:	f107 0308 	add.w	r3, r7, #8
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4945      	ldr	r1, [pc, #276]	; (800f080 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x698>)
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f000 fd7e 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d037      	beq.n	800efe8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x600>
				if(cmd->type == CMDtype::get){
 800ef78:	f107 0308 	add.w	r3, r7, #8
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6a1b      	ldr	r3, [r3, #32]
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d119      	bne.n	800efb8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5d0>
					*reply+=std::to_string(this->conf.damperGain);
 800ef84:	f107 030c 	add.w	r3, r7, #12
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800ef8e:	461a      	mov	r2, r3
 800ef90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ef94:	4611      	mov	r1, r2
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff fbd2 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800ef9c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800efa0:	1d3b      	adds	r3, r7, #4
 800efa2:	4611      	mov	r1, r2
 800efa4:	6818      	ldr	r0, [r3, #0]
 800efa6:	f006 fcc9 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800efaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800efae:	4618      	mov	r0, r3
 800efb0:	f006 fc33 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800efb4:	f000 bcbe 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800efb8:	f107 0308 	add.w	r3, r7, #8
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	6a1b      	ldr	r3, [r3, #32]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f040 84b7 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.damperGain = cmd->val;
 800efc6:	f107 0308 	add.w	r3, r7, #8
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	69db      	ldr	r3, [r3, #28]
 800efce:	b2da      	uxtb	r2, r3
 800efd0:	f107 030c 	add.w	r3, r7, #12
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
					*reply += "OK";
 800efda:	1d3b      	adds	r3, r7, #4
 800efdc:	4924      	ldr	r1, [pc, #144]	; (800f070 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>)
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	f006 fcd6 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800efe4:	f000 bca6 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}
	}else if(cmd->cmd == "inertiaGain"){
 800efe8:	f107 0308 	add.w	r3, r7, #8
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4925      	ldr	r1, [pc, #148]	; (800f084 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69c>)
 800eff0:	4618      	mov	r0, r3
 800eff2:	f000 fd3c 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d045      	beq.n	800f088 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6a0>
				if(cmd->type == CMDtype::get){
 800effc:	f107 0308 	add.w	r3, r7, #8
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	6a1b      	ldr	r3, [r3, #32]
 800f004:	2b02      	cmp	r3, #2
 800f006:	d119      	bne.n	800f03c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x654>
					*reply+=std::to_string(this->conf.inertiaGain);
 800f008:	f107 030c 	add.w	r3, r7, #12
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f893 327c 	ldrb.w	r3, [r3, #636]	; 0x27c
 800f012:	461a      	mov	r2, r3
 800f014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f018:	4611      	mov	r1, r2
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff fb90 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800f020:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f024:	1d3b      	adds	r3, r7, #4
 800f026:	4611      	mov	r1, r2
 800f028:	6818      	ldr	r0, [r3, #0]
 800f02a:	f006 fc87 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800f02e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f032:	4618      	mov	r0, r3
 800f034:	f006 fbf1 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f038:	f000 bc7c 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800f03c:	f107 0308 	add.w	r3, r7, #8
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	6a1b      	ldr	r3, [r3, #32]
 800f044:	2b00      	cmp	r3, #0
 800f046:	f040 8475 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.inertiaGain = cmd->val;
 800f04a:	f107 0308 	add.w	r3, r7, #8
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	69db      	ldr	r3, [r3, #28]
 800f052:	b2da      	uxtb	r2, r3
 800f054:	f107 030c 	add.w	r3, r7, #12
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
					*reply += "OK";
 800f05e:	1d3b      	adds	r3, r7, #4
 800f060:	4903      	ldr	r1, [pc, #12]	; (800f070 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>)
 800f062:	6818      	ldr	r0, [r3, #0]
 800f064:	f006 fc94 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f068:	f000 bc64 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
 800f06c:	080173ec 	.word	0x080173ec
 800f070:	080173a0 	.word	0x080173a0
 800f074:	080173f4 	.word	0x080173f4
 800f078:	08017400 	.word	0x08017400
 800f07c:	08017410 	.word	0x08017410
 800f080:	0801741c 	.word	0x0801741c
 800f084:	08017428 	.word	0x08017428
				}
	}else if(cmd->cmd == "frictionGain"){
 800f088:	f107 0308 	add.w	r3, r7, #8
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	49b4      	ldr	r1, [pc, #720]	; (800f360 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x978>)
 800f090:	4618      	mov	r0, r3
 800f092:	f000 fcec 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d037      	beq.n	800f10c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x724>
				if(cmd->type == CMDtype::get){
 800f09c:	f107 0308 	add.w	r3, r7, #8
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	6a1b      	ldr	r3, [r3, #32]
 800f0a4:	2b02      	cmp	r3, #2
 800f0a6:	d119      	bne.n	800f0dc <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f4>
					*reply+=std::to_string(this->conf.frictionGain);
 800f0a8:	f107 030c 	add.w	r3, r7, #12
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f893 327d 	ldrb.w	r3, [r3, #637]	; 0x27d
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff fb40 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800f0c0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800f0c4:	1d3b      	adds	r3, r7, #4
 800f0c6:	4611      	mov	r1, r2
 800f0c8:	6818      	ldr	r0, [r3, #0]
 800f0ca:	f006 fc37 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800f0ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f006 fba1 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f0d8:	f000 bc2c 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800f0dc:	f107 0308 	add.w	r3, r7, #8
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	6a1b      	ldr	r3, [r3, #32]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	f040 8425 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.frictionGain = cmd->val;
 800f0ea:	f107 0308 	add.w	r3, r7, #8
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	69db      	ldr	r3, [r3, #28]
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	f107 030c 	add.w	r3, r7, #12
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
					*reply += "OK";
 800f0fe:	1d3b      	adds	r3, r7, #4
 800f100:	4998      	ldr	r1, [pc, #608]	; (800f364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x97c>)
 800f102:	6818      	ldr	r0, [r3, #0]
 800f104:	f006 fc44 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f108:	f000 bc14 	b.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}
	}else if(cmd->cmd == "endstopGain"){
 800f10c:	f107 0308 	add.w	r3, r7, #8
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4995      	ldr	r1, [pc, #596]	; (800f368 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x980>)
 800f114:	4618      	mov	r0, r3
 800f116:	f000 fcaa 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d035      	beq.n	800f18c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7a4>
				if(cmd->type == CMDtype::get){
 800f120:	f107 0308 	add.w	r3, r7, #8
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	6a1b      	ldr	r3, [r3, #32]
 800f128:	2b02      	cmp	r3, #2
 800f12a:	d118      	bne.n	800f15e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x776>
					*reply+=std::to_string(this->conf.endstop_gain);
 800f12c:	f107 030c 	add.w	r3, r7, #12
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800f136:	461a      	mov	r2, r3
 800f138:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800f13c:	4611      	mov	r1, r2
 800f13e:	4618      	mov	r0, r3
 800f140:	f7ff fafe 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800f144:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800f148:	1d3b      	adds	r3, r7, #4
 800f14a:	4611      	mov	r1, r2
 800f14c:	6818      	ldr	r0, [r3, #0]
 800f14e:	f006 fbf5 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800f152:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800f156:	4618      	mov	r0, r3
 800f158:	f006 fb5f 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f15c:	e3ea      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800f15e:	f107 0308 	add.w	r3, r7, #8
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	6a1b      	ldr	r3, [r3, #32]
 800f166:	2b00      	cmp	r3, #0
 800f168:	f040 83e4 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.endstop_gain = cmd->val;
 800f16c:	f107 0308 	add.w	r3, r7, #8
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	69db      	ldr	r3, [r3, #28]
 800f174:	b2da      	uxtb	r2, r3
 800f176:	f107 030c 	add.w	r3, r7, #12
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
					*reply += "OK";
 800f180:	1d3b      	adds	r3, r7, #4
 800f182:	4978      	ldr	r1, [pc, #480]	; (800f364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x97c>)
 800f184:	6818      	ldr	r0, [r3, #0]
 800f186:	f006 fc03 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f18a:	e3d3      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}
	}else if(cmd->cmd == "totalGain"){
 800f18c:	f107 0308 	add.w	r3, r7, #8
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4976      	ldr	r1, [pc, #472]	; (800f36c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x984>)
 800f194:	4618      	mov	r0, r3
 800f196:	f000 fc6a 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d05f      	beq.n	800f260 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x878>
				if(cmd->type == CMDtype::get){
 800f1a0:	f107 0308 	add.w	r3, r7, #8
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	6a1b      	ldr	r3, [r3, #32]
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	d118      	bne.n	800f1de <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7f6>
					*reply+=std::to_string(this->conf.totalGain);
 800f1ac:	f107 030c 	add.w	r3, r7, #12
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800f1bc:	4611      	mov	r1, r2
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff fabe 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800f1c4:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800f1c8:	1d3b      	adds	r3, r7, #4
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	6818      	ldr	r0, [r3, #0]
 800f1ce:	f006 fbb5 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800f1d2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f006 fb1f 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f1dc:	e3aa      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800f1de:	f107 0308 	add.w	r3, r7, #8
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	6a1b      	ldr	r3, [r3, #32]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f040 83a4 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.totalGain = cmd->val;
 800f1ec:	f107 0308 	add.w	r3, r7, #8
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	69db      	ldr	r3, [r3, #28]
 800f1f4:	b2da      	uxtb	r2, r3
 800f1f6:	f107 030c 	add.w	r3, r7, #12
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
					float effect_margin_scaler = ((float)conf.totalGain/255.0);
 800f200:	f107 030c 	add.w	r3, r7, #12
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7f1 fc7c 	bl	8000b08 <__aeabi_ui2f>
 800f210:	4603      	mov	r3, r0
 800f212:	4957      	ldr	r1, [pc, #348]	; (800f370 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x988>)
 800f214:	4618      	mov	r0, r3
 800f216:	f7f1 fd83 	bl	8000d20 <__aeabi_fdiv>
 800f21a:	4603      	mov	r3, r0
 800f21c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
					this->torqueScaler = ((float)this->conf.maxpower / (float)0x7fff) * effect_margin_scaler;
 800f220:	f107 030c 	add.w	r3, r7, #12
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7f1 fc6c 	bl	8000b08 <__aeabi_ui2f>
 800f230:	4603      	mov	r3, r0
 800f232:	4950      	ldr	r1, [pc, #320]	; (800f374 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98c>)
 800f234:	4618      	mov	r0, r3
 800f236:	f7f1 fd73 	bl	8000d20 <__aeabi_fdiv>
 800f23a:	4603      	mov	r3, r0
 800f23c:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 800f240:	4618      	mov	r0, r3
 800f242:	f7f1 fcb9 	bl	8000bb8 <__aeabi_fmul>
 800f246:	4603      	mov	r3, r0
 800f248:	461a      	mov	r2, r3
 800f24a:	f107 030c 	add.w	r3, r7, #12
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
					*reply += "OK";
 800f254:	1d3b      	adds	r3, r7, #4
 800f256:	4943      	ldr	r1, [pc, #268]	; (800f364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x97c>)
 800f258:	6818      	ldr	r0, [r3, #0]
 800f25a:	f006 fb99 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f25e:	e369      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}
	}else if(cmd->cmd == "minPower"){
 800f260:	f107 0308 	add.w	r3, r7, #8
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4944      	ldr	r1, [pc, #272]	; (800f378 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x990>)
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 fc00 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d035      	beq.n	800f2e0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8f8>
				if(cmd->type == CMDtype::get){
 800f274:	f107 0308 	add.w	r3, r7, #8
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6a1b      	ldr	r3, [r3, #32]
 800f27c:	2b02      	cmp	r3, #2
 800f27e:	d118      	bne.n	800f2b2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8ca>
					*reply+=std::to_string(this->conf.minForce);
 800f280:	f107 030c 	add.w	r3, r7, #12
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f8b3 3272 	ldrh.w	r3, [r3, #626]	; 0x272
 800f28a:	461a      	mov	r2, r3
 800f28c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800f290:	4611      	mov	r1, r2
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff fa54 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800f298:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800f29c:	1d3b      	adds	r3, r7, #4
 800f29e:	4611      	mov	r1, r2
 800f2a0:	6818      	ldr	r0, [r3, #0]
 800f2a2:	f006 fb4b 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800f2a6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f006 fab5 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f2b0:	e340      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800f2b2:	f107 0308 	add.w	r3, r7, #8
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	6a1b      	ldr	r3, [r3, #32]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	f040 833a 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.minForce = cmd->val;
 800f2c0:	f107 0308 	add.w	r3, r7, #8
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	69db      	ldr	r3, [r3, #28]
 800f2c8:	b29a      	uxth	r2, r3
 800f2ca:	f107 030c 	add.w	r3, r7, #12
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f8a3 2272 	strh.w	r2, [r3, #626]	; 0x272
					*reply += "OK";
 800f2d4:	1d3b      	adds	r3, r7, #4
 800f2d6:	4923      	ldr	r1, [pc, #140]	; (800f364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x97c>)
 800f2d8:	6818      	ldr	r0, [r3, #0]
 800f2da:	f006 fb59 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f2de:	e329      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}
	}else if(cmd->cmd == "wheelNUM"){
 800f2e0:	f107 0308 	add.w	r3, r7, #8
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4925      	ldr	r1, [pc, #148]	; (800f37c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x994>)
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 fbc0 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d045      	beq.n	800f380 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x998>
				if(cmd->type == CMDtype::get){
 800f2f4:	f107 0308 	add.w	r3, r7, #8
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	6a1b      	ldr	r3, [r3, #32]
 800f2fc:	2b02      	cmp	r3, #2
 800f2fe:	d118      	bne.n	800f332 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94a>
					*reply+=std::to_string(this->conf.wheelNUM);
 800f300:	f107 030c 	add.w	r3, r7, #12
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f893 327f 	ldrb.w	r3, [r3, #639]	; 0x27f
 800f30a:	461a      	mov	r2, r3
 800f30c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800f310:	4611      	mov	r1, r2
 800f312:	4618      	mov	r0, r3
 800f314:	f7ff fa14 	bl	800e740 <_ZNSt7__cxx119to_stringEi>
 800f318:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 800f31c:	1d3b      	adds	r3, r7, #4
 800f31e:	4611      	mov	r1, r2
 800f320:	6818      	ldr	r0, [r3, #0]
 800f322:	f006 fb0b 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800f326:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800f32a:	4618      	mov	r0, r3
 800f32c:	f006 fa75 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f330:	e300      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				}else if(cmd->type == CMDtype::set){
 800f332:	f107 0308 	add.w	r3, r7, #8
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	6a1b      	ldr	r3, [r3, #32]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	f040 82fa 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
					this->conf.wheelNUM = cmd->val;
 800f340:	f107 0308 	add.w	r3, r7, #8
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	69db      	ldr	r3, [r3, #28]
 800f348:	b2da      	uxtb	r2, r3
 800f34a:	f107 030c 	add.w	r3, r7, #12
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
					*reply += "OK";
 800f354:	1d3b      	adds	r3, r7, #4
 800f356:	4903      	ldr	r1, [pc, #12]	; (800f364 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x97c>)
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	f006 fb19 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f35e:	e2e9      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
 800f360:	08017434 	.word	0x08017434
 800f364:	080173a0 	.word	0x080173a0
 800f368:	08017444 	.word	0x08017444
 800f36c:	08017450 	.word	0x08017450
 800f370:	437f0000 	.word	0x437f0000
 800f374:	46fffe00 	.word	0x46fffe00
 800f378:	0801745c 	.word	0x0801745c
 800f37c:	08017468 	.word	0x08017468
				}
	}else if(cmd->cmd == "pos"){
 800f380:	f107 0308 	add.w	r3, r7, #8
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	49b8      	ldr	r1, [pc, #736]	; (800f668 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc80>)
 800f388:	4618      	mov	r0, r3
 800f38a:	f000 fb70 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d047      	beq.n	800f424 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa3c>
		if(cmd->type == CMDtype::get){
 800f394:	f107 0308 	add.w	r3, r7, #8
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	6a1b      	ldr	r3, [r3, #32]
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	d11b      	bne.n	800f3d8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9f0>
			*reply+=std::to_string(this->enc->getPos());
 800f3a0:	f107 030c 	add.w	r3, r7, #12
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7fd fbd5 	bl	800cb5a <_ZN12EncoderLocal6getPosEv>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800f3b6:	4611      	mov	r1, r2
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7ff f9d7 	bl	800e76c <_ZNSt7__cxx119to_stringEl>
 800f3be:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800f3c2:	1d3b      	adds	r3, r7, #4
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	6818      	ldr	r0, [r3, #0]
 800f3c8:	f006 fab8 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800f3cc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f006 fa22 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f3d6:	e2ad      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}else if(cmd->type == CMDtype::set && this->enc != nullptr){
 800f3d8:	f107 0308 	add.w	r3, r7, #8
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	6a1b      	ldr	r3, [r3, #32]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d119      	bne.n	800f418 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa30>
 800f3e4:	f107 030c 	add.w	r3, r7, #12
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d012      	beq.n	800f418 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa30>
			this->enc->setPos(cmd->val);
 800f3f2:	f107 030c 	add.w	r3, r7, #12
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f8d3 2284 	ldr.w	r2, [r3, #644]	; 0x284
 800f3fc:	f107 0308 	add.w	r3, r7, #8
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	69db      	ldr	r3, [r3, #28]
 800f404:	4619      	mov	r1, r3
 800f406:	4610      	mov	r0, r2
 800f408:	f7fd fbbc 	bl	800cb84 <_ZN12EncoderLocal6setPosEl>
			*reply += "OK";
 800f40c:	1d3b      	adds	r3, r7, #4
 800f40e:	4997      	ldr	r1, [pc, #604]	; (800f66c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc84>)
 800f410:	6818      	ldr	r0, [r3, #0]
 800f412:	f006 fabd 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f416:	e28d      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}else{
			*reply += "Err. Setup enctype first";
 800f418:	1d3b      	adds	r3, r7, #4
 800f41a:	4995      	ldr	r1, [pc, #596]	; (800f670 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc88>)
 800f41c:	6818      	ldr	r0, [r3, #0]
 800f41e:	f006 fab7 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f422:	e287      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}
	}else if(cmd->cmd == "default"){
 800f424:	f107 0308 	add.w	r3, r7, #8
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4992      	ldr	r1, [pc, #584]	; (800f674 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8c>)
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 fb1e 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d021      	beq.n	800f47c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa94>
			if(cmd->type == CMDtype::get){
 800f438:	f107 0308 	add.w	r3, r7, #8
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	6a1b      	ldr	r3, [r3, #32]
 800f440:	2b02      	cmp	r3, #2
 800f442:	f040 8277 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				FFBWheelConfig defConf;
 800f446:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f44a:	4a8b      	ldr	r2, [pc, #556]	; (800f678 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc90>)
 800f44c:	461c      	mov	r4, r3
 800f44e:	4615      	mov	r5, r2
 800f450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f454:	682b      	ldr	r3, [r5, #0]
 800f456:	6023      	str	r3, [r4, #0]
				this->conf = defConf;
 800f458:	f107 030c 	add.w	r3, r7, #12
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f462:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 800f466:	4615      	mov	r5, r2
 800f468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f46c:	682b      	ldr	r3, [r5, #0]
 800f46e:	6023      	str	r3, [r4, #0]
				*reply += "OK";
 800f470:	1d3b      	adds	r3, r7, #4
 800f472:	497e      	ldr	r1, [pc, #504]	; (800f66c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc84>)
 800f474:	6818      	ldr	r0, [r3, #0]
 800f476:	f006 fa8b 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f47a:	e25b      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			}
	}else if(cmd->cmd == "all"){
 800f47c:	f107 0308 	add.w	r3, r7, #8
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	497e      	ldr	r1, [pc, #504]	; (800f67c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc94>)
 800f484:	4618      	mov	r0, r3
 800f486:	f000 faf2 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d02b      	beq.n	800f4e8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb00>
		if(cmd->type == CMDtype::get){
 800f490:	f107 0308 	add.w	r3, r7, #8
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	6a1b      	ldr	r3, [r3, #32]
 800f498:	2b02      	cmp	r3, #2
 800f49a:	f040 824b 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			uint8_t* buf8 = (uint8_t*)&conf;
 800f49e:	f107 030c 	add.w	r3, r7, #12
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800f4a8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
			uint8_t len = sizeof(FFBWheelConfig);
 800f4ac:	2314      	movs	r3, #20
 800f4ae:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
			for(uint8_t i = 0; i < len ;i++)
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f887 3226 	strb.w	r3, [r7, #550]	; 0x226
 800f4b8:	f897 2226 	ldrb.w	r2, [r7, #550]	; 0x226
 800f4bc:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	f080 8237 	bcs.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
				*reply += (char)buf8[i];
 800f4c6:	f897 3226 	ldrb.w	r3, [r7, #550]	; 0x226
 800f4ca:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800f4ce:	4413      	add	r3, r2
 800f4d0:	781a      	ldrb	r2, [r3, #0]
 800f4d2:	1d3b      	adds	r3, r7, #4
 800f4d4:	4611      	mov	r1, r2
 800f4d6:	6818      	ldr	r0, [r3, #0]
 800f4d8:	f006 fa04 	bl	80158e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			for(uint8_t i = 0; i < len ;i++)
 800f4dc:	f897 3226 	ldrb.w	r3, [r7, #550]	; 0x226
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	f887 3226 	strb.w	r3, [r7, #550]	; 0x226
 800f4e6:	e7e7      	b.n	800f4b8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xad0>
		}
	}else if(cmd->cmd == "hidrate" && cmd->type == CMDtype::get){
 800f4e8:	f107 0308 	add.w	r3, r7, #8
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4964      	ldr	r1, [pc, #400]	; (800f680 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc98>)
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f000 fabc 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d007      	beq.n	800f50c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb24>
 800f4fc:	f107 0308 	add.w	r3, r7, #8
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	6a1b      	ldr	r3, [r3, #32]
 800f504:	2b02      	cmp	r3, #2
 800f506:	d101      	bne.n	800f50c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb24>
 800f508:	2301      	movs	r3, #1
 800f50a:	e000      	b.n	800f50e <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb26>
 800f50c:	2300      	movs	r3, #0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d02a      	beq.n	800f568 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb80>
		if(ffb->hid_out_period != 0){
 800f512:	f107 030c 	add.w	r3, r7, #12
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d01c      	beq.n	800f55c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb74>
			*reply+=std::to_string(1000/ffb->hid_out_period);
 800f522:	f107 030c 	add.w	r3, r7, #12
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f532:	fbb2 f2f3 	udiv	r2, r2, r3
 800f536:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800f53a:	4611      	mov	r1, r2
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7ff f92b 	bl	800e798 <_ZNSt7__cxx119to_stringEm>
 800f542:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800f546:	1d3b      	adds	r3, r7, #4
 800f548:	4611      	mov	r1, r2
 800f54a:	6818      	ldr	r0, [r3, #0]
 800f54c:	f006 f9f6 	bl	801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800f550:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800f554:	4618      	mov	r0, r3
 800f556:	f006 f960 	bl	801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f55a:	e1eb      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}else{
			*reply+="0";
 800f55c:	1d3b      	adds	r3, r7, #4
 800f55e:	4949      	ldr	r1, [pc, #292]	; (800f684 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc9c>)
 800f560:	6818      	ldr	r0, [r3, #0]
 800f562:	f006 fa15 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f566:	e1e5      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}
	}else if(cmd->cmd == "led"){
 800f568:	f107 0308 	add.w	r3, r7, #8
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	4946      	ldr	r1, [pc, #280]	; (800f688 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xca0>)
 800f570:	4618      	mov	r0, r3
 800f572:	f000 fa7c 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d04d      	beq.n	800f618 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc30>
		if(cmd->type == CMDtype::set){
 800f57c:	f107 0308 	add.w	r3, r7, #8
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	6a1b      	ldr	r3, [r3, #32]
 800f584:	2b00      	cmp	r3, #0
 800f586:	f040 81d5 	bne.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			RGB rgb_array[16] = {0};
 800f58a:	f107 0314 	add.w	r3, r7, #20
 800f58e:	4618      	mov	r0, r3
 800f590:	2330      	movs	r3, #48	; 0x30
 800f592:	461a      	mov	r2, r3
 800f594:	2100      	movs	r1, #0
 800f596:	f007 f941 	bl	801681c <memset>
			for(uint8_t i = 0;i<LED_COUNT;i++)
 800f59a:	2300      	movs	r3, #0
 800f59c:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 800f5a0:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 800f5a4:	2b0f      	cmp	r3, #15
 800f5a6:	d82b      	bhi.n	800f600 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc18>
			{
				uint8_t tmp = (cmd->val >> (2*i)) & 0b11;
 800f5a8:	f107 0308 	add.w	r3, r7, #8
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	69da      	ldr	r2, [r3, #28]
 800f5b0:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 800f5b4:	005b      	lsls	r3, r3, #1
 800f5b6:	fa42 f303 	asr.w	r3, r2, r3
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	f003 0303 	and.w	r3, r3, #3
 800f5c0:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
				if(tmp >=0 && tmp <=3)
 800f5c4:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800f5c8:	2b03      	cmp	r3, #3
 800f5ca:	d813      	bhi.n	800f5f4 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc0c>
					rgb_array[i] = defaultRGB[tmp];
 800f5cc:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 800f5d0:	f897 1225 	ldrb.w	r1, [r7, #549]	; 0x225
 800f5d4:	f107 0014 	add.w	r0, r7, #20
 800f5d8:	460b      	mov	r3, r1
 800f5da:	005b      	lsls	r3, r3, #1
 800f5dc:	440b      	add	r3, r1
 800f5de:	4418      	add	r0, r3
 800f5e0:	492a      	ldr	r1, [pc, #168]	; (800f68c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xca4>)
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	4413      	add	r3, r2
 800f5e8:	18ca      	adds	r2, r1, r3
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	8811      	ldrh	r1, [r2, #0]
 800f5ee:	7892      	ldrb	r2, [r2, #2]
 800f5f0:	8019      	strh	r1, [r3, #0]
 800f5f2:	709a      	strb	r2, [r3, #2]
			for(uint8_t i = 0;i<LED_COUNT;i++)
 800f5f4:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 800f5fe:	e7cf      	b.n	800f5a0 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbb8>
			}
			setup_ws2812(rgb_array, LED_COUNT);
 800f600:	f107 0314 	add.w	r3, r7, #20
 800f604:	2110      	movs	r1, #16
 800f606:	4618      	mov	r0, r3
 800f608:	f003 fa7a 	bl	8012b00 <_Z12setup_ws2812P3RGBh>
			*reply+="OK";
 800f60c:	1d3b      	adds	r3, r7, #4
 800f60e:	4917      	ldr	r1, [pc, #92]	; (800f66c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc84>)
 800f610:	6818      	ldr	r0, [r3, #0]
 800f612:	f006 f9bd 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f616:	e18d      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		}
	}else if(cmd->type == CMDtype::dash){
 800f618:	f107 0308 	add.w	r3, r7, #8
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	6a1b      	ldr	r3, [r3, #32]
 800f620:	2b07      	cmp	r3, #7
 800f622:	f040 80f5 	bne.w	800f810 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe28>
		flag = true;
 800f626:	2301      	movs	r3, #1
 800f628:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		Oldtelemetry = (SimDisplayPacket*)(cmd->cmd.c_str());
 800f62c:	f107 0308 	add.w	r3, r7, #8
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	4618      	mov	r0, r3
 800f634:	f006 f9b0 	bl	8015998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f638:	4603      	mov	r3, r0
 800f63a:	4a15      	ldr	r2, [pc, #84]	; (800f690 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xca8>)
 800f63c:	6013      	str	r3, [r2, #0]
		uint16_t rgb_array = 0;
 800f63e:	2300      	movs	r3, #0
 800f640:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
		if (Oldtelemetry->status == SDP_STATUS_OFF)
 800f644:	4b12      	ldr	r3, [pc, #72]	; (800f690 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xca8>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	785b      	ldrb	r3, [r3, #1]
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	bf0c      	ite	eq
 800f650:	2301      	moveq	r3, #1
 800f652:	2300      	movne	r3, #0
 800f654:	b2db      	uxtb	r3, r3
 800f656:	2b00      	cmp	r3, #0
 800f658:	d01c      	beq.n	800f694 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcac>
			setup_rpm_ws2812(rgb_array);
 800f65a:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	4618      	mov	r0, r3
 800f662:	f003 fa13 	bl	8012a8c <_Z16setup_rpm_ws2812h>
 800f666:	e165      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
 800f668:	08017474 	.word	0x08017474
 800f66c:	080173a0 	.word	0x080173a0
 800f670:	080173d0 	.word	0x080173d0
 800f674:	08017478 	.word	0x08017478
 800f678:	080175e4 	.word	0x080175e4
 800f67c:	08017480 	.word	0x08017480
 800f680:	08017484 	.word	0x08017484
 800f684:	0801748c 	.word	0x0801748c
 800f688:	08017490 	.word	0x08017490
 800f68c:	20000010 	.word	0x20000010
 800f690:	20000784 	.word	0x20000784
		else if (Oldtelemetry->status == SDP_STATUS_LIVE)
 800f694:	4bab      	ldr	r3, [pc, #684]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	785b      	ldrb	r3, [r3, #1]
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	2b02      	cmp	r3, #2
 800f69e:	bf0c      	ite	eq
 800f6a0:	2301      	moveq	r3, #1
 800f6a2:	2300      	movne	r3, #0
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f000 8144 	beq.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		{
			//*reply+= std::to_string(telemetry->rpm) + " : " + std::to_string(telemetry->optrpm) + " : " + std::to_string(telemetry->shftrpm);
			uint16_t maxrpm = Oldtelemetry->optrpm/90*100;
 800f6ac:	4ba5      	ldr	r3, [pc, #660]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	889b      	ldrh	r3, [r3, #4]
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	085b      	lsrs	r3, r3, #1
 800f6b6:	4aa4      	ldr	r2, [pc, #656]	; (800f948 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf60>)
 800f6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800f6bc:	095b      	lsrs	r3, r3, #5
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	0092      	lsls	r2, r2, #2
 800f6c4:	4413      	add	r3, r2
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	0091      	lsls	r1, r2, #2
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	4413      	add	r3, r2
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210
			uint16_t shiftrpm = Oldtelemetry->optrpm/95*100;
 800f6d6:	4b9b      	ldr	r3, [pc, #620]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	889b      	ldrh	r3, [r3, #4]
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	4b9b      	ldr	r3, [pc, #620]	; (800f94c <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf64>)
 800f6e0:	fba3 1302 	umull	r1, r3, r3, r2
 800f6e4:	1ad2      	subs	r2, r2, r3
 800f6e6:	0852      	lsrs	r2, r2, #1
 800f6e8:	4413      	add	r3, r2
 800f6ea:	099b      	lsrs	r3, r3, #6
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	0092      	lsls	r2, r2, #2
 800f6f2:	4413      	add	r3, r2
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	0091      	lsls	r1, r2, #2
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	4413      	add	r3, r2
 800f6fe:	009b      	lsls	r3, r3, #2
 800f700:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
			uint16_t optrpm = Oldtelemetry->optrpm;
 800f704:	4b8f      	ldr	r3, [pc, #572]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	889b      	ldrh	r3, [r3, #4]
 800f70a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
			if(Oldtelemetry->rpm <= maxrpm)
 800f70e:	4b8d      	ldr	r3, [pc, #564]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	885b      	ldrh	r3, [r3, #2]
 800f714:	b29b      	uxth	r3, r3
 800f716:	f8b7 2210 	ldrh.w	r2, [r7, #528]	; 0x210
 800f71a:	429a      	cmp	r2, r3
 800f71c:	bf2c      	ite	cs
 800f71e:	2301      	movcs	r3, #1
 800f720:	2300      	movcc	r3, #0
 800f722:	b2db      	uxtb	r3, r3
 800f724:	2b00      	cmp	r3, #0
 800f726:	f000 8105 	beq.w	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			{
				if(Oldtelemetry->rpm < optrpm)
 800f72a:	4b86      	ldr	r3, [pc, #536]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	885b      	ldrh	r3, [r3, #2]
 800f730:	b29b      	uxth	r3, r3
 800f732:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 800f736:	429a      	cmp	r2, r3
 800f738:	bf8c      	ite	hi
 800f73a:	2301      	movhi	r3, #1
 800f73c:	2300      	movls	r3, #0
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	2b00      	cmp	r3, #0
 800f742:	d01e      	beq.n	800f782 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd9a>
					rgb_array = std::max(0, ((Oldtelemetry->rpm - 1500) * 8 / (optrpm- 1500)));
 800f744:	2300      	movs	r3, #0
 800f746:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800f74a:	4b7e      	ldr	r3, [pc, #504]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	885b      	ldrh	r3, [r3, #2]
 800f750:	b29b      	uxth	r3, r3
 800f752:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800f756:	00da      	lsls	r2, r3, #3
 800f758:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800f75c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800f760:	fb92 f3f3 	sdiv	r3, r2, r3
 800f764:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800f768:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 800f76c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800f770:	4611      	mov	r1, r2
 800f772:	4618      	mov	r0, r3
 800f774:	f000 f98e 	bl	800fa94 <_ZSt3maxIiERKT_S2_S2_>
 800f778:	4603      	mov	r3, r0
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 800f780:	e03f      	b.n	800f802 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe1a>
				else if(Oldtelemetry->rpm < shiftrpm)
 800f782:	4b70      	ldr	r3, [pc, #448]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	885b      	ldrh	r3, [r3, #2]
 800f788:	b29b      	uxth	r3, r3
 800f78a:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800f78e:	429a      	cmp	r2, r3
 800f790:	bf8c      	ite	hi
 800f792:	2301      	movhi	r3, #1
 800f794:	2300      	movls	r3, #0
 800f796:	b2db      	uxtb	r3, r3
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d014      	beq.n	800f7c6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdde>
					rgb_array = 8 + (Oldtelemetry->rpm - optrpm)*4/(shiftrpm - optrpm);
 800f79c:	4b69      	ldr	r3, [pc, #420]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	885b      	ldrh	r3, [r3, #2]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800f7aa:	1ad3      	subs	r3, r2, r3
 800f7ac:	009a      	lsls	r2, r3, #2
 800f7ae:	f8b7 120e 	ldrh.w	r1, [r7, #526]	; 0x20e
 800f7b2:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800f7b6:	1acb      	subs	r3, r1, r3
 800f7b8:	fb92 f3f3 	sdiv	r3, r2, r3
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	3308      	adds	r3, #8
 800f7c0:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 800f7c4:	e01d      	b.n	800f802 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe1a>
				else
					rgb_array = 12 + (Oldtelemetry->rpm - shiftrpm)*4/((shiftrpm*100/95) - shiftrpm);
 800f7c6:	4b5f      	ldr	r3, [pc, #380]	; (800f944 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf5c>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	885b      	ldrh	r3, [r3, #2]
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	009a      	lsls	r2, r3, #2
 800f7d8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800f7dc:	2164      	movs	r1, #100	; 0x64
 800f7de:	fb01 f303 	mul.w	r3, r1, r3
 800f7e2:	495b      	ldr	r1, [pc, #364]	; (800f950 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf68>)
 800f7e4:	fb81 0103 	smull	r0, r1, r1, r3
 800f7e8:	4419      	add	r1, r3
 800f7ea:	1189      	asrs	r1, r1, #6
 800f7ec:	17db      	asrs	r3, r3, #31
 800f7ee:	1ac9      	subs	r1, r1, r3
 800f7f0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800f7f4:	1acb      	subs	r3, r1, r3
 800f7f6:	fb92 f3f3 	sdiv	r3, r2, r3
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	330c      	adds	r3, #12
 800f7fe:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				setup_rpm_ws2812(rgb_array);
 800f802:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800f806:	b2db      	uxtb	r3, r3
 800f808:	4618      	mov	r0, r3
 800f80a:	f003 f93f 	bl	8012a8c <_Z16setup_rpm_ws2812h>
 800f80e:	e091      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
			}
		}
	}else if(cmd->cmd == "help"){
 800f810:	f107 0308 	add.w	r3, r7, #8
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	494f      	ldr	r1, [pc, #316]	; (800f954 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf6c>)
 800f818:	4618      	mov	r0, r3
 800f81a:	f000 f928 	bl	800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d008      	beq.n	800f836 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4e>
		flag = false;
 800f824:	2300      	movs	r3, #0
 800f826:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		*reply += ""
				", save, zeroenc, maxPower, degrees, axismask, ppr, adcmax, inverted, constantGain, rampGain, squareGain, sinGain, triangleGain, sawToothDownGain, sawToothUpGain, springGain, damperGain, inertiaGain, frictionGain, endstopGain, totalGain, maxVelosity, maxAcceleration, maxPositionChange, minPower, pos, hidrate, led, all, default, help\n"; // TODO
 800f82a:	1d3b      	adds	r3, r7, #4
 800f82c:	494a      	ldr	r1, [pc, #296]	; (800f958 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf70>)
 800f82e:	6818      	ldr	r0, [r3, #0]
 800f830:	f006 f8ae 	bl	8015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 800f834:	e07e      	b.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
	}else if(cmd->type == CMDtype::simhub){
 800f836:	f107 0308 	add.w	r3, r7, #8
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	2b08      	cmp	r3, #8
 800f840:	d178      	bne.n	800f934 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4c>
		uint16_t size = cmd->cmd.length();
 800f842:	f107 0308 	add.w	r3, r7, #8
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4618      	mov	r0, r3
 800f84a:	f006 f81a 	bl	8015882 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800f84e:	4603      	mov	r3, r0
 800f850:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
		char* pstr = (char*)cmd->cmd.c_str();
 800f854:	f107 0308 	add.w	r3, r7, #8
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f006 f89c 	bl	8015998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f860:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		uint16_t count = 0;
 800f864:	2300      	movs	r3, #0
 800f866:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		uint16_t i = 0;
 800f86a:	2300      	movs	r3, #0
 800f86c:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
		uint16_t idx = 0;
 800f870:	2300      	movs	r3, #0
 800f872:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		for(;i<size;i++)
 800f876:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 800f87a:	f8b7 321a 	ldrh.w	r3, [r7, #538]	; 0x21a
 800f87e:	429a      	cmp	r2, r3
 800f880:	d21f      	bcs.n	800f8c2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xeda>
			if(*(pstr+i) == ':')
 800f882:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800f886:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800f88a:	4413      	add	r3, r2
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	2b3a      	cmp	r3, #58	; 0x3a
 800f890:	d111      	bne.n	800f8b6 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xece>
			{
				count = atoi(pstr+i+1);
 800f892:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800f896:	3301      	adds	r3, #1
 800f898:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800f89c:	4413      	add	r3, r2
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f006 ff39 	bl	8016716 <atoi>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
				i++;
 800f8aa:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
				break;
 800f8b4:	e005      	b.n	800f8c2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xeda>
		for(;i<size;i++)
 800f8b6:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
 800f8c0:	e7d9      	b.n	800f876 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8e>
			}
		for(;i<size;i++)
 800f8c2:	f8b7 221e 	ldrh.w	r2, [r7, #542]	; 0x21e
 800f8c6:	f8b7 321a 	ldrh.w	r3, [r7, #538]	; 0x21a
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d229      	bcs.n	800f922 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf3a>
			if(*(pstr+i) == ':')
 800f8ce:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800f8d2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800f8d6:	4413      	add	r3, r2
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	2b3a      	cmp	r3, #58	; 0x3a
 800f8dc:	d11b      	bne.n	800f916 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf2e>
			{
				int16_t tmp = atoi(pstr+i+1);
 800f8de:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800f8e8:	4413      	add	r3, r2
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f006 ff13 	bl	8016716 <atoi>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
				i2cBuffer[idx++] = tmp;
 800f8f6:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 800f8fa:	1c5a      	adds	r2, r3, #1
 800f8fc:	f8a7 221c 	strh.w	r2, [r7, #540]	; 0x21c
 800f900:	4619      	mov	r1, r3
 800f902:	f107 030c 	add.w	r3, r7, #12
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	f101 0328 	add.w	r3, r1, #40	; 0x28
 800f90c:	005b      	lsls	r3, r3, #1
 800f90e:	4413      	add	r3, r2
 800f910:	f8b7 2212 	ldrh.w	r2, [r7, #530]	; 0x212
 800f914:	80da      	strh	r2, [r3, #6]
		for(;i<size;i++)
 800f916:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800f91a:	3301      	adds	r3, #1
 800f91c:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
 800f920:	e7cf      	b.n	800f8c2 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xeda>
			}
		i2cSize = count * 2;
 800f922:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 800f926:	005b      	lsls	r3, r3, #1
 800f928:	b29a      	uxth	r2, r3
 800f92a:	f107 030c 	add.w	r3, r7, #12
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
	}else{
		//flag = false;
	}


	return flag;
 800f934:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
}
 800f938:	4618      	mov	r0, r3
 800f93a:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800f93e:	46bd      	mov	sp, r7
 800f940:	bdb0      	pop	{r4, r5, r7, pc}
 800f942:	bf00      	nop
 800f944:	20000784 	.word	0x20000784
 800f948:	b60b60b7 	.word	0xb60b60b7
 800f94c:	58ed2309 	.word	0x58ed2309
 800f950:	ac769185 	.word	0xac769185
 800f954:	08017330 	.word	0x08017330
 800f958:	08017494 	.word	0x08017494

0800f95c <_ZThn8_N8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	bool command(ParsedCommand* cmd,std::string* reply);
 800f95c:	f1a0 0008 	sub.w	r0, r0, #8
 800f960:	f7ff b842 	b.w	800e9e8 <_ZN8FFBWheel7commandEP13ParsedCommandPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

0800f964 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800f964:	b408      	push	{r3}
 800f966:	b590      	push	{r4, r7, lr}
 800f968:	b088      	sub	sp, #32
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	60f8      	str	r0, [r7, #12]
 800f96e:	60b9      	str	r1, [r7, #8]
 800f970:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	3307      	adds	r3, #7
 800f976:	08db      	lsrs	r3, r3, #3
 800f978:	00db      	lsls	r3, r3, #3
 800f97a:	ebad 0d03 	sub.w	sp, sp, r3
 800f97e:	466b      	mov	r3, sp
 800f980:	3307      	adds	r3, #7
 800f982:	08db      	lsrs	r3, r3, #3
 800f984:	00db      	lsls	r3, r3, #3
 800f986:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800f988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f98c:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800f98e:	68bc      	ldr	r4, [r7, #8]
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f994:	6879      	ldr	r1, [r7, #4]
 800f996:	69f8      	ldr	r0, [r7, #28]
 800f998:	47a0      	blx	r4
 800f99a:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800f99c:	69bb      	ldr	r3, [r7, #24]
 800f99e:	69fa      	ldr	r2, [r7, #28]
 800f9a0:	18d4      	adds	r4, r2, r3
 800f9a2:	f107 0314 	add.w	r3, r7, #20
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f005 fd7f 	bl	80154aa <_ZNSaIcEC1Ev>
 800f9ac:	f107 0314 	add.w	r3, r7, #20
 800f9b0:	4622      	mov	r2, r4
 800f9b2:	69f9      	ldr	r1, [r7, #28]
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f000 f880 	bl	800faba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 800f9ba:	f107 0314 	add.w	r3, r7, #20
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f005 fd74 	bl	80154ac <_ZNSaIcED1Ev>
 800f9c4:	bf00      	nop
    }
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	3720      	adds	r7, #32
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800f9d0:	b001      	add	sp, #4
 800f9d2:	4770      	bx	lr

0800f9d4 <_ZN9__gnu_cxxneIP13ParsedCommandSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f9d4:	b590      	push	{r4, r7, lr}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7fb fb74 	bl	800b0cc <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	681c      	ldr	r4, [r3, #0]
 800f9e8:	6838      	ldr	r0, [r7, #0]
 800f9ea:	f7fb fb6f 	bl	800b0cc <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEE4baseEv>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	429c      	cmp	r4, r3
 800f9f4:	bf14      	ite	ne
 800f9f6:	2301      	movne	r3, #1
 800f9f8:	2300      	moveq	r3, #0
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd90      	pop	{r4, r7, pc}

0800fa04 <_ZN9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	601a      	str	r2, [r3, #0]
	return *this;
 800fa18:	687b      	ldr	r3, [r7, #4]
      }
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	370c      	adds	r7, #12
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bc80      	pop	{r7}
 800fa22:	4770      	bx	lr

0800fa24 <_ZNK9__gnu_cxx17__normal_iteratorIP13ParsedCommandSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4618      	mov	r0, r3
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bc80      	pop	{r7}
 800fa38:	4770      	bx	lr

0800fa3a <_ZN9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800fa3a:	b480      	push	{r7}
 800fa3c:	b083      	sub	sp, #12
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
	++_M_current;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	1d1a      	adds	r2, r3, #4
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	601a      	str	r2, [r3, #0]
	return *this;
 800fa4c:	687b      	ldr	r3, [r7, #4]
      }
 800fa4e:	4618      	mov	r0, r3
 800fa50:	370c      	adds	r7, #12
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bc80      	pop	{r7}
 800fa56:	4770      	bx	lr

0800fa58 <_ZNK9__gnu_cxx17__normal_iteratorIPP14CommandHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4618      	mov	r0, r3
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bc80      	pop	{r7}
 800fa6c:	4770      	bx	lr

0800fa6e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b082      	sub	sp, #8
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
 800fa76:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800fa78:	6839      	ldr	r1, [r7, #0]
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f005 ffa3 	bl	80159c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	bf0c      	ite	eq
 800fa86:	2301      	moveq	r3, #1
 800fa88:	2300      	movne	r3, #0
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	da01      	bge.n	800faae <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	e000      	b.n	800fab0 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800faae:	687b      	ldr	r3, [r7, #4]
    }
 800fab0:	4618      	mov	r0, r3
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bc80      	pop	{r7}
 800fab8:	4770      	bx	lr

0800faba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800faba:	b590      	push	{r4, r7, lr}
 800fabc:	b085      	sub	sp, #20
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	60f8      	str	r0, [r7, #12]
 800fac2:	60b9      	str	r1, [r7, #8]
 800fac4:	607a      	str	r2, [r7, #4]
 800fac6:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800fac8:	68fc      	ldr	r4, [r7, #12]
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	f005 fdc2 	bl	8015654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800fad0:	4603      	mov	r3, r0
 800fad2:	683a      	ldr	r2, [r7, #0]
 800fad4:	4619      	mov	r1, r3
 800fad6:	4620      	mov	r0, r4
 800fad8:	f005 ff88 	bl	80159ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	68b9      	ldr	r1, [r7, #8]
 800fae0:	68f8      	ldr	r0, [r7, #12]
 800fae2:	f000 f805 	bl	800faf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	4618      	mov	r0, r3
 800faea:	3714      	adds	r7, #20
 800faec:	46bd      	mov	sp, r7
 800faee:	bd90      	pop	{r4, r7, pc}

0800faf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b086      	sub	sp, #24
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	68b9      	ldr	r1, [r7, #8]
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f000 f804 	bl	800fb0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800fb06:	bf00      	nop
 800fb08:	3718      	adds	r7, #24
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800fb0e:	b590      	push	{r4, r7, lr}
 800fb10:	b087      	sub	sp, #28
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	60f8      	str	r0, [r7, #12]
 800fb16:	60b9      	str	r1, [r7, #8]
 800fb18:	607a      	str	r2, [r7, #4]
 800fb1a:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800fb1c:	4623      	mov	r3, r4
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	68b9      	ldr	r1, [r7, #8]
 800fb22:	68f8      	ldr	r0, [r7, #12]
 800fb24:	f000 f804 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800fb28:	bf00      	nop
 800fb2a:	371c      	adds	r7, #28
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd90      	pop	{r4, r7, pc}

0800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
 800fb3c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800fb3e:	68b8      	ldr	r0, [r7, #8]
 800fb40:	f000 f83e 	bl	800fbc0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800fb44:	4603      	mov	r3, r0
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d005      	beq.n	800fb56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800fb4a:	68ba      	ldr	r2, [r7, #8]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d001      	beq.n	800fb56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800fb52:	2301      	movs	r3, #1
 800fb54:	e000      	b.n	800fb58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800fb56:	2300      	movs	r3, #0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d002      	beq.n	800fb62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800fb5c:	4817      	ldr	r0, [pc, #92]	; (800fbbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800fb5e:	f005 fca9 	bl	80154b4 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800fb62:	6879      	ldr	r1, [r7, #4]
 800fb64:	68b8      	ldr	r0, [r7, #8]
 800fb66:	f000 f83a 	bl	800fbde <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	2b0f      	cmp	r3, #15
 800fb72:	d910      	bls.n	800fb96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800fb74:	f107 0314 	add.w	r3, r7, #20
 800fb78:	2200      	movs	r2, #0
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f005 fd73 	bl	8015668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fb82:	4603      	mov	r3, r0
 800fb84:	4619      	mov	r1, r3
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f005 fd60 	bl	801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	4619      	mov	r1, r3
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f005 fd61 	bl	8015658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f005 fd5a 	bl	8015650 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	68b9      	ldr	r1, [r7, #8]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f005 fdad 	bl	8015702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f005 fd55 	bl	801565c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800fbb2:	bf00      	nop
 800fbb4:	3718      	adds	r7, #24
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	080175f8 	.word	0x080175f8

0800fbc0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	bf0c      	ite	eq
 800fbce:	2301      	moveq	r3, #1
 800fbd0:	2300      	movne	r3, #0
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	370c      	adds	r7, #12
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bc80      	pop	{r7}
 800fbdc:	4770      	bx	lr

0800fbde <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800fbde:	b5b0      	push	{r4, r5, r7, lr}
 800fbe0:	b084      	sub	sp, #16
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
 800fbe6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800fbe8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800fbea:	1d3b      	adds	r3, r7, #4
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 f80a 	bl	800fc06 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800fbf2:	462a      	mov	r2, r5
 800fbf4:	6839      	ldr	r1, [r7, #0]
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f000 f80e 	bl	800fc18 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800fbfc:	4603      	mov	r3, r0
    }
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bdb0      	pop	{r4, r5, r7, pc}

0800fc06 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800fc06:	b480      	push	{r7}
 800fc08:	b083      	sub	sp, #12
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800fc0e:	4618      	mov	r0, r3
 800fc10:	370c      	adds	r7, #12
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bc80      	pop	{r7}
 800fc16:	4770      	bx	lr

0800fc18 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800fc24:	68ba      	ldr	r2, [r7, #8]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	1ad3      	subs	r3, r2, r3
    }
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3714      	adds	r7, #20
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bc80      	pop	{r7}
 800fc32:	4770      	bx	lr

0800fc34 <_Z17usbInit_HID_Wheelv>:
#include "usbd_desc.h"

extern USBD_HandleTypeDef hUsbDeviceFS;
USBD_ClassTypeDef* handles[2];

void usbInit_HID_Wheel(){
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
	handles[CDC_IDX] = &USBD_CDC;
 800fc3a:	4b24      	ldr	r3, [pc, #144]	; (800fccc <_Z17usbInit_HID_Wheelv+0x98>)
 800fc3c:	4a24      	ldr	r2, [pc, #144]	; (800fcd0 <_Z17usbInit_HID_Wheelv+0x9c>)
 800fc3e:	601a      	str	r2, [r3, #0]
	handles[HID_IDX] = &USBD_CUSTOM_HID;
 800fc40:	4b22      	ldr	r3, [pc, #136]	; (800fccc <_Z17usbInit_HID_Wheelv+0x98>)
 800fc42:	4a24      	ldr	r2, [pc, #144]	; (800fcd4 <_Z17usbInit_HID_Wheelv+0xa0>)
 800fc44:	605a      	str	r2, [r3, #4]

	// Base Descriptor
	USB_ConfigDescType base_desc = {
 800fc46:	4a24      	ldr	r2, [pc, #144]	; (800fcd8 <_Z17usbInit_HID_Wheelv+0xa4>)
 800fc48:	1d3b      	adds	r3, r7, #4
 800fc4a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc4c:	c303      	stmia	r3!, {r0, r1}
 800fc4e:	701a      	strb	r2, [r3, #0]
		0xC0,   /* bmAttributes: self powered */
		0x32,   /* MaxPower 100 mA */

	};

	USBD_Init(&hUsbDeviceFS, &FS_Desc_Composite, DEVICE_FS);
 800fc50:	2200      	movs	r2, #0
 800fc52:	4922      	ldr	r1, [pc, #136]	; (800fcdc <_Z17usbInit_HID_Wheelv+0xa8>)
 800fc54:	4822      	ldr	r0, [pc, #136]	; (800fce0 <_Z17usbInit_HID_Wheelv+0xac>)
 800fc56:	f004 f87f 	bl	8013d58 <USBD_Init>

	// Add descriptors and class functions to composite device
	USBD_Composite_Set_Classes(handles,2,&base_desc);
 800fc5a:	1d3b      	adds	r3, r7, #4
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	2102      	movs	r1, #2
 800fc60:	481a      	ldr	r0, [pc, #104]	; (800fccc <_Z17usbInit_HID_Wheelv+0x98>)
 800fc62:	f003 fc27 	bl	80134b4 <USBD_Composite_Set_Classes>

	// Define endpoints

	//HID
	USBD_Composite_EPIN_To_Class(CUSTOM_HID_EPIN_ADDR, HID_IDX);
 800fc66:	2101      	movs	r1, #1
 800fc68:	2083      	movs	r0, #131	; 0x83
 800fc6a:	f003 fba7 	bl	80133bc <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPOUT_To_Class(CUSTOM_HID_EPOUT_ADDR, HID_IDX);
 800fc6e:	2101      	movs	r1, #1
 800fc70:	2002      	movs	r0, #2
 800fc72:	f003 fbb9 	bl	80133e8 <USBD_Composite_EPOUT_To_Class>
	USBD_Composite_InterfaceToClass(HID_INTERFACE,HID_IDX);
 800fc76:	2101      	movs	r1, #1
 800fc78:	2002      	movs	r0, #2
 800fc7a:	f003 fde5 	bl	8013848 <USBD_Composite_InterfaceToClass>

	// CDC
	USBD_Composite_EPIN_To_Class(CDC_CMD_EP, CDC_IDX);
 800fc7e:	2100      	movs	r1, #0
 800fc80:	2082      	movs	r0, #130	; 0x82
 800fc82:	f003 fb9b 	bl	80133bc <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_IN_EP, CDC_IDX);
 800fc86:	2100      	movs	r1, #0
 800fc88:	2081      	movs	r0, #129	; 0x81
 800fc8a:	f003 fb97 	bl	80133bc <USBD_Composite_EPIN_To_Class>
	USBD_Composite_EPIN_To_Class(CDC_OUT_EP, CDC_IDX);
 800fc8e:	2100      	movs	r1, #0
 800fc90:	2001      	movs	r0, #1
 800fc92:	f003 fb93 	bl	80133bc <USBD_Composite_EPIN_To_Class>

	USBD_Composite_InterfaceToClass(CDC_INTERFACE,CDC_IDX);
 800fc96:	2100      	movs	r1, #0
 800fc98:	2000      	movs	r0, #0
 800fc9a:	f003 fdd5 	bl	8013848 <USBD_Composite_InterfaceToClass>
	USBD_Composite_InterfaceToClass(CDC_INTERFACE_DATA,CDC_IDX);
 800fc9e:	2100      	movs	r1, #0
 800fca0:	2001      	movs	r0, #1
 800fca2:	f003 fdd1 	bl	8013848 <USBD_Composite_InterfaceToClass>


	USBD_RegisterClass(&hUsbDeviceFS, &USBD_Composite);
 800fca6:	490f      	ldr	r1, [pc, #60]	; (800fce4 <_Z17usbInit_HID_Wheelv+0xb0>)
 800fca8:	480d      	ldr	r0, [pc, #52]	; (800fce0 <_Z17usbInit_HID_Wheelv+0xac>)
 800fcaa:	f004 f880 	bl	8013dae <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800fcae:	490e      	ldr	r1, [pc, #56]	; (800fce8 <_Z17usbInit_HID_Wheelv+0xb4>)
 800fcb0:	480b      	ldr	r0, [pc, #44]	; (800fce0 <_Z17usbInit_HID_Wheelv+0xac>)
 800fcb2:	f003 f9af 	bl	8013014 <USBD_CDC_RegisterInterface>
	USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 800fcb6:	490d      	ldr	r1, [pc, #52]	; (800fcec <_Z17usbInit_HID_Wheelv+0xb8>)
 800fcb8:	4809      	ldr	r0, [pc, #36]	; (800fce0 <_Z17usbInit_HID_Wheelv+0xac>)
 800fcba:	f005 fa95 	bl	80151e8 <USBD_CUSTOM_HID_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800fcbe:	4808      	ldr	r0, [pc, #32]	; (800fce0 <_Z17usbInit_HID_Wheelv+0xac>)
 800fcc0:	f004 f88e 	bl	8013de0 <USBD_Start>
}
 800fcc4:	bf00      	nop
 800fcc6:	3710      	adds	r7, #16
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	20000788 	.word	0x20000788
 800fcd0:	2000002c 	.word	0x2000002c
 800fcd4:	200005ec 	.word	0x200005ec
 800fcd8:	08017624 	.word	0x08017624
 800fcdc:	200006c0 	.word	0x200006c0
 800fce0:	200015f0 	.word	0x200015f0
 800fce4:	200000c0 	.word	0x200000c0
 800fce8:	200000b0 	.word	0x200000b0
 800fcec:	200005d8 	.word	0x200005d8

0800fcf0 <_ZN6BiquadC1Ev>:

#include <Filters.h>

#include <math.h>

Biquad::Biquad(){
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
	z1 = z2 = 0.0;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f04f 0200 	mov.w	r2, #0
 800fcfe:	629a      	str	r2, [r3, #40]	; 0x28
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bc80      	pop	{r7}
 800fd12:	4770      	bx	lr

0800fd14 <_ZN6BiquadD1Ev>:
Biquad::Biquad(BiquadType type, float Fc, float Q, float peakGainDB) {
    setBiquad(type, Fc, Q, peakGainDB);
}

Biquad::~Biquad() {
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
}
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	370c      	adds	r7, #12
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bc80      	pop	{r7}
 800fd26:	4770      	bx	lr

0800fd28 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f005 fee3 	bl	8015afc <cosf>
 800fd36:	4603      	mov	r3, r0
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3708      	adds	r7, #8
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f005 ff0b 	bl	8015b64 <sinf>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	4618      	mov	r0, r3
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <_ZN28FFB_BlockLoad_Feature_Data_tC1Ev>:
	{
	uint8_t	reportId = HID_ID_BLKLDREP;
	uint8_t effectBlockIndex;	// 1..max_effects
	uint8_t	loadStatus;	// 1=Success,2=Full,3=Error
	uint16_t	ramPoolAvailable;
} __attribute__((packed)) FFB_BlockLoad_Feature_Data_t;
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2212      	movs	r2, #18
 800fd64:	701a      	strb	r2, [r3, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	370c      	adds	r7, #12
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bc80      	pop	{r7}
 800fd70:	4770      	bx	lr

0800fd72 <_ZN26FFB_PIDPool_Feature_Data_tC1Ev>:
	{
	uint8_t	reportId = HID_ID_POOLREP;
	uint16_t	ramPoolSize = MAX_EFFECTS;
	uint8_t		maxSimultaneousEffects = MAX_EFFECTS;
	uint8_t		memoryManagement = 1;	// 0=DeviceManagedPool, 1=SharedParameterBlocks
} __attribute__((packed)) FFB_PIDPool_Feature_Data_t;
 800fd72:	b480      	push	{r7}
 800fd74:	b083      	sub	sp, #12
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2213      	movs	r2, #19
 800fd7e:	701a      	strb	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2200      	movs	r2, #0
 800fd84:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800fd88:	705a      	strb	r2, [r3, #1]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	709a      	strb	r2, [r3, #2]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2228      	movs	r2, #40	; 0x28
 800fd92:	70da      	strb	r2, [r3, #3]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	711a      	strb	r2, [r3, #4]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	370c      	adds	r7, #12
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bc80      	pop	{r7}
 800fda4:	4770      	bx	lr

0800fda6 <_ZN18reportFFB_status_tC1Ev>:
} __attribute__((packed)) reportFFB_status_t;
 800fda6:	b480      	push	{r7}
 800fda8:	b083      	sub	sp, #12
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2202      	movs	r2, #2
 800fdb2:	701a      	strb	r2, [r3, #0]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	705a      	strb	r2, [r3, #1]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	220a      	movs	r2, #10
 800fdbe:	709a      	strb	r2, [r3, #2]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	370c      	adds	r7, #12
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bc80      	pop	{r7}
 800fdca:	4770      	bx	lr

0800fdcc <_ZN6HidFFBC1Ev>:
#include "HidFFB.h"
#include "math.h"
#include "FFBWheel_usb_init.h"

HidFFB::HidFFB() {
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f002 f968 	bl	80120ac <_ZN13UsbHidHandlerC1Ev>
 800fddc:	4a40      	ldr	r2, [pc, #256]	; (800fee0 <_ZN6HidFFBC1Ev+0x114>)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2200      	movs	r2, #0
 800fde6:	605a      	str	r2, [r3, #4]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2200      	movs	r2, #0
 800fdec:	721a      	strb	r2, [r3, #8]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	815a      	strh	r2, [r3, #10]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	731a      	strb	r2, [r3, #12]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	81da      	strh	r2, [r3, #14]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	22ff      	movs	r2, #255	; 0xff
 800fe04:	741a      	strb	r2, [r3, #16]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	745a      	strb	r2, [r3, #17]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	3312      	adds	r3, #18
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff ffa1 	bl	800fd58 <_ZN28FFB_BlockLoad_Feature_Data_tC1Ev>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	3317      	adds	r3, #23
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff ffa9 	bl	800fd72 <_ZN26FFB_PIDPool_Feature_Data_tC1Ev>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	3320      	adds	r3, #32
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff ffbe 	bl	800fda6 <_ZN18reportFFB_status_tC1Ev>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	3324      	adds	r3, #36	; 0x24
 800fe2e:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800fe32:	2100      	movs	r1, #0
 800fe34:	4618      	mov	r0, r3
 800fe36:	f006 fcf1 	bl	801681c <memset>
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	6879      	ldr	r1, [r7, #4]
 800fe3e:	2254      	movs	r2, #84	; 0x54
 800fe40:	fb02 f203 	mul.w	r2, r2, r3
 800fe44:	440a      	add	r2, r1
 800fe46:	3228      	adds	r2, #40	; 0x28
 800fe48:	21ff      	movs	r1, #255	; 0xff
 800fe4a:	7011      	strb	r1, [r2, #0]
 800fe4c:	2b27      	cmp	r3, #39	; 0x27
 800fe4e:	d001      	beq.n	800fe54 <_ZN6HidFFBC1Ev+0x88>
 800fe50:	3301      	adds	r3, #1
 800fe52:	e7f3      	b.n	800fe3c <_ZN6HidFFBC1Ev+0x70>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4a21      	ldr	r2, [pc, #132]	; (800fee4 <_ZN6HidFFBC1Ev+0x118>)
 800fe60:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	4a20      	ldr	r2, [pc, #128]	; (800fee8 <_ZN6HidFFBC1Ev+0x11c>)
 800fe68:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	4a1d      	ldr	r2, [pc, #116]	; (800fee4 <_ZN6HidFFBC1Ev+0x118>)
 800fe70:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	4a1c      	ldr	r2, [pc, #112]	; (800fee8 <_ZN6HidFFBC1Ev+0x11c>)
 800fe78:	f8c3 2d54 	str.w	r2, [r3, #3412]	; 0xd54
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a1b      	ldr	r2, [pc, #108]	; (800feec <_ZN6HidFFBC1Ev+0x120>)
 800fe80:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4a18      	ldr	r2, [pc, #96]	; (800fee8 <_ZN6HidFFBC1Ev+0x11c>)
 800fe88:	f8c3 2d5c 	str.w	r2, [r3, #3420]	; 0xd5c
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fe92:	f8c3 2d60 	str.w	r2, [r3, #3424]	; 0xd60
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	4a15      	ldr	r2, [pc, #84]	; (800fef0 <_ZN6HidFFBC1Ev+0x124>)
 800fe9a:	f8c3 2d64 	str.w	r2, [r3, #3428]	; 0xd64
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f603 5368 	addw	r3, r3, #3432	; 0xd68
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7ff ff23 	bl	800fcf0 <_ZN6BiquadC1Ev>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7ff ff1d 	bl	800fcf0 <_ZN6BiquadC1Ev>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff ff17 	bl	800fcf0 <_ZN6BiquadC1Ev>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f603 53ec 	addw	r3, r3, #3564	; 0xdec
 800fec8:	4618      	mov	r0, r3
 800feca:	f7ff ff11 	bl	800fcf0 <_ZN6BiquadC1Ev>
	/*damperFilter = Biquad(BiquadType::lowpass, (float)damper_f / (float)calcfrequency, damper_q, (float)0.0);
	interiaFilter = Biquad(BiquadType::lowpass, (float)friction_f / (float)calcfrequency, friction_q, (float)0.0);
	frictionFilter = Biquad(BiquadType::lowpass, (float)inertia_f / (float)calcfrequency, inertia_q, (float)0.0);
	constantFilter = Biquad(BiquadType::lowpass, (float)500/ (float)calcfrequency, cfFilter_qfloatScaler * (71), (float)0.0);*/

	this->registerHidCallback();
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4618      	mov	r0, r3
 800fed2:	f002 f933 	bl	801213c <_ZN13UsbHidHandler19registerHidCallbackEv>
}
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4618      	mov	r0, r3
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	08017798 	.word	0x08017798
 800fee4:	42480000 	.word	0x42480000
 800fee8:	3e4ccccd 	.word	0x3e4ccccd
 800feec:	41a00000 	.word	0x41a00000
 800fef0:	3c23d70a 	.word	0x3c23d70a

0800fef4 <_ZN6HidFFBD1Ev>:

HidFFB::~HidFFB() {
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	4a11      	ldr	r2, [pc, #68]	; (800ff44 <_ZN6HidFFBD1Ev+0x50>)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	601a      	str	r2, [r3, #0]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f603 53ec 	addw	r3, r3, #3564	; 0xdec
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7ff ff03 	bl	800fd14 <_ZN6BiquadD1Ev>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7ff fefd 	bl	800fd14 <_ZN6BiquadD1Ev>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7ff fef7 	bl	800fd14 <_ZN6BiquadD1Ev>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f603 5368 	addw	r3, r3, #3432	; 0xd68
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7ff fef1 	bl	800fd14 <_ZN6BiquadD1Ev>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	f002 f8c9 	bl	80120cc <_ZN13UsbHidHandlerD1Ev>

}
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	08017798 	.word	0x08017798

0800ff48 <_ZN6HidFFBD0Ev>:
HidFFB::~HidFFB() {
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
}
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7ff ffcf 	bl	800fef4 <_ZN6HidFFBD1Ev>
 800ff56:	f640 6118 	movw	r1, #3608	; 0xe18
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f005 fa90 	bl	8015480 <_ZdlPvj>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	4618      	mov	r0, r3
 800ff64:	3708      	adds	r7, #8
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
	...

0800ff6c <_ZN6HidFFB6hidOutEPh>:
{
	constantFilter.setFc(f);
	constantFilter.setQ(q);
}

void HidFFB::hidOut(uint8_t* report){
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b084      	sub	sp, #16
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
	hid_out_period = HAL_GetTick() - lastOut; // For measuring update rate
 800ff76:	f7f2 f8fb 	bl	8002170 <HAL_GetTick>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800ff82:	1ad2      	subs	r2, r2, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	605a      	str	r2, [r3, #4]
	lastOut = HAL_GetTick();
 800ff88:	f7f2 f8f2 	bl	8002170 <HAL_GetTick>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
	// FFB Output Message
	uint8_t event_idx = report[0] - FFB_ID_OFFSET;
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	73fb      	strb	r3, [r7, #15]

	// -------- Out Reports --------
	switch(event_idx){
 800ff9a:	7bfb      	ldrb	r3, [r7, #15]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	2b10      	cmp	r3, #16
 800ffa0:	f200 8098 	bhi.w	80100d4 <_ZN6HidFFB6hidOutEPh+0x168>
 800ffa4:	a201      	add	r2, pc, #4	; (adr r2, 800ffac <_ZN6HidFFB6hidOutEPh+0x40>)
 800ffa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffaa:	bf00      	nop
 800ffac:	0800fffb 	.word	0x0800fffb
 800ffb0:	08010027 	.word	0x08010027
 800ffb4:	08010031 	.word	0x08010031
 800ffb8:	0801003b 	.word	0x0801003b
 800ffbc:	08010045 	.word	0x08010045
 800ffc0:	0801004f 	.word	0x0801004f
 800ffc4:	080100d5 	.word	0x080100d5
 800ffc8:	080100d5 	.word	0x080100d5
 800ffcc:	080100d5 	.word	0x080100d5
 800ffd0:	08010059 	.word	0x08010059
 800ffd4:	080100bf 	.word	0x080100bf
 800ffd8:	08010005 	.word	0x08010005
 800ffdc:	0801001d 	.word	0x0801001d
 800ffe0:	080100d5 	.word	0x080100d5
 800ffe4:	080100d5 	.word	0x080100d5
 800ffe8:	080100d5 	.word	0x080100d5
 800ffec:	0800fff1 	.word	0x0800fff1
		case HID_ID_NEWEFREP: //add Effect Report. Feature
			new_effect((FFB_CreateNewEffect_Feature_Data_t*)(report));
 800fff0:	6839      	ldr	r1, [r7, #0]
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 f929 	bl	801024a <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>
			break;
 800fff8:	e06d      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		case HID_ID_EFFREP: // Set Effect
			set_effect((FFB_SetEffect_t*)(report));
 800fffa:	6839      	ldr	r1, [r7, #0]
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 f99a 	bl	8010336 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>
			break;
 8010002:	e068      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		case HID_ID_CTRLREP: // Control report. 1=Enable Actuators, 2=Disable Actuators, 4=Stop All Effects, 8=Reset, 16=Pause, 32=Continue
			ffb_control(report[1]);
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	3301      	adds	r3, #1
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	4619      	mov	r1, r3
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 f8df 	bl	80101d0 <_ZN6HidFFB11ffb_controlEh>
			sendStatusReport(0);
 8010012:	2100      	movs	r1, #0
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 f883 	bl	8010120 <_ZN6HidFFB16sendStatusReportEh>
			break;
 801001a:	e05c      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		case HID_ID_GAINREP: // Set global gain
			gain = report[1];
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	785a      	ldrb	r2, [r3, #1]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	741a      	strb	r2, [r3, #16]
			break;
 8010024:	e057      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		case HID_ID_ENVREP: // Envelope
			set_envelope((FFB_SetEnvelope_Data_t *)report);
 8010026:	6839      	ldr	r1, [r7, #0]
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 f9d8 	bl	80103de <_ZN6HidFFB12set_envelopeEP22FFB_SetEnvelope_Data_t>
			break;
 801002e:	e052      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		case HID_ID_CONDREP: // Spring, Damper, Friction, Inertia
			set_condition((FFB_SetCondition_Data_t*)report);
 8010030:	6839      	ldr	r1, [r7, #0]
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 fa00 	bl	8010438 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>
			break;
 8010038:	e04d      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		case HID_ID_PRIDREP: // Periodic
			set_periodic((FFB_SetPeriodic_Data_t*)report);
 801003a:	6839      	ldr	r1, [r7, #0]
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 fab0 	bl	80105a2 <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>
			break;
 8010042:	e048      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		case HID_ID_CONSTREP: // Constant
			set_constant_effect((FFB_SetConstantForce_Data_t*)report);
 8010044:	6839      	ldr	r1, [r7, #0]
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 fadd 	bl	8010606 <_ZN6HidFFB19set_constant_effectEP27FFB_SetConstantForce_Data_t>
			break;
 801004c:	e043      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		case HID_ID_RAMPREP: // Ramp
			set_ramp((FFB_SetRamp_Data_t *)report);
 801004e:	6839      	ldr	r1, [r7, #0]
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 faf1 	bl	8010638 <_ZN6HidFFB8set_rampEP18FFB_SetRamp_Data_t>
			break;
 8010056:	e03e      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		case HID_ID_SMPLREP: // Download sample
			break;
		case HID_ID_EFOPREP: //Effect operation
		{
			// Start or stop effect
			uint8_t id = report[1]-1;
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	3301      	adds	r3, #1
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	3b01      	subs	r3, #1
 8010060:	73bb      	strb	r3, [r7, #14]
			if(report[2] == 3){
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	3302      	adds	r3, #2
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	2b03      	cmp	r3, #3
 801006a:	d109      	bne.n	8010080 <_ZN6HidFFB6hidOutEPh+0x114>
				effects[id].state = 0; //Stop
 801006c:	7bbb      	ldrb	r3, [r7, #14]
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	2154      	movs	r1, #84	; 0x54
 8010072:	fb01 f303 	mul.w	r3, r1, r3
 8010076:	4413      	add	r3, r2
 8010078:	3324      	adds	r3, #36	; 0x24
 801007a:	2200      	movs	r2, #0
 801007c:	701a      	strb	r2, [r3, #0]
			}else{
				effects[id].startTime = HAL_GetTick() + effects[id].startDelay; // + effects[id].startDelay;
				effects[id].state = 1; //Start
			}
			break;
 801007e:	e02a      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
				effects[id].startTime = HAL_GetTick() + effects[id].startDelay; // + effects[id].startDelay;
 8010080:	f7f2 f876 	bl	8002170 <HAL_GetTick>
 8010084:	4601      	mov	r1, r0
 8010086:	7bbb      	ldrb	r3, [r7, #14]
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	2054      	movs	r0, #84	; 0x54
 801008c:	fb00 f303 	mul.w	r3, r0, r3
 8010090:	4413      	add	r3, r2
 8010092:	336c      	adds	r3, #108	; 0x6c
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	461a      	mov	r2, r3
 8010098:	7bbb      	ldrb	r3, [r7, #14]
 801009a:	440a      	add	r2, r1
 801009c:	6879      	ldr	r1, [r7, #4]
 801009e:	2054      	movs	r0, #84	; 0x54
 80100a0:	fb00 f303 	mul.w	r3, r0, r3
 80100a4:	440b      	add	r3, r1
 80100a6:	3370      	adds	r3, #112	; 0x70
 80100a8:	601a      	str	r2, [r3, #0]
				effects[id].state = 1; //Start
 80100aa:	7bbb      	ldrb	r3, [r7, #14]
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	2154      	movs	r1, #84	; 0x54
 80100b0:	fb01 f303 	mul.w	r3, r1, r3
 80100b4:	4413      	add	r3, r2
 80100b6:	3324      	adds	r3, #36	; 0x24
 80100b8:	2201      	movs	r2, #1
 80100ba:	701a      	strb	r2, [r3, #0]
			break;
 80100bc:	e00b      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		}
		case HID_ID_BLKFRREP: // Free a block
		{
			free_effect(report[1]-1);
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	3301      	adds	r3, #1
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	3b01      	subs	r3, #1
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	4619      	mov	r1, r3
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 fb12 	bl	80106f6 <_ZN6HidFFB11free_effectEt>
			break;
 80100d2:	e000      	b.n	80100d6 <_ZN6HidFFB6hidOutEPh+0x16a>
		}

		default:
			break;
 80100d4:	bf00      	nop
		}

}
 80100d6:	bf00      	nop
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop

080100e0 <_ZN6HidFFB6hidGetEhtPPh>:

void HidFFB::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){
 80100e0:	b480      	push	{r7}
 80100e2:	b085      	sub	sp, #20
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	607b      	str	r3, [r7, #4]
 80100ea:	460b      	mov	r3, r1
 80100ec:	72fb      	strb	r3, [r7, #11]
 80100ee:	4613      	mov	r3, r2
 80100f0:	813b      	strh	r3, [r7, #8]
	// Feature gets go here

	id = id - FFB_ID_OFFSET;

	switch(id){
 80100f2:	7afb      	ldrb	r3, [r7, #11]
 80100f4:	2b12      	cmp	r3, #18
 80100f6:	d002      	beq.n	80100fe <_ZN6HidFFB6hidGetEhtPPh+0x1e>
 80100f8:	2b13      	cmp	r3, #19
 80100fa:	d006      	beq.n	801010a <_ZN6HidFFB6hidGetEhtPPh+0x2a>
		break;
	case HID_ID_POOLREP:
		*return_buf = (uint8_t*)(&this->pool_report);
		break;
	}
}
 80100fc:	e00b      	b.n	8010116 <_ZN6HidFFB6hidGetEhtPPh+0x36>
		*return_buf = (uint8_t*)(&this->blockLoad_report);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f103 0212 	add.w	r2, r3, #18
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	601a      	str	r2, [r3, #0]
		break;
 8010108:	e005      	b.n	8010116 <_ZN6HidFFB6hidGetEhtPPh+0x36>
		*return_buf = (uint8_t*)(&this->pool_report);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f103 0217 	add.w	r2, r3, #23
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	601a      	str	r2, [r3, #0]
		break;
 8010114:	bf00      	nop
}
 8010116:	bf00      	nop
 8010118:	3714      	adds	r7, #20
 801011a:	46bd      	mov	sp, r7
 801011c:	bc80      	pop	{r7}
 801011e:	4770      	bx	lr

08010120 <_ZN6HidFFB16sendStatusReportEh>:

void HidFFB::sendStatusReport(uint8_t effect){
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	460b      	mov	r3, r1
 801012a:	70fb      	strb	r3, [r7, #3]
	extern USBD_HandleTypeDef hUsbDeviceFS;

	this->reportFFBStatus.effectBlockIndex = effect;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	78fa      	ldrb	r2, [r7, #3]
 8010130:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	this->reportFFBStatus.status = HID_ACTUATOR_POWER;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2208      	movs	r2, #8
 8010138:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	if(this->ffb_active){
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	7c5b      	ldrb	r3, [r3, #17]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d012      	beq.n	801016a <_ZN6HidFFB16sendStatusReportEh+0x4a>
		this->reportFFBStatus.status |= HID_ENABLE_ACTUATORS;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801014a:	f043 0302 	orr.w	r3, r3, #2
 801014e:	b2da      	uxtb	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		this->reportFFBStatus.status |= HID_EFFECT_PLAYING;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801015c:	f043 0310 	orr.w	r3, r3, #16
 8010160:	b2da      	uxtb	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8010168:	e008      	b.n	801017c <_ZN6HidFFB16sendStatusReportEh+0x5c>
	}else{
		this->reportFFBStatus.status |= HID_EFFECT_PAUSE;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010170:	f043 0301 	orr.w	r3, r3, #1
 8010174:	b2da      	uxtb	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
	if(effect > 0 && effects[effect-1].state == 1)
 801017c:	78fb      	ldrb	r3, [r7, #3]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00d      	beq.n	801019e <_ZN6HidFFB16sendStatusReportEh+0x7e>
 8010182:	78fb      	ldrb	r3, [r7, #3]
 8010184:	3b01      	subs	r3, #1
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	2154      	movs	r1, #84	; 0x54
 801018a:	fb01 f303 	mul.w	r3, r1, r3
 801018e:	4413      	add	r3, r2
 8010190:	3324      	adds	r3, #36	; 0x24
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b01      	cmp	r3, #1
 8010198:	d101      	bne.n	801019e <_ZN6HidFFB16sendStatusReportEh+0x7e>
 801019a:	2301      	movs	r3, #1
 801019c:	e000      	b.n	80101a0 <_ZN6HidFFB16sendStatusReportEh+0x80>
 801019e:	2300      	movs	r3, #0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d008      	beq.n	80101b6 <_ZN6HidFFB16sendStatusReportEh+0x96>
		this->reportFFBStatus.status |= HID_EFFECT_PLAYING;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80101aa:	f043 0310 	orr.w	r3, r3, #16
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reinterpret_cast<uint8_t*>(&this->reportFFBStatus), sizeof(reportFFB_status_t));
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3320      	adds	r3, #32
 80101ba:	2203      	movs	r2, #3
 80101bc:	4619      	mov	r1, r3
 80101be:	4803      	ldr	r0, [pc, #12]	; (80101cc <_ZN6HidFFB16sendStatusReportEh+0xac>)
 80101c0:	f004 ff5e 	bl	8015080 <USBD_CUSTOM_HID_SendReport>
}
 80101c4:	bf00      	nop
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	200015f0 	.word	0x200015f0

080101d0 <_ZN6HidFFB11ffb_controlEh>:

void HidFFB::ffb_control(uint8_t cmd)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	460b      	mov	r3, r1
 80101da:	70fb      	strb	r3, [r7, #3]
	if(cmd & 0x01){ //enable
 80101dc:	78fb      	ldrb	r3, [r7, #3]
 80101de:	f003 0301 	and.w	r3, r3, #1
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d002      	beq.n	80101ec <_ZN6HidFFB11ffb_controlEh+0x1c>
		start_FFB();
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 fa4b 	bl	8010682 <_ZN6HidFFB9start_FFBEv>
	}if(cmd & 0x02){ //disable
 80101ec:	78fb      	ldrb	r3, [r7, #3]
 80101ee:	f003 0302 	and.w	r3, r3, #2
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d002      	beq.n	80101fc <_ZN6HidFFB11ffb_controlEh+0x2c>
		stop_FFB();
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f000 fa4f 	bl	801069a <_ZN6HidFFB8stop_FFBEv>
	}if(cmd & 0x04){ //stop TODO Some games send wrong commands?
 80101fc:	78fb      	ldrb	r3, [r7, #3]
 80101fe:	f003 0304 	and.w	r3, r3, #4
 8010202:	2b00      	cmp	r3, #0
 8010204:	d002      	beq.n	801020c <_ZN6HidFFB11ffb_controlEh+0x3c>
		stop_FFB();
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 fa47 	bl	801069a <_ZN6HidFFB8stop_FFBEv>
		//start_FFB();
	}if(cmd & 0x08){ //reset
 801020c:	78fb      	ldrb	r3, [r7, #3]
 801020e:	f003 0308 	and.w	r3, r3, #8
 8010212:	2b00      	cmp	r3, #0
 8010214:	d005      	beq.n	8010222 <_ZN6HidFFB11ffb_controlEh+0x52>
		//ffb_active = true;
		stop_FFB();
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 fa3f 	bl	801069a <_ZN6HidFFB8stop_FFBEv>
		reset_ffb();
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 fa48 	bl	80106b2 <_ZN6HidFFB9reset_ffbEv>
		// reset effects
	}if(cmd & 0x10){ //pause
 8010222:	78fb      	ldrb	r3, [r7, #3]
 8010224:	f003 0310 	and.w	r3, r3, #16
 8010228:	2b00      	cmp	r3, #0
 801022a:	d002      	beq.n	8010232 <_ZN6HidFFB11ffb_controlEh+0x62>
		stop_FFB();
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 fa34 	bl	801069a <_ZN6HidFFB8stop_FFBEv>
	}if(cmd & 0x20){ //continue
 8010232:	78fb      	ldrb	r3, [r7, #3]
 8010234:	f003 0320 	and.w	r3, r3, #32
 8010238:	2b00      	cmp	r3, #0
 801023a:	d002      	beq.n	8010242 <_ZN6HidFFB11ffb_controlEh+0x72>
		start_FFB();
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f000 fa20 	bl	8010682 <_ZN6HidFFB9start_FFBEv>
	}
}
 8010242:	bf00      	nop
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t>:

void HidFFB::new_effect(FFB_CreateNewEffect_Feature_Data_t* effect)
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b098      	sub	sp, #96	; 0x60
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
 8010252:	6039      	str	r1, [r7, #0]
	// Allocates a new effect

	uint8_t index = find_free_effect(effect->effectType); // next effect
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	785b      	ldrb	r3, [r3, #1]
 8010258:	4619      	mov	r1, r3
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 f848 	bl	80102f0 <_ZN6HidFFB16find_free_effectEh>
 8010260:	4603      	mov	r3, r0
 8010262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if(index == 0){
 8010266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801026a:	2b00      	cmp	r3, #0
 801026c:	d103      	bne.n	8010276 <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0x2c>
		blockLoad_report.loadStatus = 2;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2202      	movs	r2, #2
 8010272:	751a      	strb	r2, [r3, #20]
 8010274:	e039      	b.n	80102ea <_ZN6HidFFB10new_effectEP34FFB_CreateNewEffect_Feature_Data_t+0xa0>
		return;
	}
	//CommandHandler::logSerial("Creating Effect: " + std::to_string(effect->effectType) +  " at " + std::to_string(index) + "\n");
	FFB_Effect new_effect;
 8010276:	f107 0308 	add.w	r3, r7, #8
 801027a:	2254      	movs	r2, #84	; 0x54
 801027c:	2100      	movs	r1, #0
 801027e:	4618      	mov	r0, r3
 8010280:	f006 facc 	bl	801681c <memset>
 8010284:	23ff      	movs	r3, #255	; 0xff
 8010286:	733b      	strb	r3, [r7, #12]
	new_effect.type = effect->effectType;
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	785b      	ldrb	r3, [r3, #1]
 801028c:	727b      	strb	r3, [r7, #9]

	effects[index-1] = std::move(new_effect);
 801028e:	f107 0308 	add.w	r3, r7, #8
 8010292:	4618      	mov	r0, r3
 8010294:	f000 ffdd 	bl	8011252 <_ZSt4moveIR10FFB_EffectEONSt16remove_referenceIT_E4typeEOS3_>
 8010298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801029c:	3b01      	subs	r3, #1
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	2154      	movs	r1, #84	; 0x54
 80102a2:	fb01 f303 	mul.w	r3, r1, r3
 80102a6:	4413      	add	r3, r2
 80102a8:	3320      	adds	r3, #32
 80102aa:	3304      	adds	r3, #4
 80102ac:	4601      	mov	r1, r0
 80102ae:	2254      	movs	r2, #84	; 0x54
 80102b0:	4618      	mov	r0, r3
 80102b2:	f006 fa8b 	bl	80167cc <memcpy>
	// Set block load report
	reportFFBStatus.effectBlockIndex = index;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80102bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	blockLoad_report.effectBlockIndex = index;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80102c6:	74da      	strb	r2, [r3, #19]
	used_effects++;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	89db      	ldrh	r3, [r3, #14]
 80102cc:	3301      	adds	r3, #1
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	81da      	strh	r2, [r3, #14]
	blockLoad_report.ramPoolAvailable = MAX_EFFECTS-used_effects;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	89db      	ldrh	r3, [r3, #14]
 80102d8:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80102dc:	b29a      	uxth	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8a3 2015 	strh.w	r2, [r3, #21]
	blockLoad_report.loadStatus = 1;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2201      	movs	r2, #1
 80102e8:	751a      	strb	r2, [r3, #20]
}
 80102ea:	3760      	adds	r7, #96	; 0x60
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <_ZN6HidFFB16find_free_effectEh>:

uint8_t HidFFB::find_free_effect(uint8_t type)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b085      	sub	sp, #20
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	460b      	mov	r3, r1
 80102fa:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 80102fc:	2300      	movs	r3, #0
 80102fe:	73fb      	strb	r3, [r7, #15]
 8010300:	7bfb      	ldrb	r3, [r7, #15]
 8010302:	2b27      	cmp	r3, #39	; 0x27
 8010304:	d811      	bhi.n	801032a <_ZN6HidFFB16find_free_effectEh+0x3a>
		if(effects[i].type == FFB_EFFECT_NONE){
 8010306:	7bfb      	ldrb	r3, [r7, #15]
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	2154      	movs	r1, #84	; 0x54
 801030c:	fb01 f303 	mul.w	r3, r1, r3
 8010310:	4413      	add	r3, r2
 8010312:	3325      	adds	r3, #37	; 0x25
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d103      	bne.n	8010322 <_ZN6HidFFB16find_free_effectEh+0x32>
			return(i+1);
 801031a:	7bfb      	ldrb	r3, [r7, #15]
 801031c:	3301      	adds	r3, #1
 801031e:	b2db      	uxtb	r3, r3
 8010320:	e004      	b.n	801032c <_ZN6HidFFB16find_free_effectEh+0x3c>
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 8010322:	7bfb      	ldrb	r3, [r7, #15]
 8010324:	3301      	adds	r3, #1
 8010326:	73fb      	strb	r3, [r7, #15]
 8010328:	e7ea      	b.n	8010300 <_ZN6HidFFB16find_free_effectEh+0x10>
		}
	}
	return 0;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	bc80      	pop	{r7}
 8010334:	4770      	bx	lr

08010336 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t>:

void HidFFB::set_effect(FFB_SetEffect_t* effect)
{
 8010336:	b580      	push	{r7, lr}
 8010338:	b084      	sub	sp, #16
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
 801033e:	6039      	str	r1, [r7, #0]
	uint8_t index = effect->effectBlockIndex;
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	785b      	ldrb	r3, [r3, #1]
 8010344:	73fb      	strb	r3, [r7, #15]
	if(index > MAX_EFFECTS || index == 0)
 8010346:	7bfb      	ldrb	r3, [r7, #15]
 8010348:	2b28      	cmp	r3, #40	; 0x28
 801034a:	d844      	bhi.n	80103d6 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xa0>
 801034c:	7bfb      	ldrb	r3, [r7, #15]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d041      	beq.n	80103d6 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xa0>
		return;

	FFB_Effect* effect_p = &effects[index-1];
 8010352:	7bfb      	ldrb	r3, [r7, #15]
 8010354:	3b01      	subs	r3, #1
 8010356:	2254      	movs	r2, #84	; 0x54
 8010358:	fb02 f303 	mul.w	r3, r2, r3
 801035c:	3320      	adds	r3, #32
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	4413      	add	r3, r2
 8010362:	3304      	adds	r3, #4
 8010364:	60bb      	str	r3, [r7, #8]

	if (effect_p->type != effect->effectType){
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	785a      	ldrb	r2, [r3, #1]
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	789b      	ldrb	r3, [r3, #2]
 801036e:	429a      	cmp	r2, r3
 8010370:	d002      	beq.n	8010378 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0x42>
		effect_p->startTime = 0;
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	2200      	movs	r2, #0
 8010376:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	effect_p->gain = effect->gain;
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	7ada      	ldrb	r2, [r3, #11]
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	711a      	strb	r2, [r3, #4]
	effect_p->type = effect->effectType;
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	789a      	ldrb	r2, [r3, #2]
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	705a      	strb	r2, [r3, #1]
	effect_p->samplePeriod = effect->samplePeriod;
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801038e:	b29a      	uxth	r2, r3
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	effect_p->enableAxis = effect->enableAxis;
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	7b5a      	ldrb	r2, [r3, #13]
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	731a      	strb	r2, [r3, #12]
	effect_p->directionX = effect->directionX;
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	89db      	ldrh	r3, [r3, #14]
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	81da      	strh	r2, [r3, #14]
	effect_p->directionY = effect->directionY;
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	8a1b      	ldrh	r3, [r3, #16]
 80103ac:	b29a      	uxth	r2, r3
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	821a      	strh	r2, [r3, #16]

	effect_p->duration = effect->duration;
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	461a      	mov	r2, r3
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	631a      	str	r2, [r3, #48]	; 0x30
	if(!ffb_active)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	7c5b      	ldrb	r3, [r3, #17]
 80103c4:	f083 0301 	eor.w	r3, r3, #1
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d004      	beq.n	80103d8 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xa2>
		start_FFB();
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 f957 	bl	8010682 <_ZN6HidFFB9start_FFBEv>
 80103d4:	e000      	b.n	80103d8 <_ZN6HidFFB10set_effectEP15FFB_SetEffect_t+0xa2>
		return;
 80103d6:	bf00      	nop
}
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <_ZN6HidFFB12set_envelopeEP22FFB_SetEnvelope_Data_t>:

void HidFFB::set_envelope(FFB_SetEnvelope_Data_t *report)
{
 80103de:	b480      	push	{r7}
 80103e0:	b085      	sub	sp, #20
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	6039      	str	r1, [r7, #0]
	FFB_Effect *effect = &effects[report->effectBlockIndex - 1];
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	785b      	ldrb	r3, [r3, #1]
 80103ec:	3b01      	subs	r3, #1
 80103ee:	2254      	movs	r2, #84	; 0x54
 80103f0:	fb02 f303 	mul.w	r3, r2, r3
 80103f4:	3320      	adds	r3, #32
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	4413      	add	r3, r2
 80103fa:	3304      	adds	r3, #4
 80103fc:	60fb      	str	r3, [r7, #12]

	effect->attackLevel = report->attackLevel;
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	885b      	ldrh	r3, [r3, #2]
 8010402:	b29a      	uxth	r2, r3
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	869a      	strh	r2, [r3, #52]	; 0x34
	effect->attackTime = report->attackTime;
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	f8d3 2006 	ldr.w	r2, [r3, #6]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	639a      	str	r2, [r3, #56]	; 0x38
	effect->fadeLevel = report->fadeLevel;
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	889b      	ldrh	r3, [r3, #4]
 8010416:	b29a      	uxth	r2, r3
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	86da      	strh	r2, [r3, #54]	; 0x36
	effect->fadeTime = report->fadeTime;
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	f8d3 200a 	ldr.w	r2, [r3, #10]
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	63da      	str	r2, [r3, #60]	; 0x3c
	effect->useEnvelope = true;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2201      	movs	r2, #1
 801042a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 801042e:	bf00      	nop
 8010430:	3714      	adds	r7, #20
 8010432:	46bd      	mov	sp, r7
 8010434:	bc80      	pop	{r7}
 8010436:	4770      	bx	lr

08010438 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t>:

void HidFFB::set_condition(FFB_SetCondition_Data_t *cond)
{
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
	uint8_t axis = cond->parameterBlockOffset;
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	789b      	ldrb	r3, [r3, #2]
 8010446:	73fb      	strb	r3, [r7, #15]
	if (axis >= MAX_AXIS){
 8010448:	7bfb      	ldrb	r3, [r7, #15]
 801044a:	2b01      	cmp	r3, #1
 801044c:	f200 80a4 	bhi.w	8010598 <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x160>
		return; // sanity check!
	}
	FFB_Effect *effect = &effects[cond->effectBlockIndex - 1];
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	785b      	ldrb	r3, [r3, #1]
 8010454:	3b01      	subs	r3, #1
 8010456:	2254      	movs	r2, #84	; 0x54
 8010458:	fb02 f303 	mul.w	r3, r2, r3
 801045c:	3320      	adds	r3, #32
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	4413      	add	r3, r2
 8010462:	3304      	adds	r3, #4
 8010464:	60bb      	str	r3, [r7, #8]
	effect->conditions[axis].cpOffset = cond->cpOffset;
 8010466:	7bfa      	ldrb	r2, [r7, #15]
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 801046e:	b218      	sxth	r0, r3
 8010470:	68b9      	ldr	r1, [r7, #8]
 8010472:	4613      	mov	r3, r2
 8010474:	005b      	lsls	r3, r3, #1
 8010476:	4413      	add	r3, r2
 8010478:	009b      	lsls	r3, r3, #2
 801047a:	440b      	add	r3, r1
 801047c:	3310      	adds	r3, #16
 801047e:	4602      	mov	r2, r0
 8010480:	f8a3 2003 	strh.w	r2, [r3, #3]
	effect->conditions[axis].negativeCoefficient = cond->negativeCoefficient;
 8010484:	7bfa      	ldrb	r2, [r7, #15]
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 801048c:	b218      	sxth	r0, r3
 801048e:	68b9      	ldr	r1, [r7, #8]
 8010490:	4613      	mov	r3, r2
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	4413      	add	r3, r2
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	440b      	add	r3, r1
 801049a:	3310      	adds	r3, #16
 801049c:	4602      	mov	r2, r0
 801049e:	f8a3 2007 	strh.w	r2, [r3, #7]
	effect->conditions[axis].positiveCoefficient = cond->positiveCoefficient;
 80104a2:	7bfa      	ldrb	r2, [r7, #15]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80104aa:	b218      	sxth	r0, r3
 80104ac:	68b9      	ldr	r1, [r7, #8]
 80104ae:	4613      	mov	r3, r2
 80104b0:	005b      	lsls	r3, r3, #1
 80104b2:	4413      	add	r3, r2
 80104b4:	009b      	lsls	r3, r3, #2
 80104b6:	440b      	add	r3, r1
 80104b8:	3310      	adds	r3, #16
 80104ba:	4602      	mov	r2, r0
 80104bc:	f8a3 2005 	strh.w	r2, [r3, #5]
	effect->conditions[axis].negativeSaturation = cond->negativeSaturation;
 80104c0:	7bfa      	ldrb	r2, [r7, #15]
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80104c8:	b298      	uxth	r0, r3
 80104ca:	68b9      	ldr	r1, [r7, #8]
 80104cc:	4613      	mov	r3, r2
 80104ce:	005b      	lsls	r3, r3, #1
 80104d0:	4413      	add	r3, r2
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	440b      	add	r3, r1
 80104d6:	3318      	adds	r3, #24
 80104d8:	4602      	mov	r2, r0
 80104da:	f8a3 2003 	strh.w	r2, [r3, #3]
	effect->conditions[axis].positiveSaturation = cond->positiveSaturation;
 80104de:	7bfa      	ldrb	r2, [r7, #15]
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80104e6:	b298      	uxth	r0, r3
 80104e8:	68b9      	ldr	r1, [r7, #8]
 80104ea:	4613      	mov	r3, r2
 80104ec:	005b      	lsls	r3, r3, #1
 80104ee:	4413      	add	r3, r2
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	440b      	add	r3, r1
 80104f4:	3310      	adds	r3, #16
 80104f6:	4602      	mov	r2, r0
 80104f8:	f8a3 2009 	strh.w	r2, [r3, #9]
	effect->conditions[axis].deadBand = cond->deadBand;
 80104fc:	7bfa      	ldrb	r2, [r7, #15]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8010504:	b298      	uxth	r0, r3
 8010506:	68b9      	ldr	r1, [r7, #8]
 8010508:	4613      	mov	r3, r2
 801050a:	005b      	lsls	r3, r3, #1
 801050c:	4413      	add	r3, r2
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	440b      	add	r3, r1
 8010512:	3318      	adds	r3, #24
 8010514:	4602      	mov	r2, r0
 8010516:	f8a3 2005 	strh.w	r2, [r3, #5]
	effect->conditionsCount++;
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	7c9b      	ldrb	r3, [r3, #18]
 801051e:	3301      	adds	r3, #1
 8010520:	b2da      	uxtb	r2, r3
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	749a      	strb	r2, [r3, #18]
	if(effect->conditions[axis].positiveSaturation == 0){
 8010526:	7bfa      	ldrb	r2, [r7, #15]
 8010528:	68b9      	ldr	r1, [r7, #8]
 801052a:	4613      	mov	r3, r2
 801052c:	005b      	lsls	r3, r3, #1
 801052e:	4413      	add	r3, r2
 8010530:	009b      	lsls	r3, r3, #2
 8010532:	440b      	add	r3, r1
 8010534:	3310      	adds	r3, #16
 8010536:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 801053a:	b29b      	uxth	r3, r3
 801053c:	2b00      	cmp	r3, #0
 801053e:	d10e      	bne.n	801055e <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x126>
		effect->conditions[axis].positiveSaturation = 0x7FFF;
 8010540:	7bfa      	ldrb	r2, [r7, #15]
 8010542:	68b9      	ldr	r1, [r7, #8]
 8010544:	4613      	mov	r3, r2
 8010546:	005b      	lsls	r3, r3, #1
 8010548:	4413      	add	r3, r2
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	440b      	add	r3, r1
 801054e:	3310      	adds	r3, #16
 8010550:	f04f 32ff 	mov.w	r2, #4294967295
 8010554:	725a      	strb	r2, [r3, #9]
 8010556:	2200      	movs	r2, #0
 8010558:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
 801055c:	729a      	strb	r2, [r3, #10]
	}
	if(effect->conditions[axis].negativeSaturation == 0){
 801055e:	7bfa      	ldrb	r2, [r7, #15]
 8010560:	68b9      	ldr	r1, [r7, #8]
 8010562:	4613      	mov	r3, r2
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	4413      	add	r3, r2
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	440b      	add	r3, r1
 801056c:	3318      	adds	r3, #24
 801056e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010572:	b29b      	uxth	r3, r3
 8010574:	2b00      	cmp	r3, #0
 8010576:	d110      	bne.n	801059a <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x162>
		effect->conditions[axis].negativeSaturation = 0x7FFF;
 8010578:	7bfa      	ldrb	r2, [r7, #15]
 801057a:	68b9      	ldr	r1, [r7, #8]
 801057c:	4613      	mov	r3, r2
 801057e:	005b      	lsls	r3, r3, #1
 8010580:	4413      	add	r3, r2
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	440b      	add	r3, r1
 8010586:	3318      	adds	r3, #24
 8010588:	f04f 32ff 	mov.w	r2, #4294967295
 801058c:	70da      	strb	r2, [r3, #3]
 801058e:	2200      	movs	r2, #0
 8010590:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
 8010594:	711a      	strb	r2, [r3, #4]
 8010596:	e000      	b.n	801059a <_ZN6HidFFB13set_conditionEP23FFB_SetCondition_Data_t+0x162>
		return; // sanity check!
 8010598:	bf00      	nop
	}
}
 801059a:	3714      	adds	r7, #20
 801059c:	46bd      	mov	sp, r7
 801059e:	bc80      	pop	{r7}
 80105a0:	4770      	bx	lr

080105a2 <_ZN6HidFFB12set_periodicEP22FFB_SetPeriodic_Data_t>:

void HidFFB::set_periodic(FFB_SetPeriodic_Data_t* report)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b084      	sub	sp, #16
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
 80105aa:	6039      	str	r1, [r7, #0]
	FFB_Effect* effect = &effects[report->effectBlockIndex-1];
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	785b      	ldrb	r3, [r3, #1]
 80105b0:	3b01      	subs	r3, #1
 80105b2:	2254      	movs	r2, #84	; 0x54
 80105b4:	fb02 f303 	mul.w	r3, r2, r3
 80105b8:	3320      	adds	r3, #32
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	4413      	add	r3, r2
 80105be:	3304      	adds	r3, #4
 80105c0:	60fb      	str	r3, [r7, #12]

	effect->period = clip<uint32_t,uint32_t>(report->period,1,0x7fff); // Period is never 0
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	689b      	ldr	r3, [r3, #8]
 80105c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80105ca:	2101      	movs	r1, #1
 80105cc:	4618      	mov	r0, r3
 80105ce:	f000 fe4a 	bl	8011266 <_Z4clipImmET_S0_T0_S1_>
 80105d2:	4603      	mov	r3, r0
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	85da      	strh	r2, [r3, #46]	; 0x2e
	effect->magnitude = report->magnitude;
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	885b      	ldrh	r3, [r3, #2]
 80105de:	b29b      	uxth	r3, r3
 80105e0:	b21a      	sxth	r2, r3
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	80da      	strh	r2, [r3, #6]
	effect->offset = report->offset;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80105ec:	b21a      	sxth	r2, r3
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	805a      	strh	r2, [r3, #2]
	effect->phase = report->phase;
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	88db      	ldrh	r3, [r3, #6]
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	b21a      	sxth	r2, r3
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	859a      	strh	r2, [r3, #44]	; 0x2c
	//effect->counter = 0;
}
 80105fe:	bf00      	nop
 8010600:	3710      	adds	r7, #16
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <_ZN6HidFFB19set_constant_effectEP27FFB_SetConstantForce_Data_t>:

void HidFFB::set_constant_effect(FFB_SetConstantForce_Data_t* effect){
 8010606:	b480      	push	{r7}
 8010608:	b083      	sub	sp, #12
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
 801060e:	6039      	str	r1, [r7, #0]
	effects[effect->effectBlockIndex-1].magnitude = effect->magnitude;
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	785b      	ldrb	r3, [r3, #1]
 8010614:	3b01      	subs	r3, #1
 8010616:	683a      	ldr	r2, [r7, #0]
 8010618:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801061c:	b210      	sxth	r0, r2
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	2154      	movs	r1, #84	; 0x54
 8010622:	fb01 f303 	mul.w	r3, r1, r3
 8010626:	4413      	add	r3, r2
 8010628:	332a      	adds	r3, #42	; 0x2a
 801062a:	4602      	mov	r2, r0
 801062c:	801a      	strh	r2, [r3, #0]
}
 801062e:	bf00      	nop
 8010630:	370c      	adds	r7, #12
 8010632:	46bd      	mov	sp, r7
 8010634:	bc80      	pop	{r7}
 8010636:	4770      	bx	lr

08010638 <_ZN6HidFFB8set_rampEP18FFB_SetRamp_Data_t>:

void HidFFB::set_ramp(FFB_SetRamp_Data_t *report)
{
 8010638:	b480      	push	{r7}
 801063a:	b085      	sub	sp, #20
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
	FFB_Effect *effect = &effects[report->effectBlockIndex - 1];
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	785b      	ldrb	r3, [r3, #1]
 8010646:	3b01      	subs	r3, #1
 8010648:	2254      	movs	r2, #84	; 0x54
 801064a:	fb02 f303 	mul.w	r3, r2, r3
 801064e:	3320      	adds	r3, #32
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	4413      	add	r3, r2
 8010654:	3304      	adds	r3, #4
 8010656:	60fb      	str	r3, [r7, #12]
	effect->magnitude = 0x7fff; // Full magnitude for envelope calculation. This effect does not have a periodic report
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801065e:	80da      	strh	r2, [r3, #6]
	effect->startLevel = report->startLevel;
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	885b      	ldrh	r3, [r3, #2]
 8010664:	b29b      	uxth	r3, r3
 8010666:	b21a      	sxth	r2, r3
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	811a      	strh	r2, [r3, #8]
	effect->endLevel = report->endLevel;
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	889b      	ldrh	r3, [r3, #4]
 8010670:	b29b      	uxth	r3, r3
 8010672:	b21a      	sxth	r2, r3
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	815a      	strh	r2, [r3, #10]
}
 8010678:	bf00      	nop
 801067a:	3714      	adds	r7, #20
 801067c:	46bd      	mov	sp, r7
 801067e:	bc80      	pop	{r7}
 8010680:	4770      	bx	lr

08010682 <_ZN6HidFFB9start_FFBEv>:

void HidFFB::start_FFB(){
 8010682:	b480      	push	{r7}
 8010684:	b083      	sub	sp, #12
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
	ffb_active = true;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2201      	movs	r2, #1
 801068e:	745a      	strb	r2, [r3, #17]


}
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	bc80      	pop	{r7}
 8010698:	4770      	bx	lr

0801069a <_ZN6HidFFB8stop_FFBEv>:
void HidFFB::stop_FFB(){
 801069a:	b480      	push	{r7}
 801069c:	b083      	sub	sp, #12
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
	ffb_active = false;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	745a      	strb	r2, [r3, #17]
}
 80106a8:	bf00      	nop
 80106aa:	370c      	adds	r7, #12
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bc80      	pop	{r7}
 80106b0:	4770      	bx	lr

080106b2 <_ZN6HidFFB9reset_ffbEv>:

void HidFFB::reset_ffb(){
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b084      	sub	sp, #16
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 80106ba:	2300      	movs	r3, #0
 80106bc:	73fb      	strb	r3, [r7, #15]
 80106be:	7bfb      	ldrb	r3, [r7, #15]
 80106c0:	2b27      	cmp	r3, #39	; 0x27
 80106c2:	d809      	bhi.n	80106d8 <_ZN6HidFFB9reset_ffbEv+0x26>
		free_effect(i);
 80106c4:	7bfb      	ldrb	r3, [r7, #15]
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	4619      	mov	r1, r3
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 f813 	bl	80106f6 <_ZN6HidFFB11free_effectEt>
	for(uint8_t i=0;i<MAX_EFFECTS;i++){
 80106d0:	7bfb      	ldrb	r3, [r7, #15]
 80106d2:	3301      	adds	r3, #1
 80106d4:	73fb      	strb	r3, [r7, #15]
 80106d6:	e7f2      	b.n	80106be <_ZN6HidFFB9reset_ffbEv+0xc>
	}
	this->reportFFBStatus.effectBlockIndex = 1;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2201      	movs	r2, #1
 80106dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	this->reportFFBStatus.status = (HID_ACTUATOR_POWER) | (HID_ENABLE_ACTUATORS);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	220a      	movs	r2, #10
 80106e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	used_effects = 0;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	81da      	strh	r2, [r3, #14]
}
 80106ee:	bf00      	nop
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <_ZN6HidFFB11free_effectEt>:

void HidFFB::free_effect(uint16_t idx){
 80106f6:	b480      	push	{r7}
 80106f8:	b083      	sub	sp, #12
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	460b      	mov	r3, r1
 8010700:	807b      	strh	r3, [r7, #2]
	if(idx < MAX_EFFECTS){
 8010702:	887b      	ldrh	r3, [r7, #2]
 8010704:	2b27      	cmp	r3, #39	; 0x27
 8010706:	d808      	bhi.n	801071a <_ZN6HidFFB11free_effectEt+0x24>
		effects[idx].type=FFB_EFFECT_NONE;
 8010708:	887b      	ldrh	r3, [r7, #2]
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	2154      	movs	r1, #84	; 0x54
 801070e:	fb01 f303 	mul.w	r3, r1, r3
 8010712:	4413      	add	r3, r2
 8010714:	3325      	adds	r3, #37	; 0x25
 8010716:	2200      	movs	r2, #0
 8010718:	701a      	strb	r2, [r3, #0]
	}
}
 801071a:	bf00      	nop
 801071c:	370c      	adds	r7, #12
 801071e:	46bd      	mov	sp, r7
 8010720:	bc80      	pop	{r7}
 8010722:	4770      	bx	lr

08010724 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal>:

int32_t HidFFB::calculateEffects(EncoderLocal* encoder){
 8010724:	b580      	push	{r7, lr}
 8010726:	b086      	sub	sp, #24
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
	if(!ffb_active){
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	7c5b      	ldrb	r3, [r3, #17]
 8010732:	f083 0301 	eor.w	r3, r3, #1
 8010736:	b2db      	uxtb	r3, r3
 8010738:	2b00      	cmp	r3, #0
 801073a:	d001      	beq.n	8010740 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x1c>
		return 0;
 801073c:	2300      	movs	r3, #0
 801073e:	e03c      	b.n	80107ba <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x96>
	}

	int32_t forceX = 0;
 8010740:	2300      	movs	r3, #0
 8010742:	617b      	str	r3, [r7, #20]
	int32_t forceVector = 0;
 8010744:	2300      	movs	r3, #0
 8010746:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0;i<MAX_EFFECTS;i++){
 8010748:	2300      	movs	r3, #0
 801074a:	73fb      	strb	r3, [r7, #15]
 801074c:	7bfb      	ldrb	r3, [r7, #15]
 801074e:	2b27      	cmp	r3, #39	; 0x27
 8010750:	d832      	bhi.n	80107b8 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x94>
		FFB_Effect* effect = &effects[i];
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	2254      	movs	r2, #84	; 0x54
 8010756:	fb02 f303 	mul.w	r3, r2, r3
 801075a:	3320      	adds	r3, #32
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	4413      	add	r3, r2
 8010760:	3304      	adds	r3, #4
 8010762:	60bb      	str	r3, [r7, #8]

		if(effect->state == 0)
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	b2db      	uxtb	r3, r3
 801076a:	2b00      	cmp	r3, #0
 801076c:	bf0c      	ite	eq
 801076e:	2301      	moveq	r3, #1
 8010770:	2300      	movne	r3, #0
 8010772:	b2db      	uxtb	r3, r3
 8010774:	2b00      	cmp	r3, #0
 8010776:	d11a      	bne.n	80107ae <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x8a>
			continue;

		if (effect->conditionsCount == 0) {
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	7c9b      	ldrb	r3, [r3, #18]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d104      	bne.n	801078a <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x66>
			forceVector = calcNonConditionEffectForce(effect);
 8010780:	68b9      	ldr	r1, [r7, #8]
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f000 f834 	bl	80107f0 <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect>
 8010788:	6138      	str	r0, [r7, #16]
		}

		forceX += calcComponentForce(effect, forceVector, encoder);
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	693a      	ldr	r2, [r7, #16]
 801078e:	68b9      	ldr	r1, [r7, #8]
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f000 fb41 	bl	8010e18 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal>
 8010796:	4602      	mov	r2, r0
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	4413      	add	r3, r2
 801079c:	617b      	str	r3, [r7, #20]
		forceX = clip<int32_t, int32_t>(forceX, -0x7fff, 0x7fff);
 801079e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80107a2:	4908      	ldr	r1, [pc, #32]	; (80107c4 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0xa0>)
 80107a4:	6978      	ldr	r0, [r7, #20]
 80107a6:	f7fd ff33 	bl	800e610 <_Z4clipIllET_S0_T0_S1_>
 80107aa:	6178      	str	r0, [r7, #20]
 80107ac:	e000      	b.n	80107b0 <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x8c>
			continue;
 80107ae:	bf00      	nop
	for(uint8_t i = 0;i<MAX_EFFECTS;i++){
 80107b0:	7bfb      	ldrb	r3, [r7, #15]
 80107b2:	3301      	adds	r3, #1
 80107b4:	73fb      	strb	r3, [r7, #15]
 80107b6:	e7c9      	b.n	801074c <_ZN6HidFFB16calculateEffectsEP12EncoderLocal+0x28>

	}
	return forceX;
 80107b8:	697b      	ldr	r3, [r7, #20]
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3718      	adds	r7, #24
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	ffff8001 	.word	0xffff8001

080107c8 <_ZSt3maxItERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	881a      	ldrh	r2, [r3, #0]
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d201      	bcs.n	80107e2 <_ZSt3maxItERKT_S2_S2_+0x1a>
	return __b;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	e000      	b.n	80107e4 <_ZSt3maxItERKT_S2_S2_+0x1c>
      return __a;
 80107e2:	687b      	ldr	r3, [r7, #4]
    }
 80107e4:	4618      	mov	r0, r3
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bc80      	pop	{r7}
 80107ec:	4770      	bx	lr
	...

080107f0 <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect>:

int32_t HidFFB::calcNonConditionEffectForce(FFB_Effect *effect)
{
 80107f0:	b590      	push	{r4, r7, lr}
 80107f2:	b0b3      	sub	sp, #204	; 0xcc
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
	int32_t force_vector = 0;
 80107fa:	2300      	movs	r3, #0
 80107fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	switch (effect->type){
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	785b      	ldrb	r3, [r3, #1]
 8010804:	3b01      	subs	r3, #1
 8010806:	2b06      	cmp	r3, #6
 8010808:	f200 8280 	bhi.w	8010d0c <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x51c>
 801080c:	a201      	add	r2, pc, #4	; (adr r2, 8010814 <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x24>)
 801080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010812:	bf00      	nop
 8010814:	08010831 	.word	0x08010831
 8010818:	0801084b 	.word	0x0801084b
 801081c:	080108b7 	.word	0x080108b7
 8010820:	08010c35 	.word	0x08010c35
 8010824:	08010911 	.word	0x08010911
 8010828:	08010a15 	.word	0x08010a15
 801082c:	08010b09 	.word	0x08010b09

	case FFB_EFFECT_CONSTANT:
	{ // Constant force is just the force
		force_vector = ((int32_t)effect->magnitude * (int32_t)(1 + effect->gain)) >> 8;
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010836:	461a      	mov	r2, r3
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	791b      	ldrb	r3, [r3, #4]
 801083c:	3301      	adds	r3, #1
 801083e:	fb03 f302 	mul.w	r3, r3, r2
 8010842:	121b      	asrs	r3, r3, #8
 8010844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		// Optional filtering to reduce spikes
		/*if (conf->cfFilter_f < calcfrequency / 2)
		{
			force_vector = constantFilter.process(force_vector);
		}*/
		break;
 8010848:	e261      	b.n	8010d0e <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x51e>
	}

	case FFB_EFFECT_RAMP:
	{
		uint32_t elapsed_time = HAL_GetTick() - effect->startTime;
 801084a:	f7f1 fc91 	bl	8002170 <HAL_GetTick>
 801084e:	4602      	mov	r2, r0
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	617b      	str	r3, [r7, #20]
		int32_t duration = effect->duration;
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085c:	613b      	str	r3, [r7, #16]
		float force = (int32_t)effect->startLevel + ((int32_t)elapsed_time * (effect->endLevel - effect->startLevel)) / duration;
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010864:	4619      	mov	r1, r3
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801086c:	461a      	mov	r2, r3
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010874:	1ad3      	subs	r3, r2, r3
 8010876:	697a      	ldr	r2, [r7, #20]
 8010878:	fb02 f203 	mul.w	r2, r2, r3
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010882:	440b      	add	r3, r1
 8010884:	4618      	mov	r0, r3
 8010886:	f7f0 f943 	bl	8000b10 <__aeabi_i2f>
 801088a:	4603      	mov	r3, r0
 801088c:	60fb      	str	r3, [r7, #12]
		force_vector = (int32_t)(force * (1 + effect->gain)) >> 8;
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	791b      	ldrb	r3, [r3, #4]
 8010892:	3301      	adds	r3, #1
 8010894:	4618      	mov	r0, r3
 8010896:	f7f0 f93b 	bl	8000b10 <__aeabi_i2f>
 801089a:	4603      	mov	r3, r0
 801089c:	68f9      	ldr	r1, [r7, #12]
 801089e:	4618      	mov	r0, r3
 80108a0:	f7f0 f98a 	bl	8000bb8 <__aeabi_fmul>
 80108a4:	4603      	mov	r3, r0
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7f0 fb4c 	bl	8000f44 <__aeabi_f2iz>
 80108ac:	4603      	mov	r3, r0
 80108ae:	121b      	asrs	r3, r3, #8
 80108b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		break;
 80108b4:	e22b      	b.n	8010d0e <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x51e>
	}

	case FFB_EFFECT_SQUARE:
	{
		uint32_t elapsed_time = HAL_GetTick() - effect->startTime;
 80108b6:	f7f1 fc5b 	bl	8002170 <HAL_GetTick>
 80108ba:	4602      	mov	r2, r0
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108c0:	1ad3      	subs	r3, r2, r3
 80108c2:	61fb      	str	r3, [r7, #28]
		int32_t force = ((elapsed_time + effect->phase) % ((uint32_t)effect->period + 2)) < (uint32_t)(effect->period + 2) / 2 ? -effect->magnitude : effect->magnitude;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80108ca:	461a      	mov	r2, r3
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	4413      	add	r3, r2
 80108d0:	683a      	ldr	r2, [r7, #0]
 80108d2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80108d4:	3202      	adds	r2, #2
 80108d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80108da:	fb02 f201 	mul.w	r2, r2, r1
 80108de:	1a9a      	subs	r2, r3, r2
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80108e4:	3302      	adds	r3, #2
 80108e6:	085b      	lsrs	r3, r3, #1
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d204      	bcs.n	80108f6 <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x106>
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80108f2:	425b      	negs	r3, r3
 80108f4:	e002      	b.n	80108fc <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x10c>
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80108fc:	61bb      	str	r3, [r7, #24]
		force_vector = force + effect->offset;
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010904:	461a      	mov	r2, r3
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	4413      	add	r3, r2
 801090a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		break;
 801090e:	e1fe      	b.n	8010d0e <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x51e>
	}

	case FFB_EFFECT_TRIANGLE:
	{
		int32_t force = 0;
 8010910:	2300      	movs	r3, #0
 8010912:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		int32_t offset = effect->offset;
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801091c:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t magnitude = effect->magnitude;
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010924:	65bb      	str	r3, [r7, #88]	; 0x58
		uint32_t elapsed_time = HAL_GetTick() - effect->startTime;
 8010926:	f7f1 fc23 	bl	8002170 <HAL_GetTick>
 801092a:	4602      	mov	r2, r0
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	657b      	str	r3, [r7, #84]	; 0x54
		uint32_t phase = effect->phase;
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801093a:	653b      	str	r3, [r7, #80]	; 0x50
		uint32_t period = effect->period;
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010940:	64fb      	str	r3, [r7, #76]	; 0x4c
		float periodF = period;
 8010942:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010944:	f7f0 f8e0 	bl	8000b08 <__aeabi_ui2f>
 8010948:	4603      	mov	r3, r0
 801094a:	64bb      	str	r3, [r7, #72]	; 0x48

		int32_t maxMagnitude = offset + magnitude;
 801094c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801094e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010950:	4413      	add	r3, r2
 8010952:	647b      	str	r3, [r7, #68]	; 0x44
		int32_t minMagnitude = offset - magnitude;
 8010954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010958:	1ad3      	subs	r3, r2, r3
 801095a:	643b      	str	r3, [r7, #64]	; 0x40
		uint32_t phasetime = (phase * period) / 35999;
 801095c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801095e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010960:	fb02 f303 	mul.w	r3, r2, r3
 8010964:	4ab1      	ldr	r2, [pc, #708]	; (8010c2c <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x43c>)
 8010966:	fba2 2303 	umull	r2, r3, r2, r3
 801096a:	0b9b      	lsrs	r3, r3, #14
 801096c:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t timeTemp = elapsed_time + phasetime;
 801096e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010972:	4413      	add	r3, r2
 8010974:	63bb      	str	r3, [r7, #56]	; 0x38
		float remainder = timeTemp % period;
 8010976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801097a:	fbb3 f2f2 	udiv	r2, r3, r2
 801097e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010980:	fb01 f202 	mul.w	r2, r1, r2
 8010984:	1a9b      	subs	r3, r3, r2
 8010986:	4618      	mov	r0, r3
 8010988:	f7f0 f8be 	bl	8000b08 <__aeabi_ui2f>
 801098c:	4603      	mov	r3, r0
 801098e:	637b      	str	r3, [r7, #52]	; 0x34
		float slope = ((maxMagnitude - minMagnitude) * 2) / periodF;
 8010990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010994:	1ad3      	subs	r3, r2, r3
 8010996:	005b      	lsls	r3, r3, #1
 8010998:	4618      	mov	r0, r3
 801099a:	f7f0 f8b9 	bl	8000b10 <__aeabi_i2f>
 801099e:	4603      	mov	r3, r0
 80109a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7f0 f9bc 	bl	8000d20 <__aeabi_fdiv>
 80109a8:	4603      	mov	r3, r0
 80109aa:	633b      	str	r3, [r7, #48]	; 0x30
		if (remainder > (periodF / 2))
 80109ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80109b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80109b2:	f7f0 f9b5 	bl	8000d20 <__aeabi_fdiv>
 80109b6:	4603      	mov	r3, r0
 80109b8:	4619      	mov	r1, r3
 80109ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80109bc:	f7f0 fab8 	bl	8000f30 <__aeabi_fcmpgt>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d010      	beq.n	80109e8 <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x1f8>
			force = slope * (periodF - remainder);
 80109c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80109c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80109ca:	f7ef ffeb 	bl	80009a4 <__aeabi_fsub>
 80109ce:	4603      	mov	r3, r0
 80109d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7f0 f8f0 	bl	8000bb8 <__aeabi_fmul>
 80109d8:	4603      	mov	r3, r0
 80109da:	4618      	mov	r0, r3
 80109dc:	f7f0 fab2 	bl	8000f44 <__aeabi_f2iz>
 80109e0:	4603      	mov	r3, r0
 80109e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80109e6:	e00a      	b.n	80109fe <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x20e>
		else
			force = slope * remainder;
 80109e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80109ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109ec:	f7f0 f8e4 	bl	8000bb8 <__aeabi_fmul>
 80109f0:	4603      	mov	r3, r0
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7f0 faa6 	bl	8000f44 <__aeabi_f2iz>
 80109f8:	4603      	mov	r3, r0
 80109fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		force += minMagnitude;
 80109fe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a04:	4413      	add	r3, r2
 8010a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		force_vector = force;
 8010a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		break;
 8010a12:	e17c      	b.n	8010d0e <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x51e>
	}

	case FFB_EFFECT_SAWTOOTHUP:
	{
		float offset = effect->offset;
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7f0 f878 	bl	8000b10 <__aeabi_i2f>
 8010a20:	4603      	mov	r3, r0
 8010a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		float magnitude = effect->magnitude;
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7f0 f86f 	bl	8000b10 <__aeabi_i2f>
 8010a32:	4603      	mov	r3, r0
 8010a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		uint32_t elapsed_time = HAL_GetTick() - effect->startTime;
 8010a38:	f7f1 fb9a 	bl	8002170 <HAL_GetTick>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a42:	1ad3      	subs	r3, r2, r3
 8010a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		uint32_t phase = effect->phase;
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		uint32_t period = effect->period;
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a56:	67fb      	str	r3, [r7, #124]	; 0x7c
		float periodF = effect->period;
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7f0 f853 	bl	8000b08 <__aeabi_ui2f>
 8010a62:	4603      	mov	r3, r0
 8010a64:	67bb      	str	r3, [r7, #120]	; 0x78

		float maxMagnitude = offset + magnitude;
 8010a66:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010a6a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010a6e:	f7ef ff9b 	bl	80009a8 <__addsf3>
 8010a72:	4603      	mov	r3, r0
 8010a74:	677b      	str	r3, [r7, #116]	; 0x74
		float minMagnitude = offset - magnitude;
 8010a76:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010a7a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010a7e:	f7ef ff91 	bl	80009a4 <__aeabi_fsub>
 8010a82:	4603      	mov	r3, r0
 8010a84:	673b      	str	r3, [r7, #112]	; 0x70
		int32_t phasetime = (phase * period) / 35999;
 8010a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010a8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010a8c:	fb02 f303 	mul.w	r3, r2, r3
 8010a90:	4a66      	ldr	r2, [pc, #408]	; (8010c2c <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x43c>)
 8010a92:	fba2 2303 	umull	r2, r3, r2, r3
 8010a96:	0b9b      	lsrs	r3, r3, #14
 8010a98:	66fb      	str	r3, [r7, #108]	; 0x6c
		uint32_t timeTemp = elapsed_time + phasetime;
 8010a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010aa0:	4413      	add	r3, r2
 8010aa2:	66bb      	str	r3, [r7, #104]	; 0x68
		float remainder = timeTemp % period;
 8010aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010aa6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010aa8:	fbb3 f2f2 	udiv	r2, r3, r2
 8010aac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010aae:	fb01 f202 	mul.w	r2, r1, r2
 8010ab2:	1a9b      	subs	r3, r3, r2
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7f0 f827 	bl	8000b08 <__aeabi_ui2f>
 8010aba:	4603      	mov	r3, r0
 8010abc:	667b      	str	r3, [r7, #100]	; 0x64
		float slope = (maxMagnitude - minMagnitude) / periodF;
 8010abe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010ac0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8010ac2:	f7ef ff6f 	bl	80009a4 <__aeabi_fsub>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7f0 f928 	bl	8000d20 <__aeabi_fdiv>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	663b      	str	r3, [r7, #96]	; 0x60
		force_vector = (int32_t)(minMagnitude + slope * (period - remainder));
 8010ad4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010ad6:	f7f0 f817 	bl	8000b08 <__aeabi_ui2f>
 8010ada:	4603      	mov	r3, r0
 8010adc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7ef ff60 	bl	80009a4 <__aeabi_fsub>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7f0 f865 	bl	8000bb8 <__aeabi_fmul>
 8010aee:	4603      	mov	r3, r0
 8010af0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ef ff58 	bl	80009a8 <__addsf3>
 8010af8:	4603      	mov	r3, r0
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7f0 fa22 	bl	8000f44 <__aeabi_f2iz>
 8010b00:	4603      	mov	r3, r0
 8010b02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		break;
 8010b06:	e102      	b.n	8010d0e <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x51e>
	}

	case FFB_EFFECT_SAWTOOTHDOWN:
	{
		float offset = effect->offset;
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7ef fffe 	bl	8000b10 <__aeabi_i2f>
 8010b14:	4603      	mov	r3, r0
 8010b16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		float magnitude = effect->magnitude;
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ef fff5 	bl	8000b10 <__aeabi_i2f>
 8010b26:	4603      	mov	r3, r0
 8010b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		uint32_t elapsed_time = HAL_GetTick() - effect->startTime;
 8010b2c:	f7f1 fb20 	bl	8002170 <HAL_GetTick>
 8010b30:	4602      	mov	r2, r0
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b36:	1ad3      	subs	r3, r2, r3
 8010b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		float phase = effect->phase;
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7ef ffe4 	bl	8000b10 <__aeabi_i2f>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		uint32_t period = effect->period;
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		float periodF = effect->period;
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7ef ffd4 	bl	8000b08 <__aeabi_ui2f>
 8010b60:	4603      	mov	r3, r0
 8010b62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		float maxMagnitude = offset + magnitude;
 8010b66:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8010b6a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010b6e:	f7ef ff1b 	bl	80009a8 <__addsf3>
 8010b72:	4603      	mov	r3, r0
 8010b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		float minMagnitude = offset - magnitude;
 8010b78:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8010b7c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010b80:	f7ef ff10 	bl	80009a4 <__aeabi_fsub>
 8010b84:	4603      	mov	r3, r0
 8010b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		int32_t phasetime = (phase * period) / 35999;
 8010b8a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8010b8e:	f7ef ffbb 	bl	8000b08 <__aeabi_ui2f>
 8010b92:	4603      	mov	r3, r0
 8010b94:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7f0 f80d 	bl	8000bb8 <__aeabi_fmul>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	4923      	ldr	r1, [pc, #140]	; (8010c30 <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x440>)
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7f0 f8bc 	bl	8000d20 <__aeabi_fdiv>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7f0 f9ca 	bl	8000f44 <__aeabi_f2iz>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		uint32_t timeTemp = elapsed_time + phasetime;
 8010bb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010bbe:	4413      	add	r3, r2
 8010bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		float remainder = timeTemp % period;
 8010bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010bcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8010bd0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8010bd4:	fb01 f202 	mul.w	r2, r1, r2
 8010bd8:	1a9b      	subs	r3, r3, r2
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7ef ff94 	bl	8000b08 <__aeabi_ui2f>
 8010be0:	4603      	mov	r3, r0
 8010be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		float slope = (maxMagnitude - minMagnitude) / periodF;
 8010be6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8010bea:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8010bee:	f7ef fed9 	bl	80009a4 <__aeabi_fsub>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7f0 f891 	bl	8000d20 <__aeabi_fdiv>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		force_vector = (int32_t)(minMagnitude + slope * (remainder)); // reverse time
 8010c04:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010c08:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8010c0c:	f7ef ffd4 	bl	8000bb8 <__aeabi_fmul>
 8010c10:	4603      	mov	r3, r0
 8010c12:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ef fec6 	bl	80009a8 <__addsf3>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7f0 f990 	bl	8000f44 <__aeabi_f2iz>
 8010c24:	4603      	mov	r3, r0
 8010c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		break;
 8010c2a:	e070      	b.n	8010d0e <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x51e>
 8010c2c:	7482fd85 	.word	0x7482fd85
 8010c30:	470c9f00 	.word	0x470c9f00
	}

	case FFB_EFFECT_SINE:
	{
		uint32_t t = HAL_GetTick() - effect->startTime;
 8010c34:	f7f1 fa9c 	bl	8002170 <HAL_GetTick>
 8010c38:	4602      	mov	r2, r0
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c3e:	1ad3      	subs	r3, r2, r3
 8010c40:	62fb      	str	r3, [r7, #44]	; 0x2c
		float freq = 1.0f / (float)(std::max<uint16_t>(effect->period, 2));
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	332e      	adds	r3, #46	; 0x2e
 8010c46:	2202      	movs	r2, #2
 8010c48:	817a      	strh	r2, [r7, #10]
 8010c4a:	f107 020a 	add.w	r2, r7, #10
 8010c4e:	4611      	mov	r1, r2
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7ff fdb9 	bl	80107c8 <_ZSt3maxItERKT_S2_S2_>
 8010c56:	4603      	mov	r3, r0
 8010c58:	881b      	ldrh	r3, [r3, #0]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7ef ff54 	bl	8000b08 <__aeabi_ui2f>
 8010c60:	4603      	mov	r3, r0
 8010c62:	4619      	mov	r1, r3
 8010c64:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010c68:	f7f0 f85a 	bl	8000d20 <__aeabi_fdiv>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	62bb      	str	r3, [r7, #40]	; 0x28
		float phase = (float)effect->phase / (float)35999; //degrees
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7ef ff4a 	bl	8000b10 <__aeabi_i2f>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	4930      	ldr	r1, [pc, #192]	; (8010d40 <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x550>)
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7f0 f84d 	bl	8000d20 <__aeabi_fdiv>
 8010c86:	4603      	mov	r3, r0
 8010c88:	627b      	str	r3, [r7, #36]	; 0x24
		float sine = sinf(2.0 * (float)M_PI * (t * freq + phase)) * effect->magnitude;
 8010c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c8c:	f7ef ff3c 	bl	8000b08 <__aeabi_ui2f>
 8010c90:	4603      	mov	r3, r0
 8010c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7ef ff8f 	bl	8000bb8 <__aeabi_fmul>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7ef fe82 	bl	80009a8 <__addsf3>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7ef fbbe 	bl	8000428 <__aeabi_f2d>
 8010cac:	a322      	add	r3, pc, #136	; (adr r3, 8010d38 <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x548>)
 8010cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb2:	f7ef fc11 	bl	80004d8 <__aeabi_dmul>
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	460b      	mov	r3, r1
 8010cba:	4610      	mov	r0, r2
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	f7ef fe1d 	bl	80008fc <__aeabi_d2f>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f004 ff4d 	bl	8015b64 <sinf>
 8010cca:	4604      	mov	r4, r0
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7ef ff1c 	bl	8000b10 <__aeabi_i2f>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	4619      	mov	r1, r3
 8010cdc:	4620      	mov	r0, r4
 8010cde:	f7ef ff6b 	bl	8000bb8 <__aeabi_fmul>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	623b      	str	r3, [r7, #32]
		force_vector = (int32_t)(effect->offset + sine);
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7ef ff0f 	bl	8000b10 <__aeabi_i2f>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	6a39      	ldr	r1, [r7, #32]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7ef fe56 	bl	80009a8 <__addsf3>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7f0 f920 	bl	8000f44 <__aeabi_f2iz>
 8010d04:	4603      	mov	r3, r0
 8010d06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		break;
 8010d0a:	e000      	b.n	8010d0e <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x51e>
	}
	default:
		break;
 8010d0c:	bf00      	nop
	}
	if(effect->useEnvelope) {
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d007      	beq.n	8010d28 <_ZN6HidFFB27calcNonConditionEffectForceEP10FFB_Effect+0x538>
		force_vector = applyEnvelope(effect, (int32_t)force_vector);
 8010d18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010d1c:	6839      	ldr	r1, [r7, #0]
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f000 f810 	bl	8010d44 <_ZN6HidFFB13applyEnvelopeEP10FFB_Effectl>
 8010d24:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	}
	return force_vector;
 8010d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	37cc      	adds	r7, #204	; 0xcc
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd90      	pop	{r4, r7, pc}
 8010d34:	f3af 8000 	nop.w
 8010d38:	60000000 	.word	0x60000000
 8010d3c:	401921fb 	.word	0x401921fb
 8010d40:	470c9f00 	.word	0x470c9f00

08010d44 <_ZN6HidFFB13applyEnvelopeEP10FFB_Effectl>:

int32_t HidFFB::applyEnvelope(FFB_Effect *effect, int32_t value)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b08a      	sub	sp, #40	; 0x28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
	int32_t magnitude = (effect->magnitude);
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010d56:	623b      	str	r3, [r7, #32]
	int32_t attackLevel = (effect->attackLevel);
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010d5c:	61fb      	str	r3, [r7, #28]
	int32_t fadeLevel = (effect->fadeLevel);
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010d62:	61bb      	str	r3, [r7, #24]
	int32_t newValue = magnitude;
 8010d64:	6a3b      	ldr	r3, [r7, #32]
 8010d66:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t elapsed_time = HAL_GetTick() - effect->startTime;
 8010d68:	f7f1 fa02 	bl	8002170 <HAL_GetTick>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d72:	1ad3      	subs	r3, r2, r3
 8010d74:	617b      	str	r3, [r7, #20]
	if (elapsed_time < effect->attackTime)
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d212      	bcs.n	8010da6 <_ZN6HidFFB13applyEnvelopeEP10FFB_Effectl+0x62>
	{
		newValue = (magnitude - attackLevel) * elapsed_time;
 8010d80:	6a3a      	ldr	r2, [r7, #32]
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	1ad3      	subs	r3, r2, r3
 8010d86:	461a      	mov	r2, r3
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	fb03 f302 	mul.w	r3, r3, r2
 8010d8e:	627b      	str	r3, [r7, #36]	; 0x24
		newValue /= (int32_t)effect->attackTime;
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d94:	461a      	mov	r2, r3
 8010d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d98:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d9c:	627b      	str	r3, [r7, #36]	; 0x24
		newValue += attackLevel;
 8010d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	4413      	add	r3, r2
 8010da4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (effect->duration != 0xffff &&
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d01d      	beq.n	8010dee <_ZN6HidFFB13applyEnvelopeEP10FFB_Effectl+0xaa>
		elapsed_time > (effect->duration - effect->fadeTime))
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dba:	1ad3      	subs	r3, r2, r3
	if (effect->duration != 0xffff &&
 8010dbc:	697a      	ldr	r2, [r7, #20]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d915      	bls.n	8010dee <_ZN6HidFFB13applyEnvelopeEP10FFB_Effectl+0xaa>
	{
		newValue = (magnitude - fadeLevel) * (effect->duration - elapsed_time);
 8010dc2:	6a3a      	ldr	r2, [r7, #32]
 8010dc4:	69bb      	ldr	r3, [r7, #24]
 8010dc6:	1ad3      	subs	r3, r2, r3
 8010dc8:	4619      	mov	r1, r3
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	1ad3      	subs	r3, r2, r3
 8010dd2:	fb03 f301 	mul.w	r3, r3, r1
 8010dd6:	627b      	str	r3, [r7, #36]	; 0x24
		newValue /= (int32_t)effect->fadeTime;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ddc:	461a      	mov	r2, r3
 8010dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010de4:	627b      	str	r3, [r7, #36]	; 0x24
		newValue += fadeLevel;
 8010de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	4413      	add	r3, r2
 8010dec:	627b      	str	r3, [r7, #36]	; 0x24
	}

	newValue *= value;
 8010dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	fb02 f303 	mul.w	r3, r2, r3
 8010df6:	627b      	str	r3, [r7, #36]	; 0x24
	newValue /= 0x7fff; // 16 bit
 8010df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfa:	4a06      	ldr	r2, [pc, #24]	; (8010e14 <_ZN6HidFFB13applyEnvelopeEP10FFB_Effectl+0xd0>)
 8010dfc:	fb82 1203 	smull	r1, r2, r2, r3
 8010e00:	441a      	add	r2, r3
 8010e02:	1392      	asrs	r2, r2, #14
 8010e04:	17db      	asrs	r3, r3, #31
 8010e06:	1ad3      	subs	r3, r2, r3
 8010e08:	627b      	str	r3, [r7, #36]	; 0x24
	return newValue;
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3728      	adds	r7, #40	; 0x28
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	80010003 	.word	0x80010003

08010e18 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal>:

int32_t HidFFB::calcComponentForce(FFB_Effect *effect, int32_t forceVector, EncoderLocal* encoder)
{
 8010e18:	b590      	push	{r4, r7, lr}
 8010e1a:	b095      	sub	sp, #84	; 0x54
 8010e1c:	af04      	add	r7, sp, #16
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	607a      	str	r2, [r7, #4]
 8010e24:	603b      	str	r3, [r7, #0]
	int32_t result_torque = 0;
 8010e26:	2300      	movs	r3, #0
 8010e28:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t direction;
	uint8_t axis = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t axisCount = 1;
 8010e30:	2301      	movs	r3, #1
 8010e32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t con_idx = 0; // condition block index
 8010e36:	2300      	movs	r3, #0
 8010e38:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

	if (effect->enableAxis == DIRECTION_ENABLE)
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	7b1b      	ldrb	r3, [r3, #12]
 8010e40:	2b04      	cmp	r3, #4
 8010e42:	d10b      	bne.n	8010e5c <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x44>
	{
		direction = effect->directionX;
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	89db      	ldrh	r3, [r3, #14]
 8010e48:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (effect->conditionsCount > 1)
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	7c9b      	ldrb	r3, [r3, #18]
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	d912      	bls.n	8010e78 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x60>
		{
			con_idx = axis;
 8010e52:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e56:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010e5a:	e00d      	b.n	8010e78 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x60>
		}
	}
	else
	{
		direction = axis == 0 ? effect->directionX : effect->directionY;
 8010e5c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d102      	bne.n	8010e6a <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x52>
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	89db      	ldrh	r3, [r3, #14]
 8010e68:	e001      	b.n	8010e6e <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x56>
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	8a1b      	ldrh	r3, [r3, #16]
 8010e6e:	877b      	strh	r3, [r7, #58]	; 0x3a
		con_idx = axis;
 8010e70:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e74:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	}

	//bool useForceDirectionForConditionEffect = (effect->enableAxis == DIRECTION_ENABLE && axisCount > 1 && effect->conditionsCount == 1);
	bool rotateConditionForce = (axisCount > 1 && effect->conditionsCount < axisCount);
 8010e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d907      	bls.n	8010e90 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x78>
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	7c9b      	ldrb	r3, [r3, #18]
 8010e84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d901      	bls.n	8010e90 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x78>
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e000      	b.n	8010e92 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x7a>
 8010e90:	2300      	movs	r3, #0
 8010e92:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	float angle = ((float)direction * (2*M_PI) / 36000.0);
 8010e96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7ef fe35 	bl	8000b08 <__aeabi_ui2f>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ef fac1 	bl	8000428 <__aeabi_f2d>
 8010ea6:	a396      	add	r3, pc, #600	; (adr r3, 8011100 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2e8>)
 8010ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eac:	f7ef fb14 	bl	80004d8 <__aeabi_dmul>
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	4610      	mov	r0, r2
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	a393      	add	r3, pc, #588	; (adr r3, 8011108 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2f0>)
 8010eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebe:	f7ef fc35 	bl	800072c <__aeabi_ddiv>
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	4610      	mov	r0, r2
 8010ec8:	4619      	mov	r1, r3
 8010eca:	f7ef fd17 	bl	80008fc <__aeabi_d2f>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	633b      	str	r3, [r7, #48]	; 0x30
	float angle_ratio = axis == 0 ? sin(angle) : -1 * cos(angle);
 8010ed2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d104      	bne.n	8010ee4 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0xcc>
 8010eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010edc:	f7fe ff30 	bl	800fd40 <_ZSt3sinf>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	e005      	b.n	8010ef0 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0xd8>
 8010ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ee6:	f7fe ff1f 	bl	800fd28 <_ZSt3cosf>
 8010eea:	4603      	mov	r3, r0
 8010eec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8010ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	angle_ratio = rotateConditionForce ? angle_ratio : 1.0;
 8010ef2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0xe6>
 8010efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efc:	e001      	b.n	8010f02 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0xea>
 8010efe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010f02:	62fb      	str	r3, [r7, #44]	; 0x2c

	switch (effect->type)
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	785b      	ldrb	r3, [r3, #1]
 8010f08:	3b01      	subs	r3, #1
 8010f0a:	2b0a      	cmp	r3, #10
 8010f0c:	f200 80ea 	bhi.w	80110e4 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2cc>
 8010f10:	a201      	add	r2, pc, #4	; (adr r2, 8010f18 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x100>)
 8010f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f16:	bf00      	nop
 8010f18:	08010f45 	.word	0x08010f45
 8010f1c:	08010f45 	.word	0x08010f45
 8010f20:	08010f45 	.word	0x08010f45
 8010f24:	08010f45 	.word	0x08010f45
 8010f28:	08010f45 	.word	0x08010f45
 8010f2c:	08010f45 	.word	0x08010f45
 8010f30:	08010f45 	.word	0x08010f45
 8010f34:	08010f67 	.word	0x08010f67
 8010f38:	08011059 	.word	0x08011059
 8010f3c:	080110a3 	.word	0x080110a3
 8010f40:	08011005 	.word	0x08011005
	case FFB_EFFECT_TRIANGLE:
	case FFB_EFFECT_SAWTOOTHUP:
	case FFB_EFFECT_SAWTOOTHDOWN:
	case FFB_EFFECT_SINE:
	{
		result_torque = -forceVector * angle_ratio;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	425b      	negs	r3, r3
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7ef fde1 	bl	8000b10 <__aeabi_i2f>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7ef fe30 	bl	8000bb8 <__aeabi_fmul>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7ef fff2 	bl	8000f44 <__aeabi_f2iz>
 8010f60:	4603      	mov	r3, r0
 8010f62:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8010f64:	e0bf      	b.n	80110e6 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2ce>
	}
	case FFB_EFFECT_SPRING:
	{
		int32_t pos = encoder->currentPosition;
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	695b      	ldr	r3, [r3, #20]
 8010f6a:	61fb      	str	r3, [r7, #28]
		int16_t offset = effect->conditions[con_idx].cpOffset;
 8010f6c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8010f70:	68b9      	ldr	r1, [r7, #8]
 8010f72:	4613      	mov	r3, r2
 8010f74:	005b      	lsls	r3, r3, #1
 8010f76:	4413      	add	r3, r2
 8010f78:	009b      	lsls	r3, r3, #2
 8010f7a:	440b      	add	r3, r1
 8010f7c:	3310      	adds	r3, #16
 8010f7e:	78da      	ldrb	r2, [r3, #3]
 8010f80:	791b      	ldrb	r3, [r3, #4]
 8010f82:	021b      	lsls	r3, r3, #8
 8010f84:	4313      	orrs	r3, r2
 8010f86:	041b      	lsls	r3, r3, #16
 8010f88:	141b      	asrs	r3, r3, #16
 8010f8a:	837b      	strh	r3, [r7, #26]
		int16_t deadBand = effect->conditions[con_idx].deadBand;
 8010f8c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8010f90:	68b9      	ldr	r1, [r7, #8]
 8010f92:	4613      	mov	r3, r2
 8010f94:	005b      	lsls	r3, r3, #1
 8010f96:	4413      	add	r3, r2
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	440b      	add	r3, r1
 8010f9c:	3318      	adds	r3, #24
 8010f9e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	833b      	strh	r3, [r7, #24]
		// Spring effect must also use deadband and offset so that it begins gradually from the sides of the deadband
		float metric = encoder->currentPosition - (offset + (deadBand * (pos < offset ? -1 : 1)) );
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	695a      	ldr	r2, [r3, #20]
 8010faa:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8010fae:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8010fb2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010fb6:	69fc      	ldr	r4, [r7, #28]
 8010fb8:	429c      	cmp	r4, r3
 8010fba:	da02      	bge.n	8010fc2 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x1aa>
 8010fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010fc0:	e000      	b.n	8010fc4 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x1ac>
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	fb00 f303 	mul.w	r3, r0, r3
 8010fc8:	440b      	add	r3, r1
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7ef fd9f 	bl	8000b10 <__aeabi_i2f>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	617b      	str	r3, [r7, #20]
		result_torque -= calcConditionEffectForce(effect, metric, conf->springGain, pos,
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	69db      	ldr	r3, [r3, #28]
 8010fda:	7b9a      	ldrb	r2, [r3, #14]
 8010fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fde:	9303      	str	r3, [sp, #12]
 8010fe0:	4b4b      	ldr	r3, [pc, #300]	; (8011110 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2f8>)
 8010fe2:	9302      	str	r3, [sp, #8]
 8010fe4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010fe8:	9301      	str	r3, [sp, #4]
 8010fea:	69fb      	ldr	r3, [r7, #28]
 8010fec:	9300      	str	r3, [sp, #0]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	697a      	ldr	r2, [r7, #20]
 8010ff2:	68b9      	ldr	r1, [r7, #8]
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f000 f893 	bl	8011120 <_ZN6HidFFB24calcConditionEffectForceEP10FFB_Effectfhlhff>
 8010ffa:	4602      	mov	r2, r0
 8010ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ffe:	1a9b      	subs	r3, r3, r2
 8011000:	63fb      	str	r3, [r7, #60]	; 0x3c
									   con_idx, 0.0004f, angle_ratio);
		break;
 8011002:	e070      	b.n	80110e6 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2ce>
	}
	case FFB_EFFECT_FRICTION:
	{
		float metric = /*frictionFilter.process(encoder->currentSpeed)*/encoder->currentSpeed * .25;
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	69db      	ldr	r3, [r3, #28]
 8011008:	4618      	mov	r0, r3
 801100a:	f7ef f9fb 	bl	8000404 <__aeabi_i2d>
 801100e:	f04f 0200 	mov.w	r2, #0
 8011012:	4b40      	ldr	r3, [pc, #256]	; (8011114 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2fc>)
 8011014:	f7ef fa60 	bl	80004d8 <__aeabi_dmul>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	4610      	mov	r0, r2
 801101e:	4619      	mov	r1, r3
 8011020:	f7ef fc6c 	bl	80008fc <__aeabi_d2f>
 8011024:	4603      	mov	r3, r0
 8011026:	62bb      	str	r3, [r7, #40]	; 0x28
		result_torque -= calcConditionEffectForce(effect, metric, conf->frictionGain, encoder->currentPosition,
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	69db      	ldr	r3, [r3, #28]
 801102c:	7c59      	ldrb	r1, [r3, #17]
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	695b      	ldr	r3, [r3, #20]
 8011032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011034:	9203      	str	r2, [sp, #12]
 8011036:	4a38      	ldr	r2, [pc, #224]	; (8011118 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x300>)
 8011038:	9202      	str	r2, [sp, #8]
 801103a:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 801103e:	9201      	str	r2, [sp, #4]
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	460b      	mov	r3, r1
 8011044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011046:	68b9      	ldr	r1, [r7, #8]
 8011048:	68f8      	ldr	r0, [r7, #12]
 801104a:	f000 f869 	bl	8011120 <_ZN6HidFFB24calcConditionEffectForceEP10FFB_Effectfhlhff>
 801104e:	4602      	mov	r2, r0
 8011050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011052:	1a9b      	subs	r3, r3, r2
 8011054:	63fb      	str	r3, [r7, #60]	; 0x3c
											   con_idx, .08f, angle_ratio);
		break;
 8011056:	e046      	b.n	80110e6 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2ce>
	}
	case FFB_EFFECT_DAMPER:
	{
		float metric = /*damperFilter.process(encoder->currentSpeed)*/ encoder->currentSpeed * .0625f;
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	69db      	ldr	r3, [r3, #28]
 801105c:	4618      	mov	r0, r3
 801105e:	f7ef fd57 	bl	8000b10 <__aeabi_i2f>
 8011062:	4603      	mov	r3, r0
 8011064:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8011068:	4618      	mov	r0, r3
 801106a:	f7ef fda5 	bl	8000bb8 <__aeabi_fmul>
 801106e:	4603      	mov	r3, r0
 8011070:	623b      	str	r3, [r7, #32]
		result_torque -= calcConditionEffectForce(effect, metric,  conf->damperGain, encoder->currentPosition,
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	69db      	ldr	r3, [r3, #28]
 8011076:	7bd9      	ldrb	r1, [r3, #15]
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	695b      	ldr	r3, [r3, #20]
 801107c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801107e:	9203      	str	r2, [sp, #12]
 8011080:	4a26      	ldr	r2, [pc, #152]	; (801111c <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x304>)
 8011082:	9202      	str	r2, [sp, #8]
 8011084:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8011088:	9201      	str	r2, [sp, #4]
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	460b      	mov	r3, r1
 801108e:	6a3a      	ldr	r2, [r7, #32]
 8011090:	68b9      	ldr	r1, [r7, #8]
 8011092:	68f8      	ldr	r0, [r7, #12]
 8011094:	f000 f844 	bl	8011120 <_ZN6HidFFB24calcConditionEffectForceEP10FFB_Effectfhlhff>
 8011098:	4602      	mov	r2, r0
 801109a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801109c:	1a9b      	subs	r3, r3, r2
 801109e:	63fb      	str	r3, [r7, #60]	; 0x3c
									   con_idx, 0.6f, angle_ratio);
		break;
 80110a0:	e021      	b.n	80110e6 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2ce>
	}
	case FFB_EFFECT_INERTIA:
	{
		float metric = /*interiaFilter.process(encoder->currentAcceleration*4)*/ encoder->currentAcceleration*4;
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ef fd31 	bl	8000b10 <__aeabi_i2f>
 80110ae:	4603      	mov	r3, r0
 80110b0:	627b      	str	r3, [r7, #36]	; 0x24
		result_torque -= calcConditionEffectForce(effect, metric,conf->inertiaGain, encoder->currentPosition,
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	69db      	ldr	r3, [r3, #28]
 80110b6:	7c19      	ldrb	r1, [r3, #16]
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	695b      	ldr	r3, [r3, #20]
 80110bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110be:	9203      	str	r2, [sp, #12]
 80110c0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80110c4:	9202      	str	r2, [sp, #8]
 80110c6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80110ca:	9201      	str	r2, [sp, #4]
 80110cc:	9300      	str	r3, [sp, #0]
 80110ce:	460b      	mov	r3, r1
 80110d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110d2:	68b9      	ldr	r1, [r7, #8]
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f000 f823 	bl	8011120 <_ZN6HidFFB24calcConditionEffectForceEP10FFB_Effectfhlhff>
 80110da:	4602      	mov	r2, r0
 80110dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110de:	1a9b      	subs	r3, r3, r2
 80110e0:	63fb      	str	r3, [r7, #60]	; 0x3c
									   con_idx, 0.5f, angle_ratio);
		break;
 80110e2:	e000      	b.n	80110e6 <_ZN6HidFFB18calcComponentForceEP10FFB_EffectlP12EncoderLocal+0x2ce>
	}

	default:
		// Unsupported effect
		break;
 80110e4:	bf00      	nop
	}
	return (result_torque * (gain+1)) >> 8; // Apply global gain
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	7c1b      	ldrb	r3, [r3, #16]
 80110ea:	3301      	adds	r3, #1
 80110ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110ee:	fb02 f303 	mul.w	r3, r2, r3
 80110f2:	121b      	asrs	r3, r3, #8
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3744      	adds	r7, #68	; 0x44
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd90      	pop	{r4, r7, pc}
 80110fc:	f3af 8000 	nop.w
 8011100:	54442d18 	.word	0x54442d18
 8011104:	401921fb 	.word	0x401921fb
 8011108:	00000000 	.word	0x00000000
 801110c:	40e19400 	.word	0x40e19400
 8011110:	39d1b717 	.word	0x39d1b717
 8011114:	3fd00000 	.word	0x3fd00000
 8011118:	3da3d70a 	.word	0x3da3d70a
 801111c:	3f19999a 	.word	0x3f19999a

08011120 <_ZN6HidFFB24calcConditionEffectForceEP10FFB_Effectfhlhff>:

int32_t HidFFB::calcConditionEffectForce(FFB_Effect *effect, float  metric, uint8_t gain,int32_t pos,
										 uint8_t idx, float scale, float angle_ratio)
{
 8011120:	b590      	push	{r4, r7, lr}
 8011122:	b087      	sub	sp, #28
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]
 801112c:	70fb      	strb	r3, [r7, #3]
	int16_t offset = effect->conditions[idx].cpOffset;
 801112e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011132:	68b9      	ldr	r1, [r7, #8]
 8011134:	4613      	mov	r3, r2
 8011136:	005b      	lsls	r3, r3, #1
 8011138:	4413      	add	r3, r2
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	440b      	add	r3, r1
 801113e:	3310      	adds	r3, #16
 8011140:	78da      	ldrb	r2, [r3, #3]
 8011142:	791b      	ldrb	r3, [r3, #4]
 8011144:	021b      	lsls	r3, r3, #8
 8011146:	4313      	orrs	r3, r2
 8011148:	041b      	lsls	r3, r3, #16
 801114a:	141b      	asrs	r3, r3, #16
 801114c:	827b      	strh	r3, [r7, #18]
	int16_t deadBand = effect->conditions[idx].deadBand;
 801114e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011152:	68b9      	ldr	r1, [r7, #8]
 8011154:	4613      	mov	r3, r2
 8011156:	005b      	lsls	r3, r3, #1
 8011158:	4413      	add	r3, r2
 801115a:	009b      	lsls	r3, r3, #2
 801115c:	440b      	add	r3, r1
 801115e:	3318      	adds	r3, #24
 8011160:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8011164:	b29b      	uxth	r3, r3
 8011166:	823b      	strh	r3, [r7, #16]
	int32_t force = 0;
 8011168:	2300      	movs	r3, #0
 801116a:	617b      	str	r3, [r7, #20]
	// Effect is only active outside deadband + offset
	if (abs(pos - offset) > deadBand){
 801116c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	4618      	mov	r0, r3
 8011176:	f7fc fbcb 	bl	800d910 <_ZSt3absl>
 801117a:	4602      	mov	r2, r0
 801117c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011180:	429a      	cmp	r2, r3
 8011182:	bfcc      	ite	gt
 8011184:	2301      	movgt	r3, #1
 8011186:	2300      	movle	r3, #0
 8011188:	b2db      	uxtb	r3, r3
 801118a:	2b00      	cmp	r3, #0
 801118c:	d03c      	beq.n	8011208 <_ZN6HidFFB24calcConditionEffectForceEP10FFB_Effectfhlhff+0xe8>
		force = clip<int32_t, int32_t>(((float)effect->conditions[idx].negativeCoefficient *
 801118e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011192:	68b9      	ldr	r1, [r7, #8]
 8011194:	4613      	mov	r3, r2
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	4413      	add	r3, r2
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	440b      	add	r3, r1
 801119e:	3310      	adds	r3, #16
 80111a0:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 80111a4:	b21b      	sxth	r3, r3
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7ef fcb2 	bl	8000b10 <__aeabi_i2f>
 80111ac:	4603      	mov	r3, r0
 80111ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7ef fd01 	bl	8000bb8 <__aeabi_fmul>
 80111b6:	4603      	mov	r3, r0
											scale * (float)(metric)),
 80111b8:	6879      	ldr	r1, [r7, #4]
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7ef fcfc 	bl	8000bb8 <__aeabi_fmul>
 80111c0:	4603      	mov	r3, r0
		force = clip<int32_t, int32_t>(((float)effect->conditions[idx].negativeCoefficient *
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ef febe 	bl	8000f44 <__aeabi_f2iz>
 80111c8:	4604      	mov	r4, r0
										   -effect->conditions[idx].negativeSaturation,
 80111ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80111ce:	68b9      	ldr	r1, [r7, #8]
 80111d0:	4613      	mov	r3, r2
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	4413      	add	r3, r2
 80111d6:	009b      	lsls	r3, r3, #2
 80111d8:	440b      	add	r3, r1
 80111da:	3318      	adds	r3, #24
 80111dc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	4258      	negs	r0, r3
										   effect->conditions[idx].positiveSaturation);
 80111e4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80111e8:	68b9      	ldr	r1, [r7, #8]
 80111ea:	4613      	mov	r3, r2
 80111ec:	005b      	lsls	r3, r3, #1
 80111ee:	4413      	add	r3, r2
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	440b      	add	r3, r1
 80111f4:	3310      	adds	r3, #16
 80111f6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80111fa:	b29b      	uxth	r3, r3
		force = clip<int32_t, int32_t>(((float)effect->conditions[idx].negativeCoefficient *
 80111fc:	461a      	mov	r2, r3
 80111fe:	4601      	mov	r1, r0
 8011200:	4620      	mov	r0, r4
 8011202:	f7fd fa05 	bl	800e610 <_Z4clipIllET_S0_T0_S1_>
 8011206:	6178      	str	r0, [r7, #20]
	}

	force = ((gain+1) * force) >> 8;
 8011208:	78fb      	ldrb	r3, [r7, #3]
 801120a:	3301      	adds	r3, #1
 801120c:	697a      	ldr	r2, [r7, #20]
 801120e:	fb02 f303 	mul.w	r3, r2, r3
 8011212:	121b      	asrs	r3, r3, #8
 8011214:	617b      	str	r3, [r7, #20]
	return force * angle_ratio;
 8011216:	6978      	ldr	r0, [r7, #20]
 8011218:	f7ef fc7a 	bl	8000b10 <__aeabi_i2f>
 801121c:	4603      	mov	r3, r0
 801121e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011220:	4618      	mov	r0, r3
 8011222:	f7ef fcc9 	bl	8000bb8 <__aeabi_fmul>
 8011226:	4603      	mov	r3, r0
 8011228:	4618      	mov	r0, r3
 801122a:	f7ef fe8b 	bl	8000f44 <__aeabi_f2iz>
 801122e:	4603      	mov	r3, r0
}
 8011230:	4618      	mov	r0, r3
 8011232:	371c      	adds	r7, #28
 8011234:	46bd      	mov	sp, r7
 8011236:	bd90      	pop	{r4, r7, pc}

08011238 <_ZN6HidFFB10set_configEP14FFBWheelConfig>:

void HidFFB::set_config(FFBWheelConfig *conf)
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
	this->conf = conf;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	683a      	ldr	r2, [r7, #0]
 8011246:	61da      	str	r2, [r3, #28]
}
 8011248:	bf00      	nop
 801124a:	370c      	adds	r7, #12
 801124c:	46bd      	mov	sp, r7
 801124e:	bc80      	pop	{r7}
 8011250:	4770      	bx	lr

08011252 <_ZSt4moveIR10FFB_EffectEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8011252:	b480      	push	{r7}
 8011254:	b083      	sub	sp, #12
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4618      	mov	r0, r3
 801125e:	370c      	adds	r7, #12
 8011260:	46bd      	mov	sp, r7
 8011262:	bc80      	pop	{r7}
 8011264:	4770      	bx	lr

08011266 <_Z4clipImmET_S0_T0_S1_>:
T clip(T v, C l, C h)
 8011266:	b480      	push	{r7}
 8011268:	b085      	sub	sp, #20
 801126a:	af00      	add	r7, sp, #0
 801126c:	60f8      	str	r0, [r7, #12]
 801126e:	60b9      	str	r1, [r7, #8]
 8011270:	607a      	str	r2, [r7, #4]
  return { v > h ? h : v < l ? l : v };
 8011272:	68fa      	ldr	r2, [r7, #12]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	429a      	cmp	r2, r3
 8011278:	d807      	bhi.n	801128a <_Z4clipImmET_S0_T0_S1_+0x24>
 801127a:	68fa      	ldr	r2, [r7, #12]
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	429a      	cmp	r2, r3
 8011280:	d201      	bcs.n	8011286 <_Z4clipImmET_S0_T0_S1_+0x20>
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	e002      	b.n	801128c <_Z4clipImmET_S0_T0_S1_+0x26>
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	e000      	b.n	801128c <_Z4clipImmET_S0_T0_S1_+0x26>
 801128a:	687b      	ldr	r3, [r7, #4]
}
 801128c:	4618      	mov	r0, r3
 801128e:	3714      	adds	r7, #20
 8011290:	46bd      	mov	sp, r7
 8011292:	bc80      	pop	{r7}
 8011294:	4770      	bx	lr
	...

08011298 <_ZN12MotorBTS79604turnEs>:
#include <MotorBTS7960.h>

void MotorBTS7960::turn(int16_t power){
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	460b      	mov	r3, r1
 80112a2:	807b      	strh	r3, [r7, #2]
	if(!active)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	7a1b      	ldrb	r3, [r3, #8]
 80112a8:	f083 0301 	eor.w	r3, r3, #1
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d12c      	bne.n	801130c <_ZN12MotorBTS79604turnEs+0x74>
		return;

	int32_t val = (uint32_t)((abs(power) * period)/0x7fff);
 80112b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	bfb8      	it	lt
 80112ba:	425b      	neglt	r3, r3
 80112bc:	b29b      	uxth	r3, r3
 80112be:	461a      	mov	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	fb03 f202 	mul.w	r2, r3, r2
 80112c8:	4b13      	ldr	r3, [pc, #76]	; (8011318 <_ZN12MotorBTS79604turnEs+0x80>)
 80112ca:	fba3 1302 	umull	r1, r3, r3, r2
 80112ce:	1ad2      	subs	r2, r2, r3
 80112d0:	0852      	lsrs	r2, r2, #1
 80112d2:	4413      	add	r3, r2
 80112d4:	0b9b      	lsrs	r3, r3, #14
 80112d6:	60fb      	str	r3, [r7, #12]

	if(power < 0){
 80112d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	da0a      	bge.n	80112f6 <_ZN12MotorBTS79604turnEs+0x5e>
		timer->Instance->CCR1 = 0;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	695b      	ldr	r3, [r3, #20]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2200      	movs	r2, #0
 80112e8:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR2 = val;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	695b      	ldr	r3, [r3, #20]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	639a      	str	r2, [r3, #56]	; 0x38
 80112f4:	e00b      	b.n	801130e <_ZN12MotorBTS79604turnEs+0x76>
	}else{
		timer->Instance->CCR1 = val;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	695b      	ldr	r3, [r3, #20]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	68fa      	ldr	r2, [r7, #12]
 80112fe:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR2 = 0;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	695b      	ldr	r3, [r3, #20]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	2200      	movs	r2, #0
 8011308:	639a      	str	r2, [r3, #56]	; 0x38
 801130a:	e000      	b.n	801130e <_ZN12MotorBTS79604turnEs+0x76>
		return;
 801130c:	bf00      	nop
	}

}
 801130e:	3714      	adds	r7, #20
 8011310:	46bd      	mov	sp, r7
 8011312:	bc80      	pop	{r7}
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop
 8011318:	00020005 	.word	0x00020005

0801131c <_ZN12MotorBTS7960C1Ev>:

MotorBTS7960::MotorBTS7960() {
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	4a18      	ldr	r2, [pc, #96]	; (8011388 <_ZN12MotorBTS7960C1Ev+0x6c>)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	601a      	str	r2, [r3, #0]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f640 620f 	movw	r2, #3599	; 0xe0f
 8011330:	605a      	str	r2, [r3, #4]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2200      	movs	r2, #0
 8011336:	721a      	strb	r2, [r3, #8]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	60da      	str	r2, [r3, #12]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2204      	movs	r2, #4
 8011342:	611a      	str	r2, [r3, #16]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4a11      	ldr	r2, [pc, #68]	; (801138c <_ZN12MotorBTS7960C1Ev+0x70>)
 8011348:	615a      	str	r2, [r3, #20]
	timer->Instance->CCR1 = 0;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	695b      	ldr	r3, [r3, #20]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2200      	movs	r2, #0
 8011352:	635a      	str	r2, [r3, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	695b      	ldr	r3, [r3, #20]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	2200      	movs	r2, #0
 801135c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(timer, channel1);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	695a      	ldr	r2, [r3, #20]
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	4619      	mov	r1, r3
 8011368:	4610      	mov	r0, r2
 801136a:	f7f5 fc23 	bl	8006bb4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, channel2);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	695a      	ldr	r2, [r3, #20]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	4619      	mov	r1, r3
 8011378:	4610      	mov	r0, r2
 801137a:	f7f5 fc1b 	bl	8006bb4 <HAL_TIM_PWM_Start>
}
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	4618      	mov	r0, r3
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	080177b0 	.word	0x080177b0
 801138c:	200012e0 	.word	0x200012e0

08011390 <_ZN12MotorBTS7960D1Ev>:

MotorBTS7960::~MotorBTS7960() {
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	4a0b      	ldr	r2, [pc, #44]	; (80113c8 <_ZN12MotorBTS7960D1Ev+0x38>)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(timer, channel1);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	695a      	ldr	r2, [r3, #20]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	4619      	mov	r1, r3
 80113a8:	4610      	mov	r0, r2
 80113aa:	f7f5 fc35 	bl	8006c18 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer, channel2);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	695a      	ldr	r2, [r3, #20]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	691b      	ldr	r3, [r3, #16]
 80113b6:	4619      	mov	r1, r3
 80113b8:	4610      	mov	r0, r2
 80113ba:	f7f5 fc2d 	bl	8006c18 <HAL_TIM_PWM_Stop>
}
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	4618      	mov	r0, r3
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	080177b0 	.word	0x080177b0

080113cc <_ZN12MotorBTS7960D0Ev>:
MotorBTS7960::~MotorBTS7960() {
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
}
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7ff ffdb 	bl	8011390 <_ZN12MotorBTS7960D1Ev>
 80113da:	2118      	movs	r1, #24
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f004 f84f 	bl	8015480 <_ZdlPvj>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4618      	mov	r0, r3
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <_ZN12MotorBTS79605startEv>:


void MotorBTS7960::start(){
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
	active = true;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2201      	movs	r2, #1
 80113f8:	721a      	strb	r2, [r3, #8]
}
 80113fa:	bf00      	nop
 80113fc:	370c      	adds	r7, #12
 80113fe:	46bd      	mov	sp, r7
 8011400:	bc80      	pop	{r7}
 8011402:	4770      	bx	lr

08011404 <_ZN12MotorBTS79604stopEv>:

void MotorBTS7960::stop(){
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
	active = false;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	721a      	strb	r2, [r3, #8]
	timer->Instance->CCR1 = 0;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	695b      	ldr	r3, [r3, #20]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2200      	movs	r2, #0
 801141a:	635a      	str	r2, [r3, #52]	; 0x34
	timer->Instance->CCR2 = 0;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	695b      	ldr	r3, [r3, #20]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	2200      	movs	r2, #0
 8011424:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011426:	bf00      	nop
 8011428:	370c      	adds	r7, #12
 801142a:	46bd      	mov	sp, r7
 801142c:	bc80      	pop	{r7}
 801142e:	4770      	bx	lr

08011430 <_ZN12TimerHandlerC1Ev>:
#include "TimerHandler.h"

TimerHandler::TimerHandler() {
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	4a07      	ldr	r2, [pc, #28]	; (8011458 <_ZN12TimerHandlerC1Ev+0x28>)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	601a      	str	r2, [r3, #0]
	extern std::vector<TimerHandler*> timerHandlers;
	timerHandlers.push_back(this);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	60fb      	str	r3, [r7, #12]
 8011442:	f107 030c 	add.w	r3, r7, #12
 8011446:	4619      	mov	r1, r3
 8011448:	4804      	ldr	r0, [pc, #16]	; (801145c <_ZN12TimerHandlerC1Ev+0x2c>)
 801144a:	f000 f86f 	bl	801152c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE9push_backEOS1_>

}
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4618      	mov	r0, r3
 8011452:	3710      	adds	r7, #16
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	080177c0 	.word	0x080177c0
 801145c:	200007b0 	.word	0x200007b0

08011460 <_ZN12TimerHandlerD1Ev>:

TimerHandler::~TimerHandler() {
 8011460:	b590      	push	{r4, r7, lr}
 8011462:	b087      	sub	sp, #28
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	4a21      	ldr	r2, [pc, #132]	; (80114f0 <_ZN12TimerHandlerD1Ev+0x90>)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	601a      	str	r2, [r3, #0]
	extern std::vector<TimerHandler*> timerHandlers;
	for (uint8_t i = 0; i < timerHandlers.size(); i++){
 801146e:	2300      	movs	r3, #0
 8011470:	75fb      	strb	r3, [r7, #23]
 8011472:	7dfc      	ldrb	r4, [r7, #23]
 8011474:	481f      	ldr	r0, [pc, #124]	; (80114f4 <_ZN12TimerHandlerD1Ev+0x94>)
 8011476:	f000 f86a 	bl	801154e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 801147a:	4603      	mov	r3, r0
 801147c:	429c      	cmp	r4, r3
 801147e:	bf34      	ite	cc
 8011480:	2301      	movcc	r3, #1
 8011482:	2300      	movcs	r3, #0
 8011484:	b2db      	uxtb	r3, r3
 8011486:	2b00      	cmp	r3, #0
 8011488:	d02d      	beq.n	80114e6 <_ZN12TimerHandlerD1Ev+0x86>
		if(timerHandlers[i] == this){
 801148a:	7dfb      	ldrb	r3, [r7, #23]
 801148c:	4619      	mov	r1, r3
 801148e:	4819      	ldr	r0, [pc, #100]	; (80114f4 <_ZN12TimerHandlerD1Ev+0x94>)
 8011490:	f000 f86c 	bl	801156c <_ZNSt6vectorIP12TimerHandlerSaIS1_EEixEj>
 8011494:	4603      	mov	r3, r0
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	429a      	cmp	r2, r3
 801149c:	bf0c      	ite	eq
 801149e:	2301      	moveq	r3, #1
 80114a0:	2300      	movne	r3, #0
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d01a      	beq.n	80114de <_ZN12TimerHandlerD1Ev+0x7e>
			timerHandlers.erase(timerHandlers.begin()+i);
 80114a8:	4812      	ldr	r0, [pc, #72]	; (80114f4 <_ZN12TimerHandlerD1Ev+0x94>)
 80114aa:	f000 f86e 	bl	801158a <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 80114ae:	4603      	mov	r3, r0
 80114b0:	613b      	str	r3, [r7, #16]
 80114b2:	7dfa      	ldrb	r2, [r7, #23]
 80114b4:	f107 0310 	add.w	r3, r7, #16
 80114b8:	4611      	mov	r1, r2
 80114ba:	4618      	mov	r0, r3
 80114bc:	f000 f875 	bl	80115aa <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 80114c0:	4603      	mov	r3, r0
 80114c2:	60fb      	str	r3, [r7, #12]
 80114c4:	f107 020c 	add.w	r2, r7, #12
 80114c8:	f107 0308 	add.w	r3, r7, #8
 80114cc:	4611      	mov	r1, r2
 80114ce:	4618      	mov	r0, r3
 80114d0:	f000 f883 	bl	80115da <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
 80114d4:	68b9      	ldr	r1, [r7, #8]
 80114d6:	4807      	ldr	r0, [pc, #28]	; (80114f4 <_ZN12TimerHandlerD1Ev+0x94>)
 80114d8:	f000 f890 	bl	80115fc <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>
			break;
 80114dc:	e003      	b.n	80114e6 <_ZN12TimerHandlerD1Ev+0x86>
	for (uint8_t i = 0; i < timerHandlers.size(); i++){
 80114de:	7dfb      	ldrb	r3, [r7, #23]
 80114e0:	3301      	adds	r3, #1
 80114e2:	75fb      	strb	r3, [r7, #23]
 80114e4:	e7c5      	b.n	8011472 <_ZN12TimerHandlerD1Ev+0x12>
		}
	}
}
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4618      	mov	r0, r3
 80114ea:	371c      	adds	r7, #28
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd90      	pop	{r4, r7, pc}
 80114f0:	080177c0 	.word	0x080177c0
 80114f4:	200007b0 	.word	0x200007b0

080114f8 <_ZN12TimerHandlerD0Ev>:
TimerHandler::~TimerHandler() {
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
}
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f7ff ffad 	bl	8011460 <_ZN12TimerHandlerD1Ev>
 8011506:	2104      	movs	r1, #4
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f003 ffb9 	bl	8015480 <_ZdlPvj>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	4618      	mov	r0, r3
 8011512:	3708      	adds	r7, #8
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <_ZN12TimerHandler12timerElapsedEP17TIM_HandleTypeDef>:

void TimerHandler::timerElapsed(TIM_HandleTypeDef* htim){
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]

}
 8011522:	bf00      	nop
 8011524:	370c      	adds	r7, #12
 8011526:	46bd      	mov	sp, r7
 8011528:	bc80      	pop	{r7}
 801152a:	4770      	bx	lr

0801152c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8011536:	6838      	ldr	r0, [r7, #0]
 8011538:	f000 f887 	bl	801164a <_ZSt4moveIRP12TimerHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 801153c:	4603      	mov	r3, r0
 801153e:	4619      	mov	r1, r3
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 f88c 	bl	801165e <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8011546:	bf00      	nop
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801154e:	b480      	push	{r7}
 8011550:	b083      	sub	sp, #12
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	685a      	ldr	r2, [r3, #4]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	1ad3      	subs	r3, r2, r3
 8011560:	109b      	asrs	r3, r3, #2
 8011562:	4618      	mov	r0, r3
 8011564:	370c      	adds	r7, #12
 8011566:	46bd      	mov	sp, r7
 8011568:	bc80      	pop	{r7}
 801156a:	4770      	bx	lr

0801156c <_ZNSt6vectorIP12TimerHandlerSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 801156c:	b480      	push	{r7}
 801156e:	b083      	sub	sp, #12
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	4413      	add	r3, r2
      }
 8011580:	4618      	mov	r0, r3
 8011582:	370c      	adds	r7, #12
 8011584:	46bd      	mov	sp, r7
 8011586:	bc80      	pop	{r7}
 8011588:	4770      	bx	lr

0801158a <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801158a:	b580      	push	{r7, lr}
 801158c:	b084      	sub	sp, #16
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8011592:	687a      	ldr	r2, [r7, #4]
 8011594:	f107 030c 	add.w	r3, r7, #12
 8011598:	4611      	mov	r1, r2
 801159a:	4618      	mov	r0, r3
 801159c:	f000 f88d 	bl	80116ba <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	4618      	mov	r0, r3
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b084      	sub	sp, #16
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	009b      	lsls	r3, r3, #2
 80115bc:	4413      	add	r3, r2
 80115be:	60fb      	str	r3, [r7, #12]
 80115c0:	f107 020c 	add.w	r2, r7, #12
 80115c4:	f107 0308 	add.w	r3, r7, #8
 80115c8:	4611      	mov	r1, r2
 80115ca:	4618      	mov	r0, r3
 80115cc:	f000 f875 	bl	80116ba <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	4618      	mov	r0, r3
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 80115da:	b580      	push	{r7, lr}
 80115dc:	b082      	sub	sp, #8
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
 80115e2:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 80115e4:	6838      	ldr	r0, [r7, #0]
 80115e6:	f000 f877 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80115ea:	4603      	mov	r3, r0
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	601a      	str	r2, [r3, #0]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	4618      	mov	r0, r3
 80115f6:	3708      	adds	r7, #8
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE>:
      erase(const_iterator __position)
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7ff ffbf 	bl	801158a <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 801160c:	4603      	mov	r3, r0
 801160e:	60bb      	str	r3, [r7, #8]
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f000 f86b 	bl	80116ec <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE6cbeginEv>
 8011616:	4603      	mov	r3, r0
 8011618:	60fb      	str	r3, [r7, #12]
 801161a:	f107 020c 	add.w	r2, r7, #12
 801161e:	463b      	mov	r3, r7
 8011620:	4611      	mov	r1, r2
 8011622:	4618      	mov	r0, r3
 8011624:	f000 f876 	bl	8011714 <_ZN9__gnu_cxxmiIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8011628:	4602      	mov	r2, r0
 801162a:	f107 0308 	add.w	r3, r7, #8
 801162e:	4611      	mov	r1, r2
 8011630:	4618      	mov	r0, r3
 8011632:	f7ff ffba 	bl	80115aa <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8011636:	4603      	mov	r3, r0
 8011638:	4619      	mov	r1, r3
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f000 f87f 	bl	801173e <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>
 8011640:	4603      	mov	r3, r0
 8011642:	4618      	mov	r0, r3
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <_ZSt4moveIRP12TimerHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801164a:	b480      	push	{r7}
 801164c:	b083      	sub	sp, #12
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	4618      	mov	r0, r3
 8011656:	370c      	adds	r7, #12
 8011658:	46bd      	mov	sp, r7
 801165a:	bc80      	pop	{r7}
 801165c:	4770      	bx	lr

0801165e <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801165e:	b5b0      	push	{r4, r5, r7, lr}
 8011660:	b082      	sub	sp, #8
 8011662:	af00      	add	r7, sp, #0
 8011664:	6078      	str	r0, [r7, #4]
 8011666:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	685a      	ldr	r2, [r3, #4]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	429a      	cmp	r2, r3
 8011672:	d011      	beq.n	8011698 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011674:	687c      	ldr	r4, [r7, #4]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	685d      	ldr	r5, [r3, #4]
 801167a:	6838      	ldr	r0, [r7, #0]
 801167c:	f000 f89b 	bl	80117b6 <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011680:	4603      	mov	r3, r0
 8011682:	461a      	mov	r2, r3
 8011684:	4629      	mov	r1, r5
 8011686:	4620      	mov	r0, r4
 8011688:	f000 f89f 	bl	80117ca <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	1d1a      	adds	r2, r3, #4
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	605a      	str	r2, [r3, #4]
      }
 8011696:	e00c      	b.n	80116b2 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f000 f8a9 	bl	80117f0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 801169e:	4604      	mov	r4, r0
 80116a0:	6838      	ldr	r0, [r7, #0]
 80116a2:	f000 f888 	bl	80117b6 <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 80116a6:	4603      	mov	r3, r0
 80116a8:	461a      	mov	r2, r3
 80116aa:	4621      	mov	r1, r4
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f000 f8c5 	bl	801183c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80116b2:	bf00      	nop
 80116b4:	3708      	adds	r7, #8
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bdb0      	pop	{r4, r5, r7, pc}

080116ba <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80116ba:	b480      	push	{r7}
 80116bc:	b083      	sub	sp, #12
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
 80116c2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	601a      	str	r2, [r3, #0]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	4618      	mov	r0, r3
 80116d0:	370c      	adds	r7, #12
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bc80      	pop	{r7}
 80116d6:	4770      	bx	lr

080116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	4618      	mov	r0, r3
 80116e4:	370c      	adds	r7, #12
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bc80      	pop	{r7}
 80116ea:	4770      	bx	lr

080116ec <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b084      	sub	sp, #16
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	60fb      	str	r3, [r7, #12]
 80116fa:	f107 020c 	add.w	r2, r7, #12
 80116fe:	f107 0308 	add.w	r3, r7, #8
 8011702:	4611      	mov	r1, r2
 8011704:	4618      	mov	r0, r3
 8011706:	f000 f955 	bl	80119b4 <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	4618      	mov	r0, r3
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <_ZN9__gnu_cxxmiIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011714:	b590      	push	{r4, r7, lr}
 8011716:	b083      	sub	sp, #12
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f000 f957 	bl	80119d2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011724:	4603      	mov	r3, r0
 8011726:	681c      	ldr	r4, [r3, #0]
 8011728:	6838      	ldr	r0, [r7, #0]
 801172a:	f000 f952 	bl	80119d2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 801172e:	4603      	mov	r3, r0
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	1ae3      	subs	r3, r4, r3
 8011734:	109b      	asrs	r3, r3, #2
 8011736:	4618      	mov	r0, r3
 8011738:	370c      	adds	r7, #12
 801173a:	46bd      	mov	sp, r7
 801173c:	bd90      	pop	{r4, r7, pc}

0801173e <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
    vector<_Tp, _Alloc>::
 801173e:	b590      	push	{r4, r7, lr}
 8011740:	b085      	sub	sp, #20
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
 8011746:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8011748:	463b      	mov	r3, r7
 801174a:	2101      	movs	r1, #1
 801174c:	4618      	mov	r0, r3
 801174e:	f7ff ff2c 	bl	80115aa <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8011752:	4603      	mov	r3, r0
 8011754:	60bb      	str	r3, [r7, #8]
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 f84a 	bl	80117f0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 801175c:	4603      	mov	r3, r0
 801175e:	60fb      	str	r3, [r7, #12]
 8011760:	f107 020c 	add.w	r2, r7, #12
 8011764:	f107 0308 	add.w	r3, r7, #8
 8011768:	4611      	mov	r1, r2
 801176a:	4618      	mov	r0, r3
 801176c:	f000 f93b 	bl	80119e6 <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8011770:	4603      	mov	r3, r0
 8011772:	2b00      	cmp	r3, #0
 8011774:	d00e      	beq.n	8011794 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8011776:	463b      	mov	r3, r7
 8011778:	2101      	movs	r1, #1
 801177a:	4618      	mov	r0, r3
 801177c:	f7ff ff15 	bl	80115aa <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8011780:	4604      	mov	r4, r0
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f000 f834 	bl	80117f0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 8011788:	4603      	mov	r3, r0
 801178a:	683a      	ldr	r2, [r7, #0]
 801178c:	4619      	mov	r1, r3
 801178e:	4620      	mov	r0, r4
 8011790:	f000 f941 	bl	8011a16 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
      --this->_M_impl._M_finish;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	1f1a      	subs	r2, r3, #4
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	4619      	mov	r1, r3
 80117a6:	4610      	mov	r0, r2
 80117a8:	f000 f94d 	bl	8011a46 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE7destroyIS1_EEvRS2_PT_>
      return __position;
 80117ac:	683b      	ldr	r3, [r7, #0]
    }
 80117ae:	4618      	mov	r0, r3
 80117b0:	3714      	adds	r7, #20
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd90      	pop	{r4, r7, pc}

080117b6 <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80117b6:	b480      	push	{r7}
 80117b8:	b083      	sub	sp, #12
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bc80      	pop	{r7}
 80117c8:	4770      	bx	lr

080117ca <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b084      	sub	sp, #16
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	60f8      	str	r0, [r7, #12]
 80117d2:	60b9      	str	r1, [r7, #8]
 80117d4:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7ff ffed 	bl	80117b6 <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 80117dc:	4603      	mov	r3, r0
 80117de:	461a      	mov	r2, r3
 80117e0:	68b9      	ldr	r1, [r7, #8]
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f000 f93c 	bl	8011a60 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>
 80117e8:	bf00      	nop
 80117ea:	3710      	adds	r7, #16
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	1d1a      	adds	r2, r3, #4
 80117fc:	f107 030c 	add.w	r3, r7, #12
 8011800:	4611      	mov	r1, r2
 8011802:	4618      	mov	r0, r3
 8011804:	f7ff ff59 	bl	80116ba <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	4618      	mov	r0, r3
 801180c:	3710      	adds	r7, #16
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8011812:	b580      	push	{r7, lr}
 8011814:	b082      	sub	sp, #8
 8011816:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8011818:	4618      	mov	r0, r3
 801181a:	f000 f805 	bl	8011828 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 801181e:	4603      	mov	r3, r0
      }
 8011820:	4618      	mov	r0, r3
 8011822:	3708      	adds	r7, #8
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
 801182e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8011830:	2301      	movs	r3, #1
      }
 8011832:	4618      	mov	r0, r3
 8011834:	370c      	adds	r7, #12
 8011836:	46bd      	mov	sp, r7
 8011838:	bc80      	pop	{r7}
 801183a:	4770      	bx	lr

0801183c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801183c:	b5b0      	push	{r4, r5, r7, lr}
 801183e:	b08c      	sub	sp, #48	; 0x30
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8011848:	4a59      	ldr	r2, [pc, #356]	; (80119b0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 801184a:	2101      	movs	r1, #1
 801184c:	68f8      	ldr	r0, [r7, #12]
 801184e:	f000 f91d 	bl	8011a8c <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc>
 8011852:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8011860:	68f8      	ldr	r0, [r7, #12]
 8011862:	f7ff fe92 	bl	801158a <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 8011866:	4603      	mov	r3, r0
 8011868:	617b      	str	r3, [r7, #20]
 801186a:	f107 0214 	add.w	r2, r7, #20
 801186e:	f107 0308 	add.w	r3, r7, #8
 8011872:	4611      	mov	r1, r2
 8011874:	4618      	mov	r0, r3
 8011876:	f000 f950 	bl	8011b1a <_ZN9__gnu_cxxmiIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801187a:	4603      	mov	r3, r0
 801187c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011882:	4618      	mov	r0, r3
 8011884:	f000 f95e 	bl	8011b44 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj>
 8011888:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 801188e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011894:	69ba      	ldr	r2, [r7, #24]
 8011896:	18d5      	adds	r5, r2, r3
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7ff ff8c 	bl	80117b6 <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 801189e:	4603      	mov	r3, r0
 80118a0:	461a      	mov	r2, r3
 80118a2:	4629      	mov	r1, r5
 80118a4:	4620      	mov	r0, r4
 80118a6:	f7ff ff90 	bl	80117ca <_ZNSt16allocator_traitsISaIP12TimerHandlerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80118aa:	2300      	movs	r3, #0
 80118ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80118ae:	f7ff ffb0 	bl	8011812 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE15_S_use_relocateEv>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d027      	beq.n	8011908 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80118b8:	f107 0308 	add.w	r3, r7, #8
 80118bc:	4618      	mov	r0, r3
 80118be:	f7ff ff0b 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80118c2:	4603      	mov	r3, r0
 80118c4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	4618      	mov	r0, r3
 80118ca:	f000 f963 	bl	8011b94 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80118ce:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80118d0:	69ba      	ldr	r2, [r7, #24]
 80118d2:	4621      	mov	r1, r4
 80118d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80118d6:	f000 f949 	bl	8011b6c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80118da:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80118dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118de:	3304      	adds	r3, #4
 80118e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80118e2:	f107 0308 	add.w	r3, r7, #8
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7ff fef6 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80118ec:	4603      	mov	r3, r0
 80118ee:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	4618      	mov	r0, r3
 80118f4:	f000 f94e 	bl	8011b94 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80118f8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80118fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118fc:	6a39      	ldr	r1, [r7, #32]
 80118fe:	4620      	mov	r0, r4
 8011900:	f000 f934 	bl	8011b6c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011904:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011906:	e026      	b.n	8011956 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8011908:	f107 0308 	add.w	r3, r7, #8
 801190c:	4618      	mov	r0, r3
 801190e:	f7ff fee3 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011912:	4603      	mov	r3, r0
 8011914:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	4618      	mov	r0, r3
 801191a:	f000 f93b 	bl	8011b94 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 801191e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8011920:	69ba      	ldr	r2, [r7, #24]
 8011922:	4621      	mov	r1, r4
 8011924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011926:	f000 f93f 	bl	8011ba8 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 801192a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 801192c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192e:	3304      	adds	r3, #4
 8011930:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8011932:	f107 0308 	add.w	r3, r7, #8
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff fece 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 801193c:	4603      	mov	r3, r0
 801193e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	4618      	mov	r0, r3
 8011944:	f000 f926 	bl	8011b94 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011948:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 801194a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801194c:	6a39      	ldr	r1, [r7, #32]
 801194e:	4620      	mov	r0, r4
 8011950:	f000 f92a 	bl	8011ba8 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8011954:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8011956:	f7ff ff5c 	bl	8011812 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE15_S_use_relocateEv>
 801195a:	4603      	mov	r3, r0
 801195c:	f083 0301 	eor.w	r3, r3, #1
 8011960:	b2db      	uxtb	r3, r3
 8011962:	2b00      	cmp	r3, #0
 8011964:	d009      	beq.n	801197a <_ZNSt6vectorIP12TimerHandlerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	4618      	mov	r0, r3
 801196a:	f000 f913 	bl	8011b94 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 801196e:	4603      	mov	r3, r0
 8011970:	461a      	mov	r2, r3
 8011972:	6a39      	ldr	r1, [r7, #32]
 8011974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011976:	f000 f930 	bl	8011bda <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 801197a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	689a      	ldr	r2, [r3, #8]
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011986:	461a      	mov	r2, r3
 8011988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801198a:	f000 f934 	bl	8011bf6 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	69ba      	ldr	r2, [r7, #24]
 8011992:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011998:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	69ba      	ldr	r2, [r7, #24]
 80119a0:	441a      	add	r2, r3
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	609a      	str	r2, [r3, #8]
    }
 80119a6:	bf00      	nop
 80119a8:	3730      	adds	r7, #48	; 0x30
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bdb0      	pop	{r4, r5, r7, pc}
 80119ae:	bf00      	nop
 80119b0:	08017630 	.word	0x08017630

080119b4 <_ZN9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	4618      	mov	r0, r3
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bc80      	pop	{r7}
 80119d0:	4770      	bx	lr

080119d2 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80119d2:	b480      	push	{r7}
 80119d4:	b083      	sub	sp, #12
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	4618      	mov	r0, r3
 80119de:	370c      	adds	r7, #12
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bc80      	pop	{r7}
 80119e4:	4770      	bx	lr

080119e6 <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80119e6:	b590      	push	{r4, r7, lr}
 80119e8:	b083      	sub	sp, #12
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
 80119ee:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f7ff fe71 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 80119f6:	4603      	mov	r3, r0
 80119f8:	681c      	ldr	r4, [r3, #0]
 80119fa:	6838      	ldr	r0, [r7, #0]
 80119fc:	f7ff fe6c 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011a00:	4603      	mov	r3, r0
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	429c      	cmp	r4, r3
 8011a06:	bf14      	ite	ne
 8011a08:	2301      	movne	r3, #1
 8011a0a:	2300      	moveq	r3, #0
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	4618      	mov	r0, r3
 8011a10:	370c      	adds	r7, #12
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd90      	pop	{r4, r7, pc}

08011a16 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
 8011a16:	b590      	push	{r4, r7, lr}
 8011a18:	b085      	sub	sp, #20
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	60f8      	str	r0, [r7, #12]
 8011a1e:	60b9      	str	r1, [r7, #8]
 8011a20:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8011a22:	68f8      	ldr	r0, [r7, #12]
 8011a24:	f000 f8fa 	bl	8011c1c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8011a28:	4604      	mov	r4, r0
 8011a2a:	68b8      	ldr	r0, [r7, #8]
 8011a2c:	f000 f8f6 	bl	8011c1c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>
 8011a30:	4603      	mov	r3, r0
 8011a32:	687a      	ldr	r2, [r7, #4]
 8011a34:	4619      	mov	r1, r3
 8011a36:	4620      	mov	r0, r4
 8011a38:	f000 f8fa 	bl	8011c30 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
 8011a3c:	4603      	mov	r3, r0
    }
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3714      	adds	r7, #20
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd90      	pop	{r4, r7, pc}

08011a46 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8011a46:	b580      	push	{r7, lr}
 8011a48:	b082      	sub	sp, #8
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	6078      	str	r0, [r7, #4]
 8011a4e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8011a50:	6839      	ldr	r1, [r7, #0]
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 f90d 	bl	8011c72 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE7destroyIS2_EEvPT_>
 8011a58:	bf00      	nop
 8011a5a:	3708      	adds	r7, #8
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011a60:	b590      	push	{r4, r7, lr}
 8011a62:	b085      	sub	sp, #20
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f7ff fea2 	bl	80117b6 <_ZSt7forwardIP12TimerHandlerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a72:	4603      	mov	r3, r0
 8011a74:	681c      	ldr	r4, [r3, #0]
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	4619      	mov	r1, r3
 8011a7a:	2004      	movs	r0, #4
 8011a7c:	f7f7 fa9b 	bl	8008fb6 <_ZnwjPv>
 8011a80:	4603      	mov	r3, r0
 8011a82:	601c      	str	r4, [r3, #0]
 8011a84:	bf00      	nop
 8011a86:	3714      	adds	r7, #20
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd90      	pop	{r4, r7, pc}

08011a8c <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011a8c:	b590      	push	{r4, r7, lr}
 8011a8e:	b087      	sub	sp, #28
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	f000 f8f4 	bl	8011c86 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	68f8      	ldr	r0, [r7, #12]
 8011aa2:	f7ff fd54 	bl	801154e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	1ae2      	subs	r2, r4, r3
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	bf34      	ite	cc
 8011ab0:	2301      	movcc	r3, #1
 8011ab2:	2300      	movcs	r3, #0
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d002      	beq.n	8011ac0 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f003 fd00 	bl	80154c0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011ac0:	68f8      	ldr	r0, [r7, #12]
 8011ac2:	f7ff fd44 	bl	801154e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	f7ff fd40 	bl	801154e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	613b      	str	r3, [r7, #16]
 8011ad2:	f107 0208 	add.w	r2, r7, #8
 8011ad6:	f107 0310 	add.w	r3, r7, #16
 8011ada:	4611      	mov	r1, r2
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7f7 feb1 	bl	8009844 <_ZSt3maxIjERKT_S2_S2_>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	4423      	add	r3, r4
 8011ae8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011aea:	68f8      	ldr	r0, [r7, #12]
 8011aec:	f7ff fd2f 	bl	801154e <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE4sizeEv>
 8011af0:	4602      	mov	r2, r0
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	4293      	cmp	r3, r2
 8011af6:	d306      	bcc.n	8011b06 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011af8:	68f8      	ldr	r0, [r7, #12]
 8011afa:	f000 f8c4 	bl	8011c86 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8011afe:	4602      	mov	r2, r0
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d904      	bls.n	8011b10 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011b06:	68f8      	ldr	r0, [r7, #12]
 8011b08:	f000 f8bd 	bl	8011c86 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	e000      	b.n	8011b12 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011b10:	697b      	ldr	r3, [r7, #20]
      }
 8011b12:	4618      	mov	r0, r3
 8011b14:	371c      	adds	r7, #28
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd90      	pop	{r4, r7, pc}

08011b1a <_ZN9__gnu_cxxmiIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011b1a:	b590      	push	{r4, r7, lr}
 8011b1c:	b083      	sub	sp, #12
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
 8011b22:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f7ff fdd7 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	681c      	ldr	r4, [r3, #0]
 8011b2e:	6838      	ldr	r0, [r7, #0]
 8011b30:	f7ff fdd2 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011b34:	4603      	mov	r3, r0
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	1ae3      	subs	r3, r4, r3
 8011b3a:	109b      	asrs	r3, r3, #2
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	370c      	adds	r7, #12
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd90      	pop	{r4, r7, pc}

08011b44 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d006      	beq.n	8011b62 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj+0x1e>
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6839      	ldr	r1, [r7, #0]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f000 f8a5 	bl	8011ca8 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8allocateERS2_j>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	e000      	b.n	8011b64 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE11_M_allocateEj+0x20>
 8011b62:	2300      	movs	r3, #0
      }
 8011b64:	4618      	mov	r0, r3
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <_ZNSt6vectorIP12TimerHandlerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011b6c:	b590      	push	{r4, r7, lr}
 8011b6e:	b089      	sub	sp, #36	; 0x24
 8011b70:	af02      	add	r7, sp, #8
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	607a      	str	r2, [r7, #4]
 8011b78:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011b7a:	f88d 4000 	strb.w	r4, [sp]
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	68b9      	ldr	r1, [r7, #8]
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f000 f89e 	bl	8011cc6 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8011b8a:	4603      	mov	r3, r0
      }
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	371c      	adds	r7, #28
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd90      	pop	{r4, r7, pc}

08011b94 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	370c      	adds	r7, #12
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bc80      	pop	{r7}
 8011ba6:	4770      	bx	lr

08011ba8 <_ZSt34__uninitialized_move_if_noexcept_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8011ba8:	b590      	push	{r4, r7, lr}
 8011baa:	b085      	sub	sp, #20
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	60f8      	str	r0, [r7, #12]
 8011bb0:	60b9      	str	r1, [r7, #8]
 8011bb2:	607a      	str	r2, [r7, #4]
 8011bb4:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f000 f897 	bl	8011cea <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	68b8      	ldr	r0, [r7, #8]
 8011bc0:	f000 f893 	bl	8011cea <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>
 8011bc4:	4601      	mov	r1, r0
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	687a      	ldr	r2, [r7, #4]
 8011bca:	4620      	mov	r0, r4
 8011bcc:	f000 f89c 	bl	8011d08 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12TimerHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8011bd0:	4603      	mov	r3, r0
    }
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3714      	adds	r7, #20
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd90      	pop	{r4, r7, pc}

08011bda <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8011bda:	b580      	push	{r7, lr}
 8011bdc:	b084      	sub	sp, #16
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	60f8      	str	r0, [r7, #12]
 8011be2:	60b9      	str	r1, [r7, #8]
 8011be4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8011be6:	68b9      	ldr	r1, [r7, #8]
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f000 f89e 	bl	8011d2a <_ZSt8_DestroyIPP12TimerHandlerEvT_S3_>
    }
 8011bee:	bf00      	nop
 8011bf0:	3710      	adds	r7, #16
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}

08011bf6 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011bf6:	b580      	push	{r7, lr}
 8011bf8:	b084      	sub	sp, #16
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	60f8      	str	r0, [r7, #12]
 8011bfe:	60b9      	str	r1, [r7, #8]
 8011c00:	607a      	str	r2, [r7, #4]
	if (__p)
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d005      	beq.n	8011c14 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	68b9      	ldr	r1, [r7, #8]
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f000 f898 	bl	8011d44 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE10deallocateERS2_PS1_j>
      }
 8011c14:	bf00      	nop
 8011c16:	3710      	adds	r7, #16
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEEET_S9_>:
    __miter_base(_Iterator __it)
 8011c1c:	b480      	push	{r7}
 8011c1e:	b083      	sub	sp, #12
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	4618      	mov	r0, r3
 8011c28:	370c      	adds	r7, #12
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bc80      	pop	{r7}
 8011c2e:	4770      	bx	lr

08011c30 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011c30:	b5b0      	push	{r4, r5, r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f000 f890 	bl	8011d62 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011c42:	4604      	mov	r4, r0
 8011c44:	68b8      	ldr	r0, [r7, #8]
 8011c46:	f000 f88c 	bl	8011d62 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f000 f888 	bl	8011d62 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011c52:	4603      	mov	r3, r0
 8011c54:	461a      	mov	r2, r3
 8011c56:	4629      	mov	r1, r5
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f000 f890 	bl	8011d7e <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	4619      	mov	r1, r3
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f000 f89d 	bl	8011da2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 8011c68:	4603      	mov	r3, r0
    }
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bdb0      	pop	{r4, r5, r7, pc}

08011c72 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 8011c72:	b480      	push	{r7}
 8011c74:	b083      	sub	sp, #12
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
 8011c7a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8011c7c:	bf00      	nop
 8011c7e:	370c      	adds	r7, #12
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bc80      	pop	{r7}
 8011c84:	4770      	bx	lr

08011c86 <_ZNKSt6vectorIP12TimerHandlerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b082      	sub	sp, #8
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4618      	mov	r0, r3
 8011c92:	f000 f8b7 	bl	8011e04 <_ZNKSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011c96:	4603      	mov	r3, r0
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f000 f899 	bl	8011dd0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE11_S_max_sizeERKS2_>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 f8ae 	bl	8011e18 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}

08011cc6 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8011cc6:	b580      	push	{r7, lr}
 8011cc8:	b084      	sub	sp, #16
 8011cca:	af00      	add	r7, sp, #0
 8011ccc:	60f8      	str	r0, [r7, #12]
 8011cce:	60b9      	str	r1, [r7, #8]
 8011cd0:	607a      	str	r2, [r7, #4]
 8011cd2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	68b9      	ldr	r1, [r7, #8]
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	f000 f8ba 	bl	8011e54 <_ZSt12__relocate_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8011ce0:	4603      	mov	r3, r0
      }
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3710      	adds	r7, #16
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <_ZSt32__make_move_if_noexcept_iteratorIP12TimerHandlerSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b084      	sub	sp, #16
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8011cf2:	f107 030c 	add.w	r3, r7, #12
 8011cf6:	6879      	ldr	r1, [r7, #4]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f000 f8c8 	bl	8011e8e <_ZNSt13move_iteratorIPP12TimerHandlerEC1ES2_>
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	4618      	mov	r0, r3
 8011d02:	3710      	adds	r7, #16
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12TimerHandlerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
 8011d14:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8011d16:	687a      	ldr	r2, [r7, #4]
 8011d18:	68b9      	ldr	r1, [r7, #8]
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	f000 f8c5 	bl	8011eaa <_ZSt18uninitialized_copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>
 8011d20:	4603      	mov	r3, r0
 8011d22:	4618      	mov	r0, r3
 8011d24:	3710      	adds	r7, #16
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <_ZSt8_DestroyIPP12TimerHandlerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	b082      	sub	sp, #8
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
 8011d32:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 f8c9 	bl	8011ece <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12TimerHandlerEEvT_S5_>
    }
 8011d3c:	bf00      	nop
 8011d3e:	3708      	adds	r7, #8
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	68b9      	ldr	r1, [r7, #8]
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f000 f8c4 	bl	8011ee2 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE10deallocateEPS2_j>
 8011d5a:	bf00      	nop
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b082      	sub	sp, #8
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8011d6a:	1d3b      	adds	r3, r7, #4
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7ff fcb3 	bl	80116d8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011d72:	4603      	mov	r3, r0
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	4618      	mov	r0, r3
 8011d78:	3708      	adds	r7, #8
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}

08011d7e <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b086      	sub	sp, #24
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	60f8      	str	r0, [r7, #12]
 8011d86:	60b9      	str	r1, [r7, #8]
 8011d88:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8011d8e:	687a      	ldr	r2, [r7, #4]
 8011d90:	68b9      	ldr	r1, [r7, #8]
 8011d92:	68f8      	ldr	r0, [r7, #12]
 8011d94:	f000 f8b2 	bl	8011efc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_>
 8011d98:	4603      	mov	r3, r0
    }
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3718      	adds	r7, #24
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b082      	sub	sp, #8
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
 8011daa:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f7ff ffd8 	bl	8011d62 <_ZSt12__niter_baseIPP12TimerHandlerSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011db2:	4602      	mov	r2, r0
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	1a9b      	subs	r3, r3, r2
 8011db8:	109b      	asrs	r3, r3, #2
 8011dba:	461a      	mov	r2, r3
 8011dbc:	1d3b      	adds	r3, r7, #4
 8011dbe:	4611      	mov	r1, r2
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff fbf2 	bl	80115aa <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEplEi>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8011dd8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8011ddc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f000 f8a9 	bl	8011f36 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8max_sizeERKS2_>
 8011de4:	4603      	mov	r3, r0
 8011de6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8011de8:	f107 0208 	add.w	r2, r7, #8
 8011dec:	f107 030c 	add.w	r3, r7, #12
 8011df0:	4611      	mov	r1, r2
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7f7 fe8c 	bl	8009b10 <_ZSt3minIjERKT_S2_S2_>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	681b      	ldr	r3, [r3, #0]
      }
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3710      	adds	r7, #16
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <_ZNKSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	4618      	mov	r0, r3
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bc80      	pop	{r7}
 8011e16:	4770      	bx	lr

08011e18 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	f000 f892 	bl	8011f4e <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	bf8c      	ite	hi
 8011e32:	2301      	movhi	r3, #1
 8011e34:	2300      	movls	r3, #0
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8011e3c:	f003 fb37 	bl	80154ae <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	4618      	mov	r0, r3
 8011e46:	f003 fb1d 	bl	8015484 <_Znwj>
 8011e4a:	4603      	mov	r3, r0
      }
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3710      	adds	r7, #16
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <_ZSt12__relocate_aIPP12TimerHandlerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8011e54:	b5b0      	push	{r4, r5, r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	607a      	str	r2, [r7, #4]
 8011e60:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8011e62:	68f8      	ldr	r0, [r7, #12]
 8011e64:	f000 f87e 	bl	8011f64 <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011e68:	4604      	mov	r4, r0
 8011e6a:	68b8      	ldr	r0, [r7, #8]
 8011e6c:	f000 f87a 	bl	8011f64 <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011e70:	4605      	mov	r5, r0
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f000 f876 	bl	8011f64 <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	4629      	mov	r1, r5
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f000 f87a 	bl	8011f78 <_ZSt14__relocate_a_1IP12TimerHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8011e84:	4603      	mov	r3, r0
    }
 8011e86:	4618      	mov	r0, r3
 8011e88:	3710      	adds	r7, #16
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bdb0      	pop	{r4, r5, r7, pc}

08011e8e <_ZNSt13move_iteratorIPP12TimerHandlerEC1ES2_>:
      move_iterator(iterator_type __i)
 8011e8e:	b480      	push	{r7}
 8011e90:	b083      	sub	sp, #12
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
 8011e96:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	601a      	str	r2, [r3, #0]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	370c      	adds	r7, #12
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bc80      	pop	{r7}
 8011ea8:	4770      	bx	lr

08011eaa <_ZSt18uninitialized_copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b086      	sub	sp, #24
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	60f8      	str	r0, [r7, #12]
 8011eb2:	60b9      	str	r1, [r7, #8]
 8011eb4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	68b9      	ldr	r1, [r7, #8]
 8011ebe:	68f8      	ldr	r0, [r7, #12]
 8011ec0:	f000 f878 	bl	8011fb4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12TimerHandlerES5_EET0_T_S8_S7_>
 8011ec4:	4603      	mov	r3, r0
    }
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3718      	adds	r7, #24
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12TimerHandlerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8011ece:	b480      	push	{r7}
 8011ed0:	b083      	sub	sp, #12
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
 8011ed6:	6039      	str	r1, [r7, #0]
 8011ed8:	bf00      	nop
 8011eda:	370c      	adds	r7, #12
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bc80      	pop	{r7}
 8011ee0:	4770      	bx	lr

08011ee2 <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8011ee2:	b580      	push	{r7, lr}
 8011ee4:	b084      	sub	sp, #16
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	60f8      	str	r0, [r7, #12]
 8011eea:	60b9      	str	r1, [r7, #8]
 8011eec:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8011eee:	68b8      	ldr	r0, [r7, #8]
 8011ef0:	f003 fac4 	bl	801547c <_ZdlPv>
      }
 8011ef4:	bf00      	nop
 8011ef6:	3710      	adds	r7, #16
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b086      	sub	sp, #24
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011f08:	68ba      	ldr	r2, [r7, #8]
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	1ad3      	subs	r3, r2, r3
 8011f0e:	109b      	asrs	r3, r3, #2
 8011f10:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d006      	beq.n	8011f26 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12TimerHandlerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	68f9      	ldr	r1, [r7, #12]
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f004 fc61 	bl	80167e8 <memmove>
	  return __result + _Num;
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	687a      	ldr	r2, [r7, #4]
 8011f2c:	4413      	add	r3, r2
	}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3718      	adds	r7, #24
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}

08011f36 <_ZNSt16allocator_traitsISaIP12TimerHandlerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8011f36:	b580      	push	{r7, lr}
 8011f38:	b082      	sub	sp, #8
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f000 f805 	bl	8011f4e <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>
 8011f44:	4603      	mov	r3, r0
 8011f46:	4618      	mov	r0, r3
 8011f48:	3708      	adds	r7, #8
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}

08011f4e <_ZNK9__gnu_cxx13new_allocatorIP12TimerHandlerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8011f4e:	b480      	push	{r7}
 8011f50:	b083      	sub	sp, #12
 8011f52:	af00      	add	r7, sp, #0
 8011f54:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011f56:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	370c      	adds	r7, #12
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bc80      	pop	{r7}
 8011f62:	4770      	bx	lr

08011f64 <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>:
    __niter_base(_Iterator __it)
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	370c      	adds	r7, #12
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bc80      	pop	{r7}
 8011f76:	4770      	bx	lr

08011f78 <_ZSt14__relocate_a_1IP12TimerHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b086      	sub	sp, #24
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	607a      	str	r2, [r7, #4]
 8011f84:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8011f86:	68ba      	ldr	r2, [r7, #8]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	1ad3      	subs	r3, r2, r3
 8011f8c:	109b      	asrs	r3, r3, #2
 8011f8e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	dd06      	ble.n	8011fa4 <_ZSt14__relocate_a_1IP12TimerHandlerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	009b      	lsls	r3, r3, #2
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	68f9      	ldr	r1, [r7, #12]
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f004 fc22 	bl	80167e8 <memmove>
      return __result + __count;
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	4413      	add	r3, r2
    }
 8011fac:	4618      	mov	r0, r3
 8011fae:	3718      	adds	r7, #24
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12TimerHandlerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	60f8      	str	r0, [r7, #12]
 8011fbc:	60b9      	str	r1, [r7, #8]
 8011fbe:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8011fc0:	687a      	ldr	r2, [r7, #4]
 8011fc2:	68b9      	ldr	r1, [r7, #8]
 8011fc4:	68f8      	ldr	r0, [r7, #12]
 8011fc6:	f000 f805 	bl	8011fd4 <_ZSt4copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3710      	adds	r7, #16
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <_ZSt4copyISt13move_iteratorIPP12TimerHandlerES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8011fd4:	b590      	push	{r4, r7, lr}
 8011fd6:	b085      	sub	sp, #20
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	60f8      	str	r0, [r7, #12]
 8011fdc:	60b9      	str	r1, [r7, #8]
 8011fde:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011fe0:	68f8      	ldr	r0, [r7, #12]
 8011fe2:	f000 f80f 	bl	8012004 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	68b8      	ldr	r0, [r7, #8]
 8011fea:	f000 f80b 	bl	8012004 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	f000 f816 	bl	8012026 <_ZSt14__copy_move_a2ILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8011ffa:	4603      	mov	r3, r0
    }
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3714      	adds	r7, #20
 8012000:	46bd      	mov	sp, r7
 8012002:	bd90      	pop	{r4, r7, pc}

08012004 <_ZSt12__miter_baseIPP12TimerHandlerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 801200c:	1d3b      	adds	r3, r7, #4
 801200e:	4618      	mov	r0, r3
 8012010:	f000 f82c 	bl	801206c <_ZNKSt13move_iteratorIPP12TimerHandlerE4baseEv>
 8012014:	4603      	mov	r3, r0
 8012016:	4618      	mov	r0, r3
 8012018:	f000 f833 	bl	8012082 <_ZSt12__miter_baseIPP12TimerHandlerET_S3_>
 801201c:	4603      	mov	r3, r0
 801201e:	4618      	mov	r0, r3
 8012020:	3708      	adds	r7, #8
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}

08012026 <_ZSt14__copy_move_a2ILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8012026:	b5b0      	push	{r4, r5, r7, lr}
 8012028:	b084      	sub	sp, #16
 801202a:	af00      	add	r7, sp, #0
 801202c:	60f8      	str	r0, [r7, #12]
 801202e:	60b9      	str	r1, [r7, #8]
 8012030:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	f7ff ff96 	bl	8011f64 <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8012038:	4604      	mov	r4, r0
 801203a:	68b8      	ldr	r0, [r7, #8]
 801203c:	f7ff ff92 	bl	8011f64 <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 8012040:	4605      	mov	r5, r0
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	4618      	mov	r0, r3
 8012046:	f7ff ff8d 	bl	8011f64 <_ZSt12__niter_baseIPP12TimerHandlerET_S3_>
 801204a:	4603      	mov	r3, r0
 801204c:	461a      	mov	r2, r3
 801204e:	4629      	mov	r1, r5
 8012050:	4620      	mov	r0, r4
 8012052:	f7ff fe94 	bl	8011d7e <_ZSt13__copy_move_aILb1EPP12TimerHandlerS2_ET1_T0_S4_S3_>
 8012056:	4602      	mov	r2, r0
 8012058:	1d3b      	adds	r3, r7, #4
 801205a:	4611      	mov	r1, r2
 801205c:	4618      	mov	r0, r3
 801205e:	f000 f81a 	bl	8012096 <_ZSt12__niter_wrapIPP12TimerHandlerET_RKS3_S3_>
 8012062:	4603      	mov	r3, r0
    }
 8012064:	4618      	mov	r0, r3
 8012066:	3710      	adds	r7, #16
 8012068:	46bd      	mov	sp, r7
 801206a:	bdb0      	pop	{r4, r5, r7, pc}

0801206c <_ZNKSt13move_iteratorIPP12TimerHandlerE4baseEv>:
      base() const
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	4618      	mov	r0, r3
 801207a:	370c      	adds	r7, #12
 801207c:	46bd      	mov	sp, r7
 801207e:	bc80      	pop	{r7}
 8012080:	4770      	bx	lr

08012082 <_ZSt12__miter_baseIPP12TimerHandlerET_S3_>:
    __miter_base(_Iterator __it)
 8012082:	b480      	push	{r7}
 8012084:	b083      	sub	sp, #12
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
    { return __it; }
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	370c      	adds	r7, #12
 8012090:	46bd      	mov	sp, r7
 8012092:	bc80      	pop	{r7}
 8012094:	4770      	bx	lr

08012096 <_ZSt12__niter_wrapIPP12TimerHandlerET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8012096:	b480      	push	{r7}
 8012098:	b083      	sub	sp, #12
 801209a:	af00      	add	r7, sp, #0
 801209c:	6078      	str	r0, [r7, #4]
 801209e:	6039      	str	r1, [r7, #0]
    { return __res; }
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	4618      	mov	r0, r3
 80120a4:	370c      	adds	r7, #12
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bc80      	pop	{r7}
 80120aa:	4770      	bx	lr

080120ac <_ZN13UsbHidHandlerC1Ev>:
 */

#include "UsbHidHandler.h"
#include "global_callbacks.h"

UsbHidHandler::UsbHidHandler() {
 80120ac:	b480      	push	{r7}
 80120ae:	b083      	sub	sp, #12
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	4a04      	ldr	r2, [pc, #16]	; (80120c8 <_ZN13UsbHidHandlerC1Ev+0x1c>)
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	601a      	str	r2, [r3, #0]
	// Don't auto register. Call registerCallback()
	// There should only be one hid handler for now
}
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	4618      	mov	r0, r3
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bc80      	pop	{r7}
 80120c4:	4770      	bx	lr
 80120c6:	bf00      	nop
 80120c8:	080177d4 	.word	0x080177d4

080120cc <_ZN13UsbHidHandlerD1Ev>:

UsbHidHandler::~UsbHidHandler() {
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	4a04      	ldr	r2, [pc, #16]	; (80120e8 <_ZN13UsbHidHandlerD1Ev+0x1c>)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	4618      	mov	r0, r3
 80120de:	370c      	adds	r7, #12
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bc80      	pop	{r7}
 80120e4:	4770      	bx	lr
 80120e6:	bf00      	nop
 80120e8:	080177d4 	.word	0x080177d4

080120ec <_ZN13UsbHidHandlerD0Ev>:
UsbHidHandler::~UsbHidHandler() {
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
}
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f7ff ffe9 	bl	80120cc <_ZN13UsbHidHandlerD1Ev>
 80120fa:	2104      	movs	r1, #4
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f003 f9bf 	bl	8015480 <_ZdlPvj>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	4618      	mov	r0, r3
 8012106:	3708      	adds	r7, #8
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <_ZN13UsbHidHandler6hidGetEhtPPh>:



void UsbHidHandler::hidGet(uint8_t id,uint16_t len,uint8_t** return_buf){
 801210c:	b480      	push	{r7}
 801210e:	b085      	sub	sp, #20
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	607b      	str	r3, [r7, #4]
 8012116:	460b      	mov	r3, r1
 8012118:	72fb      	strb	r3, [r7, #11]
 801211a:	4613      	mov	r3, r2
 801211c:	813b      	strh	r3, [r7, #8]

}
 801211e:	bf00      	nop
 8012120:	3714      	adds	r7, #20
 8012122:	46bd      	mov	sp, r7
 8012124:	bc80      	pop	{r7}
 8012126:	4770      	bx	lr

08012128 <_ZN13UsbHidHandler6hidOutEPh>:

void UsbHidHandler::hidOut(uint8_t* report){
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]

}
 8012132:	bf00      	nop
 8012134:	370c      	adds	r7, #12
 8012136:	46bd      	mov	sp, r7
 8012138:	bc80      	pop	{r7}
 801213a:	4770      	bx	lr

0801213c <_ZN13UsbHidHandler19registerHidCallbackEv>:

void UsbHidHandler::registerHidCallback(){
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
	extern UsbHidHandler* globalHidHandler;
	globalHidHandler = this;
 8012144:	4a03      	ldr	r2, [pc, #12]	; (8012154 <_ZN13UsbHidHandler19registerHidCallbackEv+0x18>)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6013      	str	r3, [r2, #0]
}
 801214a:	bf00      	nop
 801214c:	370c      	adds	r7, #12
 801214e:	46bd      	mov	sp, r7
 8012150:	bc80      	pop	{r7}
 8012152:	4770      	bx	lr
 8012154:	200007c8 	.word	0x200007c8

08012158 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f000 f973 	bl	801244c <_ZNSaIP10AdcHandlerED1Ev>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	4618      	mov	r0, r3
 801217c:	f000 f956 	bl	801242c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implC1Ev>
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	4618      	mov	r0, r3
 8012184:	3708      	adds	r7, #8
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <_ZNSt6vectorIP10AdcHandlerSaIS1_EEC1Ev>:
      vector() = default;
 801218a:	b580      	push	{r7, lr}
 801218c:	b082      	sub	sp, #8
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	4618      	mov	r0, r3
 8012196:	f7ff ffeb 	bl	8012170 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EEC1Ev>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	4618      	mov	r0, r3
 801219e:	3708      	adds	r7, #8
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f000 f982 	bl	80124b6 <_ZNSaIP14CommandHandlerED1Ev>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	4618      	mov	r0, r3
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f000 f965 	bl	8012496 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implC1Ev>
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	4618      	mov	r0, r3
 80121d0:	3708      	adds	r7, #8
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}

080121d6 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEC1Ev>:
      vector() = default;
 80121d6:	b580      	push	{r7, lr}
 80121d8:	b082      	sub	sp, #8
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7ff ffeb 	bl	80121bc <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EEC1Ev>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	4618      	mov	r0, r3
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <HAL_ADC_ConvCpltCallback>:
std::vector<CommandHandler*> cmdHandlers;

volatile uint32_t ADC_BUF[ADC_CHANNELS] = {0};


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b086      	sub	sp, #24
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
		for(AdcHandler* c : adcHandlers){
 80121f8:	4b17      	ldr	r3, [pc, #92]	; (8012258 <HAL_ADC_ConvCpltCallback+0x68>)
 80121fa:	617b      	str	r3, [r7, #20]
 80121fc:	6978      	ldr	r0, [r7, #20]
 80121fe:	f7f6 ff92 	bl	8009126 <_ZNSt6vectorIP10AdcHandlerSaIS1_EE5beginEv>
 8012202:	4603      	mov	r3, r0
 8012204:	60fb      	str	r3, [r7, #12]
 8012206:	6978      	ldr	r0, [r7, #20]
 8012208:	f7f7 f8c0 	bl	800938c <_ZNSt6vectorIP10AdcHandlerSaIS1_EE3endEv>
 801220c:	4603      	mov	r3, r0
 801220e:	60bb      	str	r3, [r7, #8]
 8012210:	f107 0208 	add.w	r2, r7, #8
 8012214:	f107 030c 	add.w	r3, r7, #12
 8012218:	4611      	mov	r1, r2
 801221a:	4618      	mov	r0, r3
 801221c:	f7f7 f9b1 	bl	8009582 <_ZN9__gnu_cxxneIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8012220:	4603      	mov	r3, r0
 8012222:	2b00      	cmp	r3, #0
 8012224:	d014      	beq.n	8012250 <HAL_ADC_ConvCpltCallback+0x60>
 8012226:	f107 030c 	add.w	r3, r7, #12
 801222a:	4618      	mov	r0, r3
 801222c:	f000 f977 	bl	801251e <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 8012230:	4603      	mov	r3, r0
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	613b      	str	r3, [r7, #16]
			c->adcUpd(ADC_BUF);
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	3308      	adds	r3, #8
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	4907      	ldr	r1, [pc, #28]	; (801225c <HAL_ADC_ConvCpltCallback+0x6c>)
 8012240:	6938      	ldr	r0, [r7, #16]
 8012242:	4798      	blx	r3
		for(AdcHandler* c : adcHandlers){
 8012244:	f107 030c 	add.w	r3, r7, #12
 8012248:	4618      	mov	r0, r3
 801224a:	f000 f959 	bl	8012500 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEppEv>
 801224e:	e7df      	b.n	8012210 <HAL_ADC_ConvCpltCallback+0x20>
		}
}
 8012250:	bf00      	nop
 8012252:	3718      	adds	r7, #24
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	20000790 	.word	0x20000790
 801225c:	200007a8 	.word	0x200007a8

08012260 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f000 f973 	bl	8012554 <_ZNSaIP12TimerHandlerED1Ev>
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	4618      	mov	r0, r3
 8012272:	3708      	adds	r7, #8
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	4618      	mov	r0, r3
 8012284:	f000 f956 	bl	8012534 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implC1Ev>
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	4618      	mov	r0, r3
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <_ZNSt6vectorIP12TimerHandlerSaIS1_EEC1Ev>:
      vector() = default;
 8012292:	b580      	push	{r7, lr}
 8012294:	b082      	sub	sp, #8
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	4618      	mov	r0, r3
 801229e:	f7ff ffeb 	bl	8012278 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EEC1Ev>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4618      	mov	r0, r3
 80122a6:	3708      	adds	r7, #8
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <HAL_TIM_PeriodElapsedCallback>:

std::vector<TimerHandler*> timerHandlers;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b086      	sub	sp, #24
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
	for(TimerHandler* c : timerHandlers){
 80122b4:	4b17      	ldr	r3, [pc, #92]	; (8012314 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80122b6:	617b      	str	r3, [r7, #20]
 80122b8:	6978      	ldr	r0, [r7, #20]
 80122ba:	f7ff f966 	bl	801158a <_ZNSt6vectorIP12TimerHandlerSaIS1_EE5beginEv>
 80122be:	4603      	mov	r3, r0
 80122c0:	60fb      	str	r3, [r7, #12]
 80122c2:	6978      	ldr	r0, [r7, #20]
 80122c4:	f7ff fa94 	bl	80117f0 <_ZNSt6vectorIP12TimerHandlerSaIS1_EE3endEv>
 80122c8:	4603      	mov	r3, r0
 80122ca:	60bb      	str	r3, [r7, #8]
 80122cc:	f107 0208 	add.w	r2, r7, #8
 80122d0:	f107 030c 	add.w	r3, r7, #12
 80122d4:	4611      	mov	r1, r2
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7ff fb85 	bl	80119e6 <_ZN9__gnu_cxxneIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80122dc:	4603      	mov	r3, r0
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d014      	beq.n	801230c <HAL_TIM_PeriodElapsedCallback+0x60>
 80122e2:	f107 030c 	add.w	r3, r7, #12
 80122e6:	4618      	mov	r0, r3
 80122e8:	f000 f968 	bl	80125bc <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEdeEv>
 80122ec:	4603      	mov	r3, r0
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	613b      	str	r3, [r7, #16]
			c->timerElapsed(htim);
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	3308      	adds	r3, #8
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	6879      	ldr	r1, [r7, #4]
 80122fc:	6938      	ldr	r0, [r7, #16]
 80122fe:	4798      	blx	r3
	for(TimerHandler* c : timerHandlers){
 8012300:	f107 030c 	add.w	r3, r7, #12
 8012304:	4618      	mov	r0, r3
 8012306:	f000 f94a 	bl	801259e <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEppEv>
 801230a:	e7df      	b.n	80122cc <HAL_TIM_PeriodElapsedCallback+0x20>
		}
}
 801230c:	bf00      	nop
 801230e:	3718      	adds	r7, #24
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}
 8012314:	200007b0 	.word	0x200007b0

08012318 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f000 f966 	bl	80125f2 <_ZNSaIP11ExtiHandlerED1Ev>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	4618      	mov	r0, r3
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	4618      	mov	r0, r3
 801233c:	f000 f949 	bl	80125d2 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implC1Ev>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	4618      	mov	r0, r3
 8012344:	3708      	adds	r7, #8
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}

0801234a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEC1Ev>:
      vector() = default;
 801234a:	b580      	push	{r7, lr}
 801234c:	b082      	sub	sp, #8
 801234e:	af00      	add	r7, sp, #0
 8012350:	6078      	str	r0, [r7, #4]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	4618      	mov	r0, r3
 8012356:	f7ff ffeb 	bl	8012330 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EEC1Ev>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	4618      	mov	r0, r3
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <CDC_Callback>:
	for(ExtiHandler* c : extiHandlers){
		c->exti(GPIO_Pin);
	}
}

void CDC_Callback(uint8_t* Buf, uint32_t *Len){
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //DEBUG
 801236e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012372:	4809      	ldr	r0, [pc, #36]	; (8012398 <CDC_Callback+0x34>)
 8012374:	f7f1 f9f6 	bl	8003764 <HAL_GPIO_TogglePin>
	if(mainclass!=nullptr)
 8012378:	4b08      	ldr	r3, [pc, #32]	; (801239c <CDC_Callback+0x38>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d006      	beq.n	801238e <CDC_Callback+0x2a>
		mainclass->cdcRcv((char*)Buf,Len);
 8012380:	4b06      	ldr	r3, [pc, #24]	; (801239c <CDC_Callback+0x38>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	683a      	ldr	r2, [r7, #0]
 8012386:	6879      	ldr	r1, [r7, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	f7fc f8b0 	bl	800e4ee <_ZN8FFBWheel6cdcRcvEPcPm>
}
 801238e:	bf00      	nop
 8012390:	3708      	adds	r7, #8
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	40011000 	.word	0x40011000
 801239c:	20000774 	.word	0x20000774

080123a0 <USBD_OutEvent_HID>:

UsbHidHandler* globalHidHandler = nullptr;
void USBD_OutEvent_HID(uint8_t* report){
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
	if(globalHidHandler!=nullptr)
 80123a8:	4b08      	ldr	r3, [pc, #32]	; (80123cc <USBD_OutEvent_HID+0x2c>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d009      	beq.n	80123c4 <USBD_OutEvent_HID+0x24>
			globalHidHandler->hidOut(report);
 80123b0:	4b06      	ldr	r3, [pc, #24]	; (80123cc <USBD_OutEvent_HID+0x2c>)
 80123b2:	681a      	ldr	r2, [r3, #0]
 80123b4:	4b05      	ldr	r3, [pc, #20]	; (80123cc <USBD_OutEvent_HID+0x2c>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	3308      	adds	r3, #8
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	6879      	ldr	r1, [r7, #4]
 80123c0:	4610      	mov	r0, r2
 80123c2:	4798      	blx	r3
}
 80123c4:	bf00      	nop
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	200007c8 	.word	0x200007c8

080123d0 <USBD_GetEvent_HID>:
void USBD_GetEvent_HID(uint8_t id,uint16_t len,uint8_t** return_buf){
 80123d0:	b590      	push	{r4, r7, lr}
 80123d2:	b083      	sub	sp, #12
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	4603      	mov	r3, r0
 80123d8:	603a      	str	r2, [r7, #0]
 80123da:	71fb      	strb	r3, [r7, #7]
 80123dc:	460b      	mov	r3, r1
 80123de:	80bb      	strh	r3, [r7, #4]
	if(globalHidHandler!=nullptr)
 80123e0:	4b09      	ldr	r3, [pc, #36]	; (8012408 <USBD_GetEvent_HID+0x38>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00a      	beq.n	80123fe <USBD_GetEvent_HID+0x2e>
		globalHidHandler->hidGet(id, len, return_buf);
 80123e8:	4b07      	ldr	r3, [pc, #28]	; (8012408 <USBD_GetEvent_HID+0x38>)
 80123ea:	6818      	ldr	r0, [r3, #0]
 80123ec:	4b06      	ldr	r3, [pc, #24]	; (8012408 <USBD_GetEvent_HID+0x38>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	330c      	adds	r3, #12
 80123f4:	681c      	ldr	r4, [r3, #0]
 80123f6:	88ba      	ldrh	r2, [r7, #4]
 80123f8:	79f9      	ldrb	r1, [r7, #7]
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	47a0      	blx	r4
}
 80123fe:	bf00      	nop
 8012400:	370c      	adds	r7, #12
 8012402:	46bd      	mov	sp, r7
 8012404:	bd90      	pop	{r4, r7, pc}
 8012406:	bf00      	nop
 8012408:	200007c8 	.word	0x200007c8

0801240c <USB_SOF>:

void USB_SOF(){
 801240c:	b580      	push	{r7, lr}
 801240e:	af00      	add	r7, sp, #0
	if(mainclass!=nullptr)
 8012410:	4b05      	ldr	r3, [pc, #20]	; (8012428 <USB_SOF+0x1c>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d004      	beq.n	8012422 <USB_SOF+0x16>
		mainclass->SOF();
 8012418:	4b03      	ldr	r3, [pc, #12]	; (8012428 <USB_SOF+0x1c>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	4618      	mov	r0, r3
 801241e:	f7fc f898 	bl	800e552 <_ZN8FFBWheel3SOFEv>
}
 8012422:	bf00      	nop
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	20000774 	.word	0x20000774

0801242c <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f000 f901 	bl	801263c <_ZNSaIP10AdcHandlerEC1Ev>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	4618      	mov	r0, r3
 801243e:	f000 f909 	bl	8012654 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4618      	mov	r0, r3
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <_ZNSaIP10AdcHandlerED1Ev>:
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f000 f910 	bl	801267a <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerED1Ev>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	4618      	mov	r0, r3
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	689a      	ldr	r2, [r3, #8]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	1ad3      	subs	r3, r2, r3
 801247a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 801247c:	461a      	mov	r2, r3
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f7f7 f987 	bl	8009792 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE13_M_deallocateEPS1_j>
      }
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	4618      	mov	r0, r3
 8012488:	f7ff fe66 	bl	8012158 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE12_Vector_implD1Ev>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}

08012496 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8012496:	b580      	push	{r7, lr}
 8012498:	b082      	sub	sp, #8
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f000 f8f5 	bl	801268e <_ZNSaIP14CommandHandlerEC1Ev>
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f000 f8fd 	bl	80126a6 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	4618      	mov	r0, r3
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <_ZNSaIP14CommandHandlerED1Ev>:
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b082      	sub	sp, #8
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f000 f904 	bl	80126cc <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerED1Ev>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	4618      	mov	r0, r3
 80124c8:	3708      	adds	r7, #8
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}

080124ce <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80124ce:	b580      	push	{r7, lr}
 80124d0:	b082      	sub	sp, #8
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	689a      	ldr	r2, [r3, #8]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	1ad3      	subs	r3, r2, r3
 80124e4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80124e6:	461a      	mov	r2, r3
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f7fa f820 	bl	800c52e <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE13_M_deallocateEPS1_j>
      }
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7ff fe57 	bl	80121a4 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE12_Vector_implD1Ev>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	4618      	mov	r0, r3
 80124fa:	3708      	adds	r7, #8
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <_ZN9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
	++_M_current;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	1d1a      	adds	r2, r3, #4
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	601a      	str	r2, [r3, #0]
	return *this;
 8012512:	687b      	ldr	r3, [r7, #4]
      }
 8012514:	4618      	mov	r0, r3
 8012516:	370c      	adds	r7, #12
 8012518:	46bd      	mov	sp, r7
 801251a:	bc80      	pop	{r7}
 801251c:	4770      	bx	lr

0801251e <_ZNK9__gnu_cxx17__normal_iteratorIPP10AdcHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801251e:	b480      	push	{r7}
 8012520:	b083      	sub	sp, #12
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4618      	mov	r0, r3
 801252c:	370c      	adds	r7, #12
 801252e:	46bd      	mov	sp, r7
 8012530:	bc80      	pop	{r7}
 8012532:	4770      	bx	lr

08012534 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 f8cf 	bl	80126e0 <_ZNSaIP12TimerHandlerEC1Ev>
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4618      	mov	r0, r3
 8012546:	f000 f8d7 	bl	80126f8 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	4618      	mov	r0, r3
 801254e:	3708      	adds	r7, #8
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <_ZNSaIP12TimerHandlerED1Ev>:
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f000 f8de 	bl	801271e <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerED1Ev>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4618      	mov	r0, r3
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	689a      	ldr	r2, [r3, #8]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	1ad3      	subs	r3, r2, r3
 8012582:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8012584:	461a      	mov	r2, r3
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f7ff fb35 	bl	8011bf6 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE13_M_deallocateEPS1_j>
      }
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	4618      	mov	r0, r3
 8012590:	f7ff fe66 	bl	8012260 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE12_Vector_implD1Ev>
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	4618      	mov	r0, r3
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}

0801259e <_ZN9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801259e:	b480      	push	{r7}
 80125a0:	b083      	sub	sp, #12
 80125a2:	af00      	add	r7, sp, #0
 80125a4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	1d1a      	adds	r2, r3, #4
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	601a      	str	r2, [r3, #0]
	return *this;
 80125b0:	687b      	ldr	r3, [r7, #4]
      }
 80125b2:	4618      	mov	r0, r3
 80125b4:	370c      	adds	r7, #12
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bc80      	pop	{r7}
 80125ba:	4770      	bx	lr

080125bc <_ZNK9__gnu_cxx17__normal_iteratorIPP12TimerHandlerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	4618      	mov	r0, r3
 80125ca:	370c      	adds	r7, #12
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bc80      	pop	{r7}
 80125d0:	4770      	bx	lr

080125d2 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80125d2:	b580      	push	{r7, lr}
 80125d4:	b082      	sub	sp, #8
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f000 f8a9 	bl	8012732 <_ZNSaIP11ExtiHandlerEC1Ev>
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	4618      	mov	r0, r3
 80125e4:	f000 f8b1 	bl	801274a <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4618      	mov	r0, r3
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <_ZNSaIP11ExtiHandlerED1Ev>:
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b082      	sub	sp, #8
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f000 f8b8 	bl	8012770 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerED1Ev>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	4618      	mov	r0, r3
 8012604:	3708      	adds	r7, #8
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}

0801260a <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801260a:	b580      	push	{r7, lr}
 801260c:	b082      	sub	sp, #8
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	689a      	ldr	r2, [r3, #8]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8012622:	461a      	mov	r2, r3
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f7fa ff18 	bl	800d45a <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE13_M_deallocateEPS1_j>
      }
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4618      	mov	r0, r3
 801262e:	f7ff fe73 	bl	8012318 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE12_Vector_implD1Ev>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4618      	mov	r0, r3
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <_ZNSaIP10AdcHandlerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f000 f89d 	bl	8012784 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerEC1Ev>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4618      	mov	r0, r3
 801264e:	3708      	adds	r7, #8
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2200      	movs	r2, #0
 8012660:	601a      	str	r2, [r3, #0]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2200      	movs	r2, #0
 8012666:	605a      	str	r2, [r3, #4]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2200      	movs	r2, #0
 801266c:	609a      	str	r2, [r3, #8]
	{ }
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	bc80      	pop	{r7}
 8012678:	4770      	bx	lr

0801267a <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801267a:	b480      	push	{r7}
 801267c:	b083      	sub	sp, #12
 801267e:	af00      	add	r7, sp, #0
 8012680:	6078      	str	r0, [r7, #4]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4618      	mov	r0, r3
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	bc80      	pop	{r7}
 801268c:	4770      	bx	lr

0801268e <_ZNSaIP14CommandHandlerEC1Ev>:
 801268e:	b580      	push	{r7, lr}
 8012690:	b082      	sub	sp, #8
 8012692:	af00      	add	r7, sp, #0
 8012694:	6078      	str	r0, [r7, #4]
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f000 f87e 	bl	8012798 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerEC1Ev>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	4618      	mov	r0, r3
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80126a6:	b480      	push	{r7}
 80126a8:	b083      	sub	sp, #12
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2200      	movs	r2, #0
 80126b2:	601a      	str	r2, [r3, #0]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2200      	movs	r2, #0
 80126b8:	605a      	str	r2, [r3, #4]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2200      	movs	r2, #0
 80126be:	609a      	str	r2, [r3, #8]
	{ }
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4618      	mov	r0, r3
 80126c4:	370c      	adds	r7, #12
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bc80      	pop	{r7}
 80126ca:	4770      	bx	lr

080126cc <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerED1Ev>:
 80126cc:	b480      	push	{r7}
 80126ce:	b083      	sub	sp, #12
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	4618      	mov	r0, r3
 80126d8:	370c      	adds	r7, #12
 80126da:	46bd      	mov	sp, r7
 80126dc:	bc80      	pop	{r7}
 80126de:	4770      	bx	lr

080126e0 <_ZNSaIP12TimerHandlerEC1Ev>:
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f000 f85f 	bl	80127ac <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerEC1Ev>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2200      	movs	r2, #0
 8012704:	601a      	str	r2, [r3, #0]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2200      	movs	r2, #0
 801270a:	605a      	str	r2, [r3, #4]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2200      	movs	r2, #0
 8012710:	609a      	str	r2, [r3, #8]
	{ }
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	4618      	mov	r0, r3
 8012716:	370c      	adds	r7, #12
 8012718:	46bd      	mov	sp, r7
 801271a:	bc80      	pop	{r7}
 801271c:	4770      	bx	lr

0801271e <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerED1Ev>:
 801271e:	b480      	push	{r7}
 8012720:	b083      	sub	sp, #12
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4618      	mov	r0, r3
 801272a:	370c      	adds	r7, #12
 801272c:	46bd      	mov	sp, r7
 801272e:	bc80      	pop	{r7}
 8012730:	4770      	bx	lr

08012732 <_ZNSaIP11ExtiHandlerEC1Ev>:
 8012732:	b580      	push	{r7, lr}
 8012734:	b082      	sub	sp, #8
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f840 	bl	80127c0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerEC1Ev>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	4618      	mov	r0, r3
 8012744:	3708      	adds	r7, #8
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}

0801274a <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801274a:	b480      	push	{r7}
 801274c:	b083      	sub	sp, #12
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2200      	movs	r2, #0
 8012756:	601a      	str	r2, [r3, #0]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2200      	movs	r2, #0
 801275c:	605a      	str	r2, [r3, #4]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2200      	movs	r2, #0
 8012762:	609a      	str	r2, [r3, #8]
	{ }
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	4618      	mov	r0, r3
 8012768:	370c      	adds	r7, #12
 801276a:	46bd      	mov	sp, r7
 801276c:	bc80      	pop	{r7}
 801276e:	4770      	bx	lr

08012770 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerED1Ev>:
 8012770:	b480      	push	{r7}
 8012772:	b083      	sub	sp, #12
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	4618      	mov	r0, r3
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	bc80      	pop	{r7}
 8012782:	4770      	bx	lr

08012784 <_ZN9__gnu_cxx13new_allocatorIP10AdcHandlerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012784:	b480      	push	{r7}
 8012786:	b083      	sub	sp, #12
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	4618      	mov	r0, r3
 8012790:	370c      	adds	r7, #12
 8012792:	46bd      	mov	sp, r7
 8012794:	bc80      	pop	{r7}
 8012796:	4770      	bx	lr

08012798 <_ZN9__gnu_cxx13new_allocatorIP14CommandHandlerEC1Ev>:
 8012798:	b480      	push	{r7}
 801279a:	b083      	sub	sp, #12
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	4618      	mov	r0, r3
 80127a4:	370c      	adds	r7, #12
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bc80      	pop	{r7}
 80127aa:	4770      	bx	lr

080127ac <_ZN9__gnu_cxx13new_allocatorIP12TimerHandlerEC1Ev>:
 80127ac:	b480      	push	{r7}
 80127ae:	b083      	sub	sp, #12
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	4618      	mov	r0, r3
 80127b8:	370c      	adds	r7, #12
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bc80      	pop	{r7}
 80127be:	4770      	bx	lr

080127c0 <_ZN9__gnu_cxx13new_allocatorIP11ExtiHandlerEC1Ev>:
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	4618      	mov	r0, r3
 80127cc:	370c      	adds	r7, #12
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bc80      	pop	{r7}
 80127d2:	4770      	bx	lr

080127d4 <_Z41__static_initialization_and_destruction_0ii>:
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	6039      	str	r1, [r7, #0]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d110      	bne.n	8012806 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d10b      	bne.n	8012806 <_Z41__static_initialization_and_destruction_0ii+0x32>
std::vector<AdcHandler*> adcHandlers;
 80127ee:	4812      	ldr	r0, [pc, #72]	; (8012838 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80127f0:	f7ff fccb 	bl	801218a <_ZNSt6vectorIP10AdcHandlerSaIS1_EEC1Ev>
std::vector<CommandHandler*> cmdHandlers;
 80127f4:	4811      	ldr	r0, [pc, #68]	; (801283c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80127f6:	f7ff fcee 	bl	80121d6 <_ZNSt6vectorIP14CommandHandlerSaIS1_EEC1Ev>
std::vector<TimerHandler*> timerHandlers;
 80127fa:	4811      	ldr	r0, [pc, #68]	; (8012840 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80127fc:	f7ff fd49 	bl	8012292 <_ZNSt6vectorIP12TimerHandlerSaIS1_EEC1Ev>
std::vector<ExtiHandler*> extiHandlers;
 8012800:	4810      	ldr	r0, [pc, #64]	; (8012844 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8012802:	f7ff fda2 	bl	801234a <_ZNSt6vectorIP11ExtiHandlerSaIS1_EEC1Ev>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d110      	bne.n	801282e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012812:	4293      	cmp	r3, r2
 8012814:	d10b      	bne.n	801282e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8012816:	480b      	ldr	r0, [pc, #44]	; (8012844 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8012818:	f000 f816 	bl	8012848 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EED1Ev>
std::vector<TimerHandler*> timerHandlers;
 801281c:	4808      	ldr	r0, [pc, #32]	; (8012840 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801281e:	f000 f82e 	bl	801287e <_ZNSt6vectorIP12TimerHandlerSaIS1_EED1Ev>
std::vector<CommandHandler*> cmdHandlers;
 8012822:	4806      	ldr	r0, [pc, #24]	; (801283c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012824:	f000 f846 	bl	80128b4 <_ZNSt6vectorIP14CommandHandlerSaIS1_EED1Ev>
std::vector<AdcHandler*> adcHandlers;
 8012828:	4803      	ldr	r0, [pc, #12]	; (8012838 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801282a:	f000 f85e 	bl	80128ea <_ZNSt6vectorIP10AdcHandlerSaIS1_EED1Ev>
}
 801282e:	bf00      	nop
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop
 8012838:	20000790 	.word	0x20000790
 801283c:	2000079c 	.word	0x2000079c
 8012840:	200007b0 	.word	0x200007b0
 8012844:	200007bc 	.word	0x200007bc

08012848 <_ZNSt6vectorIP11ExtiHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8012848:	b5b0      	push	{r4, r5, r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681c      	ldr	r4, [r3, #0]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4618      	mov	r0, r3
 801285c:	f7fa fdcc 	bl	800d3f8 <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012860:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012862:	461a      	mov	r2, r3
 8012864:	4629      	mov	r1, r5
 8012866:	4620      	mov	r0, r4
 8012868:	f7fa fde9 	bl	800d43e <_ZSt8_DestroyIPP11ExtiHandlerS1_EvT_S3_RSaIT0_E>
      }
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	4618      	mov	r0, r3
 8012870:	f7ff fecb 	bl	801260a <_ZNSt12_Vector_baseIP11ExtiHandlerSaIS1_EED1Ev>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	4618      	mov	r0, r3
 8012878:	3708      	adds	r7, #8
 801287a:	46bd      	mov	sp, r7
 801287c:	bdb0      	pop	{r4, r5, r7, pc}

0801287e <_ZNSt6vectorIP12TimerHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801287e:	b5b0      	push	{r4, r5, r7, lr}
 8012880:	b082      	sub	sp, #8
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681c      	ldr	r4, [r3, #0]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4618      	mov	r0, r3
 8012892:	f7ff f97f 	bl	8011b94 <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012896:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012898:	461a      	mov	r2, r3
 801289a:	4629      	mov	r1, r5
 801289c:	4620      	mov	r0, r4
 801289e:	f7ff f99c 	bl	8011bda <_ZSt8_DestroyIPP12TimerHandlerS1_EvT_S3_RSaIT0_E>
      }
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7ff fe61 	bl	801256c <_ZNSt12_Vector_baseIP12TimerHandlerSaIS1_EED1Ev>
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	4618      	mov	r0, r3
 80128ae:	3708      	adds	r7, #8
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bdb0      	pop	{r4, r5, r7, pc}

080128b4 <_ZNSt6vectorIP14CommandHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80128b4:	b5b0      	push	{r4, r5, r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681c      	ldr	r4, [r3, #0]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7f9 fe00 	bl	800c4cc <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 80128cc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80128ce:	461a      	mov	r2, r3
 80128d0:	4629      	mov	r1, r5
 80128d2:	4620      	mov	r0, r4
 80128d4:	f7f9 fe1d 	bl	800c512 <_ZSt8_DestroyIPP14CommandHandlerS1_EvT_S3_RSaIT0_E>
      }
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	4618      	mov	r0, r3
 80128dc:	f7ff fdf7 	bl	80124ce <_ZNSt12_Vector_baseIP14CommandHandlerSaIS1_EED1Ev>
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	4618      	mov	r0, r3
 80128e4:	3708      	adds	r7, #8
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bdb0      	pop	{r4, r5, r7, pc}

080128ea <_ZNSt6vectorIP10AdcHandlerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80128ea:	b5b0      	push	{r4, r5, r7, lr}
 80128ec:	b082      	sub	sp, #8
 80128ee:	af00      	add	r7, sp, #0
 80128f0:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681c      	ldr	r4, [r3, #0]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7f6 ff17 	bl	8009730 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012902:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012904:	461a      	mov	r2, r3
 8012906:	4629      	mov	r1, r5
 8012908:	4620      	mov	r0, r4
 801290a:	f7f6 ff34 	bl	8009776 <_ZSt8_DestroyIPP10AdcHandlerS1_EvT_S3_RSaIT0_E>
      }
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	4618      	mov	r0, r3
 8012912:	f7ff fda7 	bl	8012464 <_ZNSt12_Vector_baseIP10AdcHandlerSaIS1_EED1Ev>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	4618      	mov	r0, r3
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bdb0      	pop	{r4, r5, r7, pc}

08012920 <_GLOBAL__sub_I_adcHandlers>:
 8012920:	b580      	push	{r7, lr}
 8012922:	af00      	add	r7, sp, #0
 8012924:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012928:	2001      	movs	r0, #1
 801292a:	f7ff ff53 	bl	80127d4 <_Z41__static_initialization_and_destruction_0ii>
 801292e:	bd80      	pop	{r7, pc}

08012930 <_GLOBAL__sub_D_adcHandlers>:
 8012930:	b580      	push	{r7, lr}
 8012932:	af00      	add	r7, sp, #0
 8012934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012938:	2000      	movs	r0, #0
 801293a:	f7ff ff4b 	bl	80127d4 <_Z41__static_initialization_and_destruction_0ii>
 801293e:	bd80      	pop	{r7, pc}

08012940 <_Z10updateLedsv>:
#include "ledEffects.h"
#include "main.h"

uint32_t lastTick = 0;

void updateLeds(){
 8012940:	b580      	push	{r7, lr}
 8012942:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - lastTick > 500){
 8012944:	f7ef fc14 	bl	8002170 <HAL_GetTick>
 8012948:	4602      	mov	r2, r0
 801294a:	4b0b      	ldr	r3, [pc, #44]	; (8012978 <_Z10updateLedsv+0x38>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	1ad3      	subs	r3, r2, r3
 8012950:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012954:	bf8c      	ite	hi
 8012956:	2301      	movhi	r3, #1
 8012958:	2300      	movls	r3, #0
 801295a:	b2db      	uxtb	r3, r3
 801295c:	2b00      	cmp	r3, #0
 801295e:	d009      	beq.n	8012974 <_Z10updateLedsv+0x34>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8012960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012964:	4805      	ldr	r0, [pc, #20]	; (801297c <_Z10updateLedsv+0x3c>)
 8012966:	f7f0 fefd 	bl	8003764 <HAL_GPIO_TogglePin>
		lastTick = HAL_GetTick();
 801296a:	f7ef fc01 	bl	8002170 <HAL_GetTick>
 801296e:	4603      	mov	r3, r0
 8012970:	4a01      	ldr	r2, [pc, #4]	; (8012978 <_Z10updateLedsv+0x38>)
 8012972:	6013      	str	r3, [r2, #0]
	}
}
 8012974:	bf00      	nop
 8012976:	bd80      	pop	{r7, pc}
 8012978:	200007cc 	.word	0x200007cc
 801297c:	40011000 	.word	0x40011000

08012980 <_Z11ws2812_initv>:
		{0, 0, bright},
		{0, 0, bright}
};

void ws2812_init(void)
{
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 8012986:	2330      	movs	r3, #48	; 0x30
 8012988:	607b      	str	r3, [r7, #4]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8012990:	da08      	bge.n	80129a4 <_Z11ws2812_initv+0x24>
	  BUF_DMA[i] = LOW;
 8012992:	4a07      	ldr	r2, [pc, #28]	; (80129b0 <_Z11ws2812_initv+0x30>)
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	211a      	movs	r1, #26
 8012998:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(i=DELAY_LEN;i<ARRAY_LEN;i++)
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	3301      	adds	r3, #1
 80129a0:	607b      	str	r3, [r7, #4]
 80129a2:	e7f2      	b.n	801298a <_Z11ws2812_initv+0xa>
}
 80129a4:	bf00      	nop
 80129a6:	370c      	adds	r7, #12
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bc80      	pop	{r7}
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	200007d0 	.word	0x200007d0

080129b4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>:

void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 80129b4:	b490      	push	{r4, r7}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	4604      	mov	r4, r0
 80129bc:	4608      	mov	r0, r1
 80129be:	4611      	mov	r1, r2
 80129c0:	461a      	mov	r2, r3
 80129c2:	4623      	mov	r3, r4
 80129c4:	71fb      	strb	r3, [r7, #7]
 80129c6:	4603      	mov	r3, r0
 80129c8:	71bb      	strb	r3, [r7, #6]
 80129ca:	460b      	mov	r3, r1
 80129cc:	717b      	strb	r3, [r7, #5]
 80129ce:	4613      	mov	r3, r2
 80129d0:	807b      	strh	r3, [r7, #2]
  for(uint16_t i = 0; i < 8; i++)
 80129d2:	2300      	movs	r3, #0
 80129d4:	81fb      	strh	r3, [r7, #14]
 80129d6:	89fb      	ldrh	r3, [r7, #14]
 80129d8:	2b07      	cmp	r3, #7
 80129da:	d850      	bhi.n	8012a7e <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xca>
  {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = BitIsSet(Rpixel,(7-i)) ? HIGH : LOW;
 80129dc:	79fa      	ldrb	r2, [r7, #7]
 80129de:	89fb      	ldrh	r3, [r7, #14]
 80129e0:	f1c3 0307 	rsb	r3, r3, #7
 80129e4:	fa42 f303 	asr.w	r3, r2, r3
 80129e8:	f003 0301 	and.w	r3, r3, #1
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d001      	beq.n	80129f4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x40>
 80129f0:	2141      	movs	r1, #65	; 0x41
 80129f2:	e000      	b.n	80129f6 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x42>
 80129f4:	211a      	movs	r1, #26
 80129f6:	887a      	ldrh	r2, [r7, #2]
 80129f8:	4613      	mov	r3, r2
 80129fa:	005b      	lsls	r3, r3, #1
 80129fc:	4413      	add	r3, r2
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012a04:	89fb      	ldrh	r3, [r7, #14]
 8012a06:	4413      	add	r3, r2
 8012a08:	4a1f      	ldr	r2, [pc, #124]	; (8012a88 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 8012a0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      BUF_DMA[DELAY_LEN+posX*24+i+8] = BitIsSet(Gpixel,(7-i)) ? HIGH : LOW;
 8012a0e:	79ba      	ldrb	r2, [r7, #6]
 8012a10:	89fb      	ldrh	r3, [r7, #14]
 8012a12:	f1c3 0307 	rsb	r3, r3, #7
 8012a16:	fa42 f303 	asr.w	r3, r2, r3
 8012a1a:	f003 0301 	and.w	r3, r3, #1
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x72>
 8012a22:	2141      	movs	r1, #65	; 0x41
 8012a24:	e000      	b.n	8012a28 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x74>
 8012a26:	211a      	movs	r1, #26
 8012a28:	887a      	ldrh	r2, [r7, #2]
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	005b      	lsls	r3, r3, #1
 8012a2e:	4413      	add	r3, r2
 8012a30:	00db      	lsls	r3, r3, #3
 8012a32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012a36:	89fb      	ldrh	r3, [r7, #14]
 8012a38:	4413      	add	r3, r2
 8012a3a:	3308      	adds	r3, #8
 8012a3c:	4a12      	ldr	r2, [pc, #72]	; (8012a88 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 8012a3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      BUF_DMA[DELAY_LEN+posX*24+i+16] = BitIsSet(Bpixel,(7-i)) ? HIGH : LOW;
 8012a42:	797a      	ldrb	r2, [r7, #5]
 8012a44:	89fb      	ldrh	r3, [r7, #14]
 8012a46:	f1c3 0307 	rsb	r3, r3, #7
 8012a4a:	fa42 f303 	asr.w	r3, r2, r3
 8012a4e:	f003 0301 	and.w	r3, r3, #1
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d001      	beq.n	8012a5a <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xa6>
 8012a56:	2141      	movs	r1, #65	; 0x41
 8012a58:	e000      	b.n	8012a5c <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xa8>
 8012a5a:	211a      	movs	r1, #26
 8012a5c:	887a      	ldrh	r2, [r7, #2]
 8012a5e:	4613      	mov	r3, r2
 8012a60:	005b      	lsls	r3, r3, #1
 8012a62:	4413      	add	r3, r2
 8012a64:	00db      	lsls	r3, r3, #3
 8012a66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012a6a:	89fb      	ldrh	r3, [r7, #14]
 8012a6c:	4413      	add	r3, r2
 8012a6e:	3310      	adds	r3, #16
 8012a70:	4a05      	ldr	r2, [pc, #20]	; (8012a88 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0xd4>)
 8012a72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint16_t i = 0; i < 8; i++)
 8012a76:	89fb      	ldrh	r3, [r7, #14]
 8012a78:	3301      	adds	r3, #1
 8012a7a:	81fb      	strh	r3, [r7, #14]
 8012a7c:	e7ab      	b.n	80129d6 <_Z27ws2812_pixel_rgb_to_buf_dmahhht+0x22>
  }
}
 8012a7e:	bf00      	nop
 8012a80:	3710      	adds	r7, #16
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bc90      	pop	{r4, r7}
 8012a86:	4770      	bx	lr
 8012a88:	200007d0 	.word	0x200007d0

08012a8c <_Z16setup_rpm_ws2812h>:

void setup_rpm_ws2812(uint8_t rgb_array)
{
 8012a8c:	b590      	push	{r4, r7, lr}
 8012a8e:	b085      	sub	sp, #20
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	4603      	mov	r3, r0
 8012a94:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i < LED_COUNT; i++)
 8012a96:	2300      	movs	r3, #0
 8012a98:	81fb      	strh	r3, [r7, #14]
 8012a9a:	89fb      	ldrh	r3, [r7, #14]
 8012a9c:	2b0f      	cmp	r3, #15
 8012a9e:	d829      	bhi.n	8012af4 <_Z16setup_rpm_ws2812h+0x68>
	{
		if(i < rgb_array)
 8012aa0:	79fb      	ldrb	r3, [r7, #7]
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	89fa      	ldrh	r2, [r7, #14]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d21a      	bcs.n	8012ae0 <_Z16setup_rpm_ws2812h+0x54>
			ws2812_pixel_rgb_to_buf_dma(LED_RPM[i].R, LED_RPM[i].G, LED_RPM[i].B, i);
 8012aaa:	89fa      	ldrh	r2, [r7, #14]
 8012aac:	4913      	ldr	r1, [pc, #76]	; (8012afc <_Z16setup_rpm_ws2812h+0x70>)
 8012aae:	4613      	mov	r3, r2
 8012ab0:	005b      	lsls	r3, r3, #1
 8012ab2:	4413      	add	r3, r2
 8012ab4:	440b      	add	r3, r1
 8012ab6:	7818      	ldrb	r0, [r3, #0]
 8012ab8:	89fa      	ldrh	r2, [r7, #14]
 8012aba:	4910      	ldr	r1, [pc, #64]	; (8012afc <_Z16setup_rpm_ws2812h+0x70>)
 8012abc:	4613      	mov	r3, r2
 8012abe:	005b      	lsls	r3, r3, #1
 8012ac0:	4413      	add	r3, r2
 8012ac2:	440b      	add	r3, r1
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	7819      	ldrb	r1, [r3, #0]
 8012ac8:	89fa      	ldrh	r2, [r7, #14]
 8012aca:	4c0c      	ldr	r4, [pc, #48]	; (8012afc <_Z16setup_rpm_ws2812h+0x70>)
 8012acc:	4613      	mov	r3, r2
 8012ace:	005b      	lsls	r3, r3, #1
 8012ad0:	4413      	add	r3, r2
 8012ad2:	4423      	add	r3, r4
 8012ad4:	3302      	adds	r3, #2
 8012ad6:	781a      	ldrb	r2, [r3, #0]
 8012ad8:	89fb      	ldrh	r3, [r7, #14]
 8012ada:	f7ff ff6b 	bl	80129b4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
 8012ade:	e005      	b.n	8012aec <_Z16setup_rpm_ws2812h+0x60>
		else
			ws2812_pixel_rgb_to_buf_dma(0, 0, 0, i);
 8012ae0:	89fb      	ldrh	r3, [r7, #14]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	2100      	movs	r1, #0
 8012ae6:	2000      	movs	r0, #0
 8012ae8:	f7ff ff64 	bl	80129b4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
	for(uint16_t i = 0; i < LED_COUNT; i++)
 8012aec:	89fb      	ldrh	r3, [r7, #14]
 8012aee:	3301      	adds	r3, #1
 8012af0:	81fb      	strh	r3, [r7, #14]
 8012af2:	e7d2      	b.n	8012a9a <_Z16setup_rpm_ws2812h+0xe>
	}
}
 8012af4:	bf00      	nop
 8012af6:	3714      	adds	r7, #20
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd90      	pop	{r4, r7, pc}
 8012afc:	20000ec0 	.word	0x20000ec0

08012b00 <_Z12setup_ws2812P3RGBh>:

void setup_ws2812(RGB* rgb_array, uint8_t size)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	460b      	mov	r3, r1
 8012b0a:	70fb      	strb	r3, [r7, #3]
	for(uint16_t i = 0; i < size; i++)
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	81fb      	strh	r3, [r7, #14]
 8012b10:	78fb      	ldrb	r3, [r7, #3]
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	89fa      	ldrh	r2, [r7, #14]
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d21b      	bcs.n	8012b52 <_Z12setup_ws2812P3RGBh+0x52>
	{
		ws2812_pixel_rgb_to_buf_dma(rgb_array[i].R, rgb_array[i].G, rgb_array[i].B, i);
 8012b1a:	89fa      	ldrh	r2, [r7, #14]
 8012b1c:	4613      	mov	r3, r2
 8012b1e:	005b      	lsls	r3, r3, #1
 8012b20:	4413      	add	r3, r2
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	4413      	add	r3, r2
 8012b26:	7818      	ldrb	r0, [r3, #0]
 8012b28:	89fa      	ldrh	r2, [r7, #14]
 8012b2a:	4613      	mov	r3, r2
 8012b2c:	005b      	lsls	r3, r3, #1
 8012b2e:	4413      	add	r3, r2
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	4413      	add	r3, r2
 8012b34:	7859      	ldrb	r1, [r3, #1]
 8012b36:	89fa      	ldrh	r2, [r7, #14]
 8012b38:	4613      	mov	r3, r2
 8012b3a:	005b      	lsls	r3, r3, #1
 8012b3c:	4413      	add	r3, r2
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	4413      	add	r3, r2
 8012b42:	789a      	ldrb	r2, [r3, #2]
 8012b44:	89fb      	ldrh	r3, [r7, #14]
 8012b46:	f7ff ff35 	bl	80129b4 <_Z27ws2812_pixel_rgb_to_buf_dmahhht>
	for(uint16_t i = 0; i < size; i++)
 8012b4a:	89fb      	ldrh	r3, [r7, #14]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	81fb      	strh	r3, [r7, #14]
 8012b50:	e7de      	b.n	8012b10 <_Z12setup_ws2812P3RGBh+0x10>
	}
}
 8012b52:	bf00      	nop
 8012b54:	3710      	adds	r7, #16
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
	...

08012b5c <_Z41__static_initialization_and_destruction_0ii>:
 8012b5c:	b480      	push	{r7}
 8012b5e:	b083      	sub	sp, #12
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d159      	bne.n	8012c20 <_Z41__static_initialization_and_destruction_0ii+0xc4>
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d154      	bne.n	8012c20 <_Z41__static_initialization_and_destruction_0ii+0xc4>
};
 8012b76:	4b2d      	ldr	r3, [pc, #180]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b78:	781a      	ldrb	r2, [r3, #0]
 8012b7a:	4b2d      	ldr	r3, [pc, #180]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b7c:	705a      	strb	r2, [r3, #1]
 8012b7e:	4b2b      	ldr	r3, [pc, #172]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b80:	781a      	ldrb	r2, [r3, #0]
 8012b82:	4b2b      	ldr	r3, [pc, #172]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b84:	711a      	strb	r2, [r3, #4]
 8012b86:	4b29      	ldr	r3, [pc, #164]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b88:	781a      	ldrb	r2, [r3, #0]
 8012b8a:	4b29      	ldr	r3, [pc, #164]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b8c:	71da      	strb	r2, [r3, #7]
 8012b8e:	4b27      	ldr	r3, [pc, #156]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b90:	781a      	ldrb	r2, [r3, #0]
 8012b92:	4b27      	ldr	r3, [pc, #156]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b94:	729a      	strb	r2, [r3, #10]
 8012b96:	4b25      	ldr	r3, [pc, #148]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012b98:	781a      	ldrb	r2, [r3, #0]
 8012b9a:	4b25      	ldr	r3, [pc, #148]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012b9c:	731a      	strb	r2, [r3, #12]
 8012b9e:	4b23      	ldr	r3, [pc, #140]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012ba0:	781a      	ldrb	r2, [r3, #0]
 8012ba2:	4b23      	ldr	r3, [pc, #140]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012ba4:	735a      	strb	r2, [r3, #13]
 8012ba6:	4b21      	ldr	r3, [pc, #132]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012ba8:	781a      	ldrb	r2, [r3, #0]
 8012baa:	4b21      	ldr	r3, [pc, #132]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bac:	73da      	strb	r2, [r3, #15]
 8012bae:	4b1f      	ldr	r3, [pc, #124]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012bb0:	781a      	ldrb	r2, [r3, #0]
 8012bb2:	4b1f      	ldr	r3, [pc, #124]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bb4:	741a      	strb	r2, [r3, #16]
 8012bb6:	4b1d      	ldr	r3, [pc, #116]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012bb8:	781a      	ldrb	r2, [r3, #0]
 8012bba:	4b1d      	ldr	r3, [pc, #116]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bbc:	749a      	strb	r2, [r3, #18]
 8012bbe:	4b1b      	ldr	r3, [pc, #108]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012bc0:	781a      	ldrb	r2, [r3, #0]
 8012bc2:	4b1b      	ldr	r3, [pc, #108]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bc4:	74da      	strb	r2, [r3, #19]
 8012bc6:	4b19      	ldr	r3, [pc, #100]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012bc8:	781a      	ldrb	r2, [r3, #0]
 8012bca:	4b19      	ldr	r3, [pc, #100]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bcc:	755a      	strb	r2, [r3, #21]
 8012bce:	4b17      	ldr	r3, [pc, #92]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012bd0:	781a      	ldrb	r2, [r3, #0]
 8012bd2:	4b17      	ldr	r3, [pc, #92]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bd4:	759a      	strb	r2, [r3, #22]
 8012bd6:	4b15      	ldr	r3, [pc, #84]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012bd8:	781a      	ldrb	r2, [r3, #0]
 8012bda:	4b15      	ldr	r3, [pc, #84]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bdc:	761a      	strb	r2, [r3, #24]
 8012bde:	4b13      	ldr	r3, [pc, #76]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012be0:	781a      	ldrb	r2, [r3, #0]
 8012be2:	4b13      	ldr	r3, [pc, #76]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012be4:	76da      	strb	r2, [r3, #27]
 8012be6:	4b11      	ldr	r3, [pc, #68]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012be8:	781a      	ldrb	r2, [r3, #0]
 8012bea:	4b11      	ldr	r3, [pc, #68]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bec:	779a      	strb	r2, [r3, #30]
 8012bee:	4b0f      	ldr	r3, [pc, #60]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012bf0:	781a      	ldrb	r2, [r3, #0]
 8012bf2:	4b0f      	ldr	r3, [pc, #60]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8012bf8:	4b0c      	ldr	r3, [pc, #48]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012bfa:	781a      	ldrb	r2, [r3, #0]
 8012bfc:	4b0c      	ldr	r3, [pc, #48]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012bfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012c02:	4b0a      	ldr	r3, [pc, #40]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012c04:	781a      	ldrb	r2, [r3, #0]
 8012c06:	4b0a      	ldr	r3, [pc, #40]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012c08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8012c0c:	4b07      	ldr	r3, [pc, #28]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012c0e:	781a      	ldrb	r2, [r3, #0]
 8012c10:	4b07      	ldr	r3, [pc, #28]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012c12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012c16:	4b05      	ldr	r3, [pc, #20]	; (8012c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8012c18:	781a      	ldrb	r2, [r3, #0]
 8012c1a:	4b05      	ldr	r3, [pc, #20]	; (8012c30 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8012c1c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8012c20:	bf00      	nop
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bc80      	pop	{r7}
 8012c28:	4770      	bx	lr
 8012c2a:	bf00      	nop
 8012c2c:	2000001c 	.word	0x2000001c
 8012c30:	20000ec0 	.word	0x20000ec0

08012c34 <_GLOBAL__sub_I_BUF_DMA>:
 8012c34:	b580      	push	{r7, lr}
 8012c36:	af00      	add	r7, sp, #0
 8012c38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012c3c:	2001      	movs	r0, #1
 8012c3e:	f7ff ff8d 	bl	8012b5c <_Z41__static_initialization_and_destruction_0ii>
 8012c42:	bd80      	pop	{r7, pc}

08012c44 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	460b      	mov	r3, r1
 8012c4e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8012c50:	2300      	movs	r3, #0
 8012c52:	73fb      	strb	r3, [r7, #15]

  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	7c1b      	ldrb	r3, [r3, #16]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d10c      	bne.n	8012c76 <USBD_CDC_Init+0x32>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8012c5c:	2340      	movs	r3, #64	; 0x40
 8012c5e:	2202      	movs	r2, #2
 8012c60:	2181      	movs	r1, #129	; 0x81
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 ff21 	bl	8013aaa <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8012c68:	2340      	movs	r3, #64	; 0x40
 8012c6a:	2202      	movs	r2, #2
 8012c6c:	2101      	movs	r1, #1
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f000 ff1b 	bl	8013aaa <USBD_LL_OpenEP>
 8012c74:	e00b      	b.n	8012c8e <USBD_CDC_Init+0x4a>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8012c76:	2340      	movs	r3, #64	; 0x40
 8012c78:	2202      	movs	r2, #2
 8012c7a:	2181      	movs	r1, #129	; 0x81
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f000 ff14 	bl	8013aaa <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8012c82:	2340      	movs	r3, #64	; 0x40
 8012c84:	2202      	movs	r2, #2
 8012c86:	2101      	movs	r1, #1
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 ff0e 	bl	8013aaa <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8012c8e:	2308      	movs	r3, #8
 8012c90:	2203      	movs	r2, #3
 8012c92:	2182      	movs	r1, #130	; 0x82
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f000 ff08 	bl	8013aaa <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  hcdc = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8012c9a:	205a      	movs	r0, #90	; 0x5a
 8012c9c:	f003 fd6a 	bl	8016774 <malloc>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	4b2c      	ldr	r3, [pc, #176]	; (8012d58 <USBD_CDC_Init+0x114>)
 8012ca6:	601a      	str	r2, [r3, #0]
  pdev->pClassData = hcdc;
 8012ca8:	4b2b      	ldr	r3, [pc, #172]	; (8012d58 <USBD_CDC_Init+0x114>)
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(hcdc == NULL)
 8012cb2:	4b29      	ldr	r3, [pc, #164]	; (8012d58 <USBD_CDC_Init+0x114>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d102      	bne.n	8012cc0 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 8012cba:	2301      	movs	r3, #1
 8012cbc:	73fb      	strb	r3, [r7, #15]
 8012cbe:	e046      	b.n	8012d4e <USBD_CDC_Init+0x10a>
  else
  {

    
    /* Init  physical Interface components */
    fops_cdc_p->Init();
 8012cc0:	4b26      	ldr	r3, [pc, #152]	; (8012d5c <USBD_CDC_Init+0x118>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8012cc8:	4b23      	ldr	r3, [pc, #140]	; (8012d58 <USBD_CDC_Init+0x114>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8012cd6:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8012cda:	2200      	movs	r2, #0
 8012cdc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012ce0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012cea:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8012cee:	2200      	movs	r2, #0
 8012cf0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    hcdc->RxState =0;
 8012cf4:	4b18      	ldr	r3, [pc, #96]	; (8012d58 <USBD_CDC_Init+0x114>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8012d02:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8012d06:	2200      	movs	r2, #0
 8012d08:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8012d0c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8012d10:	2200      	movs	r2, #0
 8012d12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8012d16:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	7c1b      	ldrb	r3, [r3, #16]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d109      	bne.n	8012d3c <USBD_CDC_Init+0xf8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8012d28:	4b0b      	ldr	r3, [pc, #44]	; (8012d58 <USBD_CDC_Init+0x114>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8012d2c:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8012d30:	2340      	movs	r3, #64	; 0x40
 8012d32:	2101      	movs	r1, #1
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f000 ffa2 	bl	8013c7e <USBD_LL_PrepareReceive>
 8012d3a:	e008      	b.n	8012d4e <USBD_CDC_Init+0x10a>
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8012d3c:	4b06      	ldr	r3, [pc, #24]	; (8012d58 <USBD_CDC_Init+0x114>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8012d40:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8012d44:	2340      	movs	r3, #64	; 0x40
 8012d46:	2101      	movs	r1, #1
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f000 ff98 	bl	8013c7e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8012d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	3710      	adds	r7, #16
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	20001814 	.word	0x20001814
 8012d5c:	20001818 	.word	0x20001818

08012d60 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	460b      	mov	r3, r1
 8012d6a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8012d70:	2181      	movs	r1, #129	; 0x81
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f000 febf 	bl	8013af6 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8012d78:	2101      	movs	r1, #1
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f000 febb 	bl	8013af6 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8012d80:	2182      	movs	r1, #130	; 0x82
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f000 feb7 	bl	8013af6 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(hcdc != NULL)
 8012d88:	4b0a      	ldr	r3, [pc, #40]	; (8012db4 <USBD_CDC_DeInit+0x54>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d00b      	beq.n	8012da8 <USBD_CDC_DeInit+0x48>
  {
    fops_cdc_p->DeInit();
 8012d90:	4b09      	ldr	r3, [pc, #36]	; (8012db8 <USBD_CDC_DeInit+0x58>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	4798      	blx	r3
    USBD_free(hcdc);
 8012d98:	4b06      	ldr	r3, [pc, #24]	; (8012db4 <USBD_CDC_DeInit+0x54>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f003 fcf1 	bl	8016784 <free>
    hcdc = NULL;
 8012da2:	4b04      	ldr	r3, [pc, #16]	; (8012db4 <USBD_CDC_DeInit+0x54>)
 8012da4:	2200      	movs	r2, #0
 8012da6:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8012da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3710      	adds	r7, #16
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	20001814 	.word	0x20001814
 8012db8:	20001818 	.word	0x20001818

08012dbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	6039      	str	r1, [r7, #0]

  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d03f      	beq.n	8012e52 <USBD_CDC_Setup+0x96>
 8012dd2:	2b20      	cmp	r3, #32
 8012dd4:	d150      	bne.n	8012e78 <USBD_CDC_Setup+0xbc>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	88db      	ldrh	r3, [r3, #6]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d030      	beq.n	8012e40 <USBD_CDC_Setup+0x84>
    {
      if (req->bmRequest & 0x80)
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	b25b      	sxtb	r3, r3
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	da14      	bge.n	8012e12 <USBD_CDC_Setup+0x56>
      {
        fops_cdc_p->Control(req->bRequest, (uint8_t *)hcdc->data,req->wLength);
 8012de8:	4b26      	ldr	r3, [pc, #152]	; (8012e84 <USBD_CDC_Setup+0xc8>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	689b      	ldr	r3, [r3, #8]
 8012dee:	683a      	ldr	r2, [r7, #0]
 8012df0:	7850      	ldrb	r0, [r2, #1]
 8012df2:	4a25      	ldr	r2, [pc, #148]	; (8012e88 <USBD_CDC_Setup+0xcc>)
 8012df4:	6812      	ldr	r2, [r2, #0]
 8012df6:	4611      	mov	r1, r2
 8012df8:	683a      	ldr	r2, [r7, #0]
 8012dfa:	88d2      	ldrh	r2, [r2, #6]
 8012dfc:	4798      	blx	r3
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8012dfe:	4b22      	ldr	r3, [pc, #136]	; (8012e88 <USBD_CDC_Setup+0xcc>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	4619      	mov	r1, r3
          USBD_CtlSendData (pdev, 
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	88db      	ldrh	r3, [r3, #6]
 8012e08:	461a      	mov	r2, r3
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f002 fab2 	bl	8015374 <USBD_CtlSendData>
    }
    else
    {
      fops_cdc_p->Control(req->bRequest, (uint8_t*)req,0);
    }
    break;
 8012e10:	e033      	b.n	8012e7a <USBD_CDC_Setup+0xbe>
        hcdc->CmdOpCode = req->bRequest;
 8012e12:	4b1d      	ldr	r3, [pc, #116]	; (8012e88 <USBD_CDC_Setup+0xcc>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	683a      	ldr	r2, [r7, #0]
 8012e18:	7852      	ldrb	r2, [r2, #1]
 8012e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hcdc->CmdLength = req->wLength;
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	88da      	ldrh	r2, [r3, #6]
 8012e22:	4b19      	ldr	r3, [pc, #100]	; (8012e88 <USBD_CDC_Setup+0xcc>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	b2d2      	uxtb	r2, r2
 8012e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                           (uint8_t *)hcdc->data,
 8012e2c:	4b16      	ldr	r3, [pc, #88]	; (8012e88 <USBD_CDC_Setup+0xcc>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	4619      	mov	r1, r3
        USBD_CtlPrepareRx (pdev, 
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	88db      	ldrh	r3, [r3, #6]
 8012e36:	461a      	mov	r2, r3
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f002 fac9 	bl	80153d0 <USBD_CtlPrepareRx>
    break;
 8012e3e:	e01c      	b.n	8012e7a <USBD_CDC_Setup+0xbe>
      fops_cdc_p->Control(req->bRequest, (uint8_t*)req,0);
 8012e40:	4b10      	ldr	r3, [pc, #64]	; (8012e84 <USBD_CDC_Setup+0xc8>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	689b      	ldr	r3, [r3, #8]
 8012e46:	683a      	ldr	r2, [r7, #0]
 8012e48:	7850      	ldrb	r0, [r2, #1]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	6839      	ldr	r1, [r7, #0]
 8012e4e:	4798      	blx	r3
    break;
 8012e50:	e013      	b.n	8012e7a <USBD_CDC_Setup+0xbe>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	785b      	ldrb	r3, [r3, #1]
 8012e56:	2b0b      	cmp	r3, #11
 8012e58:	d00b      	beq.n	8012e72 <USBD_CDC_Setup+0xb6>
 8012e5a:	2b0b      	cmp	r3, #11
 8012e5c:	dc0c      	bgt.n	8012e78 <USBD_CDC_Setup+0xbc>
 8012e5e:	2b06      	cmp	r3, #6
 8012e60:	d009      	beq.n	8012e76 <USBD_CDC_Setup+0xba>
 8012e62:	2b0a      	cmp	r3, #10
 8012e64:	d108      	bne.n	8012e78 <USBD_CDC_Setup+0xbc>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8012e66:	2201      	movs	r2, #1
 8012e68:	4908      	ldr	r1, [pc, #32]	; (8012e8c <USBD_CDC_Setup+0xd0>)
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f002 fa82 	bl	8015374 <USBD_CtlSendData>
                        &ifalt,
                        1);
      break;
 8012e70:	e002      	b.n	8012e78 <USBD_CDC_Setup+0xbc>
      
    case USB_REQ_SET_INTERFACE :
      break;
 8012e72:	bf00      	nop
 8012e74:	e000      	b.n	8012e78 <USBD_CDC_Setup+0xbc>
		USBD_CtlSendData (pdev,	pbuf,len);
	  }


*/
	  break;
 8012e76:	bf00      	nop
    }
 
  default: 
    break;
 8012e78:	bf00      	nop
  }
  return USBD_OK;
 8012e7a:	2300      	movs	r3, #0
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}
 8012e84:	20001818 	.word	0x20001818
 8012e88:	20001814 	.word	0x20001814
 8012e8c:	20000ef0 	.word	0x20000ef0

08012e90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b083      	sub	sp, #12
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	460b      	mov	r3, r1
 8012e9a:	70fb      	strb	r3, [r7, #3]

  
  if(hcdc != NULL)
 8012e9c:	4b10      	ldr	r3, [pc, #64]	; (8012ee0 <USBD_CDC_DataIn+0x50>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d017      	beq.n	8012ed4 <USBD_CDC_DataIn+0x44>
  {
    
    hcdc->TxState = 0;
 8012ea4:	4b0e      	ldr	r3, [pc, #56]	; (8012ee0 <USBD_CDC_DataIn+0x50>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8012eac:	2200      	movs	r2, #0
 8012eae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8012eb2:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012ebc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012ec6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8012eca:	2200      	movs	r2, #0
 8012ecc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    return USBD_OK;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	e000      	b.n	8012ed6 <USBD_CDC_DataIn+0x46>
  }
  else
  {
    return USBD_FAIL;
 8012ed4:	2302      	movs	r3, #2
  }
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	370c      	adds	r7, #12
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bc80      	pop	{r7}
 8012ede:	4770      	bx	lr
 8012ee0:	20001814 	.word	0x20001814

08012ee4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8012ee4:	b590      	push	{r4, r7, lr}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
 8012eec:	460b      	mov	r3, r1
 8012eee:	70fb      	strb	r3, [r7, #3]

  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8012ef0:	4b10      	ldr	r3, [pc, #64]	; (8012f34 <USBD_CDC_DataOut+0x50>)
 8012ef2:	681c      	ldr	r4, [r3, #0]
 8012ef4:	78fb      	ldrb	r3, [r7, #3]
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 fee3 	bl	8013cc4 <USBD_LL_GetRxDataSize>
 8012efe:	4603      	mov	r3, r0
 8012f00:	f8c4 304a 	str.w	r3, [r4, #74]	; 0x4a
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(hcdc != NULL)
 8012f04:	4b0b      	ldr	r3, [pc, #44]	; (8012f34 <USBD_CDC_DataOut+0x50>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d00d      	beq.n	8012f28 <USBD_CDC_DataOut+0x44>
  {
    fops_cdc_p->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012f0c:	4b0a      	ldr	r3, [pc, #40]	; (8012f38 <USBD_CDC_DataOut+0x54>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	4a08      	ldr	r2, [pc, #32]	; (8012f34 <USBD_CDC_DataOut+0x50>)
 8012f14:	6812      	ldr	r2, [r2, #0]
 8012f16:	f8d2 0042 	ldr.w	r0, [r2, #66]	; 0x42
 8012f1a:	4a06      	ldr	r2, [pc, #24]	; (8012f34 <USBD_CDC_DataOut+0x50>)
 8012f1c:	6812      	ldr	r2, [r2, #0]
 8012f1e:	324a      	adds	r2, #74	; 0x4a
 8012f20:	4611      	mov	r1, r2
 8012f22:	4798      	blx	r3

    return USBD_OK;
 8012f24:	2300      	movs	r3, #0
 8012f26:	e000      	b.n	8012f2a <USBD_CDC_DataOut+0x46>
  }
  else
  {
    return USBD_FAIL;
 8012f28:	2302      	movs	r3, #2
  }
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	370c      	adds	r7, #12
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd90      	pop	{r4, r7, pc}
 8012f32:	bf00      	nop
 8012f34:	20001814 	.word	0x20001814
 8012f38:	20001818 	.word	0x20001818

08012f3c <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]

  
  if((fops_cdc_p != NULL) && (hcdc->CmdOpCode != 0xFF))
 8012f44:	4b11      	ldr	r3, [pc, #68]	; (8012f8c <USBD_CDC_EP0_RxReady+0x50>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d01a      	beq.n	8012f82 <USBD_CDC_EP0_RxReady+0x46>
 8012f4c:	4b10      	ldr	r3, [pc, #64]	; (8012f90 <USBD_CDC_EP0_RxReady+0x54>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012f54:	2bff      	cmp	r3, #255	; 0xff
 8012f56:	d014      	beq.n	8012f82 <USBD_CDC_EP0_RxReady+0x46>
  {
    fops_cdc_p->Control(hcdc->CmdOpCode,
 8012f58:	4b0c      	ldr	r3, [pc, #48]	; (8012f8c <USBD_CDC_EP0_RxReady+0x50>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	689b      	ldr	r3, [r3, #8]
 8012f5e:	4a0c      	ldr	r2, [pc, #48]	; (8012f90 <USBD_CDC_EP0_RxReady+0x54>)
 8012f60:	6812      	ldr	r2, [r2, #0]
 8012f62:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                      (uint8_t *)hcdc->data,
 8012f66:	4a0a      	ldr	r2, [pc, #40]	; (8012f90 <USBD_CDC_EP0_RxReady+0x54>)
 8012f68:	6812      	ldr	r2, [r2, #0]
 8012f6a:	4611      	mov	r1, r2
                                                      hcdc->CmdLength);
 8012f6c:	4a08      	ldr	r2, [pc, #32]	; (8012f90 <USBD_CDC_EP0_RxReady+0x54>)
 8012f6e:	6812      	ldr	r2, [r2, #0]
 8012f70:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    fops_cdc_p->Control(hcdc->CmdOpCode,
 8012f74:	b292      	uxth	r2, r2
 8012f76:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8012f78:	4b05      	ldr	r3, [pc, #20]	; (8012f90 <USBD_CDC_EP0_RxReady+0x54>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	22ff      	movs	r2, #255	; 0xff
 8012f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
  }
  return USBD_OK;
 8012f82:	2300      	movs	r3, #0
}
 8012f84:	4618      	mov	r0, r3
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	20001818 	.word	0x20001818
 8012f90:	20001814 	.word	0x20001814

08012f94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	224b      	movs	r2, #75	; 0x4b
 8012fa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012fa2:	4b03      	ldr	r3, [pc, #12]	; (8012fb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	370c      	adds	r7, #12
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bc80      	pop	{r7}
 8012fac:	4770      	bx	lr
 8012fae:	bf00      	nop
 8012fb0:	20000064 	.word	0x20000064

08012fb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b083      	sub	sp, #12
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	224b      	movs	r2, #75	; 0x4b
 8012fc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012fc2:	4b03      	ldr	r3, [pc, #12]	; (8012fd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	370c      	adds	r7, #12
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bc80      	pop	{r7}
 8012fcc:	4770      	bx	lr
 8012fce:	bf00      	nop
 8012fd0:	20000064 	.word	0x20000064

08012fd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	224b      	movs	r2, #75	; 0x4b
 8012fe0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8012fe2:	4b03      	ldr	r3, [pc, #12]	; (8012ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	370c      	adds	r7, #12
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bc80      	pop	{r7}
 8012fec:	4770      	bx	lr
 8012fee:	bf00      	nop
 8012ff0:	20000064 	.word	0x20000064

08012ff4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b083      	sub	sp, #12
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	220a      	movs	r2, #10
 8013000:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8013002:	4b03      	ldr	r3, [pc, #12]	; (8013010 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013004:	4618      	mov	r0, r3
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	bc80      	pop	{r7}
 801300c:	4770      	bx	lr
 801300e:	bf00      	nop
 8013010:	20000020 	.word	0x20000020

08013014 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8013014:	b480      	push	{r7}
 8013016:	b085      	sub	sp, #20
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801301e:	2302      	movs	r3, #2
 8013020:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d008      	beq.n	801303a <USBD_CDC_RegisterInterface+0x26>
  {
    fops_cdc_p= fops;
 8013028:	4a07      	ldr	r2, [pc, #28]	; (8013048 <USBD_CDC_RegisterInterface+0x34>)
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	6013      	str	r3, [r2, #0]
    pdev->pUserData = fops;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	683a      	ldr	r2, [r7, #0]
 8013032:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8013036:	2300      	movs	r3, #0
 8013038:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 801303a:	7bfb      	ldrb	r3, [r7, #15]
}
 801303c:	4618      	mov	r0, r3
 801303e:	3714      	adds	r7, #20
 8013040:	46bd      	mov	sp, r7
 8013042:	bc80      	pop	{r7}
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	20001818 	.word	0x20001818

0801304c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 801304c:	b480      	push	{r7}
 801304e:	b085      	sub	sp, #20
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	4613      	mov	r3, r2
 8013058:	80fb      	strh	r3, [r7, #6]

  
  hcdc->TxBuffer = pbuff;
 801305a:	4b08      	ldr	r3, [pc, #32]	; (801307c <USBD_CDC_SetTxBuffer+0x30>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	68ba      	ldr	r2, [r7, #8]
 8013060:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46
  hcdc->TxLength = length;  
 8013064:	4b05      	ldr	r3, [pc, #20]	; (801307c <USBD_CDC_SetTxBuffer+0x30>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	88fa      	ldrh	r2, [r7, #6]
 801306a:	f8c3 204e 	str.w	r2, [r3, #78]	; 0x4e
  
  return USBD_OK;  
 801306e:	2300      	movs	r3, #0
}
 8013070:	4618      	mov	r0, r3
 8013072:	3714      	adds	r7, #20
 8013074:	46bd      	mov	sp, r7
 8013076:	bc80      	pop	{r7}
 8013078:	4770      	bx	lr
 801307a:	bf00      	nop
 801307c:	20001814 	.word	0x20001814

08013080 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8013080:	b480      	push	{r7}
 8013082:	b083      	sub	sp, #12
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
  
  hcdc->RxBuffer = pbuff;
 801308a:	4b05      	ldr	r3, [pc, #20]	; (80130a0 <USBD_CDC_SetRxBuffer+0x20>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	683a      	ldr	r2, [r7, #0]
 8013090:	f8c3 2042 	str.w	r2, [r3, #66]	; 0x42
  
  return USBD_OK;
 8013094:	2300      	movs	r3, #0
}
 8013096:	4618      	mov	r0, r3
 8013098:	370c      	adds	r7, #12
 801309a:	46bd      	mov	sp, r7
 801309c:	bc80      	pop	{r7}
 801309e:	4770      	bx	lr
 80130a0:	20001814 	.word	0x20001814

080130a4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b082      	sub	sp, #8
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]

  if(hcdc != NULL)
 80130ac:	4b1b      	ldr	r3, [pc, #108]	; (801311c <USBD_CDC_TransmitPacket+0x78>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d02e      	beq.n	8013112 <USBD_CDC_TransmitPacket+0x6e>
  {
    if(hcdc->TxState == 0)
 80130b4:	4b19      	ldr	r3, [pc, #100]	; (801311c <USBD_CDC_TransmitPacket+0x78>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d126      	bne.n	801310e <USBD_CDC_TransmitPacket+0x6a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80130c0:	4b16      	ldr	r3, [pc, #88]	; (801311c <USBD_CDC_TransmitPacket+0x78>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80130c8:	2200      	movs	r2, #0
 80130ca:	f042 0201 	orr.w	r2, r2, #1
 80130ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80130d2:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 80130d6:	2200      	movs	r2, #0
 80130d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80130dc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80130e0:	2200      	movs	r2, #0
 80130e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80130e6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80130ea:	2200      	movs	r2, #0
 80130ec:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
                       CDC_IN_EP,
                       hcdc->TxBuffer,
 80130f0:	4b0a      	ldr	r3, [pc, #40]	; (801311c <USBD_CDC_TransmitPacket+0x78>)
 80130f2:	681b      	ldr	r3, [r3, #0]
      USBD_LL_Transmit(pdev,
 80130f4:	f8d3 2046 	ldr.w	r2, [r3, #70]	; 0x46
                       hcdc->TxLength);
 80130f8:	4b08      	ldr	r3, [pc, #32]	; (801311c <USBD_CDC_TransmitPacket+0x78>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	f8d3 304e 	ldr.w	r3, [r3, #78]	; 0x4e
      USBD_LL_Transmit(pdev,
 8013100:	b29b      	uxth	r3, r3
 8013102:	2181      	movs	r1, #129	; 0x81
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f000 fd97 	bl	8013c38 <USBD_LL_Transmit>
      
      return USBD_OK;
 801310a:	2300      	movs	r3, #0
 801310c:	e002      	b.n	8013114 <USBD_CDC_TransmitPacket+0x70>
    }
    else
    {

      return USBD_BUSY;
 801310e:	2301      	movs	r3, #1
 8013110:	e000      	b.n	8013114 <USBD_CDC_TransmitPacket+0x70>
    }
  }
  else
  {
    return USBD_FAIL;
 8013112:	2302      	movs	r3, #2
  }
}
 8013114:	4618      	mov	r0, r3
 8013116:	3708      	adds	r7, #8
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}
 801311c:	20001814 	.word	0x20001814

08013120 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]

  
  /* Suspend or Resume USB Out process */
  if(hcdc != NULL)
 8013128:	4b10      	ldr	r3, [pc, #64]	; (801316c <USBD_CDC_ReceivePacket+0x4c>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d018      	beq.n	8013162 <USBD_CDC_ReceivePacket+0x42>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	7c1b      	ldrb	r3, [r3, #16]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d109      	bne.n	801314c <USBD_CDC_ReceivePacket+0x2c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 8013138:	4b0c      	ldr	r3, [pc, #48]	; (801316c <USBD_CDC_ReceivePacket+0x4c>)
 801313a:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 801313c:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8013140:	2340      	movs	r3, #64	; 0x40
 8013142:	2101      	movs	r1, #1
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f000 fd9a 	bl	8013c7e <USBD_LL_PrepareReceive>
 801314a:	e008      	b.n	801315e <USBD_CDC_ReceivePacket+0x3e>
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
 801314c:	4b07      	ldr	r3, [pc, #28]	; (801316c <USBD_CDC_ReceivePacket+0x4c>)
 801314e:	681b      	ldr	r3, [r3, #0]
      USBD_LL_PrepareReceive(pdev,
 8013150:	f8d3 2042 	ldr.w	r2, [r3, #66]	; 0x42
 8013154:	2340      	movs	r3, #64	; 0x40
 8013156:	2101      	movs	r1, #1
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f000 fd90 	bl	8013c7e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801315e:	2300      	movs	r3, #0
 8013160:	e000      	b.n	8013164 <USBD_CDC_ReceivePacket+0x44>
  }
  else
  {
    return USBD_FAIL;
 8013162:	2302      	movs	r3, #2
  }
}
 8013164:	4618      	mov	r0, r3
 8013166:	3708      	adds	r7, #8
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	20001814 	.word	0x20001814

08013170 <CDC_Init_FS>:
  CDC_Receive_FS
};


static int8_t CDC_Init_FS(void)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013174:	2200      	movs	r2, #0
 8013176:	4905      	ldr	r1, [pc, #20]	; (801318c <CDC_Init_FS+0x1c>)
 8013178:	4805      	ldr	r0, [pc, #20]	; (8013190 <CDC_Init_FS+0x20>)
 801317a:	f7ff ff67 	bl	801304c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801317e:	4905      	ldr	r1, [pc, #20]	; (8013194 <CDC_Init_FS+0x24>)
 8013180:	4803      	ldr	r0, [pc, #12]	; (8013190 <CDC_Init_FS+0x20>)
 8013182:	f7ff ff7d 	bl	8013080 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013186:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013188:	4618      	mov	r0, r3
 801318a:	bd80      	pop	{r7, pc}
 801318c:	20000f34 	.word	0x20000f34
 8013190:	200015f0 	.word	0x200015f0
 8013194:	20000ef4 	.word	0x20000ef4

08013198 <CDC_DeInit_FS>:


static int8_t CDC_DeInit_FS(void)
{
 8013198:	b480      	push	{r7}
 801319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801319c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801319e:	4618      	mov	r0, r3
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bc80      	pop	{r7}
 80131a4:	4770      	bx	lr
	...

080131a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80131a8:	b480      	push	{r7}
 80131aa:	b085      	sub	sp, #20
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	4603      	mov	r3, r0
 80131b0:	6039      	str	r1, [r7, #0]
 80131b2:	71fb      	strb	r3, [r7, #7]
 80131b4:	4613      	mov	r3, r2
 80131b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80131b8:	79fb      	ldrb	r3, [r7, #7]
 80131ba:	2b23      	cmp	r3, #35	; 0x23
 80131bc:	d867      	bhi.n	801328e <CDC_Control_FS+0xe6>
 80131be:	a201      	add	r2, pc, #4	; (adr r2, 80131c4 <CDC_Control_FS+0x1c>)
 80131c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131c4:	0801328f 	.word	0x0801328f
 80131c8:	0801328f 	.word	0x0801328f
 80131cc:	0801328f 	.word	0x0801328f
 80131d0:	0801328f 	.word	0x0801328f
 80131d4:	0801328f 	.word	0x0801328f
 80131d8:	0801328f 	.word	0x0801328f
 80131dc:	0801328f 	.word	0x0801328f
 80131e0:	0801328f 	.word	0x0801328f
 80131e4:	0801328f 	.word	0x0801328f
 80131e8:	0801328f 	.word	0x0801328f
 80131ec:	0801328f 	.word	0x0801328f
 80131f0:	0801328f 	.word	0x0801328f
 80131f4:	0801328f 	.word	0x0801328f
 80131f8:	0801328f 	.word	0x0801328f
 80131fc:	0801328f 	.word	0x0801328f
 8013200:	0801328f 	.word	0x0801328f
 8013204:	0801328f 	.word	0x0801328f
 8013208:	0801328f 	.word	0x0801328f
 801320c:	0801328f 	.word	0x0801328f
 8013210:	0801328f 	.word	0x0801328f
 8013214:	0801328f 	.word	0x0801328f
 8013218:	0801328f 	.word	0x0801328f
 801321c:	0801328f 	.word	0x0801328f
 8013220:	0801328f 	.word	0x0801328f
 8013224:	0801328f 	.word	0x0801328f
 8013228:	0801328f 	.word	0x0801328f
 801322c:	0801328f 	.word	0x0801328f
 8013230:	0801328f 	.word	0x0801328f
 8013234:	0801328f 	.word	0x0801328f
 8013238:	0801328f 	.word	0x0801328f
 801323c:	0801328f 	.word	0x0801328f
 8013240:	0801328f 	.word	0x0801328f
 8013244:	08013255 	.word	0x08013255
 8013248:	08013267 	.word	0x08013267
 801324c:	08013279 	.word	0x08013279
 8013250:	0801328f 	.word	0x0801328f
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&line_coding,pbuf,sizeof(USBD_CDC_LineCodingTypeDef));
 8013254:	4b11      	ldr	r3, [pc, #68]	; (801329c <CDC_Control_FS+0xf4>)
 8013256:	683a      	ldr	r2, [r7, #0]
 8013258:	6811      	ldr	r1, [r2, #0]
 801325a:	6019      	str	r1, [r3, #0]
 801325c:	8891      	ldrh	r1, [r2, #4]
 801325e:	7992      	ldrb	r2, [r2, #6]
 8013260:	8099      	strh	r1, [r3, #4]
 8013262:	719a      	strb	r2, [r3, #6]
	break;
 8013264:	e014      	b.n	8013290 <CDC_Control_FS+0xe8>

    case CDC_GET_LINE_CODING:
	    memcpy(pbuf,&line_coding,sizeof(USBD_CDC_LineCodingTypeDef));
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	4a0c      	ldr	r2, [pc, #48]	; (801329c <CDC_Control_FS+0xf4>)
 801326a:	6811      	ldr	r1, [r2, #0]
 801326c:	6019      	str	r1, [r3, #0]
 801326e:	8891      	ldrh	r1, [r2, #4]
 8013270:	7992      	ldrb	r2, [r2, #6]
 8013272:	8099      	strh	r1, [r3, #4]
 8013274:	719a      	strb	r2, [r3, #6]
	break;
 8013276:	e00b      	b.n	8013290 <CDC_Control_FS+0xe8>

    case CDC_SET_CONTROL_LINE_STATE:
    {
    	// DTR
    	USBD_SetupReqTypedef* req = (USBD_SetupReqTypedef*)pbuf;
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	60fb      	str	r3, [r7, #12]
    	cdc_dtr = (req->wValue & 0x0001);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	885b      	ldrh	r3, [r3, #2]
 8013280:	b2db      	uxtb	r3, r3
 8013282:	f003 0301 	and.w	r3, r3, #1
 8013286:	b2da      	uxtb	r2, r3
 8013288:	4b05      	ldr	r3, [pc, #20]	; (80132a0 <CDC_Control_FS+0xf8>)
 801328a:	701a      	strb	r2, [r3, #0]
    }
    break;
 801328c:	e000      	b.n	8013290 <CDC_Control_FS+0xe8>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801328e:	bf00      	nop
  }

  return (USBD_OK);
 8013290:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013292:	4618      	mov	r0, r3
 8013294:	3714      	adds	r7, #20
 8013296:	46bd      	mov	sp, r7
 8013298:	bc80      	pop	{r7}
 801329a:	4770      	bx	lr
 801329c:	2000181c 	.word	0x2000181c
 80132a0:	20001134 	.word	0x20001134

080132a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b082      	sub	sp, #8
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  //memcpy(Buf,UserRxBufferFS, length);
	//_write(0,(char*)UserRxBufferFS,*Len);
  CDC_Callback(Buf, Len);
 80132ae:	6839      	ldr	r1, [r7, #0]
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f7ff f857 	bl	8012364 <CDC_Callback>
  //CDC_Transmit_FS(UserRxBufferFS, *Len); //ECHO

	// Prepare next receive
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS); //next buffer
 80132b6:	4906      	ldr	r1, [pc, #24]	; (80132d0 <CDC_Receive_FS+0x2c>)
 80132b8:	4806      	ldr	r0, [pc, #24]	; (80132d4 <CDC_Receive_FS+0x30>)
 80132ba:	f7ff fee1 	bl	8013080 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80132be:	4805      	ldr	r0, [pc, #20]	; (80132d4 <CDC_Receive_FS+0x30>)
 80132c0:	f7ff ff2e 	bl	8013120 <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 80132c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3708      	adds	r7, #8
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	bf00      	nop
 80132d0:	20000ef4 	.word	0x20000ef4
 80132d4:	200015f0 	.word	0x200015f0

080132d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(const char* Buf, uint16_t Len)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	460b      	mov	r3, r1
 80132e2:	807b      	strh	r3, [r7, #2]

  /* USER CODE BEGIN 7 */
  if(hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 80132e4:	4b13      	ldr	r3, [pc, #76]	; (8013334 <CDC_Transmit_FS+0x5c>)
 80132e6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80132ea:	2b03      	cmp	r3, #3
 80132ec:	d001      	beq.n	80132f2 <CDC_Transmit_FS+0x1a>
	  return USBD_FAIL;
 80132ee:	2302      	movs	r3, #2
 80132f0:	e01c      	b.n	801332c <CDC_Transmit_FS+0x54>
  uint8_t result = USBD_OK;
 80132f2:	2300      	movs	r3, #0
 80132f4:	73fb      	strb	r3, [r7, #15]
  uint32_t size = sizeof(uint8_t) * Len;
 80132f6:	887b      	ldrh	r3, [r7, #2]
 80132f8:	60bb      	str	r3, [r7, #8]
//  uint32_t additional_length = 0;

//  if(hcdc->TxState != 0)
//	  additional_length = hcdc->TxLength;

  size = size < APP_TX_DATA_SIZE ? size : APP_TX_DATA_SIZE;
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013300:	bf28      	it	cs
 8013302:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013306:	60bb      	str	r3, [r7, #8]

  memcpy(UserTxBufferFS, Buf, size);
 8013308:	68ba      	ldr	r2, [r7, #8]
 801330a:	6879      	ldr	r1, [r7, #4]
 801330c:	480a      	ldr	r0, [pc, #40]	; (8013338 <CDC_Transmit_FS+0x60>)
 801330e:	f003 fa5d 	bl	80167cc <memcpy>


  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, size);
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	b29b      	uxth	r3, r3
 8013316:	461a      	mov	r2, r3
 8013318:	4907      	ldr	r1, [pc, #28]	; (8013338 <CDC_Transmit_FS+0x60>)
 801331a:	4806      	ldr	r0, [pc, #24]	; (8013334 <CDC_Transmit_FS+0x5c>)
 801331c:	f7ff fe96 	bl	801304c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013320:	4804      	ldr	r0, [pc, #16]	; (8013334 <CDC_Transmit_FS+0x5c>)
 8013322:	f7ff febf 	bl	80130a4 <USBD_CDC_TransmitPacket>
 8013326:	4603      	mov	r3, r0
 8013328:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801332a:	7bfb      	ldrb	r3, [r7, #15]
}
 801332c:	4618      	mov	r0, r3
 801332e:	3710      	adds	r7, #16
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	200015f0 	.word	0x200015f0
 8013338:	20000f34 	.word	0x20000f34

0801333c <USBD_Composite_IsoINIncomplete>:
uint8_t config_descriptor_buf[CONFIG_DESC_BUF_SIZE];

uint16_t descriptor_size;


static uint8_t USBD_Composite_IsoINIncomplete  (USBD_HandleTypeDef *pdev , uint8_t epnum){
 801333c:	b480      	push	{r7}
 801333e:	b083      	sub	sp, #12
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	460b      	mov	r3, r1
 8013346:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 8013348:	2300      	movs	r3, #0
}
 801334a:	4618      	mov	r0, r3
 801334c:	370c      	adds	r7, #12
 801334e:	46bd      	mov	sp, r7
 8013350:	bc80      	pop	{r7}
 8013352:	4770      	bx	lr

08013354 <USBD_Composite_IsoOUTIncomplete>:

static uint8_t USBD_Composite_IsoOUTIncomplete  (USBD_HandleTypeDef *pdev , uint8_t epnum){
 8013354:	b480      	push	{r7}
 8013356:	b083      	sub	sp, #12
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	460b      	mov	r3, r1
 801335e:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 8013360:	2300      	movs	r3, #0
}
 8013362:	4618      	mov	r0, r3
 8013364:	370c      	adds	r7, #12
 8013366:	46bd      	mov	sp, r7
 8013368:	bc80      	pop	{r7}
 801336a:	4770      	bx	lr

0801336c <USBD_Composite_SOF>:
static uint8_t  USBD_Composite_SOF (USBD_HandleTypeDef *pdev){
 801336c:	b580      	push	{r7, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
	for(int cls = 0; cls < classes; cls++) {
 8013374:	2300      	movs	r3, #0
 8013376:	60fb      	str	r3, [r7, #12]
 8013378:	e010      	b.n	801339c <USBD_Composite_SOF+0x30>
		if(USBD_Classes[cls]->SOF){
 801337a:	4a0e      	ldr	r2, [pc, #56]	; (80133b4 <USBD_Composite_SOF+0x48>)
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013382:	69db      	ldr	r3, [r3, #28]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d006      	beq.n	8013396 <USBD_Composite_SOF+0x2a>
			USBD_Classes[cls]->SOF(pdev);
 8013388:	4a0a      	ldr	r2, [pc, #40]	; (80133b4 <USBD_Composite_SOF+0x48>)
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013390:	69db      	ldr	r3, [r3, #28]
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	4798      	blx	r3
	for(int cls = 0; cls < classes; cls++) {
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	3301      	adds	r3, #1
 801339a:	60fb      	str	r3, [r7, #12]
 801339c:	4b06      	ldr	r3, [pc, #24]	; (80133b8 <USBD_Composite_SOF+0x4c>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	68fa      	ldr	r2, [r7, #12]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	dbe9      	blt.n	801337a <USBD_Composite_SOF+0xe>
		}
	}
	USB_SOF();
 80133a6:	f7ff f831 	bl	801240c <USB_SOF>
	return USBD_OK;
 80133aa:	2300      	movs	r3, #0
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3710      	adds	r7, #16
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}
 80133b4:	2000113c 	.word	0x2000113c
 80133b8:	20001138 	.word	0x20001138

080133bc <USBD_Composite_EPIN_To_Class>:

void USBD_Composite_EPIN_To_Class(uint8_t ep,uint8_t classid){
 80133bc:	b480      	push	{r7}
 80133be:	b083      	sub	sp, #12
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	4603      	mov	r3, r0
 80133c4:	460a      	mov	r2, r1
 80133c6:	71fb      	strb	r3, [r7, #7]
 80133c8:	4613      	mov	r3, r2
 80133ca:	71bb      	strb	r3, [r7, #6]
	in_endpoint_to_class[ep & 0x7F] = classid;
 80133cc:	79fb      	ldrb	r3, [r7, #7]
 80133ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133d2:	79ba      	ldrb	r2, [r7, #6]
 80133d4:	4903      	ldr	r1, [pc, #12]	; (80133e4 <USBD_Composite_EPIN_To_Class+0x28>)
 80133d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80133da:	bf00      	nop
 80133dc:	370c      	adds	r7, #12
 80133de:	46bd      	mov	sp, r7
 80133e0:	bc80      	pop	{r7}
 80133e2:	4770      	bx	lr
 80133e4:	20001dc4 	.word	0x20001dc4

080133e8 <USBD_Composite_EPOUT_To_Class>:

void USBD_Composite_EPOUT_To_Class(uint8_t ep,uint8_t classid){
 80133e8:	b480      	push	{r7}
 80133ea:	b083      	sub	sp, #12
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	4603      	mov	r3, r0
 80133f0:	460a      	mov	r2, r1
 80133f2:	71fb      	strb	r3, [r7, #7]
 80133f4:	4613      	mov	r3, r2
 80133f6:	71bb      	strb	r3, [r7, #6]
	out_endpoint_to_class[ep & 0x7F] = classid;
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133fe:	79ba      	ldrb	r2, [r7, #6]
 8013400:	4903      	ldr	r1, [pc, #12]	; (8013410 <USBD_Composite_EPOUT_To_Class+0x28>)
 8013402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013406:	bf00      	nop
 8013408:	370c      	adds	r7, #12
 801340a:	46bd      	mov	sp, r7
 801340c:	bc80      	pop	{r7}
 801340e:	4770      	bx	lr
 8013410:	20001d84 	.word	0x20001d84

08013414 <USBD_InitCompositeDescriptor>:
void USBD_Composite_Set_Descriptor(uint8_t *descriptor, uint16_t size) {
    config_descriptor = descriptor;
    descriptor_size = size;
}

void USBD_InitCompositeDescriptor(USB_ConfigDescType* base_desc){
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0;i<CONFIG_DESC_BUF_SIZE;i++){
 801341c:	2300      	movs	r3, #0
 801341e:	81fb      	strh	r3, [r7, #14]
 8013420:	e006      	b.n	8013430 <USBD_InitCompositeDescriptor+0x1c>
		config_descriptor_buf[i] = 0;
 8013422:	89fb      	ldrh	r3, [r7, #14]
 8013424:	4a0b      	ldr	r2, [pc, #44]	; (8013454 <USBD_InitCompositeDescriptor+0x40>)
 8013426:	2100      	movs	r1, #0
 8013428:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0;i<CONFIG_DESC_BUF_SIZE;i++){
 801342a:	89fb      	ldrh	r3, [r7, #14]
 801342c:	3301      	adds	r3, #1
 801342e:	81fb      	strh	r3, [r7, #14]
 8013430:	89fb      	ldrh	r3, [r7, #14]
 8013432:	2bff      	cmp	r3, #255	; 0xff
 8013434:	d9f5      	bls.n	8013422 <USBD_InitCompositeDescriptor+0xe>
	}
	memcpy(config_descriptor_buf,base_desc,sizeof(USB_ConfigDescType));
 8013436:	2209      	movs	r2, #9
 8013438:	6879      	ldr	r1, [r7, #4]
 801343a:	4806      	ldr	r0, [pc, #24]	; (8013454 <USBD_InitCompositeDescriptor+0x40>)
 801343c:	f003 f9c6 	bl	80167cc <memcpy>
	descriptor_size = sizeof(USB_ConfigDescType);
 8013440:	4b05      	ldr	r3, [pc, #20]	; (8013458 <USBD_InitCompositeDescriptor+0x44>)
 8013442:	2209      	movs	r2, #9
 8013444:	801a      	strh	r2, [r3, #0]
	config_descriptor = (uint8_t*)&config_descriptor_buf;
 8013446:	4b05      	ldr	r3, [pc, #20]	; (801345c <USBD_InitCompositeDescriptor+0x48>)
 8013448:	4a02      	ldr	r2, [pc, #8]	; (8013454 <USBD_InitCompositeDescriptor+0x40>)
 801344a:	601a      	str	r2, [r3, #0]
}
 801344c:	bf00      	nop
 801344e:	3710      	adds	r7, #16
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}
 8013454:	20001c84 	.word	0x20001c84
 8013458:	20001824 	.word	0x20001824
 801345c:	20001828 	.word	0x20001828

08013460 <USBD_AddToCompositeDescriptor>:

void USBD_AddToCompositeDescriptor(uint8_t* dev, uint16_t len){
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
 8013468:	460b      	mov	r3, r1
 801346a:	807b      	strh	r3, [r7, #2]
	uint16_t len_base = *dev; // first element contains size of header
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	81fb      	strh	r3, [r7, #14]
	memcpy(&config_descriptor_buf[descriptor_size],dev+len_base,len-len_base);
 8013472:	4b0e      	ldr	r3, [pc, #56]	; (80134ac <USBD_AddToCompositeDescriptor+0x4c>)
 8013474:	881b      	ldrh	r3, [r3, #0]
 8013476:	461a      	mov	r2, r3
 8013478:	4b0d      	ldr	r3, [pc, #52]	; (80134b0 <USBD_AddToCompositeDescriptor+0x50>)
 801347a:	18d0      	adds	r0, r2, r3
 801347c:	89fb      	ldrh	r3, [r7, #14]
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	18d1      	adds	r1, r2, r3
 8013482:	887a      	ldrh	r2, [r7, #2]
 8013484:	89fb      	ldrh	r3, [r7, #14]
 8013486:	1ad3      	subs	r3, r2, r3
 8013488:	461a      	mov	r2, r3
 801348a:	f003 f99f 	bl	80167cc <memcpy>
	descriptor_size+=len-len_base;
 801348e:	887a      	ldrh	r2, [r7, #2]
 8013490:	89fb      	ldrh	r3, [r7, #14]
 8013492:	1ad3      	subs	r3, r2, r3
 8013494:	b29a      	uxth	r2, r3
 8013496:	4b05      	ldr	r3, [pc, #20]	; (80134ac <USBD_AddToCompositeDescriptor+0x4c>)
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	4413      	add	r3, r2
 801349c:	b29a      	uxth	r2, r3
 801349e:	4b03      	ldr	r3, [pc, #12]	; (80134ac <USBD_AddToCompositeDescriptor+0x4c>)
 80134a0:	801a      	strh	r2, [r3, #0]
}
 80134a2:	bf00      	nop
 80134a4:	3710      	adds	r7, #16
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	20001824 	.word	0x20001824
 80134b0:	20001c84 	.word	0x20001c84

080134b4 <USBD_Composite_Set_Classes>:


void USBD_Composite_Set_Classes(USBD_ClassTypeDef* class[],uint8_t num,USB_ConfigDescType* base_desc) {
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b088      	sub	sp, #32
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	460b      	mov	r3, r1
 80134be:	607a      	str	r2, [r7, #4]
 80134c0:	72fb      	strb	r3, [r7, #11]
	uint16_t size = 0;
 80134c2:	2300      	movs	r3, #0
 80134c4:	83fb      	strh	r3, [r7, #30]
	// Count length of descriptors
	for(uint8_t i = 0;i<num;i++){
 80134c6:	2300      	movs	r3, #0
 80134c8:	777b      	strb	r3, [r7, #29]
 80134ca:	e018      	b.n	80134fe <USBD_Composite_Set_Classes+0x4a>
		uint16_t ts = 0;
 80134cc:	2300      	movs	r3, #0
 80134ce:	827b      	strh	r3, [r7, #18]
		uint8_t* d = class[i]->GetFSConfigDescriptor(&ts);
 80134d0:	7f7b      	ldrb	r3, [r7, #29]
 80134d2:	009b      	lsls	r3, r3, #2
 80134d4:	68fa      	ldr	r2, [r7, #12]
 80134d6:	4413      	add	r3, r2
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134dc:	f107 0212 	add.w	r2, r7, #18
 80134e0:	4610      	mov	r0, r2
 80134e2:	4798      	blx	r3
 80134e4:	6178      	str	r0, [r7, #20]
		size += (ts - *d);
 80134e6:	8a7a      	ldrh	r2, [r7, #18]
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	b29b      	uxth	r3, r3
 80134ee:	1ad3      	subs	r3, r2, r3
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	8bfb      	ldrh	r3, [r7, #30]
 80134f4:	4413      	add	r3, r2
 80134f6:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 0;i<num;i++){
 80134f8:	7f7b      	ldrb	r3, [r7, #29]
 80134fa:	3301      	adds	r3, #1
 80134fc:	777b      	strb	r3, [r7, #29]
 80134fe:	7f7a      	ldrb	r2, [r7, #29]
 8013500:	7afb      	ldrb	r3, [r7, #11]
 8013502:	429a      	cmp	r2, r3
 8013504:	d3e2      	bcc.n	80134cc <USBD_Composite_Set_Classes+0x18>
	}
	// Assign length to base descriptor
	base_desc->wTotalLength = size+sizeof(USB_ConfigDescType);
 8013506:	8bfb      	ldrh	r3, [r7, #30]
 8013508:	3309      	adds	r3, #9
 801350a:	b29a      	uxth	r2, r3
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	805a      	strh	r2, [r3, #2]
	USBD_InitCompositeDescriptor(base_desc);
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f7ff ff7f 	bl	8013414 <USBD_InitCompositeDescriptor>

	// Copy class descriptors into composite descriptor
	for(uint8_t i = 0;i<num;i++){
 8013516:	2300      	movs	r3, #0
 8013518:	773b      	strb	r3, [r7, #28]
 801351a:	e01c      	b.n	8013556 <USBD_Composite_Set_Classes+0xa2>
		uint16_t size = 0;
 801351c:	2300      	movs	r3, #0
 801351e:	823b      	strh	r3, [r7, #16]
		USBD_Classes[i] = class[i];
 8013520:	7f3b      	ldrb	r3, [r7, #28]
 8013522:	009b      	lsls	r3, r3, #2
 8013524:	68fa      	ldr	r2, [r7, #12]
 8013526:	441a      	add	r2, r3
 8013528:	7f3b      	ldrb	r3, [r7, #28]
 801352a:	6812      	ldr	r2, [r2, #0]
 801352c:	490f      	ldr	r1, [pc, #60]	; (801356c <USBD_Composite_Set_Classes+0xb8>)
 801352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint8_t* desc = USBD_Classes[i]->GetFSConfigDescriptor(&size);
 8013532:	7f3b      	ldrb	r3, [r7, #28]
 8013534:	4a0d      	ldr	r2, [pc, #52]	; (801356c <USBD_Composite_Set_Classes+0xb8>)
 8013536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801353c:	f107 0210 	add.w	r2, r7, #16
 8013540:	4610      	mov	r0, r2
 8013542:	4798      	blx	r3
 8013544:	61b8      	str	r0, [r7, #24]
		USBD_AddToCompositeDescriptor(desc, size);
 8013546:	8a3b      	ldrh	r3, [r7, #16]
 8013548:	4619      	mov	r1, r3
 801354a:	69b8      	ldr	r0, [r7, #24]
 801354c:	f7ff ff88 	bl	8013460 <USBD_AddToCompositeDescriptor>
	for(uint8_t i = 0;i<num;i++){
 8013550:	7f3b      	ldrb	r3, [r7, #28]
 8013552:	3301      	adds	r3, #1
 8013554:	773b      	strb	r3, [r7, #28]
 8013556:	7f3a      	ldrb	r2, [r7, #28]
 8013558:	7afb      	ldrb	r3, [r7, #11]
 801355a:	429a      	cmp	r2, r3
 801355c:	d3de      	bcc.n	801351c <USBD_Composite_Set_Classes+0x68>
	}

	classes = num;
 801355e:	7afb      	ldrb	r3, [r7, #11]
 8013560:	4a03      	ldr	r2, [pc, #12]	; (8013570 <USBD_Composite_Set_Classes+0xbc>)
 8013562:	6013      	str	r3, [r2, #0]
}
 8013564:	bf00      	nop
 8013566:	3720      	adds	r7, #32
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}
 801356c:	2000113c 	.word	0x2000113c
 8013570:	20001138 	.word	0x20001138

08013574 <USBD_Composite_Init>:

static uint8_t USBD_Composite_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	460b      	mov	r3, r1
 801357e:	70fb      	strb	r3, [r7, #3]
  for(int cls = 0; cls < classes; cls++) {
 8013580:	2300      	movs	r3, #0
 8013582:	60fb      	str	r3, [r7, #12]
 8013584:	e012      	b.n	80135ac <USBD_Composite_Init+0x38>
	  uint8_t ret = USBD_Classes[cls]->Init(pdev, cfgidx);
 8013586:	4a0e      	ldr	r2, [pc, #56]	; (80135c0 <USBD_Composite_Init+0x4c>)
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	78fa      	ldrb	r2, [r7, #3]
 8013592:	4611      	mov	r1, r2
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	4798      	blx	r3
 8013598:	4603      	mov	r3, r0
 801359a:	72fb      	strb	r3, [r7, #11]
      if (ret != USBD_OK) {
 801359c:	7afb      	ldrb	r3, [r7, #11]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d001      	beq.n	80135a6 <USBD_Composite_Init+0x32>
          return USBD_FAIL;
 80135a2:	2302      	movs	r3, #2
 80135a4:	e008      	b.n	80135b8 <USBD_Composite_Init+0x44>
  for(int cls = 0; cls < classes; cls++) {
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	3301      	adds	r3, #1
 80135aa:	60fb      	str	r3, [r7, #12]
 80135ac:	4b05      	ldr	r3, [pc, #20]	; (80135c4 <USBD_Composite_Init+0x50>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	68fa      	ldr	r2, [r7, #12]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	dbe7      	blt.n	8013586 <USBD_Composite_Init+0x12>
      }

  }

  return USBD_OK;
 80135b6:	2300      	movs	r3, #0
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3710      	adds	r7, #16
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	2000113c 	.word	0x2000113c
 80135c4:	20001138 	.word	0x20001138

080135c8 <USBD_Composite_DeInit>:

static uint8_t  USBD_Composite_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b084      	sub	sp, #16
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	460b      	mov	r3, r1
 80135d2:	70fb      	strb	r3, [r7, #3]
  for(int cls = 0; cls < classes; cls++) {
 80135d4:	2300      	movs	r3, #0
 80135d6:	60fb      	str	r3, [r7, #12]
 80135d8:	e012      	b.n	8013600 <USBD_Composite_DeInit+0x38>
	  uint8_t ret = USBD_Classes[cls]->DeInit(pdev, cfgidx);
 80135da:	4a0e      	ldr	r2, [pc, #56]	; (8013614 <USBD_Composite_DeInit+0x4c>)
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	78fa      	ldrb	r2, [r7, #3]
 80135e6:	4611      	mov	r1, r2
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	4798      	blx	r3
 80135ec:	4603      	mov	r3, r0
 80135ee:	72fb      	strb	r3, [r7, #11]
      if (ret != USBD_OK) {
 80135f0:	7afb      	ldrb	r3, [r7, #11]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d001      	beq.n	80135fa <USBD_Composite_DeInit+0x32>
          return USBD_FAIL;
 80135f6:	2302      	movs	r3, #2
 80135f8:	e008      	b.n	801360c <USBD_Composite_DeInit+0x44>
  for(int cls = 0; cls < classes; cls++) {
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	3301      	adds	r3, #1
 80135fe:	60fb      	str	r3, [r7, #12]
 8013600:	4b05      	ldr	r3, [pc, #20]	; (8013618 <USBD_Composite_DeInit+0x50>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	68fa      	ldr	r2, [r7, #12]
 8013606:	429a      	cmp	r2, r3
 8013608:	dbe7      	blt.n	80135da <USBD_Composite_DeInit+0x12>
      }
  }

  return USBD_OK;
 801360a:	2300      	movs	r3, #0
}
 801360c:	4618      	mov	r0, r3
 801360e:	3710      	adds	r7, #16
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	2000113c 	.word	0x2000113c
 8013618:	20001138 	.word	0x20001138

0801361c <USBD_Composite_Setup>:

static uint8_t USBD_Composite_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req) {
 801361c:	b580      	push	{r7, lr}
 801361e:	b084      	sub	sp, #16
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
  uint8_t idx = interface_to_class[req->wIndex & 0x7F];
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	889b      	ldrh	r3, [r3, #4]
 801362a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801362e:	4a21      	ldr	r2, [pc, #132]	; (80136b4 <USBD_Composite_Setup+0x98>)
 8013630:	5cd3      	ldrb	r3, [r2, r3]
 8013632:	72fb      	strb	r3, [r7, #11]

  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801363c:	2b00      	cmp	r3, #0
 801363e:	d00b      	beq.n	8013658 <USBD_Composite_Setup+0x3c>
 8013640:	2b20      	cmp	r3, #32
 8013642:	d132      	bne.n	80136aa <USBD_Composite_Setup+0x8e>
    case USB_REQ_TYPE_CLASS:
    	//TODO Correct class ids?
    	return USBD_Classes[idx]->Setup(pdev, req);
 8013644:	7afb      	ldrb	r3, [r7, #11]
 8013646:	4a1c      	ldr	r2, [pc, #112]	; (80136b8 <USBD_Composite_Setup+0x9c>)
 8013648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801364c:	689b      	ldr	r3, [r3, #8]
 801364e:	6839      	ldr	r1, [r7, #0]
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	4798      	blx	r3
 8013654:	4603      	mov	r3, r0
 8013656:	e029      	b.n	80136ac <USBD_Composite_Setup+0x90>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest) {
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	785b      	ldrb	r3, [r3, #1]
 801365c:	2b06      	cmp	r3, #6
 801365e:	d11a      	bne.n	8013696 <USBD_Composite_Setup+0x7a>

        case USB_REQ_GET_DESCRIPTOR :

          for(int cls = 0; cls < classes; cls++) {
 8013660:	2300      	movs	r3, #0
 8013662:	60fb      	str	r3, [r7, #12]
 8013664:	e011      	b.n	801368a <USBD_Composite_Setup+0x6e>
        	  uint8_t ret = USBD_Classes[cls]->Setup(pdev, req);
 8013666:	4a14      	ldr	r2, [pc, #80]	; (80136b8 <USBD_Composite_Setup+0x9c>)
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801366e:	689b      	ldr	r3, [r3, #8]
 8013670:	6839      	ldr	r1, [r7, #0]
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	4798      	blx	r3
 8013676:	4603      	mov	r3, r0
 8013678:	72bb      	strb	r3, [r7, #10]
            if (ret != USBD_OK) {
 801367a:	7abb      	ldrb	r3, [r7, #10]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <USBD_Composite_Setup+0x68>
              return USBD_FAIL;
 8013680:	2302      	movs	r3, #2
 8013682:	e013      	b.n	80136ac <USBD_Composite_Setup+0x90>
          for(int cls = 0; cls < classes; cls++) {
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	3301      	adds	r3, #1
 8013688:	60fb      	str	r3, [r7, #12]
 801368a:	4b0c      	ldr	r3, [pc, #48]	; (80136bc <USBD_Composite_Setup+0xa0>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	68fa      	ldr	r2, [r7, #12]
 8013690:	429a      	cmp	r2, r3
 8013692:	dbe8      	blt.n	8013666 <USBD_Composite_Setup+0x4a>
            }
          }

        break;
 8013694:	e009      	b.n	80136aa <USBD_Composite_Setup+0x8e>

		case USB_REQ_GET_INTERFACE :
		case USB_REQ_SET_INTERFACE :
		default:

			return USBD_Classes[idx]->Setup(pdev, req);
 8013696:	7afb      	ldrb	r3, [r7, #11]
 8013698:	4a07      	ldr	r2, [pc, #28]	; (80136b8 <USBD_Composite_Setup+0x9c>)
 801369a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801369e:	689b      	ldr	r3, [r3, #8]
 80136a0:	6839      	ldr	r1, [r7, #0]
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	4798      	blx	r3
 80136a6:	4603      	mov	r3, r0
 80136a8:	e000      	b.n	80136ac <USBD_Composite_Setup+0x90>
		  }
  }
  return USBD_OK;
 80136aa:	2300      	movs	r3, #0
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	3710      	adds	r7, #16
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	200000f8 	.word	0x200000f8
 80136b8:	2000113c 	.word	0x2000113c
 80136bc:	20001138 	.word	0x20001138

080136c0 <USBD_Composite_DataIn>:

static uint8_t USBD_Composite_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum) {
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b084      	sub	sp, #16
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	460b      	mov	r3, r1
 80136ca:	70fb      	strb	r3, [r7, #3]
  int class_index;

  class_index = in_endpoint_to_class[epnum];
 80136cc:	78fb      	ldrb	r3, [r7, #3]
 80136ce:	4a0a      	ldr	r2, [pc, #40]	; (80136f8 <USBD_Composite_DataIn+0x38>)
 80136d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136d4:	60fb      	str	r3, [r7, #12]
  uint8_t ret = USBD_Classes[class_index]->DataIn(pdev, epnum);
 80136d6:	4a09      	ldr	r2, [pc, #36]	; (80136fc <USBD_Composite_DataIn+0x3c>)
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136de:	695b      	ldr	r3, [r3, #20]
 80136e0:	78fa      	ldrb	r2, [r7, #3]
 80136e2:	4611      	mov	r1, r2
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	4798      	blx	r3
 80136e8:	4603      	mov	r3, r0
 80136ea:	72fb      	strb	r3, [r7, #11]
  return ret;
 80136ec:	7afb      	ldrb	r3, [r7, #11]
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3710      	adds	r7, #16
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	20001dc4 	.word	0x20001dc4
 80136fc:	2000113c 	.word	0x2000113c

08013700 <USBD_Composite_DataOut>:

static uint8_t USBD_Composite_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	460b      	mov	r3, r1
 801370a:	70fb      	strb	r3, [r7, #3]
  int class_index;

  class_index = out_endpoint_to_class[epnum];
 801370c:	78fb      	ldrb	r3, [r7, #3]
 801370e:	4a0a      	ldr	r2, [pc, #40]	; (8013738 <USBD_Composite_DataOut+0x38>)
 8013710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013714:	60fb      	str	r3, [r7, #12]

  uint8_t ret = USBD_Classes[class_index]->DataOut(pdev, epnum);
 8013716:	4a09      	ldr	r2, [pc, #36]	; (801373c <USBD_Composite_DataOut+0x3c>)
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801371e:	699b      	ldr	r3, [r3, #24]
 8013720:	78fa      	ldrb	r2, [r7, #3]
 8013722:	4611      	mov	r1, r2
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	4798      	blx	r3
 8013728:	4603      	mov	r3, r0
 801372a:	72fb      	strb	r3, [r7, #11]
  return ret;
 801372c:	7afb      	ldrb	r3, [r7, #11]

}
 801372e:	4618      	mov	r0, r3
 8013730:	3710      	adds	r7, #16
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
 8013736:	bf00      	nop
 8013738:	20001d84 	.word	0x20001d84
 801373c:	2000113c 	.word	0x2000113c

08013740 <USBD_Composite_EP0_RxReady>:

static uint8_t USBD_Composite_EP0_RxReady (USBD_HandleTypeDef *pdev) {
 8013740:	b580      	push	{r7, lr}
 8013742:	b084      	sub	sp, #16
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
  for(int cls = 0; cls < classes; cls++) {
 8013748:	2300      	movs	r3, #0
 801374a:	60fb      	str	r3, [r7, #12]
 801374c:	e017      	b.n	801377e <USBD_Composite_EP0_RxReady+0x3e>
    if (USBD_Classes[cls]->EP0_RxReady != NULL) {
 801374e:	4a11      	ldr	r2, [pc, #68]	; (8013794 <USBD_Composite_EP0_RxReady+0x54>)
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013756:	691b      	ldr	r3, [r3, #16]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d00d      	beq.n	8013778 <USBD_Composite_EP0_RxReady+0x38>
    	uint8_t ret = USBD_Classes[cls]->EP0_RxReady(pdev);
 801375c:	4a0d      	ldr	r2, [pc, #52]	; (8013794 <USBD_Composite_EP0_RxReady+0x54>)
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013764:	691b      	ldr	r3, [r3, #16]
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	4798      	blx	r3
 801376a:	4603      	mov	r3, r0
 801376c:	72fb      	strb	r3, [r7, #11]
        if (ret != USBD_OK) {
 801376e:	7afb      	ldrb	r3, [r7, #11]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d001      	beq.n	8013778 <USBD_Composite_EP0_RxReady+0x38>
        	return USBD_FAIL;
 8013774:	2302      	movs	r3, #2
 8013776:	e008      	b.n	801378a <USBD_Composite_EP0_RxReady+0x4a>
  for(int cls = 0; cls < classes; cls++) {
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	3301      	adds	r3, #1
 801377c:	60fb      	str	r3, [r7, #12]
 801377e:	4b06      	ldr	r3, [pc, #24]	; (8013798 <USBD_Composite_EP0_RxReady+0x58>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	68fa      	ldr	r2, [r7, #12]
 8013784:	429a      	cmp	r2, r3
 8013786:	dbe2      	blt.n	801374e <USBD_Composite_EP0_RxReady+0xe>
      }
    }
  }
  return USBD_OK;
 8013788:	2300      	movs	r3, #0
}
 801378a:	4618      	mov	r0, r3
 801378c:	3710      	adds	r7, #16
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
 8013792:	bf00      	nop
 8013794:	2000113c 	.word	0x2000113c
 8013798:	20001138 	.word	0x20001138

0801379c <USBD_Composite_EP0_TxSent>:

static uint8_t USBD_Composite_EP0_TxSent (USBD_HandleTypeDef *pdev){
 801379c:	b480      	push	{r7}
 801379e:	b083      	sub	sp, #12
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
	return USBD_OK;
 80137a4:	2300      	movs	r3, #0
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	370c      	adds	r7, #12
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bc80      	pop	{r7}
 80137ae:	4770      	bx	lr

080137b0 <USBD_Composite_GetFSCfgDesc>:

static uint8_t  *USBD_Composite_GetFSCfgDesc (uint16_t *length) {
 80137b0:	b480      	push	{r7}
 80137b2:	b083      	sub	sp, #12
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 80137b8:	4b05      	ldr	r3, [pc, #20]	; (80137d0 <USBD_Composite_GetFSCfgDesc+0x20>)
 80137ba:	881a      	ldrh	r2, [r3, #0]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 80137c0:	4b04      	ldr	r3, [pc, #16]	; (80137d4 <USBD_Composite_GetFSCfgDesc+0x24>)
 80137c2:	681b      	ldr	r3, [r3, #0]
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	370c      	adds	r7, #12
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bc80      	pop	{r7}
 80137cc:	4770      	bx	lr
 80137ce:	bf00      	nop
 80137d0:	20001824 	.word	0x20001824
 80137d4:	20001828 	.word	0x20001828

080137d8 <USBD_Composite_GetHSCfgDesc>:

static uint8_t  *USBD_Composite_GetHSCfgDesc (uint16_t *length) {
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 80137e0:	4b05      	ldr	r3, [pc, #20]	; (80137f8 <USBD_Composite_GetHSCfgDesc+0x20>)
 80137e2:	881a      	ldrh	r2, [r3, #0]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 80137e8:	4b04      	ldr	r3, [pc, #16]	; (80137fc <USBD_Composite_GetHSCfgDesc+0x24>)
 80137ea:	681b      	ldr	r3, [r3, #0]
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bc80      	pop	{r7}
 80137f4:	4770      	bx	lr
 80137f6:	bf00      	nop
 80137f8:	20001824 	.word	0x20001824
 80137fc:	20001828 	.word	0x20001828

08013800 <USBD_Composite_GetOtherSpeedCfgDesc>:

static uint8_t  *USBD_Composite_GetOtherSpeedCfgDesc (uint16_t *length) {
 8013800:	b480      	push	{r7}
 8013802:	b083      	sub	sp, #12
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
  *length = descriptor_size;
 8013808:	4b05      	ldr	r3, [pc, #20]	; (8013820 <USBD_Composite_GetOtherSpeedCfgDesc+0x20>)
 801380a:	881a      	ldrh	r2, [r3, #0]
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	801a      	strh	r2, [r3, #0]
  return config_descriptor;
 8013810:	4b04      	ldr	r3, [pc, #16]	; (8013824 <USBD_Composite_GetOtherSpeedCfgDesc+0x24>)
 8013812:	681b      	ldr	r3, [r3, #0]
}
 8013814:	4618      	mov	r0, r3
 8013816:	370c      	adds	r7, #12
 8013818:	46bd      	mov	sp, r7
 801381a:	bc80      	pop	{r7}
 801381c:	4770      	bx	lr
 801381e:	bf00      	nop
 8013820:	20001824 	.word	0x20001824
 8013824:	20001828 	.word	0x20001828

08013828 <USBD_Composite_GetDeviceQualifierDescriptor>:
  0x40,
  0x01,
  0x00,
};

uint8_t  *USBD_Composite_GetDeviceQualifierDescriptor (uint16_t *length) {
 8013828:	b480      	push	{r7}
 801382a:	b083      	sub	sp, #12
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Composite_DeviceQualifierDesc);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	220a      	movs	r2, #10
 8013834:	801a      	strh	r2, [r3, #0]
  return USBD_Composite_DeviceQualifierDesc;
 8013836:	4b03      	ldr	r3, [pc, #12]	; (8013844 <USBD_Composite_GetDeviceQualifierDescriptor+0x1c>)
}
 8013838:	4618      	mov	r0, r3
 801383a:	370c      	adds	r7, #12
 801383c:	46bd      	mov	sp, r7
 801383e:	bc80      	pop	{r7}
 8013840:	4770      	bx	lr
 8013842:	bf00      	nop
 8013844:	20000108 	.word	0x20000108

08013848 <USBD_Composite_InterfaceToClass>:


void USBD_Composite_InterfaceToClass(uint8_t ifid, uint8_t clsid){
 8013848:	b480      	push	{r7}
 801384a:	b083      	sub	sp, #12
 801384c:	af00      	add	r7, sp, #0
 801384e:	4603      	mov	r3, r0
 8013850:	460a      	mov	r2, r1
 8013852:	71fb      	strb	r3, [r7, #7]
 8013854:	4613      	mov	r3, r2
 8013856:	71bb      	strb	r3, [r7, #6]
	interface_to_class[ifid] = clsid;
 8013858:	79fb      	ldrb	r3, [r7, #7]
 801385a:	4904      	ldr	r1, [pc, #16]	; (801386c <USBD_Composite_InterfaceToClass+0x24>)
 801385c:	79ba      	ldrb	r2, [r7, #6]
 801385e:	54ca      	strb	r2, [r1, r3]
}
 8013860:	bf00      	nop
 8013862:	370c      	adds	r7, #12
 8013864:	46bd      	mov	sp, r7
 8013866:	bc80      	pop	{r7}
 8013868:	4770      	bx	lr
 801386a:	bf00      	nop
 801386c:	200000f8 	.word	0x200000f8

08013870 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8013884:	4619      	mov	r1, r3
 8013886:	4610      	mov	r0, r2
 8013888:	f000 faf2 	bl	8013e70 <USBD_LL_SetupStage>
}
 801388c:	bf00      	nop
 801388e:	3708      	adds	r7, #8
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}

08013894 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b082      	sub	sp, #8
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	460b      	mov	r3, r1
 801389e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80138a6:	78fb      	ldrb	r3, [r7, #3]
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	015b      	lsls	r3, r3, #5
 80138ac:	4413      	add	r3, r2
 80138ae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80138b2:	681a      	ldr	r2, [r3, #0]
 80138b4:	78fb      	ldrb	r3, [r7, #3]
 80138b6:	4619      	mov	r1, r3
 80138b8:	f000 fb27 	bl	8013f0a <USBD_LL_DataOutStage>
}
 80138bc:	bf00      	nop
 80138be:	3708      	adds	r7, #8
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}

080138c4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	460b      	mov	r3, r1
 80138ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80138d6:	78fb      	ldrb	r3, [r7, #3]
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	015b      	lsls	r3, r3, #5
 80138dc:	4413      	add	r3, r2
 80138de:	333c      	adds	r3, #60	; 0x3c
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	78fb      	ldrb	r3, [r7, #3]
 80138e4:	4619      	mov	r1, r3
 80138e6:	f000 fb81 	bl	8013fec <USBD_LL_DataInStage>
}
 80138ea:	bf00      	nop
 80138ec:	3708      	adds	r7, #8
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}

080138f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b082      	sub	sp, #8
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013900:	4618      	mov	r0, r3
 8013902:	f000 fc8a 	bl	801421a <USBD_LL_SOF>
}
 8013906:	bf00      	nop
 8013908:	3708      	adds	r7, #8
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}

0801390e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801390e:	b580      	push	{r7, lr}
 8013910:	b084      	sub	sp, #16
 8013912:	af00      	add	r7, sp, #0
 8013914:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013916:	2301      	movs	r3, #1
 8013918:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	689b      	ldr	r3, [r3, #8]
 801391e:	2b02      	cmp	r3, #2
 8013920:	d001      	beq.n	8013926 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013922:	f7ee f841 	bl	80019a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801392c:	7bfa      	ldrb	r2, [r7, #15]
 801392e:	4611      	mov	r1, r2
 8013930:	4618      	mov	r0, r3
 8013932:	f000 fc3a 	bl	80141aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801393c:	4618      	mov	r0, r3
 801393e:	f000 fbfa 	bl	8014136 <USBD_LL_Reset>
}
 8013942:	bf00      	nop
 8013944:	3710      	adds	r7, #16
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
	...

0801394c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801395a:	4618      	mov	r0, r3
 801395c:	f000 fc34 	bl	80141c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	699b      	ldr	r3, [r3, #24]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d005      	beq.n	8013974 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013968:	4b04      	ldr	r3, [pc, #16]	; (801397c <HAL_PCD_SuspendCallback+0x30>)
 801396a:	691b      	ldr	r3, [r3, #16]
 801396c:	4a03      	ldr	r2, [pc, #12]	; (801397c <HAL_PCD_SuspendCallback+0x30>)
 801396e:	f043 0306 	orr.w	r3, r3, #6
 8013972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013974:	bf00      	nop
 8013976:	3708      	adds	r7, #8
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}
 801397c:	e000ed00 	.word	0xe000ed00

08013980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801398e:	4618      	mov	r0, r3
 8013990:	f000 fc2e 	bl	80141f0 <USBD_LL_Resume>
}
 8013994:	bf00      	nop
 8013996:	3708      	adds	r7, #8
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80139a4:	4a31      	ldr	r2, [pc, #196]	; (8013a6c <USBD_LL_Init+0xd0>)
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	4a2f      	ldr	r2, [pc, #188]	; (8013a6c <USBD_LL_Init+0xd0>)
 80139b0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80139b4:	4b2d      	ldr	r3, [pc, #180]	; (8013a6c <USBD_LL_Init+0xd0>)
 80139b6:	4a2e      	ldr	r2, [pc, #184]	; (8013a70 <USBD_LL_Init+0xd4>)
 80139b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80139ba:	4b2c      	ldr	r3, [pc, #176]	; (8013a6c <USBD_LL_Init+0xd0>)
 80139bc:	2208      	movs	r2, #8
 80139be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80139c0:	4b2a      	ldr	r3, [pc, #168]	; (8013a6c <USBD_LL_Init+0xd0>)
 80139c2:	2202      	movs	r2, #2
 80139c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80139c6:	4b29      	ldr	r3, [pc, #164]	; (8013a6c <USBD_LL_Init+0xd0>)
 80139c8:	2200      	movs	r2, #0
 80139ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80139cc:	4b27      	ldr	r3, [pc, #156]	; (8013a6c <USBD_LL_Init+0xd0>)
 80139ce:	2200      	movs	r2, #0
 80139d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80139d2:	4b26      	ldr	r3, [pc, #152]	; (8013a6c <USBD_LL_Init+0xd0>)
 80139d4:	2200      	movs	r2, #0
 80139d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80139d8:	4824      	ldr	r0, [pc, #144]	; (8013a6c <USBD_LL_Init+0xd0>)
 80139da:	f7f1 fccc 	bl	8005376 <HAL_PCD_Init>
 80139de:	4603      	mov	r3, r0
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d001      	beq.n	80139e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80139e4:	f7ed ffe0 	bl	80019a8 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);*/


  //CDC ENDPOINTS
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x38);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80139ee:	2338      	movs	r3, #56	; 0x38
 80139f0:	2200      	movs	r2, #0
 80139f2:	2100      	movs	r1, #0
 80139f4:	f7f2 fb64 	bl	80060c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x88);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80139fe:	2388      	movs	r3, #136	; 0x88
 8013a00:	2200      	movs	r2, #0
 8013a02:	2180      	movs	r1, #128	; 0x80
 8013a04:	f7f2 fb5c 	bl	80060c0 <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xF0);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013a0e:	23f0      	movs	r3, #240	; 0xf0
 8013a10:	2200      	movs	r2, #0
 8013a12:	2181      	movs	r1, #129	; 0x81
 8013a14:	f7f2 fb54 	bl	80060c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x140);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013a1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8013a22:	2200      	movs	r2, #0
 8013a24:	2101      	movs	r1, #1
 8013a26:	f7f2 fb4b 	bl	80060c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x130);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013a30:	f44f 7398 	mov.w	r3, #304	; 0x130
 8013a34:	2200      	movs	r2, #0
 8013a36:	2182      	movs	r1, #130	; 0x82
 8013a38:	f7f2 fb42 	bl	80060c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x83 , PCD_SNG_BUF, 0x180);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013a42:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8013a46:	2200      	movs	r2, #0
 8013a48:	2183      	movs	r1, #131	; 0x83
 8013a4a:	f7f2 fb39 	bl	80060c0 <HAL_PCDEx_PMAConfig>
   HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x02 , PCD_SNG_BUF, 0x1D0);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013a54:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8013a58:	2200      	movs	r2, #0
 8013a5a:	2102      	movs	r1, #2
 8013a5c:	f7f2 fb30 	bl	80060c0 <HAL_PCDEx_PMAConfig>

  return USBD_OK;
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3708      	adds	r7, #8
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	20001360 	.word	0x20001360
 8013a70:	40005c00 	.word	0x40005c00

08013a74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a80:	2300      	movs	r3, #0
 8013a82:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7f1 fd54 	bl	8005538 <HAL_PCD_Start>
 8013a90:	4603      	mov	r3, r0
 8013a92:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a94:	7bfb      	ldrb	r3, [r7, #15]
 8013a96:	4618      	mov	r0, r3
 8013a98:	f000 f932 	bl	8013d00 <USBD_Get_USB_Status>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8013aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3710      	adds	r7, #16
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}

08013aaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013aaa:	b580      	push	{r7, lr}
 8013aac:	b084      	sub	sp, #16
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	6078      	str	r0, [r7, #4]
 8013ab2:	4608      	mov	r0, r1
 8013ab4:	4611      	mov	r1, r2
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	4603      	mov	r3, r0
 8013aba:	70fb      	strb	r3, [r7, #3]
 8013abc:	460b      	mov	r3, r1
 8013abe:	70bb      	strb	r3, [r7, #2]
 8013ac0:	4613      	mov	r3, r2
 8013ac2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013ad2:	78bb      	ldrb	r3, [r7, #2]
 8013ad4:	883a      	ldrh	r2, [r7, #0]
 8013ad6:	78f9      	ldrb	r1, [r7, #3]
 8013ad8:	f7f1 fe87 	bl	80057ea <HAL_PCD_EP_Open>
 8013adc:	4603      	mov	r3, r0
 8013ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ae0:	7bfb      	ldrb	r3, [r7, #15]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f000 f90c 	bl	8013d00 <USBD_Get_USB_Status>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8013aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3710      	adds	r7, #16
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}

08013af6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013af6:	b580      	push	{r7, lr}
 8013af8:	b084      	sub	sp, #16
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	6078      	str	r0, [r7, #4]
 8013afe:	460b      	mov	r3, r1
 8013b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b02:	2300      	movs	r3, #0
 8013b04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b06:	2300      	movs	r3, #0
 8013b08:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013b10:	78fa      	ldrb	r2, [r7, #3]
 8013b12:	4611      	mov	r1, r2
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7f1 fec8 	bl	80058aa <HAL_PCD_EP_Close>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b1e:	7bfb      	ldrb	r3, [r7, #15]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f000 f8ed 	bl	8013d00 <USBD_Get_USB_Status>
 8013b26:	4603      	mov	r3, r0
 8013b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8013b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3710      	adds	r7, #16
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}

08013b34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b084      	sub	sp, #16
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	460b      	mov	r3, r1
 8013b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b40:	2300      	movs	r3, #0
 8013b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b44:	2300      	movs	r3, #0
 8013b46:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013b4e:	78fa      	ldrb	r2, [r7, #3]
 8013b50:	4611      	mov	r1, r2
 8013b52:	4618      	mov	r0, r3
 8013b54:	f7f1 ff72 	bl	8005a3c <HAL_PCD_EP_SetStall>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b5c:	7bfb      	ldrb	r3, [r7, #15]
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f000 f8ce 	bl	8013d00 <USBD_Get_USB_Status>
 8013b64:	4603      	mov	r3, r0
 8013b66:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8013b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3710      	adds	r7, #16
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}

08013b72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b72:	b580      	push	{r7, lr}
 8013b74:	b084      	sub	sp, #16
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	6078      	str	r0, [r7, #4]
 8013b7a:	460b      	mov	r3, r1
 8013b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b82:	2300      	movs	r3, #0
 8013b84:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013b8c:	78fa      	ldrb	r2, [r7, #3]
 8013b8e:	4611      	mov	r1, r2
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f1 ffad 	bl	8005af0 <HAL_PCD_EP_ClrStall>
 8013b96:	4603      	mov	r3, r0
 8013b98:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b9a:	7bfb      	ldrb	r3, [r7, #15]
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f000 f8af 	bl	8013d00 <USBD_Get_USB_Status>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8013ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3710      	adds	r7, #16
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b085      	sub	sp, #20
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	460b      	mov	r3, r1
 8013bba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013bc2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8013bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	da08      	bge.n	8013bde <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8013bcc:	78fb      	ldrb	r3, [r7, #3]
 8013bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bd2:	68fa      	ldr	r2, [r7, #12]
 8013bd4:	015b      	lsls	r3, r3, #5
 8013bd6:	4413      	add	r3, r2
 8013bd8:	332a      	adds	r3, #42	; 0x2a
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	e008      	b.n	8013bf0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8013bde:	78fb      	ldrb	r3, [r7, #3]
 8013be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013be4:	68fa      	ldr	r2, [r7, #12]
 8013be6:	015b      	lsls	r3, r3, #5
 8013be8:	4413      	add	r3, r2
 8013bea:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8013bee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3714      	adds	r7, #20
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bc80      	pop	{r7}
 8013bf8:	4770      	bx	lr

08013bfa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b084      	sub	sp, #16
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
 8013c02:	460b      	mov	r3, r1
 8013c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c06:	2300      	movs	r3, #0
 8013c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013c14:	78fa      	ldrb	r2, [r7, #3]
 8013c16:	4611      	mov	r1, r2
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7f1 fdc1 	bl	80057a0 <HAL_PCD_SetAddress>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c22:	7bfb      	ldrb	r3, [r7, #15]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f000 f86b 	bl	8013d00 <USBD_Get_USB_Status>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8013c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	3710      	adds	r7, #16
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}

08013c38 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b086      	sub	sp, #24
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	607a      	str	r2, [r7, #4]
 8013c42:	461a      	mov	r2, r3
 8013c44:	460b      	mov	r3, r1
 8013c46:	72fb      	strb	r3, [r7, #11]
 8013c48:	4613      	mov	r3, r2
 8013c4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c50:	2300      	movs	r3, #0
 8013c52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013c5a:	893b      	ldrh	r3, [r7, #8]
 8013c5c:	7af9      	ldrb	r1, [r7, #11]
 8013c5e:	687a      	ldr	r2, [r7, #4]
 8013c60:	f7f1 feb3 	bl	80059ca <HAL_PCD_EP_Transmit>
 8013c64:	4603      	mov	r3, r0
 8013c66:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c68:	7dfb      	ldrb	r3, [r7, #23]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f000 f848 	bl	8013d00 <USBD_Get_USB_Status>
 8013c70:	4603      	mov	r3, r0
 8013c72:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8013c74:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	3718      	adds	r7, #24
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}

08013c7e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013c7e:	b580      	push	{r7, lr}
 8013c80:	b086      	sub	sp, #24
 8013c82:	af00      	add	r7, sp, #0
 8013c84:	60f8      	str	r0, [r7, #12]
 8013c86:	607a      	str	r2, [r7, #4]
 8013c88:	461a      	mov	r2, r3
 8013c8a:	460b      	mov	r3, r1
 8013c8c:	72fb      	strb	r3, [r7, #11]
 8013c8e:	4613      	mov	r3, r2
 8013c90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c92:	2300      	movs	r3, #0
 8013c94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c96:	2300      	movs	r3, #0
 8013c98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8013ca0:	893b      	ldrh	r3, [r7, #8]
 8013ca2:	7af9      	ldrb	r1, [r7, #11]
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	f7f1 fe42 	bl	800592e <HAL_PCD_EP_Receive>
 8013caa:	4603      	mov	r3, r0
 8013cac:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013cae:	7dfb      	ldrb	r3, [r7, #23]
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f000 f825 	bl	8013d00 <USBD_Get_USB_Status>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8013cba:	7dbb      	ldrb	r3, [r7, #22]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3718      	adds	r7, #24
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	460b      	mov	r3, r1
 8013cce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013cd6:	78fa      	ldrb	r2, [r7, #3]
 8013cd8:	4611      	mov	r1, r2
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7f1 fe61 	bl	80059a2 <HAL_PCD_EP_GetRxCount>
 8013ce0:	4603      	mov	r3, r0
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3708      	adds	r7, #8
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013cea:	b480      	push	{r7}
 8013cec:	b083      	sub	sp, #12
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8013cf6:	bf00      	nop
 8013cf8:	370c      	adds	r7, #12
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bc80      	pop	{r7}
 8013cfe:	4770      	bx	lr

08013d00 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013d00:	b480      	push	{r7}
 8013d02:	b085      	sub	sp, #20
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	4603      	mov	r3, r0
 8013d08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013d0e:	79fb      	ldrb	r3, [r7, #7]
 8013d10:	2b03      	cmp	r3, #3
 8013d12:	d817      	bhi.n	8013d44 <USBD_Get_USB_Status+0x44>
 8013d14:	a201      	add	r2, pc, #4	; (adr r2, 8013d1c <USBD_Get_USB_Status+0x1c>)
 8013d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d1a:	bf00      	nop
 8013d1c:	08013d2d 	.word	0x08013d2d
 8013d20:	08013d33 	.word	0x08013d33
 8013d24:	08013d39 	.word	0x08013d39
 8013d28:	08013d3f 	.word	0x08013d3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8013d30:	e00b      	b.n	8013d4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013d32:	2302      	movs	r3, #2
 8013d34:	73fb      	strb	r3, [r7, #15]
    break;
 8013d36:	e008      	b.n	8013d4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013d38:	2301      	movs	r3, #1
 8013d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8013d3c:	e005      	b.n	8013d4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013d3e:	2302      	movs	r3, #2
 8013d40:	73fb      	strb	r3, [r7, #15]
    break;
 8013d42:	e002      	b.n	8013d4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013d44:	2302      	movs	r3, #2
 8013d46:	73fb      	strb	r3, [r7, #15]
    break;
 8013d48:	bf00      	nop
  }
  return usb_status;
 8013d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3714      	adds	r7, #20
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bc80      	pop	{r7}
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop

08013d58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b084      	sub	sp, #16
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	4613      	mov	r3, r2
 8013d64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d101      	bne.n	8013d70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013d6c:	2302      	movs	r3, #2
 8013d6e:	e01a      	b.n	8013da6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d003      	beq.n	8013d82 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d003      	beq.n	8013d90 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	68ba      	ldr	r2, [r7, #8]
 8013d8c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	2201      	movs	r2, #1
 8013d94:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	79fa      	ldrb	r2, [r7, #7]
 8013d9c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013d9e:	68f8      	ldr	r0, [r7, #12]
 8013da0:	f7ff fdfc 	bl	801399c <USBD_LL_Init>

  return USBD_OK;
 8013da4:	2300      	movs	r3, #0
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3710      	adds	r7, #16
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}

08013dae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013dae:	b480      	push	{r7}
 8013db0:	b085      	sub	sp, #20
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	6078      	str	r0, [r7, #4]
 8013db6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013db8:	2300      	movs	r3, #0
 8013dba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d006      	beq.n	8013dd0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	683a      	ldr	r2, [r7, #0]
 8013dc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	73fb      	strb	r3, [r7, #15]
 8013dce:	e001      	b.n	8013dd4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8013dd0:	2302      	movs	r3, #2
 8013dd2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3714      	adds	r7, #20
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bc80      	pop	{r7}
 8013dde:	4770      	bx	lr

08013de0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7ff fe43 	bl	8013a74 <USBD_LL_Start>

  return USBD_OK;
 8013dee:	2300      	movs	r3, #0
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b083      	sub	sp, #12
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013e00:	2300      	movs	r3, #0
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	370c      	adds	r7, #12
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bc80      	pop	{r7}
 8013e0a:	4770      	bx	lr

08013e0c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b084      	sub	sp, #16
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
 8013e14:	460b      	mov	r3, r1
 8013e16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013e18:	2302      	movs	r3, #2
 8013e1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d00c      	beq.n	8013e40 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	78fa      	ldrb	r2, [r7, #3]
 8013e30:	4611      	mov	r1, r2
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	4798      	blx	r3
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d101      	bne.n	8013e40 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3710      	adds	r7, #16
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}

08013e4a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013e4a:	b580      	push	{r7, lr}
 8013e4c:	b082      	sub	sp, #8
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	6078      	str	r0, [r7, #4]
 8013e52:	460b      	mov	r3, r1
 8013e54:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	78fa      	ldrb	r2, [r7, #3]
 8013e60:	4611      	mov	r1, r2
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	4798      	blx	r3

  return USBD_OK;
 8013e66:	2300      	movs	r3, #0
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013e80:	6839      	ldr	r1, [r7, #0]
 8013e82:	4618      	mov	r0, r3
 8013e84:	f000 fe99 	bl	8014bba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  pdev->ep0_data_len = pdev->request.wLength;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8013e96:	461a      	mov	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

  switch (pdev->request.bmRequest & 0x1FU)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8013ea4:	f003 031f 	and.w	r3, r3, #31
 8013ea8:	2b02      	cmp	r3, #2
 8013eaa:	d016      	beq.n	8013eda <USBD_LL_SetupStage+0x6a>
 8013eac:	2b02      	cmp	r3, #2
 8013eae:	d81c      	bhi.n	8013eea <USBD_LL_SetupStage+0x7a>
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d002      	beq.n	8013eba <USBD_LL_SetupStage+0x4a>
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d008      	beq.n	8013eca <USBD_LL_SetupStage+0x5a>
 8013eb8:	e017      	b.n	8013eea <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f000 f9c4 	bl	8014250 <USBD_StdDevReq>
      break;
 8013ec8:	e01a      	b.n	8013f00 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f000 fa26 	bl	8014324 <USBD_StdItfReq>
      break;
 8013ed8:	e012      	b.n	8013f00 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 fa66 	bl	80143b4 <USBD_StdEPReq>
      break;
 8013ee8:	e00a      	b.n	8013f00 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8013ef0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f7ff fe1b 	bl	8013b34 <USBD_LL_StallEP>
      break;
 8013efe:	bf00      	nop
  }

  return USBD_OK;
 8013f00:	2300      	movs	r3, #0
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3708      	adds	r7, #8
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}

08013f0a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013f0a:	b580      	push	{r7, lr}
 8013f0c:	b086      	sub	sp, #24
 8013f0e:	af00      	add	r7, sp, #0
 8013f10:	60f8      	str	r0, [r7, #12]
 8013f12:	460b      	mov	r3, r1
 8013f14:	607a      	str	r2, [r7, #4]
 8013f16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013f18:	7afb      	ldrb	r3, [r7, #11]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d14b      	bne.n	8013fb6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8013f24:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013f2c:	2b03      	cmp	r3, #3
 8013f2e:	d134      	bne.n	8013f9a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	689a      	ldr	r2, [r3, #8]
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	68db      	ldr	r3, [r3, #12]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d919      	bls.n	8013f70 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	689a      	ldr	r2, [r3, #8]
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	68db      	ldr	r3, [r3, #12]
 8013f44:	1ad2      	subs	r2, r2, r3
 8013f46:	697b      	ldr	r3, [r7, #20]
 8013f48:	609a      	str	r2, [r3, #8]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	689a      	ldr	r2, [r3, #8]
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d203      	bcs.n	8013f5e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueRx(pdev, pdata,
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	e002      	b.n	8013f64 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	461a      	mov	r2, r3
 8013f66:	6879      	ldr	r1, [r7, #4]
 8013f68:	68f8      	ldr	r0, [r7, #12]
 8013f6a:	f001 fa4f 	bl	801540c <USBD_CtlContinueRx>
 8013f6e:	e038      	b.n	8013fe2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f76:	691b      	ldr	r3, [r3, #16]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d00a      	beq.n	8013f92 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013f82:	2b03      	cmp	r3, #3
 8013f84:	d105      	bne.n	8013f92 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f8c:	691b      	ldr	r3, [r3, #16]
 8013f8e:	68f8      	ldr	r0, [r7, #12]
 8013f90:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013f92:	68f8      	ldr	r0, [r7, #12]
 8013f94:	f001 fa4c 	bl	8015430 <USBD_CtlSendStatus>
 8013f98:	e023      	b.n	8013fe2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8013fa0:	2b05      	cmp	r3, #5
 8013fa2:	d11e      	bne.n	8013fe2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        USBD_LL_StallEP(pdev, 0U);
 8013fac:	2100      	movs	r1, #0
 8013fae:	68f8      	ldr	r0, [r7, #12]
 8013fb0:	f7ff fdc0 	bl	8013b34 <USBD_LL_StallEP>
 8013fb4:	e015      	b.n	8013fe2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013fbc:	699b      	ldr	r3, [r3, #24]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d00d      	beq.n	8013fde <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if ((pdev->pClass->DataOut != NULL) &&
 8013fc8:	2b03      	cmp	r3, #3
 8013fca:	d108      	bne.n	8013fde <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013fd2:	699b      	ldr	r3, [r3, #24]
 8013fd4:	7afa      	ldrb	r2, [r7, #11]
 8013fd6:	4611      	mov	r1, r2
 8013fd8:	68f8      	ldr	r0, [r7, #12]
 8013fda:	4798      	blx	r3
 8013fdc:	e001      	b.n	8013fe2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013fde:	2302      	movs	r3, #2
 8013fe0:	e000      	b.n	8013fe4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013fe2:	2300      	movs	r3, #0
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3718      	adds	r7, #24
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}

08013fec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b086      	sub	sp, #24
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	60f8      	str	r0, [r7, #12]
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	607a      	str	r2, [r7, #4]
 8013ff8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013ffa:	7afb      	ldrb	r3, [r7, #11]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d17f      	bne.n	8014100 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	3314      	adds	r3, #20
 8014004:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 801400c:	2b02      	cmp	r3, #2
 801400e:	d15c      	bne.n	80140ca <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	689a      	ldr	r2, [r3, #8]
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	68db      	ldr	r3, [r3, #12]
 8014018:	429a      	cmp	r2, r3
 801401a:	d915      	bls.n	8014048 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	689a      	ldr	r2, [r3, #8]
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	68db      	ldr	r3, [r3, #12]
 8014024:	1ad2      	subs	r2, r2, r3
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	609a      	str	r2, [r3, #8]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	689b      	ldr	r3, [r3, #8]
 801402e:	b29b      	uxth	r3, r3
 8014030:	461a      	mov	r2, r3
 8014032:	6879      	ldr	r1, [r7, #4]
 8014034:	68f8      	ldr	r0, [r7, #12]
 8014036:	f001 f9b9 	bl	80153ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801403a:	2300      	movs	r3, #0
 801403c:	2200      	movs	r2, #0
 801403e:	2100      	movs	r1, #0
 8014040:	68f8      	ldr	r0, [r7, #12]
 8014042:	f7ff fe1c 	bl	8013c7e <USBD_LL_PrepareReceive>
 8014046:	e04e      	b.n	80140e6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	697a      	ldr	r2, [r7, #20]
 801404e:	68d2      	ldr	r2, [r2, #12]
 8014050:	fbb3 f1f2 	udiv	r1, r3, r2
 8014054:	fb02 f201 	mul.w	r2, r2, r1
 8014058:	1a9b      	subs	r3, r3, r2
 801405a:	2b00      	cmp	r3, #0
 801405c:	d11c      	bne.n	8014098 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	685a      	ldr	r2, [r3, #4]
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	68db      	ldr	r3, [r3, #12]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014066:	429a      	cmp	r2, r3
 8014068:	d316      	bcc.n	8014098 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	685a      	ldr	r2, [r3, #4]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
            (pep->total_length >= pep->maxpacket) &&
 8014074:	429a      	cmp	r2, r3
 8014076:	d20f      	bcs.n	8014098 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014078:	2200      	movs	r2, #0
 801407a:	2100      	movs	r1, #0
 801407c:	68f8      	ldr	r0, [r7, #12]
 801407e:	f001 f995 	bl	80153ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2200      	movs	r2, #0
 8014086:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801408a:	2300      	movs	r3, #0
 801408c:	2200      	movs	r2, #0
 801408e:	2100      	movs	r1, #0
 8014090:	68f8      	ldr	r0, [r7, #12]
 8014092:	f7ff fdf4 	bl	8013c7e <USBD_LL_PrepareReceive>
 8014096:	e026      	b.n	80140e6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d00a      	beq.n	80140ba <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80140aa:	2b03      	cmp	r3, #3
 80140ac:	d105      	bne.n	80140ba <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80140b4:	68db      	ldr	r3, [r3, #12]
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80140ba:	2180      	movs	r1, #128	; 0x80
 80140bc:	68f8      	ldr	r0, [r7, #12]
 80140be:	f7ff fd39 	bl	8013b34 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f001 f9c7 	bl	8015456 <USBD_CtlReceiveStatus>
 80140c8:	e00d      	b.n	80140e6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80140d0:	2b04      	cmp	r3, #4
 80140d2:	d004      	beq.n	80140de <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d103      	bne.n	80140e6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80140de:	2180      	movs	r1, #128	; 0x80
 80140e0:	68f8      	ldr	r0, [r7, #12]
 80140e2:	f7ff fd27 	bl	8013b34 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80140ec:	2b01      	cmp	r3, #1
 80140ee:	d11d      	bne.n	801412c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80140f0:	68f8      	ldr	r0, [r7, #12]
 80140f2:	f7ff fe81 	bl	8013df8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	2200      	movs	r2, #0
 80140fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80140fe:	e015      	b.n	801412c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014106:	695b      	ldr	r3, [r3, #20]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d00d      	beq.n	8014128 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if ((pdev->pClass->DataIn != NULL) &&
 8014112:	2b03      	cmp	r3, #3
 8014114:	d108      	bne.n	8014128 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801411c:	695b      	ldr	r3, [r3, #20]
 801411e:	7afa      	ldrb	r2, [r7, #11]
 8014120:	4611      	mov	r1, r2
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	4798      	blx	r3
 8014126:	e001      	b.n	801412c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014128:	2302      	movs	r3, #2
 801412a:	e000      	b.n	801412e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801412c:	2300      	movs	r3, #0
}
 801412e:	4618      	mov	r0, r3
 8014130:	3718      	adds	r7, #24
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}

08014136 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014136:	b580      	push	{r7, lr}
 8014138:	b082      	sub	sp, #8
 801413a:	af00      	add	r7, sp, #0
 801413c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801413e:	2340      	movs	r3, #64	; 0x40
 8014140:	2200      	movs	r2, #0
 8014142:	2100      	movs	r1, #0
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f7ff fcb0 	bl	8013aaa <USBD_LL_OpenEP>

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2240      	movs	r2, #64	; 0x40
 801414e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014152:	2340      	movs	r3, #64	; 0x40
 8014154:	2200      	movs	r2, #0
 8014156:	2180      	movs	r1, #128	; 0x80
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f7ff fca6 	bl	8013aaa <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2240      	movs	r2, #64	; 0x40
 8014162:	621a      	str	r2, [r3, #32]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2201      	movs	r2, #1
 8014168:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->ep0_state = USBD_EP0_IDLE;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2200      	movs	r2, #0
 8014170:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->dev_config = 0U;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2200      	movs	r2, #0
 8014178:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2200      	movs	r2, #0
 801417e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  if (pdev->pClassData)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014188:	2b00      	cmp	r3, #0
 801418a:	d009      	beq.n	80141a0 <USBD_LL_Reset+0x6a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	687a      	ldr	r2, [r7, #4]
 8014196:	6852      	ldr	r2, [r2, #4]
 8014198:	b2d2      	uxtb	r2, r2
 801419a:	4611      	mov	r1, r2
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	4798      	blx	r3
  }

  return USBD_OK;
 80141a0:	2300      	movs	r3, #0
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}

080141aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80141aa:	b480      	push	{r7}
 80141ac:	b083      	sub	sp, #12
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	6078      	str	r0, [r7, #4]
 80141b2:	460b      	mov	r3, r1
 80141b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	78fa      	ldrb	r2, [r7, #3]
 80141ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80141bc:	2300      	movs	r3, #0
}
 80141be:	4618      	mov	r0, r3
 80141c0:	370c      	adds	r7, #12
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bc80      	pop	{r7}
 80141c6:	4770      	bx	lr

080141c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80141c8:	b480      	push	{r7}
 80141ca:	b083      	sub	sp, #12
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2204      	movs	r2, #4
 80141e0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc

  return USBD_OK;
 80141e4:	2300      	movs	r3, #0
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	370c      	adds	r7, #12
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bc80      	pop	{r7}
 80141ee:	4770      	bx	lr

080141f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80141f0:	b480      	push	{r7}
 80141f2:	b083      	sub	sp, #12
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80141fe:	2b04      	cmp	r3, #4
 8014200:	d105      	bne.n	801420e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  }

  return USBD_OK;
 801420e:	2300      	movs	r3, #0
}
 8014210:	4618      	mov	r0, r3
 8014212:	370c      	adds	r7, #12
 8014214:	46bd      	mov	sp, r7
 8014216:	bc80      	pop	{r7}
 8014218:	4770      	bx	lr

0801421a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801421a:	b580      	push	{r7, lr}
 801421c:	b082      	sub	sp, #8
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014228:	2b03      	cmp	r3, #3
 801422a:	d10b      	bne.n	8014244 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014232:	69db      	ldr	r3, [r3, #28]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d005      	beq.n	8014244 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801423e:	69db      	ldr	r3, [r3, #28]
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014244:	2300      	movs	r3, #0
}
 8014246:	4618      	mov	r0, r3
 8014248:	3708      	adds	r7, #8
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
	...

08014250 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b084      	sub	sp, #16
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801425a:	2300      	movs	r3, #0
 801425c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014266:	2b40      	cmp	r3, #64	; 0x40
 8014268:	d005      	beq.n	8014276 <USBD_StdDevReq+0x26>
 801426a:	2b40      	cmp	r3, #64	; 0x40
 801426c:	d84f      	bhi.n	801430e <USBD_StdDevReq+0xbe>
 801426e:	2b00      	cmp	r3, #0
 8014270:	d009      	beq.n	8014286 <USBD_StdDevReq+0x36>
 8014272:	2b20      	cmp	r3, #32
 8014274:	d14b      	bne.n	801430e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801427c:	689b      	ldr	r3, [r3, #8]
 801427e:	6839      	ldr	r1, [r7, #0]
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	4798      	blx	r3
      break;
 8014284:	e048      	b.n	8014318 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	785b      	ldrb	r3, [r3, #1]
 801428a:	2b09      	cmp	r3, #9
 801428c:	d839      	bhi.n	8014302 <USBD_StdDevReq+0xb2>
 801428e:	a201      	add	r2, pc, #4	; (adr r2, 8014294 <USBD_StdDevReq+0x44>)
 8014290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014294:	080142e5 	.word	0x080142e5
 8014298:	080142f9 	.word	0x080142f9
 801429c:	08014303 	.word	0x08014303
 80142a0:	080142ef 	.word	0x080142ef
 80142a4:	08014303 	.word	0x08014303
 80142a8:	080142c7 	.word	0x080142c7
 80142ac:	080142bd 	.word	0x080142bd
 80142b0:	08014303 	.word	0x08014303
 80142b4:	080142db 	.word	0x080142db
 80142b8:	080142d1 	.word	0x080142d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80142bc:	6839      	ldr	r1, [r7, #0]
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f000 f9a4 	bl	801460c <USBD_GetDescriptor>
          break;
 80142c4:	e022      	b.n	801430c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80142c6:	6839      	ldr	r1, [r7, #0]
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 fb07 	bl	80148dc <USBD_SetAddress>
          break;
 80142ce:	e01d      	b.n	801430c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80142d0:	6839      	ldr	r1, [r7, #0]
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f000 fb46 	bl	8014964 <USBD_SetConfig>
          break;
 80142d8:	e018      	b.n	801430c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80142da:	6839      	ldr	r1, [r7, #0]
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f000 fbcf 	bl	8014a80 <USBD_GetConfig>
          break;
 80142e2:	e013      	b.n	801430c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80142e4:	6839      	ldr	r1, [r7, #0]
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f000 fbff 	bl	8014aea <USBD_GetStatus>
          break;
 80142ec:	e00e      	b.n	801430c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80142ee:	6839      	ldr	r1, [r7, #0]
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f000 fc2d 	bl	8014b50 <USBD_SetFeature>
          break;
 80142f6:	e009      	b.n	801430c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80142f8:	6839      	ldr	r1, [r7, #0]
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f000 fc3c 	bl	8014b78 <USBD_ClrFeature>
          break;
 8014300:	e004      	b.n	801430c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8014302:	6839      	ldr	r1, [r7, #0]
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f000 fc94 	bl	8014c32 <USBD_CtlError>
          break;
 801430a:	bf00      	nop
      }
      break;
 801430c:	e004      	b.n	8014318 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801430e:	6839      	ldr	r1, [r7, #0]
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	f000 fc8e 	bl	8014c32 <USBD_CtlError>
      break;
 8014316:	bf00      	nop
  }

  return ret;
 8014318:	7bfb      	ldrb	r3, [r7, #15]
}
 801431a:	4618      	mov	r0, r3
 801431c:	3710      	adds	r7, #16
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop

08014324 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b084      	sub	sp, #16
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
 801432c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801432e:	2300      	movs	r3, #0
 8014330:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801433a:	2b40      	cmp	r3, #64	; 0x40
 801433c:	d005      	beq.n	801434a <USBD_StdItfReq+0x26>
 801433e:	2b40      	cmp	r3, #64	; 0x40
 8014340:	d82e      	bhi.n	80143a0 <USBD_StdItfReq+0x7c>
 8014342:	2b00      	cmp	r3, #0
 8014344:	d001      	beq.n	801434a <USBD_StdItfReq+0x26>
 8014346:	2b20      	cmp	r3, #32
 8014348:	d12a      	bne.n	80143a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014350:	3b01      	subs	r3, #1
 8014352:	2b02      	cmp	r3, #2
 8014354:	d81d      	bhi.n	8014392 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	889b      	ldrh	r3, [r3, #4]
 801435a:	b2db      	uxtb	r3, r3
 801435c:	2b03      	cmp	r3, #3
 801435e:	d813      	bhi.n	8014388 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014366:	689b      	ldr	r3, [r3, #8]
 8014368:	6839      	ldr	r1, [r7, #0]
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	4798      	blx	r3
 801436e:	4603      	mov	r3, r0
 8014370:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	88db      	ldrh	r3, [r3, #6]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d110      	bne.n	801439c <USBD_StdItfReq+0x78>
 801437a:	7bfb      	ldrb	r3, [r7, #15]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d10d      	bne.n	801439c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f001 f855 	bl	8015430 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014386:	e009      	b.n	801439c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8014388:	6839      	ldr	r1, [r7, #0]
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f000 fc51 	bl	8014c32 <USBD_CtlError>
          break;
 8014390:	e004      	b.n	801439c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8014392:	6839      	ldr	r1, [r7, #0]
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f000 fc4c 	bl	8014c32 <USBD_CtlError>
          break;
 801439a:	e000      	b.n	801439e <USBD_StdItfReq+0x7a>
          break;
 801439c:	bf00      	nop
      }
      break;
 801439e:	e004      	b.n	80143aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80143a0:	6839      	ldr	r1, [r7, #0]
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f000 fc45 	bl	8014c32 <USBD_CtlError>
      break;
 80143a8:	bf00      	nop
  }

  return USBD_OK;
 80143aa:	2300      	movs	r3, #0
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3710      	adds	r7, #16
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b084      	sub	sp, #16
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80143be:	2300      	movs	r3, #0
 80143c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	889b      	ldrh	r3, [r3, #4]
 80143c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80143d0:	2b40      	cmp	r3, #64	; 0x40
 80143d2:	d007      	beq.n	80143e4 <USBD_StdEPReq+0x30>
 80143d4:	2b40      	cmp	r3, #64	; 0x40
 80143d6:	f200 810f 	bhi.w	80145f8 <USBD_StdEPReq+0x244>
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d00a      	beq.n	80143f4 <USBD_StdEPReq+0x40>
 80143de:	2b20      	cmp	r3, #32
 80143e0:	f040 810a 	bne.w	80145f8 <USBD_StdEPReq+0x244>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80143ea:	689b      	ldr	r3, [r3, #8]
 80143ec:	6839      	ldr	r1, [r7, #0]
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	4798      	blx	r3
      break;
 80143f2:	e106      	b.n	8014602 <USBD_StdEPReq+0x24e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80143fc:	2b20      	cmp	r3, #32
 80143fe:	d10a      	bne.n	8014416 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014406:	689b      	ldr	r3, [r3, #8]
 8014408:	6839      	ldr	r1, [r7, #0]
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	4798      	blx	r3
 801440e:	4603      	mov	r3, r0
 8014410:	73fb      	strb	r3, [r7, #15]

        return ret;
 8014412:	7bfb      	ldrb	r3, [r7, #15]
 8014414:	e0f6      	b.n	8014604 <USBD_StdEPReq+0x250>
      }

      switch (req->bRequest)
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	785b      	ldrb	r3, [r3, #1]
 801441a:	2b03      	cmp	r3, #3
 801441c:	d007      	beq.n	801442e <USBD_StdEPReq+0x7a>
 801441e:	2b03      	cmp	r3, #3
 8014420:	f300 80e4 	bgt.w	80145ec <USBD_StdEPReq+0x238>
 8014424:	2b00      	cmp	r3, #0
 8014426:	d072      	beq.n	801450e <USBD_StdEPReq+0x15a>
 8014428:	2b01      	cmp	r3, #1
 801442a:	d03a      	beq.n	80144a2 <USBD_StdEPReq+0xee>
 801442c:	e0de      	b.n	80145ec <USBD_StdEPReq+0x238>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014434:	2b02      	cmp	r3, #2
 8014436:	d002      	beq.n	801443e <USBD_StdEPReq+0x8a>
 8014438:	2b03      	cmp	r3, #3
 801443a:	d015      	beq.n	8014468 <USBD_StdEPReq+0xb4>
 801443c:	e02b      	b.n	8014496 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801443e:	7bbb      	ldrb	r3, [r7, #14]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d00c      	beq.n	801445e <USBD_StdEPReq+0xaa>
 8014444:	7bbb      	ldrb	r3, [r7, #14]
 8014446:	2b80      	cmp	r3, #128	; 0x80
 8014448:	d009      	beq.n	801445e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801444a:	7bbb      	ldrb	r3, [r7, #14]
 801444c:	4619      	mov	r1, r3
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f7ff fb70 	bl	8013b34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014454:	2180      	movs	r1, #128	; 0x80
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f7ff fb6c 	bl	8013b34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801445c:	e020      	b.n	80144a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 801445e:	6839      	ldr	r1, [r7, #0]
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f000 fbe6 	bl	8014c32 <USBD_CtlError>
              break;
 8014466:	e01b      	b.n	80144a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	885b      	ldrh	r3, [r3, #2]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d10e      	bne.n	801448e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8014470:	7bbb      	ldrb	r3, [r7, #14]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d00b      	beq.n	801448e <USBD_StdEPReq+0xda>
 8014476:	7bbb      	ldrb	r3, [r7, #14]
 8014478:	2b80      	cmp	r3, #128	; 0x80
 801447a:	d008      	beq.n	801448e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	88db      	ldrh	r3, [r3, #6]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d104      	bne.n	801448e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014484:	7bbb      	ldrb	r3, [r7, #14]
 8014486:	4619      	mov	r1, r3
 8014488:	6878      	ldr	r0, [r7, #4]
 801448a:	f7ff fb53 	bl	8013b34 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f000 ffce 	bl	8015430 <USBD_CtlSendStatus>

              break;
 8014494:	e004      	b.n	80144a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8014496:	6839      	ldr	r1, [r7, #0]
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f000 fbca 	bl	8014c32 <USBD_CtlError>
              break;
 801449e:	bf00      	nop
          }
          break;
 80144a0:	e0a9      	b.n	80145f6 <USBD_StdEPReq+0x242>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80144a8:	2b02      	cmp	r3, #2
 80144aa:	d002      	beq.n	80144b2 <USBD_StdEPReq+0xfe>
 80144ac:	2b03      	cmp	r3, #3
 80144ae:	d015      	beq.n	80144dc <USBD_StdEPReq+0x128>
 80144b0:	e026      	b.n	8014500 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80144b2:	7bbb      	ldrb	r3, [r7, #14]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d00c      	beq.n	80144d2 <USBD_StdEPReq+0x11e>
 80144b8:	7bbb      	ldrb	r3, [r7, #14]
 80144ba:	2b80      	cmp	r3, #128	; 0x80
 80144bc:	d009      	beq.n	80144d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80144be:	7bbb      	ldrb	r3, [r7, #14]
 80144c0:	4619      	mov	r1, r3
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7ff fb36 	bl	8013b34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80144c8:	2180      	movs	r1, #128	; 0x80
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f7ff fb32 	bl	8013b34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80144d0:	e01c      	b.n	801450c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80144d2:	6839      	ldr	r1, [r7, #0]
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f000 fbac 	bl	8014c32 <USBD_CtlError>
              break;
 80144da:	e017      	b.n	801450c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	885b      	ldrh	r3, [r3, #2]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d112      	bne.n	801450a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80144e4:	7bbb      	ldrb	r3, [r7, #14]
 80144e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d004      	beq.n	80144f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80144ee:	7bbb      	ldrb	r3, [r7, #14]
 80144f0:	4619      	mov	r1, r3
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f7ff fb3d 	bl	8013b72 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f000 ff99 	bl	8015430 <USBD_CtlSendStatus>
              }
              break;
 80144fe:	e004      	b.n	801450a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8014500:	6839      	ldr	r1, [r7, #0]
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f000 fb95 	bl	8014c32 <USBD_CtlError>
              break;
 8014508:	e000      	b.n	801450c <USBD_StdEPReq+0x158>
              break;
 801450a:	bf00      	nop
          }
          break;
 801450c:	e073      	b.n	80145f6 <USBD_StdEPReq+0x242>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014514:	2b02      	cmp	r3, #2
 8014516:	d002      	beq.n	801451e <USBD_StdEPReq+0x16a>
 8014518:	2b03      	cmp	r3, #3
 801451a:	d02b      	beq.n	8014574 <USBD_StdEPReq+0x1c0>
 801451c:	e060      	b.n	80145e0 <USBD_StdEPReq+0x22c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801451e:	7bbb      	ldrb	r3, [r7, #14]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d007      	beq.n	8014534 <USBD_StdEPReq+0x180>
 8014524:	7bbb      	ldrb	r3, [r7, #14]
 8014526:	2b80      	cmp	r3, #128	; 0x80
 8014528:	d004      	beq.n	8014534 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 801452a:	6839      	ldr	r1, [r7, #0]
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f000 fb80 	bl	8014c32 <USBD_CtlError>
                break;
 8014532:	e05a      	b.n	80145ea <USBD_StdEPReq+0x236>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014538:	2b00      	cmp	r3, #0
 801453a:	da08      	bge.n	801454e <USBD_StdEPReq+0x19a>
 801453c:	7bbb      	ldrb	r3, [r7, #14]
 801453e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014542:	3301      	adds	r3, #1
 8014544:	011b      	lsls	r3, r3, #4
 8014546:	687a      	ldr	r2, [r7, #4]
 8014548:	4413      	add	r3, r2
 801454a:	3304      	adds	r3, #4
 801454c:	e007      	b.n	801455e <USBD_StdEPReq+0x1aa>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801454e:	7bbb      	ldrb	r3, [r7, #14]
 8014550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014554:	3310      	adds	r3, #16
 8014556:	011b      	lsls	r3, r3, #4
 8014558:	687a      	ldr	r2, [r7, #4]
 801455a:	4413      	add	r3, r2
 801455c:	3304      	adds	r3, #4
 801455e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	2200      	movs	r2, #0
 8014564:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	2202      	movs	r2, #2
 801456a:	4619      	mov	r1, r3
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f000 ff01 	bl	8015374 <USBD_CtlSendData>
              break;
 8014572:	e03a      	b.n	80145ea <USBD_StdEPReq+0x236>

            case USBD_STATE_CONFIGURED:

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014578:	2b00      	cmp	r3, #0
 801457a:	da08      	bge.n	801458e <USBD_StdEPReq+0x1da>
 801457c:	7bbb      	ldrb	r3, [r7, #14]
 801457e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014582:	3301      	adds	r3, #1
 8014584:	011b      	lsls	r3, r3, #4
 8014586:	687a      	ldr	r2, [r7, #4]
 8014588:	4413      	add	r3, r2
 801458a:	3304      	adds	r3, #4
 801458c:	e007      	b.n	801459e <USBD_StdEPReq+0x1ea>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801458e:	7bbb      	ldrb	r3, [r7, #14]
 8014590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014594:	3310      	adds	r3, #16
 8014596:	011b      	lsls	r3, r3, #4
 8014598:	687a      	ldr	r2, [r7, #4]
 801459a:	4413      	add	r3, r2
 801459c:	3304      	adds	r3, #4
 801459e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80145a0:	7bbb      	ldrb	r3, [r7, #14]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d002      	beq.n	80145ac <USBD_StdEPReq+0x1f8>
 80145a6:	7bbb      	ldrb	r3, [r7, #14]
 80145a8:	2b80      	cmp	r3, #128	; 0x80
 80145aa:	d103      	bne.n	80145b4 <USBD_StdEPReq+0x200>
              {
                pep->status = 0x0000U;
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	2200      	movs	r2, #0
 80145b0:	601a      	str	r2, [r3, #0]
 80145b2:	e00e      	b.n	80145d2 <USBD_StdEPReq+0x21e>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80145b4:	7bbb      	ldrb	r3, [r7, #14]
 80145b6:	4619      	mov	r1, r3
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f7ff faf9 	bl	8013bb0 <USBD_LL_IsStallEP>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d003      	beq.n	80145cc <USBD_StdEPReq+0x218>
              {
                pep->status = 0x0001U;
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	2201      	movs	r2, #1
 80145c8:	601a      	str	r2, [r3, #0]
 80145ca:	e002      	b.n	80145d2 <USBD_StdEPReq+0x21e>
              }
              else
              {
                pep->status = 0x0000U;
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	2200      	movs	r2, #0
 80145d0:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	2202      	movs	r2, #2
 80145d6:	4619      	mov	r1, r3
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f000 fecb 	bl	8015374 <USBD_CtlSendData>
              break;
 80145de:	e004      	b.n	80145ea <USBD_StdEPReq+0x236>

            default:
              USBD_CtlError(pdev, req);
 80145e0:	6839      	ldr	r1, [r7, #0]
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 fb25 	bl	8014c32 <USBD_CtlError>
              break;
 80145e8:	bf00      	nop
          }
          break;
 80145ea:	e004      	b.n	80145f6 <USBD_StdEPReq+0x242>

        default:
          USBD_CtlError(pdev, req);
 80145ec:	6839      	ldr	r1, [r7, #0]
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f000 fb1f 	bl	8014c32 <USBD_CtlError>
          break;
 80145f4:	bf00      	nop
      }
      break;
 80145f6:	e004      	b.n	8014602 <USBD_StdEPReq+0x24e>

    default:
      USBD_CtlError(pdev, req);
 80145f8:	6839      	ldr	r1, [r7, #0]
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f000 fb19 	bl	8014c32 <USBD_CtlError>
      break;
 8014600:	bf00      	nop
  }

  return ret;
 8014602:	7bfb      	ldrb	r3, [r7, #15]
}
 8014604:	4618      	mov	r0, r3
 8014606:	3710      	adds	r7, #16
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}

0801460c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b084      	sub	sp, #16
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014616:	2300      	movs	r3, #0
 8014618:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801461a:	2300      	movs	r3, #0
 801461c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801461e:	2300      	movs	r3, #0
 8014620:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	885b      	ldrh	r3, [r3, #2]
 8014626:	0a1b      	lsrs	r3, r3, #8
 8014628:	b29b      	uxth	r3, r3
 801462a:	3b01      	subs	r3, #1
 801462c:	2b06      	cmp	r3, #6
 801462e:	f200 8128 	bhi.w	8014882 <USBD_GetDescriptor+0x276>
 8014632:	a201      	add	r2, pc, #4	; (adr r2, 8014638 <USBD_GetDescriptor+0x2c>)
 8014634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014638:	08014655 	.word	0x08014655
 801463c:	0801466d 	.word	0x0801466d
 8014640:	080146ad 	.word	0x080146ad
 8014644:	08014883 	.word	0x08014883
 8014648:	08014883 	.word	0x08014883
 801464c:	08014823 	.word	0x08014823
 8014650:	0801484f 	.word	0x0801484f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	7c12      	ldrb	r2, [r2, #16]
 8014660:	f107 0108 	add.w	r1, r7, #8
 8014664:	4610      	mov	r0, r2
 8014666:	4798      	blx	r3
 8014668:	60f8      	str	r0, [r7, #12]
      break;
 801466a:	e112      	b.n	8014892 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	7c1b      	ldrb	r3, [r3, #16]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d10d      	bne.n	8014690 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801467c:	f107 0208 	add.w	r2, r7, #8
 8014680:	4610      	mov	r0, r2
 8014682:	4798      	blx	r3
 8014684:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	3301      	adds	r3, #1
 801468a:	2202      	movs	r2, #2
 801468c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801468e:	e100      	b.n	8014892 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014698:	f107 0208 	add.w	r2, r7, #8
 801469c:	4610      	mov	r0, r2
 801469e:	4798      	blx	r3
 80146a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	3301      	adds	r3, #1
 80146a6:	2202      	movs	r2, #2
 80146a8:	701a      	strb	r2, [r3, #0]
      break;
 80146aa:	e0f2      	b.n	8014892 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	885b      	ldrh	r3, [r3, #2]
 80146b0:	b2db      	uxtb	r3, r3
 80146b2:	2b05      	cmp	r3, #5
 80146b4:	f200 80ac 	bhi.w	8014810 <USBD_GetDescriptor+0x204>
 80146b8:	a201      	add	r2, pc, #4	; (adr r2, 80146c0 <USBD_GetDescriptor+0xb4>)
 80146ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146be:	bf00      	nop
 80146c0:	080146d9 	.word	0x080146d9
 80146c4:	0801470d 	.word	0x0801470d
 80146c8:	08014741 	.word	0x08014741
 80146cc:	08014775 	.word	0x08014775
 80146d0:	080147a9 	.word	0x080147a9
 80146d4:	080147dd 	.word	0x080147dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80146de:	685b      	ldr	r3, [r3, #4]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d00b      	beq.n	80146fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80146ea:	685b      	ldr	r3, [r3, #4]
 80146ec:	687a      	ldr	r2, [r7, #4]
 80146ee:	7c12      	ldrb	r2, [r2, #16]
 80146f0:	f107 0108 	add.w	r1, r7, #8
 80146f4:	4610      	mov	r0, r2
 80146f6:	4798      	blx	r3
 80146f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146fa:	e091      	b.n	8014820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80146fc:	6839      	ldr	r1, [r7, #0]
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f000 fa97 	bl	8014c32 <USBD_CtlError>
            err++;
 8014704:	7afb      	ldrb	r3, [r7, #11]
 8014706:	3301      	adds	r3, #1
 8014708:	72fb      	strb	r3, [r7, #11]
          break;
 801470a:	e089      	b.n	8014820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014712:	689b      	ldr	r3, [r3, #8]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d00b      	beq.n	8014730 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801471e:	689b      	ldr	r3, [r3, #8]
 8014720:	687a      	ldr	r2, [r7, #4]
 8014722:	7c12      	ldrb	r2, [r2, #16]
 8014724:	f107 0108 	add.w	r1, r7, #8
 8014728:	4610      	mov	r0, r2
 801472a:	4798      	blx	r3
 801472c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801472e:	e077      	b.n	8014820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014730:	6839      	ldr	r1, [r7, #0]
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f000 fa7d 	bl	8014c32 <USBD_CtlError>
            err++;
 8014738:	7afb      	ldrb	r3, [r7, #11]
 801473a:	3301      	adds	r3, #1
 801473c:	72fb      	strb	r3, [r7, #11]
          break;
 801473e:	e06f      	b.n	8014820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00b      	beq.n	8014764 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014752:	68db      	ldr	r3, [r3, #12]
 8014754:	687a      	ldr	r2, [r7, #4]
 8014756:	7c12      	ldrb	r2, [r2, #16]
 8014758:	f107 0108 	add.w	r1, r7, #8
 801475c:	4610      	mov	r0, r2
 801475e:	4798      	blx	r3
 8014760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014762:	e05d      	b.n	8014820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014764:	6839      	ldr	r1, [r7, #0]
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 fa63 	bl	8014c32 <USBD_CtlError>
            err++;
 801476c:	7afb      	ldrb	r3, [r7, #11]
 801476e:	3301      	adds	r3, #1
 8014770:	72fb      	strb	r3, [r7, #11]
          break;
 8014772:	e055      	b.n	8014820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801477a:	691b      	ldr	r3, [r3, #16]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d00b      	beq.n	8014798 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014786:	691b      	ldr	r3, [r3, #16]
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	7c12      	ldrb	r2, [r2, #16]
 801478c:	f107 0108 	add.w	r1, r7, #8
 8014790:	4610      	mov	r0, r2
 8014792:	4798      	blx	r3
 8014794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014796:	e043      	b.n	8014820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014798:	6839      	ldr	r1, [r7, #0]
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 fa49 	bl	8014c32 <USBD_CtlError>
            err++;
 80147a0:	7afb      	ldrb	r3, [r7, #11]
 80147a2:	3301      	adds	r3, #1
 80147a4:	72fb      	strb	r3, [r7, #11]
          break;
 80147a6:	e03b      	b.n	8014820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80147ae:	695b      	ldr	r3, [r3, #20]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d00b      	beq.n	80147cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80147ba:	695b      	ldr	r3, [r3, #20]
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	7c12      	ldrb	r2, [r2, #16]
 80147c0:	f107 0108 	add.w	r1, r7, #8
 80147c4:	4610      	mov	r0, r2
 80147c6:	4798      	blx	r3
 80147c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147ca:	e029      	b.n	8014820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80147cc:	6839      	ldr	r1, [r7, #0]
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f000 fa2f 	bl	8014c32 <USBD_CtlError>
            err++;
 80147d4:	7afb      	ldrb	r3, [r7, #11]
 80147d6:	3301      	adds	r3, #1
 80147d8:	72fb      	strb	r3, [r7, #11]
          break;
 80147da:	e021      	b.n	8014820 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80147e2:	699b      	ldr	r3, [r3, #24]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d00b      	beq.n	8014800 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80147ee:	699b      	ldr	r3, [r3, #24]
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	7c12      	ldrb	r2, [r2, #16]
 80147f4:	f107 0108 	add.w	r1, r7, #8
 80147f8:	4610      	mov	r0, r2
 80147fa:	4798      	blx	r3
 80147fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147fe:	e00f      	b.n	8014820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014800:	6839      	ldr	r1, [r7, #0]
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f000 fa15 	bl	8014c32 <USBD_CtlError>
            err++;
 8014808:	7afb      	ldrb	r3, [r7, #11]
 801480a:	3301      	adds	r3, #1
 801480c:	72fb      	strb	r3, [r7, #11]
          break;
 801480e:	e007      	b.n	8014820 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014810:	6839      	ldr	r1, [r7, #0]
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f000 fa0d 	bl	8014c32 <USBD_CtlError>
          err++;
 8014818:	7afb      	ldrb	r3, [r7, #11]
 801481a:	3301      	adds	r3, #1
 801481c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801481e:	e038      	b.n	8014892 <USBD_GetDescriptor+0x286>
 8014820:	e037      	b.n	8014892 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	7c1b      	ldrb	r3, [r3, #16]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d109      	bne.n	801483e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014832:	f107 0208 	add.w	r2, r7, #8
 8014836:	4610      	mov	r0, r2
 8014838:	4798      	blx	r3
 801483a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801483c:	e029      	b.n	8014892 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801483e:	6839      	ldr	r1, [r7, #0]
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f000 f9f6 	bl	8014c32 <USBD_CtlError>
        err++;
 8014846:	7afb      	ldrb	r3, [r7, #11]
 8014848:	3301      	adds	r3, #1
 801484a:	72fb      	strb	r3, [r7, #11]
      break;
 801484c:	e021      	b.n	8014892 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	7c1b      	ldrb	r3, [r3, #16]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d10d      	bne.n	8014872 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801485e:	f107 0208 	add.w	r2, r7, #8
 8014862:	4610      	mov	r0, r2
 8014864:	4798      	blx	r3
 8014866:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	3301      	adds	r3, #1
 801486c:	2207      	movs	r2, #7
 801486e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014870:	e00f      	b.n	8014892 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014872:	6839      	ldr	r1, [r7, #0]
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f000 f9dc 	bl	8014c32 <USBD_CtlError>
        err++;
 801487a:	7afb      	ldrb	r3, [r7, #11]
 801487c:	3301      	adds	r3, #1
 801487e:	72fb      	strb	r3, [r7, #11]
      break;
 8014880:	e007      	b.n	8014892 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014882:	6839      	ldr	r1, [r7, #0]
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f000 f9d4 	bl	8014c32 <USBD_CtlError>
      err++;
 801488a:	7afb      	ldrb	r3, [r7, #11]
 801488c:	3301      	adds	r3, #1
 801488e:	72fb      	strb	r3, [r7, #11]
      break;
 8014890:	bf00      	nop
  }

  if (err != 0U)
 8014892:	7afb      	ldrb	r3, [r7, #11]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d11c      	bne.n	80148d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014898:	893b      	ldrh	r3, [r7, #8]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d011      	beq.n	80148c2 <USBD_GetDescriptor+0x2b6>
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	88db      	ldrh	r3, [r3, #6]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d00d      	beq.n	80148c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	88da      	ldrh	r2, [r3, #6]
 80148aa:	893b      	ldrh	r3, [r7, #8]
 80148ac:	4293      	cmp	r3, r2
 80148ae:	bf28      	it	cs
 80148b0:	4613      	movcs	r3, r2
 80148b2:	b29b      	uxth	r3, r3
 80148b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80148b6:	893b      	ldrh	r3, [r7, #8]
 80148b8:	461a      	mov	r2, r3
 80148ba:	68f9      	ldr	r1, [r7, #12]
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f000 fd59 	bl	8015374 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	88db      	ldrh	r3, [r3, #6]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d104      	bne.n	80148d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 fdb0 	bl	8015430 <USBD_CtlSendStatus>
 80148d0:	e000      	b.n	80148d4 <USBD_GetDescriptor+0x2c8>
    return;
 80148d2:	bf00      	nop
    }
  }
}
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop

080148dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	889b      	ldrh	r3, [r3, #4]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d130      	bne.n	8014950 <USBD_SetAddress+0x74>
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	88db      	ldrh	r3, [r3, #6]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d12c      	bne.n	8014950 <USBD_SetAddress+0x74>
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	885b      	ldrh	r3, [r3, #2]
 80148fa:	2b7f      	cmp	r3, #127	; 0x7f
 80148fc:	d828      	bhi.n	8014950 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	885b      	ldrh	r3, [r3, #2]
 8014902:	b2db      	uxtb	r3, r3
 8014904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014908:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014910:	2b03      	cmp	r3, #3
 8014912:	d104      	bne.n	801491e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014914:	6839      	ldr	r1, [r7, #0]
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f000 f98b 	bl	8014c32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801491c:	e01d      	b.n	801495a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	7bfa      	ldrb	r2, [r7, #15]
 8014922:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014926:	7bfb      	ldrb	r3, [r7, #15]
 8014928:	4619      	mov	r1, r3
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f7ff f965 	bl	8013bfa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 fd7d 	bl	8015430 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014936:	7bfb      	ldrb	r3, [r7, #15]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d004      	beq.n	8014946 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2202      	movs	r2, #2
 8014940:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014944:	e009      	b.n	801495a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2201      	movs	r2, #1
 801494a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801494e:	e004      	b.n	801495a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014950:	6839      	ldr	r1, [r7, #0]
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f000 f96d 	bl	8014c32 <USBD_CtlError>
  }
}
 8014958:	bf00      	nop
 801495a:	bf00      	nop
 801495c:	3710      	adds	r7, #16
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
	...

08014964 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	885b      	ldrh	r3, [r3, #2]
 8014972:	b2da      	uxtb	r2, r3
 8014974:	4b41      	ldr	r3, [pc, #260]	; (8014a7c <USBD_SetConfig+0x118>)
 8014976:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014978:	4b40      	ldr	r3, [pc, #256]	; (8014a7c <USBD_SetConfig+0x118>)
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	2b01      	cmp	r3, #1
 801497e:	d904      	bls.n	801498a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8014980:	6839      	ldr	r1, [r7, #0]
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f000 f955 	bl	8014c32 <USBD_CtlError>
 8014988:	e075      	b.n	8014a76 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014990:	2b02      	cmp	r3, #2
 8014992:	d002      	beq.n	801499a <USBD_SetConfig+0x36>
 8014994:	2b03      	cmp	r3, #3
 8014996:	d023      	beq.n	80149e0 <USBD_SetConfig+0x7c>
 8014998:	e062      	b.n	8014a60 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801499a:	4b38      	ldr	r3, [pc, #224]	; (8014a7c <USBD_SetConfig+0x118>)
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d01a      	beq.n	80149d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80149a2:	4b36      	ldr	r3, [pc, #216]	; (8014a7c <USBD_SetConfig+0x118>)
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	461a      	mov	r2, r3
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2203      	movs	r2, #3
 80149b0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80149b4:	4b31      	ldr	r3, [pc, #196]	; (8014a7c <USBD_SetConfig+0x118>)
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	4619      	mov	r1, r3
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f7ff fa26 	bl	8013e0c <USBD_SetClassConfig>
 80149c0:	4603      	mov	r3, r0
 80149c2:	2b02      	cmp	r3, #2
 80149c4:	d104      	bne.n	80149d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80149c6:	6839      	ldr	r1, [r7, #0]
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f000 f932 	bl	8014c32 <USBD_CtlError>
            return;
 80149ce:	e052      	b.n	8014a76 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 fd2d 	bl	8015430 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80149d6:	e04e      	b.n	8014a76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f000 fd29 	bl	8015430 <USBD_CtlSendStatus>
        break;
 80149de:	e04a      	b.n	8014a76 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80149e0:	4b26      	ldr	r3, [pc, #152]	; (8014a7c <USBD_SetConfig+0x118>)
 80149e2:	781b      	ldrb	r3, [r3, #0]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d112      	bne.n	8014a0e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2202      	movs	r2, #2
 80149ec:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
          pdev->dev_config = cfgidx;
 80149f0:	4b22      	ldr	r3, [pc, #136]	; (8014a7c <USBD_SetConfig+0x118>)
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	461a      	mov	r2, r3
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80149fa:	4b20      	ldr	r3, [pc, #128]	; (8014a7c <USBD_SetConfig+0x118>)
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	4619      	mov	r1, r3
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f7ff fa22 	bl	8013e4a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f000 fd12 	bl	8015430 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014a0c:	e033      	b.n	8014a76 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8014a0e:	4b1b      	ldr	r3, [pc, #108]	; (8014a7c <USBD_SetConfig+0x118>)
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	461a      	mov	r2, r3
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d01d      	beq.n	8014a58 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	685b      	ldr	r3, [r3, #4]
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	4619      	mov	r1, r3
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f7ff fa10 	bl	8013e4a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014a2a:	4b14      	ldr	r3, [pc, #80]	; (8014a7c <USBD_SetConfig+0x118>)
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	461a      	mov	r2, r3
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014a34:	4b11      	ldr	r3, [pc, #68]	; (8014a7c <USBD_SetConfig+0x118>)
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	4619      	mov	r1, r3
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f7ff f9e6 	bl	8013e0c <USBD_SetClassConfig>
 8014a40:	4603      	mov	r3, r0
 8014a42:	2b02      	cmp	r3, #2
 8014a44:	d104      	bne.n	8014a50 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8014a46:	6839      	ldr	r1, [r7, #0]
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f000 f8f2 	bl	8014c32 <USBD_CtlError>
            return;
 8014a4e:	e012      	b.n	8014a76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f000 fced 	bl	8015430 <USBD_CtlSendStatus>
        break;
 8014a56:	e00e      	b.n	8014a76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f000 fce9 	bl	8015430 <USBD_CtlSendStatus>
        break;
 8014a5e:	e00a      	b.n	8014a76 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8014a60:	6839      	ldr	r1, [r7, #0]
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f000 f8e5 	bl	8014c32 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014a68:	4b04      	ldr	r3, [pc, #16]	; (8014a7c <USBD_SetConfig+0x118>)
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f7ff f9eb 	bl	8013e4a <USBD_ClrClassConfig>
        break;
 8014a74:	bf00      	nop
    }
  }
}
 8014a76:	3708      	adds	r7, #8
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	20001144 	.word	0x20001144

08014a80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
 8014a88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	88db      	ldrh	r3, [r3, #6]
 8014a8e:	2b01      	cmp	r3, #1
 8014a90:	d004      	beq.n	8014a9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014a92:	6839      	ldr	r1, [r7, #0]
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f000 f8cc 	bl	8014c32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014a9a:	e022      	b.n	8014ae2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014aa2:	2b02      	cmp	r3, #2
 8014aa4:	dc02      	bgt.n	8014aac <USBD_GetConfig+0x2c>
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	dc03      	bgt.n	8014ab2 <USBD_GetConfig+0x32>
 8014aaa:	e015      	b.n	8014ad8 <USBD_GetConfig+0x58>
 8014aac:	2b03      	cmp	r3, #3
 8014aae:	d00b      	beq.n	8014ac8 <USBD_GetConfig+0x48>
 8014ab0:	e012      	b.n	8014ad8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	3308      	adds	r3, #8
 8014abc:	2201      	movs	r2, #1
 8014abe:	4619      	mov	r1, r3
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f000 fc57 	bl	8015374 <USBD_CtlSendData>
        break;
 8014ac6:	e00c      	b.n	8014ae2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	3304      	adds	r3, #4
 8014acc:	2201      	movs	r2, #1
 8014ace:	4619      	mov	r1, r3
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f000 fc4f 	bl	8015374 <USBD_CtlSendData>
        break;
 8014ad6:	e004      	b.n	8014ae2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8014ad8:	6839      	ldr	r1, [r7, #0]
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 f8a9 	bl	8014c32 <USBD_CtlError>
        break;
 8014ae0:	bf00      	nop
}
 8014ae2:	bf00      	nop
 8014ae4:	3708      	adds	r7, #8
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}

08014aea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014aea:	b580      	push	{r7, lr}
 8014aec:	b082      	sub	sp, #8
 8014aee:	af00      	add	r7, sp, #0
 8014af0:	6078      	str	r0, [r7, #4]
 8014af2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014afa:	3b01      	subs	r3, #1
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d81e      	bhi.n	8014b3e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	88db      	ldrh	r3, [r3, #6]
 8014b04:	2b02      	cmp	r3, #2
 8014b06:	d004      	beq.n	8014b12 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8014b08:	6839      	ldr	r1, [r7, #0]
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 f891 	bl	8014c32 <USBD_CtlError>
        break;
 8014b10:	e01a      	b.n	8014b48 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2201      	movs	r2, #1
 8014b16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d005      	beq.n	8014b2e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	68db      	ldr	r3, [r3, #12]
 8014b26:	f043 0202 	orr.w	r2, r3, #2
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	330c      	adds	r3, #12
 8014b32:	2202      	movs	r2, #2
 8014b34:	4619      	mov	r1, r3
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	f000 fc1c 	bl	8015374 <USBD_CtlSendData>
      break;
 8014b3c:	e004      	b.n	8014b48 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8014b3e:	6839      	ldr	r1, [r7, #0]
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f000 f876 	bl	8014c32 <USBD_CtlError>
      break;
 8014b46:	bf00      	nop
  }
}
 8014b48:	bf00      	nop
 8014b4a:	3708      	adds	r7, #8
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bd80      	pop	{r7, pc}

08014b50 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
 8014b58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	885b      	ldrh	r3, [r3, #2]
 8014b5e:	2b01      	cmp	r3, #1
 8014b60:	d106      	bne.n	8014b70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	2201      	movs	r2, #1
 8014b66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    USBD_CtlSendStatus(pdev);
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f000 fc60 	bl	8015430 <USBD_CtlSendStatus>
  }
}
 8014b70:	bf00      	nop
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}

08014b78 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b082      	sub	sp, #8
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014b88:	3b01      	subs	r3, #1
 8014b8a:	2b02      	cmp	r3, #2
 8014b8c:	d80b      	bhi.n	8014ba6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	885b      	ldrh	r3, [r3, #2]
 8014b92:	2b01      	cmp	r3, #1
 8014b94:	d10c      	bne.n	8014bb0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        USBD_CtlSendStatus(pdev);
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f000 fc46 	bl	8015430 <USBD_CtlSendStatus>
      }
      break;
 8014ba4:	e004      	b.n	8014bb0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8014ba6:	6839      	ldr	r1, [r7, #0]
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f000 f842 	bl	8014c32 <USBD_CtlError>
      break;
 8014bae:	e000      	b.n	8014bb2 <USBD_ClrFeature+0x3a>
      break;
 8014bb0:	bf00      	nop
  }
}
 8014bb2:	bf00      	nop
 8014bb4:	3708      	adds	r7, #8
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}

08014bba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014bba:	b480      	push	{r7}
 8014bbc:	b083      	sub	sp, #12
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6078      	str	r0, [r7, #4]
 8014bc2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	781a      	ldrb	r2, [r3, #0]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	785a      	ldrb	r2, [r3, #1]
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	3302      	adds	r3, #2
 8014bd8:	781b      	ldrb	r3, [r3, #0]
 8014bda:	b29a      	uxth	r2, r3
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	3303      	adds	r3, #3
 8014be0:	781b      	ldrb	r3, [r3, #0]
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	021b      	lsls	r3, r3, #8
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	4413      	add	r3, r2
 8014bea:	b29a      	uxth	r2, r3
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	3304      	adds	r3, #4
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	3305      	adds	r3, #5
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	021b      	lsls	r3, r3, #8
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	4413      	add	r3, r2
 8014c06:	b29a      	uxth	r2, r3
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	3306      	adds	r3, #6
 8014c10:	781b      	ldrb	r3, [r3, #0]
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	3307      	adds	r3, #7
 8014c18:	781b      	ldrb	r3, [r3, #0]
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	021b      	lsls	r3, r3, #8
 8014c1e:	b29b      	uxth	r3, r3
 8014c20:	4413      	add	r3, r2
 8014c22:	b29a      	uxth	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	80da      	strh	r2, [r3, #6]

}
 8014c28:	bf00      	nop
 8014c2a:	370c      	adds	r7, #12
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bc80      	pop	{r7}
 8014c30:	4770      	bx	lr

08014c32 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8014c32:	b580      	push	{r7, lr}
 8014c34:	b082      	sub	sp, #8
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	6078      	str	r0, [r7, #4]
 8014c3a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014c3c:	2180      	movs	r1, #128	; 0x80
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f7fe ff78 	bl	8013b34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014c44:	2100      	movs	r1, #0
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f7fe ff74 	bl	8013b34 <USBD_LL_StallEP>
}
 8014c4c:	bf00      	nop
 8014c4e:	3708      	adds	r7, #8
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}

08014c54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b086      	sub	sp, #24
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	60b9      	str	r1, [r7, #8]
 8014c5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014c60:	2300      	movs	r3, #0
 8014c62:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d032      	beq.n	8014cd0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8014c6a:	68f8      	ldr	r0, [r7, #12]
 8014c6c:	f000 f834 	bl	8014cd8 <USBD_GetLen>
 8014c70:	4603      	mov	r3, r0
 8014c72:	3301      	adds	r3, #1
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	005b      	lsls	r3, r3, #1
 8014c78:	b29a      	uxth	r2, r3
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8014c7e:	7dfb      	ldrb	r3, [r7, #23]
 8014c80:	1c5a      	adds	r2, r3, #1
 8014c82:	75fa      	strb	r2, [r7, #23]
 8014c84:	461a      	mov	r2, r3
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	4413      	add	r3, r2
 8014c8a:	687a      	ldr	r2, [r7, #4]
 8014c8c:	7812      	ldrb	r2, [r2, #0]
 8014c8e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014c90:	7dfb      	ldrb	r3, [r7, #23]
 8014c92:	1c5a      	adds	r2, r3, #1
 8014c94:	75fa      	strb	r2, [r7, #23]
 8014c96:	461a      	mov	r2, r3
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	4413      	add	r3, r2
 8014c9c:	2203      	movs	r2, #3
 8014c9e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8014ca0:	e012      	b.n	8014cc8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	1c5a      	adds	r2, r3, #1
 8014ca6:	60fa      	str	r2, [r7, #12]
 8014ca8:	7dfa      	ldrb	r2, [r7, #23]
 8014caa:	1c51      	adds	r1, r2, #1
 8014cac:	75f9      	strb	r1, [r7, #23]
 8014cae:	4611      	mov	r1, r2
 8014cb0:	68ba      	ldr	r2, [r7, #8]
 8014cb2:	440a      	add	r2, r1
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8014cb8:	7dfb      	ldrb	r3, [r7, #23]
 8014cba:	1c5a      	adds	r2, r3, #1
 8014cbc:	75fa      	strb	r2, [r7, #23]
 8014cbe:	461a      	mov	r2, r3
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	4413      	add	r3, r2
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d1e8      	bne.n	8014ca2 <USBD_GetString+0x4e>
    }
  }
}
 8014cd0:	bf00      	nop
 8014cd2:	3718      	adds	r7, #24
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014ce4:	e005      	b.n	8014cf2 <USBD_GetLen+0x1a>
  {
    len++;
 8014ce6:	7bfb      	ldrb	r3, [r7, #15]
 8014ce8:	3301      	adds	r3, #1
 8014cea:	73fb      	strb	r3, [r7, #15]
    buf++;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	3301      	adds	r3, #1
 8014cf0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d1f5      	bne.n	8014ce6 <USBD_GetLen+0xe>
  }

  return len;
 8014cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3714      	adds	r7, #20
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bc80      	pop	{r7}
 8014d04:	4770      	bx	lr

08014d06 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8014d06:	b480      	push	{r7}
 8014d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014d0a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bc80      	pop	{r7}
 8014d12:	4770      	bx	lr

08014d14 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8014d14:	b480      	push	{r7}
 8014d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8014d18:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bc80      	pop	{r7}
 8014d20:	4770      	bx	lr

08014d22 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* report)
{
 8014d22:	b580      	push	{r7, lr}
 8014d24:	b082      	sub	sp, #8
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
	 USBD_OutEvent_HID(report);
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	f7fd fb38 	bl	80123a0 <USBD_OutEvent_HID>
 /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8014d30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3708      	adds	r7, #8
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}

08014d3a <CUSTOM_HID_GetEvent_FS>:

/* USER CODE BEGIN 7 */
static int8_t CUSTOM_HID_GetEvent_FS(USBD_SetupReqTypedef* req,uint8_t** return_buf)
{
 8014d3a:	b580      	push	{r7, lr}
 8014d3c:	b082      	sub	sp, #8
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
 8014d42:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_GetEvent_HID((req->wValue & 0xff),req->wLength,return_buf);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	885b      	ldrh	r3, [r3, #2]
 8014d48:	b2d8      	uxtb	r0, r3
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	88db      	ldrh	r3, [r3, #6]
 8014d4e:	683a      	ldr	r2, [r7, #0]
 8014d50:	4619      	mov	r1, r3
 8014d52:	f7fd fb3d 	bl	80123d0 <USBD_GetEvent_HID>
  return (USBD_OK);
 8014d56:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3708      	adds	r7, #8
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	460b      	mov	r3, r1
 8014d6a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8014d70:	2340      	movs	r3, #64	; 0x40
 8014d72:	2203      	movs	r2, #3
 8014d74:	2183      	movs	r1, #131	; 0x83
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f7fe fe97 	bl	8013aaa <USBD_LL_OpenEP>
		  	  	 USBD_EP_TYPE_INTR,
				 CUSTOM_HID_EPIN_SIZE);


  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8014d7c:	2340      	movs	r3, #64	; 0x40
 8014d7e:	2203      	movs	r2, #3
 8014d80:	2102      	movs	r1, #2
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f7fe fe91 	bl	8013aaa <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);



  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8014d88:	f44f 7005 	mov.w	r0, #532	; 0x214
 8014d8c:	f001 fcf2 	bl	8016774 <malloc>
 8014d90:	4603      	mov	r3, r0
 8014d92:	461a      	mov	r2, r3
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->pClassData == NULL)
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d102      	bne.n	8014daa <USBD_CUSTOM_HID_Init+0x4a>
  {
    ret = 1U;
 8014da4:	2301      	movs	r3, #1
 8014da6:	73fb      	strb	r3, [r7, #15]
 8014da8:	e013      	b.n	8014dd2 <USBD_CUSTOM_HID_Init+0x72>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014db0:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	2200      	movs	r2, #0
 8014db6:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8014dc4:	68ba      	ldr	r2, [r7, #8]
 8014dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014dca:	2102      	movs	r1, #2
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f7fe ff56 	bl	8013c7e <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8014dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3710      	adds	r7, #16
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	460b      	mov	r3, r1
 8014de6:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8014de8:	2183      	movs	r1, #131	; 0x83
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f7fe fe83 	bl	8013af6 <USBD_LL_CloseEP>


  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8014df0:	2102      	movs	r1, #2
 8014df2:	6878      	ldr	r0, [r7, #4]
 8014df4:	f7fe fe7f 	bl	8013af6 <USBD_LL_CloseEP>


  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d00e      	beq.n	8014e20 <USBD_CUSTOM_HID_DeInit+0x44>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014e08:	689b      	ldr	r3, [r3, #8]
 8014e0a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014e12:	4618      	mov	r0, r3
 8014e14:	f001 fcb6 	bl	8016784 <free>
    pdev->pClassData = NULL;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  return USBD_OK;
 8014e20:	2300      	movs	r3, #0
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3708      	adds	r7, #8
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
	...

08014e2c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b088      	sub	sp, #32
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014e3c:	613b      	str	r3, [r7, #16]

  uint8_t* get_feature_return_buf;
  uint16_t len = 0U;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8014e42:	2300      	movs	r3, #0
 8014e44:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8014e46:	2300      	movs	r3, #0
 8014e48:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d076      	beq.n	8014f48 <USBD_CUSTOM_HID_Setup+0x11c>
 8014e5a:	2b20      	cmp	r3, #32
 8014e5c:	f040 8102 	bne.w	8015064 <USBD_CUSTOM_HID_Setup+0x238>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	785b      	ldrb	r3, [r3, #1]
 8014e64:	3b01      	subs	r3, #1
 8014e66:	2b0a      	cmp	r3, #10
 8014e68:	d866      	bhi.n	8014f38 <USBD_CUSTOM_HID_Setup+0x10c>
 8014e6a:	a201      	add	r2, pc, #4	; (adr r2, 8014e70 <USBD_CUSTOM_HID_Setup+0x44>)
 8014e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e70:	08014efd 	.word	0x08014efd
 8014e74:	08014ed3 	.word	0x08014ed3
 8014e78:	08014ead 	.word	0x08014ead
 8014e7c:	08014f39 	.word	0x08014f39
 8014e80:	08014f39 	.word	0x08014f39
 8014e84:	08014f39 	.word	0x08014f39
 8014e88:	08014f39 	.word	0x08014f39
 8014e8c:	08014f39 	.word	0x08014f39
 8014e90:	08014ee5 	.word	0x08014ee5
 8014e94:	08014ebf 	.word	0x08014ebf
 8014e98:	08014e9d 	.word	0x08014e9d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	885b      	ldrh	r3, [r3, #2]
 8014ea0:	b2db      	uxtb	r3, r3
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
          break;
 8014eaa:	e04c      	b.n	8014f46 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f000 fa5c 	bl	8015374 <USBD_CtlSendData>
          break;
 8014ebc:	e043      	b.n	8014f46 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	885b      	ldrh	r3, [r3, #2]
 8014ec2:	0a1b      	lsrs	r3, r3, #8
 8014ec4:	b29b      	uxth	r3, r3
 8014ec6:	b2db      	uxtb	r3, r3
 8014ec8:	461a      	mov	r2, r3
 8014eca:	693b      	ldr	r3, [r7, #16]
 8014ecc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
          break;
 8014ed0:	e039      	b.n	8014f46 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014ed8:	2201      	movs	r2, #1
 8014eda:	4619      	mov	r1, r3
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f000 fa49 	bl	8015374 <USBD_CtlSendData>
          break;
 8014ee2:	e030      	b.n	8014f46 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8014eec:	6939      	ldr	r1, [r7, #16]
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	88db      	ldrh	r3, [r3, #6]
 8014ef2:	461a      	mov	r2, r3
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f000 fa6b 	bl	80153d0 <USBD_CtlPrepareRx>
          break;
 8014efa:	e024      	b.n	8014f46 <USBD_CUSTOM_HID_Setup+0x11a>

        case CUSTOM_HID_REQ_GET_REPORT: //TODO: check get reports
          get_feature_return_buf = 0;
 8014efc:	2300      	movs	r3, #0
 8014efe:	60fb      	str	r3, [r7, #12]
          ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->GetEvent(req, &get_feature_return_buf);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014f06:	691b      	ldr	r3, [r3, #16]
 8014f08:	f107 020c 	add.w	r2, r7, #12
 8014f0c:	4611      	mov	r1, r2
 8014f0e:	6838      	ldr	r0, [r7, #0]
 8014f10:	4798      	blx	r3
          // user must set return buffer in callback now
          if(get_feature_return_buf == 0){
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d105      	bne.n	8014f24 <USBD_CUSTOM_HID_Setup+0xf8>
        	  USBD_CtlError (pdev, req);
 8014f18:	6839      	ldr	r1, [r7, #0]
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f7ff fe89 	bl	8014c32 <USBD_CtlError>
        	  return USBD_FAIL;
 8014f20:	2302      	movs	r3, #2
 8014f22:	e0a7      	b.n	8015074 <USBD_CUSTOM_HID_Setup+0x248>
           }else{
        	   USBD_CtlSendData (pdev, get_feature_return_buf, (uint8_t)(req->wLength));
 8014f24:	68f9      	ldr	r1, [r7, #12]
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	88db      	ldrh	r3, [r3, #6]
 8014f2a:	b2db      	uxtb	r3, r3
 8014f2c:	b29b      	uxth	r3, r3
 8014f2e:	461a      	mov	r2, r3
 8014f30:	6878      	ldr	r0, [r7, #4]
 8014f32:	f000 fa1f 	bl	8015374 <USBD_CtlSendData>
            }

          break;
 8014f36:	e006      	b.n	8014f46 <USBD_CUSTOM_HID_Setup+0x11a>
        default:
          USBD_CtlError(pdev, req);
 8014f38:	6839      	ldr	r1, [r7, #0]
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f7ff fe79 	bl	8014c32 <USBD_CtlError>
          ret = USBD_FAIL;
 8014f40:	2302      	movs	r3, #2
 8014f42:	75fb      	strb	r3, [r7, #23]
          break;
 8014f44:	bf00      	nop
      }
      break;
 8014f46:	e094      	b.n	8015072 <USBD_CUSTOM_HID_Setup+0x246>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	785b      	ldrb	r3, [r3, #1]
 8014f4c:	2b0b      	cmp	r3, #11
 8014f4e:	f200 8081 	bhi.w	8015054 <USBD_CUSTOM_HID_Setup+0x228>
 8014f52:	a201      	add	r2, pc, #4	; (adr r2, 8014f58 <USBD_CUSTOM_HID_Setup+0x12c>)
 8014f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f58:	08014f89 	.word	0x08014f89
 8014f5c:	08015055 	.word	0x08015055
 8014f60:	08015055 	.word	0x08015055
 8014f64:	08015055 	.word	0x08015055
 8014f68:	08015055 	.word	0x08015055
 8014f6c:	08015055 	.word	0x08015055
 8014f70:	08014fb1 	.word	0x08014fb1
 8014f74:	08015055 	.word	0x08015055
 8014f78:	08015055 	.word	0x08015055
 8014f7c:	08015055 	.word	0x08015055
 8014f80:	08015003 	.word	0x08015003
 8014f84:	0801502d 	.word	0x0801502d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8014f8e:	2b03      	cmp	r3, #3
 8014f90:	d107      	bne.n	8014fa2 <USBD_CUSTOM_HID_Setup+0x176>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8014f92:	f107 030a 	add.w	r3, r7, #10
 8014f96:	2202      	movs	r2, #2
 8014f98:	4619      	mov	r1, r3
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f000 f9ea 	bl	8015374 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014fa0:	e05f      	b.n	8015062 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 8014fa2:	6839      	ldr	r1, [r7, #0]
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f7ff fe44 	bl	8014c32 <USBD_CtlError>
            ret = USBD_FAIL;
 8014faa:	2302      	movs	r3, #2
 8014fac:	75fb      	strb	r3, [r7, #23]
          break;
 8014fae:	e058      	b.n	8015062 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	885b      	ldrh	r3, [r3, #2]
 8014fb4:	0a1b      	lsrs	r3, r3, #8
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	2b22      	cmp	r3, #34	; 0x22
 8014fba:	d10d      	bne.n	8014fd8 <USBD_CUSTOM_HID_Setup+0x1ac>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	88db      	ldrh	r3, [r3, #6]
 8014fc0:	f240 42c2 	movw	r2, #1218	; 0x4c2
 8014fc4:	4293      	cmp	r3, r2
 8014fc6:	bf28      	it	cs
 8014fc8:	4613      	movcs	r3, r2
 8014fca:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	61bb      	str	r3, [r7, #24]
 8014fd6:	e00d      	b.n	8014ff4 <USBD_CUSTOM_HID_Setup+0x1c8>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	885b      	ldrh	r3, [r3, #2]
 8014fdc:	0a1b      	lsrs	r3, r3, #8
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	2b21      	cmp	r3, #33	; 0x21
 8014fe2:	d107      	bne.n	8014ff4 <USBD_CUSTOM_HID_Setup+0x1c8>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8014fe4:	4b25      	ldr	r3, [pc, #148]	; (801507c <USBD_CUSTOM_HID_Setup+0x250>)
 8014fe6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	88db      	ldrh	r3, [r3, #6]
 8014fec:	2b09      	cmp	r3, #9
 8014fee:	bf28      	it	cs
 8014ff0:	2309      	movcs	r3, #9
 8014ff2:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8014ff4:	8bfb      	ldrh	r3, [r7, #30]
 8014ff6:	461a      	mov	r2, r3
 8014ff8:	69b9      	ldr	r1, [r7, #24]
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f000 f9ba 	bl	8015374 <USBD_CtlSendData>
          break;
 8015000:	e02f      	b.n	8015062 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8015008:	2b03      	cmp	r3, #3
 801500a:	d108      	bne.n	801501e <USBD_CUSTOM_HID_Setup+0x1f2>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015012:	2201      	movs	r2, #1
 8015014:	4619      	mov	r1, r3
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	f000 f9ac 	bl	8015374 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801501c:	e021      	b.n	8015062 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 801501e:	6839      	ldr	r1, [r7, #0]
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f7ff fe06 	bl	8014c32 <USBD_CtlError>
            ret = USBD_FAIL;
 8015026:	2302      	movs	r3, #2
 8015028:	75fb      	strb	r3, [r7, #23]
          break;
 801502a:	e01a      	b.n	8015062 <USBD_CUSTOM_HID_Setup+0x236>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8015032:	2b03      	cmp	r3, #3
 8015034:	d107      	bne.n	8015046 <USBD_CUSTOM_HID_Setup+0x21a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	885b      	ldrh	r3, [r3, #2]
 801503a:	b2db      	uxtb	r3, r3
 801503c:	461a      	mov	r2, r3
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015044:	e00d      	b.n	8015062 <USBD_CUSTOM_HID_Setup+0x236>
            USBD_CtlError(pdev, req);
 8015046:	6839      	ldr	r1, [r7, #0]
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f7ff fdf2 	bl	8014c32 <USBD_CtlError>
            ret = USBD_FAIL;
 801504e:	2302      	movs	r3, #2
 8015050:	75fb      	strb	r3, [r7, #23]
          break;
 8015052:	e006      	b.n	8015062 <USBD_CUSTOM_HID_Setup+0x236>

        default:
          USBD_CtlError(pdev, req);
 8015054:	6839      	ldr	r1, [r7, #0]
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f7ff fdeb 	bl	8014c32 <USBD_CtlError>
          ret = USBD_FAIL;
 801505c:	2302      	movs	r3, #2
 801505e:	75fb      	strb	r3, [r7, #23]
          break;
 8015060:	bf00      	nop
      }
      break;
 8015062:	e006      	b.n	8015072 <USBD_CUSTOM_HID_Setup+0x246>

    default:
      USBD_CtlError(pdev, req);
 8015064:	6839      	ldr	r1, [r7, #0]
 8015066:	6878      	ldr	r0, [r7, #4]
 8015068:	f7ff fde3 	bl	8014c32 <USBD_CtlError>
      ret = USBD_FAIL;
 801506c:	2302      	movs	r3, #2
 801506e:	75fb      	strb	r3, [r7, #23]
      break;
 8015070:	bf00      	nop
  }
  return ret;
 8015072:	7dfb      	ldrb	r3, [r7, #23]
}
 8015074:	4618      	mov	r0, r3
 8015076:	3720      	adds	r7, #32
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}
 801507c:	200006a8 	.word	0x200006a8

08015080 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b086      	sub	sp, #24
 8015084:	af00      	add	r7, sp, #0
 8015086:	60f8      	str	r0, [r7, #12]
 8015088:	60b9      	str	r1, [r7, #8]
 801508a:	4613      	mov	r3, r2
 801508c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015094:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801509c:	2b03      	cmp	r3, #3
 801509e:	d111      	bne.n	80150c4 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d10a      	bne.n	80150c0 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	2201      	movs	r2, #1
 80150ae:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80150b2:	88fb      	ldrh	r3, [r7, #6]
 80150b4:	68ba      	ldr	r2, [r7, #8]
 80150b6:	2183      	movs	r1, #131	; 0x83
 80150b8:	68f8      	ldr	r0, [r7, #12]
 80150ba:	f7fe fdbd 	bl	8013c38 <USBD_LL_Transmit>
 80150be:	e001      	b.n	80150c4 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80150c0:	2301      	movs	r3, #1
 80150c2:	e000      	b.n	80150c6 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80150c4:	2300      	movs	r3, #0
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3718      	adds	r7, #24
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
	...

080150d0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80150d0:	b480      	push	{r7}
 80150d2:	b083      	sub	sp, #12
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2229      	movs	r2, #41	; 0x29
 80150dc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80150de:	4b03      	ldr	r3, [pc, #12]	; (80150ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	370c      	adds	r7, #12
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bc80      	pop	{r7}
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	20000624 	.word	0x20000624

080150f0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b083      	sub	sp, #12
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2229      	movs	r2, #41	; 0x29
 80150fc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80150fe:	4b03      	ldr	r3, [pc, #12]	; (801510c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8015100:	4618      	mov	r0, r3
 8015102:	370c      	adds	r7, #12
 8015104:	46bd      	mov	sp, r7
 8015106:	bc80      	pop	{r7}
 8015108:	4770      	bx	lr
 801510a:	bf00      	nop
 801510c:	20000650 	.word	0x20000650

08015110 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015110:	b480      	push	{r7}
 8015112:	b083      	sub	sp, #12
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2229      	movs	r2, #41	; 0x29
 801511c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 801511e:	4b03      	ldr	r3, [pc, #12]	; (801512c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8015120:	4618      	mov	r0, r3
 8015122:	370c      	adds	r7, #12
 8015124:	46bd      	mov	sp, r7
 8015126:	bc80      	pop	{r7}
 8015128:	4770      	bx	lr
 801512a:	bf00      	nop
 801512c:	2000067c 	.word	0x2000067c

08015130 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8015130:	b480      	push	{r7}
 8015132:	b083      	sub	sp, #12
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	460b      	mov	r3, r1
 801513a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015142:	2200      	movs	r2, #0
 8015144:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8015148:	2300      	movs	r3, #0
}
 801514a:	4618      	mov	r0, r3
 801514c:	370c      	adds	r7, #12
 801514e:	46bd      	mov	sp, r7
 8015150:	bc80      	pop	{r7}
 8015152:	4770      	bx	lr

08015154 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b084      	sub	sp, #16
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	460b      	mov	r3, r1
 801515e:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015166:	60fb      	str	r3, [r7, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],hhid->Report_buf[1]);

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801516e:	68db      	ldr	r3, [r3, #12]
 8015170:	68fa      	ldr	r2, [r7, #12]
 8015172:	4610      	mov	r0, r2
 8015174:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8015176:	68fa      	ldr	r2, [r7, #12]
 8015178:	f44f 7300 	mov.w	r3, #512	; 0x200
 801517c:	2102      	movs	r1, #2
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f7fe fd7d 	bl	8013c7e <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8015184:	2300      	movs	r3, #0
}
 8015186:	4618      	mov	r0, r3
 8015188:	3710      	adds	r7, #16
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}

0801518e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801518e:	b580      	push	{r7, lr}
 8015190:	b084      	sub	sp, #16
 8015192:	af00      	add	r7, sp, #0
 8015194:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801519c:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80151a4:	2b01      	cmp	r3, #1
 80151a6:	d10a      	bne.n	80151be <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80151ae:	68db      	ldr	r3, [r3, #12]
 80151b0:	68fa      	ldr	r2, [r7, #12]
 80151b2:	4610      	mov	r0, r2
 80151b4:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	2200      	movs	r2, #0
 80151ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  }

  return USBD_OK;
 80151be:	2300      	movs	r3, #0
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3710      	adds	r7, #16
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80151c8:	b480      	push	{r7}
 80151ca:	b083      	sub	sp, #12
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	220a      	movs	r2, #10
 80151d4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80151d6:	4b03      	ldr	r3, [pc, #12]	; (80151e4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80151d8:	4618      	mov	r0, r3
 80151da:	370c      	adds	r7, #12
 80151dc:	46bd      	mov	sp, r7
 80151de:	bc80      	pop	{r7}
 80151e0:	4770      	bx	lr
 80151e2:	bf00      	nop
 80151e4:	200006b4 	.word	0x200006b4

080151e8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80151e8:	b480      	push	{r7}
 80151ea:	b085      	sub	sp, #20
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80151f2:	2302      	movs	r3, #2
 80151f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d005      	beq.n	8015208 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	683a      	ldr	r2, [r7, #0]
 8015200:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;
 8015204:	2300      	movs	r3, #0
 8015206:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015208:	7bfb      	ldrb	r3, [r7, #15]
}
 801520a:	4618      	mov	r0, r3
 801520c:	3714      	adds	r7, #20
 801520e:	46bd      	mov	sp, r7
 8015210:	bc80      	pop	{r7}
 8015212:	4770      	bx	lr

08015214 <USBD_FS_DeviceDescriptor_Composite>:
    USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
    USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
  } ;

uint8_t * USBD_FS_DeviceDescriptor_Composite(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015214:	b480      	push	{r7}
 8015216:	b083      	sub	sp, #12
 8015218:	af00      	add	r7, sp, #0
 801521a:	4603      	mov	r3, r0
 801521c:	6039      	str	r1, [r7, #0]
 801521e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc_Composite);
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	2212      	movs	r2, #18
 8015224:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc_Composite;
 8015226:	4b03      	ldr	r3, [pc, #12]	; (8015234 <USBD_FS_DeviceDescriptor_Composite+0x20>)
}
 8015228:	4618      	mov	r0, r3
 801522a:	370c      	adds	r7, #12
 801522c:	46bd      	mov	sp, r7
 801522e:	bc80      	pop	{r7}
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
 8015234:	200006dc 	.word	0x200006dc

08015238 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015238:	b480      	push	{r7}
 801523a:	b083      	sub	sp, #12
 801523c:	af00      	add	r7, sp, #0
 801523e:	4603      	mov	r3, r0
 8015240:	6039      	str	r1, [r7, #0]
 8015242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	2204      	movs	r2, #4
 8015248:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801524a:	4b03      	ldr	r3, [pc, #12]	; (8015258 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801524c:	4618      	mov	r0, r3
 801524e:	370c      	adds	r7, #12
 8015250:	46bd      	mov	sp, r7
 8015252:	bc80      	pop	{r7}
 8015254:	4770      	bx	lr
 8015256:	bf00      	nop
 8015258:	200006f0 	.word	0x200006f0

0801525c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b082      	sub	sp, #8
 8015260:	af00      	add	r7, sp, #0
 8015262:	4603      	mov	r3, r0
 8015264:	6039      	str	r1, [r7, #0]
 8015266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015268:	79fb      	ldrb	r3, [r7, #7]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d105      	bne.n	801527a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801526e:	683a      	ldr	r2, [r7, #0]
 8015270:	4907      	ldr	r1, [pc, #28]	; (8015290 <USBD_FS_ProductStrDescriptor+0x34>)
 8015272:	4808      	ldr	r0, [pc, #32]	; (8015294 <USBD_FS_ProductStrDescriptor+0x38>)
 8015274:	f7ff fcee 	bl	8014c54 <USBD_GetString>
 8015278:	e004      	b.n	8015284 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801527a:	683a      	ldr	r2, [r7, #0]
 801527c:	4904      	ldr	r1, [pc, #16]	; (8015290 <USBD_FS_ProductStrDescriptor+0x34>)
 801527e:	4805      	ldr	r0, [pc, #20]	; (8015294 <USBD_FS_ProductStrDescriptor+0x38>)
 8015280:	f7ff fce8 	bl	8014c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015284:	4b02      	ldr	r3, [pc, #8]	; (8015290 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015286:	4618      	mov	r0, r3
 8015288:	3708      	adds	r7, #8
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	20001e04 	.word	0x20001e04
 8015294:	0801764c 	.word	0x0801764c

08015298 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b082      	sub	sp, #8
 801529c:	af00      	add	r7, sp, #0
 801529e:	4603      	mov	r3, r0
 80152a0:	6039      	str	r1, [r7, #0]
 80152a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80152a4:	683a      	ldr	r2, [r7, #0]
 80152a6:	4904      	ldr	r1, [pc, #16]	; (80152b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80152a8:	4804      	ldr	r0, [pc, #16]	; (80152bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80152aa:	f7ff fcd3 	bl	8014c54 <USBD_GetString>
  return USBD_StrDesc;
 80152ae:	4b02      	ldr	r3, [pc, #8]	; (80152b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	3708      	adds	r7, #8
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bd80      	pop	{r7, pc}
 80152b8:	20001e04 	.word	0x20001e04
 80152bc:	08017658 	.word	0x08017658

080152c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b082      	sub	sp, #8
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	4603      	mov	r3, r0
 80152c8:	6039      	str	r1, [r7, #0]
 80152ca:	71fb      	strb	r3, [r7, #7]
	if(speed == USBD_SPEED_HIGH)
 80152cc:	79fb      	ldrb	r3, [r7, #7]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d105      	bne.n	80152de <USBD_FS_SerialStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80152d2:	683a      	ldr	r2, [r7, #0]
 80152d4:	4907      	ldr	r1, [pc, #28]	; (80152f4 <USBD_FS_SerialStrDescriptor+0x34>)
 80152d6:	4808      	ldr	r0, [pc, #32]	; (80152f8 <USBD_FS_SerialStrDescriptor+0x38>)
 80152d8:	f7ff fcbc 	bl	8014c54 <USBD_GetString>
 80152dc:	e004      	b.n	80152e8 <USBD_FS_SerialStrDescriptor+0x28>
	}
	else
	{
	    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80152de:	683a      	ldr	r2, [r7, #0]
 80152e0:	4904      	ldr	r1, [pc, #16]	; (80152f4 <USBD_FS_SerialStrDescriptor+0x34>)
 80152e2:	4805      	ldr	r0, [pc, #20]	; (80152f8 <USBD_FS_SerialStrDescriptor+0x38>)
 80152e4:	f7ff fcb6 	bl	8014c54 <USBD_GetString>
	}
	return USBD_StrDesc;
 80152e8:	4b02      	ldr	r3, [pc, #8]	; (80152f4 <USBD_FS_SerialStrDescriptor+0x34>)
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3708      	adds	r7, #8
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}
 80152f2:	bf00      	nop
 80152f4:	20001e04 	.word	0x20001e04
 80152f8:	08017668 	.word	0x08017668

080152fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	4603      	mov	r3, r0
 8015304:	6039      	str	r1, [r7, #0]
 8015306:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015308:	79fb      	ldrb	r3, [r7, #7]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d105      	bne.n	801531a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801530e:	683a      	ldr	r2, [r7, #0]
 8015310:	4907      	ldr	r1, [pc, #28]	; (8015330 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015312:	4808      	ldr	r0, [pc, #32]	; (8015334 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015314:	f7ff fc9e 	bl	8014c54 <USBD_GetString>
 8015318:	e004      	b.n	8015324 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801531a:	683a      	ldr	r2, [r7, #0]
 801531c:	4904      	ldr	r1, [pc, #16]	; (8015330 <USBD_FS_ConfigStrDescriptor+0x34>)
 801531e:	4805      	ldr	r0, [pc, #20]	; (8015334 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015320:	f7ff fc98 	bl	8014c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015324:	4b02      	ldr	r3, [pc, #8]	; (8015330 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015326:	4618      	mov	r0, r3
 8015328:	3708      	adds	r7, #8
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop
 8015330:	20001e04 	.word	0x20001e04
 8015334:	08017678 	.word	0x08017678

08015338 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	4603      	mov	r3, r0
 8015340:	6039      	str	r1, [r7, #0]
 8015342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015344:	79fb      	ldrb	r3, [r7, #7]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d105      	bne.n	8015356 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801534a:	683a      	ldr	r2, [r7, #0]
 801534c:	4907      	ldr	r1, [pc, #28]	; (801536c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801534e:	4808      	ldr	r0, [pc, #32]	; (8015370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015350:	f7ff fc80 	bl	8014c54 <USBD_GetString>
 8015354:	e004      	b.n	8015360 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015356:	683a      	ldr	r2, [r7, #0]
 8015358:	4904      	ldr	r1, [pc, #16]	; (801536c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801535a:	4805      	ldr	r0, [pc, #20]	; (8015370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801535c:	f7ff fc7a 	bl	8014c54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015360:	4b02      	ldr	r3, [pc, #8]	; (801536c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015362:	4618      	mov	r0, r3
 8015364:	3708      	adds	r7, #8
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	20001e04 	.word	0x20001e04
 8015370:	08017688 	.word	0x08017688

08015374 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b084      	sub	sp, #16
 8015378:	af00      	add	r7, sp, #0
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	4613      	mov	r3, r2
 8015380:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	2202      	movs	r2, #2
 8015386:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 801538a:	88fa      	ldrh	r2, [r7, #6]
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8015390:	88fa      	ldrh	r2, [r7, #6]
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015396:	88fb      	ldrh	r3, [r7, #6]
 8015398:	68ba      	ldr	r2, [r7, #8]
 801539a:	2100      	movs	r1, #0
 801539c:	68f8      	ldr	r0, [r7, #12]
 801539e:	f7fe fc4b 	bl	8013c38 <USBD_LL_Transmit>

  return USBD_OK;
 80153a2:	2300      	movs	r3, #0
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3710      	adds	r7, #16
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b084      	sub	sp, #16
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	60b9      	str	r1, [r7, #8]
 80153b6:	4613      	mov	r3, r2
 80153b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80153ba:	88fb      	ldrh	r3, [r7, #6]
 80153bc:	68ba      	ldr	r2, [r7, #8]
 80153be:	2100      	movs	r1, #0
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f7fe fc39 	bl	8013c38 <USBD_LL_Transmit>

  return USBD_OK;
 80153c6:	2300      	movs	r3, #0
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3710      	adds	r7, #16
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}

080153d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b084      	sub	sp, #16
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	60f8      	str	r0, [r7, #12]
 80153d8:	60b9      	str	r1, [r7, #8]
 80153da:	4613      	mov	r3, r2
 80153dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	2203      	movs	r2, #3
 80153e2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80153e6:	88fa      	ldrh	r2, [r7, #6]
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80153ee:	88fa      	ldrh	r2, [r7, #6]
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80153f6:	88fb      	ldrh	r3, [r7, #6]
 80153f8:	68ba      	ldr	r2, [r7, #8]
 80153fa:	2100      	movs	r1, #0
 80153fc:	68f8      	ldr	r0, [r7, #12]
 80153fe:	f7fe fc3e 	bl	8013c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015402:	2300      	movs	r3, #0
}
 8015404:	4618      	mov	r0, r3
 8015406:	3710      	adds	r7, #16
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}

0801540c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b084      	sub	sp, #16
 8015410:	af00      	add	r7, sp, #0
 8015412:	60f8      	str	r0, [r7, #12]
 8015414:	60b9      	str	r1, [r7, #8]
 8015416:	4613      	mov	r3, r2
 8015418:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801541a:	88fb      	ldrh	r3, [r7, #6]
 801541c:	68ba      	ldr	r2, [r7, #8]
 801541e:	2100      	movs	r1, #0
 8015420:	68f8      	ldr	r0, [r7, #12]
 8015422:	f7fe fc2c 	bl	8013c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015426:	2300      	movs	r3, #0
}
 8015428:	4618      	mov	r0, r3
 801542a:	3710      	adds	r7, #16
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2204      	movs	r2, #4
 801543c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015440:	2300      	movs	r3, #0
 8015442:	2200      	movs	r2, #0
 8015444:	2100      	movs	r1, #0
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f7fe fbf6 	bl	8013c38 <USBD_LL_Transmit>

  return USBD_OK;
 801544c:	2300      	movs	r3, #0
}
 801544e:	4618      	mov	r0, r3
 8015450:	3708      	adds	r7, #8
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}

08015456 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015456:	b580      	push	{r7, lr}
 8015458:	b082      	sub	sp, #8
 801545a:	af00      	add	r7, sp, #0
 801545c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2205      	movs	r2, #5
 8015462:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015466:	2300      	movs	r3, #0
 8015468:	2200      	movs	r2, #0
 801546a:	2100      	movs	r1, #0
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f7fe fc06 	bl	8013c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015472:	2300      	movs	r3, #0
}
 8015474:	4618      	mov	r0, r3
 8015476:	3708      	adds	r7, #8
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <_ZdlPv>:
 801547c:	f001 b982 	b.w	8016784 <free>

08015480 <_ZdlPvj>:
 8015480:	f7ff bffc 	b.w	801547c <_ZdlPv>

08015484 <_Znwj>:
 8015484:	2801      	cmp	r0, #1
 8015486:	bf38      	it	cc
 8015488:	2001      	movcc	r0, #1
 801548a:	b510      	push	{r4, lr}
 801548c:	4604      	mov	r4, r0
 801548e:	4620      	mov	r0, r4
 8015490:	f001 f970 	bl	8016774 <malloc>
 8015494:	b930      	cbnz	r0, 80154a4 <_Znwj+0x20>
 8015496:	f000 fb29 	bl	8015aec <_ZSt15get_new_handlerv>
 801549a:	b908      	cbnz	r0, 80154a0 <_Znwj+0x1c>
 801549c:	f001 f934 	bl	8016708 <abort>
 80154a0:	4780      	blx	r0
 80154a2:	e7f4      	b.n	801548e <_Znwj+0xa>
 80154a4:	bd10      	pop	{r4, pc}

080154a6 <_Znaj>:
 80154a6:	f7ff bfed 	b.w	8015484 <_Znwj>

080154aa <_ZNSaIcEC1Ev>:
 80154aa:	4770      	bx	lr

080154ac <_ZNSaIcED1Ev>:
 80154ac:	4770      	bx	lr

080154ae <_ZSt17__throw_bad_allocv>:
 80154ae:	b508      	push	{r3, lr}
 80154b0:	f001 f92a 	bl	8016708 <abort>

080154b4 <_ZSt19__throw_logic_errorPKc>:
 80154b4:	b508      	push	{r3, lr}
 80154b6:	f001 f927 	bl	8016708 <abort>

080154ba <_ZSt24__throw_invalid_argumentPKc>:
 80154ba:	b508      	push	{r3, lr}
 80154bc:	f001 f924 	bl	8016708 <abort>

080154c0 <_ZSt20__throw_length_errorPKc>:
 80154c0:	b508      	push	{r3, lr}
 80154c2:	f001 f921 	bl	8016708 <abort>

080154c6 <_ZSt20__throw_out_of_rangePKc>:
 80154c6:	b508      	push	{r3, lr}
 80154c8:	f001 f91e 	bl	8016708 <abort>

080154cc <_ZSt24__throw_out_of_range_fmtPKcz>:
 80154cc:	b40f      	push	{r0, r1, r2, r3}
 80154ce:	b580      	push	{r7, lr}
 80154d0:	b082      	sub	sp, #8
 80154d2:	af00      	add	r7, sp, #0
 80154d4:	f107 0410 	add.w	r4, r7, #16
 80154d8:	f854 5b04 	ldr.w	r5, [r4], #4
 80154dc:	4628      	mov	r0, r5
 80154de:	f7ea fe37 	bl	8000150 <strlen>
 80154e2:	f200 2307 	addw	r3, r0, #519	; 0x207
 80154e6:	f023 0307 	bic.w	r3, r3, #7
 80154ea:	ebad 0d03 	sub.w	sp, sp, r3
 80154ee:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80154f2:	4623      	mov	r3, r4
 80154f4:	462a      	mov	r2, r5
 80154f6:	4668      	mov	r0, sp
 80154f8:	607c      	str	r4, [r7, #4]
 80154fa:	f000 f855 	bl	80155a8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80154fe:	f001 f903 	bl	8016708 <abort>
	...

08015504 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8015504:	4606      	mov	r6, r0
 8015506:	460c      	mov	r4, r1
 8015508:	b580      	push	{r7, lr}
 801550a:	b09c      	sub	sp, #112	; 0x70
 801550c:	af00      	add	r7, sp, #0
 801550e:	1ba4      	subs	r4, r4, r6
 8015510:	2269      	movs	r2, #105	; 0x69
 8015512:	490e      	ldr	r1, [pc, #56]	; (801554c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8015514:	1d38      	adds	r0, r7, #4
 8015516:	f001 f959 	bl	80167cc <memcpy>
 801551a:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801551e:	f023 0307 	bic.w	r3, r3, #7
 8015522:	ebad 0d03 	sub.w	sp, sp, r3
 8015526:	466d      	mov	r5, sp
 8015528:	2268      	movs	r2, #104	; 0x68
 801552a:	1d39      	adds	r1, r7, #4
 801552c:	4628      	mov	r0, r5
 801552e:	f001 f94d 	bl	80167cc <memcpy>
 8015532:	4622      	mov	r2, r4
 8015534:	4631      	mov	r1, r6
 8015536:	f105 0068 	add.w	r0, r5, #104	; 0x68
 801553a:	f001 f947 	bl	80167cc <memcpy>
 801553e:	2300      	movs	r3, #0
 8015540:	442c      	add	r4, r5
 8015542:	4628      	mov	r0, r5
 8015544:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8015548:	f7ff ffb4 	bl	80154b4 <_ZSt19__throw_logic_errorPKc>
 801554c:	080177e4 	.word	0x080177e4

08015550 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8015550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015554:	af00      	add	r7, sp, #0
 8015556:	b084      	sub	sp, #16
 8015558:	466d      	mov	r5, sp
 801555a:	f105 040c 	add.w	r4, r5, #12
 801555e:	4623      	mov	r3, r4
 8015560:	f04f 0c0a 	mov.w	ip, #10
 8015564:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80155a4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8015568:	fbb2 f6fc 	udiv	r6, r2, ip
 801556c:	fb0c 2e16 	mls	lr, ip, r6, r2
 8015570:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8015574:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8015578:	4696      	mov	lr, r2
 801557a:	f1be 0f09 	cmp.w	lr, #9
 801557e:	4632      	mov	r2, r6
 8015580:	d8f2      	bhi.n	8015568 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8015582:	1ae4      	subs	r4, r4, r3
 8015584:	428c      	cmp	r4, r1
 8015586:	d809      	bhi.n	801559c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8015588:	f1c4 010c 	rsb	r1, r4, #12
 801558c:	4622      	mov	r2, r4
 801558e:	4429      	add	r1, r5
 8015590:	f001 f91c 	bl	80167cc <memcpy>
 8015594:	4620      	mov	r0, r4
 8015596:	46bd      	mov	sp, r7
 8015598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801559c:	f04f 34ff 	mov.w	r4, #4294967295
 80155a0:	e7f8      	b.n	8015594 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80155a2:	bf00      	nop
 80155a4:	0801784d 	.word	0x0801784d

080155a8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80155a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ac:	4607      	mov	r7, r0
 80155ae:	4615      	mov	r5, r2
 80155b0:	4604      	mov	r4, r0
 80155b2:	3901      	subs	r1, #1
 80155b4:	eb00 0801 	add.w	r8, r0, r1
 80155b8:	782a      	ldrb	r2, [r5, #0]
 80155ba:	b362      	cbz	r2, 8015616 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80155bc:	4544      	cmp	r4, r8
 80155be:	d22e      	bcs.n	801561e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80155c0:	2a25      	cmp	r2, #37	; 0x25
 80155c2:	d107      	bne.n	80155d4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80155c4:	786a      	ldrb	r2, [r5, #1]
 80155c6:	2a73      	cmp	r2, #115	; 0x73
 80155c8:	d009      	beq.n	80155de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80155ca:	2a7a      	cmp	r2, #122	; 0x7a
 80155cc:	d012      	beq.n	80155f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80155ce:	2a25      	cmp	r2, #37	; 0x25
 80155d0:	d100      	bne.n	80155d4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80155d2:	3501      	adds	r5, #1
 80155d4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80155d8:	f804 2b01 	strb.w	r2, [r4], #1
 80155dc:	e7ec      	b.n	80155b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80155de:	f853 2b04 	ldr.w	r2, [r3], #4
 80155e2:	3a01      	subs	r2, #1
 80155e4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80155e8:	b1e9      	cbz	r1, 8015626 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 80155ea:	4544      	cmp	r4, r8
 80155ec:	d017      	beq.n	801561e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80155ee:	f804 1b01 	strb.w	r1, [r4], #1
 80155f2:	e7f7      	b.n	80155e4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80155f4:	78aa      	ldrb	r2, [r5, #2]
 80155f6:	2a75      	cmp	r2, #117	; 0x75
 80155f8:	d1ec      	bne.n	80155d4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80155fa:	461e      	mov	r6, r3
 80155fc:	4620      	mov	r0, r4
 80155fe:	f856 2b04 	ldr.w	r2, [r6], #4
 8015602:	eba8 0104 	sub.w	r1, r8, r4
 8015606:	f7ff ffa3 	bl	8015550 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 801560a:	2800      	cmp	r0, #0
 801560c:	dd07      	ble.n	801561e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 801560e:	4633      	mov	r3, r6
 8015610:	4404      	add	r4, r0
 8015612:	3503      	adds	r5, #3
 8015614:	e7d0      	b.n	80155b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8015616:	7022      	strb	r2, [r4, #0]
 8015618:	1be0      	subs	r0, r4, r7
 801561a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801561e:	4621      	mov	r1, r4
 8015620:	4638      	mov	r0, r7
 8015622:	f7ff ff6f 	bl	8015504 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8015626:	3502      	adds	r5, #2
 8015628:	e7c6      	b.n	80155b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

0801562a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 801562a:	b10a      	cbz	r2, 8015630 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 801562c:	f001 b8c0 	b.w	80167b0 <memcmp>
 8015630:	4610      	mov	r0, r2
 8015632:	4770      	bx	lr

08015634 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8015634:	4613      	mov	r3, r2
 8015636:	460a      	mov	r2, r1
 8015638:	b111      	cbz	r1, 8015640 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 801563a:	7819      	ldrb	r1, [r3, #0]
 801563c:	f001 b8aa 	b.w	8016794 <memchr>
 8015640:	4608      	mov	r0, r1
 8015642:	4770      	bx	lr

08015644 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8015644:	b10a      	cbz	r2, 801564a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8015646:	f001 b8c1 	b.w	80167cc <memcpy>
 801564a:	4770      	bx	lr

0801564c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801564c:	6001      	str	r1, [r0, #0]
 801564e:	4770      	bx	lr

08015650 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8015650:	6800      	ldr	r0, [r0, #0]
 8015652:	4770      	bx	lr

08015654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8015654:	3008      	adds	r0, #8
 8015656:	4770      	bx	lr

08015658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8015658:	6081      	str	r1, [r0, #8]
 801565a:	4770      	bx	lr

0801565c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801565c:	2200      	movs	r2, #0
 801565e:	6803      	ldr	r3, [r0, #0]
 8015660:	6041      	str	r1, [r0, #4]
 8015662:	545a      	strb	r2, [r3, r1]
 8015664:	4770      	bx	lr
	...

08015668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8015668:	b508      	push	{r3, lr}
 801566a:	680b      	ldr	r3, [r1, #0]
 801566c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015670:	d302      	bcc.n	8015678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8015672:	480d      	ldr	r0, [pc, #52]	; (80156a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8015674:	f7ff ff24 	bl	80154c0 <_ZSt20__throw_length_errorPKc>
 8015678:	4293      	cmp	r3, r2
 801567a:	d90b      	bls.n	8015694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801567c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015680:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8015684:	d206      	bcs.n	8015694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015686:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801568a:	bf2a      	itet	cs
 801568c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8015690:	6008      	strcc	r0, [r1, #0]
 8015692:	600b      	strcs	r3, [r1, #0]
 8015694:	6808      	ldr	r0, [r1, #0]
 8015696:	3001      	adds	r0, #1
 8015698:	d501      	bpl.n	801569e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801569a:	f7ff ff08 	bl	80154ae <_ZSt17__throw_bad_allocv>
 801569e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80156a2:	f7ff beef 	b.w	8015484 <_Znwj>
 80156a6:	bf00      	nop
 80156a8:	08017858 	.word	0x08017858

080156ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80156ac:	4603      	mov	r3, r0
 80156ae:	f853 0b08 	ldr.w	r0, [r3], #8
 80156b2:	4298      	cmp	r0, r3
 80156b4:	d001      	beq.n	80156ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80156b6:	f7ff bee1 	b.w	801547c <_ZdlPv>
 80156ba:	4770      	bx	lr

080156bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80156bc:	b508      	push	{r3, lr}
 80156be:	4603      	mov	r3, r0
 80156c0:	4608      	mov	r0, r1
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	4611      	mov	r1, r2
 80156c6:	4298      	cmp	r0, r3
 80156c8:	d903      	bls.n	80156d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80156ca:	4602      	mov	r2, r0
 80156cc:	4801      	ldr	r0, [pc, #4]	; (80156d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80156ce:	f7ff fefd 	bl	80154cc <_ZSt24__throw_out_of_range_fmtPKcz>
 80156d2:	bd08      	pop	{r3, pc}
 80156d4:	08017870 	.word	0x08017870

080156d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80156d8:	6840      	ldr	r0, [r0, #4]
 80156da:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80156de:	3901      	subs	r1, #1
 80156e0:	1a09      	subs	r1, r1, r0
 80156e2:	4291      	cmp	r1, r2
 80156e4:	b508      	push	{r3, lr}
 80156e6:	d202      	bcs.n	80156ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7ff fee9 	bl	80154c0 <_ZSt20__throw_length_errorPKc>
 80156ee:	bd08      	pop	{r3, pc}

080156f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80156f0:	2a01      	cmp	r2, #1
 80156f2:	b510      	push	{r4, lr}
 80156f4:	d102      	bne.n	80156fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80156f6:	780a      	ldrb	r2, [r1, #0]
 80156f8:	7002      	strb	r2, [r0, #0]
 80156fa:	bd10      	pop	{r4, pc}
 80156fc:	f7ff ffa2 	bl	8015644 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8015700:	e7fb      	b.n	80156fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08015702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8015702:	b508      	push	{r3, lr}
 8015704:	1a52      	subs	r2, r2, r1
 8015706:	f7ff fff3 	bl	80156f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801570a:	bd08      	pop	{r3, pc}

0801570c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801570c:	b508      	push	{r3, lr}
 801570e:	1a52      	subs	r2, r2, r1
 8015710:	f7ff ffee 	bl	80156f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015714:	bd08      	pop	{r3, pc}

08015716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8015716:	4288      	cmp	r0, r1
 8015718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801571a:	4604      	mov	r4, r0
 801571c:	460e      	mov	r6, r1
 801571e:	d01e      	beq.n	801575e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8015720:	4603      	mov	r3, r0
 8015722:	f853 2b08 	ldr.w	r2, [r3], #8
 8015726:	684d      	ldr	r5, [r1, #4]
 8015728:	429a      	cmp	r2, r3
 801572a:	bf0c      	ite	eq
 801572c:	220f      	moveq	r2, #15
 801572e:	6882      	ldrne	r2, [r0, #8]
 8015730:	42aa      	cmp	r2, r5
 8015732:	d20a      	bcs.n	801574a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8015734:	a901      	add	r1, sp, #4
 8015736:	9501      	str	r5, [sp, #4]
 8015738:	f7ff ff96 	bl	8015668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801573c:	4607      	mov	r7, r0
 801573e:	4620      	mov	r0, r4
 8015740:	f7ff ffb4 	bl	80156ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015744:	9b01      	ldr	r3, [sp, #4]
 8015746:	6027      	str	r7, [r4, #0]
 8015748:	60a3      	str	r3, [r4, #8]
 801574a:	b125      	cbz	r5, 8015756 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 801574c:	462a      	mov	r2, r5
 801574e:	6831      	ldr	r1, [r6, #0]
 8015750:	6820      	ldr	r0, [r4, #0]
 8015752:	f7ff ffcd 	bl	80156f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015756:	2200      	movs	r2, #0
 8015758:	6823      	ldr	r3, [r4, #0]
 801575a:	6065      	str	r5, [r4, #4]
 801575c:	555a      	strb	r2, [r3, r5]
 801575e:	b003      	add	sp, #12
 8015760:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8015762:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015766:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015768:	461f      	mov	r7, r3
 801576a:	6843      	ldr	r3, [r0, #4]
 801576c:	eb01 0802 	add.w	r8, r1, r2
 8015770:	1ab2      	subs	r2, r6, r2
 8015772:	441a      	add	r2, r3
 8015774:	eba3 0908 	sub.w	r9, r3, r8
 8015778:	4603      	mov	r3, r0
 801577a:	9201      	str	r2, [sp, #4]
 801577c:	f853 2b08 	ldr.w	r2, [r3], #8
 8015780:	460d      	mov	r5, r1
 8015782:	429a      	cmp	r2, r3
 8015784:	bf0c      	ite	eq
 8015786:	220f      	moveq	r2, #15
 8015788:	6882      	ldrne	r2, [r0, #8]
 801578a:	a901      	add	r1, sp, #4
 801578c:	4604      	mov	r4, r0
 801578e:	f7ff ff6b 	bl	8015668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015792:	4682      	mov	sl, r0
 8015794:	b11d      	cbz	r5, 801579e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3c>
 8015796:	462a      	mov	r2, r5
 8015798:	6821      	ldr	r1, [r4, #0]
 801579a:	f7ff ffa9 	bl	80156f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801579e:	b137      	cbz	r7, 80157ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 80157a0:	b12e      	cbz	r6, 80157ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 80157a2:	4632      	mov	r2, r6
 80157a4:	4639      	mov	r1, r7
 80157a6:	eb0a 0005 	add.w	r0, sl, r5
 80157aa:	f7ff ffa1 	bl	80156f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80157ae:	f1b9 0f00 	cmp.w	r9, #0
 80157b2:	d007      	beq.n	80157c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 80157b4:	6821      	ldr	r1, [r4, #0]
 80157b6:	4435      	add	r5, r6
 80157b8:	464a      	mov	r2, r9
 80157ba:	4441      	add	r1, r8
 80157bc:	eb0a 0005 	add.w	r0, sl, r5
 80157c0:	f7ff ff96 	bl	80156f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80157c4:	4620      	mov	r0, r4
 80157c6:	f7ff ff71 	bl	80156ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80157ca:	9b01      	ldr	r3, [sp, #4]
 80157cc:	f8c4 a000 	str.w	sl, [r4]
 80157d0:	60a3      	str	r3, [r4, #8]
 80157d2:	b002      	add	sp, #8
 80157d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080157d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80157d8:	f100 0208 	add.w	r2, r0, #8
 80157dc:	6002      	str	r2, [r0, #0]
 80157de:	2200      	movs	r2, #0
 80157e0:	6042      	str	r2, [r0, #4]
 80157e2:	7202      	strb	r2, [r0, #8]
 80157e4:	4770      	bx	lr

080157e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80157e6:	b570      	push	{r4, r5, r6, lr}
 80157e8:	4604      	mov	r4, r0
 80157ea:	460e      	mov	r6, r1
 80157ec:	3008      	adds	r0, #8
 80157ee:	6020      	str	r0, [r4, #0]
 80157f0:	f856 3b08 	ldr.w	r3, [r6], #8
 80157f4:	460d      	mov	r5, r1
 80157f6:	429e      	cmp	r6, r3
 80157f8:	d10b      	bne.n	8015812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 80157fa:	2210      	movs	r2, #16
 80157fc:	4631      	mov	r1, r6
 80157fe:	f7ff ff21 	bl	8015644 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8015802:	686b      	ldr	r3, [r5, #4]
 8015804:	4620      	mov	r0, r4
 8015806:	6063      	str	r3, [r4, #4]
 8015808:	2300      	movs	r3, #0
 801580a:	602e      	str	r6, [r5, #0]
 801580c:	606b      	str	r3, [r5, #4]
 801580e:	722b      	strb	r3, [r5, #8]
 8015810:	bd70      	pop	{r4, r5, r6, pc}
 8015812:	6023      	str	r3, [r4, #0]
 8015814:	688b      	ldr	r3, [r1, #8]
 8015816:	60a3      	str	r3, [r4, #8]
 8015818:	e7f3      	b.n	8015802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0801581a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801581a:	b510      	push	{r4, lr}
 801581c:	4604      	mov	r4, r0
 801581e:	f7ff ff45 	bl	80156ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015822:	4620      	mov	r0, r4
 8015824:	bd10      	pop	{r4, pc}

08015826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8015826:	b510      	push	{r4, lr}
 8015828:	4604      	mov	r4, r0
 801582a:	f7ff ff74 	bl	8015716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801582e:	4620      	mov	r0, r4
 8015830:	bd10      	pop	{r4, pc}

08015832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8015832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015834:	460d      	mov	r5, r1
 8015836:	f851 3b08 	ldr.w	r3, [r1], #8
 801583a:	4604      	mov	r4, r0
 801583c:	4299      	cmp	r1, r3
 801583e:	6800      	ldr	r0, [r0, #0]
 8015840:	686a      	ldr	r2, [r5, #4]
 8015842:	d10d      	bne.n	8015860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8015844:	b10a      	cbz	r2, 801584a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8015846:	f7ff ff53 	bl	80156f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801584a:	2100      	movs	r1, #0
 801584c:	686b      	ldr	r3, [r5, #4]
 801584e:	6822      	ldr	r2, [r4, #0]
 8015850:	6063      	str	r3, [r4, #4]
 8015852:	54d1      	strb	r1, [r2, r3]
 8015854:	2300      	movs	r3, #0
 8015856:	682a      	ldr	r2, [r5, #0]
 8015858:	606b      	str	r3, [r5, #4]
 801585a:	7013      	strb	r3, [r2, #0]
 801585c:	4620      	mov	r0, r4
 801585e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015860:	f104 0708 	add.w	r7, r4, #8
 8015864:	42b8      	cmp	r0, r7
 8015866:	bf08      	it	eq
 8015868:	2000      	moveq	r0, #0
 801586a:	e9c4 3200 	strd	r3, r2, [r4]
 801586e:	68ab      	ldr	r3, [r5, #8]
 8015870:	bf18      	it	ne
 8015872:	68a6      	ldrne	r6, [r4, #8]
 8015874:	60a3      	str	r3, [r4, #8]
 8015876:	b110      	cbz	r0, 801587e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 8015878:	6028      	str	r0, [r5, #0]
 801587a:	60ae      	str	r6, [r5, #8]
 801587c:	e7ea      	b.n	8015854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 801587e:	6029      	str	r1, [r5, #0]
 8015880:	e7e8      	b.n	8015854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

08015882 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8015882:	6840      	ldr	r0, [r0, #4]
 8015884:	4770      	bx	lr

08015886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8015886:	2300      	movs	r3, #0
 8015888:	6802      	ldr	r2, [r0, #0]
 801588a:	6043      	str	r3, [r0, #4]
 801588c:	7013      	strb	r3, [r2, #0]
 801588e:	4770      	bx	lr

08015890 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8015890:	6840      	ldr	r0, [r0, #4]
 8015892:	fab0 f080 	clz	r0, r0
 8015896:	0940      	lsrs	r0, r0, #5
 8015898:	4770      	bx	lr

0801589a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801589a:	6800      	ldr	r0, [r0, #0]
 801589c:	4408      	add	r0, r1
 801589e:	4770      	bx	lr

080158a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 80158a0:	6843      	ldr	r3, [r0, #4]
 80158a2:	6800      	ldr	r0, [r0, #0]
 80158a4:	3b01      	subs	r3, #1
 80158a6:	4418      	add	r0, r3
 80158a8:	4770      	bx	lr

080158aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80158aa:	4603      	mov	r3, r0
 80158ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158ae:	f853 2b08 	ldr.w	r2, [r3], #8
 80158b2:	6846      	ldr	r6, [r0, #4]
 80158b4:	429a      	cmp	r2, r3
 80158b6:	bf0c      	ite	eq
 80158b8:	230f      	moveq	r3, #15
 80158ba:	6883      	ldrne	r3, [r0, #8]
 80158bc:	1c75      	adds	r5, r6, #1
 80158be:	429d      	cmp	r5, r3
 80158c0:	4604      	mov	r4, r0
 80158c2:	460f      	mov	r7, r1
 80158c4:	d906      	bls.n	80158d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2a>
 80158c6:	2301      	movs	r3, #1
 80158c8:	9300      	str	r3, [sp, #0]
 80158ca:	2300      	movs	r3, #0
 80158cc:	4631      	mov	r1, r6
 80158ce:	461a      	mov	r2, r3
 80158d0:	f7ff ff47 	bl	8015762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80158d4:	2200      	movs	r2, #0
 80158d6:	6823      	ldr	r3, [r4, #0]
 80158d8:	559f      	strb	r7, [r3, r6]
 80158da:	6823      	ldr	r3, [r4, #0]
 80158dc:	6065      	str	r5, [r4, #4]
 80158de:	555a      	strb	r2, [r3, r5]
 80158e0:	b003      	add	sp, #12
 80158e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080158e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 80158e4:	b510      	push	{r4, lr}
 80158e6:	4604      	mov	r4, r0
 80158e8:	f7ff ffdf 	bl	80158aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 80158ec:	4620      	mov	r0, r4
 80158ee:	bd10      	pop	{r4, pc}

080158f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80158f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80158f2:	4604      	mov	r4, r0
 80158f4:	4623      	mov	r3, r4
 80158f6:	f853 6b08 	ldr.w	r6, [r3], #8
 80158fa:	6840      	ldr	r0, [r0, #4]
 80158fc:	429e      	cmp	r6, r3
 80158fe:	bf0c      	ite	eq
 8015900:	230f      	moveq	r3, #15
 8015902:	68a3      	ldrne	r3, [r4, #8]
 8015904:	1885      	adds	r5, r0, r2
 8015906:	429d      	cmp	r5, r3
 8015908:	d80a      	bhi.n	8015920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 801590a:	b112      	cbz	r2, 8015912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 801590c:	4430      	add	r0, r6
 801590e:	f7ff feef 	bl	80156f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015912:	2200      	movs	r2, #0
 8015914:	4620      	mov	r0, r4
 8015916:	6823      	ldr	r3, [r4, #0]
 8015918:	6065      	str	r5, [r4, #4]
 801591a:	555a      	strb	r2, [r3, r5]
 801591c:	b002      	add	sp, #8
 801591e:	bd70      	pop	{r4, r5, r6, pc}
 8015920:	460b      	mov	r3, r1
 8015922:	9200      	str	r2, [sp, #0]
 8015924:	4601      	mov	r1, r0
 8015926:	2200      	movs	r2, #0
 8015928:	4620      	mov	r0, r4
 801592a:	f7ff ff1a 	bl	8015762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801592e:	e7f0      	b.n	8015912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08015930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8015930:	b508      	push	{r3, lr}
 8015932:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015936:	f7ff ffdb 	bl	80158f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801593a:	bd08      	pop	{r3, pc}

0801593c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 801593c:	b508      	push	{r3, lr}
 801593e:	f7ff fff7 	bl	8015930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8015942:	bd08      	pop	{r3, pc}

08015944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8015944:	b570      	push	{r4, r5, r6, lr}
 8015946:	4604      	mov	r4, r0
 8015948:	460d      	mov	r5, r1
 801594a:	4616      	mov	r6, r2
 801594c:	2100      	movs	r1, #0
 801594e:	4b04      	ldr	r3, [pc, #16]	; (8015960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8015950:	f7ff fec2 	bl	80156d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8015954:	4632      	mov	r2, r6
 8015956:	4629      	mov	r1, r5
 8015958:	4620      	mov	r0, r4
 801595a:	f7ff ffc9 	bl	80158f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801595e:	bd70      	pop	{r4, r5, r6, pc}
 8015960:	080178a7 	.word	0x080178a7

08015964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8015964:	b570      	push	{r4, r5, r6, lr}
 8015966:	4604      	mov	r4, r0
 8015968:	4608      	mov	r0, r1
 801596a:	460d      	mov	r5, r1
 801596c:	f7ea fbf0 	bl	8000150 <strlen>
 8015970:	4606      	mov	r6, r0
 8015972:	4602      	mov	r2, r0
 8015974:	2100      	movs	r1, #0
 8015976:	4620      	mov	r0, r4
 8015978:	4b04      	ldr	r3, [pc, #16]	; (801598c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 801597a:	f7ff fead 	bl	80156d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801597e:	4632      	mov	r2, r6
 8015980:	4629      	mov	r1, r5
 8015982:	4620      	mov	r0, r4
 8015984:	f7ff ffb4 	bl	80158f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8015988:	bd70      	pop	{r4, r5, r6, pc}
 801598a:	bf00      	nop
 801598c:	080178a7 	.word	0x080178a7

08015990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8015990:	b508      	push	{r3, lr}
 8015992:	f7ff ffe7 	bl	8015964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8015996:	bd08      	pop	{r3, pc}

08015998 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8015998:	6800      	ldr	r0, [r0, #0]
 801599a:	4770      	bx	lr

0801599c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 801599c:	b513      	push	{r0, r1, r4, lr}
 801599e:	f88d 1007 	strb.w	r1, [sp, #7]
 80159a2:	6841      	ldr	r1, [r0, #4]
 80159a4:	4613      	mov	r3, r2
 80159a6:	428a      	cmp	r2, r1
 80159a8:	d20a      	bcs.n	80159c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80159aa:	6804      	ldr	r4, [r0, #0]
 80159ac:	f10d 0207 	add.w	r2, sp, #7
 80159b0:	1ac9      	subs	r1, r1, r3
 80159b2:	18e0      	adds	r0, r4, r3
 80159b4:	f7ff fe3e 	bl	8015634 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 80159b8:	b110      	cbz	r0, 80159c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80159ba:	1b00      	subs	r0, r0, r4
 80159bc:	b002      	add	sp, #8
 80159be:	bd10      	pop	{r4, pc}
 80159c0:	f04f 30ff 	mov.w	r0, #4294967295
 80159c4:	e7fa      	b.n	80159bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

080159c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80159c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159c8:	6847      	ldr	r7, [r0, #4]
 80159ca:	4605      	mov	r5, r0
 80159cc:	4608      	mov	r0, r1
 80159ce:	460e      	mov	r6, r1
 80159d0:	f7ea fbbe 	bl	8000150 <strlen>
 80159d4:	4287      	cmp	r7, r0
 80159d6:	4604      	mov	r4, r0
 80159d8:	463a      	mov	r2, r7
 80159da:	4631      	mov	r1, r6
 80159dc:	bf28      	it	cs
 80159de:	4602      	movcs	r2, r0
 80159e0:	6828      	ldr	r0, [r5, #0]
 80159e2:	f7ff fe22 	bl	801562a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80159e6:	b900      	cbnz	r0, 80159ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80159e8:	1b38      	subs	r0, r7, r4
 80159ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080159ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80159ec:	6001      	str	r1, [r0, #0]
 80159ee:	4770      	bx	lr

080159f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80159f0:	b510      	push	{r4, lr}
 80159f2:	4604      	mov	r4, r0
 80159f4:	f100 0208 	add.w	r2, r0, #8
 80159f8:	6002      	str	r2, [r0, #0]
 80159fa:	e9d1 1200 	ldrd	r1, r2, [r1]
 80159fe:	f04f 0300 	mov.w	r3, #0
 8015a02:	440a      	add	r2, r1
 8015a04:	f7fa f894 	bl	800fb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8015a08:	4620      	mov	r0, r4
 8015a0a:	bd10      	pop	{r4, pc}

08015a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8015a0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a0e:	4604      	mov	r4, r0
 8015a10:	4616      	mov	r6, r2
 8015a12:	460d      	mov	r5, r1
 8015a14:	b919      	cbnz	r1, 8015a1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015a16:	b112      	cbz	r2, 8015a1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015a18:	480d      	ldr	r0, [pc, #52]	; (8015a50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8015a1a:	f7ff fd4b 	bl	80154b4 <_ZSt19__throw_logic_errorPKc>
 8015a1e:	1b73      	subs	r3, r6, r5
 8015a20:	2b0f      	cmp	r3, #15
 8015a22:	9301      	str	r3, [sp, #4]
 8015a24:	d907      	bls.n	8015a36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8015a26:	2200      	movs	r2, #0
 8015a28:	4620      	mov	r0, r4
 8015a2a:	a901      	add	r1, sp, #4
 8015a2c:	f7ff fe1c 	bl	8015668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015a30:	9b01      	ldr	r3, [sp, #4]
 8015a32:	6020      	str	r0, [r4, #0]
 8015a34:	60a3      	str	r3, [r4, #8]
 8015a36:	4632      	mov	r2, r6
 8015a38:	4629      	mov	r1, r5
 8015a3a:	6820      	ldr	r0, [r4, #0]
 8015a3c:	f7ff fe66 	bl	801570c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8015a40:	2100      	movs	r1, #0
 8015a42:	9b01      	ldr	r3, [sp, #4]
 8015a44:	6822      	ldr	r2, [r4, #0]
 8015a46:	6063      	str	r3, [r4, #4]
 8015a48:	54d1      	strb	r1, [r2, r3]
 8015a4a:	b002      	add	sp, #8
 8015a4c:	bd70      	pop	{r4, r5, r6, pc}
 8015a4e:	bf00      	nop
 8015a50:	080178bc 	.word	0x080178bc

08015a54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8015a54:	b538      	push	{r3, r4, r5, lr}
 8015a56:	f100 0308 	add.w	r3, r0, #8
 8015a5a:	4604      	mov	r4, r0
 8015a5c:	460d      	mov	r5, r1
 8015a5e:	6003      	str	r3, [r0, #0]
 8015a60:	b159      	cbz	r1, 8015a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8015a62:	4608      	mov	r0, r1
 8015a64:	f7ea fb74 	bl	8000150 <strlen>
 8015a68:	182a      	adds	r2, r5, r0
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	f04f 0300 	mov.w	r3, #0
 8015a70:	4629      	mov	r1, r5
 8015a72:	f7ff ffcb 	bl	8015a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8015a76:	4620      	mov	r0, r4
 8015a78:	bd38      	pop	{r3, r4, r5, pc}
 8015a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8015a7e:	e7f4      	b.n	8015a6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08015a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8015a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a84:	460d      	mov	r5, r1
 8015a86:	4617      	mov	r7, r2
 8015a88:	4698      	mov	r8, r3
 8015a8a:	f100 0308 	add.w	r3, r0, #8
 8015a8e:	4604      	mov	r4, r0
 8015a90:	4639      	mov	r1, r7
 8015a92:	6003      	str	r3, [r0, #0]
 8015a94:	4a0a      	ldr	r2, [pc, #40]	; (8015ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8015a96:	4628      	mov	r0, r5
 8015a98:	f7ff fe10 	bl	80156bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8015a9c:	682e      	ldr	r6, [r5, #0]
 8015a9e:	686a      	ldr	r2, [r5, #4]
 8015aa0:	1831      	adds	r1, r6, r0
 8015aa2:	1bd2      	subs	r2, r2, r7
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	f04f 0300 	mov.w	r3, #0
 8015aaa:	4542      	cmp	r2, r8
 8015aac:	bf94      	ite	ls
 8015aae:	188a      	addls	r2, r1, r2
 8015ab0:	eb01 0208 	addhi.w	r2, r1, r8
 8015ab4:	f7ff ffaa 	bl	8015a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8015ab8:	4620      	mov	r0, r4
 8015aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015abe:	bf00      	nop
 8015ac0:	080178e6 	.word	0x080178e6

08015ac4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8015ac4:	b570      	push	{r4, r5, r6, lr}
 8015ac6:	460d      	mov	r5, r1
 8015ac8:	4604      	mov	r4, r0
 8015aca:	4611      	mov	r1, r2
 8015acc:	4628      	mov	r0, r5
 8015ace:	4a06      	ldr	r2, [pc, #24]	; (8015ae8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8015ad0:	461e      	mov	r6, r3
 8015ad2:	f7ff fdf3 	bl	80156bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8015ad6:	4633      	mov	r3, r6
 8015ad8:	4602      	mov	r2, r0
 8015ada:	4629      	mov	r1, r5
 8015adc:	4620      	mov	r0, r4
 8015ade:	f7ff ffcf 	bl	8015a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	bd70      	pop	{r4, r5, r6, pc}
 8015ae6:	bf00      	nop
 8015ae8:	08017901 	.word	0x08017901

08015aec <_ZSt15get_new_handlerv>:
 8015aec:	4b02      	ldr	r3, [pc, #8]	; (8015af8 <_ZSt15get_new_handlerv+0xc>)
 8015aee:	6818      	ldr	r0, [r3, #0]
 8015af0:	f3bf 8f5b 	dmb	ish
 8015af4:	4770      	bx	lr
 8015af6:	bf00      	nop
 8015af8:	20001148 	.word	0x20001148

08015afc <cosf>:
 8015afc:	b507      	push	{r0, r1, r2, lr}
 8015afe:	4a18      	ldr	r2, [pc, #96]	; (8015b60 <cosf+0x64>)
 8015b00:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015b04:	4293      	cmp	r3, r2
 8015b06:	4601      	mov	r1, r0
 8015b08:	dc03      	bgt.n	8015b12 <cosf+0x16>
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	f000 f9be 	bl	8015e8c <__kernel_cosf>
 8015b10:	e004      	b.n	8015b1c <cosf+0x20>
 8015b12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015b16:	db04      	blt.n	8015b22 <cosf+0x26>
 8015b18:	f7ea ff44 	bl	80009a4 <__aeabi_fsub>
 8015b1c:	b003      	add	sp, #12
 8015b1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b22:	4669      	mov	r1, sp
 8015b24:	f000 f854 	bl	8015bd0 <__ieee754_rem_pio2f>
 8015b28:	f000 0203 	and.w	r2, r0, #3
 8015b2c:	2a01      	cmp	r2, #1
 8015b2e:	d005      	beq.n	8015b3c <cosf+0x40>
 8015b30:	2a02      	cmp	r2, #2
 8015b32:	d00a      	beq.n	8015b4a <cosf+0x4e>
 8015b34:	b972      	cbnz	r2, 8015b54 <cosf+0x58>
 8015b36:	9901      	ldr	r1, [sp, #4]
 8015b38:	9800      	ldr	r0, [sp, #0]
 8015b3a:	e7e7      	b.n	8015b0c <cosf+0x10>
 8015b3c:	9901      	ldr	r1, [sp, #4]
 8015b3e:	9800      	ldr	r0, [sp, #0]
 8015b40:	f000 fcda 	bl	80164f8 <__kernel_sinf>
 8015b44:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015b48:	e7e8      	b.n	8015b1c <cosf+0x20>
 8015b4a:	9901      	ldr	r1, [sp, #4]
 8015b4c:	9800      	ldr	r0, [sp, #0]
 8015b4e:	f000 f99d 	bl	8015e8c <__kernel_cosf>
 8015b52:	e7f7      	b.n	8015b44 <cosf+0x48>
 8015b54:	2201      	movs	r2, #1
 8015b56:	9901      	ldr	r1, [sp, #4]
 8015b58:	9800      	ldr	r0, [sp, #0]
 8015b5a:	f000 fccd 	bl	80164f8 <__kernel_sinf>
 8015b5e:	e7dd      	b.n	8015b1c <cosf+0x20>
 8015b60:	3f490fd8 	.word	0x3f490fd8

08015b64 <sinf>:
 8015b64:	b507      	push	{r0, r1, r2, lr}
 8015b66:	4a19      	ldr	r2, [pc, #100]	; (8015bcc <sinf+0x68>)
 8015b68:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015b6c:	4293      	cmp	r3, r2
 8015b6e:	4601      	mov	r1, r0
 8015b70:	dc04      	bgt.n	8015b7c <sinf+0x18>
 8015b72:	2200      	movs	r2, #0
 8015b74:	2100      	movs	r1, #0
 8015b76:	f000 fcbf 	bl	80164f8 <__kernel_sinf>
 8015b7a:	e004      	b.n	8015b86 <sinf+0x22>
 8015b7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015b80:	db04      	blt.n	8015b8c <sinf+0x28>
 8015b82:	f7ea ff0f 	bl	80009a4 <__aeabi_fsub>
 8015b86:	b003      	add	sp, #12
 8015b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b8c:	4669      	mov	r1, sp
 8015b8e:	f000 f81f 	bl	8015bd0 <__ieee754_rem_pio2f>
 8015b92:	f000 0003 	and.w	r0, r0, #3
 8015b96:	2801      	cmp	r0, #1
 8015b98:	d006      	beq.n	8015ba8 <sinf+0x44>
 8015b9a:	2802      	cmp	r0, #2
 8015b9c:	d009      	beq.n	8015bb2 <sinf+0x4e>
 8015b9e:	b980      	cbnz	r0, 8015bc2 <sinf+0x5e>
 8015ba0:	2201      	movs	r2, #1
 8015ba2:	9901      	ldr	r1, [sp, #4]
 8015ba4:	9800      	ldr	r0, [sp, #0]
 8015ba6:	e7e6      	b.n	8015b76 <sinf+0x12>
 8015ba8:	9901      	ldr	r1, [sp, #4]
 8015baa:	9800      	ldr	r0, [sp, #0]
 8015bac:	f000 f96e 	bl	8015e8c <__kernel_cosf>
 8015bb0:	e7e9      	b.n	8015b86 <sinf+0x22>
 8015bb2:	2201      	movs	r2, #1
 8015bb4:	9901      	ldr	r1, [sp, #4]
 8015bb6:	9800      	ldr	r0, [sp, #0]
 8015bb8:	f000 fc9e 	bl	80164f8 <__kernel_sinf>
 8015bbc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015bc0:	e7e1      	b.n	8015b86 <sinf+0x22>
 8015bc2:	9901      	ldr	r1, [sp, #4]
 8015bc4:	9800      	ldr	r0, [sp, #0]
 8015bc6:	f000 f961 	bl	8015e8c <__kernel_cosf>
 8015bca:	e7f7      	b.n	8015bbc <sinf+0x58>
 8015bcc:	3f490fd8 	.word	0x3f490fd8

08015bd0 <__ieee754_rem_pio2f>:
 8015bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd4:	4aa0      	ldr	r2, [pc, #640]	; (8015e58 <__ieee754_rem_pio2f+0x288>)
 8015bd6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8015bda:	4296      	cmp	r6, r2
 8015bdc:	460c      	mov	r4, r1
 8015bde:	4682      	mov	sl, r0
 8015be0:	b087      	sub	sp, #28
 8015be2:	dc04      	bgt.n	8015bee <__ieee754_rem_pio2f+0x1e>
 8015be4:	2300      	movs	r3, #0
 8015be6:	6008      	str	r0, [r1, #0]
 8015be8:	604b      	str	r3, [r1, #4]
 8015bea:	2500      	movs	r5, #0
 8015bec:	e01a      	b.n	8015c24 <__ieee754_rem_pio2f+0x54>
 8015bee:	4a9b      	ldr	r2, [pc, #620]	; (8015e5c <__ieee754_rem_pio2f+0x28c>)
 8015bf0:	4296      	cmp	r6, r2
 8015bf2:	dc4b      	bgt.n	8015c8c <__ieee754_rem_pio2f+0xbc>
 8015bf4:	2800      	cmp	r0, #0
 8015bf6:	499a      	ldr	r1, [pc, #616]	; (8015e60 <__ieee754_rem_pio2f+0x290>)
 8015bf8:	4f9a      	ldr	r7, [pc, #616]	; (8015e64 <__ieee754_rem_pio2f+0x294>)
 8015bfa:	f026 060f 	bic.w	r6, r6, #15
 8015bfe:	dd23      	ble.n	8015c48 <__ieee754_rem_pio2f+0x78>
 8015c00:	f7ea fed0 	bl	80009a4 <__aeabi_fsub>
 8015c04:	42be      	cmp	r6, r7
 8015c06:	4605      	mov	r5, r0
 8015c08:	d010      	beq.n	8015c2c <__ieee754_rem_pio2f+0x5c>
 8015c0a:	4997      	ldr	r1, [pc, #604]	; (8015e68 <__ieee754_rem_pio2f+0x298>)
 8015c0c:	f7ea feca 	bl	80009a4 <__aeabi_fsub>
 8015c10:	4601      	mov	r1, r0
 8015c12:	6020      	str	r0, [r4, #0]
 8015c14:	4628      	mov	r0, r5
 8015c16:	f7ea fec5 	bl	80009a4 <__aeabi_fsub>
 8015c1a:	4993      	ldr	r1, [pc, #588]	; (8015e68 <__ieee754_rem_pio2f+0x298>)
 8015c1c:	f7ea fec2 	bl	80009a4 <__aeabi_fsub>
 8015c20:	2501      	movs	r5, #1
 8015c22:	6060      	str	r0, [r4, #4]
 8015c24:	4628      	mov	r0, r5
 8015c26:	b007      	add	sp, #28
 8015c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c2c:	498f      	ldr	r1, [pc, #572]	; (8015e6c <__ieee754_rem_pio2f+0x29c>)
 8015c2e:	f7ea feb9 	bl	80009a4 <__aeabi_fsub>
 8015c32:	498f      	ldr	r1, [pc, #572]	; (8015e70 <__ieee754_rem_pio2f+0x2a0>)
 8015c34:	4605      	mov	r5, r0
 8015c36:	f7ea feb5 	bl	80009a4 <__aeabi_fsub>
 8015c3a:	4601      	mov	r1, r0
 8015c3c:	6020      	str	r0, [r4, #0]
 8015c3e:	4628      	mov	r0, r5
 8015c40:	f7ea feb0 	bl	80009a4 <__aeabi_fsub>
 8015c44:	498a      	ldr	r1, [pc, #552]	; (8015e70 <__ieee754_rem_pio2f+0x2a0>)
 8015c46:	e7e9      	b.n	8015c1c <__ieee754_rem_pio2f+0x4c>
 8015c48:	f7ea feae 	bl	80009a8 <__addsf3>
 8015c4c:	42be      	cmp	r6, r7
 8015c4e:	4605      	mov	r5, r0
 8015c50:	d00e      	beq.n	8015c70 <__ieee754_rem_pio2f+0xa0>
 8015c52:	4985      	ldr	r1, [pc, #532]	; (8015e68 <__ieee754_rem_pio2f+0x298>)
 8015c54:	f7ea fea8 	bl	80009a8 <__addsf3>
 8015c58:	4601      	mov	r1, r0
 8015c5a:	6020      	str	r0, [r4, #0]
 8015c5c:	4628      	mov	r0, r5
 8015c5e:	f7ea fea1 	bl	80009a4 <__aeabi_fsub>
 8015c62:	4981      	ldr	r1, [pc, #516]	; (8015e68 <__ieee754_rem_pio2f+0x298>)
 8015c64:	f7ea fea0 	bl	80009a8 <__addsf3>
 8015c68:	f04f 35ff 	mov.w	r5, #4294967295
 8015c6c:	6060      	str	r0, [r4, #4]
 8015c6e:	e7d9      	b.n	8015c24 <__ieee754_rem_pio2f+0x54>
 8015c70:	497e      	ldr	r1, [pc, #504]	; (8015e6c <__ieee754_rem_pio2f+0x29c>)
 8015c72:	f7ea fe99 	bl	80009a8 <__addsf3>
 8015c76:	497e      	ldr	r1, [pc, #504]	; (8015e70 <__ieee754_rem_pio2f+0x2a0>)
 8015c78:	4605      	mov	r5, r0
 8015c7a:	f7ea fe95 	bl	80009a8 <__addsf3>
 8015c7e:	4601      	mov	r1, r0
 8015c80:	6020      	str	r0, [r4, #0]
 8015c82:	4628      	mov	r0, r5
 8015c84:	f7ea fe8e 	bl	80009a4 <__aeabi_fsub>
 8015c88:	4979      	ldr	r1, [pc, #484]	; (8015e70 <__ieee754_rem_pio2f+0x2a0>)
 8015c8a:	e7eb      	b.n	8015c64 <__ieee754_rem_pio2f+0x94>
 8015c8c:	4a79      	ldr	r2, [pc, #484]	; (8015e74 <__ieee754_rem_pio2f+0x2a4>)
 8015c8e:	4296      	cmp	r6, r2
 8015c90:	f300 8091 	bgt.w	8015db6 <__ieee754_rem_pio2f+0x1e6>
 8015c94:	f000 fca6 	bl	80165e4 <fabsf>
 8015c98:	4977      	ldr	r1, [pc, #476]	; (8015e78 <__ieee754_rem_pio2f+0x2a8>)
 8015c9a:	4607      	mov	r7, r0
 8015c9c:	f7ea ff8c 	bl	8000bb8 <__aeabi_fmul>
 8015ca0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015ca4:	f7ea fe80 	bl	80009a8 <__addsf3>
 8015ca8:	f7eb f94c 	bl	8000f44 <__aeabi_f2iz>
 8015cac:	4605      	mov	r5, r0
 8015cae:	f7ea ff2f 	bl	8000b10 <__aeabi_i2f>
 8015cb2:	496b      	ldr	r1, [pc, #428]	; (8015e60 <__ieee754_rem_pio2f+0x290>)
 8015cb4:	4681      	mov	r9, r0
 8015cb6:	f7ea ff7f 	bl	8000bb8 <__aeabi_fmul>
 8015cba:	4601      	mov	r1, r0
 8015cbc:	4638      	mov	r0, r7
 8015cbe:	f7ea fe71 	bl	80009a4 <__aeabi_fsub>
 8015cc2:	4969      	ldr	r1, [pc, #420]	; (8015e68 <__ieee754_rem_pio2f+0x298>)
 8015cc4:	4680      	mov	r8, r0
 8015cc6:	4648      	mov	r0, r9
 8015cc8:	f7ea ff76 	bl	8000bb8 <__aeabi_fmul>
 8015ccc:	2d1f      	cmp	r5, #31
 8015cce:	4607      	mov	r7, r0
 8015cd0:	dc0c      	bgt.n	8015cec <__ieee754_rem_pio2f+0x11c>
 8015cd2:	4a6a      	ldr	r2, [pc, #424]	; (8015e7c <__ieee754_rem_pio2f+0x2ac>)
 8015cd4:	1e69      	subs	r1, r5, #1
 8015cd6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8015cda:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8015cde:	4293      	cmp	r3, r2
 8015ce0:	d004      	beq.n	8015cec <__ieee754_rem_pio2f+0x11c>
 8015ce2:	4639      	mov	r1, r7
 8015ce4:	4640      	mov	r0, r8
 8015ce6:	f7ea fe5d 	bl	80009a4 <__aeabi_fsub>
 8015cea:	e00b      	b.n	8015d04 <__ieee754_rem_pio2f+0x134>
 8015cec:	4639      	mov	r1, r7
 8015cee:	4640      	mov	r0, r8
 8015cf0:	f7ea fe58 	bl	80009a4 <__aeabi_fsub>
 8015cf4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015cf8:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8015cfc:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8015d00:	2e08      	cmp	r6, #8
 8015d02:	dc01      	bgt.n	8015d08 <__ieee754_rem_pio2f+0x138>
 8015d04:	6020      	str	r0, [r4, #0]
 8015d06:	e026      	b.n	8015d56 <__ieee754_rem_pio2f+0x186>
 8015d08:	4958      	ldr	r1, [pc, #352]	; (8015e6c <__ieee754_rem_pio2f+0x29c>)
 8015d0a:	4648      	mov	r0, r9
 8015d0c:	f7ea ff54 	bl	8000bb8 <__aeabi_fmul>
 8015d10:	4607      	mov	r7, r0
 8015d12:	4601      	mov	r1, r0
 8015d14:	4640      	mov	r0, r8
 8015d16:	f7ea fe45 	bl	80009a4 <__aeabi_fsub>
 8015d1a:	4601      	mov	r1, r0
 8015d1c:	4606      	mov	r6, r0
 8015d1e:	4640      	mov	r0, r8
 8015d20:	f7ea fe40 	bl	80009a4 <__aeabi_fsub>
 8015d24:	4639      	mov	r1, r7
 8015d26:	f7ea fe3d 	bl	80009a4 <__aeabi_fsub>
 8015d2a:	4607      	mov	r7, r0
 8015d2c:	4950      	ldr	r1, [pc, #320]	; (8015e70 <__ieee754_rem_pio2f+0x2a0>)
 8015d2e:	4648      	mov	r0, r9
 8015d30:	f7ea ff42 	bl	8000bb8 <__aeabi_fmul>
 8015d34:	4639      	mov	r1, r7
 8015d36:	f7ea fe35 	bl	80009a4 <__aeabi_fsub>
 8015d3a:	4601      	mov	r1, r0
 8015d3c:	4607      	mov	r7, r0
 8015d3e:	4630      	mov	r0, r6
 8015d40:	f7ea fe30 	bl	80009a4 <__aeabi_fsub>
 8015d44:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015d48:	ebab 0b03 	sub.w	fp, fp, r3
 8015d4c:	f1bb 0f19 	cmp.w	fp, #25
 8015d50:	dc16      	bgt.n	8015d80 <__ieee754_rem_pio2f+0x1b0>
 8015d52:	46b0      	mov	r8, r6
 8015d54:	6020      	str	r0, [r4, #0]
 8015d56:	6826      	ldr	r6, [r4, #0]
 8015d58:	4640      	mov	r0, r8
 8015d5a:	4631      	mov	r1, r6
 8015d5c:	f7ea fe22 	bl	80009a4 <__aeabi_fsub>
 8015d60:	4639      	mov	r1, r7
 8015d62:	f7ea fe1f 	bl	80009a4 <__aeabi_fsub>
 8015d66:	f1ba 0f00 	cmp.w	sl, #0
 8015d6a:	6060      	str	r0, [r4, #4]
 8015d6c:	f6bf af5a 	bge.w	8015c24 <__ieee754_rem_pio2f+0x54>
 8015d70:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8015d74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015d78:	6026      	str	r6, [r4, #0]
 8015d7a:	6060      	str	r0, [r4, #4]
 8015d7c:	426d      	negs	r5, r5
 8015d7e:	e751      	b.n	8015c24 <__ieee754_rem_pio2f+0x54>
 8015d80:	493f      	ldr	r1, [pc, #252]	; (8015e80 <__ieee754_rem_pio2f+0x2b0>)
 8015d82:	4648      	mov	r0, r9
 8015d84:	f7ea ff18 	bl	8000bb8 <__aeabi_fmul>
 8015d88:	4607      	mov	r7, r0
 8015d8a:	4601      	mov	r1, r0
 8015d8c:	4630      	mov	r0, r6
 8015d8e:	f7ea fe09 	bl	80009a4 <__aeabi_fsub>
 8015d92:	4601      	mov	r1, r0
 8015d94:	4680      	mov	r8, r0
 8015d96:	4630      	mov	r0, r6
 8015d98:	f7ea fe04 	bl	80009a4 <__aeabi_fsub>
 8015d9c:	4639      	mov	r1, r7
 8015d9e:	f7ea fe01 	bl	80009a4 <__aeabi_fsub>
 8015da2:	4606      	mov	r6, r0
 8015da4:	4937      	ldr	r1, [pc, #220]	; (8015e84 <__ieee754_rem_pio2f+0x2b4>)
 8015da6:	4648      	mov	r0, r9
 8015da8:	f7ea ff06 	bl	8000bb8 <__aeabi_fmul>
 8015dac:	4631      	mov	r1, r6
 8015dae:	f7ea fdf9 	bl	80009a4 <__aeabi_fsub>
 8015db2:	4607      	mov	r7, r0
 8015db4:	e795      	b.n	8015ce2 <__ieee754_rem_pio2f+0x112>
 8015db6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8015dba:	db05      	blt.n	8015dc8 <__ieee754_rem_pio2f+0x1f8>
 8015dbc:	4601      	mov	r1, r0
 8015dbe:	f7ea fdf1 	bl	80009a4 <__aeabi_fsub>
 8015dc2:	6060      	str	r0, [r4, #4]
 8015dc4:	6020      	str	r0, [r4, #0]
 8015dc6:	e710      	b.n	8015bea <__ieee754_rem_pio2f+0x1a>
 8015dc8:	15f7      	asrs	r7, r6, #23
 8015dca:	3f86      	subs	r7, #134	; 0x86
 8015dcc:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	f7eb f8b7 	bl	8000f44 <__aeabi_f2iz>
 8015dd6:	f7ea fe9b 	bl	8000b10 <__aeabi_i2f>
 8015dda:	4601      	mov	r1, r0
 8015ddc:	9003      	str	r0, [sp, #12]
 8015dde:	4630      	mov	r0, r6
 8015de0:	f7ea fde0 	bl	80009a4 <__aeabi_fsub>
 8015de4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8015de8:	f7ea fee6 	bl	8000bb8 <__aeabi_fmul>
 8015dec:	4606      	mov	r6, r0
 8015dee:	f7eb f8a9 	bl	8000f44 <__aeabi_f2iz>
 8015df2:	f7ea fe8d 	bl	8000b10 <__aeabi_i2f>
 8015df6:	4601      	mov	r1, r0
 8015df8:	9004      	str	r0, [sp, #16]
 8015dfa:	4605      	mov	r5, r0
 8015dfc:	4630      	mov	r0, r6
 8015dfe:	f7ea fdd1 	bl	80009a4 <__aeabi_fsub>
 8015e02:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8015e06:	f7ea fed7 	bl	8000bb8 <__aeabi_fmul>
 8015e0a:	2100      	movs	r1, #0
 8015e0c:	9005      	str	r0, [sp, #20]
 8015e0e:	f7eb f867 	bl	8000ee0 <__aeabi_fcmpeq>
 8015e12:	b1f0      	cbz	r0, 8015e52 <__ieee754_rem_pio2f+0x282>
 8015e14:	2100      	movs	r1, #0
 8015e16:	4628      	mov	r0, r5
 8015e18:	f7eb f862 	bl	8000ee0 <__aeabi_fcmpeq>
 8015e1c:	2800      	cmp	r0, #0
 8015e1e:	bf14      	ite	ne
 8015e20:	2301      	movne	r3, #1
 8015e22:	2302      	moveq	r3, #2
 8015e24:	4a18      	ldr	r2, [pc, #96]	; (8015e88 <__ieee754_rem_pio2f+0x2b8>)
 8015e26:	4621      	mov	r1, r4
 8015e28:	9201      	str	r2, [sp, #4]
 8015e2a:	2202      	movs	r2, #2
 8015e2c:	a803      	add	r0, sp, #12
 8015e2e:	9200      	str	r2, [sp, #0]
 8015e30:	463a      	mov	r2, r7
 8015e32:	f000 f8ab 	bl	8015f8c <__kernel_rem_pio2f>
 8015e36:	f1ba 0f00 	cmp.w	sl, #0
 8015e3a:	4605      	mov	r5, r0
 8015e3c:	f6bf aef2 	bge.w	8015c24 <__ieee754_rem_pio2f+0x54>
 8015e40:	6823      	ldr	r3, [r4, #0]
 8015e42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015e46:	6023      	str	r3, [r4, #0]
 8015e48:	6863      	ldr	r3, [r4, #4]
 8015e4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015e4e:	6063      	str	r3, [r4, #4]
 8015e50:	e794      	b.n	8015d7c <__ieee754_rem_pio2f+0x1ac>
 8015e52:	2303      	movs	r3, #3
 8015e54:	e7e6      	b.n	8015e24 <__ieee754_rem_pio2f+0x254>
 8015e56:	bf00      	nop
 8015e58:	3f490fd8 	.word	0x3f490fd8
 8015e5c:	4016cbe3 	.word	0x4016cbe3
 8015e60:	3fc90f80 	.word	0x3fc90f80
 8015e64:	3fc90fd0 	.word	0x3fc90fd0
 8015e68:	37354443 	.word	0x37354443
 8015e6c:	37354400 	.word	0x37354400
 8015e70:	2e85a308 	.word	0x2e85a308
 8015e74:	43490f80 	.word	0x43490f80
 8015e78:	3f22f984 	.word	0x3f22f984
 8015e7c:	08017918 	.word	0x08017918
 8015e80:	2e85a300 	.word	0x2e85a300
 8015e84:	248d3132 	.word	0x248d3132
 8015e88:	08017998 	.word	0x08017998

08015e8c <__kernel_cosf>:
 8015e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e90:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8015e94:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8015e98:	4606      	mov	r6, r0
 8015e9a:	4688      	mov	r8, r1
 8015e9c:	da03      	bge.n	8015ea6 <__kernel_cosf+0x1a>
 8015e9e:	f7eb f851 	bl	8000f44 <__aeabi_f2iz>
 8015ea2:	2800      	cmp	r0, #0
 8015ea4:	d05c      	beq.n	8015f60 <__kernel_cosf+0xd4>
 8015ea6:	4631      	mov	r1, r6
 8015ea8:	4630      	mov	r0, r6
 8015eaa:	f7ea fe85 	bl	8000bb8 <__aeabi_fmul>
 8015eae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015eb2:	4605      	mov	r5, r0
 8015eb4:	f7ea fe80 	bl	8000bb8 <__aeabi_fmul>
 8015eb8:	492b      	ldr	r1, [pc, #172]	; (8015f68 <__kernel_cosf+0xdc>)
 8015eba:	4607      	mov	r7, r0
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	f7ea fe7b 	bl	8000bb8 <__aeabi_fmul>
 8015ec2:	492a      	ldr	r1, [pc, #168]	; (8015f6c <__kernel_cosf+0xe0>)
 8015ec4:	f7ea fd70 	bl	80009a8 <__addsf3>
 8015ec8:	4629      	mov	r1, r5
 8015eca:	f7ea fe75 	bl	8000bb8 <__aeabi_fmul>
 8015ece:	4928      	ldr	r1, [pc, #160]	; (8015f70 <__kernel_cosf+0xe4>)
 8015ed0:	f7ea fd68 	bl	80009a4 <__aeabi_fsub>
 8015ed4:	4629      	mov	r1, r5
 8015ed6:	f7ea fe6f 	bl	8000bb8 <__aeabi_fmul>
 8015eda:	4926      	ldr	r1, [pc, #152]	; (8015f74 <__kernel_cosf+0xe8>)
 8015edc:	f7ea fd64 	bl	80009a8 <__addsf3>
 8015ee0:	4629      	mov	r1, r5
 8015ee2:	f7ea fe69 	bl	8000bb8 <__aeabi_fmul>
 8015ee6:	4924      	ldr	r1, [pc, #144]	; (8015f78 <__kernel_cosf+0xec>)
 8015ee8:	f7ea fd5c 	bl	80009a4 <__aeabi_fsub>
 8015eec:	4629      	mov	r1, r5
 8015eee:	f7ea fe63 	bl	8000bb8 <__aeabi_fmul>
 8015ef2:	4922      	ldr	r1, [pc, #136]	; (8015f7c <__kernel_cosf+0xf0>)
 8015ef4:	f7ea fd58 	bl	80009a8 <__addsf3>
 8015ef8:	4629      	mov	r1, r5
 8015efa:	f7ea fe5d 	bl	8000bb8 <__aeabi_fmul>
 8015efe:	4629      	mov	r1, r5
 8015f00:	f7ea fe5a 	bl	8000bb8 <__aeabi_fmul>
 8015f04:	4641      	mov	r1, r8
 8015f06:	4605      	mov	r5, r0
 8015f08:	4630      	mov	r0, r6
 8015f0a:	f7ea fe55 	bl	8000bb8 <__aeabi_fmul>
 8015f0e:	4601      	mov	r1, r0
 8015f10:	4628      	mov	r0, r5
 8015f12:	f7ea fd47 	bl	80009a4 <__aeabi_fsub>
 8015f16:	4b1a      	ldr	r3, [pc, #104]	; (8015f80 <__kernel_cosf+0xf4>)
 8015f18:	4605      	mov	r5, r0
 8015f1a:	429c      	cmp	r4, r3
 8015f1c:	dc0a      	bgt.n	8015f34 <__kernel_cosf+0xa8>
 8015f1e:	4601      	mov	r1, r0
 8015f20:	4638      	mov	r0, r7
 8015f22:	f7ea fd3f 	bl	80009a4 <__aeabi_fsub>
 8015f26:	4601      	mov	r1, r0
 8015f28:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015f2c:	f7ea fd3a 	bl	80009a4 <__aeabi_fsub>
 8015f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f34:	4b13      	ldr	r3, [pc, #76]	; (8015f84 <__kernel_cosf+0xf8>)
 8015f36:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015f3a:	429c      	cmp	r4, r3
 8015f3c:	bfcc      	ite	gt
 8015f3e:	4c12      	ldrgt	r4, [pc, #72]	; (8015f88 <__kernel_cosf+0xfc>)
 8015f40:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8015f44:	4621      	mov	r1, r4
 8015f46:	f7ea fd2d 	bl	80009a4 <__aeabi_fsub>
 8015f4a:	4621      	mov	r1, r4
 8015f4c:	4606      	mov	r6, r0
 8015f4e:	4638      	mov	r0, r7
 8015f50:	f7ea fd28 	bl	80009a4 <__aeabi_fsub>
 8015f54:	4629      	mov	r1, r5
 8015f56:	f7ea fd25 	bl	80009a4 <__aeabi_fsub>
 8015f5a:	4601      	mov	r1, r0
 8015f5c:	4630      	mov	r0, r6
 8015f5e:	e7e5      	b.n	8015f2c <__kernel_cosf+0xa0>
 8015f60:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015f64:	e7e4      	b.n	8015f30 <__kernel_cosf+0xa4>
 8015f66:	bf00      	nop
 8015f68:	ad47d74e 	.word	0xad47d74e
 8015f6c:	310f74f6 	.word	0x310f74f6
 8015f70:	3493f27c 	.word	0x3493f27c
 8015f74:	37d00d01 	.word	0x37d00d01
 8015f78:	3ab60b61 	.word	0x3ab60b61
 8015f7c:	3d2aaaab 	.word	0x3d2aaaab
 8015f80:	3e999999 	.word	0x3e999999
 8015f84:	3f480000 	.word	0x3f480000
 8015f88:	3e900000 	.word	0x3e900000

08015f8c <__kernel_rem_pio2f>:
 8015f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f90:	b0db      	sub	sp, #364	; 0x16c
 8015f92:	9202      	str	r2, [sp, #8]
 8015f94:	9304      	str	r3, [sp, #16]
 8015f96:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015f98:	4bc5      	ldr	r3, [pc, #788]	; (80162b0 <__kernel_rem_pio2f+0x324>)
 8015f9a:	9005      	str	r0, [sp, #20]
 8015f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fa0:	9100      	str	r1, [sp, #0]
 8015fa2:	9301      	str	r3, [sp, #4]
 8015fa4:	9b04      	ldr	r3, [sp, #16]
 8015fa6:	3b01      	subs	r3, #1
 8015fa8:	9303      	str	r3, [sp, #12]
 8015faa:	9b02      	ldr	r3, [sp, #8]
 8015fac:	1d1a      	adds	r2, r3, #4
 8015fae:	f2c0 809b 	blt.w	80160e8 <__kernel_rem_pio2f+0x15c>
 8015fb2:	1edc      	subs	r4, r3, #3
 8015fb4:	bf48      	it	mi
 8015fb6:	1d1c      	addmi	r4, r3, #4
 8015fb8:	10e4      	asrs	r4, r4, #3
 8015fba:	2500      	movs	r5, #0
 8015fbc:	f04f 0a00 	mov.w	sl, #0
 8015fc0:	1c67      	adds	r7, r4, #1
 8015fc2:	00fb      	lsls	r3, r7, #3
 8015fc4:	9306      	str	r3, [sp, #24]
 8015fc6:	9b02      	ldr	r3, [sp, #8]
 8015fc8:	9a03      	ldr	r2, [sp, #12]
 8015fca:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8015fce:	9b01      	ldr	r3, [sp, #4]
 8015fd0:	1aa6      	subs	r6, r4, r2
 8015fd2:	eb03 0802 	add.w	r8, r3, r2
 8015fd6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8015fd8:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 8015fdc:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 8015fe0:	4545      	cmp	r5, r8
 8015fe2:	f340 8083 	ble.w	80160ec <__kernel_rem_pio2f+0x160>
 8015fe6:	f04f 0800 	mov.w	r8, #0
 8015fea:	f04f 0b00 	mov.w	fp, #0
 8015fee:	9b04      	ldr	r3, [sp, #16]
 8015ff0:	aa1e      	add	r2, sp, #120	; 0x78
 8015ff2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8015ff6:	ab46      	add	r3, sp, #280	; 0x118
 8015ff8:	9a01      	ldr	r2, [sp, #4]
 8015ffa:	4590      	cmp	r8, r2
 8015ffc:	f340 809c 	ble.w	8016138 <__kernel_rem_pio2f+0x1ac>
 8016000:	4613      	mov	r3, r2
 8016002:	aa0a      	add	r2, sp, #40	; 0x28
 8016004:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016008:	9308      	str	r3, [sp, #32]
 801600a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801600c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016010:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016014:	9307      	str	r3, [sp, #28]
 8016016:	ad0a      	add	r5, sp, #40	; 0x28
 8016018:	462e      	mov	r6, r5
 801601a:	46c3      	mov	fp, r8
 801601c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8016020:	ab5a      	add	r3, sp, #360	; 0x168
 8016022:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8016026:	f853 4c50 	ldr.w	r4, [r3, #-80]
 801602a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 801602e:	f1bb 0f00 	cmp.w	fp, #0
 8016032:	f300 8086 	bgt.w	8016142 <__kernel_rem_pio2f+0x1b6>
 8016036:	4639      	mov	r1, r7
 8016038:	4620      	mov	r0, r4
 801603a:	f000 fb19 	bl	8016670 <scalbnf>
 801603e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8016042:	4604      	mov	r4, r0
 8016044:	f7ea fdb8 	bl	8000bb8 <__aeabi_fmul>
 8016048:	f000 fad0 	bl	80165ec <floorf>
 801604c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8016050:	f7ea fdb2 	bl	8000bb8 <__aeabi_fmul>
 8016054:	4601      	mov	r1, r0
 8016056:	4620      	mov	r0, r4
 8016058:	f7ea fca4 	bl	80009a4 <__aeabi_fsub>
 801605c:	4604      	mov	r4, r0
 801605e:	f7ea ff71 	bl	8000f44 <__aeabi_f2iz>
 8016062:	4606      	mov	r6, r0
 8016064:	f7ea fd54 	bl	8000b10 <__aeabi_i2f>
 8016068:	4601      	mov	r1, r0
 801606a:	4620      	mov	r0, r4
 801606c:	f7ea fc9a 	bl	80009a4 <__aeabi_fsub>
 8016070:	2f00      	cmp	r7, #0
 8016072:	4681      	mov	r9, r0
 8016074:	f340 8084 	ble.w	8016180 <__kernel_rem_pio2f+0x1f4>
 8016078:	f108 32ff 	add.w	r2, r8, #4294967295
 801607c:	ab0a      	add	r3, sp, #40	; 0x28
 801607e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8016082:	f1c7 0108 	rsb	r1, r7, #8
 8016086:	fa44 f301 	asr.w	r3, r4, r1
 801608a:	441e      	add	r6, r3
 801608c:	408b      	lsls	r3, r1
 801608e:	1ae4      	subs	r4, r4, r3
 8016090:	f1c7 0007 	rsb	r0, r7, #7
 8016094:	ab0a      	add	r3, sp, #40	; 0x28
 8016096:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801609a:	4104      	asrs	r4, r0
 801609c:	2c00      	cmp	r4, #0
 801609e:	dd7e      	ble.n	801619e <__kernel_rem_pio2f+0x212>
 80160a0:	2200      	movs	r2, #0
 80160a2:	4692      	mov	sl, r2
 80160a4:	3601      	adds	r6, #1
 80160a6:	4590      	cmp	r8, r2
 80160a8:	f300 80b0 	bgt.w	801620c <__kernel_rem_pio2f+0x280>
 80160ac:	2f00      	cmp	r7, #0
 80160ae:	dd05      	ble.n	80160bc <__kernel_rem_pio2f+0x130>
 80160b0:	2f01      	cmp	r7, #1
 80160b2:	f000 80bd 	beq.w	8016230 <__kernel_rem_pio2f+0x2a4>
 80160b6:	2f02      	cmp	r7, #2
 80160b8:	f000 80c5 	beq.w	8016246 <__kernel_rem_pio2f+0x2ba>
 80160bc:	2c02      	cmp	r4, #2
 80160be:	d16e      	bne.n	801619e <__kernel_rem_pio2f+0x212>
 80160c0:	4649      	mov	r1, r9
 80160c2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80160c6:	f7ea fc6d 	bl	80009a4 <__aeabi_fsub>
 80160ca:	4681      	mov	r9, r0
 80160cc:	f1ba 0f00 	cmp.w	sl, #0
 80160d0:	d065      	beq.n	801619e <__kernel_rem_pio2f+0x212>
 80160d2:	4639      	mov	r1, r7
 80160d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80160d8:	f000 faca 	bl	8016670 <scalbnf>
 80160dc:	4601      	mov	r1, r0
 80160de:	4648      	mov	r0, r9
 80160e0:	f7ea fc60 	bl	80009a4 <__aeabi_fsub>
 80160e4:	4681      	mov	r9, r0
 80160e6:	e05a      	b.n	801619e <__kernel_rem_pio2f+0x212>
 80160e8:	2400      	movs	r4, #0
 80160ea:	e766      	b.n	8015fba <__kernel_rem_pio2f+0x2e>
 80160ec:	42ee      	cmn	r6, r5
 80160ee:	d407      	bmi.n	8016100 <__kernel_rem_pio2f+0x174>
 80160f0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80160f4:	f7ea fd0c 	bl	8000b10 <__aeabi_i2f>
 80160f8:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80160fc:	3501      	adds	r5, #1
 80160fe:	e76f      	b.n	8015fe0 <__kernel_rem_pio2f+0x54>
 8016100:	4650      	mov	r0, sl
 8016102:	e7f9      	b.n	80160f8 <__kernel_rem_pio2f+0x16c>
 8016104:	9b05      	ldr	r3, [sp, #20]
 8016106:	f8da 1000 	ldr.w	r1, [sl]
 801610a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801610e:	f7ea fd53 	bl	8000bb8 <__aeabi_fmul>
 8016112:	4601      	mov	r1, r0
 8016114:	4630      	mov	r0, r6
 8016116:	f7ea fc47 	bl	80009a8 <__addsf3>
 801611a:	4606      	mov	r6, r0
 801611c:	f109 0901 	add.w	r9, r9, #1
 8016120:	ab46      	add	r3, sp, #280	; 0x118
 8016122:	9a03      	ldr	r2, [sp, #12]
 8016124:	f1aa 0a04 	sub.w	sl, sl, #4
 8016128:	4591      	cmp	r9, r2
 801612a:	ddeb      	ble.n	8016104 <__kernel_rem_pio2f+0x178>
 801612c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8016130:	3504      	adds	r5, #4
 8016132:	f108 0801 	add.w	r8, r8, #1
 8016136:	e75f      	b.n	8015ff8 <__kernel_rem_pio2f+0x6c>
 8016138:	46aa      	mov	sl, r5
 801613a:	465e      	mov	r6, fp
 801613c:	f04f 0900 	mov.w	r9, #0
 8016140:	e7ef      	b.n	8016122 <__kernel_rem_pio2f+0x196>
 8016142:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8016146:	4620      	mov	r0, r4
 8016148:	f7ea fd36 	bl	8000bb8 <__aeabi_fmul>
 801614c:	f7ea fefa 	bl	8000f44 <__aeabi_f2iz>
 8016150:	f7ea fcde 	bl	8000b10 <__aeabi_i2f>
 8016154:	4649      	mov	r1, r9
 8016156:	9009      	str	r0, [sp, #36]	; 0x24
 8016158:	f7ea fd2e 	bl	8000bb8 <__aeabi_fmul>
 801615c:	4601      	mov	r1, r0
 801615e:	4620      	mov	r0, r4
 8016160:	f7ea fc20 	bl	80009a4 <__aeabi_fsub>
 8016164:	f7ea feee 	bl	8000f44 <__aeabi_f2iz>
 8016168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801616a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801616e:	f846 0b04 	str.w	r0, [r6], #4
 8016172:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8016176:	4618      	mov	r0, r3
 8016178:	f7ea fc16 	bl	80009a8 <__addsf3>
 801617c:	4604      	mov	r4, r0
 801617e:	e756      	b.n	801602e <__kernel_rem_pio2f+0xa2>
 8016180:	d106      	bne.n	8016190 <__kernel_rem_pio2f+0x204>
 8016182:	f108 33ff 	add.w	r3, r8, #4294967295
 8016186:	aa0a      	add	r2, sp, #40	; 0x28
 8016188:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801618c:	1224      	asrs	r4, r4, #8
 801618e:	e785      	b.n	801609c <__kernel_rem_pio2f+0x110>
 8016190:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8016194:	f7ea fec2 	bl	8000f1c <__aeabi_fcmpge>
 8016198:	4604      	mov	r4, r0
 801619a:	2800      	cmp	r0, #0
 801619c:	d134      	bne.n	8016208 <__kernel_rem_pio2f+0x27c>
 801619e:	2100      	movs	r1, #0
 80161a0:	4648      	mov	r0, r9
 80161a2:	f7ea fe9d 	bl	8000ee0 <__aeabi_fcmpeq>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	f000 809a 	beq.w	80162e0 <__kernel_rem_pio2f+0x354>
 80161ac:	f108 35ff 	add.w	r5, r8, #4294967295
 80161b0:	462b      	mov	r3, r5
 80161b2:	2200      	movs	r2, #0
 80161b4:	9901      	ldr	r1, [sp, #4]
 80161b6:	428b      	cmp	r3, r1
 80161b8:	da4d      	bge.n	8016256 <__kernel_rem_pio2f+0x2ca>
 80161ba:	2a00      	cmp	r2, #0
 80161bc:	d07c      	beq.n	80162b8 <__kernel_rem_pio2f+0x32c>
 80161be:	ab0a      	add	r3, sp, #40	; 0x28
 80161c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80161c4:	3f08      	subs	r7, #8
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	f000 8088 	beq.w	80162dc <__kernel_rem_pio2f+0x350>
 80161cc:	4639      	mov	r1, r7
 80161ce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80161d2:	f000 fa4d 	bl	8016670 <scalbnf>
 80161d6:	46aa      	mov	sl, r5
 80161d8:	4681      	mov	r9, r0
 80161da:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 80161de:	af46      	add	r7, sp, #280	; 0x118
 80161e0:	f1ba 0f00 	cmp.w	sl, #0
 80161e4:	f280 80b1 	bge.w	801634a <__kernel_rem_pio2f+0x3be>
 80161e8:	46a9      	mov	r9, r5
 80161ea:	f04f 0a00 	mov.w	sl, #0
 80161ee:	2200      	movs	r2, #0
 80161f0:	f1b9 0f00 	cmp.w	r9, #0
 80161f4:	f2c0 80db 	blt.w	80163ae <__kernel_rem_pio2f+0x422>
 80161f8:	a946      	add	r1, sp, #280	; 0x118
 80161fa:	4617      	mov	r7, r2
 80161fc:	f04f 0800 	mov.w	r8, #0
 8016200:	4b2c      	ldr	r3, [pc, #176]	; (80162b4 <__kernel_rem_pio2f+0x328>)
 8016202:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 8016206:	e0c3      	b.n	8016390 <__kernel_rem_pio2f+0x404>
 8016208:	2402      	movs	r4, #2
 801620a:	e749      	b.n	80160a0 <__kernel_rem_pio2f+0x114>
 801620c:	682b      	ldr	r3, [r5, #0]
 801620e:	f1ba 0f00 	cmp.w	sl, #0
 8016212:	d108      	bne.n	8016226 <__kernel_rem_pio2f+0x29a>
 8016214:	b11b      	cbz	r3, 801621e <__kernel_rem_pio2f+0x292>
 8016216:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801621a:	602b      	str	r3, [r5, #0]
 801621c:	2301      	movs	r3, #1
 801621e:	469a      	mov	sl, r3
 8016220:	3201      	adds	r2, #1
 8016222:	3504      	adds	r5, #4
 8016224:	e73f      	b.n	80160a6 <__kernel_rem_pio2f+0x11a>
 8016226:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801622a:	602b      	str	r3, [r5, #0]
 801622c:	4653      	mov	r3, sl
 801622e:	e7f6      	b.n	801621e <__kernel_rem_pio2f+0x292>
 8016230:	f108 32ff 	add.w	r2, r8, #4294967295
 8016234:	ab0a      	add	r3, sp, #40	; 0x28
 8016236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801623a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801623e:	a90a      	add	r1, sp, #40	; 0x28
 8016240:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016244:	e73a      	b.n	80160bc <__kernel_rem_pio2f+0x130>
 8016246:	f108 32ff 	add.w	r2, r8, #4294967295
 801624a:	ab0a      	add	r3, sp, #40	; 0x28
 801624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016254:	e7f3      	b.n	801623e <__kernel_rem_pio2f+0x2b2>
 8016256:	a90a      	add	r1, sp, #40	; 0x28
 8016258:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801625c:	3b01      	subs	r3, #1
 801625e:	430a      	orrs	r2, r1
 8016260:	e7a8      	b.n	80161b4 <__kernel_rem_pio2f+0x228>
 8016262:	3301      	adds	r3, #1
 8016264:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016268:	2900      	cmp	r1, #0
 801626a:	d0fa      	beq.n	8016262 <__kernel_rem_pio2f+0x2d6>
 801626c:	9a04      	ldr	r2, [sp, #16]
 801626e:	f108 0501 	add.w	r5, r8, #1
 8016272:	eb08 0402 	add.w	r4, r8, r2
 8016276:	aa1e      	add	r2, sp, #120	; 0x78
 8016278:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801627c:	4498      	add	r8, r3
 801627e:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8016282:	45a8      	cmp	r8, r5
 8016284:	f6ff aec7 	blt.w	8016016 <__kernel_rem_pio2f+0x8a>
 8016288:	9b07      	ldr	r3, [sp, #28]
 801628a:	46a3      	mov	fp, r4
 801628c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016290:	f7ea fc3e 	bl	8000b10 <__aeabi_i2f>
 8016294:	f04f 0a00 	mov.w	sl, #0
 8016298:	2600      	movs	r6, #0
 801629a:	f84b 0b04 	str.w	r0, [fp], #4
 801629e:	9b03      	ldr	r3, [sp, #12]
 80162a0:	459a      	cmp	sl, r3
 80162a2:	dd0c      	ble.n	80162be <__kernel_rem_pio2f+0x332>
 80162a4:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 80162a8:	465c      	mov	r4, fp
 80162aa:	3501      	adds	r5, #1
 80162ac:	e7e9      	b.n	8016282 <__kernel_rem_pio2f+0x2f6>
 80162ae:	bf00      	nop
 80162b0:	08017cdc 	.word	0x08017cdc
 80162b4:	08017cb0 	.word	0x08017cb0
 80162b8:	2301      	movs	r3, #1
 80162ba:	9a08      	ldr	r2, [sp, #32]
 80162bc:	e7d2      	b.n	8016264 <__kernel_rem_pio2f+0x2d8>
 80162be:	9b05      	ldr	r3, [sp, #20]
 80162c0:	f854 0904 	ldr.w	r0, [r4], #-4
 80162c4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80162c8:	f7ea fc76 	bl	8000bb8 <__aeabi_fmul>
 80162cc:	4601      	mov	r1, r0
 80162ce:	4630      	mov	r0, r6
 80162d0:	f7ea fb6a 	bl	80009a8 <__addsf3>
 80162d4:	f10a 0a01 	add.w	sl, sl, #1
 80162d8:	4606      	mov	r6, r0
 80162da:	e7e0      	b.n	801629e <__kernel_rem_pio2f+0x312>
 80162dc:	3d01      	subs	r5, #1
 80162de:	e76e      	b.n	80161be <__kernel_rem_pio2f+0x232>
 80162e0:	9b06      	ldr	r3, [sp, #24]
 80162e2:	9a02      	ldr	r2, [sp, #8]
 80162e4:	4648      	mov	r0, r9
 80162e6:	1a99      	subs	r1, r3, r2
 80162e8:	f000 f9c2 	bl	8016670 <scalbnf>
 80162ec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80162f0:	4605      	mov	r5, r0
 80162f2:	f7ea fe13 	bl	8000f1c <__aeabi_fcmpge>
 80162f6:	b300      	cbz	r0, 801633a <__kernel_rem_pio2f+0x3ae>
 80162f8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80162fc:	4628      	mov	r0, r5
 80162fe:	f7ea fc5b 	bl	8000bb8 <__aeabi_fmul>
 8016302:	f7ea fe1f 	bl	8000f44 <__aeabi_f2iz>
 8016306:	f7ea fc03 	bl	8000b10 <__aeabi_i2f>
 801630a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801630e:	4681      	mov	r9, r0
 8016310:	f7ea fc52 	bl	8000bb8 <__aeabi_fmul>
 8016314:	4601      	mov	r1, r0
 8016316:	4628      	mov	r0, r5
 8016318:	f7ea fb44 	bl	80009a4 <__aeabi_fsub>
 801631c:	f7ea fe12 	bl	8000f44 <__aeabi_f2iz>
 8016320:	ab0a      	add	r3, sp, #40	; 0x28
 8016322:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8016326:	4648      	mov	r0, r9
 8016328:	f7ea fe0c 	bl	8000f44 <__aeabi_f2iz>
 801632c:	f108 0501 	add.w	r5, r8, #1
 8016330:	ab0a      	add	r3, sp, #40	; 0x28
 8016332:	3708      	adds	r7, #8
 8016334:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8016338:	e748      	b.n	80161cc <__kernel_rem_pio2f+0x240>
 801633a:	4628      	mov	r0, r5
 801633c:	f7ea fe02 	bl	8000f44 <__aeabi_f2iz>
 8016340:	ab0a      	add	r3, sp, #40	; 0x28
 8016342:	4645      	mov	r5, r8
 8016344:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8016348:	e740      	b.n	80161cc <__kernel_rem_pio2f+0x240>
 801634a:	ab0a      	add	r3, sp, #40	; 0x28
 801634c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8016350:	f7ea fbde 	bl	8000b10 <__aeabi_i2f>
 8016354:	4649      	mov	r1, r9
 8016356:	f7ea fc2f 	bl	8000bb8 <__aeabi_fmul>
 801635a:	4641      	mov	r1, r8
 801635c:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8016360:	4648      	mov	r0, r9
 8016362:	f7ea fc29 	bl	8000bb8 <__aeabi_fmul>
 8016366:	f10a 3aff 	add.w	sl, sl, #4294967295
 801636a:	4681      	mov	r9, r0
 801636c:	e738      	b.n	80161e0 <__kernel_rem_pio2f+0x254>
 801636e:	f853 0b04 	ldr.w	r0, [r3], #4
 8016372:	f85b 1b04 	ldr.w	r1, [fp], #4
 8016376:	9203      	str	r2, [sp, #12]
 8016378:	9302      	str	r3, [sp, #8]
 801637a:	f7ea fc1d 	bl	8000bb8 <__aeabi_fmul>
 801637e:	4601      	mov	r1, r0
 8016380:	4638      	mov	r0, r7
 8016382:	f7ea fb11 	bl	80009a8 <__addsf3>
 8016386:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801638a:	4607      	mov	r7, r0
 801638c:	f108 0801 	add.w	r8, r8, #1
 8016390:	9901      	ldr	r1, [sp, #4]
 8016392:	4588      	cmp	r8, r1
 8016394:	dc01      	bgt.n	801639a <__kernel_rem_pio2f+0x40e>
 8016396:	45c2      	cmp	sl, r8
 8016398:	dae9      	bge.n	801636e <__kernel_rem_pio2f+0x3e2>
 801639a:	ab5a      	add	r3, sp, #360	; 0x168
 801639c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80163a0:	f843 7ca0 	str.w	r7, [r3, #-160]
 80163a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80163a8:	f10a 0a01 	add.w	sl, sl, #1
 80163ac:	e720      	b.n	80161f0 <__kernel_rem_pio2f+0x264>
 80163ae:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80163b0:	2b02      	cmp	r3, #2
 80163b2:	dc07      	bgt.n	80163c4 <__kernel_rem_pio2f+0x438>
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	dc4d      	bgt.n	8016454 <__kernel_rem_pio2f+0x4c8>
 80163b8:	d02e      	beq.n	8016418 <__kernel_rem_pio2f+0x48c>
 80163ba:	f006 0007 	and.w	r0, r6, #7
 80163be:	b05b      	add	sp, #364	; 0x16c
 80163c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163c4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80163c6:	2b03      	cmp	r3, #3
 80163c8:	d1f7      	bne.n	80163ba <__kernel_rem_pio2f+0x42e>
 80163ca:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 80163ce:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 80163d2:	46b8      	mov	r8, r7
 80163d4:	46aa      	mov	sl, r5
 80163d6:	f1ba 0f00 	cmp.w	sl, #0
 80163da:	dc48      	bgt.n	801646e <__kernel_rem_pio2f+0x4e2>
 80163dc:	46a9      	mov	r9, r5
 80163de:	f1b9 0f01 	cmp.w	r9, #1
 80163e2:	dc5f      	bgt.n	80164a4 <__kernel_rem_pio2f+0x518>
 80163e4:	2000      	movs	r0, #0
 80163e6:	2d01      	cmp	r5, #1
 80163e8:	dc75      	bgt.n	80164d6 <__kernel_rem_pio2f+0x54a>
 80163ea:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80163ec:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80163ee:	2c00      	cmp	r4, #0
 80163f0:	d177      	bne.n	80164e2 <__kernel_rem_pio2f+0x556>
 80163f2:	9900      	ldr	r1, [sp, #0]
 80163f4:	600a      	str	r2, [r1, #0]
 80163f6:	460a      	mov	r2, r1
 80163f8:	604b      	str	r3, [r1, #4]
 80163fa:	6090      	str	r0, [r2, #8]
 80163fc:	e7dd      	b.n	80163ba <__kernel_rem_pio2f+0x42e>
 80163fe:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8016402:	f7ea fad1 	bl	80009a8 <__addsf3>
 8016406:	3d01      	subs	r5, #1
 8016408:	2d00      	cmp	r5, #0
 801640a:	daf8      	bge.n	80163fe <__kernel_rem_pio2f+0x472>
 801640c:	b10c      	cbz	r4, 8016412 <__kernel_rem_pio2f+0x486>
 801640e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8016412:	9b00      	ldr	r3, [sp, #0]
 8016414:	6018      	str	r0, [r3, #0]
 8016416:	e7d0      	b.n	80163ba <__kernel_rem_pio2f+0x42e>
 8016418:	2000      	movs	r0, #0
 801641a:	af32      	add	r7, sp, #200	; 0xc8
 801641c:	e7f4      	b.n	8016408 <__kernel_rem_pio2f+0x47c>
 801641e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8016422:	f7ea fac1 	bl	80009a8 <__addsf3>
 8016426:	3f01      	subs	r7, #1
 8016428:	2f00      	cmp	r7, #0
 801642a:	daf8      	bge.n	801641e <__kernel_rem_pio2f+0x492>
 801642c:	b1bc      	cbz	r4, 801645e <__kernel_rem_pio2f+0x4d2>
 801642e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8016432:	9a00      	ldr	r2, [sp, #0]
 8016434:	4601      	mov	r1, r0
 8016436:	6013      	str	r3, [r2, #0]
 8016438:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801643a:	f7ea fab3 	bl	80009a4 <__aeabi_fsub>
 801643e:	2701      	movs	r7, #1
 8016440:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8016444:	42bd      	cmp	r5, r7
 8016446:	da0c      	bge.n	8016462 <__kernel_rem_pio2f+0x4d6>
 8016448:	b10c      	cbz	r4, 801644e <__kernel_rem_pio2f+0x4c2>
 801644a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801644e:	9b00      	ldr	r3, [sp, #0]
 8016450:	6058      	str	r0, [r3, #4]
 8016452:	e7b2      	b.n	80163ba <__kernel_rem_pio2f+0x42e>
 8016454:	462f      	mov	r7, r5
 8016456:	2000      	movs	r0, #0
 8016458:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 801645c:	e7e4      	b.n	8016428 <__kernel_rem_pio2f+0x49c>
 801645e:	4603      	mov	r3, r0
 8016460:	e7e7      	b.n	8016432 <__kernel_rem_pio2f+0x4a6>
 8016462:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8016466:	f7ea fa9f 	bl	80009a8 <__addsf3>
 801646a:	3701      	adds	r7, #1
 801646c:	e7ea      	b.n	8016444 <__kernel_rem_pio2f+0x4b8>
 801646e:	f8d8 3000 	ldr.w	r3, [r8]
 8016472:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8016476:	4619      	mov	r1, r3
 8016478:	4610      	mov	r0, r2
 801647a:	9302      	str	r3, [sp, #8]
 801647c:	9201      	str	r2, [sp, #4]
 801647e:	f7ea fa93 	bl	80009a8 <__addsf3>
 8016482:	9a01      	ldr	r2, [sp, #4]
 8016484:	4601      	mov	r1, r0
 8016486:	4681      	mov	r9, r0
 8016488:	4610      	mov	r0, r2
 801648a:	f7ea fa8b 	bl	80009a4 <__aeabi_fsub>
 801648e:	9b02      	ldr	r3, [sp, #8]
 8016490:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016494:	4619      	mov	r1, r3
 8016496:	f7ea fa87 	bl	80009a8 <__addsf3>
 801649a:	f848 0904 	str.w	r0, [r8], #-4
 801649e:	f8c8 9000 	str.w	r9, [r8]
 80164a2:	e798      	b.n	80163d6 <__kernel_rem_pio2f+0x44a>
 80164a4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80164a8:	f8d7 a000 	ldr.w	sl, [r7]
 80164ac:	4618      	mov	r0, r3
 80164ae:	4651      	mov	r1, sl
 80164b0:	9301      	str	r3, [sp, #4]
 80164b2:	f7ea fa79 	bl	80009a8 <__addsf3>
 80164b6:	9b01      	ldr	r3, [sp, #4]
 80164b8:	4601      	mov	r1, r0
 80164ba:	4680      	mov	r8, r0
 80164bc:	4618      	mov	r0, r3
 80164be:	f7ea fa71 	bl	80009a4 <__aeabi_fsub>
 80164c2:	4651      	mov	r1, sl
 80164c4:	f7ea fa70 	bl	80009a8 <__addsf3>
 80164c8:	f847 0904 	str.w	r0, [r7], #-4
 80164cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80164d0:	f8c7 8000 	str.w	r8, [r7]
 80164d4:	e783      	b.n	80163de <__kernel_rem_pio2f+0x452>
 80164d6:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 80164da:	f7ea fa65 	bl	80009a8 <__addsf3>
 80164de:	3d01      	subs	r5, #1
 80164e0:	e781      	b.n	80163e6 <__kernel_rem_pio2f+0x45a>
 80164e2:	9900      	ldr	r1, [sp, #0]
 80164e4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80164e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80164ec:	600a      	str	r2, [r1, #0]
 80164ee:	604b      	str	r3, [r1, #4]
 80164f0:	460a      	mov	r2, r1
 80164f2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80164f6:	e780      	b.n	80163fa <__kernel_rem_pio2f+0x46e>

080164f8 <__kernel_sinf>:
 80164f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164fc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8016500:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016504:	4604      	mov	r4, r0
 8016506:	460f      	mov	r7, r1
 8016508:	4691      	mov	r9, r2
 801650a:	da03      	bge.n	8016514 <__kernel_sinf+0x1c>
 801650c:	f7ea fd1a 	bl	8000f44 <__aeabi_f2iz>
 8016510:	2800      	cmp	r0, #0
 8016512:	d035      	beq.n	8016580 <__kernel_sinf+0x88>
 8016514:	4621      	mov	r1, r4
 8016516:	4620      	mov	r0, r4
 8016518:	f7ea fb4e 	bl	8000bb8 <__aeabi_fmul>
 801651c:	4605      	mov	r5, r0
 801651e:	4601      	mov	r1, r0
 8016520:	4620      	mov	r0, r4
 8016522:	f7ea fb49 	bl	8000bb8 <__aeabi_fmul>
 8016526:	4929      	ldr	r1, [pc, #164]	; (80165cc <__kernel_sinf+0xd4>)
 8016528:	4606      	mov	r6, r0
 801652a:	4628      	mov	r0, r5
 801652c:	f7ea fb44 	bl	8000bb8 <__aeabi_fmul>
 8016530:	4927      	ldr	r1, [pc, #156]	; (80165d0 <__kernel_sinf+0xd8>)
 8016532:	f7ea fa37 	bl	80009a4 <__aeabi_fsub>
 8016536:	4629      	mov	r1, r5
 8016538:	f7ea fb3e 	bl	8000bb8 <__aeabi_fmul>
 801653c:	4925      	ldr	r1, [pc, #148]	; (80165d4 <__kernel_sinf+0xdc>)
 801653e:	f7ea fa33 	bl	80009a8 <__addsf3>
 8016542:	4629      	mov	r1, r5
 8016544:	f7ea fb38 	bl	8000bb8 <__aeabi_fmul>
 8016548:	4923      	ldr	r1, [pc, #140]	; (80165d8 <__kernel_sinf+0xe0>)
 801654a:	f7ea fa2b 	bl	80009a4 <__aeabi_fsub>
 801654e:	4629      	mov	r1, r5
 8016550:	f7ea fb32 	bl	8000bb8 <__aeabi_fmul>
 8016554:	4921      	ldr	r1, [pc, #132]	; (80165dc <__kernel_sinf+0xe4>)
 8016556:	f7ea fa27 	bl	80009a8 <__addsf3>
 801655a:	4680      	mov	r8, r0
 801655c:	f1b9 0f00 	cmp.w	r9, #0
 8016560:	d111      	bne.n	8016586 <__kernel_sinf+0x8e>
 8016562:	4601      	mov	r1, r0
 8016564:	4628      	mov	r0, r5
 8016566:	f7ea fb27 	bl	8000bb8 <__aeabi_fmul>
 801656a:	491d      	ldr	r1, [pc, #116]	; (80165e0 <__kernel_sinf+0xe8>)
 801656c:	f7ea fa1a 	bl	80009a4 <__aeabi_fsub>
 8016570:	4631      	mov	r1, r6
 8016572:	f7ea fb21 	bl	8000bb8 <__aeabi_fmul>
 8016576:	4601      	mov	r1, r0
 8016578:	4620      	mov	r0, r4
 801657a:	f7ea fa15 	bl	80009a8 <__addsf3>
 801657e:	4604      	mov	r4, r0
 8016580:	4620      	mov	r0, r4
 8016582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016586:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801658a:	4638      	mov	r0, r7
 801658c:	f7ea fb14 	bl	8000bb8 <__aeabi_fmul>
 8016590:	4641      	mov	r1, r8
 8016592:	4681      	mov	r9, r0
 8016594:	4630      	mov	r0, r6
 8016596:	f7ea fb0f 	bl	8000bb8 <__aeabi_fmul>
 801659a:	4601      	mov	r1, r0
 801659c:	4648      	mov	r0, r9
 801659e:	f7ea fa01 	bl	80009a4 <__aeabi_fsub>
 80165a2:	4629      	mov	r1, r5
 80165a4:	f7ea fb08 	bl	8000bb8 <__aeabi_fmul>
 80165a8:	4639      	mov	r1, r7
 80165aa:	f7ea f9fb 	bl	80009a4 <__aeabi_fsub>
 80165ae:	490c      	ldr	r1, [pc, #48]	; (80165e0 <__kernel_sinf+0xe8>)
 80165b0:	4605      	mov	r5, r0
 80165b2:	4630      	mov	r0, r6
 80165b4:	f7ea fb00 	bl	8000bb8 <__aeabi_fmul>
 80165b8:	4601      	mov	r1, r0
 80165ba:	4628      	mov	r0, r5
 80165bc:	f7ea f9f4 	bl	80009a8 <__addsf3>
 80165c0:	4601      	mov	r1, r0
 80165c2:	4620      	mov	r0, r4
 80165c4:	f7ea f9ee 	bl	80009a4 <__aeabi_fsub>
 80165c8:	e7d9      	b.n	801657e <__kernel_sinf+0x86>
 80165ca:	bf00      	nop
 80165cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80165d0:	32d72f34 	.word	0x32d72f34
 80165d4:	3638ef1b 	.word	0x3638ef1b
 80165d8:	39500d01 	.word	0x39500d01
 80165dc:	3c088889 	.word	0x3c088889
 80165e0:	3e2aaaab 	.word	0x3e2aaaab

080165e4 <fabsf>:
 80165e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80165e8:	4770      	bx	lr
	...

080165ec <floorf>:
 80165ec:	b570      	push	{r4, r5, r6, lr}
 80165ee:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80165f2:	3d7f      	subs	r5, #127	; 0x7f
 80165f4:	2d16      	cmp	r5, #22
 80165f6:	4601      	mov	r1, r0
 80165f8:	4604      	mov	r4, r0
 80165fa:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80165fe:	dc26      	bgt.n	801664e <floorf+0x62>
 8016600:	2d00      	cmp	r5, #0
 8016602:	da0e      	bge.n	8016622 <floorf+0x36>
 8016604:	4917      	ldr	r1, [pc, #92]	; (8016664 <floorf+0x78>)
 8016606:	f7ea f9cf 	bl	80009a8 <__addsf3>
 801660a:	2100      	movs	r1, #0
 801660c:	f7ea fc90 	bl	8000f30 <__aeabi_fcmpgt>
 8016610:	b128      	cbz	r0, 801661e <floorf+0x32>
 8016612:	2c00      	cmp	r4, #0
 8016614:	da23      	bge.n	801665e <floorf+0x72>
 8016616:	4b14      	ldr	r3, [pc, #80]	; (8016668 <floorf+0x7c>)
 8016618:	2e00      	cmp	r6, #0
 801661a:	bf18      	it	ne
 801661c:	461c      	movne	r4, r3
 801661e:	4621      	mov	r1, r4
 8016620:	e01b      	b.n	801665a <floorf+0x6e>
 8016622:	4e12      	ldr	r6, [pc, #72]	; (801666c <floorf+0x80>)
 8016624:	412e      	asrs	r6, r5
 8016626:	4230      	tst	r0, r6
 8016628:	d017      	beq.n	801665a <floorf+0x6e>
 801662a:	490e      	ldr	r1, [pc, #56]	; (8016664 <floorf+0x78>)
 801662c:	f7ea f9bc 	bl	80009a8 <__addsf3>
 8016630:	2100      	movs	r1, #0
 8016632:	f7ea fc7d 	bl	8000f30 <__aeabi_fcmpgt>
 8016636:	2800      	cmp	r0, #0
 8016638:	d0f1      	beq.n	801661e <floorf+0x32>
 801663a:	2c00      	cmp	r4, #0
 801663c:	bfbe      	ittt	lt
 801663e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8016642:	fa43 f505 	asrlt.w	r5, r3, r5
 8016646:	1964      	addlt	r4, r4, r5
 8016648:	ea24 0406 	bic.w	r4, r4, r6
 801664c:	e7e7      	b.n	801661e <floorf+0x32>
 801664e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8016652:	d302      	bcc.n	801665a <floorf+0x6e>
 8016654:	f7ea f9a8 	bl	80009a8 <__addsf3>
 8016658:	4601      	mov	r1, r0
 801665a:	4608      	mov	r0, r1
 801665c:	bd70      	pop	{r4, r5, r6, pc}
 801665e:	2400      	movs	r4, #0
 8016660:	e7dd      	b.n	801661e <floorf+0x32>
 8016662:	bf00      	nop
 8016664:	7149f2ca 	.word	0x7149f2ca
 8016668:	bf800000 	.word	0xbf800000
 801666c:	007fffff 	.word	0x007fffff

08016670 <scalbnf>:
 8016670:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8016674:	b538      	push	{r3, r4, r5, lr}
 8016676:	4603      	mov	r3, r0
 8016678:	460d      	mov	r5, r1
 801667a:	4604      	mov	r4, r0
 801667c:	d02a      	beq.n	80166d4 <scalbnf+0x64>
 801667e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016682:	d304      	bcc.n	801668e <scalbnf+0x1e>
 8016684:	4601      	mov	r1, r0
 8016686:	f7ea f98f 	bl	80009a8 <__addsf3>
 801668a:	4603      	mov	r3, r0
 801668c:	e022      	b.n	80166d4 <scalbnf+0x64>
 801668e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8016692:	d117      	bne.n	80166c4 <scalbnf+0x54>
 8016694:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8016698:	f7ea fa8e 	bl	8000bb8 <__aeabi_fmul>
 801669c:	4a17      	ldr	r2, [pc, #92]	; (80166fc <scalbnf+0x8c>)
 801669e:	4603      	mov	r3, r0
 80166a0:	4295      	cmp	r5, r2
 80166a2:	db0b      	blt.n	80166bc <scalbnf+0x4c>
 80166a4:	4604      	mov	r4, r0
 80166a6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80166aa:	3a19      	subs	r2, #25
 80166ac:	442a      	add	r2, r5
 80166ae:	2afe      	cmp	r2, #254	; 0xfe
 80166b0:	dd0a      	ble.n	80166c8 <scalbnf+0x58>
 80166b2:	4913      	ldr	r1, [pc, #76]	; (8016700 <scalbnf+0x90>)
 80166b4:	4618      	mov	r0, r3
 80166b6:	f361 001e 	bfi	r0, r1, #0, #31
 80166ba:	e000      	b.n	80166be <scalbnf+0x4e>
 80166bc:	4911      	ldr	r1, [pc, #68]	; (8016704 <scalbnf+0x94>)
 80166be:	f7ea fa7b 	bl	8000bb8 <__aeabi_fmul>
 80166c2:	e7e2      	b.n	801668a <scalbnf+0x1a>
 80166c4:	0dd2      	lsrs	r2, r2, #23
 80166c6:	e7f1      	b.n	80166ac <scalbnf+0x3c>
 80166c8:	2a00      	cmp	r2, #0
 80166ca:	dd05      	ble.n	80166d8 <scalbnf+0x68>
 80166cc:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 80166d0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 80166d4:	4618      	mov	r0, r3
 80166d6:	bd38      	pop	{r3, r4, r5, pc}
 80166d8:	f112 0f16 	cmn.w	r2, #22
 80166dc:	da05      	bge.n	80166ea <scalbnf+0x7a>
 80166de:	f24c 3250 	movw	r2, #50000	; 0xc350
 80166e2:	4295      	cmp	r5, r2
 80166e4:	dce5      	bgt.n	80166b2 <scalbnf+0x42>
 80166e6:	4907      	ldr	r1, [pc, #28]	; (8016704 <scalbnf+0x94>)
 80166e8:	e7e4      	b.n	80166b4 <scalbnf+0x44>
 80166ea:	3219      	adds	r2, #25
 80166ec:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80166f0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80166f4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 80166f8:	e7e1      	b.n	80166be <scalbnf+0x4e>
 80166fa:	bf00      	nop
 80166fc:	ffff3cb0 	.word	0xffff3cb0
 8016700:	7149f2ca 	.word	0x7149f2ca
 8016704:	0da24260 	.word	0x0da24260

08016708 <abort>:
 8016708:	2006      	movs	r0, #6
 801670a:	b508      	push	{r3, lr}
 801670c:	f000 f96c 	bl	80169e8 <raise>
 8016710:	2001      	movs	r0, #1
 8016712:	f7eb fc44 	bl	8001f9e <_exit>

08016716 <atoi>:
 8016716:	220a      	movs	r2, #10
 8016718:	2100      	movs	r1, #0
 801671a:	f000 ba07 	b.w	8016b2c <strtol>
	...

08016720 <__errno>:
 8016720:	4b01      	ldr	r3, [pc, #4]	; (8016728 <__errno+0x8>)
 8016722:	6818      	ldr	r0, [r3, #0]
 8016724:	4770      	bx	lr
 8016726:	bf00      	nop
 8016728:	200006f4 	.word	0x200006f4

0801672c <__libc_init_array>:
 801672c:	b570      	push	{r4, r5, r6, lr}
 801672e:	2600      	movs	r6, #0
 8016730:	4d0c      	ldr	r5, [pc, #48]	; (8016764 <__libc_init_array+0x38>)
 8016732:	4c0d      	ldr	r4, [pc, #52]	; (8016768 <__libc_init_array+0x3c>)
 8016734:	1b64      	subs	r4, r4, r5
 8016736:	10a4      	asrs	r4, r4, #2
 8016738:	42a6      	cmp	r6, r4
 801673a:	d109      	bne.n	8016750 <__libc_init_array+0x24>
 801673c:	f000 fd68 	bl	8017210 <_init>
 8016740:	2600      	movs	r6, #0
 8016742:	4d0a      	ldr	r5, [pc, #40]	; (801676c <__libc_init_array+0x40>)
 8016744:	4c0a      	ldr	r4, [pc, #40]	; (8016770 <__libc_init_array+0x44>)
 8016746:	1b64      	subs	r4, r4, r5
 8016748:	10a4      	asrs	r4, r4, #2
 801674a:	42a6      	cmp	r6, r4
 801674c:	d105      	bne.n	801675a <__libc_init_array+0x2e>
 801674e:	bd70      	pop	{r4, r5, r6, pc}
 8016750:	f855 3b04 	ldr.w	r3, [r5], #4
 8016754:	4798      	blx	r3
 8016756:	3601      	adds	r6, #1
 8016758:	e7ee      	b.n	8016738 <__libc_init_array+0xc>
 801675a:	f855 3b04 	ldr.w	r3, [r5], #4
 801675e:	4798      	blx	r3
 8016760:	3601      	adds	r6, #1
 8016762:	e7f2      	b.n	801674a <__libc_init_array+0x1e>
 8016764:	08017e1c 	.word	0x08017e1c
 8016768:	08017e1c 	.word	0x08017e1c
 801676c:	08017e1c 	.word	0x08017e1c
 8016770:	08017e28 	.word	0x08017e28

08016774 <malloc>:
 8016774:	4b02      	ldr	r3, [pc, #8]	; (8016780 <malloc+0xc>)
 8016776:	4601      	mov	r1, r0
 8016778:	6818      	ldr	r0, [r3, #0]
 801677a:	f000 b8a3 	b.w	80168c4 <_malloc_r>
 801677e:	bf00      	nop
 8016780:	200006f4 	.word	0x200006f4

08016784 <free>:
 8016784:	4b02      	ldr	r3, [pc, #8]	; (8016790 <free+0xc>)
 8016786:	4601      	mov	r1, r0
 8016788:	6818      	ldr	r0, [r3, #0]
 801678a:	f000 b84f 	b.w	801682c <_free_r>
 801678e:	bf00      	nop
 8016790:	200006f4 	.word	0x200006f4

08016794 <memchr>:
 8016794:	4603      	mov	r3, r0
 8016796:	b510      	push	{r4, lr}
 8016798:	b2c9      	uxtb	r1, r1
 801679a:	4402      	add	r2, r0
 801679c:	4293      	cmp	r3, r2
 801679e:	4618      	mov	r0, r3
 80167a0:	d101      	bne.n	80167a6 <memchr+0x12>
 80167a2:	2000      	movs	r0, #0
 80167a4:	e003      	b.n	80167ae <memchr+0x1a>
 80167a6:	7804      	ldrb	r4, [r0, #0]
 80167a8:	3301      	adds	r3, #1
 80167aa:	428c      	cmp	r4, r1
 80167ac:	d1f6      	bne.n	801679c <memchr+0x8>
 80167ae:	bd10      	pop	{r4, pc}

080167b0 <memcmp>:
 80167b0:	b530      	push	{r4, r5, lr}
 80167b2:	2400      	movs	r4, #0
 80167b4:	3901      	subs	r1, #1
 80167b6:	42a2      	cmp	r2, r4
 80167b8:	d101      	bne.n	80167be <memcmp+0xe>
 80167ba:	2000      	movs	r0, #0
 80167bc:	e005      	b.n	80167ca <memcmp+0x1a>
 80167be:	5d03      	ldrb	r3, [r0, r4]
 80167c0:	3401      	adds	r4, #1
 80167c2:	5d0d      	ldrb	r5, [r1, r4]
 80167c4:	42ab      	cmp	r3, r5
 80167c6:	d0f6      	beq.n	80167b6 <memcmp+0x6>
 80167c8:	1b58      	subs	r0, r3, r5
 80167ca:	bd30      	pop	{r4, r5, pc}

080167cc <memcpy>:
 80167cc:	440a      	add	r2, r1
 80167ce:	4291      	cmp	r1, r2
 80167d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80167d4:	d100      	bne.n	80167d8 <memcpy+0xc>
 80167d6:	4770      	bx	lr
 80167d8:	b510      	push	{r4, lr}
 80167da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167de:	4291      	cmp	r1, r2
 80167e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80167e4:	d1f9      	bne.n	80167da <memcpy+0xe>
 80167e6:	bd10      	pop	{r4, pc}

080167e8 <memmove>:
 80167e8:	4288      	cmp	r0, r1
 80167ea:	b510      	push	{r4, lr}
 80167ec:	eb01 0402 	add.w	r4, r1, r2
 80167f0:	d902      	bls.n	80167f8 <memmove+0x10>
 80167f2:	4284      	cmp	r4, r0
 80167f4:	4623      	mov	r3, r4
 80167f6:	d807      	bhi.n	8016808 <memmove+0x20>
 80167f8:	1e43      	subs	r3, r0, #1
 80167fa:	42a1      	cmp	r1, r4
 80167fc:	d008      	beq.n	8016810 <memmove+0x28>
 80167fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016806:	e7f8      	b.n	80167fa <memmove+0x12>
 8016808:	4601      	mov	r1, r0
 801680a:	4402      	add	r2, r0
 801680c:	428a      	cmp	r2, r1
 801680e:	d100      	bne.n	8016812 <memmove+0x2a>
 8016810:	bd10      	pop	{r4, pc}
 8016812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801681a:	e7f7      	b.n	801680c <memmove+0x24>

0801681c <memset>:
 801681c:	4603      	mov	r3, r0
 801681e:	4402      	add	r2, r0
 8016820:	4293      	cmp	r3, r2
 8016822:	d100      	bne.n	8016826 <memset+0xa>
 8016824:	4770      	bx	lr
 8016826:	f803 1b01 	strb.w	r1, [r3], #1
 801682a:	e7f9      	b.n	8016820 <memset+0x4>

0801682c <_free_r>:
 801682c:	b538      	push	{r3, r4, r5, lr}
 801682e:	4605      	mov	r5, r0
 8016830:	2900      	cmp	r1, #0
 8016832:	d043      	beq.n	80168bc <_free_r+0x90>
 8016834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016838:	1f0c      	subs	r4, r1, #4
 801683a:	2b00      	cmp	r3, #0
 801683c:	bfb8      	it	lt
 801683e:	18e4      	addlt	r4, r4, r3
 8016840:	f000 f9b8 	bl	8016bb4 <__malloc_lock>
 8016844:	4a1e      	ldr	r2, [pc, #120]	; (80168c0 <_free_r+0x94>)
 8016846:	6813      	ldr	r3, [r2, #0]
 8016848:	4610      	mov	r0, r2
 801684a:	b933      	cbnz	r3, 801685a <_free_r+0x2e>
 801684c:	6063      	str	r3, [r4, #4]
 801684e:	6014      	str	r4, [r2, #0]
 8016850:	4628      	mov	r0, r5
 8016852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016856:	f000 b9b3 	b.w	8016bc0 <__malloc_unlock>
 801685a:	42a3      	cmp	r3, r4
 801685c:	d90a      	bls.n	8016874 <_free_r+0x48>
 801685e:	6821      	ldr	r1, [r4, #0]
 8016860:	1862      	adds	r2, r4, r1
 8016862:	4293      	cmp	r3, r2
 8016864:	bf01      	itttt	eq
 8016866:	681a      	ldreq	r2, [r3, #0]
 8016868:	685b      	ldreq	r3, [r3, #4]
 801686a:	1852      	addeq	r2, r2, r1
 801686c:	6022      	streq	r2, [r4, #0]
 801686e:	6063      	str	r3, [r4, #4]
 8016870:	6004      	str	r4, [r0, #0]
 8016872:	e7ed      	b.n	8016850 <_free_r+0x24>
 8016874:	461a      	mov	r2, r3
 8016876:	685b      	ldr	r3, [r3, #4]
 8016878:	b10b      	cbz	r3, 801687e <_free_r+0x52>
 801687a:	42a3      	cmp	r3, r4
 801687c:	d9fa      	bls.n	8016874 <_free_r+0x48>
 801687e:	6811      	ldr	r1, [r2, #0]
 8016880:	1850      	adds	r0, r2, r1
 8016882:	42a0      	cmp	r0, r4
 8016884:	d10b      	bne.n	801689e <_free_r+0x72>
 8016886:	6820      	ldr	r0, [r4, #0]
 8016888:	4401      	add	r1, r0
 801688a:	1850      	adds	r0, r2, r1
 801688c:	4283      	cmp	r3, r0
 801688e:	6011      	str	r1, [r2, #0]
 8016890:	d1de      	bne.n	8016850 <_free_r+0x24>
 8016892:	6818      	ldr	r0, [r3, #0]
 8016894:	685b      	ldr	r3, [r3, #4]
 8016896:	4401      	add	r1, r0
 8016898:	6011      	str	r1, [r2, #0]
 801689a:	6053      	str	r3, [r2, #4]
 801689c:	e7d8      	b.n	8016850 <_free_r+0x24>
 801689e:	d902      	bls.n	80168a6 <_free_r+0x7a>
 80168a0:	230c      	movs	r3, #12
 80168a2:	602b      	str	r3, [r5, #0]
 80168a4:	e7d4      	b.n	8016850 <_free_r+0x24>
 80168a6:	6820      	ldr	r0, [r4, #0]
 80168a8:	1821      	adds	r1, r4, r0
 80168aa:	428b      	cmp	r3, r1
 80168ac:	bf01      	itttt	eq
 80168ae:	6819      	ldreq	r1, [r3, #0]
 80168b0:	685b      	ldreq	r3, [r3, #4]
 80168b2:	1809      	addeq	r1, r1, r0
 80168b4:	6021      	streq	r1, [r4, #0]
 80168b6:	6063      	str	r3, [r4, #4]
 80168b8:	6054      	str	r4, [r2, #4]
 80168ba:	e7c9      	b.n	8016850 <_free_r+0x24>
 80168bc:	bd38      	pop	{r3, r4, r5, pc}
 80168be:	bf00      	nop
 80168c0:	2000114c 	.word	0x2000114c

080168c4 <_malloc_r>:
 80168c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168c6:	1ccd      	adds	r5, r1, #3
 80168c8:	f025 0503 	bic.w	r5, r5, #3
 80168cc:	3508      	adds	r5, #8
 80168ce:	2d0c      	cmp	r5, #12
 80168d0:	bf38      	it	cc
 80168d2:	250c      	movcc	r5, #12
 80168d4:	2d00      	cmp	r5, #0
 80168d6:	4606      	mov	r6, r0
 80168d8:	db01      	blt.n	80168de <_malloc_r+0x1a>
 80168da:	42a9      	cmp	r1, r5
 80168dc:	d903      	bls.n	80168e6 <_malloc_r+0x22>
 80168de:	230c      	movs	r3, #12
 80168e0:	6033      	str	r3, [r6, #0]
 80168e2:	2000      	movs	r0, #0
 80168e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168e6:	f000 f965 	bl	8016bb4 <__malloc_lock>
 80168ea:	4921      	ldr	r1, [pc, #132]	; (8016970 <_malloc_r+0xac>)
 80168ec:	680a      	ldr	r2, [r1, #0]
 80168ee:	4614      	mov	r4, r2
 80168f0:	b99c      	cbnz	r4, 801691a <_malloc_r+0x56>
 80168f2:	4f20      	ldr	r7, [pc, #128]	; (8016974 <_malloc_r+0xb0>)
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	b923      	cbnz	r3, 8016902 <_malloc_r+0x3e>
 80168f8:	4621      	mov	r1, r4
 80168fa:	4630      	mov	r0, r6
 80168fc:	f000 f83c 	bl	8016978 <_sbrk_r>
 8016900:	6038      	str	r0, [r7, #0]
 8016902:	4629      	mov	r1, r5
 8016904:	4630      	mov	r0, r6
 8016906:	f000 f837 	bl	8016978 <_sbrk_r>
 801690a:	1c43      	adds	r3, r0, #1
 801690c:	d123      	bne.n	8016956 <_malloc_r+0x92>
 801690e:	230c      	movs	r3, #12
 8016910:	4630      	mov	r0, r6
 8016912:	6033      	str	r3, [r6, #0]
 8016914:	f000 f954 	bl	8016bc0 <__malloc_unlock>
 8016918:	e7e3      	b.n	80168e2 <_malloc_r+0x1e>
 801691a:	6823      	ldr	r3, [r4, #0]
 801691c:	1b5b      	subs	r3, r3, r5
 801691e:	d417      	bmi.n	8016950 <_malloc_r+0x8c>
 8016920:	2b0b      	cmp	r3, #11
 8016922:	d903      	bls.n	801692c <_malloc_r+0x68>
 8016924:	6023      	str	r3, [r4, #0]
 8016926:	441c      	add	r4, r3
 8016928:	6025      	str	r5, [r4, #0]
 801692a:	e004      	b.n	8016936 <_malloc_r+0x72>
 801692c:	6863      	ldr	r3, [r4, #4]
 801692e:	42a2      	cmp	r2, r4
 8016930:	bf0c      	ite	eq
 8016932:	600b      	streq	r3, [r1, #0]
 8016934:	6053      	strne	r3, [r2, #4]
 8016936:	4630      	mov	r0, r6
 8016938:	f000 f942 	bl	8016bc0 <__malloc_unlock>
 801693c:	f104 000b 	add.w	r0, r4, #11
 8016940:	1d23      	adds	r3, r4, #4
 8016942:	f020 0007 	bic.w	r0, r0, #7
 8016946:	1ac2      	subs	r2, r0, r3
 8016948:	d0cc      	beq.n	80168e4 <_malloc_r+0x20>
 801694a:	1a1b      	subs	r3, r3, r0
 801694c:	50a3      	str	r3, [r4, r2]
 801694e:	e7c9      	b.n	80168e4 <_malloc_r+0x20>
 8016950:	4622      	mov	r2, r4
 8016952:	6864      	ldr	r4, [r4, #4]
 8016954:	e7cc      	b.n	80168f0 <_malloc_r+0x2c>
 8016956:	1cc4      	adds	r4, r0, #3
 8016958:	f024 0403 	bic.w	r4, r4, #3
 801695c:	42a0      	cmp	r0, r4
 801695e:	d0e3      	beq.n	8016928 <_malloc_r+0x64>
 8016960:	1a21      	subs	r1, r4, r0
 8016962:	4630      	mov	r0, r6
 8016964:	f000 f808 	bl	8016978 <_sbrk_r>
 8016968:	3001      	adds	r0, #1
 801696a:	d1dd      	bne.n	8016928 <_malloc_r+0x64>
 801696c:	e7cf      	b.n	801690e <_malloc_r+0x4a>
 801696e:	bf00      	nop
 8016970:	2000114c 	.word	0x2000114c
 8016974:	20001150 	.word	0x20001150

08016978 <_sbrk_r>:
 8016978:	b538      	push	{r3, r4, r5, lr}
 801697a:	2300      	movs	r3, #0
 801697c:	4d05      	ldr	r5, [pc, #20]	; (8016994 <_sbrk_r+0x1c>)
 801697e:	4604      	mov	r4, r0
 8016980:	4608      	mov	r0, r1
 8016982:	602b      	str	r3, [r5, #0]
 8016984:	f7eb fb16 	bl	8001fb4 <_sbrk>
 8016988:	1c43      	adds	r3, r0, #1
 801698a:	d102      	bne.n	8016992 <_sbrk_r+0x1a>
 801698c:	682b      	ldr	r3, [r5, #0]
 801698e:	b103      	cbz	r3, 8016992 <_sbrk_r+0x1a>
 8016990:	6023      	str	r3, [r4, #0]
 8016992:	bd38      	pop	{r3, r4, r5, pc}
 8016994:	20002004 	.word	0x20002004

08016998 <_raise_r>:
 8016998:	291f      	cmp	r1, #31
 801699a:	b538      	push	{r3, r4, r5, lr}
 801699c:	4604      	mov	r4, r0
 801699e:	460d      	mov	r5, r1
 80169a0:	d904      	bls.n	80169ac <_raise_r+0x14>
 80169a2:	2316      	movs	r3, #22
 80169a4:	6003      	str	r3, [r0, #0]
 80169a6:	f04f 30ff 	mov.w	r0, #4294967295
 80169aa:	bd38      	pop	{r3, r4, r5, pc}
 80169ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80169ae:	b112      	cbz	r2, 80169b6 <_raise_r+0x1e>
 80169b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80169b4:	b94b      	cbnz	r3, 80169ca <_raise_r+0x32>
 80169b6:	4620      	mov	r0, r4
 80169b8:	f000 f830 	bl	8016a1c <_getpid_r>
 80169bc:	462a      	mov	r2, r5
 80169be:	4601      	mov	r1, r0
 80169c0:	4620      	mov	r0, r4
 80169c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169c6:	f000 b817 	b.w	80169f8 <_kill_r>
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d00a      	beq.n	80169e4 <_raise_r+0x4c>
 80169ce:	1c59      	adds	r1, r3, #1
 80169d0:	d103      	bne.n	80169da <_raise_r+0x42>
 80169d2:	2316      	movs	r3, #22
 80169d4:	6003      	str	r3, [r0, #0]
 80169d6:	2001      	movs	r0, #1
 80169d8:	e7e7      	b.n	80169aa <_raise_r+0x12>
 80169da:	2400      	movs	r4, #0
 80169dc:	4628      	mov	r0, r5
 80169de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80169e2:	4798      	blx	r3
 80169e4:	2000      	movs	r0, #0
 80169e6:	e7e0      	b.n	80169aa <_raise_r+0x12>

080169e8 <raise>:
 80169e8:	4b02      	ldr	r3, [pc, #8]	; (80169f4 <raise+0xc>)
 80169ea:	4601      	mov	r1, r0
 80169ec:	6818      	ldr	r0, [r3, #0]
 80169ee:	f7ff bfd3 	b.w	8016998 <_raise_r>
 80169f2:	bf00      	nop
 80169f4:	200006f4 	.word	0x200006f4

080169f8 <_kill_r>:
 80169f8:	b538      	push	{r3, r4, r5, lr}
 80169fa:	2300      	movs	r3, #0
 80169fc:	4d06      	ldr	r5, [pc, #24]	; (8016a18 <_kill_r+0x20>)
 80169fe:	4604      	mov	r4, r0
 8016a00:	4608      	mov	r0, r1
 8016a02:	4611      	mov	r1, r2
 8016a04:	602b      	str	r3, [r5, #0]
 8016a06:	f7eb faba 	bl	8001f7e <_kill>
 8016a0a:	1c43      	adds	r3, r0, #1
 8016a0c:	d102      	bne.n	8016a14 <_kill_r+0x1c>
 8016a0e:	682b      	ldr	r3, [r5, #0]
 8016a10:	b103      	cbz	r3, 8016a14 <_kill_r+0x1c>
 8016a12:	6023      	str	r3, [r4, #0]
 8016a14:	bd38      	pop	{r3, r4, r5, pc}
 8016a16:	bf00      	nop
 8016a18:	20002004 	.word	0x20002004

08016a1c <_getpid_r>:
 8016a1c:	f7eb baa8 	b.w	8001f70 <_getpid>

08016a20 <_strtol_l.isra.0>:
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a26:	4686      	mov	lr, r0
 8016a28:	d001      	beq.n	8016a2e <_strtol_l.isra.0+0xe>
 8016a2a:	2b24      	cmp	r3, #36	; 0x24
 8016a2c:	d906      	bls.n	8016a3c <_strtol_l.isra.0+0x1c>
 8016a2e:	f7ff fe77 	bl	8016720 <__errno>
 8016a32:	2316      	movs	r3, #22
 8016a34:	6003      	str	r3, [r0, #0]
 8016a36:	2000      	movs	r0, #0
 8016a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a3c:	468c      	mov	ip, r1
 8016a3e:	4e3a      	ldr	r6, [pc, #232]	; (8016b28 <_strtol_l.isra.0+0x108>)
 8016a40:	4660      	mov	r0, ip
 8016a42:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8016a46:	5da5      	ldrb	r5, [r4, r6]
 8016a48:	f015 0508 	ands.w	r5, r5, #8
 8016a4c:	d1f8      	bne.n	8016a40 <_strtol_l.isra.0+0x20>
 8016a4e:	2c2d      	cmp	r4, #45	; 0x2d
 8016a50:	d133      	bne.n	8016aba <_strtol_l.isra.0+0x9a>
 8016a52:	f04f 0801 	mov.w	r8, #1
 8016a56:	f89c 4000 	ldrb.w	r4, [ip]
 8016a5a:	f100 0c02 	add.w	ip, r0, #2
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d05d      	beq.n	8016b1e <_strtol_l.isra.0+0xfe>
 8016a62:	2b10      	cmp	r3, #16
 8016a64:	d10c      	bne.n	8016a80 <_strtol_l.isra.0+0x60>
 8016a66:	2c30      	cmp	r4, #48	; 0x30
 8016a68:	d10a      	bne.n	8016a80 <_strtol_l.isra.0+0x60>
 8016a6a:	f89c 0000 	ldrb.w	r0, [ip]
 8016a6e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016a72:	2858      	cmp	r0, #88	; 0x58
 8016a74:	d14e      	bne.n	8016b14 <_strtol_l.isra.0+0xf4>
 8016a76:	2310      	movs	r3, #16
 8016a78:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8016a7c:	f10c 0c02 	add.w	ip, ip, #2
 8016a80:	2500      	movs	r5, #0
 8016a82:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8016a86:	3f01      	subs	r7, #1
 8016a88:	fbb7 f9f3 	udiv	r9, r7, r3
 8016a8c:	4628      	mov	r0, r5
 8016a8e:	fb03 7a19 	mls	sl, r3, r9, r7
 8016a92:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8016a96:	2e09      	cmp	r6, #9
 8016a98:	d818      	bhi.n	8016acc <_strtol_l.isra.0+0xac>
 8016a9a:	4634      	mov	r4, r6
 8016a9c:	42a3      	cmp	r3, r4
 8016a9e:	dd24      	ble.n	8016aea <_strtol_l.isra.0+0xca>
 8016aa0:	2d00      	cmp	r5, #0
 8016aa2:	db1f      	blt.n	8016ae4 <_strtol_l.isra.0+0xc4>
 8016aa4:	4581      	cmp	r9, r0
 8016aa6:	d31d      	bcc.n	8016ae4 <_strtol_l.isra.0+0xc4>
 8016aa8:	d101      	bne.n	8016aae <_strtol_l.isra.0+0x8e>
 8016aaa:	45a2      	cmp	sl, r4
 8016aac:	db1a      	blt.n	8016ae4 <_strtol_l.isra.0+0xc4>
 8016aae:	2501      	movs	r5, #1
 8016ab0:	fb00 4003 	mla	r0, r0, r3, r4
 8016ab4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8016ab8:	e7eb      	b.n	8016a92 <_strtol_l.isra.0+0x72>
 8016aba:	2c2b      	cmp	r4, #43	; 0x2b
 8016abc:	bf08      	it	eq
 8016abe:	f89c 4000 	ldrbeq.w	r4, [ip]
 8016ac2:	46a8      	mov	r8, r5
 8016ac4:	bf08      	it	eq
 8016ac6:	f100 0c02 	addeq.w	ip, r0, #2
 8016aca:	e7c8      	b.n	8016a5e <_strtol_l.isra.0+0x3e>
 8016acc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8016ad0:	2e19      	cmp	r6, #25
 8016ad2:	d801      	bhi.n	8016ad8 <_strtol_l.isra.0+0xb8>
 8016ad4:	3c37      	subs	r4, #55	; 0x37
 8016ad6:	e7e1      	b.n	8016a9c <_strtol_l.isra.0+0x7c>
 8016ad8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8016adc:	2e19      	cmp	r6, #25
 8016ade:	d804      	bhi.n	8016aea <_strtol_l.isra.0+0xca>
 8016ae0:	3c57      	subs	r4, #87	; 0x57
 8016ae2:	e7db      	b.n	8016a9c <_strtol_l.isra.0+0x7c>
 8016ae4:	f04f 35ff 	mov.w	r5, #4294967295
 8016ae8:	e7e4      	b.n	8016ab4 <_strtol_l.isra.0+0x94>
 8016aea:	2d00      	cmp	r5, #0
 8016aec:	da08      	bge.n	8016b00 <_strtol_l.isra.0+0xe0>
 8016aee:	2322      	movs	r3, #34	; 0x22
 8016af0:	4638      	mov	r0, r7
 8016af2:	f8ce 3000 	str.w	r3, [lr]
 8016af6:	2a00      	cmp	r2, #0
 8016af8:	d09e      	beq.n	8016a38 <_strtol_l.isra.0+0x18>
 8016afa:	f10c 31ff 	add.w	r1, ip, #4294967295
 8016afe:	e007      	b.n	8016b10 <_strtol_l.isra.0+0xf0>
 8016b00:	f1b8 0f00 	cmp.w	r8, #0
 8016b04:	d000      	beq.n	8016b08 <_strtol_l.isra.0+0xe8>
 8016b06:	4240      	negs	r0, r0
 8016b08:	2a00      	cmp	r2, #0
 8016b0a:	d095      	beq.n	8016a38 <_strtol_l.isra.0+0x18>
 8016b0c:	2d00      	cmp	r5, #0
 8016b0e:	d1f4      	bne.n	8016afa <_strtol_l.isra.0+0xda>
 8016b10:	6011      	str	r1, [r2, #0]
 8016b12:	e791      	b.n	8016a38 <_strtol_l.isra.0+0x18>
 8016b14:	2430      	movs	r4, #48	; 0x30
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d1b2      	bne.n	8016a80 <_strtol_l.isra.0+0x60>
 8016b1a:	2308      	movs	r3, #8
 8016b1c:	e7b0      	b.n	8016a80 <_strtol_l.isra.0+0x60>
 8016b1e:	2c30      	cmp	r4, #48	; 0x30
 8016b20:	d0a3      	beq.n	8016a6a <_strtol_l.isra.0+0x4a>
 8016b22:	230a      	movs	r3, #10
 8016b24:	e7ac      	b.n	8016a80 <_strtol_l.isra.0+0x60>
 8016b26:	bf00      	nop
 8016b28:	08017ce9 	.word	0x08017ce9

08016b2c <strtol>:
 8016b2c:	4613      	mov	r3, r2
 8016b2e:	460a      	mov	r2, r1
 8016b30:	4601      	mov	r1, r0
 8016b32:	4802      	ldr	r0, [pc, #8]	; (8016b3c <strtol+0x10>)
 8016b34:	6800      	ldr	r0, [r0, #0]
 8016b36:	f7ff bf73 	b.w	8016a20 <_strtol_l.isra.0>
 8016b3a:	bf00      	nop
 8016b3c:	200006f4 	.word	0x200006f4

08016b40 <_vsniprintf_r>:
 8016b40:	b530      	push	{r4, r5, lr}
 8016b42:	1e14      	subs	r4, r2, #0
 8016b44:	4605      	mov	r5, r0
 8016b46:	b09b      	sub	sp, #108	; 0x6c
 8016b48:	4618      	mov	r0, r3
 8016b4a:	da05      	bge.n	8016b58 <_vsniprintf_r+0x18>
 8016b4c:	238b      	movs	r3, #139	; 0x8b
 8016b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8016b52:	602b      	str	r3, [r5, #0]
 8016b54:	b01b      	add	sp, #108	; 0x6c
 8016b56:	bd30      	pop	{r4, r5, pc}
 8016b58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016b5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016b60:	bf0c      	ite	eq
 8016b62:	4623      	moveq	r3, r4
 8016b64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016b68:	9302      	str	r3, [sp, #8]
 8016b6a:	9305      	str	r3, [sp, #20]
 8016b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b70:	4602      	mov	r2, r0
 8016b72:	9100      	str	r1, [sp, #0]
 8016b74:	9104      	str	r1, [sp, #16]
 8016b76:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016b7a:	4669      	mov	r1, sp
 8016b7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016b7e:	4628      	mov	r0, r5
 8016b80:	f000 f880 	bl	8016c84 <_svfiprintf_r>
 8016b84:	1c43      	adds	r3, r0, #1
 8016b86:	bfbc      	itt	lt
 8016b88:	238b      	movlt	r3, #139	; 0x8b
 8016b8a:	602b      	strlt	r3, [r5, #0]
 8016b8c:	2c00      	cmp	r4, #0
 8016b8e:	d0e1      	beq.n	8016b54 <_vsniprintf_r+0x14>
 8016b90:	2200      	movs	r2, #0
 8016b92:	9b00      	ldr	r3, [sp, #0]
 8016b94:	701a      	strb	r2, [r3, #0]
 8016b96:	e7dd      	b.n	8016b54 <_vsniprintf_r+0x14>

08016b98 <vsniprintf>:
 8016b98:	b507      	push	{r0, r1, r2, lr}
 8016b9a:	9300      	str	r3, [sp, #0]
 8016b9c:	4613      	mov	r3, r2
 8016b9e:	460a      	mov	r2, r1
 8016ba0:	4601      	mov	r1, r0
 8016ba2:	4803      	ldr	r0, [pc, #12]	; (8016bb0 <vsniprintf+0x18>)
 8016ba4:	6800      	ldr	r0, [r0, #0]
 8016ba6:	f7ff ffcb 	bl	8016b40 <_vsniprintf_r>
 8016baa:	b003      	add	sp, #12
 8016bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bb0:	200006f4 	.word	0x200006f4

08016bb4 <__malloc_lock>:
 8016bb4:	4801      	ldr	r0, [pc, #4]	; (8016bbc <__malloc_lock+0x8>)
 8016bb6:	f000 bafb 	b.w	80171b0 <__retarget_lock_acquire_recursive>
 8016bba:	bf00      	nop
 8016bbc:	2000200c 	.word	0x2000200c

08016bc0 <__malloc_unlock>:
 8016bc0:	4801      	ldr	r0, [pc, #4]	; (8016bc8 <__malloc_unlock+0x8>)
 8016bc2:	f000 baf6 	b.w	80171b2 <__retarget_lock_release_recursive>
 8016bc6:	bf00      	nop
 8016bc8:	2000200c 	.word	0x2000200c

08016bcc <__ssputs_r>:
 8016bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bd0:	688e      	ldr	r6, [r1, #8]
 8016bd2:	4682      	mov	sl, r0
 8016bd4:	429e      	cmp	r6, r3
 8016bd6:	460c      	mov	r4, r1
 8016bd8:	4690      	mov	r8, r2
 8016bda:	461f      	mov	r7, r3
 8016bdc:	d838      	bhi.n	8016c50 <__ssputs_r+0x84>
 8016bde:	898a      	ldrh	r2, [r1, #12]
 8016be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016be4:	d032      	beq.n	8016c4c <__ssputs_r+0x80>
 8016be6:	6825      	ldr	r5, [r4, #0]
 8016be8:	6909      	ldr	r1, [r1, #16]
 8016bea:	3301      	adds	r3, #1
 8016bec:	eba5 0901 	sub.w	r9, r5, r1
 8016bf0:	6965      	ldr	r5, [r4, #20]
 8016bf2:	444b      	add	r3, r9
 8016bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016bfc:	106d      	asrs	r5, r5, #1
 8016bfe:	429d      	cmp	r5, r3
 8016c00:	bf38      	it	cc
 8016c02:	461d      	movcc	r5, r3
 8016c04:	0553      	lsls	r3, r2, #21
 8016c06:	d531      	bpl.n	8016c6c <__ssputs_r+0xa0>
 8016c08:	4629      	mov	r1, r5
 8016c0a:	f7ff fe5b 	bl	80168c4 <_malloc_r>
 8016c0e:	4606      	mov	r6, r0
 8016c10:	b950      	cbnz	r0, 8016c28 <__ssputs_r+0x5c>
 8016c12:	230c      	movs	r3, #12
 8016c14:	f04f 30ff 	mov.w	r0, #4294967295
 8016c18:	f8ca 3000 	str.w	r3, [sl]
 8016c1c:	89a3      	ldrh	r3, [r4, #12]
 8016c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c22:	81a3      	strh	r3, [r4, #12]
 8016c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c28:	464a      	mov	r2, r9
 8016c2a:	6921      	ldr	r1, [r4, #16]
 8016c2c:	f7ff fdce 	bl	80167cc <memcpy>
 8016c30:	89a3      	ldrh	r3, [r4, #12]
 8016c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c3a:	81a3      	strh	r3, [r4, #12]
 8016c3c:	6126      	str	r6, [r4, #16]
 8016c3e:	444e      	add	r6, r9
 8016c40:	6026      	str	r6, [r4, #0]
 8016c42:	463e      	mov	r6, r7
 8016c44:	6165      	str	r5, [r4, #20]
 8016c46:	eba5 0509 	sub.w	r5, r5, r9
 8016c4a:	60a5      	str	r5, [r4, #8]
 8016c4c:	42be      	cmp	r6, r7
 8016c4e:	d900      	bls.n	8016c52 <__ssputs_r+0x86>
 8016c50:	463e      	mov	r6, r7
 8016c52:	4632      	mov	r2, r6
 8016c54:	4641      	mov	r1, r8
 8016c56:	6820      	ldr	r0, [r4, #0]
 8016c58:	f7ff fdc6 	bl	80167e8 <memmove>
 8016c5c:	68a3      	ldr	r3, [r4, #8]
 8016c5e:	6822      	ldr	r2, [r4, #0]
 8016c60:	1b9b      	subs	r3, r3, r6
 8016c62:	4432      	add	r2, r6
 8016c64:	2000      	movs	r0, #0
 8016c66:	60a3      	str	r3, [r4, #8]
 8016c68:	6022      	str	r2, [r4, #0]
 8016c6a:	e7db      	b.n	8016c24 <__ssputs_r+0x58>
 8016c6c:	462a      	mov	r2, r5
 8016c6e:	f000 faa1 	bl	80171b4 <_realloc_r>
 8016c72:	4606      	mov	r6, r0
 8016c74:	2800      	cmp	r0, #0
 8016c76:	d1e1      	bne.n	8016c3c <__ssputs_r+0x70>
 8016c78:	4650      	mov	r0, sl
 8016c7a:	6921      	ldr	r1, [r4, #16]
 8016c7c:	f7ff fdd6 	bl	801682c <_free_r>
 8016c80:	e7c7      	b.n	8016c12 <__ssputs_r+0x46>
	...

08016c84 <_svfiprintf_r>:
 8016c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c88:	4698      	mov	r8, r3
 8016c8a:	898b      	ldrh	r3, [r1, #12]
 8016c8c:	4607      	mov	r7, r0
 8016c8e:	061b      	lsls	r3, r3, #24
 8016c90:	460d      	mov	r5, r1
 8016c92:	4614      	mov	r4, r2
 8016c94:	b09d      	sub	sp, #116	; 0x74
 8016c96:	d50e      	bpl.n	8016cb6 <_svfiprintf_r+0x32>
 8016c98:	690b      	ldr	r3, [r1, #16]
 8016c9a:	b963      	cbnz	r3, 8016cb6 <_svfiprintf_r+0x32>
 8016c9c:	2140      	movs	r1, #64	; 0x40
 8016c9e:	f7ff fe11 	bl	80168c4 <_malloc_r>
 8016ca2:	6028      	str	r0, [r5, #0]
 8016ca4:	6128      	str	r0, [r5, #16]
 8016ca6:	b920      	cbnz	r0, 8016cb2 <_svfiprintf_r+0x2e>
 8016ca8:	230c      	movs	r3, #12
 8016caa:	603b      	str	r3, [r7, #0]
 8016cac:	f04f 30ff 	mov.w	r0, #4294967295
 8016cb0:	e0d1      	b.n	8016e56 <_svfiprintf_r+0x1d2>
 8016cb2:	2340      	movs	r3, #64	; 0x40
 8016cb4:	616b      	str	r3, [r5, #20]
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8016cba:	2320      	movs	r3, #32
 8016cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016cc0:	2330      	movs	r3, #48	; 0x30
 8016cc2:	f04f 0901 	mov.w	r9, #1
 8016cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8016cca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016e70 <_svfiprintf_r+0x1ec>
 8016cce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016cd2:	4623      	mov	r3, r4
 8016cd4:	469a      	mov	sl, r3
 8016cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cda:	b10a      	cbz	r2, 8016ce0 <_svfiprintf_r+0x5c>
 8016cdc:	2a25      	cmp	r2, #37	; 0x25
 8016cde:	d1f9      	bne.n	8016cd4 <_svfiprintf_r+0x50>
 8016ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8016ce4:	d00b      	beq.n	8016cfe <_svfiprintf_r+0x7a>
 8016ce6:	465b      	mov	r3, fp
 8016ce8:	4622      	mov	r2, r4
 8016cea:	4629      	mov	r1, r5
 8016cec:	4638      	mov	r0, r7
 8016cee:	f7ff ff6d 	bl	8016bcc <__ssputs_r>
 8016cf2:	3001      	adds	r0, #1
 8016cf4:	f000 80aa 	beq.w	8016e4c <_svfiprintf_r+0x1c8>
 8016cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cfa:	445a      	add	r2, fp
 8016cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8016cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	f000 80a2 	beq.w	8016e4c <_svfiprintf_r+0x1c8>
 8016d08:	2300      	movs	r3, #0
 8016d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8016d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d12:	f10a 0a01 	add.w	sl, sl, #1
 8016d16:	9304      	str	r3, [sp, #16]
 8016d18:	9307      	str	r3, [sp, #28]
 8016d1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8016d20:	4654      	mov	r4, sl
 8016d22:	2205      	movs	r2, #5
 8016d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d28:	4851      	ldr	r0, [pc, #324]	; (8016e70 <_svfiprintf_r+0x1ec>)
 8016d2a:	f7ff fd33 	bl	8016794 <memchr>
 8016d2e:	9a04      	ldr	r2, [sp, #16]
 8016d30:	b9d8      	cbnz	r0, 8016d6a <_svfiprintf_r+0xe6>
 8016d32:	06d0      	lsls	r0, r2, #27
 8016d34:	bf44      	itt	mi
 8016d36:	2320      	movmi	r3, #32
 8016d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d3c:	0711      	lsls	r1, r2, #28
 8016d3e:	bf44      	itt	mi
 8016d40:	232b      	movmi	r3, #43	; 0x2b
 8016d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d46:	f89a 3000 	ldrb.w	r3, [sl]
 8016d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8016d4c:	d015      	beq.n	8016d7a <_svfiprintf_r+0xf6>
 8016d4e:	4654      	mov	r4, sl
 8016d50:	2000      	movs	r0, #0
 8016d52:	f04f 0c0a 	mov.w	ip, #10
 8016d56:	9a07      	ldr	r2, [sp, #28]
 8016d58:	4621      	mov	r1, r4
 8016d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d5e:	3b30      	subs	r3, #48	; 0x30
 8016d60:	2b09      	cmp	r3, #9
 8016d62:	d94e      	bls.n	8016e02 <_svfiprintf_r+0x17e>
 8016d64:	b1b0      	cbz	r0, 8016d94 <_svfiprintf_r+0x110>
 8016d66:	9207      	str	r2, [sp, #28]
 8016d68:	e014      	b.n	8016d94 <_svfiprintf_r+0x110>
 8016d6a:	eba0 0308 	sub.w	r3, r0, r8
 8016d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8016d72:	4313      	orrs	r3, r2
 8016d74:	46a2      	mov	sl, r4
 8016d76:	9304      	str	r3, [sp, #16]
 8016d78:	e7d2      	b.n	8016d20 <_svfiprintf_r+0x9c>
 8016d7a:	9b03      	ldr	r3, [sp, #12]
 8016d7c:	1d19      	adds	r1, r3, #4
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	9103      	str	r1, [sp, #12]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	bfbb      	ittet	lt
 8016d86:	425b      	neglt	r3, r3
 8016d88:	f042 0202 	orrlt.w	r2, r2, #2
 8016d8c:	9307      	strge	r3, [sp, #28]
 8016d8e:	9307      	strlt	r3, [sp, #28]
 8016d90:	bfb8      	it	lt
 8016d92:	9204      	strlt	r2, [sp, #16]
 8016d94:	7823      	ldrb	r3, [r4, #0]
 8016d96:	2b2e      	cmp	r3, #46	; 0x2e
 8016d98:	d10c      	bne.n	8016db4 <_svfiprintf_r+0x130>
 8016d9a:	7863      	ldrb	r3, [r4, #1]
 8016d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8016d9e:	d135      	bne.n	8016e0c <_svfiprintf_r+0x188>
 8016da0:	9b03      	ldr	r3, [sp, #12]
 8016da2:	3402      	adds	r4, #2
 8016da4:	1d1a      	adds	r2, r3, #4
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	9203      	str	r2, [sp, #12]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	bfb8      	it	lt
 8016dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8016db2:	9305      	str	r3, [sp, #20]
 8016db4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016e80 <_svfiprintf_r+0x1fc>
 8016db8:	2203      	movs	r2, #3
 8016dba:	4650      	mov	r0, sl
 8016dbc:	7821      	ldrb	r1, [r4, #0]
 8016dbe:	f7ff fce9 	bl	8016794 <memchr>
 8016dc2:	b140      	cbz	r0, 8016dd6 <_svfiprintf_r+0x152>
 8016dc4:	2340      	movs	r3, #64	; 0x40
 8016dc6:	eba0 000a 	sub.w	r0, r0, sl
 8016dca:	fa03 f000 	lsl.w	r0, r3, r0
 8016dce:	9b04      	ldr	r3, [sp, #16]
 8016dd0:	3401      	adds	r4, #1
 8016dd2:	4303      	orrs	r3, r0
 8016dd4:	9304      	str	r3, [sp, #16]
 8016dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dda:	2206      	movs	r2, #6
 8016ddc:	4825      	ldr	r0, [pc, #148]	; (8016e74 <_svfiprintf_r+0x1f0>)
 8016dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016de2:	f7ff fcd7 	bl	8016794 <memchr>
 8016de6:	2800      	cmp	r0, #0
 8016de8:	d038      	beq.n	8016e5c <_svfiprintf_r+0x1d8>
 8016dea:	4b23      	ldr	r3, [pc, #140]	; (8016e78 <_svfiprintf_r+0x1f4>)
 8016dec:	bb1b      	cbnz	r3, 8016e36 <_svfiprintf_r+0x1b2>
 8016dee:	9b03      	ldr	r3, [sp, #12]
 8016df0:	3307      	adds	r3, #7
 8016df2:	f023 0307 	bic.w	r3, r3, #7
 8016df6:	3308      	adds	r3, #8
 8016df8:	9303      	str	r3, [sp, #12]
 8016dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dfc:	4433      	add	r3, r6
 8016dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8016e00:	e767      	b.n	8016cd2 <_svfiprintf_r+0x4e>
 8016e02:	460c      	mov	r4, r1
 8016e04:	2001      	movs	r0, #1
 8016e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e0a:	e7a5      	b.n	8016d58 <_svfiprintf_r+0xd4>
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	f04f 0c0a 	mov.w	ip, #10
 8016e12:	4619      	mov	r1, r3
 8016e14:	3401      	adds	r4, #1
 8016e16:	9305      	str	r3, [sp, #20]
 8016e18:	4620      	mov	r0, r4
 8016e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e1e:	3a30      	subs	r2, #48	; 0x30
 8016e20:	2a09      	cmp	r2, #9
 8016e22:	d903      	bls.n	8016e2c <_svfiprintf_r+0x1a8>
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d0c5      	beq.n	8016db4 <_svfiprintf_r+0x130>
 8016e28:	9105      	str	r1, [sp, #20]
 8016e2a:	e7c3      	b.n	8016db4 <_svfiprintf_r+0x130>
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	2301      	movs	r3, #1
 8016e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e34:	e7f0      	b.n	8016e18 <_svfiprintf_r+0x194>
 8016e36:	ab03      	add	r3, sp, #12
 8016e38:	9300      	str	r3, [sp, #0]
 8016e3a:	462a      	mov	r2, r5
 8016e3c:	4638      	mov	r0, r7
 8016e3e:	4b0f      	ldr	r3, [pc, #60]	; (8016e7c <_svfiprintf_r+0x1f8>)
 8016e40:	a904      	add	r1, sp, #16
 8016e42:	f3af 8000 	nop.w
 8016e46:	1c42      	adds	r2, r0, #1
 8016e48:	4606      	mov	r6, r0
 8016e4a:	d1d6      	bne.n	8016dfa <_svfiprintf_r+0x176>
 8016e4c:	89ab      	ldrh	r3, [r5, #12]
 8016e4e:	065b      	lsls	r3, r3, #25
 8016e50:	f53f af2c 	bmi.w	8016cac <_svfiprintf_r+0x28>
 8016e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e56:	b01d      	add	sp, #116	; 0x74
 8016e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e5c:	ab03      	add	r3, sp, #12
 8016e5e:	9300      	str	r3, [sp, #0]
 8016e60:	462a      	mov	r2, r5
 8016e62:	4638      	mov	r0, r7
 8016e64:	4b05      	ldr	r3, [pc, #20]	; (8016e7c <_svfiprintf_r+0x1f8>)
 8016e66:	a904      	add	r1, sp, #16
 8016e68:	f000 f87c 	bl	8016f64 <_printf_i>
 8016e6c:	e7eb      	b.n	8016e46 <_svfiprintf_r+0x1c2>
 8016e6e:	bf00      	nop
 8016e70:	08017de9 	.word	0x08017de9
 8016e74:	08017df3 	.word	0x08017df3
 8016e78:	00000000 	.word	0x00000000
 8016e7c:	08016bcd 	.word	0x08016bcd
 8016e80:	08017def 	.word	0x08017def

08016e84 <_printf_common>:
 8016e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e88:	4616      	mov	r6, r2
 8016e8a:	4699      	mov	r9, r3
 8016e8c:	688a      	ldr	r2, [r1, #8]
 8016e8e:	690b      	ldr	r3, [r1, #16]
 8016e90:	4607      	mov	r7, r0
 8016e92:	4293      	cmp	r3, r2
 8016e94:	bfb8      	it	lt
 8016e96:	4613      	movlt	r3, r2
 8016e98:	6033      	str	r3, [r6, #0]
 8016e9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016e9e:	460c      	mov	r4, r1
 8016ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016ea4:	b10a      	cbz	r2, 8016eaa <_printf_common+0x26>
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	6033      	str	r3, [r6, #0]
 8016eaa:	6823      	ldr	r3, [r4, #0]
 8016eac:	0699      	lsls	r1, r3, #26
 8016eae:	bf42      	ittt	mi
 8016eb0:	6833      	ldrmi	r3, [r6, #0]
 8016eb2:	3302      	addmi	r3, #2
 8016eb4:	6033      	strmi	r3, [r6, #0]
 8016eb6:	6825      	ldr	r5, [r4, #0]
 8016eb8:	f015 0506 	ands.w	r5, r5, #6
 8016ebc:	d106      	bne.n	8016ecc <_printf_common+0x48>
 8016ebe:	f104 0a19 	add.w	sl, r4, #25
 8016ec2:	68e3      	ldr	r3, [r4, #12]
 8016ec4:	6832      	ldr	r2, [r6, #0]
 8016ec6:	1a9b      	subs	r3, r3, r2
 8016ec8:	42ab      	cmp	r3, r5
 8016eca:	dc28      	bgt.n	8016f1e <_printf_common+0x9a>
 8016ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016ed0:	1e13      	subs	r3, r2, #0
 8016ed2:	6822      	ldr	r2, [r4, #0]
 8016ed4:	bf18      	it	ne
 8016ed6:	2301      	movne	r3, #1
 8016ed8:	0692      	lsls	r2, r2, #26
 8016eda:	d42d      	bmi.n	8016f38 <_printf_common+0xb4>
 8016edc:	4649      	mov	r1, r9
 8016ede:	4638      	mov	r0, r7
 8016ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016ee4:	47c0      	blx	r8
 8016ee6:	3001      	adds	r0, #1
 8016ee8:	d020      	beq.n	8016f2c <_printf_common+0xa8>
 8016eea:	6823      	ldr	r3, [r4, #0]
 8016eec:	68e5      	ldr	r5, [r4, #12]
 8016eee:	f003 0306 	and.w	r3, r3, #6
 8016ef2:	2b04      	cmp	r3, #4
 8016ef4:	bf18      	it	ne
 8016ef6:	2500      	movne	r5, #0
 8016ef8:	6832      	ldr	r2, [r6, #0]
 8016efa:	f04f 0600 	mov.w	r6, #0
 8016efe:	68a3      	ldr	r3, [r4, #8]
 8016f00:	bf08      	it	eq
 8016f02:	1aad      	subeq	r5, r5, r2
 8016f04:	6922      	ldr	r2, [r4, #16]
 8016f06:	bf08      	it	eq
 8016f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016f0c:	4293      	cmp	r3, r2
 8016f0e:	bfc4      	itt	gt
 8016f10:	1a9b      	subgt	r3, r3, r2
 8016f12:	18ed      	addgt	r5, r5, r3
 8016f14:	341a      	adds	r4, #26
 8016f16:	42b5      	cmp	r5, r6
 8016f18:	d11a      	bne.n	8016f50 <_printf_common+0xcc>
 8016f1a:	2000      	movs	r0, #0
 8016f1c:	e008      	b.n	8016f30 <_printf_common+0xac>
 8016f1e:	2301      	movs	r3, #1
 8016f20:	4652      	mov	r2, sl
 8016f22:	4649      	mov	r1, r9
 8016f24:	4638      	mov	r0, r7
 8016f26:	47c0      	blx	r8
 8016f28:	3001      	adds	r0, #1
 8016f2a:	d103      	bne.n	8016f34 <_printf_common+0xb0>
 8016f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8016f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f34:	3501      	adds	r5, #1
 8016f36:	e7c4      	b.n	8016ec2 <_printf_common+0x3e>
 8016f38:	2030      	movs	r0, #48	; 0x30
 8016f3a:	18e1      	adds	r1, r4, r3
 8016f3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016f40:	1c5a      	adds	r2, r3, #1
 8016f42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016f46:	4422      	add	r2, r4
 8016f48:	3302      	adds	r3, #2
 8016f4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016f4e:	e7c5      	b.n	8016edc <_printf_common+0x58>
 8016f50:	2301      	movs	r3, #1
 8016f52:	4622      	mov	r2, r4
 8016f54:	4649      	mov	r1, r9
 8016f56:	4638      	mov	r0, r7
 8016f58:	47c0      	blx	r8
 8016f5a:	3001      	adds	r0, #1
 8016f5c:	d0e6      	beq.n	8016f2c <_printf_common+0xa8>
 8016f5e:	3601      	adds	r6, #1
 8016f60:	e7d9      	b.n	8016f16 <_printf_common+0x92>
	...

08016f64 <_printf_i>:
 8016f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016f68:	460c      	mov	r4, r1
 8016f6a:	7e27      	ldrb	r7, [r4, #24]
 8016f6c:	4691      	mov	r9, r2
 8016f6e:	2f78      	cmp	r7, #120	; 0x78
 8016f70:	4680      	mov	r8, r0
 8016f72:	469a      	mov	sl, r3
 8016f74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016f76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016f7a:	d807      	bhi.n	8016f8c <_printf_i+0x28>
 8016f7c:	2f62      	cmp	r7, #98	; 0x62
 8016f7e:	d80a      	bhi.n	8016f96 <_printf_i+0x32>
 8016f80:	2f00      	cmp	r7, #0
 8016f82:	f000 80d9 	beq.w	8017138 <_printf_i+0x1d4>
 8016f86:	2f58      	cmp	r7, #88	; 0x58
 8016f88:	f000 80a4 	beq.w	80170d4 <_printf_i+0x170>
 8016f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016f94:	e03a      	b.n	801700c <_printf_i+0xa8>
 8016f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016f9a:	2b15      	cmp	r3, #21
 8016f9c:	d8f6      	bhi.n	8016f8c <_printf_i+0x28>
 8016f9e:	a001      	add	r0, pc, #4	; (adr r0, 8016fa4 <_printf_i+0x40>)
 8016fa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016fa4:	08016ffd 	.word	0x08016ffd
 8016fa8:	08017011 	.word	0x08017011
 8016fac:	08016f8d 	.word	0x08016f8d
 8016fb0:	08016f8d 	.word	0x08016f8d
 8016fb4:	08016f8d 	.word	0x08016f8d
 8016fb8:	08016f8d 	.word	0x08016f8d
 8016fbc:	08017011 	.word	0x08017011
 8016fc0:	08016f8d 	.word	0x08016f8d
 8016fc4:	08016f8d 	.word	0x08016f8d
 8016fc8:	08016f8d 	.word	0x08016f8d
 8016fcc:	08016f8d 	.word	0x08016f8d
 8016fd0:	0801711f 	.word	0x0801711f
 8016fd4:	08017041 	.word	0x08017041
 8016fd8:	08017101 	.word	0x08017101
 8016fdc:	08016f8d 	.word	0x08016f8d
 8016fe0:	08016f8d 	.word	0x08016f8d
 8016fe4:	08017141 	.word	0x08017141
 8016fe8:	08016f8d 	.word	0x08016f8d
 8016fec:	08017041 	.word	0x08017041
 8016ff0:	08016f8d 	.word	0x08016f8d
 8016ff4:	08016f8d 	.word	0x08016f8d
 8016ff8:	08017109 	.word	0x08017109
 8016ffc:	680b      	ldr	r3, [r1, #0]
 8016ffe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017002:	1d1a      	adds	r2, r3, #4
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	600a      	str	r2, [r1, #0]
 8017008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801700c:	2301      	movs	r3, #1
 801700e:	e0a4      	b.n	801715a <_printf_i+0x1f6>
 8017010:	6825      	ldr	r5, [r4, #0]
 8017012:	6808      	ldr	r0, [r1, #0]
 8017014:	062e      	lsls	r6, r5, #24
 8017016:	f100 0304 	add.w	r3, r0, #4
 801701a:	d50a      	bpl.n	8017032 <_printf_i+0xce>
 801701c:	6805      	ldr	r5, [r0, #0]
 801701e:	600b      	str	r3, [r1, #0]
 8017020:	2d00      	cmp	r5, #0
 8017022:	da03      	bge.n	801702c <_printf_i+0xc8>
 8017024:	232d      	movs	r3, #45	; 0x2d
 8017026:	426d      	negs	r5, r5
 8017028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801702c:	230a      	movs	r3, #10
 801702e:	485e      	ldr	r0, [pc, #376]	; (80171a8 <_printf_i+0x244>)
 8017030:	e019      	b.n	8017066 <_printf_i+0x102>
 8017032:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017036:	6805      	ldr	r5, [r0, #0]
 8017038:	600b      	str	r3, [r1, #0]
 801703a:	bf18      	it	ne
 801703c:	b22d      	sxthne	r5, r5
 801703e:	e7ef      	b.n	8017020 <_printf_i+0xbc>
 8017040:	680b      	ldr	r3, [r1, #0]
 8017042:	6825      	ldr	r5, [r4, #0]
 8017044:	1d18      	adds	r0, r3, #4
 8017046:	6008      	str	r0, [r1, #0]
 8017048:	0628      	lsls	r0, r5, #24
 801704a:	d501      	bpl.n	8017050 <_printf_i+0xec>
 801704c:	681d      	ldr	r5, [r3, #0]
 801704e:	e002      	b.n	8017056 <_printf_i+0xf2>
 8017050:	0669      	lsls	r1, r5, #25
 8017052:	d5fb      	bpl.n	801704c <_printf_i+0xe8>
 8017054:	881d      	ldrh	r5, [r3, #0]
 8017056:	2f6f      	cmp	r7, #111	; 0x6f
 8017058:	bf0c      	ite	eq
 801705a:	2308      	moveq	r3, #8
 801705c:	230a      	movne	r3, #10
 801705e:	4852      	ldr	r0, [pc, #328]	; (80171a8 <_printf_i+0x244>)
 8017060:	2100      	movs	r1, #0
 8017062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017066:	6866      	ldr	r6, [r4, #4]
 8017068:	2e00      	cmp	r6, #0
 801706a:	bfa8      	it	ge
 801706c:	6821      	ldrge	r1, [r4, #0]
 801706e:	60a6      	str	r6, [r4, #8]
 8017070:	bfa4      	itt	ge
 8017072:	f021 0104 	bicge.w	r1, r1, #4
 8017076:	6021      	strge	r1, [r4, #0]
 8017078:	b90d      	cbnz	r5, 801707e <_printf_i+0x11a>
 801707a:	2e00      	cmp	r6, #0
 801707c:	d04d      	beq.n	801711a <_printf_i+0x1b6>
 801707e:	4616      	mov	r6, r2
 8017080:	fbb5 f1f3 	udiv	r1, r5, r3
 8017084:	fb03 5711 	mls	r7, r3, r1, r5
 8017088:	5dc7      	ldrb	r7, [r0, r7]
 801708a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801708e:	462f      	mov	r7, r5
 8017090:	42bb      	cmp	r3, r7
 8017092:	460d      	mov	r5, r1
 8017094:	d9f4      	bls.n	8017080 <_printf_i+0x11c>
 8017096:	2b08      	cmp	r3, #8
 8017098:	d10b      	bne.n	80170b2 <_printf_i+0x14e>
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	07df      	lsls	r7, r3, #31
 801709e:	d508      	bpl.n	80170b2 <_printf_i+0x14e>
 80170a0:	6923      	ldr	r3, [r4, #16]
 80170a2:	6861      	ldr	r1, [r4, #4]
 80170a4:	4299      	cmp	r1, r3
 80170a6:	bfde      	ittt	le
 80170a8:	2330      	movle	r3, #48	; 0x30
 80170aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80170ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80170b2:	1b92      	subs	r2, r2, r6
 80170b4:	6122      	str	r2, [r4, #16]
 80170b6:	464b      	mov	r3, r9
 80170b8:	4621      	mov	r1, r4
 80170ba:	4640      	mov	r0, r8
 80170bc:	f8cd a000 	str.w	sl, [sp]
 80170c0:	aa03      	add	r2, sp, #12
 80170c2:	f7ff fedf 	bl	8016e84 <_printf_common>
 80170c6:	3001      	adds	r0, #1
 80170c8:	d14c      	bne.n	8017164 <_printf_i+0x200>
 80170ca:	f04f 30ff 	mov.w	r0, #4294967295
 80170ce:	b004      	add	sp, #16
 80170d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170d4:	4834      	ldr	r0, [pc, #208]	; (80171a8 <_printf_i+0x244>)
 80170d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80170da:	680e      	ldr	r6, [r1, #0]
 80170dc:	6823      	ldr	r3, [r4, #0]
 80170de:	f856 5b04 	ldr.w	r5, [r6], #4
 80170e2:	061f      	lsls	r7, r3, #24
 80170e4:	600e      	str	r6, [r1, #0]
 80170e6:	d514      	bpl.n	8017112 <_printf_i+0x1ae>
 80170e8:	07d9      	lsls	r1, r3, #31
 80170ea:	bf44      	itt	mi
 80170ec:	f043 0320 	orrmi.w	r3, r3, #32
 80170f0:	6023      	strmi	r3, [r4, #0]
 80170f2:	b91d      	cbnz	r5, 80170fc <_printf_i+0x198>
 80170f4:	6823      	ldr	r3, [r4, #0]
 80170f6:	f023 0320 	bic.w	r3, r3, #32
 80170fa:	6023      	str	r3, [r4, #0]
 80170fc:	2310      	movs	r3, #16
 80170fe:	e7af      	b.n	8017060 <_printf_i+0xfc>
 8017100:	6823      	ldr	r3, [r4, #0]
 8017102:	f043 0320 	orr.w	r3, r3, #32
 8017106:	6023      	str	r3, [r4, #0]
 8017108:	2378      	movs	r3, #120	; 0x78
 801710a:	4828      	ldr	r0, [pc, #160]	; (80171ac <_printf_i+0x248>)
 801710c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017110:	e7e3      	b.n	80170da <_printf_i+0x176>
 8017112:	065e      	lsls	r6, r3, #25
 8017114:	bf48      	it	mi
 8017116:	b2ad      	uxthmi	r5, r5
 8017118:	e7e6      	b.n	80170e8 <_printf_i+0x184>
 801711a:	4616      	mov	r6, r2
 801711c:	e7bb      	b.n	8017096 <_printf_i+0x132>
 801711e:	680b      	ldr	r3, [r1, #0]
 8017120:	6826      	ldr	r6, [r4, #0]
 8017122:	1d1d      	adds	r5, r3, #4
 8017124:	6960      	ldr	r0, [r4, #20]
 8017126:	600d      	str	r5, [r1, #0]
 8017128:	0635      	lsls	r5, r6, #24
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	d501      	bpl.n	8017132 <_printf_i+0x1ce>
 801712e:	6018      	str	r0, [r3, #0]
 8017130:	e002      	b.n	8017138 <_printf_i+0x1d4>
 8017132:	0671      	lsls	r1, r6, #25
 8017134:	d5fb      	bpl.n	801712e <_printf_i+0x1ca>
 8017136:	8018      	strh	r0, [r3, #0]
 8017138:	2300      	movs	r3, #0
 801713a:	4616      	mov	r6, r2
 801713c:	6123      	str	r3, [r4, #16]
 801713e:	e7ba      	b.n	80170b6 <_printf_i+0x152>
 8017140:	680b      	ldr	r3, [r1, #0]
 8017142:	1d1a      	adds	r2, r3, #4
 8017144:	600a      	str	r2, [r1, #0]
 8017146:	681e      	ldr	r6, [r3, #0]
 8017148:	2100      	movs	r1, #0
 801714a:	4630      	mov	r0, r6
 801714c:	6862      	ldr	r2, [r4, #4]
 801714e:	f7ff fb21 	bl	8016794 <memchr>
 8017152:	b108      	cbz	r0, 8017158 <_printf_i+0x1f4>
 8017154:	1b80      	subs	r0, r0, r6
 8017156:	6060      	str	r0, [r4, #4]
 8017158:	6863      	ldr	r3, [r4, #4]
 801715a:	6123      	str	r3, [r4, #16]
 801715c:	2300      	movs	r3, #0
 801715e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017162:	e7a8      	b.n	80170b6 <_printf_i+0x152>
 8017164:	4632      	mov	r2, r6
 8017166:	4649      	mov	r1, r9
 8017168:	4640      	mov	r0, r8
 801716a:	6923      	ldr	r3, [r4, #16]
 801716c:	47d0      	blx	sl
 801716e:	3001      	adds	r0, #1
 8017170:	d0ab      	beq.n	80170ca <_printf_i+0x166>
 8017172:	6823      	ldr	r3, [r4, #0]
 8017174:	079b      	lsls	r3, r3, #30
 8017176:	d413      	bmi.n	80171a0 <_printf_i+0x23c>
 8017178:	68e0      	ldr	r0, [r4, #12]
 801717a:	9b03      	ldr	r3, [sp, #12]
 801717c:	4298      	cmp	r0, r3
 801717e:	bfb8      	it	lt
 8017180:	4618      	movlt	r0, r3
 8017182:	e7a4      	b.n	80170ce <_printf_i+0x16a>
 8017184:	2301      	movs	r3, #1
 8017186:	4632      	mov	r2, r6
 8017188:	4649      	mov	r1, r9
 801718a:	4640      	mov	r0, r8
 801718c:	47d0      	blx	sl
 801718e:	3001      	adds	r0, #1
 8017190:	d09b      	beq.n	80170ca <_printf_i+0x166>
 8017192:	3501      	adds	r5, #1
 8017194:	68e3      	ldr	r3, [r4, #12]
 8017196:	9903      	ldr	r1, [sp, #12]
 8017198:	1a5b      	subs	r3, r3, r1
 801719a:	42ab      	cmp	r3, r5
 801719c:	dcf2      	bgt.n	8017184 <_printf_i+0x220>
 801719e:	e7eb      	b.n	8017178 <_printf_i+0x214>
 80171a0:	2500      	movs	r5, #0
 80171a2:	f104 0619 	add.w	r6, r4, #25
 80171a6:	e7f5      	b.n	8017194 <_printf_i+0x230>
 80171a8:	08017dfa 	.word	0x08017dfa
 80171ac:	08017e0b 	.word	0x08017e0b

080171b0 <__retarget_lock_acquire_recursive>:
 80171b0:	4770      	bx	lr

080171b2 <__retarget_lock_release_recursive>:
 80171b2:	4770      	bx	lr

080171b4 <_realloc_r>:
 80171b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171b6:	4607      	mov	r7, r0
 80171b8:	4614      	mov	r4, r2
 80171ba:	460e      	mov	r6, r1
 80171bc:	b921      	cbnz	r1, 80171c8 <_realloc_r+0x14>
 80171be:	4611      	mov	r1, r2
 80171c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80171c4:	f7ff bb7e 	b.w	80168c4 <_malloc_r>
 80171c8:	b922      	cbnz	r2, 80171d4 <_realloc_r+0x20>
 80171ca:	f7ff fb2f 	bl	801682c <_free_r>
 80171ce:	4625      	mov	r5, r4
 80171d0:	4628      	mov	r0, r5
 80171d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171d4:	f000 f814 	bl	8017200 <_malloc_usable_size_r>
 80171d8:	42a0      	cmp	r0, r4
 80171da:	d20f      	bcs.n	80171fc <_realloc_r+0x48>
 80171dc:	4621      	mov	r1, r4
 80171de:	4638      	mov	r0, r7
 80171e0:	f7ff fb70 	bl	80168c4 <_malloc_r>
 80171e4:	4605      	mov	r5, r0
 80171e6:	2800      	cmp	r0, #0
 80171e8:	d0f2      	beq.n	80171d0 <_realloc_r+0x1c>
 80171ea:	4631      	mov	r1, r6
 80171ec:	4622      	mov	r2, r4
 80171ee:	f7ff faed 	bl	80167cc <memcpy>
 80171f2:	4631      	mov	r1, r6
 80171f4:	4638      	mov	r0, r7
 80171f6:	f7ff fb19 	bl	801682c <_free_r>
 80171fa:	e7e9      	b.n	80171d0 <_realloc_r+0x1c>
 80171fc:	4635      	mov	r5, r6
 80171fe:	e7e7      	b.n	80171d0 <_realloc_r+0x1c>

08017200 <_malloc_usable_size_r>:
 8017200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017204:	1f18      	subs	r0, r3, #4
 8017206:	2b00      	cmp	r3, #0
 8017208:	bfbc      	itt	lt
 801720a:	580b      	ldrlt	r3, [r1, r0]
 801720c:	18c0      	addlt	r0, r0, r3
 801720e:	4770      	bx	lr

08017210 <_init>:
 8017210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017212:	bf00      	nop
 8017214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017216:	bc08      	pop	{r3}
 8017218:	469e      	mov	lr, r3
 801721a:	4770      	bx	lr

0801721c <_fini>:
 801721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801721e:	bf00      	nop
 8017220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017222:	bc08      	pop	{r3}
 8017224:	469e      	mov	lr, r3
 8017226:	4770      	bx	lr
